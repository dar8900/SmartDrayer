
SmartDrayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f2c0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003388  0800f3d0  0800f3d0  0001f3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012758  08012758  0003010c  2**0
                  CONTENTS
  4 .ARM          00000000  08012758  08012758  0003010c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012758  08012758  0003010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012758  08012758  00022758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801275c  0801275c  0002275c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08012760  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000594  2000010c  0801286c  0003010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006a0  0801286c  000306a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0003010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00115cda  00000000  00000000  00030135  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008d1f  00000000  00000000  00145e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003960  00000000  00000000  0014eb30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003678  00000000  00000000  00152490  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e482  00000000  00000000  00155b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00029f5b  00000000  00000000  00173f8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a706a  00000000  00000000  0019dee5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00244f4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00011374  00000000  00000000  00244fcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000010c 	.word	0x2000010c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800f3b8 	.word	0x0800f3b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000110 	.word	0x20000110
 800014c:	0800f3b8 	.word	0x0800f3b8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2f>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000904:	bf24      	itt	cs
 8000906:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800090a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800090e:	d90d      	bls.n	800092c <__aeabi_d2f+0x30>
 8000910:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000914:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000918:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800091c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000920:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000924:	bf08      	it	eq
 8000926:	f020 0001 	biceq.w	r0, r0, #1
 800092a:	4770      	bx	lr
 800092c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000930:	d121      	bne.n	8000976 <__aeabi_d2f+0x7a>
 8000932:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000936:	bfbc      	itt	lt
 8000938:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800093c:	4770      	bxlt	lr
 800093e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000942:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000946:	f1c2 0218 	rsb	r2, r2, #24
 800094a:	f1c2 0c20 	rsb	ip, r2, #32
 800094e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000952:	fa20 f002 	lsr.w	r0, r0, r2
 8000956:	bf18      	it	ne
 8000958:	f040 0001 	orrne.w	r0, r0, #1
 800095c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000960:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000964:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000968:	ea40 000c 	orr.w	r0, r0, ip
 800096c:	fa23 f302 	lsr.w	r3, r3, r2
 8000970:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000974:	e7cc      	b.n	8000910 <__aeabi_d2f+0x14>
 8000976:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097a:	d107      	bne.n	800098c <__aeabi_d2f+0x90>
 800097c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000980:	bf1e      	ittt	ne
 8000982:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000986:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800098a:	4770      	bxne	lr
 800098c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000990:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000994:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_frsub>:
 800099c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009a0:	e002      	b.n	80009a8 <__addsf3>
 80009a2:	bf00      	nop

080009a4 <__aeabi_fsub>:
 80009a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009a8 <__addsf3>:
 80009a8:	0042      	lsls	r2, r0, #1
 80009aa:	bf1f      	itttt	ne
 80009ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009b0:	ea92 0f03 	teqne	r2, r3
 80009b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009bc:	d06a      	beq.n	8000a94 <__addsf3+0xec>
 80009be:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009c6:	bfc1      	itttt	gt
 80009c8:	18d2      	addgt	r2, r2, r3
 80009ca:	4041      	eorgt	r1, r0
 80009cc:	4048      	eorgt	r0, r1
 80009ce:	4041      	eorgt	r1, r0
 80009d0:	bfb8      	it	lt
 80009d2:	425b      	neglt	r3, r3
 80009d4:	2b19      	cmp	r3, #25
 80009d6:	bf88      	it	hi
 80009d8:	4770      	bxhi	lr
 80009da:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009f6:	bf18      	it	ne
 80009f8:	4249      	negne	r1, r1
 80009fa:	ea92 0f03 	teq	r2, r3
 80009fe:	d03f      	beq.n	8000a80 <__addsf3+0xd8>
 8000a00:	f1a2 0201 	sub.w	r2, r2, #1
 8000a04:	fa41 fc03 	asr.w	ip, r1, r3
 8000a08:	eb10 000c 	adds.w	r0, r0, ip
 8000a0c:	f1c3 0320 	rsb	r3, r3, #32
 8000a10:	fa01 f103 	lsl.w	r1, r1, r3
 8000a14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a18:	d502      	bpl.n	8000a20 <__addsf3+0x78>
 8000a1a:	4249      	negs	r1, r1
 8000a1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a24:	d313      	bcc.n	8000a4e <__addsf3+0xa6>
 8000a26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a2a:	d306      	bcc.n	8000a3a <__addsf3+0x92>
 8000a2c:	0840      	lsrs	r0, r0, #1
 8000a2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a32:	f102 0201 	add.w	r2, r2, #1
 8000a36:	2afe      	cmp	r2, #254	; 0xfe
 8000a38:	d251      	bcs.n	8000ade <__addsf3+0x136>
 8000a3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a42:	bf08      	it	eq
 8000a44:	f020 0001 	biceq.w	r0, r0, #1
 8000a48:	ea40 0003 	orr.w	r0, r0, r3
 8000a4c:	4770      	bx	lr
 8000a4e:	0049      	lsls	r1, r1, #1
 8000a50:	eb40 0000 	adc.w	r0, r0, r0
 8000a54:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a58:	f1a2 0201 	sub.w	r2, r2, #1
 8000a5c:	d1ed      	bne.n	8000a3a <__addsf3+0x92>
 8000a5e:	fab0 fc80 	clz	ip, r0
 8000a62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a66:	ebb2 020c 	subs.w	r2, r2, ip
 8000a6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a6e:	bfaa      	itet	ge
 8000a70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a74:	4252      	neglt	r2, r2
 8000a76:	4318      	orrge	r0, r3
 8000a78:	bfbc      	itt	lt
 8000a7a:	40d0      	lsrlt	r0, r2
 8000a7c:	4318      	orrlt	r0, r3
 8000a7e:	4770      	bx	lr
 8000a80:	f092 0f00 	teq	r2, #0
 8000a84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a88:	bf06      	itte	eq
 8000a8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a8e:	3201      	addeq	r2, #1
 8000a90:	3b01      	subne	r3, #1
 8000a92:	e7b5      	b.n	8000a00 <__addsf3+0x58>
 8000a94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa2:	d021      	beq.n	8000ae8 <__addsf3+0x140>
 8000aa4:	ea92 0f03 	teq	r2, r3
 8000aa8:	d004      	beq.n	8000ab4 <__addsf3+0x10c>
 8000aaa:	f092 0f00 	teq	r2, #0
 8000aae:	bf08      	it	eq
 8000ab0:	4608      	moveq	r0, r1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea90 0f01 	teq	r0, r1
 8000ab8:	bf1c      	itt	ne
 8000aba:	2000      	movne	r0, #0
 8000abc:	4770      	bxne	lr
 8000abe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ac2:	d104      	bne.n	8000ace <__addsf3+0x126>
 8000ac4:	0040      	lsls	r0, r0, #1
 8000ac6:	bf28      	it	cs
 8000ac8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	4770      	bx	lr
 8000ace:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ad2:	bf3c      	itt	cc
 8000ad4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bxcc	lr
 8000ada:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ade:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ae2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae6:	4770      	bx	lr
 8000ae8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000aec:	bf16      	itet	ne
 8000aee:	4608      	movne	r0, r1
 8000af0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000af4:	4601      	movne	r1, r0
 8000af6:	0242      	lsls	r2, r0, #9
 8000af8:	bf06      	itte	eq
 8000afa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000afe:	ea90 0f01 	teqeq	r0, r1
 8000b02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_ui2f>:
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	e004      	b.n	8000b18 <__aeabi_i2f+0x8>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_i2f>:
 8000b10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b14:	bf48      	it	mi
 8000b16:	4240      	negmi	r0, r0
 8000b18:	ea5f 0c00 	movs.w	ip, r0
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b24:	4601      	mov	r1, r0
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	e01c      	b.n	8000b66 <__aeabi_l2f+0x2a>

08000b2c <__aeabi_ul2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f04f 0300 	mov.w	r3, #0
 8000b38:	e00a      	b.n	8000b50 <__aeabi_l2f+0x14>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_l2f>:
 8000b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b40:	bf08      	it	eq
 8000b42:	4770      	bxeq	lr
 8000b44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b48:	d502      	bpl.n	8000b50 <__aeabi_l2f+0x14>
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b50:	ea5f 0c01 	movs.w	ip, r1
 8000b54:	bf02      	ittt	eq
 8000b56:	4684      	moveq	ip, r0
 8000b58:	4601      	moveq	r1, r0
 8000b5a:	2000      	moveq	r0, #0
 8000b5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b60:	bf08      	it	eq
 8000b62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b6a:	fabc f28c 	clz	r2, ip
 8000b6e:	3a08      	subs	r2, #8
 8000b70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b74:	db10      	blt.n	8000b98 <__aeabi_l2f+0x5c>
 8000b76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b7a:	4463      	add	r3, ip
 8000b7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b80:	f1c2 0220 	rsb	r2, r2, #32
 8000b84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b88:	fa20 f202 	lsr.w	r2, r0, r2
 8000b8c:	eb43 0002 	adc.w	r0, r3, r2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f102 0220 	add.w	r2, r2, #32
 8000b9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ba0:	f1c2 0220 	rsb	r2, r2, #32
 8000ba4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ba8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bac:	eb43 0002 	adc.w	r0, r3, r2
 8000bb0:	bf08      	it	eq
 8000bb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_fmul>:
 8000bb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bc6:	ea92 0f0c 	teqne	r2, ip
 8000bca:	ea93 0f0c 	teqne	r3, ip
 8000bce:	d06f      	beq.n	8000cb0 <__aeabi_fmul+0xf8>
 8000bd0:	441a      	add	r2, r3
 8000bd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bd6:	0240      	lsls	r0, r0, #9
 8000bd8:	bf18      	it	ne
 8000bda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bde:	d01e      	beq.n	8000c1e <__aeabi_fmul+0x66>
 8000be0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000be4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000be8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bec:	fba0 3101 	umull	r3, r1, r0, r1
 8000bf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bf8:	bf3e      	ittt	cc
 8000bfa:	0049      	lslcc	r1, r1, #1
 8000bfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c00:	005b      	lslcc	r3, r3, #1
 8000c02:	ea40 0001 	orr.w	r0, r0, r1
 8000c06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c0a:	2afd      	cmp	r2, #253	; 0xfd
 8000c0c:	d81d      	bhi.n	8000c4a <__aeabi_fmul+0x92>
 8000c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c16:	bf08      	it	eq
 8000c18:	f020 0001 	biceq.w	r0, r0, #1
 8000c1c:	4770      	bx	lr
 8000c1e:	f090 0f00 	teq	r0, #0
 8000c22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c26:	bf08      	it	eq
 8000c28:	0249      	lsleq	r1, r1, #9
 8000c2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c32:	3a7f      	subs	r2, #127	; 0x7f
 8000c34:	bfc2      	ittt	gt
 8000c36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c3e:	4770      	bxgt	lr
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	dc5d      	bgt.n	8000d08 <__aeabi_fmul+0x150>
 8000c4c:	f112 0f19 	cmn.w	r2, #25
 8000c50:	bfdc      	itt	le
 8000c52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c56:	4770      	bxle	lr
 8000c58:	f1c2 0200 	rsb	r2, r2, #0
 8000c5c:	0041      	lsls	r1, r0, #1
 8000c5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c62:	f1c2 0220 	rsb	r2, r2, #32
 8000c66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c6e:	f140 0000 	adc.w	r0, r0, #0
 8000c72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c76:	bf08      	it	eq
 8000c78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c7c:	4770      	bx	lr
 8000c7e:	f092 0f00 	teq	r2, #0
 8000c82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c86:	bf02      	ittt	eq
 8000c88:	0040      	lsleq	r0, r0, #1
 8000c8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c8e:	3a01      	subeq	r2, #1
 8000c90:	d0f9      	beq.n	8000c86 <__aeabi_fmul+0xce>
 8000c92:	ea40 000c 	orr.w	r0, r0, ip
 8000c96:	f093 0f00 	teq	r3, #0
 8000c9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c9e:	bf02      	ittt	eq
 8000ca0:	0049      	lsleq	r1, r1, #1
 8000ca2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ca6:	3b01      	subeq	r3, #1
 8000ca8:	d0f9      	beq.n	8000c9e <__aeabi_fmul+0xe6>
 8000caa:	ea41 010c 	orr.w	r1, r1, ip
 8000cae:	e78f      	b.n	8000bd0 <__aeabi_fmul+0x18>
 8000cb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cb4:	ea92 0f0c 	teq	r2, ip
 8000cb8:	bf18      	it	ne
 8000cba:	ea93 0f0c 	teqne	r3, ip
 8000cbe:	d00a      	beq.n	8000cd6 <__aeabi_fmul+0x11e>
 8000cc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cc4:	bf18      	it	ne
 8000cc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cca:	d1d8      	bne.n	8000c7e <__aeabi_fmul+0xc6>
 8000ccc:	ea80 0001 	eor.w	r0, r0, r1
 8000cd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f090 0f00 	teq	r0, #0
 8000cda:	bf17      	itett	ne
 8000cdc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ce0:	4608      	moveq	r0, r1
 8000ce2:	f091 0f00 	teqne	r1, #0
 8000ce6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cea:	d014      	beq.n	8000d16 <__aeabi_fmul+0x15e>
 8000cec:	ea92 0f0c 	teq	r2, ip
 8000cf0:	d101      	bne.n	8000cf6 <__aeabi_fmul+0x13e>
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	d10f      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000cf6:	ea93 0f0c 	teq	r3, ip
 8000cfa:	d103      	bne.n	8000d04 <__aeabi_fmul+0x14c>
 8000cfc:	024b      	lsls	r3, r1, #9
 8000cfe:	bf18      	it	ne
 8000d00:	4608      	movne	r0, r1
 8000d02:	d108      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000d04:	ea80 0001 	eor.w	r0, r0, r1
 8000d08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d14:	4770      	bx	lr
 8000d16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_fdiv>:
 8000d20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d28:	bf1e      	ittt	ne
 8000d2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d2e:	ea92 0f0c 	teqne	r2, ip
 8000d32:	ea93 0f0c 	teqne	r3, ip
 8000d36:	d069      	beq.n	8000e0c <__aeabi_fdiv+0xec>
 8000d38:	eba2 0203 	sub.w	r2, r2, r3
 8000d3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d40:	0249      	lsls	r1, r1, #9
 8000d42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d46:	d037      	beq.n	8000db8 <__aeabi_fdiv+0x98>
 8000d48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	bf38      	it	cc
 8000d5c:	005b      	lslcc	r3, r3, #1
 8000d5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d66:	428b      	cmp	r3, r1
 8000d68:	bf24      	itt	cs
 8000d6a:	1a5b      	subcs	r3, r3, r1
 8000d6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d74:	bf24      	itt	cs
 8000d76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d82:	bf24      	itt	cs
 8000d84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d90:	bf24      	itt	cs
 8000d92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d9a:	011b      	lsls	r3, r3, #4
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000da2:	d1e0      	bne.n	8000d66 <__aeabi_fdiv+0x46>
 8000da4:	2afd      	cmp	r2, #253	; 0xfd
 8000da6:	f63f af50 	bhi.w	8000c4a <__aeabi_fmul+0x92>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db0:	bf08      	it	eq
 8000db2:	f020 0001 	biceq.w	r0, r0, #1
 8000db6:	4770      	bx	lr
 8000db8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dbc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc0:	327f      	adds	r2, #127	; 0x7f
 8000dc2:	bfc2      	ittt	gt
 8000dc4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dcc:	4770      	bxgt	lr
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd2:	f04f 0300 	mov.w	r3, #0
 8000dd6:	3a01      	subs	r2, #1
 8000dd8:	e737      	b.n	8000c4a <__aeabi_fmul+0x92>
 8000dda:	f092 0f00 	teq	r2, #0
 8000dde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de2:	bf02      	ittt	eq
 8000de4:	0040      	lsleq	r0, r0, #1
 8000de6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dea:	3a01      	subeq	r2, #1
 8000dec:	d0f9      	beq.n	8000de2 <__aeabi_fdiv+0xc2>
 8000dee:	ea40 000c 	orr.w	r0, r0, ip
 8000df2:	f093 0f00 	teq	r3, #0
 8000df6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfa:	bf02      	ittt	eq
 8000dfc:	0049      	lsleq	r1, r1, #1
 8000dfe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e02:	3b01      	subeq	r3, #1
 8000e04:	d0f9      	beq.n	8000dfa <__aeabi_fdiv+0xda>
 8000e06:	ea41 010c 	orr.w	r1, r1, ip
 8000e0a:	e795      	b.n	8000d38 <__aeabi_fdiv+0x18>
 8000e0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e10:	ea92 0f0c 	teq	r2, ip
 8000e14:	d108      	bne.n	8000e28 <__aeabi_fdiv+0x108>
 8000e16:	0242      	lsls	r2, r0, #9
 8000e18:	f47f af7d 	bne.w	8000d16 <__aeabi_fmul+0x15e>
 8000e1c:	ea93 0f0c 	teq	r3, ip
 8000e20:	f47f af70 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e776      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e28:	ea93 0f0c 	teq	r3, ip
 8000e2c:	d104      	bne.n	8000e38 <__aeabi_fdiv+0x118>
 8000e2e:	024b      	lsls	r3, r1, #9
 8000e30:	f43f af4c 	beq.w	8000ccc <__aeabi_fmul+0x114>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e76e      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e3c:	bf18      	it	ne
 8000e3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e42:	d1ca      	bne.n	8000dda <__aeabi_fdiv+0xba>
 8000e44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e48:	f47f af5c 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e50:	f47f af3c 	bne.w	8000ccc <__aeabi_fmul+0x114>
 8000e54:	e75f      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e56:	bf00      	nop

08000e58 <__aeabi_f2uiz>:
 8000e58:	0042      	lsls	r2, r0, #1
 8000e5a:	d20e      	bcs.n	8000e7a <__aeabi_f2uiz+0x22>
 8000e5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e60:	d30b      	bcc.n	8000e7a <__aeabi_f2uiz+0x22>
 8000e62:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e6a:	d409      	bmi.n	8000e80 <__aeabi_f2uiz+0x28>
 8000e6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e74:	fa23 f002 	lsr.w	r0, r3, r2
 8000e78:	4770      	bx	lr
 8000e7a:	f04f 0000 	mov.w	r0, #0
 8000e7e:	4770      	bx	lr
 8000e80:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e84:	d101      	bne.n	8000e8a <__aeabi_f2uiz+0x32>
 8000e86:	0242      	lsls	r2, r0, #9
 8000e88:	d102      	bne.n	8000e90 <__aeabi_f2uiz+0x38>
 8000e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8e:	4770      	bx	lr
 8000e90:	f04f 0000 	mov.w	r0, #0
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af02      	add	r7, sp, #8
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	70fb      	strb	r3, [r7, #3]
 8000eaa:	460b      	mov	r3, r1
 8000eac:	70bb      	strb	r3, [r7, #2]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8000eb2:	78fa      	ldrb	r2, [r7, #3]
 8000eb4:	787b      	ldrb	r3, [r7, #1]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	b2d8      	uxtb	r0, r3
 8000eba:	78ba      	ldrb	r2, [r7, #2]
 8000ebc:	7c3b      	ldrb	r3, [r7, #16]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	78ba      	ldrb	r2, [r7, #2]
 8000ec4:	78f9      	ldrb	r1, [r7, #3]
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	4603      	mov	r3, r0
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f001 fad9 	bl	8002482 <u8g2_IsIntersection>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d013      	beq.n	8000efe <u8g2_DrawBox+0x66>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8000ed6:	e00e      	b.n	8000ef6 <u8g2_DrawBox+0x5e>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8000ed8:	7878      	ldrb	r0, [r7, #1]
 8000eda:	78ba      	ldrb	r2, [r7, #2]
 8000edc:	78f9      	ldrb	r1, [r7, #3]
 8000ede:	2300      	movs	r3, #0
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f001 f999 	bl	800221c <u8g2_DrawHVLine>
    y++;    
 8000eea:	78bb      	ldrb	r3, [r7, #2]
 8000eec:	3301      	adds	r3, #1
 8000eee:	70bb      	strb	r3, [r7, #2]
    h--;
 8000ef0:	7c3b      	ldrb	r3, [r7, #16]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 8000ef6:	7c3b      	ldrb	r3, [r7, #16]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1ed      	bne.n	8000ed8 <u8g2_DrawBox+0x40>
 8000efc:	e000      	b.n	8000f00 <u8g2_DrawBox+0x68>
    return;
 8000efe:	bf00      	nop
  }
}
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b086      	sub	sp, #24
 8000f0a:	af02      	add	r7, sp, #8
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	4608      	mov	r0, r1
 8000f10:	4611      	mov	r1, r2
 8000f12:	461a      	mov	r2, r3
 8000f14:	4603      	mov	r3, r0
 8000f16:	70fb      	strb	r3, [r7, #3]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	70bb      	strb	r3, [r7, #2]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xtmp = x;
 8000f20:	78fb      	ldrb	r3, [r7, #3]
 8000f22:	73fb      	strb	r3, [r7, #15]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8000f24:	78fa      	ldrb	r2, [r7, #3]
 8000f26:	787b      	ldrb	r3, [r7, #1]
 8000f28:	4413      	add	r3, r2
 8000f2a:	b2d8      	uxtb	r0, r3
 8000f2c:	78ba      	ldrb	r2, [r7, #2]
 8000f2e:	7e3b      	ldrb	r3, [r7, #24]
 8000f30:	4413      	add	r3, r2
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	78ba      	ldrb	r2, [r7, #2]
 8000f36:	78f9      	ldrb	r1, [r7, #3]
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f001 faa0 	bl	8002482 <u8g2_IsIntersection>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d03b      	beq.n	8000fc0 <u8g2_DrawFrame+0xba>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8000f48:	7878      	ldrb	r0, [r7, #1]
 8000f4a:	78ba      	ldrb	r2, [r7, #2]
 8000f4c:	78f9      	ldrb	r1, [r7, #3]
 8000f4e:	2300      	movs	r3, #0
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	4603      	mov	r3, r0
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f001 f961 	bl	800221c <u8g2_DrawHVLine>
  if (h >= 2) {
 8000f5a:	7e3b      	ldrb	r3, [r7, #24]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d930      	bls.n	8000fc2 <u8g2_DrawFrame+0xbc>
    h-=2;
 8000f60:	7e3b      	ldrb	r3, [r7, #24]
 8000f62:	3b02      	subs	r3, #2
 8000f64:	763b      	strb	r3, [r7, #24]
    y++;
 8000f66:	78bb      	ldrb	r3, [r7, #2]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	70bb      	strb	r3, [r7, #2]
    if (h > 0) {
 8000f6c:	7e3b      	ldrb	r3, [r7, #24]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d01c      	beq.n	8000fac <u8g2_DrawFrame+0xa6>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8000f72:	7e38      	ldrb	r0, [r7, #24]
 8000f74:	78ba      	ldrb	r2, [r7, #2]
 8000f76:	78f9      	ldrb	r1, [r7, #3]
 8000f78:	2301      	movs	r3, #1
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f001 f94c 	bl	800221c <u8g2_DrawHVLine>
      x+=w;
 8000f84:	78fa      	ldrb	r2, [r7, #3]
 8000f86:	787b      	ldrb	r3, [r7, #1]
 8000f88:	4413      	add	r3, r2
 8000f8a:	70fb      	strb	r3, [r7, #3]
      x--;
 8000f8c:	78fb      	ldrb	r3, [r7, #3]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	70fb      	strb	r3, [r7, #3]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8000f92:	7e38      	ldrb	r0, [r7, #24]
 8000f94:	78ba      	ldrb	r2, [r7, #2]
 8000f96:	78f9      	ldrb	r1, [r7, #3]
 8000f98:	2301      	movs	r3, #1
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f001 f93c 	bl	800221c <u8g2_DrawHVLine>
      y+=h;
 8000fa4:	78ba      	ldrb	r2, [r7, #2]
 8000fa6:	7e3b      	ldrb	r3, [r7, #24]
 8000fa8:	4413      	add	r3, r2
 8000faa:	70bb      	strb	r3, [r7, #2]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8000fac:	7878      	ldrb	r0, [r7, #1]
 8000fae:	78ba      	ldrb	r2, [r7, #2]
 8000fb0:	7bf9      	ldrb	r1, [r7, #15]
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f001 f92f 	bl	800221c <u8g2_DrawHVLine>
 8000fbe:	e000      	b.n	8000fc2 <u8g2_DrawFrame+0xbc>
    return;
 8000fc0:	bf00      	nop
  }
}
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <u8g2_DrawRFrame>:
  }
}


void u8g2_DrawRFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af02      	add	r7, sp, #8
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	70fb      	strb	r3, [r7, #3]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	70bb      	strb	r3, [r7, #2]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xl, yu;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8000fe2:	78fa      	ldrb	r2, [r7, #3]
 8000fe4:	787b      	ldrb	r3, [r7, #1]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	b2d8      	uxtb	r0, r3
 8000fea:	78ba      	ldrb	r2, [r7, #2]
 8000fec:	7e3b      	ldrb	r3, [r7, #24]
 8000fee:	4413      	add	r3, r2
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	78ba      	ldrb	r2, [r7, #2]
 8000ff4:	78f9      	ldrb	r1, [r7, #3]
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f001 fa41 	bl	8002482 <u8g2_IsIntersection>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	f000 8095 	beq.w	8001132 <u8g2_DrawRFrame+0x16a>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	73fb      	strb	r3, [r7, #15]
  xl += r;
 800100c:	7bfa      	ldrb	r2, [r7, #15]
 800100e:	7f3b      	ldrb	r3, [r7, #28]
 8001010:	4413      	add	r3, r2
 8001012:	73fb      	strb	r3, [r7, #15]
  yu = y;
 8001014:	78bb      	ldrb	r3, [r7, #2]
 8001016:	73bb      	strb	r3, [r7, #14]
  yu += r;
 8001018:	7bba      	ldrb	r2, [r7, #14]
 800101a:	7f3b      	ldrb	r3, [r7, #28]
 800101c:	4413      	add	r3, r2
 800101e:	73bb      	strb	r3, [r7, #14]
 
  {
    u8g2_uint_t yl, xr;
      
    xr = x;
 8001020:	78fb      	ldrb	r3, [r7, #3]
 8001022:	737b      	strb	r3, [r7, #13]
    xr += w;
 8001024:	7b7a      	ldrb	r2, [r7, #13]
 8001026:	787b      	ldrb	r3, [r7, #1]
 8001028:	4413      	add	r3, r2
 800102a:	737b      	strb	r3, [r7, #13]
    xr -= r;
 800102c:	7b7a      	ldrb	r2, [r7, #13]
 800102e:	7f3b      	ldrb	r3, [r7, #28]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	737b      	strb	r3, [r7, #13]
    xr -= 1;
 8001034:	7b7b      	ldrb	r3, [r7, #13]
 8001036:	3b01      	subs	r3, #1
 8001038:	737b      	strb	r3, [r7, #13]
    
    yl = y;
 800103a:	78bb      	ldrb	r3, [r7, #2]
 800103c:	733b      	strb	r3, [r7, #12]
    yl += h;
 800103e:	7b3a      	ldrb	r2, [r7, #12]
 8001040:	7e3b      	ldrb	r3, [r7, #24]
 8001042:	4413      	add	r3, r2
 8001044:	733b      	strb	r3, [r7, #12]
    yl -= r; 
 8001046:	7b3a      	ldrb	r2, [r7, #12]
 8001048:	7f3b      	ldrb	r3, [r7, #28]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	733b      	strb	r3, [r7, #12]
    yl -= 1;
 800104e:	7b3b      	ldrb	r3, [r7, #12]
 8001050:	3b01      	subs	r3, #1
 8001052:	733b      	strb	r3, [r7, #12]

    u8g2_DrawCircle(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 8001054:	7f38      	ldrb	r0, [r7, #28]
 8001056:	7bba      	ldrb	r2, [r7, #14]
 8001058:	7bf9      	ldrb	r1, [r7, #15]
 800105a:	2302      	movs	r3, #2
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	4603      	mov	r3, r0
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 f9d0 	bl	8001406 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 8001066:	7f38      	ldrb	r0, [r7, #28]
 8001068:	7bba      	ldrb	r2, [r7, #14]
 800106a:	7b79      	ldrb	r1, [r7, #13]
 800106c:	2301      	movs	r3, #1
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	4603      	mov	r3, r0
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 f9c7 	bl	8001406 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 8001078:	7f38      	ldrb	r0, [r7, #28]
 800107a:	7b3a      	ldrb	r2, [r7, #12]
 800107c:	7bf9      	ldrb	r1, [r7, #15]
 800107e:	2304      	movs	r3, #4
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	4603      	mov	r3, r0
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f9be 	bl	8001406 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 800108a:	7f38      	ldrb	r0, [r7, #28]
 800108c:	7b3a      	ldrb	r2, [r7, #12]
 800108e:	7b79      	ldrb	r1, [r7, #13]
 8001090:	2308      	movs	r3, #8
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	4603      	mov	r3, r0
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f000 f9b5 	bl	8001406 <u8g2_DrawCircle>
  }

  {
    u8g2_uint_t ww, hh;

    ww = w;
 800109c:	787b      	ldrb	r3, [r7, #1]
 800109e:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 80010a0:	7afa      	ldrb	r2, [r7, #11]
 80010a2:	7f3b      	ldrb	r3, [r7, #28]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 80010a8:	7afa      	ldrb	r2, [r7, #11]
 80010aa:	7f3b      	ldrb	r3, [r7, #28]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	72fb      	strb	r3, [r7, #11]
    hh = h;
 80010b0:	7e3b      	ldrb	r3, [r7, #24]
 80010b2:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 80010b4:	7aba      	ldrb	r2, [r7, #10]
 80010b6:	7f3b      	ldrb	r3, [r7, #28]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 80010bc:	7aba      	ldrb	r2, [r7, #10]
 80010be:	7f3b      	ldrb	r3, [r7, #28]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	72bb      	strb	r3, [r7, #10]
    
    xl++;
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	3301      	adds	r3, #1
 80010c8:	73fb      	strb	r3, [r7, #15]
    yu++;
 80010ca:	7bbb      	ldrb	r3, [r7, #14]
 80010cc:	3301      	adds	r3, #1
 80010ce:	73bb      	strb	r3, [r7, #14]
    
    if ( ww >= 3 )
 80010d0:	7afb      	ldrb	r3, [r7, #11]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d914      	bls.n	8001100 <u8g2_DrawRFrame+0x138>
    {
      ww -= 2;
 80010d6:	7afb      	ldrb	r3, [r7, #11]
 80010d8:	3b02      	subs	r3, #2
 80010da:	72fb      	strb	r3, [r7, #11]
      h--;
 80010dc:	7e3b      	ldrb	r3, [r7, #24]
 80010de:	3b01      	subs	r3, #1
 80010e0:	763b      	strb	r3, [r7, #24]
      u8g2_DrawHLine(u8g2, xl, y, ww);
 80010e2:	7afb      	ldrb	r3, [r7, #11]
 80010e4:	78ba      	ldrb	r2, [r7, #2]
 80010e6:	7bf9      	ldrb	r1, [r7, #15]
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f001 f91a 	bl	8002322 <u8g2_DrawHLine>
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
 80010ee:	78ba      	ldrb	r2, [r7, #2]
 80010f0:	7e3b      	ldrb	r3, [r7, #24]
 80010f2:	4413      	add	r3, r2
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	7afb      	ldrb	r3, [r7, #11]
 80010f8:	7bf9      	ldrb	r1, [r7, #15]
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f001 f911 	bl	8002322 <u8g2_DrawHLine>
    }
    
    if ( hh >= 3 )
 8001100:	7abb      	ldrb	r3, [r7, #10]
 8001102:	2b02      	cmp	r3, #2
 8001104:	d916      	bls.n	8001134 <u8g2_DrawRFrame+0x16c>
    {
      hh -= 2;
 8001106:	7abb      	ldrb	r3, [r7, #10]
 8001108:	3b02      	subs	r3, #2
 800110a:	72bb      	strb	r3, [r7, #10]
      w--;
 800110c:	787b      	ldrb	r3, [r7, #1]
 800110e:	3b01      	subs	r3, #1
 8001110:	707b      	strb	r3, [r7, #1]
      u8g2_DrawVLine(u8g2, x, yu, hh);
 8001112:	7abb      	ldrb	r3, [r7, #10]
 8001114:	7bba      	ldrb	r2, [r7, #14]
 8001116:	78f9      	ldrb	r1, [r7, #3]
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f001 f91c 	bl	8002356 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x+w, yu, hh);
 800111e:	78fa      	ldrb	r2, [r7, #3]
 8001120:	787b      	ldrb	r3, [r7, #1]
 8001122:	4413      	add	r3, r2
 8001124:	b2d9      	uxtb	r1, r3
 8001126:	7abb      	ldrb	r3, [r7, #10]
 8001128:	7bba      	ldrb	r2, [r7, #14]
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f001 f913 	bl	8002356 <u8g2_DrawVLine>
 8001130:	e000      	b.n	8001134 <u8g2_DrawRFrame+0x16c>
    return;
 8001132:	bf00      	nop
    }
  }
}
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b084      	sub	sp, #16
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	7c1b      	ldrb	r3, [r3, #16]
 8001148:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001150:	461a      	mov	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	fb02 f303 	mul.w	r3, r2, r3
 8001158:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f00d fcde 	bl	800eb2a <memset>
}
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b086      	sub	sp, #24
 800117a:	af02      	add	r7, sp, #8
 800117c:	6078      	str	r0, [r7, #4]
 800117e:	460b      	mov	r3, r1
 8001180:	70fb      	strb	r3, [r7, #3]
 8001182:	4613      	mov	r3, r2
 8001184:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	7c1b      	ldrb	r3, [r3, #16]
 800118c:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 800118e:	78fb      	ldrb	r3, [r7, #3]
 8001190:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001196:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	b29b      	uxth	r3, r3
 800119c:	89ba      	ldrh	r2, [r7, #12]
 800119e:	fb02 f303 	mul.w	r3, r2, r3
 80011a2:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80011a4:	89bb      	ldrh	r3, [r7, #12]
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80011aa:	89bb      	ldrh	r3, [r7, #12]
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	4413      	add	r3, r2
 80011b0:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80011b2:	7bf9      	ldrb	r1, [r7, #15]
 80011b4:	78ba      	ldrb	r2, [r7, #2]
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	460b      	mov	r3, r1
 80011bc:	2100      	movs	r1, #0
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f001 ff80 	bl	80030c4 <u8x8_DrawTile>
}
 80011c4:	bf00      	nop
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011de:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80011e6:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	7c5b      	ldrb	r3, [r3, #17]
 80011ee:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80011f0:	7bba      	ldrb	r2, [r7, #14]
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	4619      	mov	r1, r3
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ffbd 	bl	8001176 <u8g2_send_tile_row>
    src_row++;
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	3301      	adds	r3, #1
 8001200:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8001202:	7bbb      	ldrb	r3, [r7, #14]
 8001204:	3301      	adds	r3, #1
 8001206:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001208:	7bfa      	ldrb	r2, [r7, #15]
 800120a:	7b7b      	ldrb	r3, [r7, #13]
 800120c:	429a      	cmp	r2, r3
 800120e:	d203      	bcs.n	8001218 <u8g2_send_buffer+0x4c>
 8001210:	7bba      	ldrb	r2, [r7, #14]
 8001212:	7b3b      	ldrb	r3, [r7, #12]
 8001214:	429a      	cmp	r2, r3
 8001216:	d3eb      	bcc.n	80011f0 <u8g2_send_buffer+0x24>
}
 8001218:	bf00      	nop
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ffcf 	bl	80011cc <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f001 ff99 	bl	8003166 <u8x8_RefreshDisplay>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <u8g2_draw_circle_section>:
/* Circle */

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	4608      	mov	r0, r1
 8001246:	4611      	mov	r1, r2
 8001248:	461a      	mov	r2, r3
 800124a:	4603      	mov	r3, r0
 800124c:	70fb      	strb	r3, [r7, #3]
 800124e:	460b      	mov	r3, r1
 8001250:	70bb      	strb	r3, [r7, #2]
 8001252:	4613      	mov	r3, r2
 8001254:	707b      	strb	r3, [r7, #1]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 8001256:	7d3b      	ldrb	r3, [r7, #20]
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	2b00      	cmp	r3, #0
 800125e:	d017      	beq.n	8001290 <u8g2_draw_circle_section+0x54>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
 8001260:	787a      	ldrb	r2, [r7, #1]
 8001262:	78fb      	ldrb	r3, [r7, #3]
 8001264:	4413      	add	r3, r2
 8001266:	b2d9      	uxtb	r1, r3
 8001268:	7c3a      	ldrb	r2, [r7, #16]
 800126a:	78bb      	ldrb	r3, [r7, #2]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	b2db      	uxtb	r3, r3
 8001270:	461a      	mov	r2, r3
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f001 f889 	bl	800238a <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
 8001278:	787a      	ldrb	r2, [r7, #1]
 800127a:	78bb      	ldrb	r3, [r7, #2]
 800127c:	4413      	add	r3, r2
 800127e:	b2d9      	uxtb	r1, r3
 8001280:	7c3a      	ldrb	r2, [r7, #16]
 8001282:	78fb      	ldrb	r3, [r7, #3]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	b2db      	uxtb	r3, r3
 8001288:	461a      	mov	r2, r3
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f001 f87d 	bl	800238a <u8g2_DrawPixel>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 8001290:	7d3b      	ldrb	r3, [r7, #20]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d017      	beq.n	80012ca <u8g2_draw_circle_section+0x8e>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
 800129a:	787a      	ldrb	r2, [r7, #1]
 800129c:	78fb      	ldrb	r3, [r7, #3]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	b2d9      	uxtb	r1, r3
 80012a2:	7c3a      	ldrb	r2, [r7, #16]
 80012a4:	78bb      	ldrb	r3, [r7, #2]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	461a      	mov	r2, r3
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f001 f86c 	bl	800238a <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
 80012b2:	787a      	ldrb	r2, [r7, #1]
 80012b4:	78bb      	ldrb	r3, [r7, #2]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	b2d9      	uxtb	r1, r3
 80012ba:	7c3a      	ldrb	r2, [r7, #16]
 80012bc:	78fb      	ldrb	r3, [r7, #3]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	461a      	mov	r2, r3
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f001 f860 	bl	800238a <u8g2_DrawPixel>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 80012ca:	7d3b      	ldrb	r3, [r7, #20]
 80012cc:	f003 0308 	and.w	r3, r3, #8
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d017      	beq.n	8001304 <u8g2_draw_circle_section+0xc8>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
 80012d4:	787a      	ldrb	r2, [r7, #1]
 80012d6:	78fb      	ldrb	r3, [r7, #3]
 80012d8:	4413      	add	r3, r2
 80012da:	b2d9      	uxtb	r1, r3
 80012dc:	7c3a      	ldrb	r2, [r7, #16]
 80012de:	78bb      	ldrb	r3, [r7, #2]
 80012e0:	4413      	add	r3, r2
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f001 f84f 	bl	800238a <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
 80012ec:	787a      	ldrb	r2, [r7, #1]
 80012ee:	78bb      	ldrb	r3, [r7, #2]
 80012f0:	4413      	add	r3, r2
 80012f2:	b2d9      	uxtb	r1, r3
 80012f4:	7c3a      	ldrb	r2, [r7, #16]
 80012f6:	78fb      	ldrb	r3, [r7, #3]
 80012f8:	4413      	add	r3, r2
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	461a      	mov	r2, r3
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f001 f843 	bl	800238a <u8g2_DrawPixel>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 8001304:	7d3b      	ldrb	r3, [r7, #20]
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	2b00      	cmp	r3, #0
 800130c:	d017      	beq.n	800133e <u8g2_draw_circle_section+0x102>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
 800130e:	787a      	ldrb	r2, [r7, #1]
 8001310:	78fb      	ldrb	r3, [r7, #3]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	b2d9      	uxtb	r1, r3
 8001316:	7c3a      	ldrb	r2, [r7, #16]
 8001318:	78bb      	ldrb	r3, [r7, #2]
 800131a:	4413      	add	r3, r2
 800131c:	b2db      	uxtb	r3, r3
 800131e:	461a      	mov	r2, r3
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f001 f832 	bl	800238a <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
 8001326:	787a      	ldrb	r2, [r7, #1]
 8001328:	78bb      	ldrb	r3, [r7, #2]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	b2d9      	uxtb	r1, r3
 800132e:	7c3a      	ldrb	r2, [r7, #16]
 8001330:	78fb      	ldrb	r3, [r7, #3]
 8001332:	4413      	add	r3, r2
 8001334:	b2db      	uxtb	r3, r3
 8001336:	461a      	mov	r2, r3
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f001 f826 	bl	800238a <u8g2_DrawPixel>
    }
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <u8g2_draw_circle>:

static void u8g2_draw_circle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b086      	sub	sp, #24
 800134a:	af02      	add	r7, sp, #8
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	4608      	mov	r0, r1
 8001350:	4611      	mov	r1, r2
 8001352:	461a      	mov	r2, r3
 8001354:	4603      	mov	r3, r0
 8001356:	70fb      	strb	r3, [r7, #3]
 8001358:	460b      	mov	r3, r1
 800135a:	70bb      	strb	r3, [r7, #2]
 800135c:	4613      	mov	r3, r2
 800135e:	707b      	strb	r3, [r7, #1]
    u8g2_int_t ddF_x;
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
 8001360:	2301      	movs	r3, #1
 8001362:	73fb      	strb	r3, [r7, #15]
    f -= rad;
 8001364:	7bfa      	ldrb	r2, [r7, #15]
 8001366:	787b      	ldrb	r3, [r7, #1]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	b2db      	uxtb	r3, r3
 800136c:	73fb      	strb	r3, [r7, #15]
    ddF_x = 1;
 800136e:	2301      	movs	r3, #1
 8001370:	73bb      	strb	r3, [r7, #14]
    ddF_y = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	737b      	strb	r3, [r7, #13]
    ddF_y -= rad;
 8001376:	7b7a      	ldrb	r2, [r7, #13]
 8001378:	787b      	ldrb	r3, [r7, #1]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	b2db      	uxtb	r3, r3
 800137e:	737b      	strb	r3, [r7, #13]
    ddF_y *= 2;
 8001380:	7b7b      	ldrb	r3, [r7, #13]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	b2db      	uxtb	r3, r3
 8001386:	737b      	strb	r3, [r7, #13]
    x = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	733b      	strb	r3, [r7, #12]
    y = rad;
 800138c:	787b      	ldrb	r3, [r7, #1]
 800138e:	72fb      	strb	r3, [r7, #11]

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
 8001390:	78f8      	ldrb	r0, [r7, #3]
 8001392:	7afa      	ldrb	r2, [r7, #11]
 8001394:	7b39      	ldrb	r1, [r7, #12]
 8001396:	7e3b      	ldrb	r3, [r7, #24]
 8001398:	9301      	str	r3, [sp, #4]
 800139a:	78bb      	ldrb	r3, [r7, #2]
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	4603      	mov	r3, r0
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff ff4b 	bl	800123c <u8g2_draw_circle_section>
    
    while ( x < y )
 80013a6:	e026      	b.n	80013f6 <u8g2_draw_circle+0xb0>
    {
      if (f >= 0) 
 80013a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	db0b      	blt.n	80013c8 <u8g2_draw_circle+0x82>
      {
        y--;
 80013b0:	7afb      	ldrb	r3, [r7, #11]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	72fb      	strb	r3, [r7, #11]
        ddF_y += 2;
 80013b6:	7b7b      	ldrb	r3, [r7, #13]
 80013b8:	3302      	adds	r3, #2
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	737b      	strb	r3, [r7, #13]
        f += ddF_y;
 80013be:	7bfa      	ldrb	r2, [r7, #15]
 80013c0:	7b7b      	ldrb	r3, [r7, #13]
 80013c2:	4413      	add	r3, r2
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	73fb      	strb	r3, [r7, #15]
      }
      x++;
 80013c8:	7b3b      	ldrb	r3, [r7, #12]
 80013ca:	3301      	adds	r3, #1
 80013cc:	733b      	strb	r3, [r7, #12]
      ddF_x += 2;
 80013ce:	7bbb      	ldrb	r3, [r7, #14]
 80013d0:	3302      	adds	r3, #2
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	73bb      	strb	r3, [r7, #14]
      f += ddF_x;
 80013d6:	7bfa      	ldrb	r2, [r7, #15]
 80013d8:	7bbb      	ldrb	r3, [r7, #14]
 80013da:	4413      	add	r3, r2
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	73fb      	strb	r3, [r7, #15]

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
 80013e0:	78f8      	ldrb	r0, [r7, #3]
 80013e2:	7afa      	ldrb	r2, [r7, #11]
 80013e4:	7b39      	ldrb	r1, [r7, #12]
 80013e6:	7e3b      	ldrb	r3, [r7, #24]
 80013e8:	9301      	str	r3, [sp, #4]
 80013ea:	78bb      	ldrb	r3, [r7, #2]
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	4603      	mov	r3, r0
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ff23 	bl	800123c <u8g2_draw_circle_section>
    while ( x < y )
 80013f6:	7b3a      	ldrb	r2, [r7, #12]
 80013f8:	7afb      	ldrb	r3, [r7, #11]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d3d4      	bcc.n	80013a8 <u8g2_draw_circle+0x62>
    }
}
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <u8g2_DrawCircle>:

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8001406:	b590      	push	{r4, r7, lr}
 8001408:	b085      	sub	sp, #20
 800140a:	af02      	add	r7, sp, #8
 800140c:	6078      	str	r0, [r7, #4]
 800140e:	4608      	mov	r0, r1
 8001410:	4611      	mov	r1, r2
 8001412:	461a      	mov	r2, r3
 8001414:	4603      	mov	r3, r0
 8001416:	70fb      	strb	r3, [r7, #3]
 8001418:	460b      	mov	r3, r1
 800141a:	70bb      	strb	r3, [r7, #2]
 800141c:	4613      	mov	r3, r2
 800141e:	707b      	strb	r3, [r7, #1]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 8001420:	78fa      	ldrb	r2, [r7, #3]
 8001422:	787b      	ldrb	r3, [r7, #1]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	b2d9      	uxtb	r1, r3
 8001428:	78ba      	ldrb	r2, [r7, #2]
 800142a:	787b      	ldrb	r3, [r7, #1]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	b2d8      	uxtb	r0, r3
 8001430:	78fa      	ldrb	r2, [r7, #3]
 8001432:	787b      	ldrb	r3, [r7, #1]
 8001434:	4413      	add	r3, r2
 8001436:	b2db      	uxtb	r3, r3
 8001438:	3301      	adds	r3, #1
 800143a:	b2dc      	uxtb	r4, r3
 800143c:	78ba      	ldrb	r2, [r7, #2]
 800143e:	787b      	ldrb	r3, [r7, #1]
 8001440:	4413      	add	r3, r2
 8001442:	b2db      	uxtb	r3, r3
 8001444:	3301      	adds	r3, #1
 8001446:	b2db      	uxtb	r3, r3
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	4623      	mov	r3, r4
 800144c:	4602      	mov	r2, r0
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f001 f817 	bl	8002482 <u8g2_IsIntersection>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d009      	beq.n	800146e <u8g2_DrawCircle+0x68>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
 800145a:	7878      	ldrb	r0, [r7, #1]
 800145c:	78ba      	ldrb	r2, [r7, #2]
 800145e:	78f9      	ldrb	r1, [r7, #3]
 8001460:	7e3b      	ldrb	r3, [r7, #24]
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	4603      	mov	r3, r0
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff ff6d 	bl	8001346 <u8g2_draw_circle>
 800146c:	e000      	b.n	8001470 <u8g2_DrawCircle+0x6a>
      return;
 800146e:	bf00      	nop
}
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	bd90      	pop	{r4, r7, pc}
	...

08001478 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2208      	movs	r2, #8
 8001484:	701a      	strb	r2, [r3, #0]
  return buf;
 8001486:	4b03      	ldr	r3, [pc, #12]	; (8001494 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	20000128 	.word	0x20000128

08001498 <u8g2_Setup_st7565_nhd_c12864_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_erc12864_alt, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_nhd_c12864_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af02      	add	r7, sp, #8
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
 80014a4:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_nhd_c12864, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a0b      	ldr	r2, [pc, #44]	; (80014dc <u8g2_Setup_st7565_nhd_c12864_f+0x44>)
 80014ae:	490c      	ldr	r1, [pc, #48]	; (80014e0 <u8g2_Setup_st7565_nhd_c12864_f+0x48>)
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f001 feb7 	bl	8003224 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 80014b6:	f107 0313 	add.w	r3, r7, #19
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ffdc 	bl	8001478 <u8g2_m_16_8_f>
 80014c0:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80014c2:	7cfa      	ldrb	r2, [r7, #19]
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <u8g2_Setup_st7565_nhd_c12864_f+0x4c>)
 80014ca:	6979      	ldr	r1, [r7, #20]
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f001 f8c0 	bl	8002652 <u8g2_SetupBuffer>
}
 80014d2:	bf00      	nop
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	08002de9 	.word	0x08002de9
 80014e0:	08002f85 	.word	0x08002f85
 80014e4:	080024d9 	.word	0x080024d9

080014e8 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80014f4:	78fb      	ldrb	r3, [r7, #3]
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	781b      	ldrb	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr

0800150a <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 800150a:	b480      	push	{r7}
 800150c:	b085      	sub	sp, #20
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	460b      	mov	r3, r1
 8001514:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8001516:	78fb      	ldrb	r3, [r7, #3]
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	4413      	add	r3, r2
 800151c:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	81fb      	strh	r3, [r7, #14]
    font++;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3301      	adds	r3, #1
 8001528:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800152a:	89fb      	ldrh	r3, [r7, #14]
 800152c:	021b      	lsls	r3, r3, #8
 800152e:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	b29a      	uxth	r2, r3
 8001536:	89fb      	ldrh	r3, [r7, #14]
 8001538:	4413      	add	r3, r2
 800153a:	81fb      	strh	r3, [r7, #14]
    return pos;
 800153c:	89fb      	ldrh	r3, [r7, #14]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr

08001548 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8001552:	2100      	movs	r1, #0
 8001554:	6838      	ldr	r0, [r7, #0]
 8001556:	f7ff ffc7 	bl	80014e8 <u8g2_font_get_byte>
 800155a:	4603      	mov	r3, r0
 800155c:	461a      	mov	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8001562:	2101      	movs	r1, #1
 8001564:	6838      	ldr	r0, [r7, #0]
 8001566:	f7ff ffbf 	bl	80014e8 <u8g2_font_get_byte>
 800156a:	4603      	mov	r3, r0
 800156c:	461a      	mov	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8001572:	2102      	movs	r1, #2
 8001574:	6838      	ldr	r0, [r7, #0]
 8001576:	f7ff ffb7 	bl	80014e8 <u8g2_font_get_byte>
 800157a:	4603      	mov	r3, r0
 800157c:	461a      	mov	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8001582:	2103      	movs	r1, #3
 8001584:	6838      	ldr	r0, [r7, #0]
 8001586:	f7ff ffaf 	bl	80014e8 <u8g2_font_get_byte>
 800158a:	4603      	mov	r3, r0
 800158c:	461a      	mov	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8001592:	2104      	movs	r1, #4
 8001594:	6838      	ldr	r0, [r7, #0]
 8001596:	f7ff ffa7 	bl	80014e8 <u8g2_font_get_byte>
 800159a:	4603      	mov	r3, r0
 800159c:	461a      	mov	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80015a2:	2105      	movs	r1, #5
 80015a4:	6838      	ldr	r0, [r7, #0]
 80015a6:	f7ff ff9f 	bl	80014e8 <u8g2_font_get_byte>
 80015aa:	4603      	mov	r3, r0
 80015ac:	461a      	mov	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80015b2:	2106      	movs	r1, #6
 80015b4:	6838      	ldr	r0, [r7, #0]
 80015b6:	f7ff ff97 	bl	80014e8 <u8g2_font_get_byte>
 80015ba:	4603      	mov	r3, r0
 80015bc:	461a      	mov	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80015c2:	2107      	movs	r1, #7
 80015c4:	6838      	ldr	r0, [r7, #0]
 80015c6:	f7ff ff8f 	bl	80014e8 <u8g2_font_get_byte>
 80015ca:	4603      	mov	r3, r0
 80015cc:	461a      	mov	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80015d2:	2108      	movs	r1, #8
 80015d4:	6838      	ldr	r0, [r7, #0]
 80015d6:	f7ff ff87 	bl	80014e8 <u8g2_font_get_byte>
 80015da:	4603      	mov	r3, r0
 80015dc:	461a      	mov	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80015e2:	2109      	movs	r1, #9
 80015e4:	6838      	ldr	r0, [r7, #0]
 80015e6:	f7ff ff7f 	bl	80014e8 <u8g2_font_get_byte>
 80015ea:	4603      	mov	r3, r0
 80015ec:	b25a      	sxtb	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80015f2:	210a      	movs	r1, #10
 80015f4:	6838      	ldr	r0, [r7, #0]
 80015f6:	f7ff ff77 	bl	80014e8 <u8g2_font_get_byte>
 80015fa:	4603      	mov	r3, r0
 80015fc:	b25a      	sxtb	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8001602:	210b      	movs	r1, #11
 8001604:	6838      	ldr	r0, [r7, #0]
 8001606:	f7ff ff6f 	bl	80014e8 <u8g2_font_get_byte>
 800160a:	4603      	mov	r3, r0
 800160c:	b25a      	sxtb	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8001612:	210c      	movs	r1, #12
 8001614:	6838      	ldr	r0, [r7, #0]
 8001616:	f7ff ff67 	bl	80014e8 <u8g2_font_get_byte>
 800161a:	4603      	mov	r3, r0
 800161c:	b25a      	sxtb	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8001622:	210d      	movs	r1, #13
 8001624:	6838      	ldr	r0, [r7, #0]
 8001626:	f7ff ff5f 	bl	80014e8 <u8g2_font_get_byte>
 800162a:	4603      	mov	r3, r0
 800162c:	b25a      	sxtb	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8001632:	210e      	movs	r1, #14
 8001634:	6838      	ldr	r0, [r7, #0]
 8001636:	f7ff ff57 	bl	80014e8 <u8g2_font_get_byte>
 800163a:	4603      	mov	r3, r0
 800163c:	b25a      	sxtb	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8001642:	210f      	movs	r1, #15
 8001644:	6838      	ldr	r0, [r7, #0]
 8001646:	f7ff ff4f 	bl	80014e8 <u8g2_font_get_byte>
 800164a:	4603      	mov	r3, r0
 800164c:	b25a      	sxtb	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8001652:	2110      	movs	r1, #16
 8001654:	6838      	ldr	r0, [r7, #0]
 8001656:	f7ff ff47 	bl	80014e8 <u8g2_font_get_byte>
 800165a:	4603      	mov	r3, r0
 800165c:	b25a      	sxtb	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8001662:	2111      	movs	r1, #17
 8001664:	6838      	ldr	r0, [r7, #0]
 8001666:	f7ff ff50 	bl	800150a <u8g2_font_get_word>
 800166a:	4603      	mov	r3, r0
 800166c:	461a      	mov	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8001672:	2113      	movs	r1, #19
 8001674:	6838      	ldr	r0, [r7, #0]
 8001676:	f7ff ff48 	bl	800150a <u8g2_font_get_word>
 800167a:	4603      	mov	r3, r0
 800167c:	461a      	mov	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8001682:	2115      	movs	r1, #21
 8001684:	6838      	ldr	r0, [r7, #0]
 8001686:	f7ff ff40 	bl	800150a <u8g2_font_get_word>
 800168a:	4603      	mov	r3, r0
 800168c:	461a      	mov	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	82da      	strh	r2, [r3, #22]
#endif
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 800169a:	b480      	push	{r7}
 800169c:	b085      	sub	sp, #20
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	460b      	mov	r3, r1
 80016a4:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	7a9b      	ldrb	r3, [r3, #10]
 80016aa:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80016b4:	7bfa      	ldrb	r2, [r7, #15]
 80016b6:	7b7b      	ldrb	r3, [r7, #13]
 80016b8:	fa42 f303 	asr.w	r3, r2, r3
 80016bc:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80016be:	7b7b      	ldrb	r3, [r7, #13]
 80016c0:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80016c2:	7bba      	ldrb	r2, [r7, #14]
 80016c4:	78fb      	ldrb	r3, [r7, #3]
 80016c6:	4413      	add	r3, r2
 80016c8:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80016ca:	7bbb      	ldrb	r3, [r7, #14]
 80016cc:	2b07      	cmp	r3, #7
 80016ce:	d91a      	bls.n	8001706 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80016d0:	2308      	movs	r3, #8
 80016d2:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80016d4:	7b3a      	ldrb	r2, [r7, #12]
 80016d6:	7b7b      	ldrb	r3, [r7, #13]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	1c5a      	adds	r2, r3, #1
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	461a      	mov	r2, r3
 80016ee:	7b3b      	ldrb	r3, [r7, #12]
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	b25a      	sxtb	r2, r3
 80016f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	b25b      	sxtb	r3, r3
 80016fe:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8001700:	7bbb      	ldrb	r3, [r7, #14]
 8001702:	3b08      	subs	r3, #8
 8001704:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8001706:	78fb      	ldrb	r3, [r7, #3]
 8001708:	f04f 32ff 	mov.w	r2, #4294967295
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	b2db      	uxtb	r3, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	b2da      	uxtb	r2, r3
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	4013      	ands	r3, r2
 800171a:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	7bba      	ldrb	r2, [r7, #14]
 8001720:	729a      	strb	r2, [r3, #10]
  return val;
 8001722:	7bfb      	ldrb	r3, [r7, #15]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr

0800172e <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	460b      	mov	r3, r1
 8001738:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 800173a:	78fb      	ldrb	r3, [r7, #3]
 800173c:	4619      	mov	r1, r3
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff ffab 	bl	800169a <u8g2_font_decode_get_unsigned_bits>
 8001744:	4603      	mov	r3, r0
 8001746:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8001748:	2301      	movs	r3, #1
 800174a:	73bb      	strb	r3, [r7, #14]
  cnt--;
 800174c:	78fb      	ldrb	r3, [r7, #3]
 800174e:	3b01      	subs	r3, #1
 8001750:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8001752:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001756:	78fb      	ldrb	r3, [r7, #3]
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	73bb      	strb	r3, [r7, #14]
  v -= d;
 800175e:	7bfa      	ldrb	r2, [r7, #15]
 8001760:	7bbb      	ldrb	r3, [r7, #14]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	b2db      	uxtb	r3, r3
 8001766:	73fb      	strb	r3, [r7, #15]
  return v;
 8001768:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 800176c:	4618      	mov	r0, r3
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8001774:	b490      	push	{r4, r7}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4604      	mov	r4, r0
 800177c:	4608      	mov	r0, r1
 800177e:	4611      	mov	r1, r2
 8001780:	461a      	mov	r2, r3
 8001782:	4623      	mov	r3, r4
 8001784:	71fb      	strb	r3, [r7, #7]
 8001786:	4603      	mov	r3, r0
 8001788:	71bb      	strb	r3, [r7, #6]
 800178a:	460b      	mov	r3, r1
 800178c:	717b      	strb	r3, [r7, #5]
 800178e:	4613      	mov	r3, r2
 8001790:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8001792:	793b      	ldrb	r3, [r7, #4]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d008      	beq.n	80017aa <u8g2_add_vector_y+0x36>
 8001798:	2b02      	cmp	r3, #2
 800179a:	d00b      	beq.n	80017b4 <u8g2_add_vector_y+0x40>
 800179c:	2b00      	cmp	r3, #0
 800179e:	d10e      	bne.n	80017be <u8g2_add_vector_y+0x4a>
  {
    case 0:
      dy += y;
 80017a0:	797a      	ldrb	r2, [r7, #5]
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	4413      	add	r3, r2
 80017a6:	71fb      	strb	r3, [r7, #7]
      break;
 80017a8:	e00e      	b.n	80017c8 <u8g2_add_vector_y+0x54>
    case 1:
      dy += x;
 80017aa:	79ba      	ldrb	r2, [r7, #6]
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	4413      	add	r3, r2
 80017b0:	71fb      	strb	r3, [r7, #7]
      break;
 80017b2:	e009      	b.n	80017c8 <u8g2_add_vector_y+0x54>
    case 2:
      dy -= y;
 80017b4:	797b      	ldrb	r3, [r7, #5]
 80017b6:	79fa      	ldrb	r2, [r7, #7]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	71fb      	strb	r3, [r7, #7]
      break;
 80017bc:	e004      	b.n	80017c8 <u8g2_add_vector_y+0x54>
    default:
      dy -= x;
 80017be:	79bb      	ldrb	r3, [r7, #6]
 80017c0:	79fa      	ldrb	r2, [r7, #7]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	71fb      	strb	r3, [r7, #7]
      break;      
 80017c6:	bf00      	nop
  }
  return dy;
 80017c8:	79fb      	ldrb	r3, [r7, #7]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc90      	pop	{r4, r7}
 80017d2:	4770      	bx	lr

080017d4 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80017d4:	b490      	push	{r4, r7}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4604      	mov	r4, r0
 80017dc:	4608      	mov	r0, r1
 80017de:	4611      	mov	r1, r2
 80017e0:	461a      	mov	r2, r3
 80017e2:	4623      	mov	r3, r4
 80017e4:	71fb      	strb	r3, [r7, #7]
 80017e6:	4603      	mov	r3, r0
 80017e8:	71bb      	strb	r3, [r7, #6]
 80017ea:	460b      	mov	r3, r1
 80017ec:	717b      	strb	r3, [r7, #5]
 80017ee:	4613      	mov	r3, r2
 80017f0:	713b      	strb	r3, [r7, #4]
  switch(dir)
 80017f2:	793b      	ldrb	r3, [r7, #4]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d008      	beq.n	800180a <u8g2_add_vector_x+0x36>
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d00b      	beq.n	8001814 <u8g2_add_vector_x+0x40>
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d10e      	bne.n	800181e <u8g2_add_vector_x+0x4a>
  {
    case 0:
      dx += x;
 8001800:	79ba      	ldrb	r2, [r7, #6]
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	4413      	add	r3, r2
 8001806:	71fb      	strb	r3, [r7, #7]
      break;
 8001808:	e00e      	b.n	8001828 <u8g2_add_vector_x+0x54>
    case 1:
      dx -= y;
 800180a:	797b      	ldrb	r3, [r7, #5]
 800180c:	79fa      	ldrb	r2, [r7, #7]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	71fb      	strb	r3, [r7, #7]
      break;
 8001812:	e009      	b.n	8001828 <u8g2_add_vector_x+0x54>
    case 2:
      dx -= x;
 8001814:	79bb      	ldrb	r3, [r7, #6]
 8001816:	79fa      	ldrb	r2, [r7, #7]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	71fb      	strb	r3, [r7, #7]
      break;
 800181c:	e004      	b.n	8001828 <u8g2_add_vector_x+0x54>
    default:
      dx += y;
 800181e:	797a      	ldrb	r2, [r7, #5]
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	4413      	add	r3, r2
 8001824:	71fb      	strb	r3, [r7, #7]
      break;      
 8001826:	bf00      	nop
  }
  return dx;
 8001828:	79fb      	ldrb	r3, [r7, #7]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bc90      	pop	{r4, r7}
 8001832:	4770      	bx	lr

08001834 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af02      	add	r7, sp, #8
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	70fb      	strb	r3, [r7, #3]
 8001840:	4613      	mov	r3, r2
 8001842:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3354      	adds	r3, #84	; 0x54
 8001848:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 800184a:	78fb      	ldrb	r3, [r7, #3]
 800184c:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001854:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800185c:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001864:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8001866:	7bfa      	ldrb	r2, [r7, #15]
 8001868:	7d7b      	ldrb	r3, [r7, #21]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8001872:	7dfa      	ldrb	r2, [r7, #23]
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	429a      	cmp	r2, r3
 8001878:	d201      	bcs.n	800187e <u8g2_font_decode_len+0x4a>
      current = cnt;
 800187a:	7dfb      	ldrb	r3, [r7, #23]
 800187c:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	791b      	ldrb	r3, [r3, #4]
 8001882:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	795b      	ldrb	r3, [r3, #5]
 8001888:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800188a:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800188e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	7b9b      	ldrb	r3, [r3, #14]
 8001896:	7bb8      	ldrb	r0, [r7, #14]
 8001898:	f7ff ff9c 	bl	80017d4 <u8g2_add_vector_x>
 800189c:	4603      	mov	r3, r0
 800189e:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80018a0:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80018a4:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	7b9b      	ldrb	r3, [r3, #14]
 80018ac:	7b78      	ldrb	r0, [r7, #13]
 80018ae:	f7ff ff61 	bl	8001774 <u8g2_add_vector_y>
 80018b2:	4603      	mov	r3, r0
 80018b4:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80018b6:	78bb      	ldrb	r3, [r7, #2]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00f      	beq.n	80018dc <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	7b1a      	ldrb	r2, [r3, #12]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	7b9b      	ldrb	r3, [r3, #14]
 80018ca:	7db8      	ldrb	r0, [r7, #22]
 80018cc:	7b7a      	ldrb	r2, [r7, #13]
 80018ce:	7bb9      	ldrb	r1, [r7, #14]
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	4603      	mov	r3, r0
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 fca1 	bl	800221c <u8g2_DrawHVLine>
 80018da:	e012      	b.n	8001902 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	7adb      	ldrb	r3, [r3, #11]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d10e      	bne.n	8001902 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	7b5a      	ldrb	r2, [r3, #13]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	7b9b      	ldrb	r3, [r3, #14]
 80018f2:	7db8      	ldrb	r0, [r7, #22]
 80018f4:	7b7a      	ldrb	r2, [r7, #13]
 80018f6:	7bb9      	ldrb	r1, [r7, #14]
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	4603      	mov	r3, r0
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 fc8d 	bl	800221c <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8001902:	7dfa      	ldrb	r2, [r7, #23]
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	429a      	cmp	r2, r3
 8001908:	d309      	bcc.n	800191e <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 800190a:	7dfa      	ldrb	r2, [r7, #23]
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	757b      	strb	r3, [r7, #21]
    ly++;
 8001916:	7d3b      	ldrb	r3, [r7, #20]
 8001918:	3301      	adds	r3, #1
 800191a:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 800191c:	e79f      	b.n	800185e <u8g2_font_decode_len+0x2a>
      break;
 800191e:	bf00      	nop
  }
  lx += cnt;
 8001920:	7d7a      	ldrb	r2, [r7, #21]
 8001922:	7dfb      	ldrb	r3, [r7, #23]
 8001924:	4413      	add	r3, r2
 8001926:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001928:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8001930:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	71da      	strb	r2, [r3, #7]
  
}
 8001938:	bf00      	nop
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3354      	adds	r3, #84	; 0x54
 800194e:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001962:	4619      	mov	r1, r3
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f7ff fe98 	bl	800169a <u8g2_font_decode_get_unsigned_bits>
 800196a:	4603      	mov	r3, r0
 800196c:	b25a      	sxtb	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001978:	4619      	mov	r1, r3
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f7ff fe8d 	bl	800169a <u8g2_font_decode_get_unsigned_bits>
 8001980:	4603      	mov	r3, r0
 8001982:	b25a      	sxtb	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	7b1b      	ldrb	r3, [r3, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	bf0c      	ite	eq
 800199a:	2301      	moveq	r3, #1
 800199c:	2300      	movne	r3, #0
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	461a      	mov	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	735a      	strb	r2, [r3, #13]
}
 80019a6:	bf00      	nop
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af02      	add	r7, sp, #8
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3354      	adds	r3, #84	; 0x54
 80019be:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 80019c0:	6839      	ldr	r1, [r7, #0]
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ffbc 	bl	8001940 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80019ce:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80019d6:	4619      	mov	r1, r3
 80019d8:	6938      	ldr	r0, [r7, #16]
 80019da:	f7ff fea8 	bl	800172e <u8g2_font_decode_get_signed_bits>
 80019de:	4603      	mov	r3, r0
 80019e0:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80019e8:	4619      	mov	r1, r3
 80019ea:	6938      	ldr	r0, [r7, #16]
 80019ec:	f7ff fe9f 	bl	800172e <u8g2_font_decode_get_signed_bits>
 80019f0:	4603      	mov	r3, r0
 80019f2:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80019fa:	4619      	mov	r1, r3
 80019fc:	6938      	ldr	r0, [r7, #16]
 80019fe:	f7ff fe96 	bl	800172e <u8g2_font_decode_get_signed_bits>
 8001a02:	4603      	mov	r3, r0
 8001a04:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f340 80cf 	ble.w	8001bb0 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	7918      	ldrb	r0, [r3, #4]
 8001a16:	7bfa      	ldrb	r2, [r7, #15]
 8001a18:	7b7b      	ldrb	r3, [r7, #13]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	425b      	negs	r3, r3
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	b25a      	sxtb	r2, r3
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	7b9b      	ldrb	r3, [r3, #14]
 8001a28:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001a2c:	f7ff fed2 	bl	80017d4 <u8g2_add_vector_x>
 8001a30:	4603      	mov	r3, r0
 8001a32:	461a      	mov	r2, r3
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	7958      	ldrb	r0, [r3, #5]
 8001a3c:	7bfa      	ldrb	r2, [r7, #15]
 8001a3e:	7b7b      	ldrb	r3, [r7, #13]
 8001a40:	4413      	add	r3, r2
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	425b      	negs	r3, r3
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	b25a      	sxtb	r2, r3
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	7b9b      	ldrb	r3, [r3, #14]
 8001a4e:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001a52:	f7ff fe8f 	bl	8001774 <u8g2_add_vector_y>
 8001a56:	4603      	mov	r3, r0
 8001a58:	461a      	mov	r2, r3
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	791b      	ldrb	r3, [r3, #4]
 8001a62:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	795b      	ldrb	r3, [r3, #5]
 8001a68:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8001a6a:	7dfb      	ldrb	r3, [r7, #23]
 8001a6c:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8001a6e:	7d7b      	ldrb	r3, [r7, #21]
 8001a70:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	7b9b      	ldrb	r3, [r3, #14]
 8001a76:	2b03      	cmp	r3, #3
 8001a78:	d852      	bhi.n	8001b20 <u8g2_font_decode_glyph+0x170>
 8001a7a:	a201      	add	r2, pc, #4	; (adr r2, 8001a80 <u8g2_font_decode_glyph+0xd0>)
 8001a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a80:	08001a91 	.word	0x08001a91
 8001a84:	08001aa9 	.word	0x08001aa9
 8001a88:	08001acd 	.word	0x08001acd
 8001a8c:	08001afd 	.word	0x08001afd
      {
	case 0:
	    x1 += decode->glyph_width;
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	7dbb      	ldrb	r3, [r7, #22]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8001a9e:	7bfa      	ldrb	r2, [r7, #15]
 8001aa0:	7d3b      	ldrb	r3, [r7, #20]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	753b      	strb	r3, [r7, #20]
	    break;
 8001aa6:	e03b      	b.n	8001b20 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	7dfa      	ldrb	r2, [r7, #23]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001ab0:	7dfb      	ldrb	r3, [r7, #23]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8001ab6:	7dbb      	ldrb	r3, [r7, #22]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	7d3b      	ldrb	r3, [r7, #20]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	753b      	strb	r3, [r7, #20]
	    break;
 8001aca:	e029      	b.n	8001b20 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	7dfa      	ldrb	r2, [r7, #23]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001ada:	7dfb      	ldrb	r3, [r7, #23]
 8001adc:	3301      	adds	r3, #1
 8001ade:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8001ae0:	7dbb      	ldrb	r3, [r7, #22]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8001ae6:	7bfb      	ldrb	r3, [r7, #15]
 8001ae8:	7d7a      	ldrb	r2, [r7, #21]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001aee:	7d7b      	ldrb	r3, [r7, #21]
 8001af0:	3301      	adds	r3, #1
 8001af2:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001af4:	7d3b      	ldrb	r3, [r7, #20]
 8001af6:	3301      	adds	r3, #1
 8001af8:	753b      	strb	r3, [r7, #20]
	    break;	  
 8001afa:	e011      	b.n	8001b20 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8001afc:	7bfa      	ldrb	r2, [r7, #15]
 8001afe:	7dbb      	ldrb	r3, [r7, #22]
 8001b00:	4413      	add	r3, r2
 8001b02:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	7d7a      	ldrb	r2, [r7, #21]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001b12:	7d7b      	ldrb	r3, [r7, #21]
 8001b14:	3301      	adds	r3, #1
 8001b16:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001b18:	7d3b      	ldrb	r3, [r7, #20]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	753b      	strb	r3, [r7, #20]
	    break;	  
 8001b1e:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001b20:	7db8      	ldrb	r0, [r7, #22]
 8001b22:	7d7a      	ldrb	r2, [r7, #21]
 8001b24:	7df9      	ldrb	r1, [r7, #23]
 8001b26:	7d3b      	ldrb	r3, [r7, #20]
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 fca8 	bl	8002482 <u8g2_IsIntersection>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d102      	bne.n	8001b3e <u8g2_font_decode_glyph+0x18e>
	return d;
 8001b38:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001b3c:	e03a      	b.n	8001bb4 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	2200      	movs	r2, #0
 8001b42:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	2200      	movs	r2, #0
 8001b48:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8001b50:	4619      	mov	r1, r3
 8001b52:	6938      	ldr	r0, [r7, #16]
 8001b54:	f7ff fda1 	bl	800169a <u8g2_font_decode_get_unsigned_bits>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8001b62:	4619      	mov	r1, r3
 8001b64:	6938      	ldr	r0, [r7, #16]
 8001b66:	f7ff fd98 	bl	800169a <u8g2_font_decode_get_unsigned_bits>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8001b6e:	7afb      	ldrb	r3, [r7, #11]
 8001b70:	2200      	movs	r2, #0
 8001b72:	4619      	mov	r1, r3
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff fe5d 	bl	8001834 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001b7a:	7abb      	ldrb	r3, [r7, #10]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	4619      	mov	r1, r3
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff fe57 	bl	8001834 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001b86:	2101      	movs	r1, #1
 8001b88:	6938      	ldr	r0, [r7, #16]
 8001b8a:	f7ff fd86 	bl	800169a <u8g2_font_decode_get_unsigned_bits>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1ec      	bne.n	8001b6e <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001b9a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	dd00      	ble.n	8001ba4 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001ba2:	e7d2      	b.n	8001b4a <u8g2_font_decode_glyph+0x19a>
	break;
 8001ba4:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	7b1a      	ldrb	r2, [r3, #12]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  }
  return d;
 8001bb0:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bcc:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	3317      	adds	r3, #23
 8001bd2:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8001bd4:	887b      	ldrh	r3, [r7, #2]
 8001bd6:	2bff      	cmp	r3, #255	; 0xff
 8001bd8:	d82a      	bhi.n	8001c30 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8001bda:	887b      	ldrh	r3, [r7, #2]
 8001bdc:	2b60      	cmp	r3, #96	; 0x60
 8001bde:	d907      	bls.n	8001bf0 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8001be6:	461a      	mov	r2, r3
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	4413      	add	r3, r2
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	e009      	b.n	8001c04 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001bf0:	887b      	ldrh	r3, [r7, #2]
 8001bf2:	2b40      	cmp	r3, #64	; 0x40
 8001bf4:	d906      	bls.n	8001c04 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	4413      	add	r3, r2
 8001c02:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	3301      	adds	r3, #1
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d04e      	beq.n	8001cac <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	887a      	ldrh	r2, [r7, #2]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d102      	bne.n	8001c20 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	3302      	adds	r3, #2
 8001c1e:	e049      	b.n	8001cb4 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	3301      	adds	r3, #1
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001c2e:	e7e9      	b.n	8001c04 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8001c36:	461a      	mov	r2, r3
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001c42:	2100      	movs	r1, #0
 8001c44:	6938      	ldr	r0, [r7, #16]
 8001c46:	f7ff fc60 	bl	800150a <u8g2_font_get_word>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	4413      	add	r3, r2
 8001c52:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001c54:	2102      	movs	r1, #2
 8001c56:	6938      	ldr	r0, [r7, #16]
 8001c58:	f7ff fc57 	bl	800150a <u8g2_font_get_word>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	3304      	adds	r3, #4
 8001c64:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8001c66:	89fa      	ldrh	r2, [r7, #14]
 8001c68:	887b      	ldrh	r3, [r7, #2]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d3e9      	bcc.n	8001c42 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001c74:	89fb      	ldrh	r3, [r7, #14]
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	89fb      	ldrh	r3, [r7, #14]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001c88:	89fb      	ldrh	r3, [r7, #14]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d010      	beq.n	8001cb0 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8001c8e:	89fa      	ldrh	r2, [r7, #14]
 8001c90:	887b      	ldrh	r3, [r7, #2]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d102      	bne.n	8001c9c <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	3303      	adds	r3, #3
 8001c9a:	e00b      	b.n	8001cb4 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	3302      	adds	r3, #2
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8001caa:	e7e0      	b.n	8001c6e <u8g2_font_get_glyph_data+0xb2>
	break;
 8001cac:	bf00      	nop
 8001cae:	e000      	b.n	8001cb2 <u8g2_font_get_glyph_data+0xf6>
	break;
 8001cb0:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	4608      	mov	r0, r1
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4603      	mov	r3, r0
 8001ccc:	70fb      	strb	r3, [r7, #3]
 8001cce:	460b      	mov	r3, r1
 8001cd0:	70bb      	strb	r3, [r7, #2]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	78fa      	ldrb	r2, [r7, #3]
 8001cde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  u8g2->font_decode.target_y = y;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	78ba      	ldrb	r2, [r7, #2]
 8001ce6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8001cea:	883b      	ldrh	r3, [r7, #0]
 8001cec:	4619      	mov	r1, r3
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff ff64 	bl	8001bbc <u8g2_font_get_glyph_data>
 8001cf4:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001cfc:	68b9      	ldr	r1, [r7, #8]
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff fe56 	bl	80019b0 <u8g2_font_decode_glyph>
 8001d04:	4603      	mov	r3, r0
 8001d06:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <u8g2_GetGlyphWidth>:
  return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b084      	sub	sp, #16
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	807b      	strh	r3, [r7, #2]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 8001d1e:	887b      	ldrh	r3, [r7, #2]
 8001d20:	4619      	mov	r1, r3
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff ff4a 	bl	8001bbc <u8g2_font_get_glyph_data>
 8001d28:	60f8      	str	r0, [r7, #12]
  if ( glyph_data == NULL )
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <u8g2_GetGlyphWidth+0x22>
    return 0; 
 8001d30:	2300      	movs	r3, #0
 8001d32:	e027      	b.n	8001d84 <u8g2_GetGlyphWidth+0x72>
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 8001d34:	68f9      	ldr	r1, [r7, #12]
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff fe02 	bl	8001940 <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	f7ff fcef 	bl	800172e <u8g2_font_decode_get_signed_bits>
 8001d50:	4603      	mov	r3, r0
 8001d52:	461a      	mov	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001d66:	4619      	mov	r1, r3
 8001d68:	4610      	mov	r0, r2
 8001d6a:	f7ff fce0 	bl	800172e <u8g2_font_decode_get_signed_bits>
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	f7ff fcd6 	bl	800172e <u8g2_font_decode_get_signed_bits>
 8001d82:	4603      	mov	r3, r0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	78fa      	ldrb	r2, [r7, #3]
 8001d9c:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr
	...

08001dac <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	4608      	mov	r0, r1
 8001db6:	4611      	mov	r1, r2
 8001db8:	461a      	mov	r2, r3
 8001dba:	4603      	mov	r3, r0
 8001dbc:	70fb      	strb	r3, [r7, #3]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	70bb      	strb	r3, [r7, #2]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d833      	bhi.n	8001e38 <u8g2_DrawGlyph+0x8c>
 8001dd0:	a201      	add	r2, pc, #4	; (adr r2, 8001dd8 <u8g2_DrawGlyph+0x2c>)
 8001dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd6:	bf00      	nop
 8001dd8:	08001de9 	.word	0x08001de9
 8001ddc:	08001dfd 	.word	0x08001dfd
 8001de0:	08001e11 	.word	0x08001e11
 8001de4:	08001e25 	.word	0x08001e25
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	4798      	blx	r3
 8001df0:	4603      	mov	r3, r0
 8001df2:	461a      	mov	r2, r3
 8001df4:	78bb      	ldrb	r3, [r7, #2]
 8001df6:	4413      	add	r3, r2
 8001df8:	70bb      	strb	r3, [r7, #2]
      break;
 8001dfa:	e01d      	b.n	8001e38 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	4798      	blx	r3
 8001e04:	4603      	mov	r3, r0
 8001e06:	461a      	mov	r2, r3
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	1a9b      	subs	r3, r3, r2
 8001e0c:	70fb      	strb	r3, [r7, #3]
      break;
 8001e0e:	e013      	b.n	8001e38 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	4798      	blx	r3
 8001e18:	4603      	mov	r3, r0
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	78bb      	ldrb	r3, [r7, #2]
 8001e1e:	1a9b      	subs	r3, r3, r2
 8001e20:	70bb      	strb	r3, [r7, #2]
      break;
 8001e22:	e009      	b.n	8001e38 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	4798      	blx	r3
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	461a      	mov	r2, r3
 8001e30:	78fb      	ldrb	r3, [r7, #3]
 8001e32:	4413      	add	r3, r2
 8001e34:	70fb      	strb	r3, [r7, #3]
      break;
 8001e36:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8001e38:	883b      	ldrh	r3, [r7, #0]
 8001e3a:	78ba      	ldrb	r2, [r7, #2]
 8001e3c:	78f9      	ldrb	r1, [r7, #3]
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff ff3c 	bl	8001cbc <u8g2_font_draw_glyph>
 8001e44:	4603      	mov	r3, r0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop

08001e50 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	72fb      	strb	r3, [r7, #11]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 fec2 	bl	8002bec <u8x8_utf8_init>
  sum = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	7812      	ldrb	r2, [r2, #0]
 8001e74:	4611      	mov	r1, r2
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	4798      	blx	r3
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8001e7e:	8abb      	ldrh	r3, [r7, #20]
 8001e80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d038      	beq.n	8001efa <u8g2_draw_string+0xaa>
      break;
    str++;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8001e8e:	8abb      	ldrh	r3, [r7, #20]
 8001e90:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d0e9      	beq.n	8001e6c <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8001e98:	8abb      	ldrh	r3, [r7, #20]
 8001e9a:	7aba      	ldrb	r2, [r7, #10]
 8001e9c:	7af9      	ldrb	r1, [r7, #11]
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f7ff ff84 	bl	8001dac <u8g2_DrawGlyph>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	d81e      	bhi.n	8001ef0 <u8g2_draw_string+0xa0>
 8001eb2:	a201      	add	r2, pc, #4	; (adr r2, 8001eb8 <u8g2_draw_string+0x68>)
 8001eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb8:	08001ec9 	.word	0x08001ec9
 8001ebc:	08001ed3 	.word	0x08001ed3
 8001ec0:	08001edd 	.word	0x08001edd
 8001ec4:	08001ee7 	.word	0x08001ee7
      {
	case 0:
	  x += delta;
 8001ec8:	7afa      	ldrb	r2, [r7, #11]
 8001eca:	7cfb      	ldrb	r3, [r7, #19]
 8001ecc:	4413      	add	r3, r2
 8001ece:	72fb      	strb	r3, [r7, #11]
	  break;
 8001ed0:	e00e      	b.n	8001ef0 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8001ed2:	7aba      	ldrb	r2, [r7, #10]
 8001ed4:	7cfb      	ldrb	r3, [r7, #19]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	72bb      	strb	r3, [r7, #10]
	  break;
 8001eda:	e009      	b.n	8001ef0 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001edc:	7afa      	ldrb	r2, [r7, #11]
 8001ede:	7cfb      	ldrb	r3, [r7, #19]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	72fb      	strb	r3, [r7, #11]
	  break;
 8001ee4:	e004      	b.n	8001ef0 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8001ee6:	7aba      	ldrb	r2, [r7, #10]
 8001ee8:	7cfb      	ldrb	r3, [r7, #19]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	72bb      	strb	r3, [r7, #10]
	  break;
 8001eee:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8001ef0:	7dfa      	ldrb	r2, [r7, #23]
 8001ef2:	7cfb      	ldrb	r3, [r7, #19]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001ef8:	e7b8      	b.n	8001e6c <u8g2_draw_string+0x1c>
      break;
 8001efa:	bf00      	nop
    }
  }
  return sum;
 8001efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop

08001f08 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	460b      	mov	r3, r1
 8001f14:	72fb      	strb	r3, [r7, #11]
 8001f16:	4613      	mov	r3, r2
 8001f18:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4a06      	ldr	r2, [pc, #24]	; (8001f38 <u8g2_DrawStr+0x30>)
 8001f1e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8001f20:	7aba      	ldrb	r2, [r7, #10]
 8001f22:	7af9      	ldrb	r1, [r7, #11]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f7ff ff92 	bl	8001e50 <u8g2_draw_string>
 8001f2c:	4603      	mov	r3, r0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	08002c07 	.word	0x08002c07

08001f3c <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d05d      	beq.n	8002008 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f993 2071 	ldrsb.w	r2, [r3, #113]	; 0x71
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f993 2072 	ldrsb.w	r2, [r3, #114]	; 0x72
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d04d      	beq.n	800200a <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d11c      	bne.n	8001fb2 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f993 207e 	ldrsb.w	r2, [r3, #126]	; 0x7e
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f993 3073 	ldrsb.w	r3, [r3, #115]	; 0x73
 8001f84:	429a      	cmp	r2, r3
 8001f86:	da05      	bge.n	8001f94 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f993 2073 	ldrsb.w	r2, [r3, #115]	; 0x73
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	dd32      	ble.n	800200a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8001fb0:	e02b      	b.n	800200a <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8001fb8:	461a      	mov	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8001fc8:	440b      	add	r3, r1
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	da0d      	bge.n	8001fea <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	4413      	add	r3, r2
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	b25a      	sxtb	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	dd07      	ble.n	800200a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f993 2070 	ldrsb.w	r2, [r3, #112]	; 0x70
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8002006:	e000      	b.n	800200a <u8g2_UpdateRefHeight+0xce>
    return;
 8002008:	bf00      	nop
  }  
}
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr

08002012 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  return 0;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr
	...

08002028 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a03      	ldr	r2, [pc, #12]	; (8002040 <u8g2_SetFontPosBaseline+0x18>)
 8002034:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr
 8002040:	08002013 	.word	0x08002013

08002044 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d00b      	beq.n	8002070 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	64da      	str	r2, [r3, #76]	; 0x4c
    u8g2_read_font_info(&(u8g2->font_info), font);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3364      	adds	r3, #100	; 0x64
 8002062:	6839      	ldr	r1, [r7, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fa6f 	bl	8001548 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff ff66 	bl	8001f3c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint16_t e;
  u8g2_uint_t  w, dx;
  
  u8g2->font_decode.glyph_width = 0;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 fdae 	bl	8002bec <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	73fb      	strb	r3, [r7, #15]
  dx = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	73bb      	strb	r3, [r7, #14]

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	7812      	ldrb	r2, [r2, #0]
 80020a0:	4611      	mov	r1, r2
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	4798      	blx	r3
 80020a6:	4603      	mov	r3, r0
 80020a8:	81bb      	strh	r3, [r7, #12]
    if ( e == 0x0ffff )
 80020aa:	89bb      	ldrh	r3, [r7, #12]
 80020ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d013      	beq.n	80020dc <u8g2_string_width+0x64>
      break;
    str++;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	3301      	adds	r3, #1
 80020b8:	603b      	str	r3, [r7, #0]
    if ( e != 0x0fffe )
 80020ba:	89bb      	ldrh	r3, [r7, #12]
 80020bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d0e9      	beq.n	8002098 <u8g2_string_width+0x20>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 80020c4:	89bb      	ldrh	r3, [r7, #12]
 80020c6:	4619      	mov	r1, r3
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff fe22 	bl	8001d12 <u8g2_GetGlyphWidth>
 80020ce:	4603      	mov	r3, r0
 80020d0:	73bb      	strb	r3, [r7, #14]
      w += dx;
 80020d2:	7bfa      	ldrb	r2, [r7, #15]
 80020d4:	7bbb      	ldrb	r3, [r7, #14]
 80020d6:	4413      	add	r3, r2
 80020d8:	73fb      	strb	r3, [r7, #15]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80020da:	e7dd      	b.n	8002098 <u8g2_string_width+0x20>
      break;
 80020dc:	bf00      	nop
    }
  }
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d011      	beq.n	800210c <u8g2_string_width+0x94>
  {
    w -= dx;
 80020e8:	7bfa      	ldrb	r2, [r7, #15]
 80020ea:	7bbb      	ldrb	r3, [r7, #14]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	73fb      	strb	r3, [r7, #15]
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	4413      	add	r3, r2
 80020fc:	73fb      	strb	r3, [r7, #15]
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002104:	b2da      	uxtb	r2, r3
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	4413      	add	r3, r2
 800210a:	73fb      	strb	r3, [r7, #15]
  }
  // printf("w=%d \n", w);
  
  return w;  
 800210c:	7bfb      	ldrb	r3, [r7, #15]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <u8g2_GetStrWidth>:




u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a05      	ldr	r2, [pc, #20]	; (800213c <u8g2_GetStrWidth+0x24>)
 8002126:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, s);
 8002128:	6839      	ldr	r1, [r7, #0]
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff ffa4 	bl	8002078 <u8g2_string_width>
 8002130:	4603      	mov	r3, r0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	08002c07 	.word	0x08002c07

08002140 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8002140:	b480      	push	{r7}
 8002142:	b087      	sub	sp, #28
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	4611      	mov	r1, r2
 800214c:	461a      	mov	r2, r3
 800214e:	460b      	mov	r3, r1
 8002150:	71fb      	strb	r3, [r7, #7]
 8002152:	4613      	mov	r3, r2
 8002154:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 800215c:	7dfb      	ldrb	r3, [r7, #23]
 800215e:	75bb      	strb	r3, [r7, #22]
  b += *len;
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	781a      	ldrb	r2, [r3, #0]
 8002164:	7dbb      	ldrb	r3, [r7, #22]
 8002166:	4413      	add	r3, r2
 8002168:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 800216a:	7dfa      	ldrb	r2, [r7, #23]
 800216c:	7dbb      	ldrb	r3, [r7, #22]
 800216e:	429a      	cmp	r2, r3
 8002170:	d90b      	bls.n	800218a <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8002172:	7dfa      	ldrb	r2, [r7, #23]
 8002174:	79bb      	ldrb	r3, [r7, #6]
 8002176:	429a      	cmp	r2, r3
 8002178:	d205      	bcs.n	8002186 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 800217a:	79bb      	ldrb	r3, [r7, #6]
 800217c:	75bb      	strb	r3, [r7, #22]
      b--;
 800217e:	7dbb      	ldrb	r3, [r7, #22]
 8002180:	3b01      	subs	r3, #1
 8002182:	75bb      	strb	r3, [r7, #22]
 8002184:	e001      	b.n	800218a <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 800218a:	7dfa      	ldrb	r2, [r7, #23]
 800218c:	79bb      	ldrb	r3, [r7, #6]
 800218e:	429a      	cmp	r2, r3
 8002190:	d301      	bcc.n	8002196 <u8g2_clip_intersection2+0x56>
    return 0;
 8002192:	2300      	movs	r3, #0
 8002194:	e01c      	b.n	80021d0 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8002196:	7dba      	ldrb	r2, [r7, #22]
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	429a      	cmp	r2, r3
 800219c:	d801      	bhi.n	80021a2 <u8g2_clip_intersection2+0x62>
    return 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	e016      	b.n	80021d0 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 80021a2:	7dfa      	ldrb	r2, [r7, #23]
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d201      	bcs.n	80021ae <u8g2_clip_intersection2+0x6e>
    a = c;
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 80021ae:	7dba      	ldrb	r2, [r7, #22]
 80021b0:	79bb      	ldrb	r3, [r7, #6]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d901      	bls.n	80021ba <u8g2_clip_intersection2+0x7a>
    b = d;
 80021b6:	79bb      	ldrb	r3, [r7, #6]
 80021b8:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	7dfa      	ldrb	r2, [r7, #23]
 80021be:	701a      	strb	r2, [r3, #0]
  b -= a;
 80021c0:	7dba      	ldrb	r2, [r7, #22]
 80021c2:	7dfb      	ldrb	r3, [r7, #23]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	75bb      	strb	r3, [r7, #22]
  *len = b;
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	7dba      	ldrb	r2, [r7, #22]
 80021cc:	701a      	strb	r2, [r3, #0]
  return 1;
 80021ce:	2301      	movs	r3, #1
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	371c      	adds	r7, #28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr

080021da <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80021da:	b590      	push	{r4, r7, lr}
 80021dc:	b085      	sub	sp, #20
 80021de:	af02      	add	r7, sp, #8
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	4608      	mov	r0, r1
 80021e4:	4611      	mov	r1, r2
 80021e6:	461a      	mov	r2, r3
 80021e8:	4603      	mov	r3, r0
 80021ea:	70fb      	strb	r3, [r7, #3]
 80021ec:	460b      	mov	r3, r1
 80021ee:	70bb      	strb	r3, [r7, #2]
 80021f0:	4613      	mov	r3, r2
 80021f2:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021fa:	78ba      	ldrb	r2, [r7, #2]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002204:	7878      	ldrb	r0, [r7, #1]
 8002206:	78ba      	ldrb	r2, [r7, #2]
 8002208:	78f9      	ldrb	r1, [r7, #3]
 800220a:	7e3b      	ldrb	r3, [r7, #24]
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	4603      	mov	r3, r0
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	47a0      	blx	r4
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	bd90      	pop	{r4, r7, pc}

0800221c <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800221c:	b590      	push	{r4, r7, lr}
 800221e:	b085      	sub	sp, #20
 8002220:	af02      	add	r7, sp, #8
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	4608      	mov	r0, r1
 8002226:	4611      	mov	r1, r2
 8002228:	461a      	mov	r2, r3
 800222a:	4603      	mov	r3, r0
 800222c:	70fb      	strb	r3, [r7, #3]
 800222e:	460b      	mov	r3, r1
 8002230:	70bb      	strb	r3, [r7, #2]
 8002232:	4613      	mov	r3, r2
 8002234:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800223c:	2b00      	cmp	r3, #0
 800223e:	d06d      	beq.n	800231c <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8002240:	787b      	ldrb	r3, [r7, #1]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d06a      	beq.n	800231c <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8002246:	787b      	ldrb	r3, [r7, #1]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d918      	bls.n	800227e <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 800224c:	7e3b      	ldrb	r3, [r7, #24]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d109      	bne.n	8002266 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 8002252:	78fa      	ldrb	r2, [r7, #3]
 8002254:	787b      	ldrb	r3, [r7, #1]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	b2db      	uxtb	r3, r3
 800225a:	70fb      	strb	r3, [r7, #3]
	  x++;
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	3301      	adds	r3, #1
 8002260:	b2db      	uxtb	r3, r3
 8002262:	70fb      	strb	r3, [r7, #3]
 8002264:	e00b      	b.n	800227e <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 8002266:	7e3b      	ldrb	r3, [r7, #24]
 8002268:	2b03      	cmp	r3, #3
 800226a:	d108      	bne.n	800227e <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 800226c:	78ba      	ldrb	r2, [r7, #2]
 800226e:	787b      	ldrb	r3, [r7, #1]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	b2db      	uxtb	r3, r3
 8002274:	70bb      	strb	r3, [r7, #2]
	  y++;
 8002276:	78bb      	ldrb	r3, [r7, #2]
 8002278:	3301      	adds	r3, #1
 800227a:	b2db      	uxtb	r3, r3
 800227c:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 800227e:	7e3b      	ldrb	r3, [r7, #24]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 8002286:	7e3b      	ldrb	r3, [r7, #24]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d119      	bne.n	80022c0 <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8002292:	78bb      	ldrb	r3, [r7, #2]
 8002294:	429a      	cmp	r2, r3
 8002296:	d838      	bhi.n	800230a <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800229e:	78bb      	ldrb	r3, [r7, #2]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d934      	bls.n	800230e <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022b0:	1c79      	adds	r1, r7, #1
 80022b2:	1cf8      	adds	r0, r7, #3
 80022b4:	f7ff ff44 	bl	8002140 <u8g2_clip_intersection2>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d119      	bne.n	80022f2 <u8g2_DrawHVLine+0xd6>
	  return;
 80022be:	e02d      	b.n	800231c <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80022c6:	78fb      	ldrb	r3, [r7, #3]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d822      	bhi.n	8002312 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80022d2:	78fb      	ldrb	r3, [r7, #3]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d91e      	bls.n	8002316 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022e4:	1c79      	adds	r1, r7, #1
 80022e6:	1cb8      	adds	r0, r7, #2
 80022e8:	f7ff ff2a 	bl	8002140 <u8g2_clip_intersection2>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d013      	beq.n	800231a <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	689c      	ldr	r4, [r3, #8]
 80022f8:	78f9      	ldrb	r1, [r7, #3]
 80022fa:	78ba      	ldrb	r2, [r7, #2]
 80022fc:	7878      	ldrb	r0, [r7, #1]
 80022fe:	7e3b      	ldrb	r3, [r7, #24]
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	4603      	mov	r3, r0
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	47a0      	blx	r4
 8002308:	e008      	b.n	800231c <u8g2_DrawHVLine+0x100>
	  return;
 800230a:	bf00      	nop
 800230c:	e006      	b.n	800231c <u8g2_DrawHVLine+0x100>
	  return;
 800230e:	bf00      	nop
 8002310:	e004      	b.n	800231c <u8g2_DrawHVLine+0x100>
	  return;
 8002312:	bf00      	nop
 8002314:	e002      	b.n	800231c <u8g2_DrawHVLine+0x100>
	  return;
 8002316:	bf00      	nop
 8002318:	e000      	b.n	800231c <u8g2_DrawHVLine+0x100>
	  return;
 800231a:	bf00      	nop
    }
}
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	bd90      	pop	{r4, r7, pc}

08002322 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b084      	sub	sp, #16
 8002326:	af02      	add	r7, sp, #8
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	4608      	mov	r0, r1
 800232c:	4611      	mov	r1, r2
 800232e:	461a      	mov	r2, r3
 8002330:	4603      	mov	r3, r0
 8002332:	70fb      	strb	r3, [r7, #3]
 8002334:	460b      	mov	r3, r1
 8002336:	70bb      	strb	r3, [r7, #2]
 8002338:	4613      	mov	r3, r2
 800233a:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 800233c:	7878      	ldrb	r0, [r7, #1]
 800233e:	78ba      	ldrb	r2, [r7, #2]
 8002340:	78f9      	ldrb	r1, [r7, #3]
 8002342:	2300      	movs	r3, #0
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	4603      	mov	r3, r0
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ff67 	bl	800221c <u8g2_DrawHVLine>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b084      	sub	sp, #16
 800235a:	af02      	add	r7, sp, #8
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	4608      	mov	r0, r1
 8002360:	4611      	mov	r1, r2
 8002362:	461a      	mov	r2, r3
 8002364:	4603      	mov	r3, r0
 8002366:	70fb      	strb	r3, [r7, #3]
 8002368:	460b      	mov	r3, r1
 800236a:	70bb      	strb	r3, [r7, #2]
 800236c:	4613      	mov	r3, r2
 800236e:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 8002370:	7878      	ldrb	r0, [r7, #1]
 8002372:	78ba      	ldrb	r2, [r7, #2]
 8002374:	78f9      	ldrb	r1, [r7, #3]
 8002376:	2301      	movs	r3, #1
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	4603      	mov	r3, r0
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7ff ff4d 	bl	800221c <u8g2_DrawHVLine>
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b084      	sub	sp, #16
 800238e:	af02      	add	r7, sp, #8
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	460b      	mov	r3, r1
 8002394:	70fb      	strb	r3, [r7, #3]
 8002396:	4613      	mov	r3, r2
 8002398:	70bb      	strb	r3, [r7, #2]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80023a0:	78ba      	ldrb	r2, [r7, #2]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d31a      	bcc.n	80023dc <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023ac:	78ba      	ldrb	r2, [r7, #2]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d216      	bcs.n	80023e0 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023b8:	78fa      	ldrb	r2, [r7, #3]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d312      	bcc.n	80023e4 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80023c4:	78fa      	ldrb	r2, [r7, #3]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d20e      	bcs.n	80023e8 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80023ca:	78ba      	ldrb	r2, [r7, #2]
 80023cc:	78f9      	ldrb	r1, [r7, #3]
 80023ce:	2300      	movs	r3, #0
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	2301      	movs	r3, #1
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff ff21 	bl	800221c <u8g2_DrawHVLine>
 80023da:	e006      	b.n	80023ea <u8g2_DrawPixel+0x60>
    return;
 80023dc:	bf00      	nop
 80023de:	e004      	b.n	80023ea <u8g2_DrawPixel+0x60>
    return;
 80023e0:	bf00      	nop
 80023e2:	e002      	b.n	80023ea <u8g2_DrawPixel+0x60>
    return;
 80023e4:	bf00      	nop
 80023e6:	e000      	b.n	80023ea <u8g2_DrawPixel+0x60>
    return;
 80023e8:	bf00      	nop
}
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	78fa      	ldrb	r2, [r7, #3]
 8002400:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  if ( color >= 3 )
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d903      	bls.n	8002412 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 800241c:	b490      	push	{r4, r7}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	4604      	mov	r4, r0
 8002424:	4608      	mov	r0, r1
 8002426:	4611      	mov	r1, r2
 8002428:	461a      	mov	r2, r3
 800242a:	4623      	mov	r3, r4
 800242c:	71fb      	strb	r3, [r7, #7]
 800242e:	4603      	mov	r3, r0
 8002430:	71bb      	strb	r3, [r7, #6]
 8002432:	460b      	mov	r3, r1
 8002434:	717b      	strb	r3, [r7, #5]
 8002436:	4613      	mov	r3, r2
 8002438:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 800243a:	797a      	ldrb	r2, [r7, #5]
 800243c:	79bb      	ldrb	r3, [r7, #6]
 800243e:	429a      	cmp	r2, r3
 8002440:	d20d      	bcs.n	800245e <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8002442:	793a      	ldrb	r2, [r7, #4]
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	429a      	cmp	r2, r3
 8002448:	d901      	bls.n	800244e <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 800244a:	2301      	movs	r3, #1
 800244c:	e014      	b.n	8002478 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800244e:	797a      	ldrb	r2, [r7, #5]
 8002450:	793b      	ldrb	r3, [r7, #4]
 8002452:	429a      	cmp	r2, r3
 8002454:	d901      	bls.n	800245a <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8002456:	2301      	movs	r3, #1
 8002458:	e00e      	b.n	8002478 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800245a:	2300      	movs	r3, #0
 800245c:	e00c      	b.n	8002478 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800245e:	793a      	ldrb	r2, [r7, #4]
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	429a      	cmp	r2, r3
 8002464:	d907      	bls.n	8002476 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8002466:	797a      	ldrb	r2, [r7, #5]
 8002468:	793b      	ldrb	r3, [r7, #4]
 800246a:	429a      	cmp	r2, r3
 800246c:	d901      	bls.n	8002472 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 800246e:	2301      	movs	r3, #1
 8002470:	e002      	b.n	8002478 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002472:	2300      	movs	r3, #0
 8002474:	e000      	b.n	8002478 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8002476:	2300      	movs	r3, #0
    }
  }
}
 8002478:	4618      	mov	r0, r3
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bc90      	pop	{r4, r7}
 8002480:	4770      	bx	lr

08002482 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	4608      	mov	r0, r1
 800248c:	4611      	mov	r1, r2
 800248e:	461a      	mov	r2, r3
 8002490:	4603      	mov	r3, r0
 8002492:	70fb      	strb	r3, [r7, #3]
 8002494:	460b      	mov	r3, r1
 8002496:	70bb      	strb	r3, [r7, #2]
 8002498:	4613      	mov	r3, r2
 800249a:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 80024a8:	7c3b      	ldrb	r3, [r7, #16]
 80024aa:	78ba      	ldrb	r2, [r7, #2]
 80024ac:	f7ff ffb6 	bl	800241c <u8g2_is_intersection_decision_tree>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <u8g2_IsIntersection+0x38>
    return 0; 
 80024b6:	2300      	movs	r3, #0
 80024b8:	e00a      	b.n	80024d0 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 0041 	ldrb.w	r0, [r3, #65]	; 0x41
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 80024c6:	787b      	ldrb	r3, [r7, #1]
 80024c8:	78fa      	ldrb	r2, [r7, #3]
 80024ca:	f7ff ffa7 	bl	800241c <u8g2_is_intersection_decision_tree>
 80024ce:	4603      	mov	r3, r0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80024d8:	b480      	push	{r7}
 80024da:	b087      	sub	sp, #28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	4608      	mov	r0, r1
 80024e2:	4611      	mov	r1, r2
 80024e4:	461a      	mov	r2, r3
 80024e6:	4603      	mov	r3, r0
 80024e8:	70fb      	strb	r3, [r7, #3]
 80024ea:	460b      	mov	r3, r1
 80024ec:	70bb      	strb	r3, [r7, #2]
 80024ee:	4613      	mov	r3, r2
 80024f0:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80024f2:	78bb      	ldrb	r3, [r7, #2]
 80024f4:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80024f6:	7cfb      	ldrb	r3, [r7, #19]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 80024fe:	2301      	movs	r3, #1
 8002500:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 8002502:	7c3a      	ldrb	r2, [r7, #16]
 8002504:	7cfb      	ldrb	r3, [r7, #19]
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800251a:	2b01      	cmp	r3, #1
 800251c:	d801      	bhi.n	8002522 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 800251e:	7c3b      	ldrb	r3, [r7, #16]
 8002520:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8002528:	2b01      	cmp	r3, #1
 800252a:	d001      	beq.n	8002530 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 800252c:	7c3b      	ldrb	r3, [r7, #16]
 800252e:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002530:	78bb      	ldrb	r3, [r7, #2]
 8002532:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 8002534:	89fb      	ldrh	r3, [r7, #14]
 8002536:	f023 0307 	bic.w	r3, r3, #7
 800253a:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	7c1b      	ldrb	r3, [r3, #16]
 8002542:	b29b      	uxth	r3, r3
 8002544:	89fa      	ldrh	r2, [r7, #14]
 8002546:	fb02 f303 	mul.w	r3, r2, r3
 800254a:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002550:	617b      	str	r3, [r7, #20]
  ptr += offset;
 8002552:	89fb      	ldrh	r3, [r7, #14]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	4413      	add	r3, r2
 8002558:	617b      	str	r3, [r7, #20]
  ptr += x;
 800255a:	78fb      	ldrb	r3, [r7, #3]
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	4413      	add	r3, r2
 8002560:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 8002562:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d117      	bne.n	800259a <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	781a      	ldrb	r2, [r3, #0]
 800256e:	7cbb      	ldrb	r3, [r7, #18]
 8002570:	4313      	orrs	r3, r2
 8002572:	b2da      	uxtb	r2, r3
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	781a      	ldrb	r2, [r3, #0]
 800257c:	7c7b      	ldrb	r3, [r7, #17]
 800257e:	4053      	eors	r3, r2
 8002580:	b2da      	uxtb	r2, r3
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	701a      	strb	r2, [r3, #0]
	ptr++;
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	3301      	adds	r3, #1
 800258a:	617b      	str	r3, [r7, #20]
	len--;
 800258c:	787b      	ldrb	r3, [r7, #1]
 800258e:	3b01      	subs	r3, #1
 8002590:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 8002592:	787b      	ldrb	r3, [r7, #1]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1e8      	bne.n	800256a <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002598:	e039      	b.n	800260e <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	781a      	ldrb	r2, [r3, #0]
 800259e:	7cbb      	ldrb	r3, [r7, #18]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	781a      	ldrb	r2, [r3, #0]
 80025ac:	7c7b      	ldrb	r3, [r7, #17]
 80025ae:	4053      	eors	r3, r2
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80025b6:	7cfb      	ldrb	r3, [r7, #19]
 80025b8:	3301      	adds	r3, #1
 80025ba:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 80025bc:	7cfb      	ldrb	r3, [r7, #19]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	74fb      	strb	r3, [r7, #19]
      len--;
 80025c4:	787b      	ldrb	r3, [r7, #1]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 80025ca:	7cfb      	ldrb	r3, [r7, #19]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d115      	bne.n	80025fc <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80025d6:	461a      	mov	r2, r3
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	4413      	add	r3, r2
 80025dc:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d801      	bhi.n	80025ec <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 80025e8:	2301      	movs	r3, #1
 80025ea:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d008      	beq.n	8002608 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 80025f6:	2301      	movs	r3, #1
 80025f8:	747b      	strb	r3, [r7, #17]
 80025fa:	e005      	b.n	8002608 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 80025fc:	7cbb      	ldrb	r3, [r7, #18]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 8002602:	7c7b      	ldrb	r3, [r7, #17]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 8002608:	787b      	ldrb	r3, [r7, #1]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1c5      	bne.n	800259a <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800260e:	bf00      	nop
 8002610:	371c      	adds	r7, #28
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->clip_y0 = 0;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	22ff      	movs	r2, #255	; 0xff
 8002634:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	22ff      	movs	r2, #255	; 0xff
 800263c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  u8g2->cb->update_page_win(u8g2);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	4798      	blx	r3
}
 800264a:	bf00      	nop
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b084      	sub	sp, #16
 8002656:	af00      	add	r7, sp, #0
 8002658:	60f8      	str	r0, [r7, #12]
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	603b      	str	r3, [r7, #0]
 800265e:	4613      	mov	r3, r2
 8002660:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	64da      	str	r2, [r3, #76]	; 0x4c
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	79fa      	ldrb	r2, [r7, #7]
 8002678:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
  u8g2->bitmap_transparency = 0;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  
  u8g2->draw_color = 1;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->is_auto_page_clear = 1;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  
  u8g2->cb = u8g2_cb;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f7ff ffaf 	bl	8002618 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f7ff fcb4 	bl	8002028 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
#endif
}
 80026c8:	bf00      	nop
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026e4:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80026e6:	7bfb      	ldrb	r3, [r7, #15]
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	7bfa      	ldrb	r2, [r7, #15]
 80026f0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  
  t = display_info->tile_width;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	7c1b      	ldrb	r3, [r3, #16]
 80026f8:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	2b1f      	cmp	r3, #31
 80026fe:	d901      	bls.n	8002704 <u8g2_update_dimension_common+0x34>
    t = 31;
 8002700:	231f      	movs	r3, #31
 8002702:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	7bfa      	ldrb	r2, [r7, #15]
 800270e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002718:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800271a:	7bfb      	ldrb	r3, [r7, #15]
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  t = u8g2->tile_buf_height;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800272e:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8002738:	4413      	add	r3, r2
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	7c52      	ldrb	r2, [r2, #17]
 800273e:	4293      	cmp	r3, r2
 8002740:	dd06      	ble.n	8002750 <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	7c5a      	ldrb	r2, [r3, #17]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8002750:	7bfb      	ldrb	r3, [r7, #15]
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->buf_y1 = u8g2->buf_y0;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  u8g2->buf_y1 += t;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	4413      	add	r3, r2
 8002778:	b2da      	uxtb	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	22f0      	movs	r2, #240	; 0xf0
 8002784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  if ( display_info->pixel_width <= 240 )
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	8a9b      	ldrh	r3, [r3, #20]
 800278c:	2bf0      	cmp	r3, #240	; 0xf0
 800278e:	d805      	bhi.n	800279c <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	8a9b      	ldrh	r3, [r3, #20]
 8002794:	b2da      	uxtb	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  u8g2->height = display_info->pixel_height;
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	8adb      	ldrh	r3, [r3, #22]
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#endif

}
 80027a8:	bf00      	nop
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b084      	sub	sp, #16
 80027b6:	af02      	add	r7, sp, #8
 80027b8:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 0046 	ldrb.w	r0, [r3, #70]	; 0x46
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	4603      	mov	r3, r0
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff fe53 	bl	8002482 <u8g2_IsIntersection>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d104      	bne.n	80027ec <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80027ea:	e03b      	b.n	8002864 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002800:	429a      	cmp	r2, r3
 8002802:	d205      	bcs.n	8002810 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800281c:	429a      	cmp	r2, r3
 800281e:	d905      	bls.n	800282c <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002838:	429a      	cmp	r2, r3
 800283a:	d205      	bcs.n	8002848 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002854:	429a      	cmp	r2, r3
 8002856:	d905      	bls.n	8002864 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8002864:	bf00      	nop
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7ff ff2b 	bl	80026d0 <u8g2_update_dimension_common>
}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b082      	sub	sp, #8
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = u8g2->buf_y0;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->buf_y1;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff ff7b 	bl	80027b2 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80028bc:	bf00      	nop
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <u8g2_update_dimension_r1>:


void u8g2_update_dimension_r1(u8g2_t *u8g2)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff feff 	bl	80026d0 <u8g2_update_dimension_common>
  
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	8a9b      	ldrh	r3, [r3, #20]
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	8adb      	ldrh	r3, [r3, #22]
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <u8g2_update_page_win_r1>:

void u8g2_update_page_win_r1(u8g2_t *u8g2)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = u8g2->buf_y0;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->buf_y1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = 0;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height;	/* pixel_buf_width replaced with height (which is the real pixel width) */
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7ff ff41 	bl	80027b2 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002930:	bf00      	nop
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <u8g2_update_dimension_r2>:

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff fec5 	bl	80026d0 <u8g2_update_dimension_common>
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( u8g2->height >= u8g2->buf_y1 )
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800297e:	429a      	cmp	r2, r3
 8002980:	d30a      	bcc.n	8002998 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	b2da      	uxtb	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff feff 	bl	80027b2 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80029b4:	bf00      	nop
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <u8g2_update_dimension_r3>:


void u8g2_update_dimension_r3(u8g2_t *u8g2)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff fe83 	bl	80026d0 <u8g2_update_dimension_common>
  
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	8a9b      	ldrh	r3, [r3, #20]
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	8adb      	ldrh	r3, [r3, #22]
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <u8g2_update_page_win_r3>:

void u8g2_update_page_win_r3(u8g2_t *u8g2)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->width */
  u8g2->user_x0 = 0;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  if ( u8g2->width >= u8g2->buf_y1 )
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d30a      	bcc.n	8002a24 <u8g2_update_page_win_r3+0x36>
    u8g2->user_x0 = u8g2->width - u8g2->buf_y1;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width - u8g2->buf_y0;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = 0;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height;	/* pixel_buf_width replaced with height (pixel_width) */
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff feaf 	bl	80027b2 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002a54:	bf00      	nop
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	4608      	mov	r0, r1
 8002a66:	4611      	mov	r1, r2
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	70fb      	strb	r3, [r7, #3]
 8002a6e:	460b      	mov	r3, r1
 8002a70:	70bb      	strb	r3, [r7, #2]
 8002a72:	4613      	mov	r3, r2
 8002a74:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002a76:	7878      	ldrb	r0, [r7, #1]
 8002a78:	78ba      	ldrb	r2, [r7, #2]
 8002a7a:	78f9      	ldrb	r1, [r7, #3]
 8002a7c:	7c3b      	ldrb	r3, [r7, #16]
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	4603      	mov	r3, r0
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff fba9 	bl	80021da <u8g2_draw_hv_line_2dir>
}
 8002a88:	bf00      	nop
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <u8g2_draw_l90_r1>:
  u8g2_draw_hv_line_2dir(u8g2, xx, y, len, dir);
}

/* dir = 0 or 1 */
void u8g2_draw_l90_r1(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af02      	add	r7, sp, #8
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	4608      	mov	r0, r1
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	70fb      	strb	r3, [r7, #3]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	70bb      	strb	r3, [r7, #2]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	707b      	strb	r3, [r7, #1]

#ifdef __unix
  assert( dir <= 1 );
#endif
  
  yy = x;
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	73bb      	strb	r3, [r7, #14]
  
  xx = u8g2->height;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ab4:	73fb      	strb	r3, [r7, #15]
  xx -= y;
 8002ab6:	7bfa      	ldrb	r2, [r7, #15]
 8002ab8:	78bb      	ldrb	r3, [r7, #2]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	73fb      	strb	r3, [r7, #15]
  xx--;
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
  
  dir ++;
 8002ac4:	7e3b      	ldrb	r3, [r7, #24]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	763b      	strb	r3, [r7, #24]
  if ( dir == 2 )
 8002aca:	7e3b      	ldrb	r3, [r7, #24]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d108      	bne.n	8002ae2 <u8g2_draw_l90_r1+0x52>
  {
    xx -= len;
 8002ad0:	7bfa      	ldrb	r2, [r7, #15]
 8002ad2:	787b      	ldrb	r3, [r7, #1]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	73fb      	strb	r3, [r7, #15]
    xx++;
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
 8002ada:	3301      	adds	r3, #1
 8002adc:	73fb      	strb	r3, [r7, #15]
    dir = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	763b      	strb	r3, [r7, #24]
  }
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002ae2:	7878      	ldrb	r0, [r7, #1]
 8002ae4:	7bba      	ldrb	r2, [r7, #14]
 8002ae6:	7bf9      	ldrb	r1, [r7, #15]
 8002ae8:	7e3b      	ldrb	r3, [r7, #24]
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	4603      	mov	r3, r0
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff fb73 	bl	80021da <u8g2_draw_hv_line_2dir>
}
 8002af4:	bf00      	nop
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <u8g2_draw_l90_r2>:

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	4608      	mov	r0, r1
 8002b06:	4611      	mov	r1, r2
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	70fb      	strb	r3, [r7, #3]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	70bb      	strb	r3, [r7, #2]
 8002b12:	4613      	mov	r3, r2
 8002b14:	707b      	strb	r3, [r7, #1]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b1c:	73bb      	strb	r3, [r7, #14]
  yy -= y;
 8002b1e:	7bba      	ldrb	r2, [r7, #14]
 8002b20:	78bb      	ldrb	r3, [r7, #2]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	73bb      	strb	r3, [r7, #14]
  
  xx = u8g2->width;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b2c:	73fb      	strb	r3, [r7, #15]
  xx -= x;
 8002b2e:	7bfa      	ldrb	r2, [r7, #15]
 8002b30:	78fb      	ldrb	r3, [r7, #3]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	73fb      	strb	r3, [r7, #15]
  
  if ( dir == 0 )
 8002b36:	7e3b      	ldrb	r3, [r7, #24]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d107      	bne.n	8002b4c <u8g2_draw_l90_r2+0x50>
  {
    yy--;
 8002b3c:	7bbb      	ldrb	r3, [r7, #14]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	73bb      	strb	r3, [r7, #14]
    xx -= len;
 8002b42:	7bfa      	ldrb	r2, [r7, #15]
 8002b44:	787b      	ldrb	r3, [r7, #1]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	73fb      	strb	r3, [r7, #15]
 8002b4a:	e009      	b.n	8002b60 <u8g2_draw_l90_r2+0x64>
  }
  else if ( dir == 1 )
 8002b4c:	7e3b      	ldrb	r3, [r7, #24]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d106      	bne.n	8002b60 <u8g2_draw_l90_r2+0x64>
  {
    xx--;
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
 8002b54:	3b01      	subs	r3, #1
 8002b56:	73fb      	strb	r3, [r7, #15]
    yy -= len;
 8002b58:	7bba      	ldrb	r2, [r7, #14]
 8002b5a:	787b      	ldrb	r3, [r7, #1]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	73bb      	strb	r3, [r7, #14]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002b60:	7878      	ldrb	r0, [r7, #1]
 8002b62:	7bba      	ldrb	r2, [r7, #14]
 8002b64:	7bf9      	ldrb	r1, [r7, #15]
 8002b66:	7e3b      	ldrb	r3, [r7, #24]
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7ff fb34 	bl	80021da <u8g2_draw_hv_line_2dir>
}
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <u8g2_draw_l90_r3>:

void u8g2_draw_l90_r3(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b086      	sub	sp, #24
 8002b7e:	af02      	add	r7, sp, #8
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	4608      	mov	r0, r1
 8002b84:	4611      	mov	r1, r2
 8002b86:	461a      	mov	r2, r3
 8002b88:	4603      	mov	r3, r0
 8002b8a:	70fb      	strb	r3, [r7, #3]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	70bb      	strb	r3, [r7, #2]
 8002b90:	4613      	mov	r3, r2
 8002b92:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xx, yy;

  xx = y;
 8002b94:	78bb      	ldrb	r3, [r7, #2]
 8002b96:	73bb      	strb	r3, [r7, #14]
  
  yy = u8g2->width;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b9e:	73fb      	strb	r3, [r7, #15]
  yy -= x;
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	78fb      	ldrb	r3, [r7, #3]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	73fb      	strb	r3, [r7, #15]
  
  if ( dir == 0 )
 8002ba8:	7e3b      	ldrb	r3, [r7, #24]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10c      	bne.n	8002bc8 <u8g2_draw_l90_r3+0x4e>
  {
    yy--;
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	73fb      	strb	r3, [r7, #15]
    yy -= len;
 8002bb4:	7bfa      	ldrb	r2, [r7, #15]
 8002bb6:	787b      	ldrb	r3, [r7, #1]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	73fb      	strb	r3, [r7, #15]
    yy++;
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	73fb      	strb	r3, [r7, #15]
    dir = 1;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	763b      	strb	r3, [r7, #24]
 8002bc6:	e004      	b.n	8002bd2 <u8g2_draw_l90_r3+0x58>
  }
  else
  {
    yy--;
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	73fb      	strb	r3, [r7, #15]
    dir = 0;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	763b      	strb	r3, [r7, #24]
  }
  
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002bd2:	7878      	ldrb	r0, [r7, #1]
 8002bd4:	7bfa      	ldrb	r2, [r7, #15]
 8002bd6:	7bb9      	ldrb	r1, [r7, #14]
 8002bd8:	7e3b      	ldrb	r3, [r7, #24]
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	4603      	mov	r3, r0
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff fafb 	bl	80021da <u8g2_draw_hv_line_2dir>
}
 8002be4:	bf00      	nop
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr

08002c06 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
 8002c0e:	460b      	mov	r3, r1
 8002c10:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8002c12:	78fb      	ldrb	r3, [r7, #3]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d002      	beq.n	8002c1e <u8x8_ascii_next+0x18>
 8002c18:	78fb      	ldrb	r3, [r7, #3]
 8002c1a:	2b0a      	cmp	r3, #10
 8002c1c:	d102      	bne.n	8002c24 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8002c1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c22:	e001      	b.n	8002c28 <u8x8_ascii_next+0x22>
  return b;
 8002c24:	78fb      	ldrb	r3, [r7, #3]
 8002c26:	b29b      	uxth	r3, r3
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr

08002c32 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8002c32:	b590      	push	{r4, r7, lr}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691c      	ldr	r4, [r3, #16]
 8002c42:	78fa      	ldrb	r2, [r7, #3]
 8002c44:	2300      	movs	r3, #0
 8002c46:	2120      	movs	r1, #32
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	47a0      	blx	r4
 8002c4c:	4603      	mov	r3, r0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd90      	pop	{r4, r7, pc}

08002c56 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002c56:	b590      	push	{r4, r7, lr}
 8002c58:	b085      	sub	sp, #20
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	60f8      	str	r0, [r7, #12]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	607a      	str	r2, [r7, #4]
 8002c62:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	691c      	ldr	r4, [r3, #16]
 8002c68:	7afa      	ldrb	r2, [r7, #11]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2117      	movs	r1, #23
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	47a0      	blx	r4
 8002c72:	4603      	mov	r3, r0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd90      	pop	{r4, r7, pc}

08002c7c <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	460b      	mov	r3, r1
 8002c86:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002c88:	1cfb      	adds	r3, r7, #3
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7ff ffe1 	bl	8002c56 <u8x8_byte_SendBytes>
 8002c94:	4603      	mov	r3, r0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002c9e:	b590      	push	{r4, r7, lr}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68dc      	ldr	r4, [r3, #12]
 8002cae:	78fa      	ldrb	r2, [r7, #3]
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	2115      	movs	r1, #21
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	47a0      	blx	r4
 8002cb8:	4603      	mov	r3, r0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd90      	pop	{r4, r7, pc}

08002cc2 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002cc2:	b590      	push	{r4, r7, lr}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68dc      	ldr	r4, [r3, #12]
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	2116      	movs	r1, #22
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	47a0      	blx	r4
 8002cdc:	4603      	mov	r3, r0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd90      	pop	{r4, r7, pc}

08002ce6 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002ce6:	b590      	push	{r4, r7, lr}
 8002ce8:	b085      	sub	sp, #20
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	460b      	mov	r3, r1
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	68dc      	ldr	r4, [r3, #12]
 8002cf8:	7afa      	ldrb	r2, [r7, #11]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2117      	movs	r1, #23
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	47a0      	blx	r4
 8002d02:	4603      	mov	r3, r0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd90      	pop	{r4, r7, pc}

08002d0c <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68dc      	ldr	r4, [r3, #12]
 8002d18:	2300      	movs	r3, #0
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2118      	movs	r1, #24
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	47a0      	blx	r4
 8002d22:	4603      	mov	r3, r0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd90      	pop	{r4, r7, pc}

08002d2c <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8002d2c:	b590      	push	{r4, r7, lr}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68dc      	ldr	r4, [r3, #12]
 8002d38:	2300      	movs	r3, #0
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2119      	movs	r1, #25
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	47a0      	blx	r4
 8002d42:	4603      	mov	r3, r0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd90      	pop	{r4, r7, pc}

08002d4c <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8002d4c:	b590      	push	{r4, r7, lr}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	73fb      	strb	r3, [r7, #15]
    data++;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	2b17      	cmp	r3, #23
 8002d66:	d017      	beq.n	8002d98 <u8x8_cad_SendSequence+0x4c>
 8002d68:	2b17      	cmp	r3, #23
 8002d6a:	dc02      	bgt.n	8002d72 <u8x8_cad_SendSequence+0x26>
 8002d6c:	2b15      	cmp	r3, #21
 8002d6e:	db37      	blt.n	8002de0 <u8x8_cad_SendSequence+0x94>
 8002d70:	e004      	b.n	8002d7c <u8x8_cad_SendSequence+0x30>
 8002d72:	2b19      	cmp	r3, #25
 8002d74:	dd1e      	ble.n	8002db4 <u8x8_cad_SendSequence+0x68>
 8002d76:	2bfe      	cmp	r3, #254	; 0xfe
 8002d78:	d024      	beq.n	8002dc4 <u8x8_cad_SendSequence+0x78>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8002d7a:	e031      	b.n	8002de0 <u8x8_cad_SendSequence+0x94>
	  v = *data;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68dc      	ldr	r4, [r3, #12]
 8002d86:	7bba      	ldrb	r2, [r7, #14]
 8002d88:	7bf9      	ldrb	r1, [r7, #15]
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	47a0      	blx	r4
	  data++;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	3301      	adds	r3, #1
 8002d94:	603b      	str	r3, [r7, #0]
	  break;
 8002d96:	e022      	b.n	8002dde <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002d9e:	f107 030e 	add.w	r3, r7, #14
 8002da2:	461a      	mov	r2, r3
 8002da4:	2101      	movs	r1, #1
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7ff ff9d 	bl	8002ce6 <u8x8_cad_SendData>
	  data++;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	3301      	adds	r3, #1
 8002db0:	603b      	str	r3, [r7, #0]
	  break;
 8002db2:	e014      	b.n	8002dde <u8x8_cad_SendSequence+0x92>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68dc      	ldr	r4, [r3, #12]
 8002db8:	7bf9      	ldrb	r1, [r7, #15]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	47a0      	blx	r4
	  break;
 8002dc2:	e00c      	b.n	8002dde <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002dca:	7bbb      	ldrb	r3, [r7, #14]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	2129      	movs	r1, #41	; 0x29
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f9d7 	bl	8003184 <u8x8_gpio_call>
	  data++;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	603b      	str	r3, [r7, #0]
	  break;
 8002ddc:	bf00      	nop
    cmd = *data;
 8002dde:	e7ba      	b.n	8002d56 <u8x8_cad_SendSequence+0xa>
	return;
 8002de0:	bf00      	nop
    }
  }
}
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd90      	pop	{r4, r7, pc}

08002de8 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002de8:	b590      	push	{r4, r7, lr}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	607b      	str	r3, [r7, #4]
 8002df2:	460b      	mov	r3, r1
 8002df4:	72fb      	strb	r3, [r7, #11]
 8002df6:	4613      	mov	r3, r2
 8002df8:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8002dfa:	7afb      	ldrb	r3, [r7, #11]
 8002dfc:	3b14      	subs	r3, #20
 8002dfe:	2b05      	cmp	r3, #5
 8002e00:	d82f      	bhi.n	8002e62 <u8x8_cad_001+0x7a>
 8002e02:	a201      	add	r2, pc, #4	; (adr r2, 8002e08 <u8x8_cad_001+0x20>)
 8002e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e08:	08002e51 	.word	0x08002e51
 8002e0c:	08002e21 	.word	0x08002e21
 8002e10:	08002e35 	.word	0x08002e35
 8002e14:	08002e49 	.word	0x08002e49
 8002e18:	08002e51 	.word	0x08002e51
 8002e1c:	08002e51 	.word	0x08002e51
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8002e20:	2100      	movs	r1, #0
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f7ff ff05 	bl	8002c32 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002e28:	7abb      	ldrb	r3, [r7, #10]
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f7ff ff25 	bl	8002c7c <u8x8_byte_SendByte>
      break;
 8002e32:	e018      	b.n	8002e66 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8002e34:	2100      	movs	r1, #0
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f7ff fefb 	bl	8002c32 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002e3c:	7abb      	ldrb	r3, [r7, #10]
 8002e3e:	4619      	mov	r1, r3
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f7ff ff1b 	bl	8002c7c <u8x8_byte_SendByte>
      break;
 8002e46:	e00e      	b.n	8002e66 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8002e48:	2101      	movs	r1, #1
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f7ff fef1 	bl	8002c32 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	691c      	ldr	r4, [r3, #16]
 8002e54:	7aba      	ldrb	r2, [r7, #10]
 8002e56:	7af9      	ldrb	r1, [r7, #11]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	47a0      	blx	r4
 8002e5e:	4603      	mov	r3, r0
 8002e60:	e002      	b.n	8002e68 <u8x8_cad_001+0x80>
    default:
      return 0;
 8002e62:	2300      	movs	r3, #0
 8002e64:	e000      	b.n	8002e68 <u8x8_cad_001+0x80>
  }
  return 1;
 8002e66:	2301      	movs	r3, #1
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd90      	pop	{r4, r7, pc}

08002e70 <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	607b      	str	r3, [r7, #4]
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	72fb      	strb	r3, [r7, #11]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002e82:	7afb      	ldrb	r3, [r7, #11]
 8002e84:	2b0e      	cmp	r3, #14
 8002e86:	d05f      	beq.n	8002f48 <u8x8_d_st7565_common+0xd8>
 8002e88:	2b0f      	cmp	r3, #15
 8002e8a:	d002      	beq.n	8002e92 <u8x8_d_st7565_common+0x22>
 8002e8c:	2b0b      	cmp	r3, #11
 8002e8e:	d04e      	beq.n	8002f2e <u8x8_d_st7565_common+0xbe>
 8002e90:	e06c      	b.n	8002f6c <u8x8_d_st7565_common+0xfc>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f7ff ff3a 	bl	8002d0c <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	795b      	ldrb	r3, [r3, #5]
 8002e9c:	75bb      	strb	r3, [r7, #22]
      x *= 8;
 8002e9e:	7dbb      	ldrb	r3, [r7, #22]
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	75bb      	strb	r3, [r7, #22]
      x += u8x8->x_offset;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002eaa:	7dbb      	ldrb	r3, [r7, #22]
 8002eac:	4413      	add	r3, r2
 8002eae:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002eb0:	7dbb      	ldrb	r3, [r7, #22]
 8002eb2:	091b      	lsrs	r3, r3, #4
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	f043 0310 	orr.w	r3, r3, #16
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f7ff feed 	bl	8002c9e <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8002ec4:	7dbb      	ldrb	r3, [r7, #22]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	4619      	mov	r1, r3
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f7ff fee5 	bl	8002c9e <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	799b      	ldrb	r3, [r3, #6]
 8002ed8:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	4619      	mov	r1, r3
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f7ff fedc 	bl	8002c9e <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	791b      	ldrb	r3, [r3, #4]
 8002eea:	75fb      	strb	r3, [r7, #23]
      c *= 8;
 8002eec:	7dfb      	ldrb	r3, [r7, #23]
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	613b      	str	r3, [r7, #16]
      /* 
	The following if condition checks the hardware limits of the st7565 
	controller: It is not allowed to write beyond the display limits.
	This is in fact an issue within flip mode.
      */
      if ( c + x > 132u )
 8002ef8:	7dfa      	ldrb	r2, [r7, #23]
 8002efa:	7dbb      	ldrb	r3, [r7, #22]
 8002efc:	4413      	add	r3, r2
 8002efe:	2b84      	cmp	r3, #132	; 0x84
 8002f00:	d905      	bls.n	8002f0e <u8x8_d_st7565_common+0x9e>
      {
	c = 132u;
 8002f02:	2384      	movs	r3, #132	; 0x84
 8002f04:	75fb      	strb	r3, [r7, #23]
	c -= x;
 8002f06:	7dfa      	ldrb	r2, [r7, #23]
 8002f08:	7dbb      	ldrb	r3, [r7, #22]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	75fb      	strb	r3, [r7, #23]
      }
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 8002f0e:	7dfb      	ldrb	r3, [r7, #23]
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	4619      	mov	r1, r3
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f7ff fee6 	bl	8002ce6 <u8x8_cad_SendData>
	arg_int--;
 8002f1a:	7abb      	ldrb	r3, [r7, #10]
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8002f20:	7abb      	ldrb	r3, [r7, #10]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f3      	bne.n	8002f0e <u8x8_d_st7565_common+0x9e>
      
      u8x8_cad_EndTransfer(u8x8);
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f7ff ff00 	bl	8002d2c <u8x8_cad_EndTransfer>
      break;
 8002f2c:	e020      	b.n	8002f70 <u8x8_d_st7565_common+0x100>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8002f2e:	7abb      	ldrb	r3, [r7, #10]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d104      	bne.n	8002f3e <u8x8_d_st7565_common+0xce>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 8002f34:	4911      	ldr	r1, [pc, #68]	; (8002f7c <u8x8_d_st7565_common+0x10c>)
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f7ff ff08 	bl	8002d4c <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
      break;
 8002f3c:	e018      	b.n	8002f70 <u8x8_d_st7565_common+0x100>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 8002f3e:	4910      	ldr	r1, [pc, #64]	; (8002f80 <u8x8_d_st7565_common+0x110>)
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f7ff ff03 	bl	8002d4c <u8x8_cad_SendSequence>
      break;
 8002f46:	e013      	b.n	8002f70 <u8x8_d_st7565_common+0x100>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f7ff fedf 	bl	8002d0c <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8002f4e:	2181      	movs	r1, #129	; 0x81
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f7ff fea4 	bl	8002c9e <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 8002f56:	7abb      	ldrb	r3, [r7, #10]
 8002f58:	089b      	lsrs	r3, r3, #2
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f7ff feaf 	bl	8002cc2 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f7ff fee1 	bl	8002d2c <u8x8_cad_EndTransfer>
      break;
 8002f6a:	e001      	b.n	8002f70 <u8x8_d_st7565_common+0x100>
#endif
    default:
      return 0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	e000      	b.n	8002f72 <u8x8_d_st7565_common+0x102>
  }
  return 1;
 8002f70:	2301      	movs	r3, #1
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	08012510 	.word	0x08012510
 8002f80:	08012518 	.word	0x08012518

08002f84 <u8x8_d_st7565_nhd_c12864>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_st7565_nhd_c12864(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	607b      	str	r3, [r7, #4]
 8002f8e:	460b      	mov	r3, r1
 8002f90:	72fb      	strb	r3, [r7, #11]
 8002f92:	4613      	mov	r3, r2
 8002f94:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 8002f96:	7aba      	ldrb	r2, [r7, #10]
 8002f98:	7af9      	ldrb	r1, [r7, #11]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f7ff ff67 	bl	8002e70 <u8x8_d_st7565_common>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d12e      	bne.n	8003006 <u8x8_d_st7565_nhd_c12864+0x82>
  {
    /* msg not handled, then try here */
    switch(msg)
 8002fa8:	7afb      	ldrb	r3, [r7, #11]
 8002faa:	2b0a      	cmp	r3, #10
 8002fac:	d008      	beq.n	8002fc0 <u8x8_d_st7565_nhd_c12864+0x3c>
 8002fae:	2b0d      	cmp	r3, #13
 8002fb0:	d00e      	beq.n	8002fd0 <u8x8_d_st7565_nhd_c12864+0x4c>
 8002fb2:	2b09      	cmp	r3, #9
 8002fb4:	d125      	bne.n	8003002 <u8x8_d_st7565_nhd_c12864+0x7e>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_nhd_c12864_display_info);
 8002fb6:	4917      	ldr	r1, [pc, #92]	; (8003014 <u8x8_d_st7565_nhd_c12864+0x90>)
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 f833 	bl	8003024 <u8x8_d_helper_display_setup_memory>
	break;
 8002fbe:	e023      	b.n	8003008 <u8x8_d_st7565_nhd_c12864+0x84>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 f842 	bl	800304a <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_nhd_c12864_init_seq);
 8002fc6:	4914      	ldr	r1, [pc, #80]	; (8003018 <u8x8_d_st7565_nhd_c12864+0x94>)
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f7ff febf 	bl	8002d4c <u8x8_cad_SendSequence>
	break;
 8002fce:	e01b      	b.n	8003008 <u8x8_d_st7565_nhd_c12864+0x84>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
 8002fd0:	7abb      	ldrb	r3, [r7, #10]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10a      	bne.n	8002fec <u8x8_d_st7565_nhd_c12864+0x68>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 8002fd6:	4911      	ldr	r1, [pc, #68]	; (800301c <u8x8_d_st7565_nhd_c12864+0x98>)
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f7ff feb7 	bl	8002d4c <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	7c9a      	ldrb	r2, [r3, #18]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
	}	
	break;
 8002fea:	e00d      	b.n	8003008 <u8x8_d_st7565_nhd_c12864+0x84>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 8002fec:	490c      	ldr	r1, [pc, #48]	; (8003020 <u8x8_d_st7565_nhd_c12864+0x9c>)
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f7ff feac 	bl	8002d4c <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	7cda      	ldrb	r2, [r3, #19]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	break;
 8003000:	e002      	b.n	8003008 <u8x8_d_st7565_nhd_c12864+0x84>
      default:
	return 0;		/* msg unknown */
 8003002:	2300      	movs	r3, #0
 8003004:	e001      	b.n	800300a <u8x8_d_st7565_nhd_c12864+0x86>
    }
  }
 8003006:	bf00      	nop
  return 1;
 8003008:	2301      	movs	r3, #1
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	08012530 	.word	0x08012530
 8003018:	08012548 	.word	0x08012548
 800301c:	08012520 	.word	0x08012520
 8003020:	08012528 	.word	0x08012528

08003024 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	7c9a      	ldrb	r2, [r3, #18]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	bc80      	pop	{r7}
 8003048:	4770      	bx	lr

0800304a <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800304a:	b590      	push	{r4, r7, lr}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695c      	ldr	r4, [r3, #20]
 8003056:	2300      	movs	r3, #0
 8003058:	2200      	movs	r2, #0
 800305a:	2128      	movs	r1, #40	; 0x28
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68dc      	ldr	r4, [r3, #12]
 8003064:	2300      	movs	r3, #0
 8003066:	2200      	movs	r2, #0
 8003068:	2114      	movs	r1, #20
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800306e:	2201      	movs	r2, #1
 8003070:	214b      	movs	r1, #75	; 0x4b
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f886 	bl	8003184 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	791b      	ldrb	r3, [r3, #4]
 800307e:	461a      	mov	r2, r3
 8003080:	2129      	movs	r1, #41	; 0x29
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f87e 	bl	8003184 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8003088:	2200      	movs	r2, #0
 800308a:	214b      	movs	r1, #75	; 0x4b
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f879 	bl	8003184 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	791b      	ldrb	r3, [r3, #4]
 8003098:	461a      	mov	r2, r3
 800309a:	2129      	movs	r1, #41	; 0x29
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f871 	bl	8003184 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80030a2:	2201      	movs	r2, #1
 80030a4:	214b      	movs	r1, #75	; 0x4b
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f86c 	bl	8003184 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	795b      	ldrb	r3, [r3, #5]
 80030b2:	461a      	mov	r2, r3
 80030b4:	2129      	movs	r1, #41	; 0x29
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f864 	bl	8003184 <u8x8_gpio_call>
}    
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd90      	pop	{r4, r7, pc}

080030c4 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80030c4:	b590      	push	{r4, r7, lr}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	4608      	mov	r0, r1
 80030ce:	4611      	mov	r1, r2
 80030d0:	461a      	mov	r2, r3
 80030d2:	4603      	mov	r3, r0
 80030d4:	70fb      	strb	r3, [r7, #3]
 80030d6:	460b      	mov	r3, r1
 80030d8:	70bb      	strb	r3, [r7, #2]
 80030da:	4613      	mov	r3, r2
 80030dc:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80030de:	78fb      	ldrb	r3, [r7, #3]
 80030e0:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80030e2:	78bb      	ldrb	r3, [r7, #2]
 80030e4:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80030e6:	787b      	ldrb	r3, [r7, #1]
 80030e8:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689c      	ldr	r4, [r3, #8]
 80030f2:	f107 0308 	add.w	r3, r7, #8
 80030f6:	2201      	movs	r2, #1
 80030f8:	210f      	movs	r1, #15
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	47a0      	blx	r4
 80030fe:	4603      	mov	r3, r0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	bd90      	pop	{r4, r7, pc}

08003108 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8003108:	b590      	push	{r4, r7, lr}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689c      	ldr	r4, [r3, #8]
 8003114:	2300      	movs	r3, #0
 8003116:	2200      	movs	r2, #0
 8003118:	2109      	movs	r1, #9
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	47a0      	blx	r4
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	bd90      	pop	{r4, r7, pc}

08003126 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8003126:	b590      	push	{r4, r7, lr}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689c      	ldr	r4, [r3, #8]
 8003132:	2300      	movs	r3, #0
 8003134:	2200      	movs	r2, #0
 8003136:	210a      	movs	r1, #10
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	47a0      	blx	r4
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	bd90      	pop	{r4, r7, pc}

08003144 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8003144:	b590      	push	{r4, r7, lr}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689c      	ldr	r4, [r3, #8]
 8003154:	78fa      	ldrb	r2, [r7, #3]
 8003156:	2300      	movs	r3, #0
 8003158:	210b      	movs	r1, #11
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	47a0      	blx	r4
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	bd90      	pop	{r4, r7, pc}

08003166 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8003166:	b590      	push	{r4, r7, lr}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689c      	ldr	r4, [r3, #8]
 8003172:	2300      	movs	r3, #0
 8003174:	2200      	movs	r2, #0
 8003176:	2110      	movs	r1, #16
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	47a0      	blx	r4
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	bd90      	pop	{r4, r7, pc}

08003184 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8003184:	b590      	push	{r4, r7, lr}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	70fb      	strb	r3, [r7, #3]
 8003190:	4613      	mov	r3, r2
 8003192:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	695c      	ldr	r4, [r3, #20]
 8003198:	78ba      	ldrb	r2, [r7, #2]
 800319a:	78f9      	ldrb	r1, [r7, #3]
 800319c:	2300      	movs	r3, #0
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	47a0      	blx	r4
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd90      	pop	{r4, r7, pc}

080031aa <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b085      	sub	sp, #20
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	60f8      	str	r0, [r7, #12]
 80031b2:	607b      	str	r3, [r7, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	72fb      	strb	r3, [r7, #11]
 80031b8:	4613      	mov	r3, r2
 80031ba:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr

080031c8 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a11      	ldr	r2, [pc, #68]	; (8003220 <u8x8_SetupDefaults+0x58>)
 80031da:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a10      	ldr	r2, [pc, #64]	; (8003220 <u8x8_SetupDefaults+0x58>)
 80031e0:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a0e      	ldr	r2, [pc, #56]	; (8003220 <u8x8_SetupDefaults+0x58>)
 80031e6:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a0d      	ldr	r2, [pc, #52]	; (8003220 <u8x8_SetupDefaults+0x58>)
 80031ec:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	22ff      	movs	r2, #255	; 0xff
 8003208:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	22ff      	movs	r2, #255	; 0xff
 8003210:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	080031ab 	.word	0x080031ab

08003224 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
 8003230:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f7ff ffc8 	bl	80031c8 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f7ff ff59 	bl	8003108 <u8x8_SetupMemory>
}
 8003256:	bf00      	nop
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <_ZN11ChronoTimerC1Eh>:
 *      Author: deo
 */

#include <ChronoTimer.h>

ChronoTimer::ChronoTimer(uint8_t Resolution)
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
 8003266:	460b      	mov	r3, r1
 8003268:	70fb      	strb	r3, [r7, #3]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	701a      	strb	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	609a      	str	r2, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	60da      	str	r2, [r3, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	741a      	strb	r2, [r3, #16]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	745a      	strb	r2, [r3, #17]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	749a      	strb	r2, [r3, #18]
{
	if(Resolution <= HOURS)
 8003294:	78fb      	ldrb	r3, [r7, #3]
 8003296:	2b03      	cmp	r3, #3
 8003298:	d802      	bhi.n	80032a0 <_ZN11ChronoTimerC1Eh+0x42>
		resolution = Resolution;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	78fa      	ldrb	r2, [r7, #3]
 800329e:	701a      	strb	r2, [r3, #0]
}
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4618      	mov	r0, r3
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr

080032ac <_ZN11ChronoTimer8setTimerEm>:

void ChronoTimer::setTimer(uint32_t SetDelay)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
	if(oldSettedDelay != SetDelay)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d031      	beq.n	8003324 <_ZN11ChronoTimer8setTimerEm+0x78>
	{
		switch(resolution)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d826      	bhi.n	8003316 <_ZN11ChronoTimer8setTimerEm+0x6a>
 80032c8:	a201      	add	r2, pc, #4	; (adr r2, 80032d0 <_ZN11ChronoTimer8setTimerEm+0x24>)
 80032ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ce:	bf00      	nop
 80032d0:	080032e1 	.word	0x080032e1
 80032d4:	080032e9 	.word	0x080032e9
 80032d8:	080032f9 	.word	0x080032f9
 80032dc:	08003309 	.word	0x08003309
		{
		case MILLIS:
			timeDelay = SetDelay;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	605a      	str	r2, [r3, #4]
			break;
 80032e6:	e017      	b.n	8003318 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case SECONDS:
			timeDelay = SetDelay * 1000;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032ee:	fb02 f203 	mul.w	r2, r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	605a      	str	r2, [r3, #4]
			break;
 80032f6:	e00f      	b.n	8003318 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case MINUTE:
			timeDelay = SetDelay * 1000 * 60;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	f64e 2260 	movw	r2, #60000	; 0xea60
 80032fe:	fb02 f203 	mul.w	r2, r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	605a      	str	r2, [r3, #4]
			break;
 8003306:	e007      	b.n	8003318 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case HOURS:
			timeDelay = SetDelay * 1000 * 3600;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	4a09      	ldr	r2, [pc, #36]	; (8003330 <_ZN11ChronoTimer8setTimerEm+0x84>)
 800330c:	fb02 f203 	mul.w	r2, r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	605a      	str	r2, [r3, #4]
			break;
 8003314:	e000      	b.n	8003318 <_ZN11ChronoTimer8setTimerEm+0x6c>
		default:
			break;
 8003316:	bf00      	nop
		}
		isSetted = true;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	741a      	strb	r2, [r3, #16]
		oldSettedDelay = SetDelay;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	609a      	str	r2, [r3, #8]
	}

}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	0036ee80 	.word	0x0036ee80

08003334 <_ZN11ChronoTimer10startTimerEv>:

void ChronoTimer::startTimer()
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
	if(isStopped && isSetted)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	7c9b      	ldrb	r3, [r3, #18]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00e      	beq.n	8003362 <_ZN11ChronoTimer10startTimerEv+0x2e>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	7c1b      	ldrb	r3, [r3, #16]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00a      	beq.n	8003362 <_ZN11ChronoTimer10startTimerEv+0x2e>
	{
		isStarted = true;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	745a      	strb	r2, [r3, #17]
		isStopped = false;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	749a      	strb	r2, [r3, #18]
		getTick = HAL_GetTick();
 8003358:	f006 fd16 	bl	8009d88 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	60da      	str	r2, [r3, #12]
	}
}
 8003362:	bf00      	nop
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <_ZN11ChronoTimer9stopTimerEv>:

void ChronoTimer::stopTimer()
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
	if(isStarted)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	7c5b      	ldrb	r3, [r3, #17]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d008      	beq.n	800338c <_ZN11ChronoTimer9stopTimerEv+0x22>
	{
		isStarted = false;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	745a      	strb	r2, [r3, #17]
		isStopped = true;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	749a      	strb	r2, [r3, #18]
		getTick = 0;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	60da      	str	r2, [r3, #12]
	}
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr

08003396 <_ZN11ChronoTimer7restartEv>:

void ChronoTimer::restart()
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
	stopTimer();
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7ff ffe3 	bl	800336a <_ZN11ChronoTimer9stopTimerEv>
	startTimer();
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7ff ffc5 	bl	8003334 <_ZN11ChronoTimer10startTimerEv>
}
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <_ZN11ChronoTimer10isFinishedEbm>:

bool ChronoTimer::isFinished(bool Restart, uint32_t DelayReset)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b086      	sub	sp, #24
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	60f8      	str	r0, [r7, #12]
 80033ba:	460b      	mov	r3, r1
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	72fb      	strb	r3, [r7, #11]
	bool Finish = false;
 80033c0:	2300      	movs	r3, #0
 80033c2:	75fb      	strb	r3, [r7, #23]
	if(DelayReset > 0)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <_ZN11ChronoTimer10isFinishedEbm+0x20>
	{
		setTimer(DelayReset);
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f7ff ff6d 	bl	80032ac <_ZN11ChronoTimer8setTimerEm>
	}
	startTimer();
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f7ff ffae 	bl	8003334 <_ZN11ChronoTimer10startTimerEv>
	if(HAL_GetTick() - getTick >= timeDelay)
 80033d8:	f006 fcd6 	bl	8009d88 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	1ad2      	subs	r2, r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	bf2c      	ite	cs
 80033ec:	2301      	movcs	r3, #1
 80033ee:	2300      	movcc	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <_ZN11ChronoTimer10isFinishedEbm+0x48>
	{
		Finish = true;
 80033f6:	2301      	movs	r3, #1
 80033f8:	75fb      	strb	r3, [r7, #23]
	}
	if(Restart && Finish)
 80033fa:	7afb      	ldrb	r3, [r7, #11]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d005      	beq.n	800340c <_ZN11ChronoTimer10isFinishedEbm+0x5a>
 8003400:	7dfb      	ldrb	r3, [r7, #23]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <_ZN11ChronoTimer10isFinishedEbm+0x5a>
	{
		restart();
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f7ff ffc5 	bl	8003396 <_ZN11ChronoTimer7restartEv>
	}
	return Finish;
 800340c:	7dfb      	ldrb	r3, [r7, #23]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af02      	add	r7, sp, #8
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	4b04      	ldr	r3, [pc, #16]	; (800343c <_ZNSt7__cxx119to_stringEi+0x24>)
 800342a:	2210      	movs	r2, #16
 800342c:	4904      	ldr	r1, [pc, #16]	; (8003440 <_ZNSt7__cxx119to_stringEi+0x28>)
 800342e:	f000 fd45 	bl	8003ebc <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	0800f3d0 	.word	0x0800f3d0
 8003440:	0800ed89 	.word	0x0800ed89

08003444 <_ZL7bcd2binh>:
   values as BCD.
    @param val BCD value
    @return Binary value
*/
/**************************************************************************/
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	4603      	mov	r3, r0
 800344c:	71fb      	strb	r3, [r7, #7]
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	111b      	asrs	r3, r3, #4
 8003452:	b2db      	uxtb	r3, r3
 8003454:	461a      	mov	r2, r3
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	b2da      	uxtb	r2, r3
 800345e:	79fb      	ldrb	r3, [r7, #7]
 8003460:	4413      	add	r3, r2
 8003462:	b2db      	uxtb	r3, r3
 8003464:	4618      	mov	r0, r3
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	bc80      	pop	{r7}
 800346c:	4770      	bx	lr
	...

08003470 <_ZL7bin2bcdh>:
    @brief  Convert a binary value to BCD format for the RTC registers
    @param val Binary value
    @return BCD value
*/
/**************************************************************************/
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	71fb      	strb	r3, [r7, #7]
 800347a:	79fb      	ldrb	r3, [r7, #7]
 800347c:	4a08      	ldr	r2, [pc, #32]	; (80034a0 <_ZL7bin2bcdh+0x30>)
 800347e:	fba2 2303 	umull	r2, r3, r2, r3
 8003482:	08db      	lsrs	r3, r3, #3
 8003484:	b2db      	uxtb	r3, r3
 8003486:	461a      	mov	r2, r3
 8003488:	0052      	lsls	r2, r2, #1
 800348a:	4413      	add	r3, r2
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	b2da      	uxtb	r2, r3
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	4413      	add	r3, r2
 8003494:	b2db      	uxtb	r3, r3
 8003496:	4618      	mov	r0, r3
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr
 80034a0:	cccccccd 	.word	0xcccccccd

080034a4 <_ZN10DS1307_RTC18devAddressLShiftedEv>:
  return t; // @suppress("Return with parenthesis")
}


uint16_t DS1307_RTC::devAddressLShifted()
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
	return ds1307Address << 1;
 80034ac:	23d0      	movs	r3, #208	; 0xd0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr

080034b8 <_ZN10DS1307_RTC12clearI2CBuffEv>:

void DS1307_RTC::clearI2CBuff()
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
	memset(i2cBuffer, 0x00, BUFFER_LEN);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2220      	movs	r2, #32
 80034c4:	2100      	movs	r1, #0
 80034c6:	4618      	mov	r0, r3
 80034c8:	f00b fb2f 	bl	800eb2a <memset>
	i2cBufferIndex = 0;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2020 	strb.w	r2, [r3, #32]
}
 80034d4:	bf00      	nop
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <_ZN10DS1307_RTCC1Ev>:

DS1307_RTC::DS1307_RTC()
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2020 	strb.w	r2, [r3, #32]
{

}
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4618      	mov	r0, r3
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr

080034f8 <_ZN10DS1307_RTC5setupEv>:

void DS1307_RTC::setup()
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af02      	add	r7, sp, #8
 80034fe:	6078      	str	r0, [r7, #4]
	clearI2CBuff();
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff ffd9 	bl	80034b8 <_ZN10DS1307_RTC12clearI2CBuffEv>
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), i2cBuffer, 0, 1);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7ff ffcc 	bl	80034a4 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 800350c:	4603      	mov	r3, r0
 800350e:	4619      	mov	r1, r3
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	2301      	movs	r3, #1
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	2300      	movs	r3, #0
 8003518:	4803      	ldr	r0, [pc, #12]	; (8003528 <_ZN10DS1307_RTC5setupEv+0x30>)
 800351a:	f007 fe05 	bl	800b128 <HAL_I2C_Master_Transmit>
}
 800351e:	bf00      	nop
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	2000056c 	.word	0x2000056c

0800352c <_ZN10DS1307_RTC9isRunningEv>:



bool DS1307_RTC::isRunning()
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af02      	add	r7, sp, #8
 8003532:	6078      	str	r0, [r7, #4]
	bool Live = false;
 8003534:	2300      	movs	r3, #0
 8003536:	75fb      	strb	r3, [r7, #23]
	uint8_t RxData = 0;
 8003538:	2300      	movs	r3, #0
 800353a:	75bb      	strb	r3, [r7, #22]
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), 0, 1, 1);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7ff ffb1 	bl	80034a4 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 8003542:	4603      	mov	r3, r0
 8003544:	4619      	mov	r1, r3
 8003546:	2301      	movs	r3, #1
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	2301      	movs	r3, #1
 800354c:	2200      	movs	r2, #0
 800354e:	4823      	ldr	r0, [pc, #140]	; (80035dc <_ZN10DS1307_RTC9isRunningEv+0xb0>)
 8003550:	f007 fdea 	bl	800b128 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, devAddressLShifted(), i2cBuffer, 1, 1);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff ffa5 	bl	80034a4 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 800355a:	4603      	mov	r3, r0
 800355c:	4619      	mov	r1, r3
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	2301      	movs	r3, #1
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	2301      	movs	r3, #1
 8003566:	481d      	ldr	r0, [pc, #116]	; (80035dc <_ZN10DS1307_RTC9isRunningEv+0xb0>)
 8003568:	f007 fedc 	bl	800b324 <HAL_I2C_Master_Receive>
	RxData = i2cBuffer[0];
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	75bb      	strb	r3, [r7, #22]
	clearI2CBuff();
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7ff ffa0 	bl	80034b8 <_ZN10DS1307_RTC12clearI2CBuffEv>
	if(RxData >> 7 == 0x00)
 8003578:	7dbb      	ldrb	r3, [r7, #22]
 800357a:	11db      	asrs	r3, r3, #7
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <_ZN10DS1307_RTC9isRunningEv+0x58>
	{
		Live = true;
 8003580:	2301      	movs	r3, #1
 8003582:	75fb      	strb	r3, [r7, #23]
	}
	if(Live)
 8003584:	7dfb      	ldrb	r3, [r7, #23]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d022      	beq.n	80035d0 <_ZN10DS1307_RTC9isRunningEv+0xa4>
	{
		TIME_DATE_T ReadTime;
		getTimeDate(ReadTime);
 800358a:	f107 030c 	add.w	r3, r7, #12
 800358e:	4619      	mov	r1, r3
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f8cf 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
		if(ReadTime.year == 0  && ReadTime.month == 0  && ReadTime.day == 0)
 8003596:	8a7b      	ldrh	r3, [r7, #18]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d119      	bne.n	80035d0 <_ZN10DS1307_RTC9isRunningEv+0xa4>
 800359c:	7c3b      	ldrb	r3, [r7, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d116      	bne.n	80035d0 <_ZN10DS1307_RTC9isRunningEv+0xa4>
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d113      	bne.n	80035d0 <_ZN10DS1307_RTC9isRunningEv+0xa4>
		{
			ReadTime.hour = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	73bb      	strb	r3, [r7, #14]
			ReadTime.minute = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	737b      	strb	r3, [r7, #13]
			ReadTime.second = 0;
 80035b0:	2300      	movs	r3, #0
 80035b2:	733b      	strb	r3, [r7, #12]
			ReadTime.day = 1;
 80035b4:	2301      	movs	r3, #1
 80035b6:	73fb      	strb	r3, [r7, #15]
			ReadTime.month = 1;
 80035b8:	2301      	movs	r3, #1
 80035ba:	743b      	strb	r3, [r7, #16]
			ReadTime.year = 2020;
 80035bc:	f240 73e4 	movw	r3, #2020	; 0x7e4
 80035c0:	827b      	strh	r3, [r7, #18]
			adjustTimeDate(ReadTime);
 80035c2:	f107 030c 	add.w	r3, r7, #12
 80035c6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f808 	bl	80035e0 <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>
		}
	}
	return Live;
 80035d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	2000056c 	.word	0x2000056c

080035e0 <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>:



void DS1307_RTC::adjustTimeDate(TIME_DATE_T AdjustVar)
{
 80035e0:	b590      	push	{r4, r7, lr}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af02      	add	r7, sp, #8
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	1d3b      	adds	r3, r7, #4
 80035ea:	e883 0006 	stmia.w	r3, {r1, r2}
	clearI2CBuff();
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f7ff ff62 	bl	80034b8 <_ZN10DS1307_RTC12clearI2CBuffEv>
	i2cBuffer[i2cBufferIndex++] = 0;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	b2d1      	uxtb	r1, r2
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	f882 1020 	strb.w	r1, [r2, #32]
 8003604:	461a      	mov	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2100      	movs	r1, #0
 800360a:	5499      	strb	r1, [r3, r2]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.second);
 800360c:	7939      	ldrb	r1, [r7, #4]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	b2d0      	uxtb	r0, r2
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	f882 0020 	strb.w	r0, [r2, #32]
 800361e:	461c      	mov	r4, r3
 8003620:	4608      	mov	r0, r1
 8003622:	f7ff ff25 	bl	8003470 <_ZL7bin2bcdh>
 8003626:	4603      	mov	r3, r0
 8003628:	461a      	mov	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.minute);
 800362e:	7979      	ldrb	r1, [r7, #5]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	b2d0      	uxtb	r0, r2
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	f882 0020 	strb.w	r0, [r2, #32]
 8003640:	461c      	mov	r4, r3
 8003642:	4608      	mov	r0, r1
 8003644:	f7ff ff14 	bl	8003470 <_ZL7bin2bcdh>
 8003648:	4603      	mov	r3, r0
 800364a:	461a      	mov	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.hour);
 8003650:	79b9      	ldrb	r1, [r7, #6]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003658:	1c5a      	adds	r2, r3, #1
 800365a:	b2d0      	uxtb	r0, r2
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	f882 0020 	strb.w	r0, [r2, #32]
 8003662:	461c      	mov	r4, r3
 8003664:	4608      	mov	r0, r1
 8003666:	f7ff ff03 	bl	8003470 <_ZL7bin2bcdh>
 800366a:	4603      	mov	r3, r0
 800366c:	461a      	mov	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(0);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	b2d1      	uxtb	r1, r2
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	f882 1020 	strb.w	r1, [r2, #32]
 8003682:	461c      	mov	r4, r3
 8003684:	2000      	movs	r0, #0
 8003686:	f7ff fef3 	bl	8003470 <_ZL7bin2bcdh>
 800368a:	4603      	mov	r3, r0
 800368c:	461a      	mov	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.day);
 8003692:	79f9      	ldrb	r1, [r7, #7]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f893 3020 	ldrb.w	r3, [r3, #32]
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	b2d0      	uxtb	r0, r2
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	f882 0020 	strb.w	r0, [r2, #32]
 80036a4:	461c      	mov	r4, r3
 80036a6:	4608      	mov	r0, r1
 80036a8:	f7ff fee2 	bl	8003470 <_ZL7bin2bcdh>
 80036ac:	4603      	mov	r3, r0
 80036ae:	461a      	mov	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.month);
 80036b4:	7a39      	ldrb	r1, [r7, #8]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	b2d0      	uxtb	r0, r2
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	f882 0020 	strb.w	r0, [r2, #32]
 80036c6:	461c      	mov	r4, r3
 80036c8:	4608      	mov	r0, r1
 80036ca:	f7ff fed1 	bl	8003470 <_ZL7bin2bcdh>
 80036ce:	4603      	mov	r3, r0
 80036d0:	461a      	mov	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.year - 2000);
 80036d6:	897b      	ldrh	r3, [r7, #10]
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	3330      	adds	r3, #48	; 0x30
 80036dc:	b2d9      	uxtb	r1, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	b2d0      	uxtb	r0, r2
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	f882 0020 	strb.w	r0, [r2, #32]
 80036ee:	461c      	mov	r4, r3
 80036f0:	4608      	mov	r0, r1
 80036f2:	f7ff febd 	bl	8003470 <_ZL7bin2bcdh>
 80036f6:	4603      	mov	r3, r0
 80036f8:	461a      	mov	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	551a      	strb	r2, [r3, r4]
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), i2cBuffer, i2cBufferIndex, 1);
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f7ff fed0 	bl	80034a4 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 8003704:	4603      	mov	r3, r0
 8003706:	4618      	mov	r0, r3
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003710:	b299      	uxth	r1, r3
 8003712:	2301      	movs	r3, #1
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	460b      	mov	r3, r1
 8003718:	4601      	mov	r1, r0
 800371a:	4805      	ldr	r0, [pc, #20]	; (8003730 <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE+0x150>)
 800371c:	f007 fd04 	bl	800b128 <HAL_I2C_Master_Transmit>
	clearI2CBuff();
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f7ff fec9 	bl	80034b8 <_ZN10DS1307_RTC12clearI2CBuffEv>
}
 8003726:	bf00      	nop
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	bd90      	pop	{r4, r7, pc}
 800372e:	bf00      	nop
 8003730:	2000056c 	.word	0x2000056c

08003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>:

void DS1307_RTC::getTimeDate(TIME_DATE_T &RetTimeDate)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af02      	add	r7, sp, #8
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
	clearI2CBuff();
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff feba 	bl	80034b8 <_ZN10DS1307_RTC12clearI2CBuffEv>
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), 0, 1, 1);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7ff fead 	bl	80034a4 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 800374a:	4603      	mov	r3, r0
 800374c:	4619      	mov	r1, r3
 800374e:	2301      	movs	r3, #1
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	2301      	movs	r3, #1
 8003754:	2200      	movs	r2, #0
 8003756:	4848      	ldr	r0, [pc, #288]	; (8003878 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE+0x144>)
 8003758:	f007 fce6 	bl	800b128 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, devAddressLShifted(), i2cBuffer, 7, 1);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff fea1 	bl	80034a4 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 8003762:	4603      	mov	r3, r0
 8003764:	4619      	mov	r1, r3
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	2301      	movs	r3, #1
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	2307      	movs	r3, #7
 800376e:	4842      	ldr	r0, [pc, #264]	; (8003878 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE+0x144>)
 8003770:	f007 fdd8 	bl	800b324 <HAL_I2C_Master_Receive>
	RetTimeDate.second = bcd2bin(i2cBuffer[i2cBufferIndex++] & 0x7F);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 3020 	ldrb.w	r3, [r3, #32]
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	b2d1      	uxtb	r1, r2
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	f882 1020 	strb.w	r1, [r2, #32]
 8003784:	461a      	mov	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	5c9b      	ldrb	r3, [r3, r2]
 800378a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800378e:	b2db      	uxtb	r3, r3
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff fe57 	bl	8003444 <_ZL7bcd2binh>
 8003796:	4603      	mov	r3, r0
 8003798:	461a      	mov	r2, r3
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	701a      	strb	r2, [r3, #0]
	RetTimeDate.minute = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	b2d1      	uxtb	r1, r2
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	f882 1020 	strb.w	r1, [r2, #32]
 80037ae:	461a      	mov	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	5c9b      	ldrb	r3, [r3, r2]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff fe45 	bl	8003444 <_ZL7bcd2binh>
 80037ba:	4603      	mov	r3, r0
 80037bc:	461a      	mov	r2, r3
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	705a      	strb	r2, [r3, #1]
	RetTimeDate.hour = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	b2d1      	uxtb	r1, r2
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	f882 1020 	strb.w	r1, [r2, #32]
 80037d2:	461a      	mov	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	5c9b      	ldrb	r3, [r3, r2]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff fe33 	bl	8003444 <_ZL7bcd2binh>
 80037de:	4603      	mov	r3, r0
 80037e0:	461a      	mov	r2, r3
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	709a      	strb	r2, [r3, #2]
	i2cBufferIndex++;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037ec:	3301      	adds	r3, #1
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f883 2020 	strb.w	r2, [r3, #32]
	RetTimeDate.day = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037fc:	1c5a      	adds	r2, r3, #1
 80037fe:	b2d1      	uxtb	r1, r2
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	f882 1020 	strb.w	r1, [r2, #32]
 8003806:	461a      	mov	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	5c9b      	ldrb	r3, [r3, r2]
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff fe19 	bl	8003444 <_ZL7bcd2binh>
 8003812:	4603      	mov	r3, r0
 8003814:	461a      	mov	r2, r3
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	70da      	strb	r2, [r3, #3]
	RetTimeDate.month = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	b2d1      	uxtb	r1, r2
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	f882 1020 	strb.w	r1, [r2, #32]
 800382a:	461a      	mov	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	5c9b      	ldrb	r3, [r3, r2]
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff fe07 	bl	8003444 <_ZL7bcd2binh>
 8003836:	4603      	mov	r3, r0
 8003838:	461a      	mov	r2, r3
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	711a      	strb	r2, [r3, #4]
	RetTimeDate.year = bcd2bin(i2cBuffer[i2cBufferIndex++]) + 2000;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003844:	1c5a      	adds	r2, r3, #1
 8003846:	b2d1      	uxtb	r1, r2
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	f882 1020 	strb.w	r1, [r2, #32]
 800384e:	461a      	mov	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	5c9b      	ldrb	r3, [r3, r2]
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff fdf5 	bl	8003444 <_ZL7bcd2binh>
 800385a:	4603      	mov	r3, r0
 800385c:	b29b      	uxth	r3, r3
 800385e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003862:	b29a      	uxth	r2, r3
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	80da      	strh	r2, [r3, #6]
	clearI2CBuff();
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff fe25 	bl	80034b8 <_ZN10DS1307_RTC12clearI2CBuffEv>
}
 800386e:	bf00      	nop
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	2000056c 	.word	0x2000056c

0800387c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh>:

String DS1307_RTC::getTimeDateStr(uint8_t FormatType)
{
 800387c:	b590      	push	{r4, r7, lr}
 800387e:	f5ad 7d73 	sub.w	sp, sp, #972	; 0x3cc
 8003882:	af00      	add	r7, sp, #0
 8003884:	f107 030c 	add.w	r3, r7, #12
 8003888:	6018      	str	r0, [r3, #0]
 800388a:	f107 0308 	add.w	r3, r7, #8
 800388e:	6019      	str	r1, [r3, #0]
 8003890:	1dfb      	adds	r3, r7, #7
 8003892:	701a      	strb	r2, [r3, #0]
	String second, minute, hour, day, month, year, RetStr = "Wrong type";
 8003894:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003898:	4618      	mov	r0, r3
 800389a:	f00a fe6b 	bl	800e574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800389e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80038a2:	4618      	mov	r0, r3
 80038a4:	f00a fe66 	bl	800e574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80038a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80038ac:	4618      	mov	r0, r3
 80038ae:	f00a fe61 	bl	800e574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80038b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80038b6:	4618      	mov	r0, r3
 80038b8:	f00a fe5c 	bl	800e574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80038bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80038c0:	4618      	mov	r0, r3
 80038c2:	f00a fe57 	bl	800e574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80038c6:	f107 031c 	add.w	r3, r7, #28
 80038ca:	4618      	mov	r0, r3
 80038cc:	f00a fe52 	bl	800e574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80038d0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038d4:	4618      	mov	r0, r3
 80038d6:	f00a fd43 	bl	800e360 <_ZNSaIcEC1Ev>
 80038da:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80038de:	f107 030c 	add.w	r3, r7, #12
 80038e2:	49df      	ldr	r1, [pc, #892]	; (8003c60 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e4>)
 80038e4:	6818      	ldr	r0, [r3, #0]
 80038e6:	f00a ffd3 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80038ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038ee:	4618      	mov	r0, r3
 80038f0:	f00a fd37 	bl	800e362 <_ZNSaIcED1Ev>
	TIME_DATE_T TimeDate;
	getTimeDate(TimeDate);
 80038f4:	f107 0214 	add.w	r2, r7, #20
 80038f8:	f107 0308 	add.w	r3, r7, #8
 80038fc:	4611      	mov	r1, r2
 80038fe:	6818      	ldr	r0, [r3, #0]
 8003900:	f7ff ff18 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
	second = TimeDate.second > 9 ? std::to_string(TimeDate.second) : "0" + std::to_string(TimeDate.second);
 8003904:	f107 0314 	add.w	r3, r7, #20
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	2400      	movs	r4, #0
 800390c:	2b09      	cmp	r3, #9
 800390e:	d90a      	bls.n	8003926 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0xaa>
 8003910:	f107 0314 	add.w	r3, r7, #20
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	461a      	mov	r2, r3
 8003918:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800391c:	4611      	mov	r1, r2
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff fd7a 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003924:	e012      	b.n	800394c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0xd0>
 8003926:	f107 0314 	add.w	r3, r7, #20
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	461a      	mov	r2, r3
 800392e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003932:	4611      	mov	r1, r2
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff fd6f 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 800393a:	2401      	movs	r4, #1
 800393c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003940:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8003944:	49c7      	ldr	r1, [pc, #796]	; (8003c64 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003946:	4618      	mov	r0, r3
 8003948:	f000 faf0 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800394c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003950:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003954:	4611      	mov	r1, r2
 8003956:	4618      	mov	r0, r3
 8003958:	f00a fe39 	bl	800e5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800395c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003960:	4618      	mov	r0, r3
 8003962:	f00a fe28 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003966:	2c00      	cmp	r4, #0
 8003968:	d004      	beq.n	8003974 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0xf8>
 800396a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800396e:	4618      	mov	r0, r3
 8003970:	f00a fe21 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	minute = TimeDate.minute > 9 ? std::to_string(TimeDate.minute) : "0" + std::to_string(TimeDate.minute);
 8003974:	f107 0314 	add.w	r3, r7, #20
 8003978:	785b      	ldrb	r3, [r3, #1]
 800397a:	2400      	movs	r4, #0
 800397c:	2b09      	cmp	r3, #9
 800397e:	d90a      	bls.n	8003996 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x11a>
 8003980:	f107 0314 	add.w	r3, r7, #20
 8003984:	785b      	ldrb	r3, [r3, #1]
 8003986:	461a      	mov	r2, r3
 8003988:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800398c:	4611      	mov	r1, r2
 800398e:	4618      	mov	r0, r3
 8003990:	f7ff fd42 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003994:	e012      	b.n	80039bc <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x140>
 8003996:	f107 0314 	add.w	r3, r7, #20
 800399a:	785b      	ldrb	r3, [r3, #1]
 800399c:	461a      	mov	r2, r3
 800399e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80039a2:	4611      	mov	r1, r2
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff fd37 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 80039aa:	2401      	movs	r4, #1
 80039ac:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80039b0:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80039b4:	49ab      	ldr	r1, [pc, #684]	; (8003c64 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 fab8 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 80039bc:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80039c0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80039c4:	4611      	mov	r1, r2
 80039c6:	4618      	mov	r0, r3
 80039c8:	f00a fe01 	bl	800e5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80039cc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80039d0:	4618      	mov	r0, r3
 80039d2:	f00a fdf0 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80039d6:	2c00      	cmp	r4, #0
 80039d8:	d004      	beq.n	80039e4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x168>
 80039da:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80039de:	4618      	mov	r0, r3
 80039e0:	f00a fde9 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	hour = TimeDate.hour > 9 ? std::to_string(TimeDate.hour) : "0" + std::to_string(TimeDate.hour);
 80039e4:	f107 0314 	add.w	r3, r7, #20
 80039e8:	789b      	ldrb	r3, [r3, #2]
 80039ea:	2400      	movs	r4, #0
 80039ec:	2b09      	cmp	r3, #9
 80039ee:	d90a      	bls.n	8003a06 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x18a>
 80039f0:	f107 0314 	add.w	r3, r7, #20
 80039f4:	789b      	ldrb	r3, [r3, #2]
 80039f6:	461a      	mov	r2, r3
 80039f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80039fc:	4611      	mov	r1, r2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff fd0a 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003a04:	e012      	b.n	8003a2c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x1b0>
 8003a06:	f107 0314 	add.w	r3, r7, #20
 8003a0a:	789b      	ldrb	r3, [r3, #2]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003a12:	4611      	mov	r1, r2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff fcff 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003a1a:	2401      	movs	r4, #1
 8003a1c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003a20:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8003a24:	498f      	ldr	r1, [pc, #572]	; (8003c64 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 fa80 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003a2c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003a30:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003a34:	4611      	mov	r1, r2
 8003a36:	4618      	mov	r0, r3
 8003a38:	f00a fdc9 	bl	800e5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003a3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003a40:	4618      	mov	r0, r3
 8003a42:	f00a fdb8 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003a46:	2c00      	cmp	r4, #0
 8003a48:	d004      	beq.n	8003a54 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x1d8>
 8003a4a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f00a fdb1 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	day = TimeDate.day > 9 ? std::to_string(TimeDate.day) : "0" + std::to_string(TimeDate.day);
 8003a54:	f107 0314 	add.w	r3, r7, #20
 8003a58:	78db      	ldrb	r3, [r3, #3]
 8003a5a:	2400      	movs	r4, #0
 8003a5c:	2b09      	cmp	r3, #9
 8003a5e:	d90a      	bls.n	8003a76 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x1fa>
 8003a60:	f107 0314 	add.w	r3, r7, #20
 8003a64:	78db      	ldrb	r3, [r3, #3]
 8003a66:	461a      	mov	r2, r3
 8003a68:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003a6c:	4611      	mov	r1, r2
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff fcd2 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003a74:	e012      	b.n	8003a9c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x220>
 8003a76:	f107 0314 	add.w	r3, r7, #20
 8003a7a:	78db      	ldrb	r3, [r3, #3]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003a82:	4611      	mov	r1, r2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff fcc7 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003a8a:	2401      	movs	r4, #1
 8003a8c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003a90:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003a94:	4973      	ldr	r1, [pc, #460]	; (8003c64 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fa48 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003a9c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8003aa0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003aa4:	4611      	mov	r1, r2
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f00a fd91 	bl	800e5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003aac:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f00a fd80 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003ab6:	2c00      	cmp	r4, #0
 8003ab8:	d004      	beq.n	8003ac4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x248>
 8003aba:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f00a fd79 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	month = TimeDate.month > 9 ? std::to_string(TimeDate.month) : "0" + std::to_string(TimeDate.month);
 8003ac4:	f107 0314 	add.w	r3, r7, #20
 8003ac8:	791b      	ldrb	r3, [r3, #4]
 8003aca:	2400      	movs	r4, #0
 8003acc:	2b09      	cmp	r3, #9
 8003ace:	d90a      	bls.n	8003ae6 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x26a>
 8003ad0:	f107 0314 	add.w	r3, r7, #20
 8003ad4:	791b      	ldrb	r3, [r3, #4]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003adc:	4611      	mov	r1, r2
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff fc9a 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003ae4:	e012      	b.n	8003b0c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x290>
 8003ae6:	f107 0314 	add.w	r3, r7, #20
 8003aea:	791b      	ldrb	r3, [r3, #4]
 8003aec:	461a      	mov	r2, r3
 8003aee:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003af2:	4611      	mov	r1, r2
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff fc8f 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003afa:	2401      	movs	r4, #1
 8003afc:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003b00:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8003b04:	4957      	ldr	r1, [pc, #348]	; (8003c64 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fa10 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003b0c:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8003b10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b14:	4611      	mov	r1, r2
 8003b16:	4618      	mov	r0, r3
 8003b18:	f00a fd59 	bl	800e5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003b1c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003b20:	4618      	mov	r0, r3
 8003b22:	f00a fd48 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003b26:	2c00      	cmp	r4, #0
 8003b28:	d004      	beq.n	8003b34 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x2b8>
 8003b2a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f00a fd41 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	year = std::to_string(TimeDate.year % 100);
 8003b34:	f107 0314 	add.w	r3, r7, #20
 8003b38:	88db      	ldrh	r3, [r3, #6]
 8003b3a:	4a4b      	ldr	r2, [pc, #300]	; (8003c68 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3ec>)
 8003b3c:	fba2 1203 	umull	r1, r2, r2, r3
 8003b40:	0952      	lsrs	r2, r2, #5
 8003b42:	2164      	movs	r1, #100	; 0x64
 8003b44:	fb01 f202 	mul.w	r2, r1, r2
 8003b48:	1a9b      	subs	r3, r3, r2
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003b52:	4611      	mov	r1, r2
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff fc5f 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003b5a:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8003b5e:	f107 031c 	add.w	r3, r7, #28
 8003b62:	4611      	mov	r1, r2
 8003b64:	4618      	mov	r0, r3
 8003b66:	f00a fd32 	bl	800e5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003b6a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f00a fd21 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	switch(FormatType)
 8003b74:	1dfb      	adds	r3, r7, #7
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	f200 816c 	bhi.w	8003e56 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5da>
 8003b7e:	a201      	add	r2, pc, #4	; (adr r2, 8003b84 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x308>)
 8003b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b84:	08003b99 	.word	0x08003b99
 8003b88:	08003c17 	.word	0x08003c17
 8003b8c:	08003c71 	.word	0x08003c71
 8003b90:	08003cef 	.word	0x08003cef
 8003b94:	08003d37 	.word	0x08003d37
	{
	case ONLY_TIME:
		RetStr = hour + ":" + minute + ":" + second;
 8003b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b9c:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8003ba0:	4a32      	ldr	r2, [pc, #200]	; (8003c6c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3f0>)
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 f9da 	bl	8003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003ba8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003bac:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003bb0:	f507 7100 	add.w	r1, r7, #512	; 0x200
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 f9e4 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003bba:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003bbe:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8003bc2:	4a2a      	ldr	r2, [pc, #168]	; (8003c6c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3f0>)
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f000 f9f3 	bl	8003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003bca:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003bce:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8003bd2:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 f9d3 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003bdc:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 8003be0:	f107 030c 	add.w	r3, r7, #12
 8003be4:	4611      	mov	r1, r2
 8003be6:	6818      	ldr	r0, [r3, #0]
 8003be8:	f00a fcf1 	bl	800e5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003bec:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f00a fce0 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003bf6:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f00a fcdb 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003c00:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003c04:	4618      	mov	r0, r3
 8003c06:	f00a fcd6 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f00a fcd1 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003c14:	e120      	b.n	8003e58 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	case ONLY_TIME_NO_SEC:
		RetStr = hour + ":" + minute;
 8003c16:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003c1a:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8003c1e:	4a13      	ldr	r2, [pc, #76]	; (8003c6c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3f0>)
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 f99b 	bl	8003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003c26:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003c2a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003c2e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 f9a5 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003c38:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8003c3c:	f107 030c 	add.w	r3, r7, #12
 8003c40:	4611      	mov	r1, r2
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	f00a fcc3 	bl	800e5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003c48:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f00a fcb2 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003c52:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003c56:	4618      	mov	r0, r3
 8003c58:	f00a fcad 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003c5c:	e0fc      	b.n	8003e58 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
 8003c5e:	bf00      	nop
 8003c60:	0800f444 	.word	0x0800f444
 8003c64:	0800f450 	.word	0x0800f450
 8003c68:	51eb851f 	.word	0x51eb851f
 8003c6c:	0800f454 	.word	0x0800f454
	case ONLY_DATE:
		RetStr = day + "/" + month + "/" + year;
 8003c70:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8003c74:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003c78:	4a8d      	ldr	r2, [pc, #564]	; (8003eb0 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 f96e 	bl	8003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003c80:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8003c84:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003c88:	f507 7124 	add.w	r1, r7, #656	; 0x290
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 f978 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003c92:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c96:	f507 711e 	add.w	r1, r7, #632	; 0x278
 8003c9a:	4a85      	ldr	r2, [pc, #532]	; (8003eb0 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 f987 	bl	8003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003ca2:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003ca6:	f107 021c 	add.w	r2, r7, #28
 8003caa:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 f967 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003cb4:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8003cb8:	f107 030c 	add.w	r3, r7, #12
 8003cbc:	4611      	mov	r1, r2
 8003cbe:	6818      	ldr	r0, [r3, #0]
 8003cc0:	f00a fc85 	bl	800e5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003cc4:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f00a fc74 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003cce:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f00a fc6f 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003cd8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f00a fc6a 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003ce2:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f00a fc65 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003cec:	e0b4      	b.n	8003e58 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	case ONLY_DATE_NO_YEAR:
		RetStr = day + "/" + month;
 8003cee:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8003cf2:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003cf6:	4a6e      	ldr	r2, [pc, #440]	; (8003eb0 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 f92f 	bl	8003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003cfe:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8003d02:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003d06:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 f939 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003d10:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8003d14:	f107 030c 	add.w	r3, r7, #12
 8003d18:	4611      	mov	r1, r2
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	f00a fc57 	bl	800e5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003d20:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8003d24:	4618      	mov	r0, r3
 8003d26:	f00a fc46 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003d2a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f00a fc41 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003d34:	e090      	b.n	8003e58 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	case TIME_DATE:
		RetStr = hour + ":" + minute + ":" + second + " " + day + "/" + month + "/" + year;
 8003d36:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8003d3a:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8003d3e:	4a5d      	ldr	r2, [pc, #372]	; (8003eb4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x638>)
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 f90b 	bl	8003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003d46:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8003d4a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003d4e:	f507 716c 	add.w	r1, r7, #944	; 0x3b0
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 f915 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003d58:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8003d5c:	f507 7166 	add.w	r1, r7, #920	; 0x398
 8003d60:	4a54      	ldr	r2, [pc, #336]	; (8003eb4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x638>)
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 f924 	bl	8003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003d68:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8003d6c:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8003d70:	f507 7160 	add.w	r1, r7, #896	; 0x380
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 f904 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003d7a:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8003d7e:	f507 715a 	add.w	r1, r7, #872	; 0x368
 8003d82:	4a4d      	ldr	r2, [pc, #308]	; (8003eb8 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x63c>)
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 f913 	bl	8003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003d8a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8003d8e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003d92:	f507 7154 	add.w	r1, r7, #848	; 0x350
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 f8f3 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003d9c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003da0:	f507 714e 	add.w	r1, r7, #824	; 0x338
 8003da4:	4a42      	ldr	r2, [pc, #264]	; (8003eb0 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 f902 	bl	8003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003dac:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003db0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003db4:	f507 7148 	add.w	r1, r7, #800	; 0x320
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 f8e2 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003dbe:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003dc2:	f507 7142 	add.w	r1, r7, #776	; 0x308
 8003dc6:	4a3a      	ldr	r2, [pc, #232]	; (8003eb0 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 f8f1 	bl	8003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003dce:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8003dd2:	f107 021c 	add.w	r2, r7, #28
 8003dd6:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 f8d1 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003de0:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8003de4:	f107 030c 	add.w	r3, r7, #12
 8003de8:	4611      	mov	r1, r2
 8003dea:	6818      	ldr	r0, [r3, #0]
 8003dec:	f00a fbef 	bl	800e5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003df0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8003df4:	4618      	mov	r0, r3
 8003df6:	f00a fbde 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003dfa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f00a fbd9 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e04:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f00a fbd4 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e0e:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003e12:	4618      	mov	r0, r3
 8003e14:	f00a fbcf 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e18:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f00a fbca 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e22:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8003e26:	4618      	mov	r0, r3
 8003e28:	f00a fbc5 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e2c:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8003e30:	4618      	mov	r0, r3
 8003e32:	f00a fbc0 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e36:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f00a fbbb 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e40:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8003e44:	4618      	mov	r0, r3
 8003e46:	f00a fbb6 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e4a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f00a fbb1 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003e54:	e000      	b.n	8003e58 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	default:
		break;
 8003e56:	bf00      	nop
	}
	return RetStr;
 8003e58:	bf00      	nop
	String second, minute, hour, day, month, year, RetStr = "Wrong type";
 8003e5a:	f107 031c 	add.w	r3, r7, #28
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f00a fba9 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f00a fba4 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e6e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e72:	4618      	mov	r0, r3
 8003e74:	f00a fb9f 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e78:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f00a fb9a 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e82:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003e86:	4618      	mov	r0, r3
 8003e88:	f00a fb95 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e8c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003e90:	4618      	mov	r0, r3
 8003e92:	f00a fb90 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return RetStr;
 8003e96:	f107 030c 	add.w	r3, r7, #12
 8003e9a:	f107 020c 	add.w	r2, r7, #12
 8003e9e:	6812      	ldr	r2, [r2, #0]
 8003ea0:	601a      	str	r2, [r3, #0]
}
 8003ea2:	f107 030c 	add.w	r3, r7, #12
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	f507 7773 	add.w	r7, r7, #972	; 0x3cc
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd90      	pop	{r4, r7, pc}
 8003eb0:	0800f458 	.word	0x0800f458
 8003eb4:	0800f454 	.word	0x0800f454
 8003eb8:	0800f45c 	.word	0x0800f45c

08003ebc <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8003ebc:	b408      	push	{r3}
 8003ebe:	b590      	push	{r4, r7, lr}
 8003ec0:	b088      	sub	sp, #32
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	60f8      	str	r0, [r7, #12]
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	3307      	adds	r3, #7
 8003ece:	3307      	adds	r3, #7
 8003ed0:	08db      	lsrs	r3, r3, #3
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	ebad 0d03 	sub.w	sp, sp, r3
 8003ed8:	466b      	mov	r3, sp
 8003eda:	3307      	adds	r3, #7
 8003edc:	08db      	lsrs	r3, r3, #3
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 8003ee2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ee6:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 8003ee8:	68bc      	ldr	r4, [r7, #8]
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eee:	6879      	ldr	r1, [r7, #4]
 8003ef0:	69f8      	ldr	r0, [r7, #28]
 8003ef2:	47a0      	blx	r4
 8003ef4:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	69fa      	ldr	r2, [r7, #28]
 8003efa:	18d4      	adds	r4, r2, r3
 8003efc:	f107 0314 	add.w	r3, r7, #20
 8003f00:	4618      	mov	r0, r3
 8003f02:	f00a fa2d 	bl	800e360 <_ZNSaIcEC1Ev>
 8003f06:	f107 0314 	add.w	r3, r7, #20
 8003f0a:	4622      	mov	r2, r4
 8003f0c:	69f9      	ldr	r1, [r7, #28]
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 f865 	bl	8003fde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 8003f14:	f107 0314 	add.w	r3, r7, #20
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f00a fa22 	bl	800e362 <_ZNSaIcED1Ev>
    }
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	3720      	adds	r7, #32
 8003f22:	46bd      	mov	sp, r7
 8003f24:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003f28:	b001      	add	sp, #4
 8003f2a:	4770      	bx	lr

08003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f00a fc11 	bl	800e764 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 8003f42:	4603      	mov	r3, r0
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 f865 	bl	8004014 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f00a fb17 	bl	800e582 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
 8003f68:	68b9      	ldr	r1, [r7, #8]
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f00a fc5d 	bl	800e82a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__rhs);
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f00a fc2c 	bl	800e7d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
      return __str;
 8003f78:	bf00      	nop
    }
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b084      	sub	sp, #16
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	60f8      	str	r0, [r7, #12]
 8003f8a:	60b9      	str	r1, [r7, #8]
 8003f8c:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	68b8      	ldr	r0, [r7, #8]
 8003f92:	f00a fc17 	bl	800e7c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8003f96:	4603      	mov	r3, r0
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 f83b 	bl	8004014 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f00a faed 	bl	800e582 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 8003fbc:	6879      	ldr	r1, [r7, #4]
 8003fbe:	68b8      	ldr	r0, [r7, #8]
 8003fc0:	f00a fc06 	bl	800e7d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 f824 	bl	8004014 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	4619      	mov	r1, r3
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f00a fad6 	bl	800e582 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 8003fde:	b590      	push	{r4, r7, lr}
 8003fe0:	b085      	sub	sp, #20
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	607a      	str	r2, [r7, #4]
 8003fea:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 8003fec:	68fc      	ldr	r4, [r7, #12]
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f00a f9e9 	bl	800e3c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	4620      	mov	r0, r4
 8003ffc:	f00a fc13 	bl	800e826 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	68b9      	ldr	r1, [r7, #8]
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 f80f 	bl	8004028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4618      	mov	r0, r3
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	bd90      	pop	{r4, r7, pc}

08004014 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4618      	mov	r0, r3
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr

08004028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	68b9      	ldr	r1, [r7, #8]
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 f804 	bl	8004046 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 800403e:	bf00      	nop
 8004040:	3718      	adds	r7, #24
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 8004046:	b590      	push	{r4, r7, lr}
 8004048:	b087      	sub	sp, #28
 800404a:	af00      	add	r7, sp, #0
 800404c:	60f8      	str	r0, [r7, #12]
 800404e:	60b9      	str	r1, [r7, #8]
 8004050:	607a      	str	r2, [r7, #4]
 8004052:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 8004054:	4623      	mov	r3, r4
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	68b9      	ldr	r1, [r7, #8]
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f000 f804 	bl	8004068 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 8004060:	bf00      	nop
 8004062:	371c      	adds	r7, #28
 8004064:	46bd      	mov	sp, r7
 8004066:	bd90      	pop	{r4, r7, pc}

08004068 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
 8004074:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8004076:	68b8      	ldr	r0, [r7, #8]
 8004078:	f000 f83e 	bl	80040f8 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d005      	beq.n	800408e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	429a      	cmp	r2, r3
 8004088:	d001      	beq.n	800408e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800408a:	2301      	movs	r3, #1
 800408c:	e000      	b.n	8004090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 800408e:	2300      	movs	r3, #0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8004094:	4817      	ldr	r0, [pc, #92]	; (80040f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 8004096:	f00a f968 	bl	800e36a <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	68b8      	ldr	r0, [r7, #8]
 800409e:	f000 f843 	bl	8004128 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 80040a2:	4603      	mov	r3, r0
 80040a4:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2b0f      	cmp	r3, #15
 80040aa:	d910      	bls.n	80040ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 80040ac:	f107 0314 	add.w	r3, r7, #20
 80040b0:	2200      	movs	r2, #0
 80040b2:	4619      	mov	r1, r3
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f00a f98f 	bl	800e3d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80040ba:	4603      	mov	r3, r0
 80040bc:	4619      	mov	r1, r3
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f00a f97d 	bl	800e3be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	4619      	mov	r1, r3
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f00a f97e 	bl	800e3ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f00a f977 	bl	800e3c2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80040d4:	4603      	mov	r3, r0
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	68b9      	ldr	r1, [r7, #8]
 80040da:	4618      	mov	r0, r3
 80040dc:	f00a f9d9 	bl	800e492 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	4619      	mov	r1, r3
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f00a f972 	bl	800e3ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 80040ea:	bf00      	nop
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	0800f460 	.word	0x0800f460

080040f8 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	bf0c      	ite	eq
 8004106:	2301      	moveq	r3, #1
 8004108:	2300      	movne	r3, #0
 800410a:	b2db      	uxtb	r3, r3
 800410c:	4618      	mov	r0, r3
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	bc80      	pop	{r7}
 8004114:	4770      	bx	lr

08004116 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800411e:	4618      	mov	r0, r3
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	bc80      	pop	{r7}
 8004126:	4770      	bx	lr

08004128 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8004128:	b5b0      	push	{r4, r5, r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8004132:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8004134:	1d3b      	adds	r3, r7, #4
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff ffed 	bl	8004116 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 800413c:	462a      	mov	r2, r5
 800413e:	6839      	ldr	r1, [r7, #0]
 8004140:	4620      	mov	r0, r4
 8004142:	f000 f805 	bl	8004150 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8004146:	4603      	mov	r3, r0
    }
 8004148:	4618      	mov	r0, r3
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bdb0      	pop	{r4, r5, r7, pc}

08004150 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	1ad3      	subs	r3, r2, r3
    }
 8004162:	4618      	mov	r0, r3
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	bc80      	pop	{r7}
 800416a:	4770      	bx	lr

0800416c <_Z7DelayNsm>:
#include "Display.h"
#include "tim.h"


void DelayNs(uint32_t NsDelay)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
	if(NsDelay < 16)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b0f      	cmp	r3, #15
 8004178:	d801      	bhi.n	800417e <_Z7DelayNsm+0x12>
	{
		NsDelay = 16;
 800417a:	2310      	movs	r3, #16
 800417c:	607b      	str	r3, [r7, #4]
	}
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800417e:	4b0a      	ldr	r3, [pc, #40]	; (80041a8 <_Z7DelayNsm+0x3c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2200      	movs	r2, #0
 8004184:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim2) < NsDelay);
 8004186:	4b08      	ldr	r3, [pc, #32]	; (80041a8 <_Z7DelayNsm+0x3c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	429a      	cmp	r2, r3
 8004190:	bf8c      	ite	hi
 8004192:	2301      	movhi	r3, #1
 8004194:	2300      	movls	r3, #0
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	d000      	beq.n	800419e <_Z7DelayNsm+0x32>
 800419c:	e7f3      	b.n	8004186 <_Z7DelayNsm+0x1a>
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr
 80041a8:	20000618 	.word	0x20000618

080041ac <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv>:

uint8_t u8g2_gpio_and_delay_stm32(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	607b      	str	r3, [r7, #4]
 80041b6:	460b      	mov	r3, r1
 80041b8:	72fb      	strb	r3, [r7, #11]
 80041ba:	4613      	mov	r3, r2
 80041bc:	72bb      	strb	r3, [r7, #10]

	switch(msg)
 80041be:	7afb      	ldrb	r3, [r7, #11]
 80041c0:	3b28      	subs	r3, #40	; 0x28
 80041c2:	2b23      	cmp	r3, #35	; 0x23
 80041c4:	d86b      	bhi.n	800429e <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xf2>
 80041c6:	a201      	add	r2, pc, #4	; (adr r2, 80041cc <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x20>)
 80041c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041cc:	080042a9 	.word	0x080042a9
 80041d0:	0800426b 	.word	0x0800426b
 80041d4:	08004261 	.word	0x08004261
 80041d8:	0800425d 	.word	0x0800425d
 80041dc:	080042a9 	.word	0x080042a9
 80041e0:	0800429f 	.word	0x0800429f
 80041e4:	0800429f 	.word	0x0800429f
 80041e8:	0800429f 	.word	0x0800429f
 80041ec:	0800429f 	.word	0x0800429f
 80041f0:	0800429f 	.word	0x0800429f
 80041f4:	0800429f 	.word	0x0800429f
 80041f8:	0800429f 	.word	0x0800429f
 80041fc:	0800429f 	.word	0x0800429f
 8004200:	0800429f 	.word	0x0800429f
 8004204:	0800429f 	.word	0x0800429f
 8004208:	0800429f 	.word	0x0800429f
 800420c:	0800429f 	.word	0x0800429f
 8004210:	0800429f 	.word	0x0800429f
 8004214:	0800429f 	.word	0x0800429f
 8004218:	0800429f 	.word	0x0800429f
 800421c:	0800429f 	.word	0x0800429f
 8004220:	0800429f 	.word	0x0800429f
 8004224:	0800429f 	.word	0x0800429f
 8004228:	0800429f 	.word	0x0800429f
 800422c:	0800429f 	.word	0x0800429f
 8004230:	0800429f 	.word	0x0800429f
 8004234:	0800429f 	.word	0x0800429f
 8004238:	0800429f 	.word	0x0800429f
 800423c:	0800429f 	.word	0x0800429f
 8004240:	0800429f 	.word	0x0800429f
 8004244:	0800429f 	.word	0x0800429f
 8004248:	0800429f 	.word	0x0800429f
 800424c:	0800429f 	.word	0x0800429f
 8004250:	08004275 	.word	0x08004275
 8004254:	08004283 	.word	0x08004283
 8004258:	08004291 	.word	0x08004291
		case U8X8_MSG_DELAY_NANO:			// delay arg_int * 1 nano second
			//		DelayNs(arg_int);
			break;
		case U8X8_MSG_DELAY_100NANO:		// delay arg_int * 100 nano seconds
			//		DelayNs(arg_int);
			__NOP();
 800425c:	bf00      	nop
			break;
 800425e:	e024      	b.n	80042aa <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
			//Function which delays 10us
		case U8X8_MSG_DELAY_10MICRO:
			DelayNs(10000);
 8004260:	f242 7010 	movw	r0, #10000	; 0x2710
 8004264:	f7ff ff82 	bl	800416c <_Z7DelayNsm>
			//		for (uint16_t n = 0; n < 320; n++)
			//		{
			//			__NOP();
			//		}
			break;
 8004268:	e01f      	b.n	80042aa <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		case U8X8_MSG_DELAY_MILLI:			// delay arg_int * 1 milli second
			HAL_Delay(arg_int);
 800426a:	7abb      	ldrb	r3, [r7, #10]
 800426c:	4618      	mov	r0, r3
 800426e:	f005 fd95 	bl	8009d9c <HAL_Delay>
			break;					// arg_int=1: delay by 5us, arg_int = 4: delay by 1.25us
 8004272:	e01a      	b.n	80042aa <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
			//		//	case U8X8_MSG_GPIO_D1:				// D1 or SPI data pin: Output level in arg_int
			//	case U8X8_MSG_GPIO_SPI_DATA:
			//		HAL_GPIO_WritePin(Mosi_GPIO_Port, Mosi_Pin, (GPIO_PinState)arg_int);
			//		break;
		case U8X8_MSG_GPIO_CS:				// CS (chip select) pin: Output level in arg_int
			HAL_GPIO_WritePin(LcdCS_GPIO_Port, LcdCS_Pin, (GPIO_PinState)arg_int);
 8004274:	7abb      	ldrb	r3, [r7, #10]
 8004276:	461a      	mov	r2, r3
 8004278:	2108      	movs	r1, #8
 800427a:	480e      	ldr	r0, [pc, #56]	; (80042b4 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 800427c:	f006 fd42 	bl	800ad04 <HAL_GPIO_WritePin>
			break;
 8004280:	e013      	b.n	80042aa <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		case U8X8_MSG_GPIO_DC:				// DC (data/cmd, A0, register select) pin: Output level in arg_int
			HAL_GPIO_WritePin(LcdA0_GPIO_Port, LcdA0_Pin, (GPIO_PinState)arg_int);
 8004282:	7abb      	ldrb	r3, [r7, #10]
 8004284:	461a      	mov	r2, r3
 8004286:	2110      	movs	r1, #16
 8004288:	480a      	ldr	r0, [pc, #40]	; (80042b4 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 800428a:	f006 fd3b 	bl	800ad04 <HAL_GPIO_WritePin>
			break;
 800428e:	e00c      	b.n	80042aa <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		case U8X8_MSG_GPIO_RESET:			// Reset pin: Output level in arg_int
			HAL_GPIO_WritePin(LcdReset_GPIO_Port, LcdReset_Pin, (GPIO_PinState)arg_int);
 8004290:	7abb      	ldrb	r3, [r7, #10]
 8004292:	461a      	mov	r2, r3
 8004294:	2140      	movs	r1, #64	; 0x40
 8004296:	4807      	ldr	r0, [pc, #28]	; (80042b4 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 8004298:	f006 fd34 	bl	800ad04 <HAL_GPIO_WritePin>
			break;
 800429c:	e005      	b.n	80042aa <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		default:
			u8x8_SetGPIOResult(u8x8, 1);			// default return value
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			break;
 80042a6:	e000      	b.n	80042aa <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
			break;							// can be used to setup pins
 80042a8:	bf00      	nop
	}
	return 1; // command processed successfully. // @suppress("Return with parenthesis")
 80042aa:	2301      	movs	r3, #1
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40010800 	.word	0x40010800

080042b8 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8g2, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	607b      	str	r3, [r7, #4]
 80042c2:	460b      	mov	r3, r1
 80042c4:	72fb      	strb	r3, [r7, #11]
 80042c6:	4613      	mov	r3, r2
 80042c8:	72bb      	strb	r3, [r7, #10]
	//	uint8_t byte;
	//	uint8_t *data;
	switch(msg)
 80042ca:	7afb      	ldrb	r3, [r7, #11]
 80042cc:	3b14      	subs	r3, #20
 80042ce:	2b0c      	cmp	r3, #12
 80042d0:	d848      	bhi.n	8004364 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xac>
 80042d2:	a201      	add	r2, pc, #4	; (adr r2, 80042d8 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0x20>)
 80042d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d8:	0800431d 	.word	0x0800431d
 80042dc:	08004365 	.word	0x08004365
 80042e0:	08004365 	.word	0x08004365
 80042e4:	0800430d 	.word	0x0800430d
 80042e8:	0800433d 	.word	0x0800433d
 80042ec:	08004351 	.word	0x08004351
 80042f0:	08004365 	.word	0x08004365
 80042f4:	08004365 	.word	0x08004365
 80042f8:	08004365 	.word	0x08004365
 80042fc:	08004365 	.word	0x08004365
 8004300:	08004365 	.word	0x08004365
 8004304:	08004365 	.word	0x08004365
 8004308:	0800432f 	.word	0x0800432f
			//			byte = *data;
			//			data++;
			//			arg_int--;
			//			HAL_SPI_Transmit(&hspi1, &byte, 1, 100);
			//		}
			HAL_SPI_Transmit(&hspi1, (uint8_t *)arg_ptr, arg_int, 10);
 800430c:	7abb      	ldrb	r3, [r7, #10]
 800430e:	b29a      	uxth	r2, r3
 8004310:	230a      	movs	r3, #10
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	4817      	ldr	r0, [pc, #92]	; (8004374 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xbc>)
 8004316:	f008 fd59 	bl	800cdcc <HAL_SPI_Transmit>
			break;
 800431a:	e025      	b.n	8004368 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_INIT:
			u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_disable_level);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	785b      	ldrb	r3, [r3, #1]
 8004322:	461a      	mov	r2, r3
 8004324:	2149      	movs	r1, #73	; 0x49
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f7fe ff2c 	bl	8003184 <u8x8_gpio_call>
			break;
 800432c:	e01c      	b.n	8004368 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_SET_DC:
			u8x8_gpio_SetDC(u8g2, arg_int);
 800432e:	7abb      	ldrb	r3, [r7, #10]
 8004330:	461a      	mov	r2, r3
 8004332:	214a      	movs	r1, #74	; 0x4a
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f7fe ff25 	bl	8003184 <u8x8_gpio_call>
			break;
 800433a:	e015      	b.n	8004368 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_START_TRANSFER:
			u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_enable_level);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	2149      	movs	r1, #73	; 0x49
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f7fe ff1c 	bl	8003184 <u8x8_gpio_call>
			__NOP();
 800434c:	bf00      	nop
			//		u8g2->gpio_and_delay_cb(u8g2, U8X8_MSG_DELAY_NANO, u8g2->display_info->post_chip_enable_wait_ns, NULL);
			break;
 800434e:	e00b      	b.n	8004368 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_END_TRANSFER:
			//		u8g2->gpio_and_delay_cb(u8g2, U8X8_MSG_DELAY_NANO, u8g2->display_info->pre_chip_disable_wait_ns, NULL);
			__NOP();
 8004350:	bf00      	nop
			u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_disable_level);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	785b      	ldrb	r3, [r3, #1]
 8004358:	461a      	mov	r2, r3
 800435a:	2149      	movs	r1, #73	; 0x49
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f7fe ff11 	bl	8003184 <u8x8_gpio_call>
			break;
 8004362:	e001      	b.n	8004368 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		default:
			return 0;
 8004364:	2300      	movs	r3, #0
 8004366:	e000      	b.n	800436a <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb2>
	}
	return 1;
 8004368:	2301      	movs	r3, #1
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	200005c0 	.word	0x200005c0

08004378 <_ZN13NHDST7565_LCD12TEXT_4_WRITEC1Ev>:
	{
		String text;
		uint8_t textLen;
		uint8_t textHigh;
		const uint8_t *textFont;
	}TEXT_4_WRITE;
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4618      	mov	r0, r3
 8004384:	f00a f8f6 	bl	800e574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4618      	mov	r0, r3
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
	...

08004394 <_ZN13NHDST7565_LCDC1Eh>:


NHDST7565_LCD::NHDST7565_LCD(uint8_t Rotation)
 8004394:	b5b0      	push	{r4, r5, r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	460b      	mov	r3, r1
 800439e:	70fb      	strb	r3, [r7, #3]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff ffe8 	bl	8004378 <_ZN13NHDST7565_LCD12TEXT_4_WRITEC1Ev>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2020 	strb.w	r2, [r3, #32]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a0a      	ldr	r2, [pc, #40]	; (80043dc <_ZN13NHDST7565_LCDC1Eh+0x48>)
 80043b4:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 80043b8:	4615      	mov	r5, r2
 80043ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80043c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
{
	changeDisplayDisposition(Rotation);
 80043c6:	78fb      	ldrb	r3, [r7, #3]
 80043c8:	4619      	mov	r1, r3
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f808 	bl	80043e0 <_ZN13NHDST7565_LCD24changeDisplayDispositionEh>
}
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bdb0      	pop	{r4, r5, r7, pc}
 80043da:	bf00      	nop
 80043dc:	0800f48c 	.word	0x0800f48c

080043e0 <_ZN13NHDST7565_LCD24changeDisplayDispositionEh>:

void NHDST7565_LCD::changeDisplayDisposition(uint8_t NewRotation)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	460b      	mov	r3, r1
 80043ea:	70fb      	strb	r3, [r7, #3]
	dispParams.rotation = NewRotation;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	78fa      	ldrb	r2, [r7, #3]
 80043f0:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	if(dispParams.rotation == VERTICAL_1 || dispParams.rotation == VERTICAL_2)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d004      	beq.n	8004408 <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x28>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8004404:	2b03      	cmp	r3, #3
 8004406:	d108      	bne.n	800441a <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x3a>
	{
		dispParams.width = 64;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2240      	movs	r2, #64	; 0x40
 800440c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		dispParams.high = 128;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2280      	movs	r2, #128	; 0x80
 8004414:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 8004418:	e007      	b.n	800442a <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x4a>
	}
	else
	{
		dispParams.width = 128;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2280      	movs	r2, #128	; 0x80
 800441e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		dispParams.high = 64;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2240      	movs	r2, #64	; 0x40
 8004426:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
	}
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	bc80      	pop	{r7}
 8004432:	4770      	bx	lr

08004434 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>:


void NHDST7565_LCD::assignTextParams(String Text, const uint8_t *Font)
{
 8004434:	b590      	push	{r4, r7, lr}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
	textToWrite.textLen = 0;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	761a      	strb	r2, [r3, #24]
	textToWrite.textHigh = 0;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	765a      	strb	r2, [r3, #25]
	textToWrite.text = "";
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4930      	ldr	r1, [pc, #192]	; (8004510 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xdc>)
 8004450:	4618      	mov	r0, r3
 8004452:	f00a f96a 	bl	800e72a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	textToWrite.textFont = Font;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	61da      	str	r2, [r3, #28]
	//	if(textToWrite.textFont != Font)
	//	{
	u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	4619      	mov	r1, r3
 8004468:	4610      	mov	r0, r2
 800446a:	f7fd fdeb 	bl	8002044 <u8g2_SetFont>
	textToWrite.textHigh = u8g2_GetAscent(&U8G2_Display);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f993 30a2 	ldrsb.w	r3, [r3, #162]	; 0xa2
 8004474:	b2da      	uxtb	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	765a      	strb	r2, [r3, #25]
	//	}
	if(Text != "")
 800447a:	4925      	ldr	r1, [pc, #148]	; (8004510 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xdc>)
 800447c:	68b8      	ldr	r0, [r7, #8]
 800447e:	f000 fd8b 	bl	8004f98 <_ZStneIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00e      	beq.n	80044a6 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0x72>
		textToWrite.textLen = u8g2_GetStrWidth(&U8G2_Display, Text.c_str());
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800448e:	68b8      	ldr	r0, [r7, #8]
 8004490:	f00a f9b4 	bl	800e7fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004494:	4603      	mov	r3, r0
 8004496:	4619      	mov	r1, r3
 8004498:	4620      	mov	r0, r4
 800449a:	f7fd fe3d 	bl	8002118 <u8g2_GetStrWidth>
 800449e:	4603      	mov	r3, r0
 80044a0:	461a      	mov	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	761a      	strb	r2, [r3, #24]

	if(textToWrite.textLen < dispParams.width)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	7e1a      	ldrb	r2, [r3, #24]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d205      	bcs.n	80044c0 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0x8c>
	{
		textToWrite.text = Text;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	68b9      	ldr	r1, [r7, #8]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f00a f882 	bl	800e5c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		textToWrite.textFont = displayFonts[W_5_H_8];
		u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
		textToWrite.textLen = u8g2_GetStrWidth(&U8G2_Display, Text.c_str());
		textToWrite.textHigh = u8g2_GetAscent(&U8G2_Display);
	}
}
 80044be:	e022      	b.n	8004506 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xd2>
		textToWrite.textFont = displayFonts[W_5_H_8];
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	61da      	str	r2, [r3, #28]
		u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	4619      	mov	r1, r3
 80044d6:	4610      	mov	r0, r2
 80044d8:	f7fd fdb4 	bl	8002044 <u8g2_SetFont>
		textToWrite.textLen = u8g2_GetStrWidth(&U8G2_Display, Text.c_str());
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80044e2:	68b8      	ldr	r0, [r7, #8]
 80044e4:	f00a f98a 	bl	800e7fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80044e8:	4603      	mov	r3, r0
 80044ea:	4619      	mov	r1, r3
 80044ec:	4620      	mov	r0, r4
 80044ee:	f7fd fe13 	bl	8002118 <u8g2_GetStrWidth>
 80044f2:	4603      	mov	r3, r0
 80044f4:	461a      	mov	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	761a      	strb	r2, [r3, #24]
		textToWrite.textHigh = u8g2_GetAscent(&U8G2_Display);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f993 30a2 	ldrsb.w	r3, [r3, #162]	; 0xa2
 8004500:	b2da      	uxtb	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	765a      	strb	r2, [r3, #25]
}
 8004506:	bf00      	nop
 8004508:	3714      	adds	r7, #20
 800450a:	46bd      	mov	sp, r7
 800450c:	bd90      	pop	{r4, r7, pc}
 800450e:	bf00      	nop
 8004510:	0800f4a8 	.word	0x0800f4a8

08004514 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_>:

void NHDST7565_LCD::assignNewDrawCoord(uint8_t OldXPos, uint8_t OldYPos,
		uint8_t &NewXPos, uint8_t &NewYPos)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	607b      	str	r3, [r7, #4]
 800451e:	460b      	mov	r3, r1
 8004520:	72fb      	strb	r3, [r7, #11]
 8004522:	4613      	mov	r3, r2
 8004524:	72bb      	strb	r3, [r7, #10]
	if(OldXPos <= dispParams.width && OldYPos <= dispParams.high)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800452c:	7afa      	ldrb	r2, [r7, #11]
 800452e:	429a      	cmp	r2, r3
 8004530:	d80c      	bhi.n	800454c <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x38>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004538:	7aba      	ldrb	r2, [r7, #10]
 800453a:	429a      	cmp	r2, r3
 800453c:	d806      	bhi.n	800454c <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x38>
	{
		NewXPos = OldXPos;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	7afa      	ldrb	r2, [r7, #11]
 8004542:	701a      	strb	r2, [r3, #0]
		NewYPos = OldYPos;
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	7aba      	ldrb	r2, [r7, #10]
 8004548:	701a      	strb	r2, [r3, #0]
 800454a:	e0bb      	b.n	80046c4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
	}
	else if(OldXPos > dispParams.width && OldYPos <= dispParams.high)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004552:	7afa      	ldrb	r2, [r7, #11]
 8004554:	429a      	cmp	r2, r3
 8004556:	d930      	bls.n	80045ba <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa6>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800455e:	7aba      	ldrb	r2, [r7, #10]
 8004560:	429a      	cmp	r2, r3
 8004562:	d82a      	bhi.n	80045ba <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa6>
	{
		NewYPos = OldYPos;
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	7aba      	ldrb	r2, [r7, #10]
 8004568:	701a      	strb	r2, [r3, #0]
		switch(OldXPos)
 800456a:	7afb      	ldrb	r3, [r7, #11]
 800456c:	2b83      	cmp	r3, #131	; 0x83
 800456e:	d00b      	beq.n	8004588 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x74>
 8004570:	2b84      	cmp	r3, #132	; 0x84
 8004572:	d011      	beq.n	8004598 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x84>
 8004574:	2b82      	cmp	r3, #130	; 0x82
 8004576:	d117      	bne.n	80045a8 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x94>
		{
			case LEFT_POS:
				NewXPos = setTextLeft();
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 f901 	bl	8004780 <_ZN13NHDST7565_LCD11setTextLeftEv>
 800457e:	4603      	mov	r3, r0
 8004580:	461a      	mov	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	701a      	strb	r2, [r3, #0]
				break;
 8004586:	e017      	b.n	80045b8 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa4>
			case CENTER_POS:
				NewXPos = setTextCenter();
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 f905 	bl	8004798 <_ZN13NHDST7565_LCD13setTextCenterEv>
 800458e:	4603      	mov	r3, r0
 8004590:	461a      	mov	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	701a      	strb	r2, [r3, #0]
				break;
 8004596:	e00f      	b.n	80045b8 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa4>
			case RIGHT_POS:
				NewXPos = setTextRight();
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 f914 	bl	80047c6 <_ZN13NHDST7565_LCD12setTextRightEv>
 800459e:	4603      	mov	r3, r0
 80045a0:	461a      	mov	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	701a      	strb	r2, [r3, #0]
				break;
 80045a6:	e007      	b.n	80045b8 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa4>
			default:
				NewXPos = setTextCenter();
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 f8f5 	bl	8004798 <_ZN13NHDST7565_LCD13setTextCenterEv>
 80045ae:	4603      	mov	r3, r0
 80045b0:	461a      	mov	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	701a      	strb	r2, [r3, #0]
				break;
 80045b6:	bf00      	nop
	else if(OldXPos > dispParams.width && OldYPos <= dispParams.high)
 80045b8:	e084      	b.n	80046c4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
		}
	}
	else if(OldXPos <= dispParams.width && OldYPos > dispParams.high)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80045c0:	7afa      	ldrb	r2, [r7, #11]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d830      	bhi.n	8004628 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x114>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80045cc:	7aba      	ldrb	r2, [r7, #10]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d92a      	bls.n	8004628 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x114>
	{
		NewXPos = OldXPos;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	7afa      	ldrb	r2, [r7, #11]
 80045d6:	701a      	strb	r2, [r3, #0]
		switch(OldYPos)
 80045d8:	7abb      	ldrb	r3, [r7, #10]
 80045da:	2b47      	cmp	r3, #71	; 0x47
 80045dc:	d00b      	beq.n	80045f6 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xe2>
 80045de:	2b48      	cmp	r3, #72	; 0x48
 80045e0:	d011      	beq.n	8004606 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xf2>
 80045e2:	2b46      	cmp	r3, #70	; 0x46
 80045e4:	d117      	bne.n	8004616 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x102>
		{
			case TOP_POS:
				NewYPos = setTextTop();
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 f900 	bl	80047ec <_ZN13NHDST7565_LCD10setTextTopEv>
 80045ec:	4603      	mov	r3, r0
 80045ee:	461a      	mov	r2, r3
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	701a      	strb	r2, [r3, #0]
				break;
 80045f4:	e017      	b.n	8004626 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x112>
			case MIDDLE_POS:
				NewYPos = setTextMiddle();
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 f906 	bl	8004808 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 80045fc:	4603      	mov	r3, r0
 80045fe:	461a      	mov	r2, r3
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	701a      	strb	r2, [r3, #0]
				break;
 8004604:	e00f      	b.n	8004626 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x112>
			case BOTTOM_POS:
				NewYPos = setTextBottom();
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 f920 	bl	800484c <_ZN13NHDST7565_LCD13setTextBottomEv>
 800460c:	4603      	mov	r3, r0
 800460e:	461a      	mov	r2, r3
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	701a      	strb	r2, [r3, #0]
				break;
 8004614:	e007      	b.n	8004626 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x112>
			default:
				NewYPos = setTextMiddle();
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 f8f6 	bl	8004808 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 800461c:	4603      	mov	r3, r0
 800461e:	461a      	mov	r2, r3
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	701a      	strb	r2, [r3, #0]
				break;
 8004624:	bf00      	nop
	else if(OldXPos <= dispParams.width && OldYPos > dispParams.high)
 8004626:	e04d      	b.n	80046c4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
		}
	}
	else
	{
		switch(OldXPos)
 8004628:	7afb      	ldrb	r3, [r7, #11]
 800462a:	2b83      	cmp	r3, #131	; 0x83
 800462c:	d00b      	beq.n	8004646 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x132>
 800462e:	2b84      	cmp	r3, #132	; 0x84
 8004630:	d011      	beq.n	8004656 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x142>
 8004632:	2b82      	cmp	r3, #130	; 0x82
 8004634:	d117      	bne.n	8004666 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x152>
		{
			case LEFT_POS:
				NewXPos = setTextLeft();
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 f8a2 	bl	8004780 <_ZN13NHDST7565_LCD11setTextLeftEv>
 800463c:	4603      	mov	r3, r0
 800463e:	461a      	mov	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	701a      	strb	r2, [r3, #0]
				break;
 8004644:	e017      	b.n	8004676 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x162>
			case CENTER_POS:
				NewXPos = setTextCenter();
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 f8a6 	bl	8004798 <_ZN13NHDST7565_LCD13setTextCenterEv>
 800464c:	4603      	mov	r3, r0
 800464e:	461a      	mov	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	701a      	strb	r2, [r3, #0]
				break;
 8004654:	e00f      	b.n	8004676 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x162>
			case RIGHT_POS:
				NewXPos = setTextRight();
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 f8b5 	bl	80047c6 <_ZN13NHDST7565_LCD12setTextRightEv>
 800465c:	4603      	mov	r3, r0
 800465e:	461a      	mov	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	701a      	strb	r2, [r3, #0]
				break;
 8004664:	e007      	b.n	8004676 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x162>
			default:
				NewXPos = setTextCenter();
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 f896 	bl	8004798 <_ZN13NHDST7565_LCD13setTextCenterEv>
 800466c:	4603      	mov	r3, r0
 800466e:	461a      	mov	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	701a      	strb	r2, [r3, #0]
				break;
 8004674:	bf00      	nop
		}
		switch(OldYPos)
 8004676:	7abb      	ldrb	r3, [r7, #10]
 8004678:	2b47      	cmp	r3, #71	; 0x47
 800467a:	d00b      	beq.n	8004694 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x180>
 800467c:	2b48      	cmp	r3, #72	; 0x48
 800467e:	d011      	beq.n	80046a4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x190>
 8004680:	2b46      	cmp	r3, #70	; 0x46
 8004682:	d117      	bne.n	80046b4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1a0>
		{
			case TOP_POS:
				NewYPos = setTextTop();
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f000 f8b1 	bl	80047ec <_ZN13NHDST7565_LCD10setTextTopEv>
 800468a:	4603      	mov	r3, r0
 800468c:	461a      	mov	r2, r3
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	701a      	strb	r2, [r3, #0]
				break;
 8004692:	e017      	b.n	80046c4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
			case MIDDLE_POS:
				NewYPos = setTextMiddle();
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 f8b7 	bl	8004808 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 800469a:	4603      	mov	r3, r0
 800469c:	461a      	mov	r2, r3
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	701a      	strb	r2, [r3, #0]
				break;
 80046a2:	e00f      	b.n	80046c4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
			case BOTTOM_POS:
				NewYPos = setTextBottom();
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 f8d1 	bl	800484c <_ZN13NHDST7565_LCD13setTextBottomEv>
 80046aa:	4603      	mov	r3, r0
 80046ac:	461a      	mov	r2, r3
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	701a      	strb	r2, [r3, #0]
				break;
 80046b2:	e007      	b.n	80046c4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
			default:
				NewYPos = setTextMiddle();
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 f8a7 	bl	8004808 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 80046ba:	4603      	mov	r3, r0
 80046bc:	461a      	mov	r2, r3
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	701a      	strb	r2, [r3, #0]
				break;
 80046c2:	bf00      	nop
		}
	}
}
 80046c4:	bf00      	nop
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <_ZN13NHDST7565_LCD8setupLcdEv>:

void NHDST7565_LCD::setupLcd()
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
	const u8g2_cb_t *DisplayRotation;
	switch(dispParams.rotation)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 80046da:	2b03      	cmp	r3, #3
 80046dc:	d816      	bhi.n	800470c <_ZN13NHDST7565_LCD8setupLcdEv+0x40>
 80046de:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <_ZN13NHDST7565_LCD8setupLcdEv+0x18>)
 80046e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e4:	080046f5 	.word	0x080046f5
 80046e8:	080046fb 	.word	0x080046fb
 80046ec:	08004701 	.word	0x08004701
 80046f0:	08004707 	.word	0x08004707
	{
		case LANDSCAPE_1:
			DisplayRotation = &u8g2_cb_r2;
 80046f4:	4b1c      	ldr	r3, [pc, #112]	; (8004768 <_ZN13NHDST7565_LCD8setupLcdEv+0x9c>)
 80046f6:	60fb      	str	r3, [r7, #12]
			break;
 80046f8:	e00b      	b.n	8004712 <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		case LANDSCAPE_2:
			DisplayRotation = &u8g2_cb_r0;
 80046fa:	4b1c      	ldr	r3, [pc, #112]	; (800476c <_ZN13NHDST7565_LCD8setupLcdEv+0xa0>)
 80046fc:	60fb      	str	r3, [r7, #12]
			break;
 80046fe:	e008      	b.n	8004712 <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		case VERTICAL_1:
			DisplayRotation = &u8g2_cb_r1;
 8004700:	4b1b      	ldr	r3, [pc, #108]	; (8004770 <_ZN13NHDST7565_LCD8setupLcdEv+0xa4>)
 8004702:	60fb      	str	r3, [r7, #12]
			break;
 8004704:	e005      	b.n	8004712 <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		case VERTICAL_2:
			DisplayRotation = &u8g2_cb_r3;
 8004706:	4b1b      	ldr	r3, [pc, #108]	; (8004774 <_ZN13NHDST7565_LCD8setupLcdEv+0xa8>)
 8004708:	60fb      	str	r3, [r7, #12]
			break;
 800470a:	e002      	b.n	8004712 <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		default:
			DisplayRotation = &u8g2_cb_r0;
 800470c:	4b17      	ldr	r3, [pc, #92]	; (800476c <_ZN13NHDST7565_LCD8setupLcdEv+0xa0>)
 800470e:	60fb      	str	r3, [r7, #12]
			break;
 8004710:	bf00      	nop
	}
	u8g2_Setup_st7565_nhd_c12864_f(&U8G2_Display, DisplayRotation, u8x8_byte_stm32_hw_spi, u8g2_gpio_and_delay_stm32);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004718:	4b17      	ldr	r3, [pc, #92]	; (8004778 <_ZN13NHDST7565_LCD8setupLcdEv+0xac>)
 800471a:	4a18      	ldr	r2, [pc, #96]	; (800477c <_ZN13NHDST7565_LCD8setupLcdEv+0xb0>)
 800471c:	68f9      	ldr	r1, [r7, #12]
 800471e:	f7fc febb 	bl	8001498 <u8g2_Setup_st7565_nhd_c12864_f>
	u8g2_InitDisplay(&U8G2_Display); // send init sequence to the display, display is in sleep mode after this, // @suppress("C-Style cast instead of C++ cast")
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	3324      	adds	r3, #36	; 0x24
 8004726:	4618      	mov	r0, r3
 8004728:	f7fe fcfd 	bl	8003126 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&U8G2_Display, 0); // wake up display // @suppress("C-Style cast instead of C++ cast")
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	3324      	adds	r3, #36	; 0x24
 8004730:	2100      	movs	r1, #0
 8004732:	4618      	mov	r0, r3
 8004734:	f7fe fd06 	bl	8003144 <u8x8_SetPowerSave>
	u8g2_SetFontMode(&U8G2_Display, 1);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3324      	adds	r3, #36	; 0x24
 800473c:	2101      	movs	r1, #1
 800473e:	4618      	mov	r0, r3
 8004740:	f7fd fb24 	bl	8001d8c <u8g2_SetFontMode>
	u8g2_SetDrawColor(&U8G2_Display, figureColorSetted);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004750:	4619      	mov	r1, r3
 8004752:	4610      	mov	r0, r2
 8004754:	f7fd fe4c 	bl	80023f0 <u8g2_SetDrawColor>
	clearScreen();
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f8a6 	bl	80048aa <_ZN13NHDST7565_LCD11clearScreenEv>
}
 800475e:	bf00      	nop
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	080124f8 	.word	0x080124f8
 800476c:	080124e0 	.word	0x080124e0
 8004770:	080124ec 	.word	0x080124ec
 8004774:	08012504 	.word	0x08012504
 8004778:	080041ad 	.word	0x080041ad
 800477c:	080042b9 	.word	0x080042b9

08004780 <_ZN13NHDST7565_LCD11setTextLeftEv>:


uint8_t NHDST7565_LCD::setTextLeft()
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8004788:	2300      	movs	r3, #0
 800478a:	73fb      	strb	r3, [r7, #15]
	//	TextLen = u8g2_GetStrWidth(U8G2_Display, textToWrite.c_str());
	return NewPos; // @suppress("Return with parenthesis")
 800478c:	7bfb      	ldrb	r3, [r7, #15]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	bc80      	pop	{r7}
 8004796:	4770      	bx	lr

08004798 <_ZN13NHDST7565_LCD13setTextCenterEv>:

uint8_t NHDST7565_LCD::setTextCenter()
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 80047a0:	2300      	movs	r3, #0
 80047a2:	73fb      	strb	r3, [r7, #15]
	NewPos = (dispParams.width - textToWrite.textLen) / 2;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80047aa:	461a      	mov	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	7e1b      	ldrb	r3, [r3, #24]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	0fda      	lsrs	r2, r3, #31
 80047b4:	4413      	add	r3, r2
 80047b6:	105b      	asrs	r3, r3, #1
 80047b8:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bc80      	pop	{r7}
 80047c4:	4770      	bx	lr

080047c6 <_ZN13NHDST7565_LCD12setTextRightEv>:

uint8_t NHDST7565_LCD::setTextRight()
{
 80047c6:	b480      	push	{r7}
 80047c8:	b085      	sub	sp, #20
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 80047ce:	2300      	movs	r3, #0
 80047d0:	73fb      	strb	r3, [r7, #15]
	NewPos = (dispParams.width - textToWrite.textLen);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	7e1b      	ldrb	r3, [r3, #24]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 80047e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bc80      	pop	{r7}
 80047ea:	4770      	bx	lr

080047ec <_ZN13NHDST7565_LCD10setTextTopEv>:

uint8_t NHDST7565_LCD::setTextTop()
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 80047f4:	2300      	movs	r3, #0
 80047f6:	73fb      	strb	r3, [r7, #15]
	NewPos = 1;
 80047f8:	2301      	movs	r3, #1
 80047fa:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	bc80      	pop	{r7}
 8004806:	4770      	bx	lr

08004808 <_ZN13NHDST7565_LCD13setTextMiddleEv>:

uint8_t NHDST7565_LCD::setTextMiddle()
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8004810:	2300      	movs	r3, #0
 8004812:	73fb      	strb	r3, [r7, #15]
	NewPos = ((dispParams.high - textToWrite.textHigh + 1) / 2) + (textToWrite.textHigh / 2) - textToWrite.textHigh;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800481a:	461a      	mov	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	7e5b      	ldrb	r3, [r3, #25]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	3301      	adds	r3, #1
 8004824:	0fda      	lsrs	r2, r3, #31
 8004826:	4413      	add	r3, r2
 8004828:	105b      	asrs	r3, r3, #1
 800482a:	b2da      	uxtb	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	7e5b      	ldrb	r3, [r3, #25]
 8004830:	085b      	lsrs	r3, r3, #1
 8004832:	b2db      	uxtb	r3, r3
 8004834:	4413      	add	r3, r2
 8004836:	b2da      	uxtb	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	7e5b      	ldrb	r3, [r3, #25]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 8004840:	7bfb      	ldrb	r3, [r7, #15]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	bc80      	pop	{r7}
 800484a:	4770      	bx	lr

0800484c <_ZN13NHDST7565_LCD13setTextBottomEv>:

uint8_t NHDST7565_LCD::setTextBottom()
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8004854:	2300      	movs	r3, #0
 8004856:	73fb      	strb	r3, [r7, #15]
	//	NewPos = (DispParams.high - textToWrite.textHigh - 1);
	NewPos = dispParams.high - 1 - textToWrite.textHigh;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	7e5b      	ldrb	r3, [r3, #25]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	b2db      	uxtb	r3, r3
 8004866:	3b01      	subs	r3, #1
 8004868:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 800486a:	7bfb      	ldrb	r3, [r7, #15]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	bc80      	pop	{r7}
 8004874:	4770      	bx	lr

08004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>:



void NHDST7565_LCD::clearFrameBuffer()
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b082      	sub	sp, #8
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
	u8g2_ClearBuffer(&U8G2_Display);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	3324      	adds	r3, #36	; 0x24
 8004882:	4618      	mov	r0, r3
 8004884:	f7fc fc59 	bl	800113a <u8g2_ClearBuffer>
}
 8004888:	bf00      	nop
 800488a:	3708      	adds	r7, #8
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>:
void NHDST7565_LCD::sendFrameBuffer()
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
	u8g2_SendBuffer(&U8G2_Display);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3324      	adds	r3, #36	; 0x24
 800489c:	4618      	mov	r0, r3
 800489e:	f7fc fcbf 	bl	8001220 <u8g2_SendBuffer>
}
 80048a2:	bf00      	nop
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <_ZN13NHDST7565_LCD11clearScreenEv>:

void NHDST7565_LCD::clearScreen()
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b082      	sub	sp, #8
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
	clearFrameBuffer();
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7ff ffdf 	bl	8004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
	sendFrameBuffer();
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7ff ffe9 	bl	8004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
}
 80048be:	bf00      	nop
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>:
	if(Color != figureColorSetted)
		u8g2_SetDrawColor(&U8G2_Display, figureColorSetted);
}

void NHDST7565_LCD::drawString(String Text, uint8_t XPos, uint8_t YPos, const uint8_t *u8g2Font)
{
 80048c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048c8:	b08f      	sub	sp, #60	; 0x3c
 80048ca:	af02      	add	r7, sp, #8
 80048cc:	60f8      	str	r0, [r7, #12]
 80048ce:	60b9      	str	r1, [r7, #8]
 80048d0:	4611      	mov	r1, r2
 80048d2:	461a      	mov	r2, r3
 80048d4:	460b      	mov	r3, r1
 80048d6:	71fb      	strb	r3, [r7, #7]
 80048d8:	4613      	mov	r3, r2
 80048da:	71bb      	strb	r3, [r7, #6]
	uint8_t NewXPos = 0, NewYPos = 0;
 80048dc:	2300      	movs	r3, #0
 80048de:	75fb      	strb	r3, [r7, #23]
 80048e0:	2300      	movs	r3, #0
 80048e2:	75bb      	strb	r3, [r7, #22]
	assignTextParams(Text, u8g2Font);
 80048e4:	f107 0318 	add.w	r3, r7, #24
 80048e8:	68b9      	ldr	r1, [r7, #8]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f009 ff9d 	bl	800e82a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80048f0:	f107 0318 	add.w	r3, r7, #24
 80048f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048f6:	4619      	mov	r1, r3
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f7ff fd9b 	bl	8004434 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 80048fe:	f107 0318 	add.w	r3, r7, #24
 8004902:	4618      	mov	r0, r3
 8004904:	f009 fe57 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	assignNewDrawCoord(XPos, YPos, NewXPos, NewYPos);
 8004908:	f107 0017 	add.w	r0, r7, #23
 800490c:	79ba      	ldrb	r2, [r7, #6]
 800490e:	79f9      	ldrb	r1, [r7, #7]
 8004910:	f107 0316 	add.w	r3, r7, #22
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	4603      	mov	r3, r0
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f7ff fdfb 	bl	8004514 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_>
//				NewYPos = setTextMiddle();
//				break;
//		}
//	}

	u8g2_DrawStr(&U8G2_Display, NewXPos, NewYPos + textToWrite.textHigh, textToWrite.text.c_str());
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8004924:	7dfd      	ldrb	r5, [r7, #23]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	7e5a      	ldrb	r2, [r3, #25]
 800492a:	7dbb      	ldrb	r3, [r7, #22]
 800492c:	4413      	add	r3, r2
 800492e:	b2de      	uxtb	r6, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4618      	mov	r0, r3
 8004934:	f009 ff62 	bl	800e7fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004938:	4603      	mov	r3, r0
 800493a:	4632      	mov	r2, r6
 800493c:	4629      	mov	r1, r5
 800493e:	4620      	mov	r0, r4
 8004940:	f7fd fae2 	bl	8001f08 <u8g2_DrawStr>
}
 8004944:	bf00      	nop
 8004946:	3734      	adds	r7, #52	; 0x34
 8004948:	46bd      	mov	sp, r7
 800494a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800494c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh>:
}


uint8_t NHDST7565_LCD::drawMenuList(uint8_t FirstItemXPos, uint8_t FirstItemYPos, uint8_t FirsListItem, uint8_t ItemSel, const char **MenuItems, uint8_t MaxItems,
		bool WithCheckBox, bool MenuSelected, bool *ItemsChecked, const uint8_t *u8g2Font)
{
 800494c:	b590      	push	{r4, r7, lr}
 800494e:	b0a3      	sub	sp, #140	; 0x8c
 8004950:	af02      	add	r7, sp, #8
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	4608      	mov	r0, r1
 8004956:	4611      	mov	r1, r2
 8004958:	461a      	mov	r2, r3
 800495a:	4603      	mov	r3, r0
 800495c:	70fb      	strb	r3, [r7, #3]
 800495e:	460b      	mov	r3, r1
 8004960:	70bb      	strb	r3, [r7, #2]
 8004962:	4613      	mov	r3, r2
 8004964:	707b      	strb	r3, [r7, #1]
	assignTextParams("", u8g2Font);
 8004966:	f107 0320 	add.w	r3, r7, #32
 800496a:	4618      	mov	r0, r3
 800496c:	f009 fcf8 	bl	800e360 <_ZNSaIcEC1Ev>
 8004970:	f107 0220 	add.w	r2, r7, #32
 8004974:	f107 0308 	add.w	r3, r7, #8
 8004978:	49a8      	ldr	r1, [pc, #672]	; (8004c1c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x2d0>)
 800497a:	4618      	mov	r0, r3
 800497c:	f009 ff88 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004980:	f107 0308 	add.w	r3, r7, #8
 8004984:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004988:	4619      	mov	r1, r3
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7ff fd52 	bl	8004434 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8004990:	f107 0308 	add.w	r3, r7, #8
 8004994:	4618      	mov	r0, r3
 8004996:	f009 fe0e 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800499a:	f107 0320 	add.w	r3, r7, #32
 800499e:	4618      	mov	r0, r3
 80049a0:	f009 fcdf 	bl	800e362 <_ZNSaIcED1Ev>
	uint8_t MaxLines = (dispParams.high - FirstItemYPos) / (textToWrite.textHigh + MENU_ITEM_INTERLINE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80049aa:	461a      	mov	r2, r3
 80049ac:	78bb      	ldrb	r3, [r7, #2]
 80049ae:	1ad2      	subs	r2, r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	7e5b      	ldrb	r3, [r3, #25]
 80049b4:	3303      	adds	r3, #3
 80049b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80049ba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint8_t NextItem = 0;
 80049be:	2300      	movs	r3, #0
 80049c0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	uint8_t MaxTexLen = 0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t FrameHigh = 0;
 80049ca:	2300      	movs	r3, #0
 80049cc:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	for(int Item = 0; Item < MaxLines; Item++)
 80049d0:	2300      	movs	r3, #0
 80049d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80049d4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80049d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80049da:	429a      	cmp	r2, r3
 80049dc:	f280 81bd 	bge.w	8004d5a <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x40e>
	{
		NextItem = FirsListItem + Item;
 80049e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049e2:	b2da      	uxtb	r2, r3
 80049e4:	787b      	ldrb	r3, [r7, #1]
 80049e6:	4413      	add	r3, r2
 80049e8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		if(NextItem >= MaxItems)
 80049ec:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 80049f0:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80049f4:	429a      	cmp	r2, r3
 80049f6:	f080 81af 	bcs.w	8004d58 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x40c>
			break;
		if(NextItem == ItemSel && MenuSelected)
 80049fa:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 80049fe:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8004a02:	429a      	cmp	r2, r3
 8004a04:	f040 810c 	bne.w	8004c20 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x2d4>
 8004a08:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 8107 	beq.w	8004c20 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x2d4>
		{
			assignTextParams(MenuItems[NextItem], u8g2Font);
 8004a12:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a1c:	4413      	add	r3, r2
 8004a1e:	681c      	ldr	r4, [r3, #0]
 8004a20:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004a24:	4618      	mov	r0, r3
 8004a26:	f009 fc9b 	bl	800e360 <_ZNSaIcEC1Ev>
 8004a2a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a32:	4621      	mov	r1, r4
 8004a34:	4618      	mov	r0, r3
 8004a36:	f009 ff2b 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a42:	4619      	mov	r1, r3
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7ff fcf5 	bl	8004434 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8004a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f009 fdb1 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004a54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f009 fc82 	bl	800e362 <_ZNSaIcED1Ev>
			u8g2_SetFontMode(&U8G2_Display, 0);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	3324      	adds	r3, #36	; 0x24
 8004a62:	2100      	movs	r1, #0
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7fd f991 	bl	8001d8c <u8g2_SetFontMode>
			u8g2_SetDrawColor(&U8G2_Display, 0);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	3324      	adds	r3, #36	; 0x24
 8004a6e:	2100      	movs	r1, #0
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7fd fcbd 	bl	80023f0 <u8g2_SetDrawColor>
			drawString(MenuItems[NextItem], FirstItemXPos, FirstItemYPos + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), u8g2Font);
 8004a76:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a80:	4413      	add	r3, r2
 8004a82:	681c      	ldr	r4, [r3, #0]
 8004a84:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f009 fc69 	bl	800e360 <_ZNSaIcEC1Ev>
 8004a8e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004a92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004a96:	4621      	mov	r1, r4
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f009 fef9 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	7e5b      	ldrb	r3, [r3, #25]
 8004aa2:	3303      	adds	r3, #3
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004aa8:	b2d2      	uxtb	r2, r2
 8004aaa:	fb02 f303 	mul.w	r3, r2, r3
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	78bb      	ldrb	r3, [r7, #2]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	b2d8      	uxtb	r0, r3
 8004ab6:	78fa      	ldrb	r2, [r7, #3]
 8004ab8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004abc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f7ff fefe 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8004aca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f009 fd71 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004ad4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f009 fc42 	bl	800e362 <_ZNSaIcED1Ev>
			u8g2_SetFontMode(&U8G2_Display, 1);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	3324      	adds	r3, #36	; 0x24
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7fd f951 	bl	8001d8c <u8g2_SetFontMode>
			u8g2_SetDrawColor(&U8G2_Display, 1);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	3324      	adds	r3, #36	; 0x24
 8004aee:	2101      	movs	r1, #1
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7fd fc7d 	bl	80023f0 <u8g2_SetDrawColor>
			if(!WithCheckBox)
 8004af6:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8004afa:	f083 0301 	eor.w	r3, r3, #1
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d033      	beq.n	8004b6c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x220>
			{
				u8g2_SetFont(&U8G2_Display, displayFonts[W_8_H_8_ICON]);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004b10:	4619      	mov	r1, r3
 8004b12:	4610      	mov	r0, r2
 8004b14:	f7fd fa96 	bl	8002044 <u8g2_SetFont>
				u8g2_DrawGlyph(&U8G2_Display, FirstItemXPos + textToWrite.textLen + 1, FirstItemYPos + textToWrite.textHigh + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 1, 0x006F);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	7e1a      	ldrb	r2, [r3, #24]
 8004b22:	78fb      	ldrb	r3, [r7, #3]
 8004b24:	4413      	add	r3, r2
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	3301      	adds	r3, #1
 8004b2a:	b2dc      	uxtb	r4, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	7e5a      	ldrb	r2, [r3, #25]
 8004b30:	78bb      	ldrb	r3, [r7, #2]
 8004b32:	4413      	add	r3, r2
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	7e5b      	ldrb	r3, [r3, #25]
 8004b3a:	3303      	adds	r3, #3
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004b40:	b2c9      	uxtb	r1, r1
 8004b42:	fb01 f303 	mul.w	r3, r1, r3
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	4413      	add	r3, r2
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	236f      	movs	r3, #111	; 0x6f
 8004b52:	4621      	mov	r1, r4
 8004b54:	f7fd f92a 	bl	8001dac <u8g2_DrawGlyph>
				u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	4619      	mov	r1, r3
 8004b64:	4610      	mov	r0, r2
 8004b66:	f7fd fa6d 	bl	8002044 <u8g2_SetFont>
			if(!WithCheckBox)
 8004b6a:	e0e7      	b.n	8004d3c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
			}
			else
			{
				if(ItemsChecked[NextItem])
 8004b6c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004b70:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004b74:	4413      	add	r3, r2
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d034      	beq.n	8004be6 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x29a>
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004b88:	3b0b      	subs	r3, #11
 8004b8a:	b2d9      	uxtb	r1, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	7e5b      	ldrb	r3, [r3, #25]
 8004b90:	3303      	adds	r3, #3
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b96:	b2d2      	uxtb	r2, r2
 8004b98:	fb02 f303 	mul.w	r3, r2, r3
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	78bb      	ldrb	r3, [r7, #2]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	2308      	movs	r3, #8
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	2308      	movs	r3, #8
 8004baa:	f7fc f9ac 	bl	8000f06 <u8g2_DrawFrame>
					u8g2_DrawBox(&U8G2_Display, dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004bba:	3b09      	subs	r3, #9
 8004bbc:	b2d9      	uxtb	r1, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	7e5b      	ldrb	r3, [r3, #25]
 8004bc2:	3303      	adds	r3, #3
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004bc8:	b2d2      	uxtb	r2, r2
 8004bca:	fb02 f303 	mul.w	r3, r2, r3
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	78bb      	ldrb	r3, [r7, #2]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	3302      	adds	r3, #2
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	2304      	movs	r3, #4
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	2304      	movs	r3, #4
 8004be0:	f7fc f95a 	bl	8000e98 <u8g2_DrawBox>
			if(!WithCheckBox)
 8004be4:	e0aa      	b.n	8004d3c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
					//					drawBox(dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4, BLACK_COLOR);
				}
				else
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004bf2:	3b0b      	subs	r3, #11
 8004bf4:	b2d9      	uxtb	r1, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	7e5b      	ldrb	r3, [r3, #25]
 8004bfa:	3303      	adds	r3, #3
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c00:	b2d2      	uxtb	r2, r2
 8004c02:	fb02 f303 	mul.w	r3, r2, r3
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	78bb      	ldrb	r3, [r7, #2]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	2308      	movs	r3, #8
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	2308      	movs	r3, #8
 8004c14:	f7fc f977 	bl	8000f06 <u8g2_DrawFrame>
			if(!WithCheckBox)
 8004c18:	e090      	b.n	8004d3c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
 8004c1a:	bf00      	nop
 8004c1c:	0800f4a8 	.word	0x0800f4a8
				}
			}
		}
		else
		{
			drawString(MenuItems[NextItem], FirstItemXPos, FirstItemYPos + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), u8g2Font);
 8004c20:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c2a:	4413      	add	r3, r2
 8004c2c:	681c      	ldr	r4, [r3, #0]
 8004c2e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004c32:	4618      	mov	r0, r3
 8004c34:	f009 fb94 	bl	800e360 <_ZNSaIcEC1Ev>
 8004c38:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8004c3c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004c40:	4621      	mov	r1, r4
 8004c42:	4618      	mov	r0, r3
 8004c44:	f009 fe24 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	7e5b      	ldrb	r3, [r3, #25]
 8004c4c:	3303      	adds	r3, #3
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	fb02 f303 	mul.w	r3, r2, r3
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	78bb      	ldrb	r3, [r7, #2]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	b2d8      	uxtb	r0, r3
 8004c60:	78fa      	ldrb	r2, [r7, #3]
 8004c62:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8004c66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7ff fe29 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8004c74:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f009 fc9c 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004c7e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004c82:	4618      	mov	r0, r3
 8004c84:	f009 fb6d 	bl	800e362 <_ZNSaIcED1Ev>
			if(WithCheckBox)
 8004c88:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d055      	beq.n	8004d3c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
			{
				if(ItemsChecked[NextItem])
 8004c90:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004c94:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004c98:	4413      	add	r3, r2
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d034      	beq.n	8004d0a <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3be>
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004cac:	3b0b      	subs	r3, #11
 8004cae:	b2d9      	uxtb	r1, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	7e5b      	ldrb	r3, [r3, #25]
 8004cb4:	3303      	adds	r3, #3
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	fb02 f303 	mul.w	r3, r2, r3
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	78bb      	ldrb	r3, [r7, #2]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	2308      	movs	r3, #8
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	2308      	movs	r3, #8
 8004cce:	f7fc f91a 	bl	8000f06 <u8g2_DrawFrame>
					u8g2_DrawBox(&U8G2_Display, dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004cde:	3b09      	subs	r3, #9
 8004ce0:	b2d9      	uxtb	r1, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	7e5b      	ldrb	r3, [r3, #25]
 8004ce6:	3303      	adds	r3, #3
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004cec:	b2d2      	uxtb	r2, r2
 8004cee:	fb02 f303 	mul.w	r3, r2, r3
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	78bb      	ldrb	r3, [r7, #2]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	3302      	adds	r3, #2
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	2304      	movs	r3, #4
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	2304      	movs	r3, #4
 8004d04:	f7fc f8c8 	bl	8000e98 <u8g2_DrawBox>
 8004d08:	e018      	b.n	8004d3c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
					//					drawBox(dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4, BLACK_COLOR);
				}
				else
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004d16:	3b0b      	subs	r3, #11
 8004d18:	b2d9      	uxtb	r1, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	7e5b      	ldrb	r3, [r3, #25]
 8004d1e:	3303      	adds	r3, #3
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	fb02 f303 	mul.w	r3, r2, r3
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	78bb      	ldrb	r3, [r7, #2]
 8004d2e:	4413      	add	r3, r2
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	2308      	movs	r3, #8
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	2308      	movs	r3, #8
 8004d38:	f7fc f8e5 	bl	8000f06 <u8g2_DrawFrame>
				}
			}
		}
		if(MaxTexLen < textToWrite.textLen)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	7e1b      	ldrb	r3, [r3, #24]
 8004d40:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d203      	bcs.n	8004d50 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x404>
			MaxTexLen = textToWrite.textLen;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	7e1b      	ldrb	r3, [r3, #24]
 8004d4c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	for(int Item = 0; Item < MaxLines; Item++)
 8004d50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d52:	3301      	adds	r3, #1
 8004d54:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d56:	e63d      	b.n	80049d4 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x88>
			break;
 8004d58:	bf00      	nop
	}
	if((textToWrite.textHigh * (MaxItems + 1)) + 2 < dispParams.high - FirstItemYPos - 1 )
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	7e5b      	ldrb	r3, [r3, #25]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8004d64:	3301      	adds	r3, #1
 8004d66:	fb03 f302 	mul.w	r3, r3, r2
 8004d6a:	1c9a      	adds	r2, r3, #2
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004d72:	4619      	mov	r1, r3
 8004d74:	78bb      	ldrb	r3, [r7, #2]
 8004d76:	1acb      	subs	r3, r1, r3
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	da0c      	bge.n	8004d98 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x44c>
		FrameHigh = (textToWrite.textHigh * (MaxItems + 1)) + 2;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	7e5b      	ldrb	r3, [r3, #25]
 8004d82:	f897 2098 	ldrb.w	r2, [r7, #152]	; 0x98
 8004d86:	3201      	adds	r2, #1
 8004d88:	b2d2      	uxtb	r2, r2
 8004d8a:	fb02 f303 	mul.w	r3, r2, r3
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	3302      	adds	r3, #2
 8004d92:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8004d96:	e008      	b.n	8004daa <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x45e>
	else
		FrameHigh = dispParams.high - FirstItemYPos - 1;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8004d9e:	78bb      	ldrb	r3, [r7, #2]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	3b01      	subs	r3, #1
 8004da6:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	if(!WithCheckBox)
 8004daa:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8004dae:	f083 0301 	eor.w	r3, r3, #1
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d015      	beq.n	8004de4 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x498>
	{
		u8g2_DrawRFrame(&U8G2_Display, FirstItemXPos - 1, FirstItemYPos - 1, MaxTexLen + 10, FrameHigh, 3);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004dbe:	78fb      	ldrb	r3, [r7, #3]
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	b2d9      	uxtb	r1, r3
 8004dc4:	78bb      	ldrb	r3, [r7, #2]
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004dce:	330a      	adds	r3, #10
 8004dd0:	b2dc      	uxtb	r4, r3
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	9301      	str	r3, [sp, #4]
 8004dd6:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	4623      	mov	r3, r4
 8004dde:	f7fc f8f3 	bl	8000fc8 <u8g2_DrawRFrame>
 8004de2:	e019      	b.n	8004e18 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x4cc>
	}
	else
	{
		u8g2_DrawRFrame(&U8G2_Display, FirstItemXPos - 1, FirstItemYPos - 1, dispParams.width - FirstItemXPos - 1, FrameHigh, 3);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004dea:	78fb      	ldrb	r3, [r7, #3]
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b2d9      	uxtb	r1, r3
 8004df0:	78bb      	ldrb	r3, [r7, #2]
 8004df2:	3b01      	subs	r3, #1
 8004df4:	b2dc      	uxtb	r4, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	2303      	movs	r3, #3
 8004e08:	9301      	str	r3, [sp, #4]
 8004e0a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	4613      	mov	r3, r2
 8004e12:	4622      	mov	r2, r4
 8004e14:	f7fc f8d8 	bl	8000fc8 <u8g2_DrawRFrame>
	}
	return MaxLines;
 8004e18:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3784      	adds	r7, #132	; 0x84
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd90      	pop	{r4, r7, pc}

08004e24 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>:

void NHDST7565_LCD::drawSymbol(uint8_t XPos, uint8_t YPos, const uint8_t *SymbolFont, uint16_t SymbolCode)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b08e      	sub	sp, #56	; 0x38
 8004e28:	af02      	add	r7, sp, #8
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	607b      	str	r3, [r7, #4]
 8004e2e:	460b      	mov	r3, r1
 8004e30:	72fb      	strb	r3, [r7, #11]
 8004e32:	4613      	mov	r3, r2
 8004e34:	72bb      	strb	r3, [r7, #10]
	uint8_t NewXPos = 0, NewYPos = 0;
 8004e36:	2300      	movs	r3, #0
 8004e38:	74fb      	strb	r3, [r7, #19]
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	74bb      	strb	r3, [r7, #18]
	assignTextParams("", SymbolFont);
 8004e3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e42:	4618      	mov	r0, r3
 8004e44:	f009 fa8c 	bl	800e360 <_ZNSaIcEC1Ev>
 8004e48:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004e4c:	f107 0314 	add.w	r3, r7, #20
 8004e50:	4915      	ldr	r1, [pc, #84]	; (8004ea8 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht+0x84>)
 8004e52:	4618      	mov	r0, r3
 8004e54:	f009 fd1c 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004e58:	f107 0314 	add.w	r3, r7, #20
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	4619      	mov	r1, r3
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f7ff fae7 	bl	8004434 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8004e66:	f107 0314 	add.w	r3, r7, #20
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f009 fba3 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004e70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e74:	4618      	mov	r0, r3
 8004e76:	f009 fa74 	bl	800e362 <_ZNSaIcED1Ev>
	assignNewDrawCoord(XPos, YPos, NewXPos, NewYPos);
 8004e7a:	f107 0013 	add.w	r0, r7, #19
 8004e7e:	7aba      	ldrb	r2, [r7, #10]
 8004e80:	7af9      	ldrb	r1, [r7, #11]
 8004e82:	f107 0312 	add.w	r3, r7, #18
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	4603      	mov	r3, r0
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f7ff fb42 	bl	8004514 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_>
	u8g2_DrawGlyph(&U8G2_Display, NewXPos, NewYPos, SymbolCode);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004e96:	7cf9      	ldrb	r1, [r7, #19]
 8004e98:	7cba      	ldrb	r2, [r7, #18]
 8004e9a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004e9c:	f7fc ff86 	bl	8001dac <u8g2_DrawGlyph>
}
 8004ea0:	bf00      	nop
 8004ea2:	3730      	adds	r7, #48	; 0x30
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	0800f4a8 	.word	0x0800f4a8

08004eac <_ZN13NHDST7565_LCD12drawTimeDateENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>:


void NHDST7565_LCD::drawTimeDate(String Time, String Date)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b092      	sub	sp, #72	; 0x48
 8004eb0:	af02      	add	r7, sp, #8
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
	drawString(Time, LEFT_POS, TOP_POS, displayFonts[W_3_H_6]);
 8004eb8:	f107 0310 	add.w	r3, r7, #16
 8004ebc:	68b9      	ldr	r1, [r7, #8]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f009 fcb3 	bl	800e82a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004eca:	f107 0110 	add.w	r1, r7, #16
 8004ece:	9300      	str	r3, [sp, #0]
 8004ed0:	2346      	movs	r3, #70	; 0x46
 8004ed2:	2282      	movs	r2, #130	; 0x82
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f7ff fcf6 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8004eda:	f107 0310 	add.w	r3, r7, #16
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f009 fb69 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	drawString(Date, RIGHT_POS, TOP_POS, displayFonts[W_3_H_6]);
 8004ee4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ee8:	6879      	ldr	r1, [r7, #4]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f009 fc9d 	bl	800e82a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ef6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004efa:	9300      	str	r3, [sp, #0]
 8004efc:	2346      	movs	r3, #70	; 0x46
 8004efe:	2284      	movs	r2, #132	; 0x84
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f7ff fce0 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8004f06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f009 fb53 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8004f10:	bf00      	nop
 8004f12:	3740      	adds	r7, #64	; 0x40
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>:

void NHDST7565_LCD::drawFullScreenPopUp(String Text, uint16_t Delay)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b08c      	sub	sp, #48	; 0x30
 8004f1c:	af02      	add	r7, sp, #8
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	4613      	mov	r3, r2
 8004f24:	80fb      	strh	r3, [r7, #6]
	clearFrameBuffer();
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f7ff fca5 	bl	8004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
	u8g2_DrawRFrame(&U8G2_Display, 1, 1, dispParams.width - 1, dispParams.high - 1, 2);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	b2d9      	uxtb	r1, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004f42:	3b01      	subs	r3, #1
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2202      	movs	r2, #2
 8004f48:	9201      	str	r2, [sp, #4]
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	2201      	movs	r2, #1
 8004f50:	2101      	movs	r1, #1
 8004f52:	f7fc f839 	bl	8000fc8 <u8g2_DrawRFrame>
	drawString(Text, CENTER_POS, MIDDLE_POS, displayFonts[W_6_H_13_B]);
 8004f56:	f107 0310 	add.w	r3, r7, #16
 8004f5a:	68b9      	ldr	r1, [r7, #8]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f009 fc64 	bl	800e82a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004f68:	f107 0110 	add.w	r1, r7, #16
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	2347      	movs	r3, #71	; 0x47
 8004f70:	2283      	movs	r2, #131	; 0x83
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f7ff fca7 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8004f78:	f107 0310 	add.w	r3, r7, #16
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f009 fb1a 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	sendFrameBuffer();
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f7ff fc84 	bl	8004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
	HAL_Delay(Delay);
 8004f88:	88fb      	ldrh	r3, [r7, #6]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f004 ff06 	bl	8009d9c <HAL_Delay>
}
 8004f90:	bf00      	nop
 8004f92:	3728      	adds	r7, #40	; 0x28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <_ZStneIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
    { return !(__lhs == __rhs); }
 8004fa2:	6839      	ldr	r1, [r7, #0]
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 f808 	bl	8004fba <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8004faa:	4603      	mov	r3, r0
 8004fac:	f083 0301 	eor.w	r3, r3, #1
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b082      	sub	sp, #8
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	6039      	str	r1, [r7, #0]
    { return __lhs.compare(__rhs) == 0; }
 8004fc4:	6839      	ldr	r1, [r7, #0]
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f009 fc1a 	bl	800e800 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	bf0c      	ite	eq
 8004fd2:	2301      	moveq	r3, #1
 8004fd4:	2300      	movne	r3, #0
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <_ZN12STM32_EEPROMC1Ev>:

void STM32_EEPROM::saveValue(double NewVal)
{
}

STM32_EEPROM::STM32_EEPROM()
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	605a      	str	r2, [r3, #4]
{
	eepromArray = new uint32_t[MAX_DIM_EEPROM_ARRAY];
 8004fee:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004ff2:	f009 f997 	bl	800e324 <_Znaj>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	601a      	str	r2, [r3, #0]
}
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4618      	mov	r0, r3
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <_ZN6BUTTON7readPinEv>:

#include "Keyboard.h"


bool BUTTON::readPin()
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
	bool State = false;
 8005010:	2300      	movs	r3, #0
 8005012:	73fb      	strb	r3, [r7, #15]
	if(HAL_GPIO_ReadPin(buttonPort, buttonPin) == (GPIO_PinState)LOW)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	889b      	ldrh	r3, [r3, #4]
 800501c:	4619      	mov	r1, r3
 800501e:	4610      	mov	r0, r2
 8005020:	f005 fe4a 	bl	800acb8 <HAL_GPIO_ReadPin>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	bf0c      	ite	eq
 800502a:	2301      	moveq	r3, #1
 800502c:	2300      	movne	r3, #0
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b00      	cmp	r3, #0
 8005032:	d001      	beq.n	8005038 <_ZN6BUTTON7readPinEv+0x30>
	{
		State = true;
 8005034:	2301      	movs	r3, #1
 8005036:	73fb      	strb	r3, [r7, #15]
	}
	return State;
 8005038:	7bfb      	ldrb	r3, [r7, #15]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>:

BUTTON::BUTTON(GPIO_TypeDef *ButtonPort, uint16_t ButtonPin, uint16_t LongPressDelay)
 8005042:	b480      	push	{r7}
 8005044:	b085      	sub	sp, #20
 8005046:	af00      	add	r7, sp, #0
 8005048:	60f8      	str	r0, [r7, #12]
 800504a:	60b9      	str	r1, [r7, #8]
 800504c:	4611      	mov	r1, r2
 800504e:	461a      	mov	r2, r3
 8005050:	460b      	mov	r3, r1
 8005052:	80fb      	strh	r3, [r7, #6]
 8005054:	4613      	mov	r3, r2
 8005056:	80bb      	strh	r3, [r7, #4]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	609a      	str	r2, [r3, #8]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	819a      	strh	r2, [r3, #12]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	739a      	strb	r2, [r3, #14]
{
	buttonPort = ButtonPort;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	601a      	str	r2, [r3, #0]
	buttonPin = ButtonPin;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	88fa      	ldrh	r2, [r7, #6]
 8005074:	809a      	strh	r2, [r3, #4]
	delay = LongPressDelay;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	88ba      	ldrh	r2, [r7, #4]
 800507a:	819a      	strh	r2, [r3, #12]
}
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4618      	mov	r0, r3
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	bc80      	pop	{r7}
 8005086:	4770      	bx	lr

08005088 <_ZN6BUTTON11checkButtonEv>:

uint8_t BUTTON::checkButton()
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
	uint8_t Status = NO_PRESS;
 8005090:	2302      	movs	r3, #2
 8005092:	73fb      	strb	r3, [r7, #15]
	bool LongPressed = false;
 8005094:	2300      	movs	r3, #0
 8005096:	73bb      	strb	r3, [r7, #14]
	bool ButtonState = readPin();
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7ff ffb5 	bl	8005008 <_ZN6BUTTON7readPinEv>
 800509e:	4603      	mov	r3, r0
 80050a0:	737b      	strb	r3, [r7, #13]
	if(ButtonState)
 80050a2:	7b7b      	ldrb	r3, [r7, #13]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d03c      	beq.n	8005122 <_ZN6BUTTON11checkButtonEv+0x9a>
	{
		longPressDelay = HAL_GetTick();
 80050a8:	f004 fe6e 	bl	8009d88 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	609a      	str	r2, [r3, #8]
		while(ButtonState)
 80050b2:	7b7b      	ldrb	r3, [r7, #13]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d015      	beq.n	80050e4 <_ZN6BUTTON11checkButtonEv+0x5c>
		{
			ButtonState = readPin();
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7ff ffa5 	bl	8005008 <_ZN6BUTTON7readPinEv>
 80050be:	4603      	mov	r3, r0
 80050c0:	737b      	strb	r3, [r7, #13]
			if(HAL_GetTick() - longPressDelay > delay)
 80050c2:	f004 fe61 	bl	8009d88 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	8992      	ldrh	r2, [r2, #12]
 80050d2:	4293      	cmp	r3, r2
 80050d4:	bf8c      	ite	hi
 80050d6:	2301      	movhi	r3, #1
 80050d8:	2300      	movls	r3, #0
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d0e8      	beq.n	80050b2 <_ZN6BUTTON11checkButtonEv+0x2a>
			{
				LongPressed = true;
 80050e0:	2301      	movs	r3, #1
 80050e2:	73bb      	strb	r3, [r7, #14]
				break;
			}
		}
		if(!LongPressed)
 80050e4:	7bbb      	ldrb	r3, [r7, #14]
 80050e6:	f083 0301 	eor.w	r3, r3, #1
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00d      	beq.n	800510c <_ZN6BUTTON11checkButtonEv+0x84>
		{
			if(!wasLongPressed)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	7b9b      	ldrb	r3, [r3, #14]
 80050f4:	f083 0301 	eor.w	r3, r3, #1
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d002      	beq.n	8005104 <_ZN6BUTTON11checkButtonEv+0x7c>
				Status = PRESSED;
 80050fe:	2300      	movs	r3, #0
 8005100:	73fb      	strb	r3, [r7, #15]
 8005102:	e008      	b.n	8005116 <_ZN6BUTTON11checkButtonEv+0x8e>
			else
				wasLongPressed = false;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	739a      	strb	r2, [r3, #14]
 800510a:	e004      	b.n	8005116 <_ZN6BUTTON11checkButtonEv+0x8e>
		}
		else
		{
			Status = LONG_PRESSED;
 800510c:	2301      	movs	r3, #1
 800510e:	73fb      	strb	r3, [r7, #15]
			wasLongPressed = true;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	739a      	strb	r2, [r3, #14]
		}
		longPressDelay = 0;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	609a      	str	r2, [r3, #8]
		HAL_Delay(10);
 800511c:	200a      	movs	r0, #10
 800511e:	f004 fe3d 	bl	8009d9c <HAL_Delay>
	}
	return Status;
 8005122:	7bfb      	ldrb	r3, [r7, #15]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <_ZN8DryerKeyC1Ev>:

DryerKey::DryerKey()
 800512c:	b590      	push	{r4, r7, lr}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
{
	keys[0] = new BUTTON(UpButton_GPIO_Port, UpButton_Pin, 250);
 8005134:	2010      	movs	r0, #16
 8005136:	f009 f8f7 	bl	800e328 <_Znwj>
 800513a:	4603      	mov	r3, r0
 800513c:	461c      	mov	r4, r3
 800513e:	23fa      	movs	r3, #250	; 0xfa
 8005140:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005144:	491b      	ldr	r1, [pc, #108]	; (80051b4 <_ZN8DryerKeyC1Ev+0x88>)
 8005146:	4620      	mov	r0, r4
 8005148:	f7ff ff7b 	bl	8005042 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	601c      	str	r4, [r3, #0]
	keys[1] = new BUTTON(DownButton_GPIO_Port, DownButton_Pin, 250);
 8005150:	2010      	movs	r0, #16
 8005152:	f009 f8e9 	bl	800e328 <_Znwj>
 8005156:	4603      	mov	r3, r0
 8005158:	461c      	mov	r4, r3
 800515a:	23fa      	movs	r3, #250	; 0xfa
 800515c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005160:	4914      	ldr	r1, [pc, #80]	; (80051b4 <_ZN8DryerKeyC1Ev+0x88>)
 8005162:	4620      	mov	r0, r4
 8005164:	f7ff ff6d 	bl	8005042 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	605c      	str	r4, [r3, #4]
	keys[2] = new BUTTON(LeftButton_GPIO_Port, LeftButton_Pin, 500);
 800516c:	2010      	movs	r0, #16
 800516e:	f009 f8db 	bl	800e328 <_Znwj>
 8005172:	4603      	mov	r3, r0
 8005174:	461c      	mov	r4, r3
 8005176:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800517a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800517e:	490d      	ldr	r1, [pc, #52]	; (80051b4 <_ZN8DryerKeyC1Ev+0x88>)
 8005180:	4620      	mov	r0, r4
 8005182:	f7ff ff5e 	bl	8005042 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	609c      	str	r4, [r3, #8]
	keys[3] = new BUTTON(OkButton_GPIO_Port, OkButton_Pin, 500);
 800518a:	2010      	movs	r0, #16
 800518c:	f009 f8cc 	bl	800e328 <_Znwj>
 8005190:	4603      	mov	r3, r0
 8005192:	461c      	mov	r4, r3
 8005194:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005198:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800519c:	4905      	ldr	r1, [pc, #20]	; (80051b4 <_ZN8DryerKeyC1Ev+0x88>)
 800519e:	4620      	mov	r0, r4
 80051a0:	f7ff ff4f 	bl	8005042 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	60dc      	str	r4, [r3, #12]
}
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4618      	mov	r0, r3
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd90      	pop	{r4, r7, pc}
 80051b2:	bf00      	nop
 80051b4:	40010c00 	.word	0x40010c00

080051b8 <_ZN8DryerKey8checkKeyEv>:

uint8_t DryerKey::checkKey()
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
	uint8_t KeyPressed = NO_KEY;
 80051c0:	2308      	movs	r3, #8
 80051c2:	75fb      	strb	r3, [r7, #23]
	for(int Key = 0; Key < MAX_KEYS; Key++)
 80051c4:	2300      	movs	r3, #0
 80051c6:	613b      	str	r3, [r7, #16]
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	2b03      	cmp	r3, #3
 80051cc:	dc1d      	bgt.n	800520a <_ZN8DryerKey8checkKeyEv+0x52>
	{
		uint8_t Status = keys[Key]->checkButton();
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7ff ff56 	bl	8005088 <_ZN6BUTTON11checkButtonEv>
 80051dc:	4603      	mov	r3, r0
 80051de:	73fb      	strb	r3, [r7, #15]
		if(Status == PRESSED)
 80051e0:	7bfb      	ldrb	r3, [r7, #15]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d102      	bne.n	80051ec <_ZN8DryerKey8checkKeyEv+0x34>
		{
			KeyPressed = Key;
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	75fb      	strb	r3, [r7, #23]
 80051ea:	e006      	b.n	80051fa <_ZN8DryerKey8checkKeyEv+0x42>
		}
		else if(Status == LONG_PRESSED)
 80051ec:	7bfb      	ldrb	r3, [r7, #15]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d103      	bne.n	80051fa <_ZN8DryerKey8checkKeyEv+0x42>
		{
			KeyPressed = Key + MAX_KEYS;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	3304      	adds	r3, #4
 80051f8:	75fb      	strb	r3, [r7, #23]
		}
		if(Status != NO_PRESS)
 80051fa:	7bfb      	ldrb	r3, [r7, #15]
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d103      	bne.n	8005208 <_ZN8DryerKey8checkKeyEv+0x50>
	for(int Key = 0; Key < MAX_KEYS; Key++)
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	3301      	adds	r3, #1
 8005204:	613b      	str	r3, [r7, #16]
 8005206:	e7df      	b.n	80051c8 <_ZN8DryerKey8checkKeyEv+0x10>
		{
			break;
 8005208:	bf00      	nop
		}
	}
	return KeyPressed;
 800520a:	7dfb      	ldrb	r3, [r7, #23]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3718      	adds	r7, #24
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <_ZN4RELE6setPinE9PIN_STATE>:
 */

#include "RELE.h"

void RELE::setPin(PIN_STATE State)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	460b      	mov	r3, r1
 800521e:	70fb      	strb	r3, [r7, #3]
	if(State != LOW && State != HIGH)
 8005220:	78fb      	ldrb	r3, [r7, #3]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d006      	beq.n	8005234 <_ZN4RELE6setPinE9PIN_STATE+0x20>
 8005226:	78fb      	ldrb	r3, [r7, #3]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d003      	beq.n	8005234 <_ZN4RELE6setPinE9PIN_STATE+0x20>
	{
		actualState = LOW;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	719a      	strb	r2, [r3, #6]
 8005232:	e007      	b.n	8005244 <_ZN4RELE6setPinE9PIN_STATE+0x30>
	}
	else
	{
		if(actualState != State)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	799b      	ldrb	r3, [r3, #6]
 8005238:	78fa      	ldrb	r2, [r7, #3]
 800523a:	429a      	cmp	r2, r3
 800523c:	d002      	beq.n	8005244 <_ZN4RELE6setPinE9PIN_STATE+0x30>
		{
			actualState = State;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	78fa      	ldrb	r2, [r7, #3]
 8005242:	719a      	strb	r2, [r3, #6]
		}
	}
	HAL_GPIO_WritePin(relePort, relePin, (GPIO_PinState)actualState);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6818      	ldr	r0, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	8899      	ldrh	r1, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	799b      	ldrb	r3, [r3, #6]
 8005250:	461a      	mov	r2, r3
 8005252:	f005 fd57 	bl	800ad04 <HAL_GPIO_WritePin>
}
 8005256:	bf00      	nop
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>:




RELE::RELE(GPIO_TypeDef *RelePort, uint16_t RelePin, PIN_STATE InitialState)
 800525e:	b480      	push	{r7}
 8005260:	b085      	sub	sp, #20
 8005262:	af00      	add	r7, sp, #0
 8005264:	60f8      	str	r0, [r7, #12]
 8005266:	60b9      	str	r1, [r7, #8]
 8005268:	4611      	mov	r1, r2
 800526a:	461a      	mov	r2, r3
 800526c:	460b      	mov	r3, r1
 800526e:	80fb      	strh	r3, [r7, #6]
 8005270:	4613      	mov	r3, r2
 8005272:	717b      	strb	r3, [r7, #5]
{
	relePort = RelePort;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	601a      	str	r2, [r3, #0]
	relePin = RelePin;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	88fa      	ldrh	r2, [r7, #6]
 800527e:	809a      	strh	r2, [r3, #4]
	actualState = InitialState;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	797a      	ldrb	r2, [r7, #5]
 8005284:	719a      	strb	r2, [r3, #6]

}
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	4618      	mov	r0, r3
 800528a:	3714      	adds	r7, #20
 800528c:	46bd      	mov	sp, r7
 800528e:	bc80      	pop	{r7}
 8005290:	4770      	bx	lr

08005292 <_ZN4RELE8setStateE9PIN_STATE>:

void RELE::setState(PIN_STATE NewState)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b082      	sub	sp, #8
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
 800529a:	460b      	mov	r3, r1
 800529c:	70fb      	strb	r3, [r7, #3]
	setPin(NewState);
 800529e:	78fb      	ldrb	r3, [r7, #3]
 80052a0:	4619      	mov	r1, r3
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7ff ffb6 	bl	8005214 <_ZN4RELE6setPinE9PIN_STATE>
}
 80052a8:	bf00      	nop
 80052aa:	3708      	adds	r7, #8
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <_ZN11SerialDebugC1Ev>:
	uint16_t BufferLen = serialBuffer.size();
	HAL_UART_Transmit(&huart1, (uint8_t *)serialBuffer.c_str(), BufferLen, SEND_TIMEOUT);
}


SerialDebug::SerialDebug()
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f009 f95a 	bl	800e574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2020 	strb.w	r2, [r3, #32]
{
//	HAL_UART_Receive_IT(&huart1, rxBuffer, RECEIVE_BUFFER_LEN);
}
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4618      	mov	r0, r3
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80052d2:	b480      	push	{r7}
 80052d4:	b083      	sub	sp, #12
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
 80052da:	6039      	str	r1, [r7, #0]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	4618      	mov	r0, r3
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bc80      	pop	{r7}
 80052e6:	4770      	bx	lr

080052e8 <_ZNSt7__cxx119to_stringEm>:
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),
					   "%ld", __val); }

  inline string
  to_string(unsigned long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af02      	add	r7, sp, #8
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
					   4 * sizeof(unsigned long),
					   "%lu", __val); }
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	4b04      	ldr	r3, [pc, #16]	; (800530c <_ZNSt7__cxx119to_stringEm+0x24>)
 80052fa:	2210      	movs	r2, #16
 80052fc:	4904      	ldr	r1, [pc, #16]	; (8005310 <_ZNSt7__cxx119to_stringEm+0x28>)
 80052fe:	f7fe fddd 	bl	8003ebc <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	0800f4b8 	.word	0x0800f4b8
 8005310:	0800ed89 	.word	0x0800ed89

08005314 <_ZNSt7__cxx119to_stringEf>:
					   4 * sizeof(unsigned long long),
					   "%llu", __val); }

  inline string
  to_string(float __val)
  {
 8005314:	b590      	push	{r4, r7, lr}
 8005316:	b087      	sub	sp, #28
 8005318:	af02      	add	r7, sp, #8
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
    const int __n = 
 800531e:	233a      	movs	r3, #58	; 0x3a
 8005320:	60fb      	str	r3, [r7, #12]
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
					   "%f", __val);
 8005322:	6838      	ldr	r0, [r7, #0]
 8005324:	f7fb f880 	bl	8000428 <__aeabi_f2d>
 8005328:	4603      	mov	r3, r0
 800532a:	460c      	mov	r4, r1
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	e9cd 3400 	strd	r3, r4, [sp]
 8005332:	4b04      	ldr	r3, [pc, #16]	; (8005344 <_ZNSt7__cxx119to_stringEf+0x30>)
 8005334:	223a      	movs	r2, #58	; 0x3a
 8005336:	4904      	ldr	r1, [pc, #16]	; (8005348 <_ZNSt7__cxx119to_stringEf+0x34>)
 8005338:	f7fe fdc0 	bl	8003ebc <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
  }
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	3714      	adds	r7, #20
 8005340:	46bd      	mov	sp, r7
 8005342:	bd90      	pop	{r4, r7, pc}
 8005344:	0800f4bc 	.word	0x0800f4bc
 8005348:	0800ed89 	.word	0x0800ed89

0800534c <_ZN13THERMO_SENSORC1Ev>:
#include <string>

typedef std::string String;


class THERMO_SENSOR
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2020 	strb.w	r2, [r3, #32]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4618      	mov	r0, r3
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	bc80      	pop	{r7}
 8005366:	4770      	bx	lr

08005368 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>:
		bool withChebox;
		bool *itemsChecked;
		void *paramAssociated;
		uint8_t paramType;
		bool menuSelected;
	}MENU_STRUCTURE;
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4618      	mov	r0, r3
 8005374:	f009 f8fe 	bl	800e574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4618      	mov	r0, r3
 800537c:	3708      	adds	r7, #8
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
	...

08005384 <_ZN10SmartDryer12DRYER_PARAMSC1Ev>:
	}DRYER_PARAMS;
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	701a      	strb	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	705a      	strb	r2, [r3, #1]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	709a      	strb	r2, [r3, #2]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a03      	ldr	r2, [pc, #12]	; (80053b0 <_ZN10SmartDryer12DRYER_PARAMSC1Ev+0x2c>)
 80053a2:	605a      	str	r2, [r3, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4618      	mov	r0, r3
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bc80      	pop	{r7}
 80053ae:	4770      	bx	lr
 80053b0:	41f00000 	.word	0x41f00000

080053b4 <_ZN10SmartDryerC1Ev>:
		"Programma 3",
};



SmartDryer::SmartDryer()
 80053b4:	b590      	push	{r4, r7, lr}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	3344      	adds	r3, #68	; 0x44
 80053c8:	223c      	movs	r2, #60	; 0x3c
 80053ca:	2100      	movs	r1, #0
 80053cc:	4618      	mov	r0, r3
 80053ce:	f009 fbac 	bl	800eb2a <memset>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2202      	movs	r2, #2
 80053d6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	338c      	adds	r3, #140	; 0x8c
 80053de:	4618      	mov	r0, r3
 80053e0:	f003 fa82 	bl	80088e8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
{
	display = new NHDST7565_LCD(NHDST7565_LCD::LANDSCAPE_2);
 80053fc:	20c8      	movs	r0, #200	; 0xc8
 80053fe:	f008 ff93 	bl	800e328 <_Znwj>
 8005402:	4603      	mov	r3, r0
 8005404:	461c      	mov	r4, r3
 8005406:	2101      	movs	r1, #1
 8005408:	4620      	mov	r0, r4
 800540a:	f7fe ffc3 	bl	8004394 <_ZN13NHDST7565_LCDC1Eh>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	601c      	str	r4, [r3, #0]
	keyboard = new DryerKey();
 8005412:	2010      	movs	r0, #16
 8005414:	f008 ff88 	bl	800e328 <_Znwj>
 8005418:	4603      	mov	r3, r0
 800541a:	461c      	mov	r4, r3
 800541c:	4620      	mov	r0, r4
 800541e:	f7ff fe85 	bl	800512c <_ZN8DryerKeyC1Ev>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	609c      	str	r4, [r3, #8]
	tempSens = new THERMO_SENSOR();
 8005426:	2021      	movs	r0, #33	; 0x21
 8005428:	f008 ff7e 	bl	800e328 <_Znwj>
 800542c:	4603      	mov	r3, r0
 800542e:	461c      	mov	r4, r3
 8005430:	4620      	mov	r0, r4
 8005432:	2321      	movs	r3, #33	; 0x21
 8005434:	461a      	mov	r2, r3
 8005436:	2100      	movs	r1, #0
 8005438:	f009 fb77 	bl	800eb2a <memset>
 800543c:	4620      	mov	r0, r4
 800543e:	f7ff ff85 	bl	800534c <_ZN13THERMO_SENSORC1Ev>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	60dc      	str	r4, [r3, #12]
	fanCtrl = new RELE(FanCtrl_GPIO_Port, FanCtrl_Pin, LOW);
 8005446:	2008      	movs	r0, #8
 8005448:	f008 ff6e 	bl	800e328 <_Znwj>
 800544c:	4603      	mov	r3, r0
 800544e:	461c      	mov	r4, r3
 8005450:	2300      	movs	r3, #0
 8005452:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005456:	4987      	ldr	r1, [pc, #540]	; (8005674 <_ZN10SmartDryerC1Ev+0x2c0>)
 8005458:	4620      	mov	r0, r4
 800545a:	f7ff ff00 	bl	800525e <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	611c      	str	r4, [r3, #16]
	thermoCtrl = new RELE(ThermoCtrl_GPIO_Port, ThermoCtrl_Pin, LOW);
 8005462:	2008      	movs	r0, #8
 8005464:	f008 ff60 	bl	800e328 <_Znwj>
 8005468:	4603      	mov	r3, r0
 800546a:	461c      	mov	r4, r3
 800546c:	2300      	movs	r3, #0
 800546e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005472:	4980      	ldr	r1, [pc, #512]	; (8005674 <_ZN10SmartDryerC1Ev+0x2c0>)
 8005474:	4620      	mov	r0, r4
 8005476:	f7ff fef2 	bl	800525e <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	615c      	str	r4, [r3, #20]

	memory = new STM32_EEPROM();
 800547e:	2008      	movs	r0, #8
 8005480:	f008 ff52 	bl	800e328 <_Znwj>
 8005484:	4603      	mov	r3, r0
 8005486:	461c      	mov	r4, r3
 8005488:	4620      	mov	r0, r4
 800548a:	f7ff fda9 	bl	8004fe0 <_ZN12STM32_EEPROMC1Ev>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	619c      	str	r4, [r3, #24]

	getTempTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8005492:	2014      	movs	r0, #20
 8005494:	f008 ff48 	bl	800e328 <_Znwj>
 8005498:	4603      	mov	r3, r0
 800549a:	461c      	mov	r4, r3
 800549c:	2100      	movs	r1, #0
 800549e:	4620      	mov	r0, r4
 80054a0:	f7fd fedd 	bl	800325e <_ZN11ChronoTimerC1Eh>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	61dc      	str	r4, [r3, #28]

	blinkRedLedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 80054a8:	2014      	movs	r0, #20
 80054aa:	f008 ff3d 	bl	800e328 <_Znwj>
 80054ae:	4603      	mov	r3, r0
 80054b0:	461c      	mov	r4, r3
 80054b2:	2100      	movs	r1, #0
 80054b4:	4620      	mov	r0, r4
 80054b6:	f7fd fed2 	bl	800325e <_ZN11ChronoTimerC1Eh>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	621c      	str	r4, [r3, #32]
	blinkGreenLedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 80054be:	2014      	movs	r0, #20
 80054c0:	f008 ff32 	bl	800e328 <_Znwj>
 80054c4:	4603      	mov	r3, r0
 80054c6:	461c      	mov	r4, r3
 80054c8:	2100      	movs	r1, #0
 80054ca:	4620      	mov	r0, r4
 80054cc:	f7fd fec7 	bl	800325e <_ZN11ChronoTimerC1Eh>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	625c      	str	r4, [r3, #36]	; 0x24
	takeTimeTimer = new ChronoTimer(ChronoTimer::MILLIS);
 80054d4:	2014      	movs	r0, #20
 80054d6:	f008 ff27 	bl	800e328 <_Znwj>
 80054da:	4603      	mov	r3, r0
 80054dc:	461c      	mov	r4, r3
 80054de:	2100      	movs	r1, #0
 80054e0:	4620      	mov	r0, r4
 80054e2:	f7fd febc 	bl	800325e <_ZN11ChronoTimerC1Eh>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	629c      	str	r4, [r3, #40]	; 0x28
	showHelpMessageTimer = new ChronoTimer(ChronoTimer::SECONDS);
 80054ea:	2014      	movs	r0, #20
 80054ec:	f008 ff1c 	bl	800e328 <_Znwj>
 80054f0:	4603      	mov	r3, r0
 80054f2:	461c      	mov	r4, r3
 80054f4:	2101      	movs	r1, #1
 80054f6:	4620      	mov	r0, r4
 80054f8:	f7fd feb1 	bl	800325e <_ZN11ChronoTimerC1Eh>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	62dc      	str	r4, [r3, #44]	; 0x2c
	programStartedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8005500:	2014      	movs	r0, #20
 8005502:	f008 ff11 	bl	800e328 <_Znwj>
 8005506:	4603      	mov	r3, r0
 8005508:	461c      	mov	r4, r3
 800550a:	2100      	movs	r1, #0
 800550c:	4620      	mov	r0, r4
 800550e:	f7fd fea6 	bl	800325e <_ZN11ChronoTimerC1Eh>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	631c      	str	r4, [r3, #48]	; 0x30

	testTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8005516:	2014      	movs	r0, #20
 8005518:	f008 ff06 	bl	800e328 <_Znwj>
 800551c:	4603      	mov	r3, r0
 800551e:	461c      	mov	r4, r3
 8005520:	2100      	movs	r1, #0
 8005522:	4620      	mov	r0, r4
 8005524:	f7fd fe9b 	bl	800325e <_ZN11ChronoTimerC1Eh>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	635c      	str	r4, [r3, #52]	; 0x34

	dbgDryer = new SerialDebug();
 800552c:	2024      	movs	r0, #36	; 0x24
 800552e:	f008 fefb 	bl	800e328 <_Znwj>
 8005532:	4603      	mov	r3, r0
 8005534:	461c      	mov	r4, r3
 8005536:	4620      	mov	r0, r4
 8005538:	f7ff feba 	bl	80052b0 <_ZN11SerialDebugC1Ev>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	639c      	str	r4, [r3, #56]	; 0x38

	clock = new DS1307_RTC();
 8005540:	2021      	movs	r0, #33	; 0x21
 8005542:	f008 fef1 	bl	800e328 <_Znwj>
 8005546:	4603      	mov	r3, r0
 8005548:	461c      	mov	r4, r3
 800554a:	4620      	mov	r0, r4
 800554c:	f7fd ffc6 	bl	80034dc <_ZN10DS1307_RTCC1Ev>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	605c      	str	r4, [r3, #4]

	mainMenu = new MENU_STRUCTURE();
 8005554:	2038      	movs	r0, #56	; 0x38
 8005556:	f008 fee7 	bl	800e328 <_Znwj>
 800555a:	4603      	mov	r3, r0
 800555c:	461c      	mov	r4, r3
 800555e:	4620      	mov	r0, r4
 8005560:	2338      	movs	r3, #56	; 0x38
 8005562:	461a      	mov	r2, r3
 8005564:	2100      	movs	r1, #0
 8005566:	f009 fae0 	bl	800eb2a <memset>
 800556a:	4620      	mov	r0, r4
 800556c:	f7ff fefc 	bl	8005368 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
	thermoMenuCtrl = new MENU_STRUCTURE();
 8005576:	2038      	movs	r0, #56	; 0x38
 8005578:	f008 fed6 	bl	800e328 <_Znwj>
 800557c:	4603      	mov	r3, r0
 800557e:	461c      	mov	r4, r3
 8005580:	4620      	mov	r0, r4
 8005582:	2338      	movs	r3, #56	; 0x38
 8005584:	461a      	mov	r2, r3
 8005586:	2100      	movs	r1, #0
 8005588:	f009 facf 	bl	800eb2a <memset>
 800558c:	4620      	mov	r0, r4
 800558e:	f7ff feeb 	bl	8005368 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
	fanMenuCtrl = new MENU_STRUCTURE();
 8005598:	2038      	movs	r0, #56	; 0x38
 800559a:	f008 fec5 	bl	800e328 <_Znwj>
 800559e:	4603      	mov	r3, r0
 80055a0:	461c      	mov	r4, r3
 80055a2:	4620      	mov	r0, r4
 80055a4:	2338      	movs	r3, #56	; 0x38
 80055a6:	461a      	mov	r2, r3
 80055a8:	2100      	movs	r1, #0
 80055aa:	f009 fabe 	bl	800eb2a <memset>
 80055ae:	4620      	mov	r0, r4
 80055b0:	f7ff feda 	bl	8005368 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
	tempMenuCtrl = new MENU_STRUCTURE();
 80055ba:	2038      	movs	r0, #56	; 0x38
 80055bc:	f008 feb4 	bl	800e328 <_Znwj>
 80055c0:	4603      	mov	r3, r0
 80055c2:	461c      	mov	r4, r3
 80055c4:	4620      	mov	r0, r4
 80055c6:	2338      	movs	r3, #56	; 0x38
 80055c8:	461a      	mov	r2, r3
 80055ca:	2100      	movs	r1, #0
 80055cc:	f009 faad 	bl	800eb2a <memset>
 80055d0:	4620      	mov	r0, r4
 80055d2:	f7ff fec9 	bl	8005368 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
	startDryerMenu = new MENU_STRUCTURE();
 80055dc:	2038      	movs	r0, #56	; 0x38
 80055de:	f008 fea3 	bl	800e328 <_Znwj>
 80055e2:	4603      	mov	r3, r0
 80055e4:	461c      	mov	r4, r3
 80055e6:	4620      	mov	r0, r4
 80055e8:	2338      	movs	r3, #56	; 0x38
 80055ea:	461a      	mov	r2, r3
 80055ec:	2100      	movs	r1, #0
 80055ee:	f009 fa9c 	bl	800eb2a <memset>
 80055f2:	4620      	mov	r0, r4
 80055f4:	f7ff feb8 	bl	8005368 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
	changeProgramsMenu = new MENU_STRUCTURE();
 80055fe:	2038      	movs	r0, #56	; 0x38
 8005600:	f008 fe92 	bl	800e328 <_Znwj>
 8005604:	4603      	mov	r3, r0
 8005606:	461c      	mov	r4, r3
 8005608:	4620      	mov	r0, r4
 800560a:	2338      	movs	r3, #56	; 0x38
 800560c:	461a      	mov	r2, r3
 800560e:	2100      	movs	r1, #0
 8005610:	f009 fa8b 	bl	800eb2a <memset>
 8005614:	4620      	mov	r0, r4
 8005616:	f7ff fea7 	bl	8005368 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
	startProgramsMenu = new MENU_STRUCTURE();
 8005620:	2038      	movs	r0, #56	; 0x38
 8005622:	f008 fe81 	bl	800e328 <_Znwj>
 8005626:	4603      	mov	r3, r0
 8005628:	461c      	mov	r4, r3
 800562a:	4620      	mov	r0, r4
 800562c:	2338      	movs	r3, #56	; 0x38
 800562e:	461a      	mov	r2, r3
 8005630:	2100      	movs	r1, #0
 8005632:	f009 fa7a 	bl	800eb2a <memset>
 8005636:	4620      	mov	r0, r4
 8005638:	f7ff fe96 	bl	8005368 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8c3 40b0 	str.w	r4, [r3, #176]	; 0xb0

	statusParam = new DRYER_PARAMS();
 8005642:	200c      	movs	r0, #12
 8005644:	f008 fe70 	bl	800e328 <_Znwj>
 8005648:	4603      	mov	r3, r0
 800564a:	461c      	mov	r4, r3
 800564c:	4622      	mov	r2, r4
 800564e:	2300      	movs	r3, #0
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	6053      	str	r3, [r2, #4]
 8005654:	6093      	str	r3, [r2, #8]
 8005656:	4620      	mov	r0, r4
 8005658:	f7ff fe94 	bl	8005384 <_ZN10SmartDryer12DRYER_PARAMSC1Ev>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	641c      	str	r4, [r3, #64]	; 0x40

	chamberTemperature.readedTemperatureInt = 0;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4618      	mov	r0, r3
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	bd90      	pop	{r4, r7, pc}
 8005672:	bf00      	nop
 8005674:	40010800 	.word	0x40010800

08005678 <_ZN10SmartDryer8blinkLedEht>:


void SmartDryer::blinkLed(uint8_t WichLed, uint16_t BlinkDelay)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	460b      	mov	r3, r1
 8005682:	70fb      	strb	r3, [r7, #3]
 8005684:	4613      	mov	r3, r2
 8005686:	803b      	strh	r3, [r7, #0]
	//	GPIO_TypeDef *LedPort;
	//	uint16_t LedPin = 0;
	if(BlinkDelay <= 1)
 8005688:	883b      	ldrh	r3, [r7, #0]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d801      	bhi.n	8005692 <_ZN10SmartDryer8blinkLedEht+0x1a>
	{
		BlinkDelay = 2;
 800568e:	2302      	movs	r3, #2
 8005690:	803b      	strh	r3, [r7, #0]
	}
	switch(WichLed)
 8005692:	78fb      	ldrb	r3, [r7, #3]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d002      	beq.n	800569e <_ZN10SmartDryer8blinkLedEht+0x26>
 8005698:	2b01      	cmp	r3, #1
 800569a:	d010      	beq.n	80056be <_ZN10SmartDryer8blinkLedEht+0x46>
			}
			//		LedPort = GreenLed_GPIO_Port;
			//		LedPin = GreenLed_Pin;
			break;
		default:
			break;
 800569c:	e022      	b.n	80056e4 <_ZN10SmartDryer8blinkLedEht+0x6c>
			if(blinkRedLedTimer->isFinished(true, BlinkDelay))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	883a      	ldrh	r2, [r7, #0]
 80056a4:	2101      	movs	r1, #1
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fd fe83 	bl	80033b2 <_ZN11ChronoTimer10isFinishedEbm>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d015      	beq.n	80056de <_ZN10SmartDryer8blinkLedEht+0x66>
				toggleLed(WichLed);
 80056b2:	78fb      	ldrb	r3, [r7, #3]
 80056b4:	4619      	mov	r1, r3
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f818 	bl	80056ec <_ZN10SmartDryer9toggleLedEh>
			break;
 80056bc:	e00f      	b.n	80056de <_ZN10SmartDryer8blinkLedEht+0x66>
			if(blinkGreenLedTimer->isFinished(true, BlinkDelay))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	883a      	ldrh	r2, [r7, #0]
 80056c4:	2101      	movs	r1, #1
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fd fe73 	bl	80033b2 <_ZN11ChronoTimer10isFinishedEbm>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d007      	beq.n	80056e2 <_ZN10SmartDryer8blinkLedEht+0x6a>
				toggleLed(WichLed);
 80056d2:	78fb      	ldrb	r3, [r7, #3]
 80056d4:	4619      	mov	r1, r3
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f808 	bl	80056ec <_ZN10SmartDryer9toggleLedEh>
			break;
 80056dc:	e001      	b.n	80056e2 <_ZN10SmartDryer8blinkLedEht+0x6a>
			break;
 80056de:	bf00      	nop
 80056e0:	e000      	b.n	80056e4 <_ZN10SmartDryer8blinkLedEht+0x6c>
			break;
 80056e2:	bf00      	nop
	}

}
 80056e4:	bf00      	nop
 80056e6:	3708      	adds	r7, #8
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <_ZN10SmartDryer9toggleLedEh>:

void SmartDryer::toggleLed(uint8_t WichLed)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	460b      	mov	r3, r1
 80056f6:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 80056f8:	2300      	movs	r3, #0
 80056fa:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 80056fc:	78fb      	ldrb	r3, [r7, #3]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d002      	beq.n	8005708 <_ZN10SmartDryer9toggleLedEh+0x1c>
 8005702:	2b01      	cmp	r3, #1
 8005704:	d006      	beq.n	8005714 <_ZN10SmartDryer9toggleLedEh+0x28>
		case GREEN_LED:
			LedPort = GreenLed_GPIO_Port;
			LedPin = GreenLed_Pin;
			break;
		default:
			break;
 8005706:	e00b      	b.n	8005720 <_ZN10SmartDryer9toggleLedEh+0x34>
			LedPort = RedLed_GPIO_Port;
 8005708:	4b0a      	ldr	r3, [pc, #40]	; (8005734 <_ZN10SmartDryer9toggleLedEh+0x48>)
 800570a:	60fb      	str	r3, [r7, #12]
			LedPin = RedLed_Pin;
 800570c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005710:	817b      	strh	r3, [r7, #10]
			break;
 8005712:	e005      	b.n	8005720 <_ZN10SmartDryer9toggleLedEh+0x34>
			LedPort = GreenLed_GPIO_Port;
 8005714:	4b07      	ldr	r3, [pc, #28]	; (8005734 <_ZN10SmartDryer9toggleLedEh+0x48>)
 8005716:	60fb      	str	r3, [r7, #12]
			LedPin = GreenLed_Pin;
 8005718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800571c:	817b      	strh	r3, [r7, #10]
			break;
 800571e:	bf00      	nop
	}
	HAL_GPIO_TogglePin(LedPort, LedPin);
 8005720:	897b      	ldrh	r3, [r7, #10]
 8005722:	4619      	mov	r1, r3
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f005 fb1f 	bl	800ad68 <HAL_GPIO_TogglePin>
}
 800572a:	bf00      	nop
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	40010800 	.word	0x40010800

08005738 <_ZN10SmartDryer9turnOnLedEh>:

void SmartDryer::turnOnLed(uint8_t WichLed)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	460b      	mov	r3, r1
 8005742:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 8005744:	2300      	movs	r3, #0
 8005746:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 8005748:	78fb      	ldrb	r3, [r7, #3]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d002      	beq.n	8005754 <_ZN10SmartDryer9turnOnLedEh+0x1c>
 800574e:	2b01      	cmp	r3, #1
 8005750:	d006      	beq.n	8005760 <_ZN10SmartDryer9turnOnLedEh+0x28>
		case GREEN_LED:
			LedPort = GreenLed_GPIO_Port;
			LedPin = GreenLed_Pin;
			break;
		default:
			break;
 8005752:	e00b      	b.n	800576c <_ZN10SmartDryer9turnOnLedEh+0x34>
			LedPort = RedLed_GPIO_Port;
 8005754:	4b0a      	ldr	r3, [pc, #40]	; (8005780 <_ZN10SmartDryer9turnOnLedEh+0x48>)
 8005756:	60fb      	str	r3, [r7, #12]
			LedPin = RedLed_Pin;
 8005758:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800575c:	817b      	strh	r3, [r7, #10]
			break;
 800575e:	e005      	b.n	800576c <_ZN10SmartDryer9turnOnLedEh+0x34>
			LedPort = GreenLed_GPIO_Port;
 8005760:	4b07      	ldr	r3, [pc, #28]	; (8005780 <_ZN10SmartDryer9turnOnLedEh+0x48>)
 8005762:	60fb      	str	r3, [r7, #12]
			LedPin = GreenLed_Pin;
 8005764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005768:	817b      	strh	r3, [r7, #10]
			break;
 800576a:	bf00      	nop
	}
	HAL_GPIO_WritePin(LedPort, LedPin, GPIO_PIN_SET);
 800576c:	897b      	ldrh	r3, [r7, #10]
 800576e:	2201      	movs	r2, #1
 8005770:	4619      	mov	r1, r3
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f005 fac6 	bl	800ad04 <HAL_GPIO_WritePin>
}
 8005778:	bf00      	nop
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	40010800 	.word	0x40010800

08005784 <_ZN10SmartDryer10turnOffLedEh>:

void SmartDryer::turnOffLed(uint8_t WichLed)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	460b      	mov	r3, r1
 800578e:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 8005790:	2300      	movs	r3, #0
 8005792:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 8005794:	78fb      	ldrb	r3, [r7, #3]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d002      	beq.n	80057a0 <_ZN10SmartDryer10turnOffLedEh+0x1c>
 800579a:	2b01      	cmp	r3, #1
 800579c:	d006      	beq.n	80057ac <_ZN10SmartDryer10turnOffLedEh+0x28>
		case GREEN_LED:
			LedPort = GreenLed_GPIO_Port;
			LedPin = GreenLed_Pin;
			break;
		default:
			break;
 800579e:	e00b      	b.n	80057b8 <_ZN10SmartDryer10turnOffLedEh+0x34>
			LedPort = RedLed_GPIO_Port;
 80057a0:	4b0a      	ldr	r3, [pc, #40]	; (80057cc <_ZN10SmartDryer10turnOffLedEh+0x48>)
 80057a2:	60fb      	str	r3, [r7, #12]
			LedPin = RedLed_Pin;
 80057a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80057a8:	817b      	strh	r3, [r7, #10]
			break;
 80057aa:	e005      	b.n	80057b8 <_ZN10SmartDryer10turnOffLedEh+0x34>
			LedPort = GreenLed_GPIO_Port;
 80057ac:	4b07      	ldr	r3, [pc, #28]	; (80057cc <_ZN10SmartDryer10turnOffLedEh+0x48>)
 80057ae:	60fb      	str	r3, [r7, #12]
			LedPin = GreenLed_Pin;
 80057b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057b4:	817b      	strh	r3, [r7, #10]
			break;
 80057b6:	bf00      	nop
	}
	HAL_GPIO_WritePin(LedPort, LedPin, GPIO_PIN_RESET);
 80057b8:	897b      	ldrh	r3, [r7, #10]
 80057ba:	2200      	movs	r2, #0
 80057bc:	4619      	mov	r1, r3
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f005 faa0 	bl	800ad04 <HAL_GPIO_WritePin>
}
 80057c4:	bf00      	nop
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	40010800 	.word	0x40010800

080057d0 <_ZN10SmartDryer10ledControlEv>:

void SmartDryer::ledControl()
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]

	switch(ledStatus)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80057de:	2b03      	cmp	r3, #3
 80057e0:	d031      	beq.n	8005846 <_ZN10SmartDryer10ledControlEv+0x76>
 80057e2:	2b03      	cmp	r3, #3
 80057e4:	dc06      	bgt.n	80057f4 <_ZN10SmartDryer10ledControlEv+0x24>
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d019      	beq.n	800581e <_ZN10SmartDryer10ledControlEv+0x4e>
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	dc22      	bgt.n	8005834 <_ZN10SmartDryer10ledControlEv+0x64>
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00b      	beq.n	800580a <_ZN10SmartDryer10ledControlEv+0x3a>
 80057f2:	e07b      	b.n	80058ec <_ZN10SmartDryer10ledControlEv+0x11c>
 80057f4:	f240 12f5 	movw	r2, #501	; 0x1f5
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d03d      	beq.n	8005878 <_ZN10SmartDryer10ledControlEv+0xa8>
 80057fc:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8005800:	d057      	beq.n	80058b2 <_ZN10SmartDryer10ledControlEv+0xe2>
 8005802:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005806:	d02a      	beq.n	800585e <_ZN10SmartDryer10ledControlEv+0x8e>
 8005808:	e070      	b.n	80058ec <_ZN10SmartDryer10ledControlEv+0x11c>
	{
		case THERMO_ON_FAN_OFF:
			blinkLed(RED_LED, 10);
 800580a:	220a      	movs	r2, #10
 800580c:	2100      	movs	r1, #0
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7ff ff32 	bl	8005678 <_ZN10SmartDryer8blinkLedEht>
			turnOffLed(GREEN_LED);
 8005814:	2101      	movs	r1, #1
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7ff ffb4 	bl	8005784 <_ZN10SmartDryer10turnOffLedEh>
			break;
 800581c:	e073      	b.n	8005906 <_ZN10SmartDryer10ledControlEv+0x136>
		case THERMO_OFF_FAN_ON:
			turnOffLed(RED_LED);
 800581e:	2100      	movs	r1, #0
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7ff ffaf 	bl	8005784 <_ZN10SmartDryer10turnOffLedEh>
			blinkLed(GREEN_LED, 500);
 8005826:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800582a:	2101      	movs	r1, #1
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f7ff ff23 	bl	8005678 <_ZN10SmartDryer8blinkLedEht>
			break;
 8005832:	e068      	b.n	8005906 <_ZN10SmartDryer10ledControlEv+0x136>
		case THERMO_OFF_FAN_OFF:
			turnOffLed(GREEN_LED);
 8005834:	2101      	movs	r1, #1
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7ff ffa4 	bl	8005784 <_ZN10SmartDryer10turnOffLedEh>
			turnOffLed(RED_LED);
 800583c:	2100      	movs	r1, #0
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7ff ffa0 	bl	8005784 <_ZN10SmartDryer10turnOffLedEh>
			break;
 8005844:	e05f      	b.n	8005906 <_ZN10SmartDryer10ledControlEv+0x136>
		case THERMO_ON_FAN_ON:
			blinkLed(RED_LED, 10);
 8005846:	220a      	movs	r2, #10
 8005848:	2100      	movs	r1, #0
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f7ff ff14 	bl	8005678 <_ZN10SmartDryer8blinkLedEht>
			blinkLed(GREEN_LED, 500);
 8005850:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005854:	2101      	movs	r1, #1
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7ff ff0e 	bl	8005678 <_ZN10SmartDryer8blinkLedEht>
			break;
 800585c:	e053      	b.n	8005906 <_ZN10SmartDryer10ledControlEv+0x136>
		case TEMP_REACHED:
			turnOnLed(RED_LED);
 800585e:	2100      	movs	r1, #0
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f7ff ff69 	bl	8005738 <_ZN10SmartDryer9turnOnLedEh>
			HAL_Delay(250);
 8005866:	20fa      	movs	r0, #250	; 0xfa
 8005868:	f004 fa98 	bl	8009d9c <HAL_Delay>
			ledStatus = UNKNOWN_STATE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8005872:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			break;
 8005876:	e046      	b.n	8005906 <_ZN10SmartDryer10ledControlEv+0x136>
		case PROGRAM_INIT:
			for(int i = 0; i < 50*10; i++)
 8005878:	2300      	movs	r3, #0
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005882:	da10      	bge.n	80058a6 <_ZN10SmartDryer10ledControlEv+0xd6>
			{
				blinkLed(RED_LED, 50);
 8005884:	2232      	movs	r2, #50	; 0x32
 8005886:	2100      	movs	r1, #0
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7ff fef5 	bl	8005678 <_ZN10SmartDryer8blinkLedEht>
				blinkLed(GREEN_LED, 50);
 800588e:	2232      	movs	r2, #50	; 0x32
 8005890:	2101      	movs	r1, #1
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7ff fef0 	bl	8005678 <_ZN10SmartDryer8blinkLedEht>
				HAL_Delay(1);
 8005898:	2001      	movs	r0, #1
 800589a:	f004 fa7f 	bl	8009d9c <HAL_Delay>
			for(int i = 0; i < 50*10; i++)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	3301      	adds	r3, #1
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	e7ea      	b.n	800587c <_ZN10SmartDryer10ledControlEv+0xac>
			};
			ledStatus = UNKNOWN_STATE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f240 12f7 	movw	r2, #503	; 0x1f7
 80058ac:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			break;
 80058b0:	e029      	b.n	8005906 <_ZN10SmartDryer10ledControlEv+0x136>
		case PROGRAM_END:
			for(int i = 0; i < 50*20; i++)
 80058b2:	2300      	movs	r3, #0
 80058b4:	60bb      	str	r3, [r7, #8]
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058bc:	da10      	bge.n	80058e0 <_ZN10SmartDryer10ledControlEv+0x110>
			{
				blinkLed(RED_LED, 50);
 80058be:	2232      	movs	r2, #50	; 0x32
 80058c0:	2100      	movs	r1, #0
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7ff fed8 	bl	8005678 <_ZN10SmartDryer8blinkLedEht>
				blinkLed(GREEN_LED, 50);
 80058c8:	2232      	movs	r2, #50	; 0x32
 80058ca:	2101      	movs	r1, #1
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7ff fed3 	bl	8005678 <_ZN10SmartDryer8blinkLedEht>
				HAL_Delay(1);
 80058d2:	2001      	movs	r0, #1
 80058d4:	f004 fa62 	bl	8009d9c <HAL_Delay>
			for(int i = 0; i < 50*20; i++)
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	3301      	adds	r3, #1
 80058dc:	60bb      	str	r3, [r7, #8]
 80058de:	e7ea      	b.n	80058b6 <_ZN10SmartDryer10ledControlEv+0xe6>
			};
			ledStatus = UNKNOWN_STATE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f240 12f7 	movw	r2, #503	; 0x1f7
 80058e6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			break;
 80058ea:	e00c      	b.n	8005906 <_ZN10SmartDryer10ledControlEv+0x136>
		case UNKNOWN_STATE:
		default:
			blinkLed(RED_LED, 1000);
 80058ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80058f0:	2100      	movs	r1, #0
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7ff fec0 	bl	8005678 <_ZN10SmartDryer8blinkLedEht>
			blinkLed(GREEN_LED, 1000);
 80058f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80058fc:	2101      	movs	r1, #1
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7ff feba 	bl	8005678 <_ZN10SmartDryer8blinkLedEht>
			break;
 8005904:	bf00      	nop
	}
}
 8005906:	bf00      	nop
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
	...

08005910 <_ZN10SmartDryer16thermoRegulationEf>:

void SmartDryer::thermoRegulation(float WichTemp)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
	uint32_t ReadedTemp = 0;
 800591a:	2300      	movs	r3, #0
 800591c:	60fb      	str	r3, [r7, #12]
	uint32_t TempTarget = (uint32_t)roundf(WichTemp * 10);
 800591e:	4969      	ldr	r1, [pc, #420]	; (8005ac4 <_ZN10SmartDryer16thermoRegulationEf+0x1b4>)
 8005920:	6838      	ldr	r0, [r7, #0]
 8005922:	f7fb f949 	bl	8000bb8 <__aeabi_fmul>
 8005926:	4603      	mov	r3, r0
 8005928:	4618      	mov	r0, r3
 800592a:	f009 f857 	bl	800e9dc <roundf>
 800592e:	4603      	mov	r3, r0
 8005930:	4618      	mov	r0, r3
 8005932:	f7fb fa91 	bl	8000e58 <__aeabi_f2uiz>
 8005936:	4603      	mov	r3, r0
 8005938:	60bb      	str	r3, [r7, #8]
	if(statusParam->dryerOn)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 80b5 	beq.w	8005ab0 <_ZN10SmartDryer16thermoRegulationEf+0x1a0>
	{
		if(getTempTimer->isFinished(true, 750))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	f240 22ee 	movw	r2, #750	; 0x2ee
 800594e:	2101      	movs	r1, #1
 8005950:	4618      	mov	r0, r3
 8005952:	f7fd fd2e 	bl	80033b2 <_ZN11ChronoTimer10isFinishedEbm>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d019      	beq.n	8005990 <_ZN10SmartDryer16thermoRegulationEf+0x80>
		{
			chamberTemperature.readedTemperatureFL = tempSens->getTemperature();
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	4618      	mov	r0, r3
 8005962:	f004 f86c 	bl	8009a3e <_ZN13THERMO_SENSOR14getTemperatureEv>
 8005966:	4602      	mov	r2, r0
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			ReadedTemp = (uint32_t)roundf(chamberTemperature.readedTemperatureFL * 10);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005974:	4953      	ldr	r1, [pc, #332]	; (8005ac4 <_ZN10SmartDryer16thermoRegulationEf+0x1b4>)
 8005976:	4618      	mov	r0, r3
 8005978:	f7fb f91e 	bl	8000bb8 <__aeabi_fmul>
 800597c:	4603      	mov	r3, r0
 800597e:	4618      	mov	r0, r3
 8005980:	f009 f82c 	bl	800e9dc <roundf>
 8005984:	4603      	mov	r3, r0
 8005986:	4618      	mov	r0, r3
 8005988:	f7fb fa66 	bl	8000e58 <__aeabi_f2uiz>
 800598c:	4603      	mov	r3, r0
 800598e:	60fb      	str	r3, [r7, #12]
		}
		if(ReadedTemp != 0)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d06c      	beq.n	8005a70 <_ZN10SmartDryer16thermoRegulationEf+0x160>
		{
			if(ReadedTemp >= TempTarget - TOLLERANCE_DEGREES)
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	3b37      	subs	r3, #55	; 0x37
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	429a      	cmp	r2, r3
 800599e:	d319      	bcc.n	80059d4 <_ZN10SmartDryer16thermoRegulationEf+0xc4>
			{
				statusParam->fanOn = true;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a4:	2201      	movs	r2, #1
 80059a6:	709a      	strb	r2, [r3, #2]
				statusParam->thermoOn = true;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ac:	2201      	movs	r2, #1
 80059ae:	705a      	strb	r2, [r3, #1]
				if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80059b6:	f240 12f5 	movw	r2, #501	; 0x1f5
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d07d      	beq.n	8005aba <_ZN10SmartDryer16thermoRegulationEf+0x1aa>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80059c4:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 80059c8:	d077      	beq.n	8005aba <_ZN10SmartDryer16thermoRegulationEf+0x1aa>
					ledStatus = THERMO_ON_FAN_ON;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2203      	movs	r2, #3
 80059ce:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	}
	else
	{
		getTempTimer->restart();
	}
}
 80059d2:	e072      	b.n	8005aba <_ZN10SmartDryer16thermoRegulationEf+0x1aa>
			else if(ReadedTemp >= TempTarget)
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d324      	bcc.n	8005a26 <_ZN10SmartDryer16thermoRegulationEf+0x116>
				statusParam->fanOn = true;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e0:	2201      	movs	r2, #1
 80059e2:	709a      	strb	r2, [r3, #2]
				statusParam->thermoOn = false;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e8:	2200      	movs	r2, #0
 80059ea:	705a      	strb	r2, [r3, #1]
				ledStatus = TEMP_REACHED;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80059f2:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
				if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END && ledStatus != TEMP_REACHED)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80059fc:	f240 12f5 	movw	r2, #501	; 0x1f5
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d05a      	beq.n	8005aba <_ZN10SmartDryer16thermoRegulationEf+0x1aa>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8005a0a:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8005a0e:	d054      	beq.n	8005aba <_ZN10SmartDryer16thermoRegulationEf+0x1aa>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8005a16:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005a1a:	d04e      	beq.n	8005aba <_ZN10SmartDryer16thermoRegulationEf+0x1aa>
					ledStatus = THERMO_OFF_FAN_ON;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
}
 8005a24:	e049      	b.n	8005aba <_ZN10SmartDryer16thermoRegulationEf+0x1aa>
			else if(ReadedTemp < TempTarget - TOLLERANCE_DEGREES)
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	3b37      	subs	r3, #55	; 0x37
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d244      	bcs.n	8005aba <_ZN10SmartDryer16thermoRegulationEf+0x1aa>
				statusParam->fanOn = false;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a34:	2200      	movs	r2, #0
 8005a36:	709a      	strb	r2, [r3, #2]
				statusParam->thermoOn = true;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	705a      	strb	r2, [r3, #1]
				if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END && ledStatus != TEMP_REACHED)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8005a46:	f240 12f5 	movw	r2, #501	; 0x1f5
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d035      	beq.n	8005aba <_ZN10SmartDryer16thermoRegulationEf+0x1aa>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8005a54:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8005a58:	d02f      	beq.n	8005aba <_ZN10SmartDryer16thermoRegulationEf+0x1aa>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8005a60:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005a64:	d029      	beq.n	8005aba <_ZN10SmartDryer16thermoRegulationEf+0x1aa>
					ledStatus = THERMO_ON_FAN_OFF;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
}
 8005a6e:	e024      	b.n	8005aba <_ZN10SmartDryer16thermoRegulationEf+0x1aa>
			statusParam->fanOn = false;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a74:	2200      	movs	r2, #0
 8005a76:	709a      	strb	r2, [r3, #2]
			statusParam->thermoOn = false;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	705a      	strb	r2, [r3, #1]
			if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END && ledStatus != TEMP_REACHED)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8005a86:	f240 12f5 	movw	r2, #501	; 0x1f5
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d015      	beq.n	8005aba <_ZN10SmartDryer16thermoRegulationEf+0x1aa>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8005a94:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8005a98:	d00f      	beq.n	8005aba <_ZN10SmartDryer16thermoRegulationEf+0x1aa>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8005aa0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005aa4:	d009      	beq.n	8005aba <_ZN10SmartDryer16thermoRegulationEf+0x1aa>
				ledStatus = THERMO_OFF_FAN_OFF;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2202      	movs	r2, #2
 8005aaa:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
}
 8005aae:	e004      	b.n	8005aba <_ZN10SmartDryer16thermoRegulationEf+0x1aa>
		getTempTimer->restart();
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	69db      	ldr	r3, [r3, #28]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fd fc6e 	bl	8003396 <_ZN11ChronoTimer7restartEv>
}
 8005aba:	bf00      	nop
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	41200000 	.word	0x41200000

08005ac8 <_ZN10SmartDryer16physicalReleCtrlEv>:

void SmartDryer::physicalReleCtrl()
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
	if(statusParam->dryerOn)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d024      	beq.n	8005b24 <_ZN10SmartDryer16physicalReleCtrlEv+0x5c>
	{
		if(statusParam->fanOn)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ade:	789b      	ldrb	r3, [r3, #2]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d006      	beq.n	8005af2 <_ZN10SmartDryer16physicalReleCtrlEv+0x2a>
		{
			fanCtrl->setState(HIGH);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	2101      	movs	r1, #1
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7ff fbd1 	bl	8005292 <_ZN4RELE8setStateE9PIN_STATE>
 8005af0:	e005      	b.n	8005afe <_ZN10SmartDryer16physicalReleCtrlEv+0x36>
		}
		else
		{
			fanCtrl->setState(LOW);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	2100      	movs	r1, #0
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7ff fbca 	bl	8005292 <_ZN4RELE8setStateE9PIN_STATE>
		}
		if(statusParam->thermoOn)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	785b      	ldrb	r3, [r3, #1]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d006      	beq.n	8005b16 <_ZN10SmartDryer16physicalReleCtrlEv+0x4e>
		{
			thermoCtrl->setState(HIGH);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	2101      	movs	r1, #1
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7ff fbbf 	bl	8005292 <_ZN4RELE8setStateE9PIN_STATE>
	else
	{
		fanCtrl->setState(LOW);
		thermoCtrl->setState(LOW);
	}
}
 8005b14:	e012      	b.n	8005b3c <_ZN10SmartDryer16physicalReleCtrlEv+0x74>
			thermoCtrl->setState(LOW);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7ff fbb8 	bl	8005292 <_ZN4RELE8setStateE9PIN_STATE>
}
 8005b22:	e00b      	b.n	8005b3c <_ZN10SmartDryer16physicalReleCtrlEv+0x74>
		fanCtrl->setState(LOW);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	2100      	movs	r1, #0
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7ff fbb1 	bl	8005292 <_ZN4RELE8setStateE9PIN_STATE>
		thermoCtrl->setState(LOW);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	2100      	movs	r1, #0
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7ff fbab 	bl	8005292 <_ZN4RELE8setStateE9PIN_STATE>
}
 8005b3c:	bf00      	nop
 8005b3e:	3708      	adds	r7, #8
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <_ZN10SmartDryer18peripheralsControlEv>:

void SmartDryer::peripheralsControl()
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
	thermoRegulation(statusParam->temperatureSetted);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	4619      	mov	r1, r3
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f7ff fedb 	bl	8005910 <_ZN10SmartDryer16thermoRegulationEf>
	physicalReleCtrl();
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7ff ffb4 	bl	8005ac8 <_ZN10SmartDryer16physicalReleCtrlEv>
	ledControl();
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f7ff fe35 	bl	80057d0 <_ZN10SmartDryer10ledControlEv>
}
 8005b66:	bf00      	nop
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>:


void SmartDryer::showTimeDate(String &Time, String &Date)
{
 8005b6e:	b590      	push	{r4, r7, lr}
 8005b70:	b09d      	sub	sp, #116	; 0x74
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	60f8      	str	r0, [r7, #12]
 8005b76:	60b9      	str	r1, [r7, #8]
 8005b78:	607a      	str	r2, [r7, #4]
	if(takeTimeTimer->isFinished(true, 500))
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005b82:	2101      	movs	r1, #1
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7fd fc14 	bl	80033b2 <_ZN11ChronoTimer10isFinishedEbm>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d025      	beq.n	8005bdc <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0x6e>
	{
		Time = clock->getTimeDateStr(DS1307_RTC::ONLY_TIME_NO_SEC);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6859      	ldr	r1, [r3, #4]
 8005b94:	f107 0310 	add.w	r3, r7, #16
 8005b98:	2201      	movs	r2, #1
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fd fe6e 	bl	800387c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh>
 8005ba0:	f107 0310 	add.w	r3, r7, #16
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	68b8      	ldr	r0, [r7, #8]
 8005ba8:	f008 fd11 	bl	800e5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8005bac:	f107 0310 	add.w	r3, r7, #16
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f008 fd00 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		Date = clock->getTimeDateStr(DS1307_RTC::ONLY_DATE_NO_YEAR);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6859      	ldr	r1, [r3, #4]
 8005bba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bbe:	2203      	movs	r2, #3
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7fd fe5b 	bl	800387c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh>
 8005bc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bca:	4619      	mov	r1, r3
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f008 fcfe 	bl	800e5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8005bd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f008 fced 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
	display->drawTimeDate(Time, Date);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681c      	ldr	r4, [r3, #0]
 8005be0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005be4:	68b9      	ldr	r1, [r7, #8]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f008 fe1f 	bl	800e82a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8005bec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005bf0:	6879      	ldr	r1, [r7, #4]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f008 fe19 	bl	800e82a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8005bf8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005bfc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005c00:	4619      	mov	r1, r3
 8005c02:	4620      	mov	r0, r4
 8005c04:	f7ff f952 	bl	8004eac <_ZN13NHDST7565_LCD12drawTimeDateENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>
 8005c08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f008 fcd2 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005c12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005c16:	4618      	mov	r0, r3
 8005c18:	f008 fccd 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8005c1c:	bf00      	nop
 8005c1e:	3774      	adds	r7, #116	; 0x74
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd90      	pop	{r4, r7, pc}

08005c24 <_ZN10SmartDryer7navMenuEv>:


void SmartDryer::navMenu()
{
 8005c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c28:	b0a6      	sub	sp, #152	; 0x98
 8005c2a:	af08      	add	r7, sp, #32
 8005c2c:	6078      	str	r0, [r7, #4]
	bool ExitNavMenu = false;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	MENU_STRUCTURE *ActualMenu = mainMenu;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c3a:	673b      	str	r3, [r7, #112]	; 0x70
	uint8_t MenuSel = MAIN_MENU;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	showHelpMessageTimer->restart();
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7fd fba5 	bl	8003396 <_ZN11ChronoTimer7restartEv>
	String Time = "", Date = "";
 8005c4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005c50:	4618      	mov	r0, r3
 8005c52:	f008 fb85 	bl	800e360 <_ZNSaIcEC1Ev>
 8005c56:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005c5a:	f107 0320 	add.w	r3, r7, #32
 8005c5e:	49be      	ldr	r1, [pc, #760]	; (8005f58 <_ZN10SmartDryer7navMenuEv+0x334>)
 8005c60:	4618      	mov	r0, r3
 8005c62:	f008 fe15 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005c66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f008 fb79 	bl	800e362 <_ZNSaIcED1Ev>
 8005c70:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005c74:	4618      	mov	r0, r3
 8005c76:	f008 fb73 	bl	800e360 <_ZNSaIcEC1Ev>
 8005c7a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005c7e:	f107 0308 	add.w	r3, r7, #8
 8005c82:	49b5      	ldr	r1, [pc, #724]	; (8005f58 <_ZN10SmartDryer7navMenuEv+0x334>)
 8005c84:	4618      	mov	r0, r3
 8005c86:	f008 fe03 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005c8a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f008 fb67 	bl	800e362 <_ZNSaIcED1Ev>
	while(!ExitNavMenu)
 8005c94:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f040 827d 	bne.w	8006198 <_ZN10SmartDryer7navMenuEv+0x574>
	{
		uint8_t WichKey = DryerKey::NO_KEY;
 8005c9e:	2308      	movs	r3, #8
 8005ca0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		display->clearFrameBuffer();
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7fe fde4 	bl	8004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 8005cae:	f107 0208 	add.w	r2, r7, #8
 8005cb2:	f107 0320 	add.w	r3, r7, #32
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7ff ff58 	bl	8005b6e <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString(ActualMenu->menuTitle, NHDST7565_LCD::CENTER_POS, MENU_TITLE_YPOS, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681c      	ldr	r4, [r3, #0]
 8005cc2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005cc4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005cc8:	4611      	mov	r1, r2
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f008 fdad 	bl	800e82a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005cd8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	2307      	movs	r3, #7
 8005ce0:	2283      	movs	r2, #131	; 0x83
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	f7fe fdef 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8005ce8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005cec:	4618      	mov	r0, r3
 8005cee:	f008 fc62 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		ActualMenu->maxMenuLines = display->drawMenuList(ActualMenu->XPos, ActualMenu->YPos, ActualMenu->topItemPos,
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	603b      	str	r3, [r7, #0]
 8005cf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cfa:	f893 c01c 	ldrb.w	ip, [r3, #28]
 8005cfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d00:	f893 e01d 	ldrb.w	lr, [r3, #29]
 8005d04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d06:	f893 8024 	ldrb.w	r8, [r3, #36]	; 0x24
 8005d0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d10:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005d12:	6992      	ldr	r2, [r2, #24]
 8005d14:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8005d16:	f891 1027 	ldrb.w	r1, [r1, #39]	; 0x27
 8005d1a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8005d1c:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
 8005d20:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8005d22:	f894 4035 	ldrb.w	r4, [r4, #53]	; 0x35
 8005d26:	6f3d      	ldr	r5, [r7, #112]	; 0x70
 8005d28:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 8005d2a:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 8005d2c:	6a36      	ldr	r6, [r6, #32]
 8005d2e:	9606      	str	r6, [sp, #24]
 8005d30:	9505      	str	r5, [sp, #20]
 8005d32:	9404      	str	r4, [sp, #16]
 8005d34:	9003      	str	r0, [sp, #12]
 8005d36:	9102      	str	r1, [sp, #8]
 8005d38:	9201      	str	r2, [sp, #4]
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	4643      	mov	r3, r8
 8005d3e:	4672      	mov	r2, lr
 8005d40:	4661      	mov	r1, ip
 8005d42:	6838      	ldr	r0, [r7, #0]
 8005d44:	f7fe fe02 	bl	800494c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d4e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
//			{
//				showHelpMessageTimer->restart();
//			}
//		}

		display->sendFrameBuffer();
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fe fd9a 	bl	8004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		WichKey = keyboard->checkKey();
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7ff fa29 	bl	80051b8 <_ZN8DryerKey8checkKeyEv>
 8005d66:	4603      	mov	r3, r0
 8005d68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		switch(WichKey)
 8005d6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d70:	2b07      	cmp	r3, #7
 8005d72:	f200 81ad 	bhi.w	80060d0 <_ZN10SmartDryer7navMenuEv+0x4ac>
 8005d76:	a201      	add	r2, pc, #4	; (adr r2, 8005d7c <_ZN10SmartDryer7navMenuEv+0x158>)
 8005d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7c:	08005d9d 	.word	0x08005d9d
 8005d80:	08005dcb 	.word	0x08005dcb
 8005d84:	08005dfb 	.word	0x08005dfb
 8005d88:	08005fef 	.word	0x08005fef
 8005d8c:	08005d9d 	.word	0x08005d9d
 8005d90:	08005dcb 	.word	0x08005dcb
 8005d94:	0800608b 	.word	0x0800608b
 8005d98:	080060d1 	.word	0x080060d1
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				if(ActualMenu->itemSelected > 0)
 8005d9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d008      	beq.n	8005db8 <_ZN10SmartDryer7navMenuEv+0x194>
					ActualMenu->itemSelected--;
 8005da6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005da8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005dac:	3b01      	subs	r3, #1
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005db2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				else
					ActualMenu->itemSelected = ActualMenu->maxMenuItems - 1;
				break;
 8005db6:	e18e      	b.n	80060d6 <_ZN10SmartDryer7navMenuEv+0x4b2>
					ActualMenu->itemSelected = ActualMenu->maxMenuItems - 1;
 8005db8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005dba:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005dc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				break;
 8005dc8:	e185      	b.n	80060d6 <_ZN10SmartDryer7navMenuEv+0x4b2>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				if(ActualMenu->itemSelected < ActualMenu->maxMenuItems - 1)
 8005dca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005dcc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005dd4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	da08      	bge.n	8005df0 <_ZN10SmartDryer7navMenuEv+0x1cc>
					ActualMenu->itemSelected++;
 8005dde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005de0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005de4:	3301      	adds	r3, #1
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005dea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				else
					ActualMenu->itemSelected = 0;
				break;
 8005dee:	e172      	b.n	80060d6 <_ZN10SmartDryer7navMenuEv+0x4b2>
					ActualMenu->itemSelected = 0;
 8005df0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				break;
 8005df8:	e16d      	b.n	80060d6 <_ZN10SmartDryer7navMenuEv+0x4b2>
			case DryerKey::LEFT_KEY:
				switch(MenuSel)
 8005dfa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005dfe:	2b07      	cmp	r3, #7
 8005e00:	f000 80db 	beq.w	8005fba <_ZN10SmartDryer7navMenuEv+0x396>
 8005e04:	2b08      	cmp	r3, #8
 8005e06:	f000 80e4 	beq.w	8005fd2 <_ZN10SmartDryer7navMenuEv+0x3ae>
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d000      	beq.n	8005e10 <_ZN10SmartDryer7navMenuEv+0x1ec>
					case START_PROGRAMS_LIST:
						screen = ActualMenu->itemSelected + START_PROGRAM_1;
						ExitNavMenu = true;
						break;
					default:
						break;
 8005e0e:	e0ed      	b.n	8005fec <_ZN10SmartDryer7navMenuEv+0x3c8>
						switch(ActualMenu->itemSelected + 1)
 8005e10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e12:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005e16:	3301      	adds	r3, #1
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	2b08      	cmp	r3, #8
 8005e1c:	d85c      	bhi.n	8005ed8 <_ZN10SmartDryer7navMenuEv+0x2b4>
 8005e1e:	a201      	add	r2, pc, #4	; (adr r2, 8005e24 <_ZN10SmartDryer7navMenuEv+0x200>)
 8005e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e24:	08005e49 	.word	0x08005e49
 8005e28:	08005e59 	.word	0x08005e59
 8005e2c:	08005e69 	.word	0x08005e69
 8005e30:	08005e79 	.word	0x08005e79
 8005e34:	08005e89 	.word	0x08005e89
 8005e38:	08005e99 	.word	0x08005e99
 8005e3c:	08005ea9 	.word	0x08005ea9
 8005e40:	08005eb9 	.word	0x08005eb9
 8005e44:	08005ec9 	.word	0x08005ec9
								MenuSel = THERMO_CTRL;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = thermoMenuCtrl;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e54:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8005e56:	e040      	b.n	8005eda <_ZN10SmartDryer7navMenuEv+0x2b6>
								MenuSel = FAN_CTRL;
 8005e58:	2302      	movs	r3, #2
 8005e5a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = fanMenuCtrl;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e64:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8005e66:	e038      	b.n	8005eda <_ZN10SmartDryer7navMenuEv+0x2b6>
								MenuSel = TEMP_CTRL;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = tempMenuCtrl;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e74:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8005e76:	e030      	b.n	8005eda <_ZN10SmartDryer7navMenuEv+0x2b6>
								MenuSel = START_DRYER_CTRL;
 8005e78:	2304      	movs	r3, #4
 8005e7a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = startDryerMenu;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005e84:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8005e86:	e028      	b.n	8005eda <_ZN10SmartDryer7navMenuEv+0x2b6>
								screen = CHANGE_TIME;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
								ExitNavMenu = true;
 8005e90:	2301      	movs	r3, #1
 8005e92:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
								break;
 8005e96:	e020      	b.n	8005eda <_ZN10SmartDryer7navMenuEv+0x2b6>
								screen = CHANGE_DATE;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
								ExitNavMenu = true;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
								break;
 8005ea6:	e018      	b.n	8005eda <_ZN10SmartDryer7navMenuEv+0x2b6>
								MenuSel = CHANGE_PROGRAMS_LIST;
 8005ea8:	2307      	movs	r3, #7
 8005eaa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = changeProgramsMenu;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005eb4:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8005eb6:	e010      	b.n	8005eda <_ZN10SmartDryer7navMenuEv+0x2b6>
								MenuSel = START_PROGRAMS_LIST;
 8005eb8:	2308      	movs	r3, #8
 8005eba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = startProgramsMenu;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ec4:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8005ec6:	e008      	b.n	8005eda <_ZN10SmartDryer7navMenuEv+0x2b6>
								screen = SHOW_INFO;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2203      	movs	r2, #3
 8005ecc:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
								ExitNavMenu = true;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
								break;
 8005ed6:	e000      	b.n	8005eda <_ZN10SmartDryer7navMenuEv+0x2b6>
								break;
 8005ed8:	bf00      	nop
						if(ActualMenu->withChebox)
 8005eda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005edc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 8082 	beq.w	8005fea <_ZN10SmartDryer7navMenuEv+0x3c6>
							for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005eea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005eec:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	da09      	bge.n	8005f0c <_ZN10SmartDryer7navMenuEv+0x2e8>
								ActualMenu->itemsChecked[i] = false;
 8005ef8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005efc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005efe:	4413      	add	r3, r2
 8005f00:	2200      	movs	r2, #0
 8005f02:	701a      	strb	r2, [r3, #0]
							for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8005f04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f06:	3301      	adds	r3, #1
 8005f08:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f0a:	e7ee      	b.n	8005eea <_ZN10SmartDryer7navMenuEv+0x2c6>
							switch(ActualMenu->paramType)
 8005f0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d002      	beq.n	8005f1c <_ZN10SmartDryer7navMenuEv+0x2f8>
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	d019      	beq.n	8005f4e <_ZN10SmartDryer7navMenuEv+0x32a>
									break;
 8005f1a:	e04d      	b.n	8005fb8 <_ZN10SmartDryer7navMenuEv+0x394>
									if(*(bool *)ActualMenu->paramAssociated)
 8005f1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d009      	beq.n	8005f3a <_ZN10SmartDryer7navMenuEv+0x316>
										ActualMenu->itemsChecked[0] = false;
 8005f26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	701a      	strb	r2, [r3, #0]
										ActualMenu->itemsChecked[1] = true;
 8005f2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f32:	3301      	adds	r3, #1
 8005f34:	2201      	movs	r2, #1
 8005f36:	701a      	strb	r2, [r3, #0]
									break;
 8005f38:	e03e      	b.n	8005fb8 <_ZN10SmartDryer7navMenuEv+0x394>
										ActualMenu->itemsChecked[0] = true;
 8005f3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3e:	2201      	movs	r2, #1
 8005f40:	701a      	strb	r2, [r3, #0]
										ActualMenu->itemsChecked[1] = false;
 8005f42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f46:	3301      	adds	r3, #1
 8005f48:	2200      	movs	r2, #0
 8005f4a:	701a      	strb	r2, [r3, #0]
									break;
 8005f4c:	e034      	b.n	8005fb8 <_ZN10SmartDryer7navMenuEv+0x394>
									switch(MenuSel)
 8005f4e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005f52:	2b03      	cmp	r3, #3
 8005f54:	d002      	beq.n	8005f5c <_ZN10SmartDryer7navMenuEv+0x338>
											break;
 8005f56:	e02e      	b.n	8005fb6 <_ZN10SmartDryer7navMenuEv+0x392>
 8005f58:	0800f598 	.word	0x0800f598
											for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	667b      	str	r3, [r7, #100]	; 0x64
 8005f60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f62:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005f66:	461a      	mov	r2, r3
 8005f68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	da22      	bge.n	8005fb4 <_ZN10SmartDryer7navMenuEv+0x390>
												uint32_t TempSetted = (uint32_t)*(float *)ActualMenu->paramAssociated;
 8005f6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7fa ff6f 	bl	8000e58 <__aeabi_f2uiz>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	65bb      	str	r3, [r7, #88]	; 0x58
												if(TempSetted == (uint32_t)paramTemperatures[i])
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005f84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f86:	4413      	add	r3, r2
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d106      	bne.n	8005fa0 <_ZN10SmartDryer7navMenuEv+0x37c>
													ActualMenu->itemsChecked[i] = true;
 8005f92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f98:	4413      	add	r3, r2
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	701a      	strb	r2, [r3, #0]
 8005f9e:	e005      	b.n	8005fac <_ZN10SmartDryer7navMenuEv+0x388>
													ActualMenu->itemsChecked[i] = false;
 8005fa0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fa6:	4413      	add	r3, r2
 8005fa8:	2200      	movs	r2, #0
 8005faa:	701a      	strb	r2, [r3, #0]
											for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8005fac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fae:	3301      	adds	r3, #1
 8005fb0:	667b      	str	r3, [r7, #100]	; 0x64
 8005fb2:	e7d5      	b.n	8005f60 <_ZN10SmartDryer7navMenuEv+0x33c>
											break;
 8005fb4:	bf00      	nop
									break;
 8005fb6:	bf00      	nop
						break; // case MAIN_MENU
 8005fb8:	e017      	b.n	8005fea <_ZN10SmartDryer7navMenuEv+0x3c6>
						screen = ActualMenu->itemSelected + CHANGE_PROGRAM_1;
 8005fba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fbc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005fc0:	3304      	adds	r3, #4
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
						ExitNavMenu = true;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						break;
 8005fd0:	e00c      	b.n	8005fec <_ZN10SmartDryer7navMenuEv+0x3c8>
						screen = ActualMenu->itemSelected + START_PROGRAM_1;
 8005fd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fd4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005fd8:	3307      	adds	r3, #7
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
						ExitNavMenu = true;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						break;
 8005fe8:	e000      	b.n	8005fec <_ZN10SmartDryer7navMenuEv+0x3c8>
						break; // case MAIN_MENU
 8005fea:	bf00      	nop
				}
			break;// case LEFT_KEY
 8005fec:	e073      	b.n	80060d6 <_ZN10SmartDryer7navMenuEv+0x4b2>
			case DryerKey::OK_KEY:
				if(ActualMenu->withChebox)
 8005fee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ff0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d06d      	beq.n	80060d4 <_ZN10SmartDryer7navMenuEv+0x4b0>
				{
					for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	663b      	str	r3, [r7, #96]	; 0x60
 8005ffc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ffe:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006002:	461a      	mov	r2, r3
 8006004:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006006:	4293      	cmp	r3, r2
 8006008:	da09      	bge.n	800601e <_ZN10SmartDryer7navMenuEv+0x3fa>
						ActualMenu->itemsChecked[i] = false;
 800600a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800600c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800600e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006010:	4413      	add	r3, r2
 8006012:	2200      	movs	r2, #0
 8006014:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8006016:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006018:	3301      	adds	r3, #1
 800601a:	663b      	str	r3, [r7, #96]	; 0x60
 800601c:	e7ee      	b.n	8005ffc <_ZN10SmartDryer7navMenuEv+0x3d8>
					ActualMenu->itemsChecked[ActualMenu->itemSelected] = true;
 800601e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006022:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006024:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8006028:	4413      	add	r3, r2
 800602a:	2201      	movs	r2, #1
 800602c:	701a      	strb	r2, [r3, #0]
					switch(ActualMenu->paramType)
 800602e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006030:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006034:	2b01      	cmp	r3, #1
 8006036:	d002      	beq.n	800603e <_ZN10SmartDryer7navMenuEv+0x41a>
 8006038:	2b04      	cmp	r3, #4
 800603a:	d00f      	beq.n	800605c <_ZN10SmartDryer7navMenuEv+0x438>
								default:
									break;
							}
							break;
						default:
							break;
 800603c:	e024      	b.n	8006088 <_ZN10SmartDryer7navMenuEv+0x464>
							if(ActualMenu->itemSelected == 0)
 800603e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006040:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006044:	2b00      	cmp	r3, #0
 8006046:	d104      	bne.n	8006052 <_ZN10SmartDryer7navMenuEv+0x42e>
								*(bool *)ActualMenu->paramAssociated = false;
 8006048:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800604a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604c:	2200      	movs	r2, #0
 800604e:	701a      	strb	r2, [r3, #0]
							break;
 8006050:	e01a      	b.n	8006088 <_ZN10SmartDryer7navMenuEv+0x464>
								*(bool *)ActualMenu->paramAssociated = true;
 8006052:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006056:	2201      	movs	r2, #1
 8006058:	701a      	strb	r2, [r3, #0]
							break;
 800605a:	e015      	b.n	8006088 <_ZN10SmartDryer7navMenuEv+0x464>
							switch(MenuSel)
 800605c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006060:	2b03      	cmp	r3, #3
 8006062:	d000      	beq.n	8006066 <_ZN10SmartDryer7navMenuEv+0x442>
									break;
 8006064:	e00f      	b.n	8006086 <_ZN10SmartDryer7navMenuEv+0x462>
									*(float *)ActualMenu->paramAssociated = (float)paramTemperatures[ActualMenu->itemSelected];
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800606c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800606e:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8006072:	4413      	add	r3, r2
 8006074:	781a      	ldrb	r2, [r3, #0]
 8006076:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006078:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800607a:	4610      	mov	r0, r2
 800607c:	f7fa fd44 	bl	8000b08 <__aeabi_ui2f>
 8006080:	4603      	mov	r3, r0
 8006082:	6023      	str	r3, [r4, #0]
									break;
 8006084:	bf00      	nop
							break;
 8006086:	bf00      	nop
					}
				}
				break;
 8006088:	e024      	b.n	80060d4 <_ZN10SmartDryer7navMenuEv+0x4b0>
			case DryerKey::LONG_LEFT_KEY:
				switch(MenuSel)
 800608a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800608e:	3b01      	subs	r3, #1
 8006090:	2b07      	cmp	r3, #7
 8006092:	d81b      	bhi.n	80060cc <_ZN10SmartDryer7navMenuEv+0x4a8>
 8006094:	a201      	add	r2, pc, #4	; (adr r2, 800609c <_ZN10SmartDryer7navMenuEv+0x478>)
 8006096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609a:	bf00      	nop
 800609c:	080060bd 	.word	0x080060bd
 80060a0:	080060bd 	.word	0x080060bd
 80060a4:	080060bd 	.word	0x080060bd
 80060a8:	080060bd 	.word	0x080060bd
 80060ac:	080060cd 	.word	0x080060cd
 80060b0:	080060cd 	.word	0x080060cd
 80060b4:	080060bd 	.word	0x080060bd
 80060b8:	080060bd 	.word	0x080060bd
					case FAN_CTRL:
					case TEMP_CTRL:
					case START_DRYER_CTRL:
					case CHANGE_PROGRAMS_LIST:
					case START_PROGRAMS_LIST:
						MenuSel = MAIN_MENU;
 80060bc:	2300      	movs	r3, #0
 80060be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						ActualMenu = mainMenu;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060c8:	673b      	str	r3, [r7, #112]	; 0x70
						break;
 80060ca:	e000      	b.n	80060ce <_ZN10SmartDryer7navMenuEv+0x4aa>
					default:
						break;
 80060cc:	bf00      	nop
				}
				break;
 80060ce:	e002      	b.n	80060d6 <_ZN10SmartDryer7navMenuEv+0x4b2>
			case DryerKey::LONG_OK_KEY:
				break;
			default:
				break;
 80060d0:	bf00      	nop
 80060d2:	e000      	b.n	80060d6 <_ZN10SmartDryer7navMenuEv+0x4b2>
				break;
 80060d4:	bf00      	nop
		}
		if(WichKey != DryerKey::NO_KEY && WichKey != DryerKey::LEFT_KEY)
 80060d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060da:	2b08      	cmp	r3, #8
 80060dc:	d04d      	beq.n	800617a <_ZN10SmartDryer7navMenuEv+0x556>
 80060de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d049      	beq.n	800617a <_ZN10SmartDryer7navMenuEv+0x556>
		{
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 80060e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80060ec:	461a      	mov	r2, r3
 80060ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060f0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80060f4:	3b02      	subs	r3, #2
 80060f6:	429a      	cmp	r2, r3
 80060f8:	dd3a      	ble.n	8006170 <_ZN10SmartDryer7navMenuEv+0x54c>
			{
				if(ActualMenu->itemSelected - (ActualMenu->maxMenuLines - 2) < ActualMenu->maxMenuItems - 1)
 80060fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006100:	461a      	mov	r2, r3
 8006102:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006104:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006108:	3b02      	subs	r3, #2
 800610a:	1ad2      	subs	r2, r2, r3
 800610c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800610e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006112:	3b01      	subs	r3, #1
 8006114:	429a      	cmp	r2, r3
 8006116:	da0d      	bge.n	8006134 <_ZN10SmartDryer7navMenuEv+0x510>
					ActualMenu->topItemPos = ActualMenu->itemSelected - (ActualMenu->maxMenuLines - 2);
 8006118:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800611a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800611e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006120:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	b2db      	uxtb	r3, r3
 8006128:	3302      	adds	r3, #2
 800612a:	b2da      	uxtb	r2, r3
 800612c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800612e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006132:	e003      	b.n	800613c <_ZN10SmartDryer7navMenuEv+0x518>
				else
					ActualMenu->topItemPos = 0;
 8006134:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006136:	2200      	movs	r2, #0
 8006138:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				if(ActualMenu->itemSelected >= ActualMenu->maxMenuItems - ActualMenu->maxMenuLines)
 800613c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800613e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006142:	461a      	mov	r2, r3
 8006144:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006146:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800614a:	4619      	mov	r1, r3
 800614c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800614e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006152:	1acb      	subs	r3, r1, r3
 8006154:	429a      	cmp	r2, r3
 8006156:	db1a      	blt.n	800618e <_ZN10SmartDryer7navMenuEv+0x56a>
				{
					ActualMenu->topItemPos = ActualMenu->maxMenuItems - ActualMenu->maxMenuLines;
 8006158:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800615a:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800615e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006160:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	b2da      	uxtb	r2, r3
 8006168:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800616a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 800616e:	e00e      	b.n	800618e <_ZN10SmartDryer7navMenuEv+0x56a>
				}
			}
			else
				ActualMenu->topItemPos = 0;
 8006170:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006172:	2200      	movs	r2, #0
 8006174:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 8006178:	e009      	b.n	800618e <_ZN10SmartDryer7navMenuEv+0x56a>

		}
		else if(WichKey != DryerKey::NO_KEY)
 800617a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800617e:	2b08      	cmp	r3, #8
 8006180:	d006      	beq.n	8006190 <_ZN10SmartDryer7navMenuEv+0x56c>
		{
			showHelpMessageTimer->restart();
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006186:	4618      	mov	r0, r3
 8006188:	f7fd f905 	bl	8003396 <_ZN11ChronoTimer7restartEv>
 800618c:	e000      	b.n	8006190 <_ZN10SmartDryer7navMenuEv+0x56c>
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 800618e:	bf00      	nop
		}
		peripheralsControl();
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f7ff fcd7 	bl	8005b44 <_ZN10SmartDryer18peripheralsControlEv>
	while(!ExitNavMenu)
 8006196:	e57d      	b.n	8005c94 <_ZN10SmartDryer7navMenuEv+0x70>
	String Time = "", Date = "";
 8006198:	f107 0308 	add.w	r3, r7, #8
 800619c:	4618      	mov	r0, r3
 800619e:	f008 fa0a 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80061a2:	f107 0320 	add.w	r3, r7, #32
 80061a6:	4618      	mov	r0, r3
 80061a8:	f008 fa05 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}

}
 80061ac:	bf00      	nop
 80061ae:	3778      	adds	r7, #120	; 0x78
 80061b0:	46bd      	mov	sp, r7
 80061b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061b6:	bf00      	nop

080061b8 <_ZN10SmartDryer4testEv>:


void SmartDryer::test()
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b090      	sub	sp, #64	; 0x40
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
	testTimer->setTimer(5000);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c4:	f241 3188 	movw	r1, #5000	; 0x1388
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7fd f86f 	bl	80032ac <_ZN11ChronoTimer8setTimerEm>
	std::string Time = "";
 80061ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80061d2:	4618      	mov	r0, r3
 80061d4:	f008 f8c4 	bl	800e360 <_ZNSaIcEC1Ev>
 80061d8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80061dc:	f107 0314 	add.w	r3, r7, #20
 80061e0:	4978      	ldr	r1, [pc, #480]	; (80063c4 <_ZN10SmartDryer4testEv+0x20c>)
 80061e2:	4618      	mov	r0, r3
 80061e4:	f008 fb54 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80061e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80061ec:	4618      	mov	r0, r3
 80061ee:	f008 f8b8 	bl	800e362 <_ZNSaIcED1Ev>
	//	display->setupLcd();

	uint8_t TopPos1 = 0, ItemSel1 = 0, TopPos2 = 0, ItemSel2 = 0, MaxLines1 = 0, MaxLines2 = 0, MaxItemsMenu1 = 8, MaxItemsMenu2 = 8;
 80061f2:	2300      	movs	r3, #0
 80061f4:	74fb      	strb	r3, [r7, #19]
 80061f6:	2300      	movs	r3, #0
 80061f8:	74bb      	strb	r3, [r7, #18]
 80061fa:	2300      	movs	r3, #0
 80061fc:	747b      	strb	r3, [r7, #17]
 80061fe:	2300      	movs	r3, #0
 8006200:	743b      	strb	r3, [r7, #16]
 8006202:	2300      	movs	r3, #0
 8006204:	73fb      	strb	r3, [r7, #15]
 8006206:	2300      	movs	r3, #0
 8006208:	73bb      	strb	r3, [r7, #14]
 800620a:	2308      	movs	r3, #8
 800620c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8006210:	2308      	movs	r3, #8
 8006212:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	uint8_t *TopPosPtr = &TopPos1;
 8006216:	f107 0313 	add.w	r3, r7, #19
 800621a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t *ItemSelPtr = &ItemSel1;
 800621c:	f107 0312 	add.w	r3, r7, #18
 8006220:	63bb      	str	r3, [r7, #56]	; 0x38
	uint8_t *MaxLinesPtr = &MaxLines1;
 8006222:	f107 030f 	add.w	r3, r7, #15
 8006226:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t MaxItemsMenu = MaxItemsMenu1;
 8006228:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800622c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	bool SwitchMenu = true;
 8006230:	2301      	movs	r3, #1
 8006232:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	while(1)
	{
		uint8_t WichKey = DryerKey::NO_KEY;
 8006236:	2308      	movs	r3, #8
 8006238:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		display->clearFrameBuffer();
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4618      	mov	r0, r3
 8006242:	f7fe fb18 	bl	8004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		}
		else
		{
			//			  MaxLines2 = display->drawMenuList(40, 12, TopPos2, ItemSel2, MenuList2, MaxItemsMenu2, true, !SwitchMenu, display->displayFonts[NHDST7565_LCD::W_5_H_8]);
		}
		display->sendFrameBuffer();
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4618      	mov	r0, r3
 800624c:	f7fe fb20 	bl	8004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		WichKey = keyboard->checkKey();
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	4618      	mov	r0, r3
 8006256:	f7fe ffaf 	bl	80051b8 <_ZN8DryerKey8checkKeyEv>
 800625a:	4603      	mov	r3, r0
 800625c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		switch(WichKey)
 8006260:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006264:	2b07      	cmp	r3, #7
 8006266:	d867      	bhi.n	8006338 <_ZN10SmartDryer4testEv+0x180>
 8006268:	a201      	add	r2, pc, #4	; (adr r2, 8006270 <_ZN10SmartDryer4testEv+0xb8>)
 800626a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626e:	bf00      	nop
 8006270:	08006291 	.word	0x08006291
 8006274:	080062b5 	.word	0x080062b5
 8006278:	080062db 	.word	0x080062db
 800627c:	08006339 	.word	0x08006339
 8006280:	08006291 	.word	0x08006291
 8006284:	080062b5 	.word	0x080062b5
 8006288:	08006339 	.word	0x08006339
 800628c:	08006339 	.word	0x08006339
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				if(*ItemSelPtr > 0)
 8006290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d006      	beq.n	80062a6 <_ZN10SmartDryer4testEv+0xee>
					(*ItemSelPtr)--;
 8006298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	3b01      	subs	r3, #1
 800629e:	b2da      	uxtb	r2, r3
 80062a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a2:	701a      	strb	r2, [r3, #0]
				else
					(*ItemSelPtr) = MaxItemsMenu - 1;
				break;
 80062a4:	e049      	b.n	800633a <_ZN10SmartDryer4testEv+0x182>
					(*ItemSelPtr) = MaxItemsMenu - 1;
 80062a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80062aa:	3b01      	subs	r3, #1
 80062ac:	b2da      	uxtb	r2, r3
 80062ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b0:	701a      	strb	r2, [r3, #0]
				break;
 80062b2:	e042      	b.n	800633a <_ZN10SmartDryer4testEv+0x182>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				if(*ItemSelPtr < MaxItemsMenu - 1)
 80062b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	461a      	mov	r2, r3
 80062ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80062be:	3b01      	subs	r3, #1
 80062c0:	429a      	cmp	r2, r3
 80062c2:	da06      	bge.n	80062d2 <_ZN10SmartDryer4testEv+0x11a>
					(*ItemSelPtr)++;
 80062c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	3301      	adds	r3, #1
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ce:	701a      	strb	r2, [r3, #0]
				else
					(*ItemSelPtr) = 0;
				break;
 80062d0:	e033      	b.n	800633a <_ZN10SmartDryer4testEv+0x182>
					(*ItemSelPtr) = 0;
 80062d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d4:	2200      	movs	r2, #0
 80062d6:	701a      	strb	r2, [r3, #0]
				break;
 80062d8:	e02f      	b.n	800633a <_ZN10SmartDryer4testEv+0x182>
			case DryerKey::LEFT_KEY:
				SwitchMenu = !SwitchMenu;
 80062da:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80062de:	f083 0301 	eor.w	r3, r3, #1
 80062e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
				if(!SwitchMenu)
 80062e6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80062ea:	f083 0301 	eor.w	r3, r3, #1
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00d      	beq.n	8006310 <_ZN10SmartDryer4testEv+0x158>
				{
					TopPosPtr = &TopPos2;
 80062f4:	f107 0311 	add.w	r3, r7, #17
 80062f8:	63fb      	str	r3, [r7, #60]	; 0x3c
					ItemSelPtr = &ItemSel2;
 80062fa:	f107 0310 	add.w	r3, r7, #16
 80062fe:	63bb      	str	r3, [r7, #56]	; 0x38
					MaxLinesPtr = &MaxLines2;
 8006300:	f107 030e 	add.w	r3, r7, #14
 8006304:	637b      	str	r3, [r7, #52]	; 0x34
					MaxItemsMenu = MaxItemsMenu2;
 8006306:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800630a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
					ItemSelPtr = &ItemSel1;
					MaxLinesPtr = &MaxLines1;
					MaxItemsMenu = MaxItemsMenu1;

				}
				break;
 800630e:	e014      	b.n	800633a <_ZN10SmartDryer4testEv+0x182>
					TopPos2 = 0;
 8006310:	2300      	movs	r3, #0
 8006312:	747b      	strb	r3, [r7, #17]
					ItemSel2  =0;
 8006314:	2300      	movs	r3, #0
 8006316:	743b      	strb	r3, [r7, #16]
					MaxLines2 = 0;
 8006318:	2300      	movs	r3, #0
 800631a:	73bb      	strb	r3, [r7, #14]
					TopPosPtr = &TopPos1;
 800631c:	f107 0313 	add.w	r3, r7, #19
 8006320:	63fb      	str	r3, [r7, #60]	; 0x3c
					ItemSelPtr = &ItemSel1;
 8006322:	f107 0312 	add.w	r3, r7, #18
 8006326:	63bb      	str	r3, [r7, #56]	; 0x38
					MaxLinesPtr = &MaxLines1;
 8006328:	f107 030f 	add.w	r3, r7, #15
 800632c:	637b      	str	r3, [r7, #52]	; 0x34
					MaxItemsMenu = MaxItemsMenu1;
 800632e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8006332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;
 8006336:	e000      	b.n	800633a <_ZN10SmartDryer4testEv+0x182>

				break;
			case DryerKey::LONG_OK_KEY:
				break;
			default:
				break;
 8006338:	bf00      	nop
		}
		if(WichKey != DryerKey::NO_KEY && WichKey != DryerKey::LEFT_KEY)
 800633a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800633e:	2b08      	cmp	r3, #8
 8006340:	f43f af79 	beq.w	8006236 <_ZN10SmartDryer4testEv+0x7e>
 8006344:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006348:	2b02      	cmp	r3, #2
 800634a:	f43f af74 	beq.w	8006236 <_ZN10SmartDryer4testEv+0x7e>
		{
			if(*ItemSelPtr > *MaxLinesPtr - 2)
 800634e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	461a      	mov	r2, r3
 8006354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	3b02      	subs	r3, #2
 800635a:	429a      	cmp	r2, r3
 800635c:	dd1a      	ble.n	8006394 <_ZN10SmartDryer4testEv+0x1dc>
			{
				if(*ItemSelPtr - ((*MaxLinesPtr) - 2) < MaxItemsMenu - 1)
 800635e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	461a      	mov	r2, r3
 8006364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	3b02      	subs	r3, #2
 800636a:	1ad2      	subs	r2, r2, r3
 800636c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006370:	3b01      	subs	r3, #1
 8006372:	429a      	cmp	r2, r3
 8006374:	da0a      	bge.n	800638c <_ZN10SmartDryer4testEv+0x1d4>
					*TopPosPtr = (*ItemSelPtr) - ((*MaxLinesPtr) - 2);
 8006376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006378:	781a      	ldrb	r2, [r3, #0]
 800637a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	b2db      	uxtb	r3, r3
 8006382:	3302      	adds	r3, #2
 8006384:	b2da      	uxtb	r2, r3
 8006386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006388:	701a      	strb	r2, [r3, #0]
 800638a:	e006      	b.n	800639a <_ZN10SmartDryer4testEv+0x1e2>
				else
					*TopPosPtr = 0;
 800638c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800638e:	2200      	movs	r2, #0
 8006390:	701a      	strb	r2, [r3, #0]
 8006392:	e002      	b.n	800639a <_ZN10SmartDryer4testEv+0x1e2>
			}
			else
				*TopPosPtr = 0;
 8006394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006396:	2200      	movs	r2, #0
 8006398:	701a      	strb	r2, [r3, #0]
			if(*ItemSelPtr >= MaxItemsMenu - *MaxLinesPtr)
 800639a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	4619      	mov	r1, r3
 80063a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80063a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063a6:	7812      	ldrb	r2, [r2, #0]
 80063a8:	1a9b      	subs	r3, r3, r2
 80063aa:	4299      	cmp	r1, r3
 80063ac:	f6ff af43 	blt.w	8006236 <_ZN10SmartDryer4testEv+0x7e>
			{
				*TopPosPtr = MaxItemsMenu - *MaxLinesPtr;
 80063b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063be:	701a      	strb	r2, [r3, #0]
			}
		}
	}
 80063c0:	e739      	b.n	8006236 <_ZN10SmartDryer4testEv+0x7e>
 80063c2:	bf00      	nop
 80063c4:	0800f598 	.word	0x0800f598

080063c8 <_ZN10SmartDryer5setupEv>:
}

void SmartDryer::setup()
{
 80063c8:	b590      	push	{r4, r7, lr}
 80063ca:	b0cb      	sub	sp, #300	; 0x12c
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	1d3b      	adds	r3, r7, #4
 80063d0:	6018      	str	r0, [r3, #0]

	display->setupLcd();
 80063d2:	1d3b      	adds	r3, r7, #4
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4618      	mov	r0, r3
 80063da:	f7fe f977 	bl	80046cc <_ZN13NHDST7565_LCD8setupLcdEv>
	clock->setup();
 80063de:	1d3b      	adds	r3, r7, #4
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7fd f887 	bl	80034f8 <_ZN10DS1307_RTC5setupEv>
	rtcRunning = clock->isRunning();
 80063ea:	1d3b      	adds	r3, r7, #4
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7fd f89b 	bl	800352c <_ZN10DS1307_RTC9isRunningEv>
 80063f6:	4603      	mov	r3, r0
 80063f8:	461a      	mov	r2, r3
 80063fa:	1d3b      	adds	r3, r7, #4
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	const uint8_t NTemps =  sizeof(Temps)/sizeof(Temps[0]);
 8006402:	230d      	movs	r3, #13
 8006404:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	paramTemperatures = new uint8_t[NTemps];
 8006408:	200d      	movs	r0, #13
 800640a:	f007 ff8b 	bl	800e324 <_Znaj>
 800640e:	4603      	mov	r3, r0
 8006410:	461a      	mov	r2, r3
 8006412:	1d3b      	adds	r3, r7, #4
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	for(int i = 0; i < NTemps; i++)
 800641a:	2300      	movs	r3, #0
 800641c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006420:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006424:	2b0c      	cmp	r3, #12
 8006426:	dc16      	bgt.n	8006456 <_ZN10SmartDryer5setupEv+0x8e>
	{
		paramTemperatures[i] = 30 + (i * 5);
 8006428:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800642c:	b2db      	uxtb	r3, r3
 800642e:	461a      	mov	r2, r3
 8006430:	0092      	lsls	r2, r2, #2
 8006432:	4413      	add	r3, r2
 8006434:	b2da      	uxtb	r2, r3
 8006436:	1d3b      	adds	r3, r7, #4
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800643e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006442:	440b      	add	r3, r1
 8006444:	321e      	adds	r2, #30
 8006446:	b2d2      	uxtb	r2, r2
 8006448:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NTemps; i++)
 800644a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800644e:	3301      	adds	r3, #1
 8006450:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006454:	e7e4      	b.n	8006420 <_ZN10SmartDryer5setupEv+0x58>
	}

	physicalReleCtrl();
 8006456:	1d3b      	adds	r3, r7, #4
 8006458:	6818      	ldr	r0, [r3, #0]
 800645a:	f7ff fb35 	bl	8005ac8 <_ZN10SmartDryer16physicalReleCtrlEv>
	ledControl();
 800645e:	1d3b      	adds	r3, r7, #4
 8006460:	6818      	ldr	r0, [r3, #0]
 8006462:	f7ff f9b5 	bl	80057d0 <_ZN10SmartDryer10ledControlEv>


	mainMenuHelpMsgs.push_back("Accende o spegne la resistenza");
 8006466:	1d3b      	adds	r3, r7, #4
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f103 048c 	add.w	r4, r3, #140	; 0x8c
 800646e:	f107 0320 	add.w	r3, r7, #32
 8006472:	4618      	mov	r0, r3
 8006474:	f007 ff74 	bl	800e360 <_ZNSaIcEC1Ev>
 8006478:	f107 0220 	add.w	r2, r7, #32
 800647c:	f107 0308 	add.w	r3, r7, #8
 8006480:	49ae      	ldr	r1, [pc, #696]	; (800673c <_ZN10SmartDryer5setupEv+0x374>)
 8006482:	4618      	mov	r0, r3
 8006484:	f008 fa04 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006488:	f107 0308 	add.w	r3, r7, #8
 800648c:	4619      	mov	r1, r3
 800648e:	4620      	mov	r0, r4
 8006490:	f002 fa37 	bl	8008902 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8006494:	f107 0308 	add.w	r3, r7, #8
 8006498:	4618      	mov	r0, r3
 800649a:	f008 f88c 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800649e:	f107 0320 	add.w	r3, r7, #32
 80064a2:	4618      	mov	r0, r3
 80064a4:	f007 ff5d 	bl	800e362 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Accende o spegne la ventola");
 80064a8:	1d3b      	adds	r3, r7, #4
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f103 048c 	add.w	r4, r3, #140	; 0x8c
 80064b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80064b4:	4618      	mov	r0, r3
 80064b6:	f007 ff53 	bl	800e360 <_ZNSaIcEC1Ev>
 80064ba:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80064be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064c2:	499f      	ldr	r1, [pc, #636]	; (8006740 <_ZN10SmartDryer5setupEv+0x378>)
 80064c4:	4618      	mov	r0, r3
 80064c6:	f008 f9e3 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80064ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064ce:	4619      	mov	r1, r3
 80064d0:	4620      	mov	r0, r4
 80064d2:	f002 fa16 	bl	8008902 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 80064d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064da:	4618      	mov	r0, r3
 80064dc:	f008 f86b 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80064e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80064e4:	4618      	mov	r0, r3
 80064e6:	f007 ff3c 	bl	800e362 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Imposta la temperatura di servizio");
 80064ea:	1d3b      	adds	r3, r7, #4
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f103 048c 	add.w	r4, r3, #140	; 0x8c
 80064f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80064f6:	4618      	mov	r0, r3
 80064f8:	f007 ff32 	bl	800e360 <_ZNSaIcEC1Ev>
 80064fc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006500:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006504:	498f      	ldr	r1, [pc, #572]	; (8006744 <_ZN10SmartDryer5setupEv+0x37c>)
 8006506:	4618      	mov	r0, r3
 8006508:	f008 f9c2 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800650c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006510:	4619      	mov	r1, r3
 8006512:	4620      	mov	r0, r4
 8006514:	f002 f9f5 	bl	8008902 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8006518:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800651c:	4618      	mov	r0, r3
 800651e:	f008 f84a 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006522:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006526:	4618      	mov	r0, r3
 8006528:	f007 ff1b 	bl	800e362 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Avvia il dryer manualmente");
 800652c:	1d3b      	adds	r3, r7, #4
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f103 048c 	add.w	r4, r3, #140	; 0x8c
 8006534:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006538:	4618      	mov	r0, r3
 800653a:	f007 ff11 	bl	800e360 <_ZNSaIcEC1Ev>
 800653e:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8006542:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006546:	4980      	ldr	r1, [pc, #512]	; (8006748 <_ZN10SmartDryer5setupEv+0x380>)
 8006548:	4618      	mov	r0, r3
 800654a:	f008 f9a1 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800654e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006552:	4619      	mov	r1, r3
 8006554:	4620      	mov	r0, r4
 8006556:	f002 f9d4 	bl	8008902 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 800655a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800655e:	4618      	mov	r0, r3
 8006560:	f008 f829 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006564:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006568:	4618      	mov	r0, r3
 800656a:	f007 fefa 	bl	800e362 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Modifica l'ora di sistema");
 800656e:	1d3b      	adds	r3, r7, #4
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f103 048c 	add.w	r4, r3, #140	; 0x8c
 8006576:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800657a:	4618      	mov	r0, r3
 800657c:	f007 fef0 	bl	800e360 <_ZNSaIcEC1Ev>
 8006580:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8006584:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006588:	4970      	ldr	r1, [pc, #448]	; (800674c <_ZN10SmartDryer5setupEv+0x384>)
 800658a:	4618      	mov	r0, r3
 800658c:	f008 f980 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006590:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006594:	4619      	mov	r1, r3
 8006596:	4620      	mov	r0, r4
 8006598:	f002 f9b3 	bl	8008902 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 800659c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80065a0:	4618      	mov	r0, r3
 80065a2:	f008 f808 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80065a6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80065aa:	4618      	mov	r0, r3
 80065ac:	f007 fed9 	bl	800e362 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Modifica la data di sistema");
 80065b0:	1d3b      	adds	r3, r7, #4
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f103 048c 	add.w	r4, r3, #140	; 0x8c
 80065b8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80065bc:	4618      	mov	r0, r3
 80065be:	f007 fecf 	bl	800e360 <_ZNSaIcEC1Ev>
 80065c2:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80065c6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80065ca:	4961      	ldr	r1, [pc, #388]	; (8006750 <_ZN10SmartDryer5setupEv+0x388>)
 80065cc:	4618      	mov	r0, r3
 80065ce:	f008 f95f 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80065d2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80065d6:	4619      	mov	r1, r3
 80065d8:	4620      	mov	r0, r4
 80065da:	f002 f992 	bl	8008902 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 80065de:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80065e2:	4618      	mov	r0, r3
 80065e4:	f007 ffe7 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80065e8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80065ec:	4618      	mov	r0, r3
 80065ee:	f007 feb8 	bl	800e362 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Imposta i programmi");
 80065f2:	1d3b      	adds	r3, r7, #4
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f103 048c 	add.w	r4, r3, #140	; 0x8c
 80065fa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80065fe:	4618      	mov	r0, r3
 8006600:	f007 feae 	bl	800e360 <_ZNSaIcEC1Ev>
 8006604:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8006608:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800660c:	4951      	ldr	r1, [pc, #324]	; (8006754 <_ZN10SmartDryer5setupEv+0x38c>)
 800660e:	4618      	mov	r0, r3
 8006610:	f008 f93e 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006614:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006618:	4619      	mov	r1, r3
 800661a:	4620      	mov	r0, r4
 800661c:	f002 f971 	bl	8008902 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8006620:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006624:	4618      	mov	r0, r3
 8006626:	f007 ffc6 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800662a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800662e:	4618      	mov	r0, r3
 8006630:	f007 fe97 	bl	800e362 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Seleziona il programma da avviare");
 8006634:	1d3b      	adds	r3, r7, #4
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f103 048c 	add.w	r4, r3, #140	; 0x8c
 800663c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006640:	4618      	mov	r0, r3
 8006642:	f007 fe8d 	bl	800e360 <_ZNSaIcEC1Ev>
 8006646:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800664a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800664e:	4942      	ldr	r1, [pc, #264]	; (8006758 <_ZN10SmartDryer5setupEv+0x390>)
 8006650:	4618      	mov	r0, r3
 8006652:	f008 f91d 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006656:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800665a:	4619      	mov	r1, r3
 800665c:	4620      	mov	r0, r4
 800665e:	f002 f950 	bl	8008902 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8006662:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006666:	4618      	mov	r0, r3
 8006668:	f007 ffa5 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800666c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006670:	4618      	mov	r0, r3
 8006672:	f007 fe76 	bl	800e362 <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Mostra info sistema");
 8006676:	1d3b      	adds	r3, r7, #4
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f103 048c 	add.w	r4, r3, #140	; 0x8c
 800667e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006682:	4618      	mov	r0, r3
 8006684:	f007 fe6c 	bl	800e360 <_ZNSaIcEC1Ev>
 8006688:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800668c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006690:	4932      	ldr	r1, [pc, #200]	; (800675c <_ZN10SmartDryer5setupEv+0x394>)
 8006692:	4618      	mov	r0, r3
 8006694:	f008 f8fc 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006698:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800669c:	4619      	mov	r1, r3
 800669e:	4620      	mov	r0, r4
 80066a0:	f002 f92f 	bl	8008902 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 80066a4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80066a8:	4618      	mov	r0, r3
 80066aa:	f007 ff84 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80066ae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80066b2:	4618      	mov	r0, r3
 80066b4:	f007 fe55 	bl	800e362 <_ZNSaIcED1Ev>
	if(mainMenuHelpMsgs.size() < MAX_MENU_ITEMS)
 80066b8:	1d3b      	adds	r3, r7, #4
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	338c      	adds	r3, #140	; 0x8c
 80066be:	4618      	mov	r0, r3
 80066c0:	f002 f930 	bl	8008924 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b09      	cmp	r3, #9
 80066c8:	bf94      	ite	ls
 80066ca:	2301      	movls	r3, #1
 80066cc:	2300      	movhi	r3, #0
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d047      	beq.n	8006764 <_ZN10SmartDryer5setupEv+0x39c>
	{
		mainMenuHelpMsgs.clear();
 80066d4:	1d3b      	adds	r3, r7, #4
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	338c      	adds	r3, #140	; 0x8c
 80066da:	4618      	mov	r0, r3
 80066dc:	f002 f938 	bl	8008950 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5clearEv>
		for(int i = 0; i < MAX_MENU_ITEMS; i++)
 80066e0:	2300      	movs	r3, #0
 80066e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80066e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80066ea:	2b09      	cmp	r3, #9
 80066ec:	dc3a      	bgt.n	8006764 <_ZN10SmartDryer5setupEv+0x39c>
		{
			mainMenuHelpMsgs.push_back("");
 80066ee:	1d3b      	adds	r3, r7, #4
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f103 048c 	add.w	r4, r3, #140	; 0x8c
 80066f6:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80066fa:	4618      	mov	r0, r3
 80066fc:	f007 fe30 	bl	800e360 <_ZNSaIcEC1Ev>
 8006700:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8006704:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8006708:	4915      	ldr	r1, [pc, #84]	; (8006760 <_ZN10SmartDryer5setupEv+0x398>)
 800670a:	4618      	mov	r0, r3
 800670c:	f008 f8c0 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006710:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8006714:	4619      	mov	r1, r3
 8006716:	4620      	mov	r0, r4
 8006718:	f002 f8f3 	bl	8008902 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 800671c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8006720:	4618      	mov	r0, r3
 8006722:	f007 ff48 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006726:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800672a:	4618      	mov	r0, r3
 800672c:	f007 fe19 	bl	800e362 <_ZNSaIcED1Ev>
		for(int i = 0; i < MAX_MENU_ITEMS; i++)
 8006730:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006734:	3301      	adds	r3, #1
 8006736:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800673a:	e7d4      	b.n	80066e6 <_ZN10SmartDryer5setupEv+0x31e>
 800673c:	0800f59c 	.word	0x0800f59c
 8006740:	0800f5bc 	.word	0x0800f5bc
 8006744:	0800f5d8 	.word	0x0800f5d8
 8006748:	0800f5fc 	.word	0x0800f5fc
 800674c:	0800f618 	.word	0x0800f618
 8006750:	0800f634 	.word	0x0800f634
 8006754:	0800f650 	.word	0x0800f650
 8006758:	0800f664 	.word	0x0800f664
 800675c:	0800f688 	.word	0x0800f688
 8006760:	0800f598 	.word	0x0800f598
		}
	}


	mainMenu->menuTitle = "Menu principale";
 8006764:	1d3b      	adds	r3, r7, #4
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800676c:	49cc      	ldr	r1, [pc, #816]	; (8006aa0 <_ZN10SmartDryer5setupEv+0x6d8>)
 800676e:	4618      	mov	r0, r3
 8006770:	f007 ffdb 	bl	800e72a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	mainMenu->menuVoices = mainMenuVoices;
 8006774:	1d3b      	adds	r3, r7, #4
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800677c:	4ac9      	ldr	r2, [pc, #804]	; (8006aa4 <_ZN10SmartDryer5setupEv+0x6dc>)
 800677e:	619a      	str	r2, [r3, #24]
	mainMenu->XPos = MENU_LEFT_LIST_XPOS;
 8006780:	1d3b      	adds	r3, r7, #4
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006788:	2205      	movs	r2, #5
 800678a:	771a      	strb	r2, [r3, #28]
	mainMenu->YPos = MENU_LIST_YPOS;
 800678c:	1d3b      	adds	r3, r7, #4
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006794:	2214      	movs	r2, #20
 8006796:	775a      	strb	r2, [r3, #29]
	mainMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 8006798:	1d3b      	adds	r3, r7, #4
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	1d3b      	adds	r3, r7, #4
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067a6:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 80067aa:	621a      	str	r2, [r3, #32]
	mainMenu->topItemPos = 0;
 80067ac:	1d3b      	adds	r3, r7, #4
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	mainMenu->itemSelected = 0;
 80067ba:	1d3b      	adds	r3, r7, #4
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	mainMenu->maxMenuLines = 0;
 80067c8:	1d3b      	adds	r3, r7, #4
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	mainMenu->maxMenuItems = sizeof(mainMenuVoices)/sizeof(mainMenuVoices[0]);
 80067d6:	1d3b      	adds	r3, r7, #4
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067de:	2209      	movs	r2, #9
 80067e0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	mainMenu->withChebox = false;
 80067e4:	1d3b      	adds	r3, r7, #4
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	mainMenu->itemsChecked = NULL;
 80067f2:	1d3b      	adds	r3, r7, #4
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067fa:	2200      	movs	r2, #0
 80067fc:	62da      	str	r2, [r3, #44]	; 0x2c
	mainMenu->paramAssociated = NULL;
 80067fe:	1d3b      	adds	r3, r7, #4
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006806:	2200      	movs	r2, #0
 8006808:	631a      	str	r2, [r3, #48]	; 0x30
	mainMenu->paramType = NO_TYPE;
 800680a:	1d3b      	adds	r3, r7, #4
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006812:	2200      	movs	r2, #0
 8006814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	mainMenu->menuSelected = true;
 8006818:	1d3b      	adds	r3, r7, #4
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006820:	2201      	movs	r2, #1
 8006822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	thermoMenuCtrl->menuTitle = "Ctrl. thermo";
 8006826:	1d3b      	adds	r3, r7, #4
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800682e:	499e      	ldr	r1, [pc, #632]	; (8006aa8 <_ZN10SmartDryer5setupEv+0x6e0>)
 8006830:	4618      	mov	r0, r3
 8006832:	f007 ff7a 	bl	800e72a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	thermoMenuCtrl->menuVoices = OnOff;
 8006836:	1d3b      	adds	r3, r7, #4
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800683e:	4a9b      	ldr	r2, [pc, #620]	; (8006aac <_ZN10SmartDryer5setupEv+0x6e4>)
 8006840:	619a      	str	r2, [r3, #24]
	thermoMenuCtrl->XPos = MENU_RIGHT_LIST_XPOS;
 8006842:	1d3b      	adds	r3, r7, #4
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800684a:	223c      	movs	r2, #60	; 0x3c
 800684c:	771a      	strb	r2, [r3, #28]
	thermoMenuCtrl->YPos = MENU_LIST_YPOS;
 800684e:	1d3b      	adds	r3, r7, #4
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006856:	2214      	movs	r2, #20
 8006858:	775a      	strb	r2, [r3, #29]
	thermoMenuCtrl->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 800685a:	1d3b      	adds	r3, r7, #4
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	1d3b      	adds	r3, r7, #4
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006868:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 800686c:	621a      	str	r2, [r3, #32]
	thermoMenuCtrl->topItemPos = 0;
 800686e:	1d3b      	adds	r3, r7, #4
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006876:	2200      	movs	r2, #0
 8006878:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	thermoMenuCtrl->itemSelected = 0;
 800687c:	1d3b      	adds	r3, r7, #4
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006884:	2200      	movs	r2, #0
 8006886:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	thermoMenuCtrl->maxMenuLines = 0;
 800688a:	1d3b      	adds	r3, r7, #4
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006892:	2200      	movs	r2, #0
 8006894:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	thermoMenuCtrl->maxMenuItems = sizeof(OnOff)/sizeof(OnOff[0]);
 8006898:	1d3b      	adds	r3, r7, #4
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068a0:	2202      	movs	r2, #2
 80068a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	thermoMenuCtrl->withChebox = true;
 80068a6:	1d3b      	adds	r3, r7, #4
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	thermoMenuCtrl->itemsChecked = new bool(thermoMenuCtrl->maxMenuItems);
 80068b4:	2001      	movs	r0, #1
 80068b6:	f007 fd37 	bl	800e328 <_Znwj>
 80068ba:	4603      	mov	r3, r0
 80068bc:	1d3a      	adds	r2, r7, #4
 80068be:	6812      	ldr	r2, [r2, #0]
 80068c0:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 80068c4:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 80068c8:	2a00      	cmp	r2, #0
 80068ca:	bf14      	ite	ne
 80068cc:	2201      	movne	r2, #1
 80068ce:	2200      	moveq	r2, #0
 80068d0:	b2d2      	uxtb	r2, r2
 80068d2:	701a      	strb	r2, [r3, #0]
 80068d4:	1d3a      	adds	r2, r7, #4
 80068d6:	6812      	ldr	r2, [r2, #0]
 80068d8:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 80068dc:	62d3      	str	r3, [r2, #44]	; 0x2c
	thermoMenuCtrl->paramAssociated = (bool *)&statusParam->thermoOn;
 80068de:	1d3b      	adds	r3, r7, #4
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068e4:	1d3b      	adds	r3, r7, #4
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068ec:	3201      	adds	r2, #1
 80068ee:	631a      	str	r2, [r3, #48]	; 0x30
	thermoMenuCtrl->paramType = PARAM_BOOL_TYPE;
 80068f0:	1d3b      	adds	r3, r7, #4
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068f8:	2201      	movs	r2, #1
 80068fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	thermoMenuCtrl->menuSelected = true;
 80068fe:	1d3b      	adds	r3, r7, #4
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	fanMenuCtrl->menuTitle = "Ctrl. ventola";
 800690c:	1d3b      	adds	r3, r7, #4
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006914:	4966      	ldr	r1, [pc, #408]	; (8006ab0 <_ZN10SmartDryer5setupEv+0x6e8>)
 8006916:	4618      	mov	r0, r3
 8006918:	f007 ff07 	bl	800e72a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	fanMenuCtrl->menuVoices = OnOff;
 800691c:	1d3b      	adds	r3, r7, #4
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006924:	4a61      	ldr	r2, [pc, #388]	; (8006aac <_ZN10SmartDryer5setupEv+0x6e4>)
 8006926:	619a      	str	r2, [r3, #24]
	fanMenuCtrl->XPos = MENU_RIGHT_LIST_XPOS;
 8006928:	1d3b      	adds	r3, r7, #4
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006930:	223c      	movs	r2, #60	; 0x3c
 8006932:	771a      	strb	r2, [r3, #28]
	fanMenuCtrl->YPos = MENU_LIST_YPOS;
 8006934:	1d3b      	adds	r3, r7, #4
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800693c:	2214      	movs	r2, #20
 800693e:	775a      	strb	r2, [r3, #29]
	fanMenuCtrl->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 8006940:	1d3b      	adds	r3, r7, #4
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	1d3b      	adds	r3, r7, #4
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800694e:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8006952:	621a      	str	r2, [r3, #32]
	fanMenuCtrl->topItemPos = 0;
 8006954:	1d3b      	adds	r3, r7, #4
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800695c:	2200      	movs	r2, #0
 800695e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	fanMenuCtrl->itemSelected = 0;
 8006962:	1d3b      	adds	r3, r7, #4
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800696a:	2200      	movs	r2, #0
 800696c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	fanMenuCtrl->maxMenuLines = 0;
 8006970:	1d3b      	adds	r3, r7, #4
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006978:	2200      	movs	r2, #0
 800697a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	fanMenuCtrl->maxMenuItems = sizeof(OnOff)/sizeof(OnOff[0]);
 800697e:	1d3b      	adds	r3, r7, #4
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006986:	2202      	movs	r2, #2
 8006988:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	fanMenuCtrl->withChebox = true;
 800698c:	1d3b      	adds	r3, r7, #4
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006994:	2201      	movs	r2, #1
 8006996:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	fanMenuCtrl->itemsChecked = new bool(fanMenuCtrl->maxMenuItems);
 800699a:	2001      	movs	r0, #1
 800699c:	f007 fcc4 	bl	800e328 <_Znwj>
 80069a0:	4603      	mov	r3, r0
 80069a2:	1d3a      	adds	r2, r7, #4
 80069a4:	6812      	ldr	r2, [r2, #0]
 80069a6:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 80069aa:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 80069ae:	2a00      	cmp	r2, #0
 80069b0:	bf14      	ite	ne
 80069b2:	2201      	movne	r2, #1
 80069b4:	2200      	moveq	r2, #0
 80069b6:	b2d2      	uxtb	r2, r2
 80069b8:	701a      	strb	r2, [r3, #0]
 80069ba:	1d3a      	adds	r2, r7, #4
 80069bc:	6812      	ldr	r2, [r2, #0]
 80069be:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 80069c2:	62d3      	str	r3, [r2, #44]	; 0x2c
	fanMenuCtrl->paramAssociated = (bool *)&statusParam->fanOn;
 80069c4:	1d3b      	adds	r3, r7, #4
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069ca:	1d3b      	adds	r3, r7, #4
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80069d2:	3202      	adds	r2, #2
 80069d4:	631a      	str	r2, [r3, #48]	; 0x30
	fanMenuCtrl->paramType = PARAM_BOOL_TYPE;
 80069d6:	1d3b      	adds	r3, r7, #4
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	fanMenuCtrl->menuSelected = true;
 80069e4:	1d3b      	adds	r3, r7, #4
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	startDryerMenu->menuTitle = "Avvia dryer";
 80069f2:	1d3b      	adds	r3, r7, #4
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80069fa:	492e      	ldr	r1, [pc, #184]	; (8006ab4 <_ZN10SmartDryer5setupEv+0x6ec>)
 80069fc:	4618      	mov	r0, r3
 80069fe:	f007 fe94 	bl	800e72a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	startDryerMenu->menuVoices = OnOff;
 8006a02:	1d3b      	adds	r3, r7, #4
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006a0a:	4a28      	ldr	r2, [pc, #160]	; (8006aac <_ZN10SmartDryer5setupEv+0x6e4>)
 8006a0c:	619a      	str	r2, [r3, #24]
	startDryerMenu->XPos = MENU_RIGHT_LIST_XPOS;
 8006a0e:	1d3b      	adds	r3, r7, #4
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006a16:	223c      	movs	r2, #60	; 0x3c
 8006a18:	771a      	strb	r2, [r3, #28]
	startDryerMenu->YPos = MENU_LIST_YPOS;
 8006a1a:	1d3b      	adds	r3, r7, #4
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006a22:	2214      	movs	r2, #20
 8006a24:	775a      	strb	r2, [r3, #29]
	startDryerMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 8006a26:	1d3b      	adds	r3, r7, #4
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	1d3b      	adds	r3, r7, #4
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006a34:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8006a38:	621a      	str	r2, [r3, #32]
	startDryerMenu->topItemPos = 0;
 8006a3a:	1d3b      	adds	r3, r7, #4
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	startDryerMenu->itemSelected = 0;
 8006a48:	1d3b      	adds	r3, r7, #4
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	startDryerMenu->maxMenuLines = 0;
 8006a56:	1d3b      	adds	r3, r7, #4
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	startDryerMenu->maxMenuItems = sizeof(OnOff)/sizeof(OnOff[0]);
 8006a64:	1d3b      	adds	r3, r7, #4
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006a6c:	2202      	movs	r2, #2
 8006a6e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	startDryerMenu->withChebox = true;
 8006a72:	1d3b      	adds	r3, r7, #4
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	startDryerMenu->itemsChecked = new bool(startDryerMenu->maxMenuItems);
 8006a80:	2001      	movs	r0, #1
 8006a82:	f007 fc51 	bl	800e328 <_Znwj>
 8006a86:	4603      	mov	r3, r0
 8006a88:	1d3a      	adds	r2, r7, #4
 8006a8a:	6812      	ldr	r2, [r2, #0]
 8006a8c:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 8006a90:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8006a94:	2a00      	cmp	r2, #0
 8006a96:	bf14      	ite	ne
 8006a98:	2201      	movne	r2, #1
 8006a9a:	2200      	moveq	r2, #0
 8006a9c:	e00c      	b.n	8006ab8 <_ZN10SmartDryer5setupEv+0x6f0>
 8006a9e:	bf00      	nop
 8006aa0:	0800f69c 	.word	0x0800f69c
 8006aa4:	20000030 	.word	0x20000030
 8006aa8:	0800f6ac 	.word	0x0800f6ac
 8006aac:	20000054 	.word	0x20000054
 8006ab0:	0800f6bc 	.word	0x0800f6bc
 8006ab4:	0800f4e0 	.word	0x0800f4e0
 8006ab8:	b2d2      	uxtb	r2, r2
 8006aba:	701a      	strb	r2, [r3, #0]
 8006abc:	1d3a      	adds	r2, r7, #4
 8006abe:	6812      	ldr	r2, [r2, #0]
 8006ac0:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 8006ac4:	62d3      	str	r3, [r2, #44]	; 0x2c
	startDryerMenu->paramAssociated = (bool *)&statusParam->dryerOn;
 8006ac6:	1d3b      	adds	r3, r7, #4
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006acc:	1d3b      	adds	r3, r7, #4
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006ad4:	631a      	str	r2, [r3, #48]	; 0x30
	startDryerMenu->paramType = PARAM_BOOL_TYPE;
 8006ad6:	1d3b      	adds	r3, r7, #4
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	startDryerMenu->menuSelected = true;
 8006ae4:	1d3b      	adds	r3, r7, #4
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	tempMenuCtrl->menuTitle = "Imposta temp.";
 8006af2:	1d3b      	adds	r3, r7, #4
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006afa:	499b      	ldr	r1, [pc, #620]	; (8006d68 <_ZN10SmartDryer5setupEv+0x9a0>)
 8006afc:	4618      	mov	r0, r3
 8006afe:	f007 fe14 	bl	800e72a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	tempMenuCtrl->menuVoices = Temps;
 8006b02:	1d3b      	adds	r3, r7, #4
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b0a:	4a98      	ldr	r2, [pc, #608]	; (8006d6c <_ZN10SmartDryer5setupEv+0x9a4>)
 8006b0c:	619a      	str	r2, [r3, #24]
	tempMenuCtrl->XPos = MENU_RIGHT_LIST_XPOS;
 8006b0e:	1d3b      	adds	r3, r7, #4
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b16:	223c      	movs	r2, #60	; 0x3c
 8006b18:	771a      	strb	r2, [r3, #28]
	tempMenuCtrl->YPos = MENU_LIST_YPOS;
 8006b1a:	1d3b      	adds	r3, r7, #4
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b22:	2214      	movs	r2, #20
 8006b24:	775a      	strb	r2, [r3, #29]
	tempMenuCtrl->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 8006b26:	1d3b      	adds	r3, r7, #4
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	1d3b      	adds	r3, r7, #4
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b34:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8006b38:	621a      	str	r2, [r3, #32]
	tempMenuCtrl->topItemPos = 0;
 8006b3a:	1d3b      	adds	r3, r7, #4
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	tempMenuCtrl->itemSelected = 0;
 8006b48:	1d3b      	adds	r3, r7, #4
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	tempMenuCtrl->maxMenuLines = 0;
 8006b56:	1d3b      	adds	r3, r7, #4
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	tempMenuCtrl->maxMenuItems = sizeof(Temps)/sizeof(Temps[0]);;
 8006b64:	1d3b      	adds	r3, r7, #4
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b6c:	220d      	movs	r2, #13
 8006b6e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	tempMenuCtrl->withChebox = true;
 8006b72:	1d3b      	adds	r3, r7, #4
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	tempMenuCtrl->itemsChecked = new bool(tempMenuCtrl->maxMenuItems);
 8006b80:	2001      	movs	r0, #1
 8006b82:	f007 fbd1 	bl	800e328 <_Znwj>
 8006b86:	4603      	mov	r3, r0
 8006b88:	1d3a      	adds	r2, r7, #4
 8006b8a:	6812      	ldr	r2, [r2, #0]
 8006b8c:	f8d2 20a4 	ldr.w	r2, [r2, #164]	; 0xa4
 8006b90:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8006b94:	2a00      	cmp	r2, #0
 8006b96:	bf14      	ite	ne
 8006b98:	2201      	movne	r2, #1
 8006b9a:	2200      	moveq	r2, #0
 8006b9c:	b2d2      	uxtb	r2, r2
 8006b9e:	701a      	strb	r2, [r3, #0]
 8006ba0:	1d3a      	adds	r2, r7, #4
 8006ba2:	6812      	ldr	r2, [r2, #0]
 8006ba4:	f8d2 20a4 	ldr.w	r2, [r2, #164]	; 0xa4
 8006ba8:	62d3      	str	r3, [r2, #44]	; 0x2c
	tempMenuCtrl->paramAssociated = (float *)&statusParam->temperatureSetted;
 8006baa:	1d3b      	adds	r3, r7, #4
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bb0:	1d3b      	adds	r3, r7, #4
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006bb8:	3204      	adds	r2, #4
 8006bba:	631a      	str	r2, [r3, #48]	; 0x30
	tempMenuCtrl->paramType = PARAM_FLOAT_TYPE;
 8006bbc:	1d3b      	adds	r3, r7, #4
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006bc4:	2204      	movs	r2, #4
 8006bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	tempMenuCtrl->menuSelected = true;
 8006bca:	1d3b      	adds	r3, r7, #4
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	changeProgramsMenu->menuTitle = "Modifica programma";
 8006bd8:	1d3b      	adds	r3, r7, #4
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006be0:	4963      	ldr	r1, [pc, #396]	; (8006d70 <_ZN10SmartDryer5setupEv+0x9a8>)
 8006be2:	4618      	mov	r0, r3
 8006be4:	f007 fda1 	bl	800e72a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	changeProgramsMenu->menuVoices = programsMenuVoices;
 8006be8:	1d3b      	adds	r3, r7, #4
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006bf0:	4a60      	ldr	r2, [pc, #384]	; (8006d74 <_ZN10SmartDryer5setupEv+0x9ac>)
 8006bf2:	619a      	str	r2, [r3, #24]
	changeProgramsMenu->XPos = MENU_LEFT_LIST_XPOS;
 8006bf4:	1d3b      	adds	r3, r7, #4
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006bfc:	2205      	movs	r2, #5
 8006bfe:	771a      	strb	r2, [r3, #28]
	changeProgramsMenu->YPos = MENU_LIST_YPOS;
 8006c00:	1d3b      	adds	r3, r7, #4
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006c08:	2214      	movs	r2, #20
 8006c0a:	775a      	strb	r2, [r3, #29]
	changeProgramsMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 8006c0c:	1d3b      	adds	r3, r7, #4
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	1d3b      	adds	r3, r7, #4
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006c1a:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8006c1e:	621a      	str	r2, [r3, #32]
	changeProgramsMenu->topItemPos = 0;
 8006c20:	1d3b      	adds	r3, r7, #4
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	changeProgramsMenu->itemSelected = 0;
 8006c2e:	1d3b      	adds	r3, r7, #4
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	changeProgramsMenu->maxMenuLines = 0;
 8006c3c:	1d3b      	adds	r3, r7, #4
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	changeProgramsMenu->maxMenuItems = sizeof(programsMenuVoices)/sizeof(programsMenuVoices[0]);
 8006c4a:	1d3b      	adds	r3, r7, #4
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006c52:	2203      	movs	r2, #3
 8006c54:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	changeProgramsMenu->withChebox = false;
 8006c58:	1d3b      	adds	r3, r7, #4
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	changeProgramsMenu->itemsChecked = NULL;
 8006c66:	1d3b      	adds	r3, r7, #4
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006c6e:	2200      	movs	r2, #0
 8006c70:	62da      	str	r2, [r3, #44]	; 0x2c
	changeProgramsMenu->paramAssociated = NULL;
 8006c72:	1d3b      	adds	r3, r7, #4
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	631a      	str	r2, [r3, #48]	; 0x30
	changeProgramsMenu->paramType = NO_TYPE;
 8006c7e:	1d3b      	adds	r3, r7, #4
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	changeProgramsMenu->menuSelected = true;
 8006c8c:	1d3b      	adds	r3, r7, #4
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	startProgramsMenu->menuTitle = "Avvia programma";
 8006c9a:	1d3b      	adds	r3, r7, #4
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ca2:	4935      	ldr	r1, [pc, #212]	; (8006d78 <_ZN10SmartDryer5setupEv+0x9b0>)
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f007 fd40 	bl	800e72a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	startProgramsMenu->menuVoices = programsMenuVoices;
 8006caa:	1d3b      	adds	r3, r7, #4
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cb2:	4a30      	ldr	r2, [pc, #192]	; (8006d74 <_ZN10SmartDryer5setupEv+0x9ac>)
 8006cb4:	619a      	str	r2, [r3, #24]
	startProgramsMenu->XPos = MENU_LEFT_LIST_XPOS;
 8006cb6:	1d3b      	adds	r3, r7, #4
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cbe:	2205      	movs	r2, #5
 8006cc0:	771a      	strb	r2, [r3, #28]
	startProgramsMenu->YPos = MENU_LIST_YPOS;
 8006cc2:	1d3b      	adds	r3, r7, #4
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cca:	2214      	movs	r2, #20
 8006ccc:	775a      	strb	r2, [r3, #29]
	startProgramsMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 8006cce:	1d3b      	adds	r3, r7, #4
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	1d3b      	adds	r3, r7, #4
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cdc:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8006ce0:	621a      	str	r2, [r3, #32]
	startProgramsMenu->topItemPos = 0;
 8006ce2:	1d3b      	adds	r3, r7, #4
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	startProgramsMenu->itemSelected = 0;
 8006cf0:	1d3b      	adds	r3, r7, #4
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	startProgramsMenu->maxMenuLines = 0;
 8006cfe:	1d3b      	adds	r3, r7, #4
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	startProgramsMenu->maxMenuItems = sizeof(programsMenuVoices)/sizeof(programsMenuVoices[0]);
 8006d0c:	1d3b      	adds	r3, r7, #4
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d14:	2203      	movs	r2, #3
 8006d16:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	startProgramsMenu->withChebox = false;
 8006d1a:	1d3b      	adds	r3, r7, #4
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	startProgramsMenu->itemsChecked = NULL;
 8006d28:	1d3b      	adds	r3, r7, #4
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d30:	2200      	movs	r2, #0
 8006d32:	62da      	str	r2, [r3, #44]	; 0x2c
	startProgramsMenu->paramAssociated = NULL;
 8006d34:	1d3b      	adds	r3, r7, #4
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	631a      	str	r2, [r3, #48]	; 0x30
	startProgramsMenu->paramType = NO_TYPE;
 8006d40:	1d3b      	adds	r3, r7, #4
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	startProgramsMenu->menuSelected = true;
 8006d4e:	1d3b      	adds	r3, r7, #4
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	if(eepromEnabled)
	{

	}

}
 8006d5c:	bf00      	nop
 8006d5e:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd90      	pop	{r4, r7, pc}
 8006d66:	bf00      	nop
 8006d68:	0800f4d0 	.word	0x0800f4d0
 8006d6c:	2000005c 	.word	0x2000005c
 8006d70:	0800f6cc 	.word	0x0800f6cc
 8006d74:	20000090 	.word	0x20000090
 8006d78:	0800f51c 	.word	0x0800f51c

08006d7c <_ZN10SmartDryer10changeTimeEv>:


void SmartDryer::changeTime()
{
 8006d7c:	b590      	push	{r4, r7, lr}
 8006d7e:	b0bd      	sub	sp, #244	; 0xf4
 8006d80:	af02      	add	r7, sp, #8
 8006d82:	6078      	str	r0, [r7, #4]
	bool ExitChangeTime = false;
 8006d84:	2300      	movs	r3, #0
 8006d86:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
	uint8_t Hour = 0, Minute = 0;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
 8006d90:	2300      	movs	r3, #0
 8006d92:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
	bool IsHours = true;
 8006d96:	2301      	movs	r3, #1
 8006d98:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
	String Title = "", Number = "";
 8006d9c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006da0:	4618      	mov	r0, r3
 8006da2:	f007 fadd 	bl	800e360 <_ZNSaIcEC1Ev>
 8006da6:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8006daa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006dae:	49cb      	ldr	r1, [pc, #812]	; (80070dc <_ZN10SmartDryer10changeTimeEv+0x360>)
 8006db0:	4618      	mov	r0, r3
 8006db2:	f007 fd6d 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006db6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f007 fad1 	bl	800e362 <_ZNSaIcED1Ev>
 8006dc0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f007 facb 	bl	800e360 <_ZNSaIcEC1Ev>
 8006dca:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8006dce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006dd2:	49c2      	ldr	r1, [pc, #776]	; (80070dc <_ZN10SmartDryer10changeTimeEv+0x360>)
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f007 fd5b 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006dda:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006dde:	4618      	mov	r0, r3
 8006de0:	f007 fabf 	bl	800e362 <_ZNSaIcED1Ev>
	String Time = "", Date = "";
 8006de4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006de8:	4618      	mov	r0, r3
 8006dea:	f007 fab9 	bl	800e360 <_ZNSaIcEC1Ev>
 8006dee:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8006df2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006df6:	49b9      	ldr	r1, [pc, #740]	; (80070dc <_ZN10SmartDryer10changeTimeEv+0x360>)
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f007 fd49 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006dfe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006e02:	4618      	mov	r0, r3
 8006e04:	f007 faad 	bl	800e362 <_ZNSaIcED1Ev>
 8006e08:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f007 faa7 	bl	800e360 <_ZNSaIcEC1Ev>
 8006e12:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8006e16:	f107 0310 	add.w	r3, r7, #16
 8006e1a:	49b0      	ldr	r1, [pc, #704]	; (80070dc <_ZN10SmartDryer10changeTimeEv+0x360>)
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f007 fd37 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8006e22:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006e26:	4618      	mov	r0, r3
 8006e28:	f007 fa9b 	bl	800e362 <_ZNSaIcED1Ev>
	while(!ExitChangeTime)
 8006e2c:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f040 813b 	bne.w	80070ac <_ZN10SmartDryer10changeTimeEv+0x330>
	{
		display->clearFrameBuffer();
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fd fd1b 	bl	8004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 8006e40:	f107 0210 	add.w	r2, r7, #16
 8006e44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006e48:	4619      	mov	r1, r3
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f7fe fe8f 	bl	8005b6e <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		if(IsHours)
 8006e50:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d01b      	beq.n	8006e90 <_ZN10SmartDryer10changeTimeEv+0x114>
		{
			Title = "Imposta ora";
 8006e58:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006e5c:	49a0      	ldr	r1, [pc, #640]	; (80070e0 <_ZN10SmartDryer10changeTimeEv+0x364>)
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f007 fc63 	bl	800e72a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Hour);
 8006e64:	f897 20e6 	ldrb.w	r2, [r7, #230]	; 0xe6
 8006e68:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006e6c:	4611      	mov	r1, r2
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7fc fad2 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8006e74:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8006e78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006e7c:	4611      	mov	r1, r2
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f007 fba5 	bl	800e5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8006e84:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f007 fb94 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006e8e:	e01a      	b.n	8006ec6 <_ZN10SmartDryer10changeTimeEv+0x14a>
		}
		else
		{
			Title = "Imposta minuto";
 8006e90:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006e94:	4993      	ldr	r1, [pc, #588]	; (80070e4 <_ZN10SmartDryer10changeTimeEv+0x368>)
 8006e96:	4618      	mov	r0, r3
 8006e98:	f007 fc47 	bl	800e72a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Minute);
 8006e9c:	f897 20e5 	ldrb.w	r2, [r7, #229]	; 0xe5
 8006ea0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006ea4:	4611      	mov	r1, r2
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7fc fab6 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8006eac:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8006eb0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006eb4:	4611      	mov	r1, r2
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f007 fb89 	bl	800e5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8006ebc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f007 fb78 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
		display->drawString(Title, NHDST7565_LCD::CENTER_POS, 5, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681c      	ldr	r4, [r3, #0]
 8006eca:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006ece:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006ed2:	4611      	mov	r1, r2
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f007 fca8 	bl	800e82a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006ee2:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	2305      	movs	r3, #5
 8006eea:	2283      	movs	r2, #131	; 0x83
 8006eec:	4620      	mov	r0, r4
 8006eee:	f7fd fcea 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8006ef2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f007 fb5d 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(Number, NHDST7565_LCD::CENTER_POS, 30, display->displayFonts[NHDST7565_LCD::W_9_H_17_B]);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681c      	ldr	r4, [r3, #0]
 8006f00:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006f04:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006f08:	4611      	mov	r1, r2
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f007 fc8d 	bl	800e82a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006f18:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8006f1c:	9300      	str	r3, [sp, #0]
 8006f1e:	231e      	movs	r3, #30
 8006f20:	2283      	movs	r2, #131	; 0x83
 8006f22:	4620      	mov	r0, r4
 8006f24:	f7fd fccf 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8006f28:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f007 fb42 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawSymbol(60, 30, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x0070); // triangolo alto
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6818      	ldr	r0, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8006f3e:	2370      	movs	r3, #112	; 0x70
 8006f40:	9300      	str	r3, [sp, #0]
 8006f42:	4613      	mov	r3, r2
 8006f44:	221e      	movs	r2, #30
 8006f46:	213c      	movs	r1, #60	; 0x3c
 8006f48:	f7fd ff6c 	bl	8004e24 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->drawSymbol(60, 55, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x006D); // triangolo basso
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6818      	ldr	r0, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8006f58:	236d      	movs	r3, #109	; 0x6d
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	2237      	movs	r2, #55	; 0x37
 8006f60:	213c      	movs	r1, #60	; 0x3c
 8006f62:	f7fd ff5f 	bl	8004e24 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		// TODO scrivere che si preme ok per andare avanti o long ok per tornare indietro
		display->sendFrameBuffer();
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fd fc90 	bl	8004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 8006f70:	2308      	movs	r3, #8
 8006f72:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
		WichKey = keyboard->checkKey();
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7fe f91c 	bl	80051b8 <_ZN8DryerKey8checkKeyEv>
 8006f80:	4603      	mov	r3, r0
 8006f82:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
		switch(WichKey)
 8006f86:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006f8a:	2b07      	cmp	r3, #7
 8006f8c:	f200 8087 	bhi.w	800709e <_ZN10SmartDryer10changeTimeEv+0x322>
 8006f90:	a201      	add	r2, pc, #4	; (adr r2, 8006f98 <_ZN10SmartDryer10changeTimeEv+0x21c>)
 8006f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f96:	bf00      	nop
 8006f98:	08006fb9 	.word	0x08006fb9
 8006f9c:	08006ff9 	.word	0x08006ff9
 8006fa0:	0800709f 	.word	0x0800709f
 8006fa4:	08007039 	.word	0x08007039
 8006fa8:	08006fb9 	.word	0x08006fb9
 8006fac:	08006ff9 	.word	0x08006ff9
 8006fb0:	08007097 	.word	0x08007097
 8006fb4:	08007081 	.word	0x08007081
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				if(IsHours)
 8006fb8:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00d      	beq.n	8006fdc <_ZN10SmartDryer10changeTimeEv+0x260>
				{
					if(Hour > 0)
 8006fc0:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d005      	beq.n	8006fd4 <_ZN10SmartDryer10changeTimeEv+0x258>
						Hour--;
 8006fc8:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
					if(Minute > 0)
						Minute--;
					else
						Minute = 59;
				}
				break;
 8006fd2:	e067      	b.n	80070a4 <_ZN10SmartDryer10changeTimeEv+0x328>
						Hour = 23;
 8006fd4:	2317      	movs	r3, #23
 8006fd6:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
				break;
 8006fda:	e063      	b.n	80070a4 <_ZN10SmartDryer10changeTimeEv+0x328>
					if(Minute > 0)
 8006fdc:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d005      	beq.n	8006ff0 <_ZN10SmartDryer10changeTimeEv+0x274>
						Minute--;
 8006fe4:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 8006fee:	e059      	b.n	80070a4 <_ZN10SmartDryer10changeTimeEv+0x328>
						Minute = 59;
 8006ff0:	233b      	movs	r3, #59	; 0x3b
 8006ff2:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 8006ff6:	e055      	b.n	80070a4 <_ZN10SmartDryer10changeTimeEv+0x328>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				if(IsHours)
 8006ff8:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00d      	beq.n	800701c <_ZN10SmartDryer10changeTimeEv+0x2a0>
				{
					if(Hour < 23)
 8007000:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8007004:	2b16      	cmp	r3, #22
 8007006:	d805      	bhi.n	8007014 <_ZN10SmartDryer10changeTimeEv+0x298>
						Hour++;
 8007008:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 800700c:	3301      	adds	r3, #1
 800700e:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
					if(Minute < 59)
						Minute++;
					else
						Minute = 0;
				}
				break;
 8007012:	e047      	b.n	80070a4 <_ZN10SmartDryer10changeTimeEv+0x328>
						Hour = 0;
 8007014:	2300      	movs	r3, #0
 8007016:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
				break;
 800701a:	e043      	b.n	80070a4 <_ZN10SmartDryer10changeTimeEv+0x328>
					if(Minute < 59)
 800701c:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8007020:	2b3a      	cmp	r3, #58	; 0x3a
 8007022:	d805      	bhi.n	8007030 <_ZN10SmartDryer10changeTimeEv+0x2b4>
						Minute++;
 8007024:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8007028:	3301      	adds	r3, #1
 800702a:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 800702e:	e039      	b.n	80070a4 <_ZN10SmartDryer10changeTimeEv+0x328>
						Minute = 0;
 8007030:	2300      	movs	r3, #0
 8007032:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 8007036:	e035      	b.n	80070a4 <_ZN10SmartDryer10changeTimeEv+0x328>
			case DryerKey::OK_KEY:
				if(IsHours)
 8007038:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 800703c:	2b00      	cmp	r3, #0
 800703e:	d003      	beq.n	8007048 <_ZN10SmartDryer10changeTimeEv+0x2cc>
				{
					IsHours = false;
 8007040:	2300      	movs	r3, #0
 8007042:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
					NewTime.minute = Minute;
					NewTime.second = 0;
					clock->adjustTimeDate(NewTime);
					ExitChangeTime = true;
				}
				break;
 8007046:	e02d      	b.n	80070a4 <_ZN10SmartDryer10changeTimeEv+0x328>
					clock->getTimeDate(NewTime);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	f107 0208 	add.w	r2, r7, #8
 8007050:	4611      	mov	r1, r2
 8007052:	4618      	mov	r0, r3
 8007054:	f7fc fb6e 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
					NewTime.hour = Hour;
 8007058:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 800705c:	72bb      	strb	r3, [r7, #10]
					NewTime.minute = Minute;
 800705e:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8007062:	727b      	strb	r3, [r7, #9]
					NewTime.second = 0;
 8007064:	2300      	movs	r3, #0
 8007066:	723b      	strb	r3, [r7, #8]
					clock->adjustTimeDate(NewTime);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6858      	ldr	r0, [r3, #4]
 800706c:	f107 0308 	add.w	r3, r7, #8
 8007070:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007074:	f7fc fab4 	bl	80035e0 <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>
					ExitChangeTime = true;
 8007078:	2301      	movs	r3, #1
 800707a:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				break;
 800707e:	e011      	b.n	80070a4 <_ZN10SmartDryer10changeTimeEv+0x328>
			case DryerKey::LONG_OK_KEY:
				if(!IsHours)
 8007080:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8007084:	f083 0301 	eor.w	r3, r3, #1
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d009      	beq.n	80070a2 <_ZN10SmartDryer10changeTimeEv+0x326>
				{
					IsHours = true;
 800708e:	2301      	movs	r3, #1
 8007090:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
				}
				break;
 8007094:	e005      	b.n	80070a2 <_ZN10SmartDryer10changeTimeEv+0x326>
			case DryerKey::LONG_LEFT_KEY:
				ExitChangeTime = true;
 8007096:	2301      	movs	r3, #1
 8007098:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				break;
 800709c:	e002      	b.n	80070a4 <_ZN10SmartDryer10changeTimeEv+0x328>
			default:
				break;
 800709e:	bf00      	nop
 80070a0:	e000      	b.n	80070a4 <_ZN10SmartDryer10changeTimeEv+0x328>
				break;
 80070a2:	bf00      	nop
		}
		peripheralsControl();
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f7fe fd4d 	bl	8005b44 <_ZN10SmartDryer18peripheralsControlEv>
	while(!ExitChangeTime)
 80070aa:	e6bf      	b.n	8006e2c <_ZN10SmartDryer10changeTimeEv+0xb0>
	String Time = "", Date = "";
 80070ac:	f107 0310 	add.w	r3, r7, #16
 80070b0:	4618      	mov	r0, r3
 80070b2:	f007 fa80 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80070b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80070ba:	4618      	mov	r0, r3
 80070bc:	f007 fa7b 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Title = "", Number = "";
 80070c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80070c4:	4618      	mov	r0, r3
 80070c6:	f007 fa76 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80070ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80070ce:	4618      	mov	r0, r3
 80070d0:	f007 fa71 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 80070d4:	bf00      	nop
 80070d6:	37ec      	adds	r7, #236	; 0xec
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd90      	pop	{r4, r7, pc}
 80070dc:	0800f598 	.word	0x0800f598
 80070e0:	0800f4ec 	.word	0x0800f4ec
 80070e4:	0800f6e0 	.word	0x0800f6e0

080070e8 <_ZN10SmartDryer10changeDateEv>:

void SmartDryer::changeDate()
{
 80070e8:	b590      	push	{r4, r7, lr}
 80070ea:	b0c5      	sub	sp, #276	; 0x114
 80070ec:	af02      	add	r7, sp, #8
 80070ee:	1d3b      	adds	r3, r7, #4
 80070f0:	6018      	str	r0, [r3, #0]
	bool ExitChangeDate = false;
 80070f2:	2300      	movs	r3, #0
 80070f4:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	uint8_t Day = 1, Month = 1, Year = 20;
 80070f8:	2301      	movs	r3, #1
 80070fa:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 80070fe:	2301      	movs	r3, #1
 8007100:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
 8007104:	2314      	movs	r3, #20
 8007106:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
	uint8_t WichDateVar = 0;
 800710a:	2300      	movs	r3, #0
 800710c:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
	String Title = "", Number = "";
 8007110:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007114:	4618      	mov	r0, r3
 8007116:	f007 f923 	bl	800e360 <_ZNSaIcEC1Ev>
 800711a:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800711e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007122:	49db      	ldr	r1, [pc, #876]	; (8007490 <_ZN10SmartDryer10changeDateEv+0x3a8>)
 8007124:	4618      	mov	r0, r3
 8007126:	f007 fbb3 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800712a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800712e:	4618      	mov	r0, r3
 8007130:	f007 f917 	bl	800e362 <_ZNSaIcED1Ev>
 8007134:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007138:	4618      	mov	r0, r3
 800713a:	f007 f911 	bl	800e360 <_ZNSaIcEC1Ev>
 800713e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007142:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007146:	49d2      	ldr	r1, [pc, #840]	; (8007490 <_ZN10SmartDryer10changeDateEv+0x3a8>)
 8007148:	4618      	mov	r0, r3
 800714a:	f007 fba1 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800714e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007152:	4618      	mov	r0, r3
 8007154:	f007 f905 	bl	800e362 <_ZNSaIcED1Ev>
	String Time = "", Date = "";
 8007158:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800715c:	4618      	mov	r0, r3
 800715e:	f007 f8ff 	bl	800e360 <_ZNSaIcEC1Ev>
 8007162:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8007166:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800716a:	49c9      	ldr	r1, [pc, #804]	; (8007490 <_ZN10SmartDryer10changeDateEv+0x3a8>)
 800716c:	4618      	mov	r0, r3
 800716e:	f007 fb8f 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007172:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007176:	4618      	mov	r0, r3
 8007178:	f007 f8f3 	bl	800e362 <_ZNSaIcED1Ev>
 800717c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007180:	4618      	mov	r0, r3
 8007182:	f007 f8ed 	bl	800e360 <_ZNSaIcEC1Ev>
 8007186:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800718a:	f107 0314 	add.w	r3, r7, #20
 800718e:	49c0      	ldr	r1, [pc, #768]	; (8007490 <_ZN10SmartDryer10changeDateEv+0x3a8>)
 8007190:	4618      	mov	r0, r3
 8007192:	f007 fb7d 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007196:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800719a:	4618      	mov	r0, r3
 800719c:	f007 f8e1 	bl	800e362 <_ZNSaIcED1Ev>
	while(!ExitChangeDate)
 80071a0:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f040 81b8 	bne.w	800751a <_ZN10SmartDryer10changeDateEv+0x432>
	{
		display->clearFrameBuffer();
 80071aa:	1d3b      	adds	r3, r7, #4
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7fd fb60 	bl	8004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 80071b6:	f107 0214 	add.w	r2, r7, #20
 80071ba:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80071be:	1d3b      	adds	r3, r7, #4
 80071c0:	6818      	ldr	r0, [r3, #0]
 80071c2:	f7fe fcd4 	bl	8005b6e <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		if(WichDateVar == 0)
 80071c6:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d12b      	bne.n	8007226 <_ZN10SmartDryer10changeDateEv+0x13e>
		{
			Title = "Imposta mese";
 80071ce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80071d2:	49b0      	ldr	r1, [pc, #704]	; (8007494 <_ZN10SmartDryer10changeDateEv+0x3ac>)
 80071d4:	4618      	mov	r0, r3
 80071d6:	f007 faa8 	bl	800e72a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = String(monthNames[Month - 1]);
 80071da:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80071de:	3b01      	subs	r3, #1
 80071e0:	4aad      	ldr	r2, [pc, #692]	; (8007498 <_ZN10SmartDryer10changeDateEv+0x3b0>)
 80071e2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80071e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80071ea:	4618      	mov	r0, r3
 80071ec:	f007 f8b8 	bl	800e360 <_ZNSaIcEC1Ev>
 80071f0:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80071f4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80071f8:	4621      	mov	r1, r4
 80071fa:	4618      	mov	r0, r3
 80071fc:	f007 fb48 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007200:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8007204:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007208:	4611      	mov	r1, r2
 800720a:	4618      	mov	r0, r3
 800720c:	f007 f9df 	bl	800e5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8007210:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007214:	4618      	mov	r0, r3
 8007216:	f007 f9ce 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800721a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800721e:	4618      	mov	r0, r3
 8007220:	f007 f89f 	bl	800e362 <_ZNSaIcED1Ev>
 8007224:	e03a      	b.n	800729c <_ZN10SmartDryer10changeDateEv+0x1b4>
		}
		else if(WichDateVar == 1)
 8007226:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 800722a:	2b01      	cmp	r3, #1
 800722c:	d11b      	bne.n	8007266 <_ZN10SmartDryer10changeDateEv+0x17e>
		{
			Title = "Imposta giorno";
 800722e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007232:	499a      	ldr	r1, [pc, #616]	; (800749c <_ZN10SmartDryer10changeDateEv+0x3b4>)
 8007234:	4618      	mov	r0, r3
 8007236:	f007 fa78 	bl	800e72a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Day);
 800723a:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 800723e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007242:	4611      	mov	r1, r2
 8007244:	4618      	mov	r0, r3
 8007246:	f7fc f8e7 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 800724a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800724e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007252:	4611      	mov	r1, r2
 8007254:	4618      	mov	r0, r3
 8007256:	f007 f9ba 	bl	800e5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800725a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800725e:	4618      	mov	r0, r3
 8007260:	f007 f9a9 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007264:	e01a      	b.n	800729c <_ZN10SmartDryer10changeDateEv+0x1b4>
		}
		else
		{
			Title = "Imposta anno";
 8007266:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800726a:	498d      	ldr	r1, [pc, #564]	; (80074a0 <_ZN10SmartDryer10changeDateEv+0x3b8>)
 800726c:	4618      	mov	r0, r3
 800726e:	f007 fa5c 	bl	800e72a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Year);
 8007272:	f897 2104 	ldrb.w	r2, [r7, #260]	; 0x104
 8007276:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800727a:	4611      	mov	r1, r2
 800727c:	4618      	mov	r0, r3
 800727e:	f7fc f8cb 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8007282:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8007286:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800728a:	4611      	mov	r1, r2
 800728c:	4618      	mov	r0, r3
 800728e:	f007 f99e 	bl	800e5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8007292:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8007296:	4618      	mov	r0, r3
 8007298:	f007 f98d 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
		display->drawString(Title, NHDST7565_LCD::CENTER_POS, 5, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800729c:	1d3b      	adds	r3, r7, #4
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681c      	ldr	r4, [r3, #0]
 80072a2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80072a6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80072aa:	4611      	mov	r1, r2
 80072ac:	4618      	mov	r0, r3
 80072ae:	f007 fabc 	bl	800e82a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80072b2:	1d3b      	adds	r3, r7, #4
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80072bc:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80072c0:	9300      	str	r3, [sp, #0]
 80072c2:	2305      	movs	r3, #5
 80072c4:	2283      	movs	r2, #131	; 0x83
 80072c6:	4620      	mov	r0, r4
 80072c8:	f7fd fafd 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80072cc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80072d0:	4618      	mov	r0, r3
 80072d2:	f007 f970 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(Number, NHDST7565_LCD::CENTER_POS, 30, display->displayFonts[NHDST7565_LCD::W_9_H_17_B]);
 80072d6:	1d3b      	adds	r3, r7, #4
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681c      	ldr	r4, [r3, #0]
 80072dc:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80072e0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80072e4:	4611      	mov	r1, r2
 80072e6:	4618      	mov	r0, r3
 80072e8:	f007 fa9f 	bl	800e82a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80072ec:	1d3b      	adds	r3, r7, #4
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80072f6:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	231e      	movs	r3, #30
 80072fe:	2283      	movs	r2, #131	; 0x83
 8007300:	4620      	mov	r0, r4
 8007302:	f7fd fae0 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8007306:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800730a:	4618      	mov	r0, r3
 800730c:	f007 f953 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawSymbol(60, 30, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x0070); // triangolo alto
 8007310:	1d3b      	adds	r3, r7, #4
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6818      	ldr	r0, [r3, #0]
 8007316:	1d3b      	adds	r3, r7, #4
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8007320:	2370      	movs	r3, #112	; 0x70
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	4613      	mov	r3, r2
 8007326:	221e      	movs	r2, #30
 8007328:	213c      	movs	r1, #60	; 0x3c
 800732a:	f7fd fd7b 	bl	8004e24 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->drawSymbol(60, 55, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x006D); // triangolo basso
 800732e:	1d3b      	adds	r3, r7, #4
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	6818      	ldr	r0, [r3, #0]
 8007334:	1d3b      	adds	r3, r7, #4
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800733e:	236d      	movs	r3, #109	; 0x6d
 8007340:	9300      	str	r3, [sp, #0]
 8007342:	4613      	mov	r3, r2
 8007344:	2237      	movs	r2, #55	; 0x37
 8007346:	213c      	movs	r1, #60	; 0x3c
 8007348:	f7fd fd6c 	bl	8004e24 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		// TODO scrivere che si preme ok per andare avanti o long ok per tornare indietro
		display->sendFrameBuffer();
 800734c:	1d3b      	adds	r3, r7, #4
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4618      	mov	r0, r3
 8007354:	f7fd fa9c 	bl	8004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 8007358:	2308      	movs	r3, #8
 800735a:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		WichKey = keyboard->checkKey();
 800735e:	1d3b      	adds	r3, r7, #4
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	4618      	mov	r0, r3
 8007366:	f7fd ff27 	bl	80051b8 <_ZN8DryerKey8checkKeyEv>
 800736a:	4603      	mov	r3, r0
 800736c:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		switch(WichKey)
 8007370:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8007374:	2b07      	cmp	r3, #7
 8007376:	f200 80c8 	bhi.w	800750a <_ZN10SmartDryer10changeDateEv+0x422>
 800737a:	a201      	add	r2, pc, #4	; (adr r2, 8007380 <_ZN10SmartDryer10changeDateEv+0x298>)
 800737c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007380:	080073a1 	.word	0x080073a1
 8007384:	0800740d 	.word	0x0800740d
 8007388:	0800750b 	.word	0x0800750b
 800738c:	0800747b 	.word	0x0800747b
 8007390:	080073a1 	.word	0x080073a1
 8007394:	0800740d 	.word	0x0800740d
 8007398:	08007503 	.word	0x08007503
 800739c:	080074ef 	.word	0x080074ef
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				if(WichDateVar == 1)
 80073a0:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d111      	bne.n	80073cc <_ZN10SmartDryer10changeDateEv+0x2e4>
				{
					if(Day > 1)
 80073a8:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d905      	bls.n	80073bc <_ZN10SmartDryer10changeDateEv+0x2d4>
						Day--;
 80073b0:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80073b4:	3b01      	subs	r3, #1
 80073b6:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
					if(Year > 20)
						Year--;
					else
						Year = 99;
				}
				break;
 80073ba:	e0a9      	b.n	8007510 <_ZN10SmartDryer10changeDateEv+0x428>
						Day = daysInMonth[Month - 1];
 80073bc:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80073c0:	3b01      	subs	r3, #1
 80073c2:	4a38      	ldr	r2, [pc, #224]	; (80074a4 <_ZN10SmartDryer10changeDateEv+0x3bc>)
 80073c4:	5cd3      	ldrb	r3, [r2, r3]
 80073c6:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
				break;
 80073ca:	e0a1      	b.n	8007510 <_ZN10SmartDryer10changeDateEv+0x428>
				else if(WichDateVar == 0)
 80073cc:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d10d      	bne.n	80073f0 <_ZN10SmartDryer10changeDateEv+0x308>
					if(Month > 1)
 80073d4:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d905      	bls.n	80073e8 <_ZN10SmartDryer10changeDateEv+0x300>
						Month--;
 80073dc:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80073e0:	3b01      	subs	r3, #1
 80073e2:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 80073e6:	e093      	b.n	8007510 <_ZN10SmartDryer10changeDateEv+0x428>
						Month = 12;
 80073e8:	230c      	movs	r3, #12
 80073ea:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 80073ee:	e08f      	b.n	8007510 <_ZN10SmartDryer10changeDateEv+0x428>
					if(Year > 20)
 80073f0:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 80073f4:	2b14      	cmp	r3, #20
 80073f6:	d905      	bls.n	8007404 <_ZN10SmartDryer10changeDateEv+0x31c>
						Year--;
 80073f8:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 80073fc:	3b01      	subs	r3, #1
 80073fe:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 8007402:	e085      	b.n	8007510 <_ZN10SmartDryer10changeDateEv+0x428>
						Year = 99;
 8007404:	2363      	movs	r3, #99	; 0x63
 8007406:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 800740a:	e081      	b.n	8007510 <_ZN10SmartDryer10changeDateEv+0x428>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				if(WichDateVar == 1)
 800740c:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007410:	2b01      	cmp	r3, #1
 8007412:	d112      	bne.n	800743a <_ZN10SmartDryer10changeDateEv+0x352>
				{
					if(Day < daysInMonth[Month - 1])
 8007414:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8007418:	3b01      	subs	r3, #1
 800741a:	4a22      	ldr	r2, [pc, #136]	; (80074a4 <_ZN10SmartDryer10changeDateEv+0x3bc>)
 800741c:	5cd3      	ldrb	r3, [r2, r3]
 800741e:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 8007422:	429a      	cmp	r2, r3
 8007424:	d205      	bcs.n	8007432 <_ZN10SmartDryer10changeDateEv+0x34a>
						Day++;
 8007426:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800742a:	3301      	adds	r3, #1
 800742c:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
					if(Year < 99)
						Year++;
					else
						Year = 20;
				}
				break;
 8007430:	e06e      	b.n	8007510 <_ZN10SmartDryer10changeDateEv+0x428>
						Day = 1;
 8007432:	2301      	movs	r3, #1
 8007434:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
				break;
 8007438:	e06a      	b.n	8007510 <_ZN10SmartDryer10changeDateEv+0x428>
				else if(WichDateVar == 0)
 800743a:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10d      	bne.n	800745e <_ZN10SmartDryer10changeDateEv+0x376>
					if(Month < 12)
 8007442:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8007446:	2b0b      	cmp	r3, #11
 8007448:	d805      	bhi.n	8007456 <_ZN10SmartDryer10changeDateEv+0x36e>
						Month++;
 800744a:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 800744e:	3301      	adds	r3, #1
 8007450:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 8007454:	e05c      	b.n	8007510 <_ZN10SmartDryer10changeDateEv+0x428>
						Month = 1;
 8007456:	2301      	movs	r3, #1
 8007458:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 800745c:	e058      	b.n	8007510 <_ZN10SmartDryer10changeDateEv+0x428>
					if(Year < 99)
 800745e:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8007462:	2b62      	cmp	r3, #98	; 0x62
 8007464:	d805      	bhi.n	8007472 <_ZN10SmartDryer10changeDateEv+0x38a>
						Year++;
 8007466:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 800746a:	3301      	adds	r3, #1
 800746c:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 8007470:	e04e      	b.n	8007510 <_ZN10SmartDryer10changeDateEv+0x428>
						Year = 20;
 8007472:	2314      	movs	r3, #20
 8007474:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 8007478:	e04a      	b.n	8007510 <_ZN10SmartDryer10changeDateEv+0x428>
			case DryerKey::OK_KEY:
				if(WichDateVar < 2)
 800747a:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 800747e:	2b01      	cmp	r3, #1
 8007480:	d812      	bhi.n	80074a8 <_ZN10SmartDryer10changeDateEv+0x3c0>
				{
					WichDateVar++;
 8007482:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007486:	3301      	adds	r3, #1
 8007488:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
					NewDate.month = Month;
					NewDate.year = Year + 2000;
					clock->adjustTimeDate(NewDate);
					ExitChangeDate = true;
				}
				break;
 800748c:	e040      	b.n	8007510 <_ZN10SmartDryer10changeDateEv+0x428>
 800748e:	bf00      	nop
 8007490:	0800f598 	.word	0x0800f598
 8007494:	0800f6f0 	.word	0x0800f6f0
 8007498:	20000000 	.word	0x20000000
 800749c:	0800f700 	.word	0x0800f700
 80074a0:	0800f710 	.word	0x0800f710
 80074a4:	0801256c 	.word	0x0801256c
					clock->getTimeDate(NewDate);
 80074a8:	1d3b      	adds	r3, r7, #4
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	f107 020c 	add.w	r2, r7, #12
 80074b2:	4611      	mov	r1, r2
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7fc f93d 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
					NewDate.day = Day;
 80074ba:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80074be:	73fb      	strb	r3, [r7, #15]
					NewDate.month = Month;
 80074c0:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80074c4:	743b      	strb	r3, [r7, #16]
					NewDate.year = Year + 2000;
 80074c6:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	827b      	strh	r3, [r7, #18]
					clock->adjustTimeDate(NewDate);
 80074d4:	1d3b      	adds	r3, r7, #4
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	6858      	ldr	r0, [r3, #4]
 80074da:	f107 030c 	add.w	r3, r7, #12
 80074de:	e893 0006 	ldmia.w	r3, {r1, r2}
 80074e2:	f7fc f87d 	bl	80035e0 <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>
					ExitChangeDate = true;
 80074e6:	2301      	movs	r3, #1
 80074e8:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				break;
 80074ec:	e010      	b.n	8007510 <_ZN10SmartDryer10changeDateEv+0x428>
			case DryerKey::LONG_OK_KEY:
				if(WichDateVar > 0)
 80074ee:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00b      	beq.n	800750e <_ZN10SmartDryer10changeDateEv+0x426>
				{
					WichDateVar--;
 80074f6:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80074fa:	3b01      	subs	r3, #1
 80074fc:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
				}
				break;
 8007500:	e005      	b.n	800750e <_ZN10SmartDryer10changeDateEv+0x426>
			case DryerKey::LONG_LEFT_KEY:
				ExitChangeDate = true;
 8007502:	2301      	movs	r3, #1
 8007504:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				break;
 8007508:	e002      	b.n	8007510 <_ZN10SmartDryer10changeDateEv+0x428>
			default:
				break;
 800750a:	bf00      	nop
 800750c:	e000      	b.n	8007510 <_ZN10SmartDryer10changeDateEv+0x428>
				break;
 800750e:	bf00      	nop
		}
		peripheralsControl();
 8007510:	1d3b      	adds	r3, r7, #4
 8007512:	6818      	ldr	r0, [r3, #0]
 8007514:	f7fe fb16 	bl	8005b44 <_ZN10SmartDryer18peripheralsControlEv>
	while(!ExitChangeDate)
 8007518:	e642      	b.n	80071a0 <_ZN10SmartDryer10changeDateEv+0xb8>
	String Time = "", Date = "";
 800751a:	f107 0314 	add.w	r3, r7, #20
 800751e:	4618      	mov	r0, r3
 8007520:	f007 f849 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007524:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007528:	4618      	mov	r0, r3
 800752a:	f007 f844 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Title = "", Number = "";
 800752e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007532:	4618      	mov	r0, r3
 8007534:	f007 f83f 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007538:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800753c:	4618      	mov	r0, r3
 800753e:	f007 f83a 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 8007542:	bf00      	nop
 8007544:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8007548:	46bd      	mov	sp, r7
 800754a:	bd90      	pop	{r4, r7, pc}

0800754c <_ZN10SmartDryer8showInfoEv>:

void SmartDryer::showInfo()
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
}
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	bc80      	pop	{r7}
 800755c:	4770      	bx	lr
	...

08007560 <_ZN10SmartDryer13changeProgramEh>:

void SmartDryer::changeProgram(uint8_t WichProgram)
{
 8007560:	b590      	push	{r4, r7, lr}
 8007562:	b0e9      	sub	sp, #420	; 0x1a4
 8007564:	af02      	add	r7, sp, #8
 8007566:	1d3b      	adds	r3, r7, #4
 8007568:	6018      	str	r0, [r3, #0]
 800756a:	460a      	mov	r2, r1
 800756c:	1cfb      	adds	r3, r7, #3
 800756e:	701a      	strb	r2, [r3, #0]
	bool ExitChangeProgram = false;
 8007570:	2300      	movs	r3, #0
 8007572:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
	uint8_t WichSetting = 0;
 8007576:	2300      	movs	r3, #0
 8007578:	f887 3196 	strb.w	r3, [r7, #406]	; 0x196
	const uint8_t MAX_SETTINGS = 5;
 800757c:	2305      	movs	r3, #5
 800757e:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
	uint8_t StartHour = 0, StartMinute = 0;
 8007582:	2300      	movs	r3, #0
 8007584:	f887 3195 	strb.w	r3, [r7, #405]	; 0x195
 8007588:	2300      	movs	r3, #0
 800758a:	f887 3194 	strb.w	r3, [r7, #404]	; 0x194
	uint8_t EndHour = 0, EndMinute = 0;
 800758e:	2300      	movs	r3, #0
 8007590:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
 8007594:	2300      	movs	r3, #0
 8007596:	f887 3192 	strb.w	r3, [r7, #402]	; 0x192
	uint32_t TemperatureSetted = 0;
 800759a:	2300      	movs	r3, #0
 800759c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	String Time = "", Date = "";
 80075a0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80075a4:	4618      	mov	r0, r3
 80075a6:	f006 fedb 	bl	800e360 <_ZNSaIcEC1Ev>
 80075aa:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80075ae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80075b2:	49e2      	ldr	r1, [pc, #904]	; (800793c <_ZN10SmartDryer13changeProgramEh+0x3dc>)
 80075b4:	4618      	mov	r0, r3
 80075b6:	f007 f96b 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80075ba:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80075be:	4618      	mov	r0, r3
 80075c0:	f006 fecf 	bl	800e362 <_ZNSaIcED1Ev>
 80075c4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80075c8:	4618      	mov	r0, r3
 80075ca:	f006 fec9 	bl	800e360 <_ZNSaIcEC1Ev>
 80075ce:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80075d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80075d6:	49d9      	ldr	r1, [pc, #868]	; (800793c <_ZN10SmartDryer13changeProgramEh+0x3dc>)
 80075d8:	4618      	mov	r0, r3
 80075da:	f007 f959 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80075de:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80075e2:	4618      	mov	r0, r3
 80075e4:	f006 febd 	bl	800e362 <_ZNSaIcED1Ev>
	String Title = "", SubTitle = "", Number = "";
 80075e8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80075ec:	4618      	mov	r0, r3
 80075ee:	f006 feb7 	bl	800e360 <_ZNSaIcEC1Ev>
 80075f2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80075f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80075fa:	49d0      	ldr	r1, [pc, #832]	; (800793c <_ZN10SmartDryer13changeProgramEh+0x3dc>)
 80075fc:	4618      	mov	r0, r3
 80075fe:	f007 f947 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007602:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007606:	4618      	mov	r0, r3
 8007608:	f006 feab 	bl	800e362 <_ZNSaIcED1Ev>
 800760c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007610:	4618      	mov	r0, r3
 8007612:	f006 fea5 	bl	800e360 <_ZNSaIcEC1Ev>
 8007616:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800761a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800761e:	49c7      	ldr	r1, [pc, #796]	; (800793c <_ZN10SmartDryer13changeProgramEh+0x3dc>)
 8007620:	4618      	mov	r0, r3
 8007622:	f007 f935 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007626:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800762a:	4618      	mov	r0, r3
 800762c:	f006 fe99 	bl	800e362 <_ZNSaIcED1Ev>
 8007630:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8007634:	4618      	mov	r0, r3
 8007636:	f006 fe93 	bl	800e360 <_ZNSaIcEC1Ev>
 800763a:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800763e:	f107 030c 	add.w	r3, r7, #12
 8007642:	49be      	ldr	r1, [pc, #760]	; (800793c <_ZN10SmartDryer13changeProgramEh+0x3dc>)
 8007644:	4618      	mov	r0, r3
 8007646:	f007 f923 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800764a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800764e:	4618      	mov	r0, r3
 8007650:	f006 fe87 	bl	800e362 <_ZNSaIcED1Ev>
	while(!ExitChangeProgram)
 8007654:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8007658:	2b00      	cmp	r3, #0
 800765a:	f040 83bb 	bne.w	8007dd4 <_ZN10SmartDryer13changeProgramEh+0x874>
	{
		Title = "Programma " + std::to_string(WichProgram + 1);
 800765e:	1cfb      	adds	r3, r7, #3
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	1c5a      	adds	r2, r3, #1
 8007664:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8007668:	4611      	mov	r1, r2
 800766a:	4618      	mov	r0, r3
 800766c:	f7fb fed4 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8007670:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007674:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8007678:	49b1      	ldr	r1, [pc, #708]	; (8007940 <_ZN10SmartDryer13changeProgramEh+0x3e0>)
 800767a:	4618      	mov	r0, r3
 800767c:	f7fc fc56 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8007680:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8007684:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007688:	4611      	mov	r1, r2
 800768a:	4618      	mov	r0, r3
 800768c:	f006 ff9f 	bl	800e5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8007690:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007694:	4618      	mov	r0, r3
 8007696:	f006 ff8e 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800769a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800769e:	4618      	mov	r0, r3
 80076a0:	f006 ff89 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		switch(WichSetting)
 80076a4:	f897 3196 	ldrb.w	r3, [r7, #406]	; 0x196
 80076a8:	2b04      	cmp	r3, #4
 80076aa:	f200 8098 	bhi.w	80077de <_ZN10SmartDryer13changeProgramEh+0x27e>
 80076ae:	a201      	add	r2, pc, #4	; (adr r2, 80076b4 <_ZN10SmartDryer13changeProgramEh+0x154>)
 80076b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b4:	080076c9 	.word	0x080076c9
 80076b8:	08007701 	.word	0x08007701
 80076bc:	08007739 	.word	0x08007739
 80076c0:	08007771 	.word	0x08007771
 80076c4:	080077a9 	.word	0x080077a9
		{
			case 0:
				SubTitle = "Ora di inizio";
 80076c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076cc:	499d      	ldr	r1, [pc, #628]	; (8007944 <_ZN10SmartDryer13changeProgramEh+0x3e4>)
 80076ce:	4618      	mov	r0, r3
 80076d0:	f007 f82b 	bl	800e72a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(StartHour);
 80076d4:	f897 2195 	ldrb.w	r2, [r7, #405]	; 0x195
 80076d8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80076dc:	4611      	mov	r1, r2
 80076de:	4618      	mov	r0, r3
 80076e0:	f7fb fe9a 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 80076e4:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80076e8:	f107 030c 	add.w	r3, r7, #12
 80076ec:	4611      	mov	r1, r2
 80076ee:	4618      	mov	r0, r3
 80076f0:	f006 ff6d 	bl	800e5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80076f4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80076f8:	4618      	mov	r0, r3
 80076fa:	f006 ff5c 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 80076fe:	e06f      	b.n	80077e0 <_ZN10SmartDryer13changeProgramEh+0x280>
			case 1:
				SubTitle = "Minuto di inizio";
 8007700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007704:	4990      	ldr	r1, [pc, #576]	; (8007948 <_ZN10SmartDryer13changeProgramEh+0x3e8>)
 8007706:	4618      	mov	r0, r3
 8007708:	f007 f80f 	bl	800e72a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(StartMinute);
 800770c:	f897 2194 	ldrb.w	r2, [r7, #404]	; 0x194
 8007710:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8007714:	4611      	mov	r1, r2
 8007716:	4618      	mov	r0, r3
 8007718:	f7fb fe7e 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 800771c:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8007720:	f107 030c 	add.w	r3, r7, #12
 8007724:	4611      	mov	r1, r2
 8007726:	4618      	mov	r0, r3
 8007728:	f006 ff51 	bl	800e5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800772c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8007730:	4618      	mov	r0, r3
 8007732:	f006 ff40 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 8007736:	e053      	b.n	80077e0 <_ZN10SmartDryer13changeProgramEh+0x280>
			case 2:
				SubTitle = "Ora di fine";
 8007738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800773c:	4983      	ldr	r1, [pc, #524]	; (800794c <_ZN10SmartDryer13changeProgramEh+0x3ec>)
 800773e:	4618      	mov	r0, r3
 8007740:	f006 fff3 	bl	800e72a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(EndHour);
 8007744:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 8007748:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800774c:	4611      	mov	r1, r2
 800774e:	4618      	mov	r0, r3
 8007750:	f7fb fe62 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8007754:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8007758:	f107 030c 	add.w	r3, r7, #12
 800775c:	4611      	mov	r1, r2
 800775e:	4618      	mov	r0, r3
 8007760:	f006 ff35 	bl	800e5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8007764:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8007768:	4618      	mov	r0, r3
 800776a:	f006 ff24 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 800776e:	e037      	b.n	80077e0 <_ZN10SmartDryer13changeProgramEh+0x280>
			case 3:
				SubTitle = "Minuto di fine";
 8007770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007774:	4976      	ldr	r1, [pc, #472]	; (8007950 <_ZN10SmartDryer13changeProgramEh+0x3f0>)
 8007776:	4618      	mov	r0, r3
 8007778:	f006 ffd7 	bl	800e72a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(EndMinute);
 800777c:	f897 2192 	ldrb.w	r2, [r7, #402]	; 0x192
 8007780:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007784:	4611      	mov	r1, r2
 8007786:	4618      	mov	r0, r3
 8007788:	f7fb fe46 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 800778c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8007790:	f107 030c 	add.w	r3, r7, #12
 8007794:	4611      	mov	r1, r2
 8007796:	4618      	mov	r0, r3
 8007798:	f006 ff19 	bl	800e5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800779c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80077a0:	4618      	mov	r0, r3
 80077a2:	f006 ff08 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 80077a6:	e01b      	b.n	80077e0 <_ZN10SmartDryer13changeProgramEh+0x280>
			case 4:
				SubTitle = "Temperatura";
 80077a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077ac:	4969      	ldr	r1, [pc, #420]	; (8007954 <_ZN10SmartDryer13changeProgramEh+0x3f4>)
 80077ae:	4618      	mov	r0, r3
 80077b0:	f006 ffbb 	bl	800e72a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(TemperatureSetted);
 80077b4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80077b8:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 80077bc:	4618      	mov	r0, r3
 80077be:	f7fd fd93 	bl	80052e8 <_ZNSt7__cxx119to_stringEm>
 80077c2:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80077c6:	f107 030c 	add.w	r3, r7, #12
 80077ca:	4611      	mov	r1, r2
 80077cc:	4618      	mov	r0, r3
 80077ce:	f006 fefe 	bl	800e5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80077d2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80077d6:	4618      	mov	r0, r3
 80077d8:	f006 feed 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 80077dc:	e000      	b.n	80077e0 <_ZN10SmartDryer13changeProgramEh+0x280>
			default:
				break;
 80077de:	bf00      	nop
		}
		display->clearFrameBuffer();
 80077e0:	1d3b      	adds	r3, r7, #4
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7fd f845 	bl	8004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 80077ec:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80077f0:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80077f4:	1d3b      	adds	r3, r7, #4
 80077f6:	6818      	ldr	r0, [r3, #0]
 80077f8:	f7fe f9b9 	bl	8005b6e <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString(Title, NHDST7565_LCD::CENTER_POS, 7, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 80077fc:	1d3b      	adds	r3, r7, #4
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681c      	ldr	r4, [r3, #0]
 8007802:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007806:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800780a:	4611      	mov	r1, r2
 800780c:	4618      	mov	r0, r3
 800780e:	f007 f80c 	bl	800e82a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8007812:	1d3b      	adds	r3, r7, #4
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800781c:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	2307      	movs	r3, #7
 8007824:	2283      	movs	r2, #131	; 0x83
 8007826:	4620      	mov	r0, r4
 8007828:	f7fd f84d 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800782c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007830:	4618      	mov	r0, r3
 8007832:	f006 fec0 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(SubTitle, NHDST7565_LCD::CENTER_POS, 22, display->displayFonts[NHDST7565_LCD::W_6_H_10]);
 8007836:	1d3b      	adds	r3, r7, #4
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681c      	ldr	r4, [r3, #0]
 800783c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007840:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8007844:	4611      	mov	r1, r2
 8007846:	4618      	mov	r0, r3
 8007848:	f006 ffef 	bl	800e82a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800784c:	1d3b      	adds	r3, r7, #4
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007856:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 800785a:	9300      	str	r3, [sp, #0]
 800785c:	2316      	movs	r3, #22
 800785e:	2283      	movs	r2, #131	; 0x83
 8007860:	4620      	mov	r0, r4
 8007862:	f7fd f830 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8007866:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800786a:	4618      	mov	r0, r3
 800786c:	f006 fea3 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(Number, NHDST7565_LCD::CENTER_POS, 43, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8007870:	1d3b      	adds	r3, r7, #4
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681c      	ldr	r4, [r3, #0]
 8007876:	f107 020c 	add.w	r2, r7, #12
 800787a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800787e:	4611      	mov	r1, r2
 8007880:	4618      	mov	r0, r3
 8007882:	f006 ffd2 	bl	800e82a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8007886:	1d3b      	adds	r3, r7, #4
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007890:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 8007894:	9300      	str	r3, [sp, #0]
 8007896:	232b      	movs	r3, #43	; 0x2b
 8007898:	2283      	movs	r2, #131	; 0x83
 800789a:	4620      	mov	r0, r4
 800789c:	f7fd f813 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80078a0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80078a4:	4618      	mov	r0, r3
 80078a6:	f006 fe86 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawSymbol(60, 30, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x0070); // triangolo alto
 80078aa:	1d3b      	adds	r3, r7, #4
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	6818      	ldr	r0, [r3, #0]
 80078b0:	1d3b      	adds	r3, r7, #4
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80078ba:	2370      	movs	r3, #112	; 0x70
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	4613      	mov	r3, r2
 80078c0:	221e      	movs	r2, #30
 80078c2:	213c      	movs	r1, #60	; 0x3c
 80078c4:	f7fd faae 	bl	8004e24 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->drawSymbol(60, 57, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x006D); // triangolo basso
 80078c8:	1d3b      	adds	r3, r7, #4
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	6818      	ldr	r0, [r3, #0]
 80078ce:	1d3b      	adds	r3, r7, #4
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80078d8:	236d      	movs	r3, #109	; 0x6d
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	4613      	mov	r3, r2
 80078de:	2239      	movs	r2, #57	; 0x39
 80078e0:	213c      	movs	r1, #60	; 0x3c
 80078e2:	f7fd fa9f 	bl	8004e24 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->sendFrameBuffer();
 80078e6:	1d3b      	adds	r3, r7, #4
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7fc ffcf 	bl	8004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 80078f2:	2308      	movs	r3, #8
 80078f4:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
		WichKey = keyboard->checkKey();
 80078f8:	1d3b      	adds	r3, r7, #4
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	4618      	mov	r0, r3
 8007900:	f7fd fc5a 	bl	80051b8 <_ZN8DryerKey8checkKeyEv>
 8007904:	4603      	mov	r3, r0
 8007906:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
		switch(WichKey)
 800790a:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 800790e:	2b07      	cmp	r3, #7
 8007910:	f200 8258 	bhi.w	8007dc4 <_ZN10SmartDryer13changeProgramEh+0x864>
 8007914:	a201      	add	r2, pc, #4	; (adr r2, 800791c <_ZN10SmartDryer13changeProgramEh+0x3bc>)
 8007916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800791a:	bf00      	nop
 800791c:	08007959 	.word	0x08007959
 8007920:	08007a0d 	.word	0x08007a0d
 8007924:	08007da9 	.word	0x08007da9
 8007928:	08007ac1 	.word	0x08007ac1
 800792c:	08007959 	.word	0x08007959
 8007930:	08007a0d 	.word	0x08007a0d
 8007934:	08007dbd 	.word	0x08007dbd
 8007938:	08007dc5 	.word	0x08007dc5
 800793c:	0800f598 	.word	0x0800f598
 8007940:	0800f720 	.word	0x0800f720
 8007944:	0800f72c 	.word	0x0800f72c
 8007948:	0800f73c 	.word	0x0800f73c
 800794c:	0800f750 	.word	0x0800f750
 8007950:	0800f75c 	.word	0x0800f75c
 8007954:	0800f76c 	.word	0x0800f76c
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				switch(WichSetting)
 8007958:	f897 3196 	ldrb.w	r3, [r7, #406]	; 0x196
 800795c:	2b04      	cmp	r3, #4
 800795e:	d853      	bhi.n	8007a08 <_ZN10SmartDryer13changeProgramEh+0x4a8>
 8007960:	a201      	add	r2, pc, #4	; (adr r2, 8007968 <_ZN10SmartDryer13changeProgramEh+0x408>)
 8007962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007966:	bf00      	nop
 8007968:	0800797d 	.word	0x0800797d
 800796c:	08007999 	.word	0x08007999
 8007970:	080079b5 	.word	0x080079b5
 8007974:	080079d1 	.word	0x080079d1
 8007978:	080079ed 	.word	0x080079ed
				{
					case 0:
						if(StartHour > 0)
 800797c:	f897 3195 	ldrb.w	r3, [r7, #405]	; 0x195
 8007980:	2b00      	cmp	r3, #0
 8007982:	d005      	beq.n	8007990 <_ZN10SmartDryer13changeProgramEh+0x430>
							StartHour--;
 8007984:	f897 3195 	ldrb.w	r3, [r7, #405]	; 0x195
 8007988:	3b01      	subs	r3, #1
 800798a:	f887 3195 	strb.w	r3, [r7, #405]	; 0x195
						else
							StartHour = 23;
						break;
 800798e:	e03c      	b.n	8007a0a <_ZN10SmartDryer13changeProgramEh+0x4aa>
							StartHour = 23;
 8007990:	2317      	movs	r3, #23
 8007992:	f887 3195 	strb.w	r3, [r7, #405]	; 0x195
						break;
 8007996:	e038      	b.n	8007a0a <_ZN10SmartDryer13changeProgramEh+0x4aa>
					case 1:
						if(StartMinute > 0)
 8007998:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 800799c:	2b00      	cmp	r3, #0
 800799e:	d005      	beq.n	80079ac <_ZN10SmartDryer13changeProgramEh+0x44c>
							StartMinute -= 10;
 80079a0:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 80079a4:	3b0a      	subs	r3, #10
 80079a6:	f887 3194 	strb.w	r3, [r7, #404]	; 0x194
						else
							StartMinute = 50;
						break;
 80079aa:	e02e      	b.n	8007a0a <_ZN10SmartDryer13changeProgramEh+0x4aa>
							StartMinute = 50;
 80079ac:	2332      	movs	r3, #50	; 0x32
 80079ae:	f887 3194 	strb.w	r3, [r7, #404]	; 0x194
						break;
 80079b2:	e02a      	b.n	8007a0a <_ZN10SmartDryer13changeProgramEh+0x4aa>
					case 2:
						if(EndHour > 0)
 80079b4:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d005      	beq.n	80079c8 <_ZN10SmartDryer13changeProgramEh+0x468>
							EndHour--;
 80079bc:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 80079c0:	3b01      	subs	r3, #1
 80079c2:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
						else
							EndHour = 23;
						break;
 80079c6:	e020      	b.n	8007a0a <_ZN10SmartDryer13changeProgramEh+0x4aa>
							EndHour = 23;
 80079c8:	2317      	movs	r3, #23
 80079ca:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
						break;
 80079ce:	e01c      	b.n	8007a0a <_ZN10SmartDryer13changeProgramEh+0x4aa>
					case 3:
						if(EndMinute > 0)
 80079d0:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d005      	beq.n	80079e4 <_ZN10SmartDryer13changeProgramEh+0x484>
							EndMinute -= 10;
 80079d8:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 80079dc:	3b0a      	subs	r3, #10
 80079de:	f887 3192 	strb.w	r3, [r7, #402]	; 0x192
						else
							EndMinute = 50;
						break;
 80079e2:	e012      	b.n	8007a0a <_ZN10SmartDryer13changeProgramEh+0x4aa>
							EndMinute = 50;
 80079e4:	2332      	movs	r3, #50	; 0x32
 80079e6:	f887 3192 	strb.w	r3, [r7, #402]	; 0x192
						break;
 80079ea:	e00e      	b.n	8007a0a <_ZN10SmartDryer13changeProgramEh+0x4aa>
					case 4:
						if(TemperatureSetted > 30)
 80079ec:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80079f0:	2b1e      	cmp	r3, #30
 80079f2:	d905      	bls.n	8007a00 <_ZN10SmartDryer13changeProgramEh+0x4a0>
							TemperatureSetted -= 5;
 80079f4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80079f8:	3b05      	subs	r3, #5
 80079fa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
						else
							TemperatureSetted = 90;
						break;
 80079fe:	e004      	b.n	8007a0a <_ZN10SmartDryer13changeProgramEh+0x4aa>
							TemperatureSetted = 90;
 8007a00:	235a      	movs	r3, #90	; 0x5a
 8007a02:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
						break;
 8007a06:	e000      	b.n	8007a0a <_ZN10SmartDryer13changeProgramEh+0x4aa>
					default:
						break;
 8007a08:	bf00      	nop
				}
				break;
 8007a0a:	e1de      	b.n	8007dca <_ZN10SmartDryer13changeProgramEh+0x86a>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				switch(WichSetting)
 8007a0c:	f897 3196 	ldrb.w	r3, [r7, #406]	; 0x196
 8007a10:	2b04      	cmp	r3, #4
 8007a12:	d853      	bhi.n	8007abc <_ZN10SmartDryer13changeProgramEh+0x55c>
 8007a14:	a201      	add	r2, pc, #4	; (adr r2, 8007a1c <_ZN10SmartDryer13changeProgramEh+0x4bc>)
 8007a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a1a:	bf00      	nop
 8007a1c:	08007a31 	.word	0x08007a31
 8007a20:	08007a4d 	.word	0x08007a4d
 8007a24:	08007a69 	.word	0x08007a69
 8007a28:	08007a85 	.word	0x08007a85
 8007a2c:	08007aa1 	.word	0x08007aa1
				{
					case 0:
						if(StartHour < 23)
 8007a30:	f897 3195 	ldrb.w	r3, [r7, #405]	; 0x195
 8007a34:	2b16      	cmp	r3, #22
 8007a36:	d805      	bhi.n	8007a44 <_ZN10SmartDryer13changeProgramEh+0x4e4>
							StartHour++;
 8007a38:	f897 3195 	ldrb.w	r3, [r7, #405]	; 0x195
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	f887 3195 	strb.w	r3, [r7, #405]	; 0x195
						else
							StartHour = 0;
						break;
 8007a42:	e03c      	b.n	8007abe <_ZN10SmartDryer13changeProgramEh+0x55e>
							StartHour = 0;
 8007a44:	2300      	movs	r3, #0
 8007a46:	f887 3195 	strb.w	r3, [r7, #405]	; 0x195
						break;
 8007a4a:	e038      	b.n	8007abe <_ZN10SmartDryer13changeProgramEh+0x55e>
					case 1:
						if(StartMinute < 50)
 8007a4c:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 8007a50:	2b31      	cmp	r3, #49	; 0x31
 8007a52:	d805      	bhi.n	8007a60 <_ZN10SmartDryer13changeProgramEh+0x500>
							StartMinute += 10;
 8007a54:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 8007a58:	330a      	adds	r3, #10
 8007a5a:	f887 3194 	strb.w	r3, [r7, #404]	; 0x194
						else
							StartMinute = 0;
						break;
 8007a5e:	e02e      	b.n	8007abe <_ZN10SmartDryer13changeProgramEh+0x55e>
							StartMinute = 0;
 8007a60:	2300      	movs	r3, #0
 8007a62:	f887 3194 	strb.w	r3, [r7, #404]	; 0x194
						break;
 8007a66:	e02a      	b.n	8007abe <_ZN10SmartDryer13changeProgramEh+0x55e>
					case 2:
						if(EndHour < 23)
 8007a68:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 8007a6c:	2b16      	cmp	r3, #22
 8007a6e:	d805      	bhi.n	8007a7c <_ZN10SmartDryer13changeProgramEh+0x51c>
							EndHour++;
 8007a70:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 8007a74:	3301      	adds	r3, #1
 8007a76:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
						else
							EndHour = 0;
						break;
 8007a7a:	e020      	b.n	8007abe <_ZN10SmartDryer13changeProgramEh+0x55e>
							EndHour = 0;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
						break;
 8007a82:	e01c      	b.n	8007abe <_ZN10SmartDryer13changeProgramEh+0x55e>
					case 3:
						if(EndMinute < 50)
 8007a84:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 8007a88:	2b31      	cmp	r3, #49	; 0x31
 8007a8a:	d805      	bhi.n	8007a98 <_ZN10SmartDryer13changeProgramEh+0x538>
							EndMinute += 10;
 8007a8c:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 8007a90:	330a      	adds	r3, #10
 8007a92:	f887 3192 	strb.w	r3, [r7, #402]	; 0x192
						else
							EndMinute = 0;
						break;
 8007a96:	e012      	b.n	8007abe <_ZN10SmartDryer13changeProgramEh+0x55e>
							EndMinute = 0;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	f887 3192 	strb.w	r3, [r7, #402]	; 0x192
						break;
 8007a9e:	e00e      	b.n	8007abe <_ZN10SmartDryer13changeProgramEh+0x55e>
					case 4:
						if(TemperatureSetted < 90)
 8007aa0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8007aa4:	2b59      	cmp	r3, #89	; 0x59
 8007aa6:	d805      	bhi.n	8007ab4 <_ZN10SmartDryer13changeProgramEh+0x554>
							TemperatureSetted += 5;
 8007aa8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8007aac:	3305      	adds	r3, #5
 8007aae:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
						else
							TemperatureSetted = 30;
						break;
 8007ab2:	e004      	b.n	8007abe <_ZN10SmartDryer13changeProgramEh+0x55e>
							TemperatureSetted = 30;
 8007ab4:	231e      	movs	r3, #30
 8007ab6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
						break;
 8007aba:	e000      	b.n	8007abe <_ZN10SmartDryer13changeProgramEh+0x55e>
					default:
						break;
 8007abc:	bf00      	nop
				}
				break;
 8007abe:	e184      	b.n	8007dca <_ZN10SmartDryer13changeProgramEh+0x86a>
			case DryerKey::OK_KEY:
				if(WichSetting < MAX_SETTINGS - 1)
 8007ac0:	f897 3196 	ldrb.w	r3, [r7, #406]	; 0x196
 8007ac4:	2b03      	cmp	r3, #3
 8007ac6:	d805      	bhi.n	8007ad4 <_ZN10SmartDryer13changeProgramEh+0x574>
					WichSetting++;
 8007ac8:	f897 3196 	ldrb.w	r3, [r7, #406]	; 0x196
 8007acc:	3301      	adds	r3, #1
 8007ace:	f887 3196 	strb.w	r3, [r7, #406]	; 0x196
					{

					}
					ExitChangeProgram = true;
				}
				break;
 8007ad2:	e17a      	b.n	8007dca <_ZN10SmartDryer13changeProgramEh+0x86a>
					clock->getTimeDate(dryerPrograms[WichProgram].startTime);
 8007ad4:	1d3b      	adds	r3, r7, #4
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6858      	ldr	r0, [r3, #4]
 8007ada:	1cfb      	adds	r3, r7, #3
 8007adc:	781a      	ldrb	r2, [r3, #0]
 8007ade:	1d39      	adds	r1, r7, #4
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	4413      	add	r3, r2
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	3340      	adds	r3, #64	; 0x40
 8007aea:	680a      	ldr	r2, [r1, #0]
 8007aec:	4413      	add	r3, r2
 8007aee:	3304      	adds	r3, #4
 8007af0:	4619      	mov	r1, r3
 8007af2:	f7fb fe1f 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
					clock->getTimeDate(dryerPrograms[WichProgram].endTime);
 8007af6:	1d3b      	adds	r3, r7, #4
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	6858      	ldr	r0, [r3, #4]
 8007afc:	1cfb      	adds	r3, r7, #3
 8007afe:	781a      	ldrb	r2, [r3, #0]
 8007b00:	1d39      	adds	r1, r7, #4
 8007b02:	4613      	mov	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4413      	add	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	3348      	adds	r3, #72	; 0x48
 8007b0c:	680a      	ldr	r2, [r1, #0]
 8007b0e:	4413      	add	r3, r2
 8007b10:	3304      	adds	r3, #4
 8007b12:	4619      	mov	r1, r3
 8007b14:	f7fb fe0e 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
					dryerPrograms[WichProgram].tempSetted = (float)TemperatureSetted;
 8007b18:	1cfb      	adds	r3, r7, #3
 8007b1a:	781c      	ldrb	r4, [r3, #0]
 8007b1c:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 8007b20:	f7f8 fff2 	bl	8000b08 <__aeabi_ui2f>
 8007b24:	4601      	mov	r1, r0
 8007b26:	1d3b      	adds	r3, r7, #4
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	4623      	mov	r3, r4
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	4423      	add	r3, r4
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4413      	add	r3, r2
 8007b34:	3354      	adds	r3, #84	; 0x54
 8007b36:	6019      	str	r1, [r3, #0]
					dryerPrograms[WichProgram].startTime.minute = StartMinute;
 8007b38:	1cfb      	adds	r3, r7, #3
 8007b3a:	781a      	ldrb	r2, [r3, #0]
 8007b3c:	1d3b      	adds	r3, r7, #4
 8007b3e:	6819      	ldr	r1, [r3, #0]
 8007b40:	4613      	mov	r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4413      	add	r3, r2
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	440b      	add	r3, r1
 8007b4a:	3345      	adds	r3, #69	; 0x45
 8007b4c:	f897 2194 	ldrb.w	r2, [r7, #404]	; 0x194
 8007b50:	701a      	strb	r2, [r3, #0]
					dryerPrograms[WichProgram].endTime.minute = EndMinute;
 8007b52:	1cfb      	adds	r3, r7, #3
 8007b54:	781a      	ldrb	r2, [r3, #0]
 8007b56:	1d3b      	adds	r3, r7, #4
 8007b58:	6819      	ldr	r1, [r3, #0]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4413      	add	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	440b      	add	r3, r1
 8007b64:	334d      	adds	r3, #77	; 0x4d
 8007b66:	f897 2192 	ldrb.w	r2, [r7, #402]	; 0x192
 8007b6a:	701a      	strb	r2, [r3, #0]
					dryerPrograms[WichProgram].startTime.hour = StartHour;
 8007b6c:	1cfb      	adds	r3, r7, #3
 8007b6e:	781a      	ldrb	r2, [r3, #0]
 8007b70:	1d3b      	adds	r3, r7, #4
 8007b72:	6819      	ldr	r1, [r3, #0]
 8007b74:	4613      	mov	r3, r2
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	4413      	add	r3, r2
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	440b      	add	r3, r1
 8007b7e:	3346      	adds	r3, #70	; 0x46
 8007b80:	f897 2195 	ldrb.w	r2, [r7, #405]	; 0x195
 8007b84:	701a      	strb	r2, [r3, #0]
					dryerPrograms[WichProgram].endTime.hour = EndHour;
 8007b86:	1cfb      	adds	r3, r7, #3
 8007b88:	781a      	ldrb	r2, [r3, #0]
 8007b8a:	1d3b      	adds	r3, r7, #4
 8007b8c:	6819      	ldr	r1, [r3, #0]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	4413      	add	r3, r2
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	440b      	add	r3, r1
 8007b98:	334e      	adds	r3, #78	; 0x4e
 8007b9a:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 8007b9e:	701a      	strb	r2, [r3, #0]
					if(StartHour > EndHour)
 8007ba0:	f897 2195 	ldrb.w	r2, [r7, #405]	; 0x195
 8007ba4:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d95b      	bls.n	8007c64 <_ZN10SmartDryer13changeProgramEh+0x704>
						if(dryerPrograms[WichProgram].endTime.day + 1 < daysInMonth[dryerPrograms[WichProgram].endTime.month - 1])
 8007bac:	1cfb      	adds	r3, r7, #3
 8007bae:	781a      	ldrb	r2, [r3, #0]
 8007bb0:	1d3b      	adds	r3, r7, #4
 8007bb2:	6819      	ldr	r1, [r3, #0]
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	4413      	add	r3, r2
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	440b      	add	r3, r1
 8007bbe:	334f      	adds	r3, #79	; 0x4f
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	1c59      	adds	r1, r3, #1
 8007bc4:	1cfb      	adds	r3, r7, #3
 8007bc6:	781a      	ldrb	r2, [r3, #0]
 8007bc8:	1d3b      	adds	r3, r7, #4
 8007bca:	6818      	ldr	r0, [r3, #0]
 8007bcc:	4613      	mov	r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	4413      	add	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4403      	add	r3, r0
 8007bd6:	3350      	adds	r3, #80	; 0x50
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	4a8c      	ldr	r2, [pc, #560]	; (8007e10 <_ZN10SmartDryer13changeProgramEh+0x8b0>)
 8007bde:	5cd3      	ldrb	r3, [r2, r3]
 8007be0:	4299      	cmp	r1, r3
 8007be2:	da19      	bge.n	8007c18 <_ZN10SmartDryer13changeProgramEh+0x6b8>
							dryerPrograms[WichProgram].endTime.day += 1;
 8007be4:	1cfb      	adds	r3, r7, #3
 8007be6:	781a      	ldrb	r2, [r3, #0]
 8007be8:	1d3b      	adds	r3, r7, #4
 8007bea:	6819      	ldr	r1, [r3, #0]
 8007bec:	4613      	mov	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4413      	add	r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	440b      	add	r3, r1
 8007bf6:	334f      	adds	r3, #79	; 0x4f
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	1cfa      	adds	r2, r7, #3
 8007bfc:	7812      	ldrb	r2, [r2, #0]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	b2d8      	uxtb	r0, r3
 8007c02:	1d3b      	adds	r3, r7, #4
 8007c04:	6819      	ldr	r1, [r3, #0]
 8007c06:	4613      	mov	r3, r2
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	4413      	add	r3, r2
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	440b      	add	r3, r1
 8007c10:	334f      	adds	r3, #79	; 0x4f
 8007c12:	4602      	mov	r2, r0
 8007c14:	701a      	strb	r2, [r3, #0]
 8007c16:	e0c3      	b.n	8007da0 <_ZN10SmartDryer13changeProgramEh+0x840>
							dryerPrograms[WichProgram].endTime.day = 1;
 8007c18:	1cfb      	adds	r3, r7, #3
 8007c1a:	781a      	ldrb	r2, [r3, #0]
 8007c1c:	1d3b      	adds	r3, r7, #4
 8007c1e:	6819      	ldr	r1, [r3, #0]
 8007c20:	4613      	mov	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	440b      	add	r3, r1
 8007c2a:	334f      	adds	r3, #79	; 0x4f
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	701a      	strb	r2, [r3, #0]
							dryerPrograms[WichProgram].endTime.month += 1;
 8007c30:	1cfb      	adds	r3, r7, #3
 8007c32:	781a      	ldrb	r2, [r3, #0]
 8007c34:	1d3b      	adds	r3, r7, #4
 8007c36:	6819      	ldr	r1, [r3, #0]
 8007c38:	4613      	mov	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	440b      	add	r3, r1
 8007c42:	3350      	adds	r3, #80	; 0x50
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	1cfa      	adds	r2, r7, #3
 8007c48:	7812      	ldrb	r2, [r2, #0]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	b2d8      	uxtb	r0, r3
 8007c4e:	1d3b      	adds	r3, r7, #4
 8007c50:	6819      	ldr	r1, [r3, #0]
 8007c52:	4613      	mov	r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	4413      	add	r3, r2
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	440b      	add	r3, r1
 8007c5c:	3350      	adds	r3, #80	; 0x50
 8007c5e:	4602      	mov	r2, r0
 8007c60:	701a      	strb	r2, [r3, #0]
 8007c62:	e09d      	b.n	8007da0 <_ZN10SmartDryer13changeProgramEh+0x840>
					else if(EndHour == StartHour)
 8007c64:	f897 2193 	ldrb.w	r2, [r7, #403]	; 0x193
 8007c68:	f897 3195 	ldrb.w	r3, [r7, #405]	; 0x195
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	f040 8097 	bne.w	8007da0 <_ZN10SmartDryer13changeProgramEh+0x840>
						if(StartMinute > EndMinute)
 8007c72:	f897 2194 	ldrb.w	r2, [r7, #404]	; 0x194
 8007c76:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	f240 8090 	bls.w	8007da0 <_ZN10SmartDryer13changeProgramEh+0x840>
							if(EndMinute + (StartMinute  - EndMinute) < 50)
 8007c80:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 8007c84:	2b31      	cmp	r3, #49	; 0x31
 8007c86:	d80d      	bhi.n	8007ca4 <_ZN10SmartDryer13changeProgramEh+0x744>
								dryerPrograms[WichProgram].endTime.minute = EndMinute + (StartMinute  - EndMinute);
 8007c88:	1cfb      	adds	r3, r7, #3
 8007c8a:	781a      	ldrb	r2, [r3, #0]
 8007c8c:	1d3b      	adds	r3, r7, #4
 8007c8e:	6819      	ldr	r1, [r3, #0]
 8007c90:	4613      	mov	r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	4413      	add	r3, r2
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	440b      	add	r3, r1
 8007c9a:	334d      	adds	r3, #77	; 0x4d
 8007c9c:	f897 2194 	ldrb.w	r2, [r7, #404]	; 0x194
 8007ca0:	701a      	strb	r2, [r3, #0]
 8007ca2:	e07d      	b.n	8007da0 <_ZN10SmartDryer13changeProgramEh+0x840>
								dryerPrograms[WichProgram].endTime.minute = EndMinute;
 8007ca4:	1cfb      	adds	r3, r7, #3
 8007ca6:	781a      	ldrb	r2, [r3, #0]
 8007ca8:	1d3b      	adds	r3, r7, #4
 8007caa:	6819      	ldr	r1, [r3, #0]
 8007cac:	4613      	mov	r3, r2
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	4413      	add	r3, r2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	440b      	add	r3, r1
 8007cb6:	334d      	adds	r3, #77	; 0x4d
 8007cb8:	f897 2192 	ldrb.w	r2, [r7, #402]	; 0x192
 8007cbc:	701a      	strb	r2, [r3, #0]
								dryerPrograms[WichProgram].endTime.hour = EndHour + 1;
 8007cbe:	1cfb      	adds	r3, r7, #3
 8007cc0:	781a      	ldrb	r2, [r3, #0]
 8007cc2:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	b2d8      	uxtb	r0, r3
 8007cca:	1d3b      	adds	r3, r7, #4
 8007ccc:	6819      	ldr	r1, [r3, #0]
 8007cce:	4613      	mov	r3, r2
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	4413      	add	r3, r2
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	440b      	add	r3, r1
 8007cd8:	334e      	adds	r3, #78	; 0x4e
 8007cda:	4602      	mov	r2, r0
 8007cdc:	701a      	strb	r2, [r3, #0]
								if(StartHour > EndHour)
 8007cde:	f897 2195 	ldrb.w	r2, [r7, #405]	; 0x195
 8007ce2:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d95a      	bls.n	8007da0 <_ZN10SmartDryer13changeProgramEh+0x840>
									if(dryerPrograms[WichProgram].endTime.day + 1 < daysInMonth[dryerPrograms[WichProgram].endTime.month - 1])
 8007cea:	1cfb      	adds	r3, r7, #3
 8007cec:	781a      	ldrb	r2, [r3, #0]
 8007cee:	1d3b      	adds	r3, r7, #4
 8007cf0:	6819      	ldr	r1, [r3, #0]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	4413      	add	r3, r2
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	440b      	add	r3, r1
 8007cfc:	334f      	adds	r3, #79	; 0x4f
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	1c59      	adds	r1, r3, #1
 8007d02:	1cfb      	adds	r3, r7, #3
 8007d04:	781a      	ldrb	r2, [r3, #0]
 8007d06:	1d3b      	adds	r3, r7, #4
 8007d08:	6818      	ldr	r0, [r3, #0]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	4413      	add	r3, r2
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	4403      	add	r3, r0
 8007d14:	3350      	adds	r3, #80	; 0x50
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	4a3d      	ldr	r2, [pc, #244]	; (8007e10 <_ZN10SmartDryer13changeProgramEh+0x8b0>)
 8007d1c:	5cd3      	ldrb	r3, [r2, r3]
 8007d1e:	4299      	cmp	r1, r3
 8007d20:	da19      	bge.n	8007d56 <_ZN10SmartDryer13changeProgramEh+0x7f6>
										dryerPrograms[WichProgram].endTime.day += 1;
 8007d22:	1cfb      	adds	r3, r7, #3
 8007d24:	781a      	ldrb	r2, [r3, #0]
 8007d26:	1d3b      	adds	r3, r7, #4
 8007d28:	6819      	ldr	r1, [r3, #0]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	4413      	add	r3, r2
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	440b      	add	r3, r1
 8007d34:	334f      	adds	r3, #79	; 0x4f
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	1cfa      	adds	r2, r7, #3
 8007d3a:	7812      	ldrb	r2, [r2, #0]
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	b2d8      	uxtb	r0, r3
 8007d40:	1d3b      	adds	r3, r7, #4
 8007d42:	6819      	ldr	r1, [r3, #0]
 8007d44:	4613      	mov	r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	4413      	add	r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	440b      	add	r3, r1
 8007d4e:	334f      	adds	r3, #79	; 0x4f
 8007d50:	4602      	mov	r2, r0
 8007d52:	701a      	strb	r2, [r3, #0]
 8007d54:	e024      	b.n	8007da0 <_ZN10SmartDryer13changeProgramEh+0x840>
										dryerPrograms[WichProgram].endTime.day = 1;
 8007d56:	1cfb      	adds	r3, r7, #3
 8007d58:	781a      	ldrb	r2, [r3, #0]
 8007d5a:	1d3b      	adds	r3, r7, #4
 8007d5c:	6819      	ldr	r1, [r3, #0]
 8007d5e:	4613      	mov	r3, r2
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4413      	add	r3, r2
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	440b      	add	r3, r1
 8007d68:	334f      	adds	r3, #79	; 0x4f
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	701a      	strb	r2, [r3, #0]
										dryerPrograms[WichProgram].endTime.month += 1;
 8007d6e:	1cfb      	adds	r3, r7, #3
 8007d70:	781a      	ldrb	r2, [r3, #0]
 8007d72:	1d3b      	adds	r3, r7, #4
 8007d74:	6819      	ldr	r1, [r3, #0]
 8007d76:	4613      	mov	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	440b      	add	r3, r1
 8007d80:	3350      	adds	r3, #80	; 0x50
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	1cfa      	adds	r2, r7, #3
 8007d86:	7812      	ldrb	r2, [r2, #0]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	b2d8      	uxtb	r0, r3
 8007d8c:	1d3b      	adds	r3, r7, #4
 8007d8e:	6819      	ldr	r1, [r3, #0]
 8007d90:	4613      	mov	r3, r2
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	4413      	add	r3, r2
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	440b      	add	r3, r1
 8007d9a:	3350      	adds	r3, #80	; 0x50
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	701a      	strb	r2, [r3, #0]
					ExitChangeProgram = true;
 8007da0:	2301      	movs	r3, #1
 8007da2:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
				break;
 8007da6:	e010      	b.n	8007dca <_ZN10SmartDryer13changeProgramEh+0x86a>
			case DryerKey::LEFT_KEY:
				if(WichSetting > 0)
 8007da8:	f897 3196 	ldrb.w	r3, [r7, #406]	; 0x196
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00b      	beq.n	8007dc8 <_ZN10SmartDryer13changeProgramEh+0x868>
					WichSetting--;
 8007db0:	f897 3196 	ldrb.w	r3, [r7, #406]	; 0x196
 8007db4:	3b01      	subs	r3, #1
 8007db6:	f887 3196 	strb.w	r3, [r7, #406]	; 0x196
				break;
 8007dba:	e005      	b.n	8007dc8 <_ZN10SmartDryer13changeProgramEh+0x868>
			case DryerKey::LONG_OK_KEY:

				break;
			case DryerKey::LONG_LEFT_KEY:
				ExitChangeProgram = true;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
				break;
 8007dc2:	e002      	b.n	8007dca <_ZN10SmartDryer13changeProgramEh+0x86a>
			default:
				break;
 8007dc4:	bf00      	nop
 8007dc6:	e000      	b.n	8007dca <_ZN10SmartDryer13changeProgramEh+0x86a>
				break;
 8007dc8:	bf00      	nop
		}
		peripheralsControl();
 8007dca:	1d3b      	adds	r3, r7, #4
 8007dcc:	6818      	ldr	r0, [r3, #0]
 8007dce:	f7fd feb9 	bl	8005b44 <_ZN10SmartDryer18peripheralsControlEv>
	while(!ExitChangeProgram)
 8007dd2:	e43f      	b.n	8007654 <_ZN10SmartDryer13changeProgramEh+0xf4>
	String Title = "", SubTitle = "", Number = "";
 8007dd4:	f107 030c 	add.w	r3, r7, #12
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f006 fbec 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007de2:	4618      	mov	r0, r3
 8007de4:	f006 fbe7 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007de8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007dec:	4618      	mov	r0, r3
 8007dee:	f006 fbe2 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Time = "", Date = "";
 8007df2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007df6:	4618      	mov	r0, r3
 8007df8:	f006 fbdd 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007dfc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007e00:	4618      	mov	r0, r3
 8007e02:	f006 fbd8 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 8007e06:	bf00      	nop
 8007e08:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd90      	pop	{r4, r7, pc}
 8007e10:	0801256c 	.word	0x0801256c

08007e14 <_ZN10SmartDryer12startProgramEh>:

void SmartDryer::startProgram(uint8_t WichProgram)
{
 8007e14:	b590      	push	{r4, r7, lr}
 8007e16:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 8007e1a:	af02      	add	r7, sp, #8
 8007e1c:	1d3b      	adds	r3, r7, #4
 8007e1e:	6018      	str	r0, [r3, #0]
 8007e20:	460a      	mov	r2, r1
 8007e22:	1cfb      	adds	r3, r7, #3
 8007e24:	701a      	strb	r2, [r3, #0]
	bool ExitStartProgram = false;
 8007e26:	2300      	movs	r3, #0
 8007e28:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	bool ProgramEnd = false;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	f887 3336 	strb.w	r3, [r7, #822]	; 0x336
	String Time = "", Date = "";
 8007e32:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007e36:	4618      	mov	r0, r3
 8007e38:	f006 fa92 	bl	800e360 <_ZNSaIcEC1Ev>
 8007e3c:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8007e40:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8007e44:	49cb      	ldr	r1, [pc, #812]	; (8008174 <_ZN10SmartDryer12startProgramEh+0x360>)
 8007e46:	4618      	mov	r0, r3
 8007e48:	f006 fd22 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007e4c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007e50:	4618      	mov	r0, r3
 8007e52:	f006 fa86 	bl	800e362 <_ZNSaIcED1Ev>
 8007e56:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f006 fa80 	bl	800e360 <_ZNSaIcEC1Ev>
 8007e60:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8007e64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007e68:	49c2      	ldr	r1, [pc, #776]	; (8008174 <_ZN10SmartDryer12startProgramEh+0x360>)
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f006 fd10 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007e70:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8007e74:	4618      	mov	r0, r3
 8007e76:	f006 fa74 	bl	800e362 <_ZNSaIcED1Ev>
	String StartHour = "", StartMinute = "", EndHour = "", EndMinute = "";
 8007e7a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f006 fa6e 	bl	800e360 <_ZNSaIcEC1Ev>
 8007e84:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8007e88:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007e8c:	49b9      	ldr	r1, [pc, #740]	; (8008174 <_ZN10SmartDryer12startProgramEh+0x360>)
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f006 fcfe 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007e94:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f006 fa62 	bl	800e362 <_ZNSaIcED1Ev>
 8007e9e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f006 fa5c 	bl	800e360 <_ZNSaIcEC1Ev>
 8007ea8:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8007eac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007eb0:	49b0      	ldr	r1, [pc, #704]	; (8008174 <_ZN10SmartDryer12startProgramEh+0x360>)
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f006 fcec 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007eb8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f006 fa50 	bl	800e362 <_ZNSaIcED1Ev>
 8007ec2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f006 fa4a 	bl	800e360 <_ZNSaIcEC1Ev>
 8007ecc:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8007ed0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007ed4:	49a7      	ldr	r1, [pc, #668]	; (8008174 <_ZN10SmartDryer12startProgramEh+0x360>)
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f006 fcda 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007edc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f006 fa3e 	bl	800e362 <_ZNSaIcED1Ev>
 8007ee6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007eea:	4618      	mov	r0, r3
 8007eec:	f006 fa38 	bl	800e360 <_ZNSaIcEC1Ev>
 8007ef0:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8007ef4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007ef8:	499e      	ldr	r1, [pc, #632]	; (8008174 <_ZN10SmartDryer12startProgramEh+0x360>)
 8007efa:	4618      	mov	r0, r3
 8007efc:	f006 fcc8 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007f00:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007f04:	4618      	mov	r0, r3
 8007f06:	f006 fa2c 	bl	800e362 <_ZNSaIcED1Ev>
	String TempRead = "", TempSet = "";
 8007f0a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f006 fa26 	bl	800e360 <_ZNSaIcEC1Ev>
 8007f14:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8007f18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007f1c:	4995      	ldr	r1, [pc, #596]	; (8008174 <_ZN10SmartDryer12startProgramEh+0x360>)
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f006 fcb6 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007f24:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f006 fa1a 	bl	800e362 <_ZNSaIcED1Ev>
 8007f2e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8007f32:	4618      	mov	r0, r3
 8007f34:	f006 fa14 	bl	800e360 <_ZNSaIcEC1Ev>
 8007f38:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8007f3c:	f107 0314 	add.w	r3, r7, #20
 8007f40:	498c      	ldr	r1, [pc, #560]	; (8008174 <_ZN10SmartDryer12startProgramEh+0x360>)
 8007f42:	4618      	mov	r0, r3
 8007f44:	f006 fca4 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007f48:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f006 fa08 	bl	800e362 <_ZNSaIcED1Ev>
	DS1307_RTC::TIME_DATE_T ActualTime;
	StartHour = dryerPrograms[WichProgram].startTime.hour > 9 ? std::to_string(dryerPrograms[WichProgram].startTime.hour) : "0" + std::to_string(dryerPrograms[WichProgram].startTime.hour);
 8007f52:	1cfb      	adds	r3, r7, #3
 8007f54:	781a      	ldrb	r2, [r3, #0]
 8007f56:	1d3b      	adds	r3, r7, #4
 8007f58:	6819      	ldr	r1, [r3, #0]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	4413      	add	r3, r2
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	440b      	add	r3, r1
 8007f64:	3346      	adds	r3, #70	; 0x46
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	2400      	movs	r4, #0
 8007f6a:	2b09      	cmp	r3, #9
 8007f6c:	d912      	bls.n	8007f94 <_ZN10SmartDryer12startProgramEh+0x180>
 8007f6e:	1cfb      	adds	r3, r7, #3
 8007f70:	781a      	ldrb	r2, [r3, #0]
 8007f72:	1d3b      	adds	r3, r7, #4
 8007f74:	6819      	ldr	r1, [r3, #0]
 8007f76:	4613      	mov	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	4413      	add	r3, r2
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	440b      	add	r3, r1
 8007f80:	3346      	adds	r3, #70	; 0x46
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	461a      	mov	r2, r3
 8007f86:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8007f8a:	4611      	mov	r1, r2
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7fb fa43 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8007f92:	e01a      	b.n	8007fca <_ZN10SmartDryer12startProgramEh+0x1b6>
 8007f94:	1cfb      	adds	r3, r7, #3
 8007f96:	781a      	ldrb	r2, [r3, #0]
 8007f98:	1d3b      	adds	r3, r7, #4
 8007f9a:	6819      	ldr	r1, [r3, #0]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	4413      	add	r3, r2
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	440b      	add	r3, r1
 8007fa6:	3346      	adds	r3, #70	; 0x46
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	461a      	mov	r2, r3
 8007fac:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8007fb0:	4611      	mov	r1, r2
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7fb fa30 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8007fb8:	2401      	movs	r4, #1
 8007fba:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8007fbe:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8007fc2:	496d      	ldr	r1, [pc, #436]	; (8008178 <_ZN10SmartDryer12startProgramEh+0x364>)
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7fb ffb1 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8007fca:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8007fce:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007fd2:	4611      	mov	r1, r2
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f006 fafa 	bl	800e5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8007fda:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f006 fae9 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007fe4:	2c00      	cmp	r4, #0
 8007fe6:	d004      	beq.n	8007ff2 <_ZN10SmartDryer12startProgramEh+0x1de>
 8007fe8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8007fec:	4618      	mov	r0, r3
 8007fee:	f006 fae2 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	StartMinute = dryerPrograms[WichProgram].startTime.minute > 9 ? std::to_string(dryerPrograms[WichProgram].startTime.minute) : "0" + std::to_string(dryerPrograms[WichProgram].startTime.minute);
 8007ff2:	1cfb      	adds	r3, r7, #3
 8007ff4:	781a      	ldrb	r2, [r3, #0]
 8007ff6:	1d3b      	adds	r3, r7, #4
 8007ff8:	6819      	ldr	r1, [r3, #0]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4413      	add	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	440b      	add	r3, r1
 8008004:	3345      	adds	r3, #69	; 0x45
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	2400      	movs	r4, #0
 800800a:	2b09      	cmp	r3, #9
 800800c:	d912      	bls.n	8008034 <_ZN10SmartDryer12startProgramEh+0x220>
 800800e:	1cfb      	adds	r3, r7, #3
 8008010:	781a      	ldrb	r2, [r3, #0]
 8008012:	1d3b      	adds	r3, r7, #4
 8008014:	6819      	ldr	r1, [r3, #0]
 8008016:	4613      	mov	r3, r2
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	4413      	add	r3, r2
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	440b      	add	r3, r1
 8008020:	3345      	adds	r3, #69	; 0x45
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	461a      	mov	r2, r3
 8008026:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800802a:	4611      	mov	r1, r2
 800802c:	4618      	mov	r0, r3
 800802e:	f7fb f9f3 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8008032:	e01a      	b.n	800806a <_ZN10SmartDryer12startProgramEh+0x256>
 8008034:	1cfb      	adds	r3, r7, #3
 8008036:	781a      	ldrb	r2, [r3, #0]
 8008038:	1d3b      	adds	r3, r7, #4
 800803a:	6819      	ldr	r1, [r3, #0]
 800803c:	4613      	mov	r3, r2
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	4413      	add	r3, r2
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	440b      	add	r3, r1
 8008046:	3345      	adds	r3, #69	; 0x45
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	461a      	mov	r2, r3
 800804c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8008050:	4611      	mov	r1, r2
 8008052:	4618      	mov	r0, r3
 8008054:	f7fb f9e0 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8008058:	2401      	movs	r4, #1
 800805a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800805e:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8008062:	4945      	ldr	r1, [pc, #276]	; (8008178 <_ZN10SmartDryer12startProgramEh+0x364>)
 8008064:	4618      	mov	r0, r3
 8008066:	f7fb ff61 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800806a:	f507 7292 	add.w	r2, r7, #292	; 0x124
 800806e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008072:	4611      	mov	r1, r2
 8008074:	4618      	mov	r0, r3
 8008076:	f006 faaa 	bl	800e5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800807a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800807e:	4618      	mov	r0, r3
 8008080:	f006 fa99 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008084:	2c00      	cmp	r4, #0
 8008086:	d004      	beq.n	8008092 <_ZN10SmartDryer12startProgramEh+0x27e>
 8008088:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800808c:	4618      	mov	r0, r3
 800808e:	f006 fa92 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	EndHour = dryerPrograms[WichProgram].endTime.hour > 9 ? std::to_string(dryerPrograms[WichProgram].endTime.hour) : "0" + std::to_string(dryerPrograms[WichProgram].endTime.hour);
 8008092:	1cfb      	adds	r3, r7, #3
 8008094:	781a      	ldrb	r2, [r3, #0]
 8008096:	1d3b      	adds	r3, r7, #4
 8008098:	6819      	ldr	r1, [r3, #0]
 800809a:	4613      	mov	r3, r2
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	4413      	add	r3, r2
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	440b      	add	r3, r1
 80080a4:	334e      	adds	r3, #78	; 0x4e
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	2400      	movs	r4, #0
 80080aa:	2b09      	cmp	r3, #9
 80080ac:	d912      	bls.n	80080d4 <_ZN10SmartDryer12startProgramEh+0x2c0>
 80080ae:	1cfb      	adds	r3, r7, #3
 80080b0:	781a      	ldrb	r2, [r3, #0]
 80080b2:	1d3b      	adds	r3, r7, #4
 80080b4:	6819      	ldr	r1, [r3, #0]
 80080b6:	4613      	mov	r3, r2
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	4413      	add	r3, r2
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	440b      	add	r3, r1
 80080c0:	334e      	adds	r3, #78	; 0x4e
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	461a      	mov	r2, r3
 80080c6:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80080ca:	4611      	mov	r1, r2
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7fb f9a3 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 80080d2:	e01a      	b.n	800810a <_ZN10SmartDryer12startProgramEh+0x2f6>
 80080d4:	1cfb      	adds	r3, r7, #3
 80080d6:	781a      	ldrb	r2, [r3, #0]
 80080d8:	1d3b      	adds	r3, r7, #4
 80080da:	6819      	ldr	r1, [r3, #0]
 80080dc:	4613      	mov	r3, r2
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	4413      	add	r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	440b      	add	r3, r1
 80080e6:	334e      	adds	r3, #78	; 0x4e
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	461a      	mov	r2, r3
 80080ec:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 80080f0:	4611      	mov	r1, r2
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7fb f990 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 80080f8:	2401      	movs	r4, #1
 80080fa:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80080fe:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 8008102:	491d      	ldr	r1, [pc, #116]	; (8008178 <_ZN10SmartDryer12startProgramEh+0x364>)
 8008104:	4618      	mov	r0, r3
 8008106:	f7fb ff11 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800810a:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 800810e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008112:	4611      	mov	r1, r2
 8008114:	4618      	mov	r0, r3
 8008116:	f006 fa5a 	bl	800e5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800811a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800811e:	4618      	mov	r0, r3
 8008120:	f006 fa49 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008124:	2c00      	cmp	r4, #0
 8008126:	d004      	beq.n	8008132 <_ZN10SmartDryer12startProgramEh+0x31e>
 8008128:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800812c:	4618      	mov	r0, r3
 800812e:	f006 fa42 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	EndMinute = dryerPrograms[WichProgram].endTime.minute > 9 ? std::to_string(dryerPrograms[WichProgram].endTime.minute) : "0" + std::to_string(dryerPrograms[WichProgram].endTime.minute);
 8008132:	1cfb      	adds	r3, r7, #3
 8008134:	781a      	ldrb	r2, [r3, #0]
 8008136:	1d3b      	adds	r3, r7, #4
 8008138:	6819      	ldr	r1, [r3, #0]
 800813a:	4613      	mov	r3, r2
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	4413      	add	r3, r2
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	440b      	add	r3, r1
 8008144:	334d      	adds	r3, #77	; 0x4d
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	2400      	movs	r4, #0
 800814a:	2b09      	cmp	r3, #9
 800814c:	d916      	bls.n	800817c <_ZN10SmartDryer12startProgramEh+0x368>
 800814e:	1cfb      	adds	r3, r7, #3
 8008150:	781a      	ldrb	r2, [r3, #0]
 8008152:	1d3b      	adds	r3, r7, #4
 8008154:	6819      	ldr	r1, [r3, #0]
 8008156:	4613      	mov	r3, r2
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4413      	add	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	440b      	add	r3, r1
 8008160:	334d      	adds	r3, #77	; 0x4d
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	461a      	mov	r2, r3
 8008166:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800816a:	4611      	mov	r1, r2
 800816c:	4618      	mov	r0, r3
 800816e:	f7fb f953 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8008172:	e01e      	b.n	80081b2 <_ZN10SmartDryer12startProgramEh+0x39e>
 8008174:	0800f598 	.word	0x0800f598
 8008178:	0800f778 	.word	0x0800f778
 800817c:	1cfb      	adds	r3, r7, #3
 800817e:	781a      	ldrb	r2, [r3, #0]
 8008180:	1d3b      	adds	r3, r7, #4
 8008182:	6819      	ldr	r1, [r3, #0]
 8008184:	4613      	mov	r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4413      	add	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	440b      	add	r3, r1
 800818e:	334d      	adds	r3, #77	; 0x4d
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	461a      	mov	r2, r3
 8008194:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8008198:	4611      	mov	r1, r2
 800819a:	4618      	mov	r0, r3
 800819c:	f7fb f93c 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 80081a0:	2401      	movs	r4, #1
 80081a2:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80081a6:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 80081aa:	49dc      	ldr	r1, [pc, #880]	; (800851c <_ZN10SmartDryer12startProgramEh+0x708>)
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7fb febd 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 80081b2:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 80081b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80081ba:	4611      	mov	r1, r2
 80081bc:	4618      	mov	r0, r3
 80081be:	f006 fa06 	bl	800e5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80081c2:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80081c6:	4618      	mov	r0, r3
 80081c8:	f006 f9f5 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80081cc:	2c00      	cmp	r4, #0
 80081ce:	d004      	beq.n	80081da <_ZN10SmartDryer12startProgramEh+0x3c6>
 80081d0:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80081d4:	4618      	mov	r0, r3
 80081d6:	f006 f9ee 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	TempSet = std::to_string(dryerPrograms[WichProgram].tempSetted);
 80081da:	1cfb      	adds	r3, r7, #3
 80081dc:	781a      	ldrb	r2, [r3, #0]
 80081de:	1d3b      	adds	r3, r7, #4
 80081e0:	6819      	ldr	r1, [r3, #0]
 80081e2:	4613      	mov	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4413      	add	r3, r2
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	440b      	add	r3, r1
 80081ec:	3354      	adds	r3, #84	; 0x54
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80081f4:	4611      	mov	r1, r2
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7fd f88c 	bl	8005314 <_ZNSt7__cxx119to_stringEf>
 80081fc:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8008200:	f107 0314 	add.w	r3, r7, #20
 8008204:	4611      	mov	r1, r2
 8008206:	4618      	mov	r0, r3
 8008208:	f006 f9e1 	bl	800e5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800820c:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8008210:	4618      	mov	r0, r3
 8008212:	f006 f9d0 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	while(!ExitStartProgram)
 8008216:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 800821a:	2b00      	cmp	r3, #0
 800821c:	f040 82b9 	bne.w	8008792 <_ZN10SmartDryer12startProgramEh+0x97e>
	{
		if(programStartedTimer->isFinished(true, 500))
 8008220:	1d3b      	adds	r3, r7, #4
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008226:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800822a:	2101      	movs	r1, #1
 800822c:	4618      	mov	r0, r3
 800822e:	f7fb f8c0 	bl	80033b2 <_ZN11ChronoTimer10isFinishedEbm>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d008      	beq.n	800824a <_ZN10SmartDryer12startProgramEh+0x436>
		{
			clock->getTimeDate(ActualTime);
 8008238:	1d3b      	adds	r3, r7, #4
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	f107 020c 	add.w	r2, r7, #12
 8008242:	4611      	mov	r1, r2
 8008244:	4618      	mov	r0, r3
 8008246:	f7fb fa75 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
		}
		TempRead = std::to_string(chamberTemperature.readedTemperatureFL);
 800824a:	1d3b      	adds	r3, r7, #4
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008252:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8008256:	4611      	mov	r1, r2
 8008258:	4618      	mov	r0, r3
 800825a:	f7fd f85b 	bl	8005314 <_ZNSt7__cxx119to_stringEf>
 800825e:	f507 72e6 	add.w	r2, r7, #460	; 0x1cc
 8008262:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008266:	4611      	mov	r1, r2
 8008268:	4618      	mov	r0, r3
 800826a:	f006 f9b0 	bl	800e5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800826e:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8008272:	4618      	mov	r0, r3
 8008274:	f006 f99f 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->clearFrameBuffer();
 8008278:	1d3b      	adds	r3, r7, #4
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4618      	mov	r0, r3
 8008280:	f7fc faf9 	bl	8004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 8008284:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8008288:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 800828c:	1d3b      	adds	r3, r7, #4
 800828e:	6818      	ldr	r0, [r3, #0]
 8008290:	f7fd fc6d 	bl	8005b6e <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString("Temperatura letta", NHDST7565_LCD::LEFT_POS, 10, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 8008294:	1d3b      	adds	r3, r7, #4
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681c      	ldr	r4, [r3, #0]
 800829a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800829e:	4618      	mov	r0, r3
 80082a0:	f006 f85e 	bl	800e360 <_ZNSaIcEC1Ev>
 80082a4:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 80082a8:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 80082ac:	499c      	ldr	r1, [pc, #624]	; (8008520 <_ZN10SmartDryer12startProgramEh+0x70c>)
 80082ae:	4618      	mov	r0, r3
 80082b0:	f006 faee 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80082b4:	1d3b      	adds	r3, r7, #4
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80082be:	f507 71f2 	add.w	r1, r7, #484	; 0x1e4
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	230a      	movs	r3, #10
 80082c6:	2282      	movs	r2, #130	; 0x82
 80082c8:	4620      	mov	r0, r4
 80082ca:	f7fc fafc 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80082ce:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 80082d2:	4618      	mov	r0, r3
 80082d4:	f006 f96f 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80082d8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80082dc:	4618      	mov	r0, r3
 80082de:	f006 f840 	bl	800e362 <_ZNSaIcED1Ev>
		display->drawString("Temperatura target", NHDST7565_LCD::RIGHT_POS, 10, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 80082e2:	1d3b      	adds	r3, r7, #4
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681c      	ldr	r4, [r3, #0]
 80082e8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80082ec:	4618      	mov	r0, r3
 80082ee:	f006 f837 	bl	800e360 <_ZNSaIcEC1Ev>
 80082f2:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80082f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80082fa:	498a      	ldr	r1, [pc, #552]	; (8008524 <_ZN10SmartDryer12startProgramEh+0x710>)
 80082fc:	4618      	mov	r0, r3
 80082fe:	f006 fac7 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008302:	1d3b      	adds	r3, r7, #4
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800830c:	f507 7100 	add.w	r1, r7, #512	; 0x200
 8008310:	9300      	str	r3, [sp, #0]
 8008312:	230a      	movs	r3, #10
 8008314:	2284      	movs	r2, #132	; 0x84
 8008316:	4620      	mov	r0, r4
 8008318:	f7fc fad5 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800831c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008320:	4618      	mov	r0, r3
 8008322:	f006 f948 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008326:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800832a:	4618      	mov	r0, r3
 800832c:	f006 f819 	bl	800e362 <_ZNSaIcED1Ev>
		display->drawString(TempRead, NHDST7565_LCD::LEFT_POS, 20, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8008330:	1d3b      	adds	r3, r7, #4
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	681c      	ldr	r4, [r3, #0]
 8008336:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800833a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800833e:	4611      	mov	r1, r2
 8008340:	4618      	mov	r0, r3
 8008342:	f006 fa72 	bl	800e82a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8008346:	1d3b      	adds	r3, r7, #4
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008350:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008354:	9300      	str	r3, [sp, #0]
 8008356:	2314      	movs	r3, #20
 8008358:	2282      	movs	r2, #130	; 0x82
 800835a:	4620      	mov	r0, r4
 800835c:	f7fc fab3 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8008360:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008364:	4618      	mov	r0, r3
 8008366:	f006 f926 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(TempSet, NHDST7565_LCD::RIGHT_POS, 20, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800836a:	1d3b      	adds	r3, r7, #4
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681c      	ldr	r4, [r3, #0]
 8008370:	f107 0214 	add.w	r2, r7, #20
 8008374:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8008378:	4611      	mov	r1, r2
 800837a:	4618      	mov	r0, r3
 800837c:	f006 fa55 	bl	800e82a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8008380:	1d3b      	adds	r3, r7, #4
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800838a:	f507 710d 	add.w	r1, r7, #564	; 0x234
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	2314      	movs	r3, #20
 8008392:	2284      	movs	r2, #132	; 0x84
 8008394:	4620      	mov	r0, r4
 8008396:	f7fc fa96 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800839a:	f507 730d 	add.w	r3, r7, #564	; 0x234
 800839e:	4618      	mov	r0, r3
 80083a0:	f006 f909 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString("Inizio programma", NHDST7565_LCD::LEFT_POS, 40, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 80083a4:	1d3b      	adds	r3, r7, #4
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681c      	ldr	r4, [r3, #0]
 80083aa:	f507 7319 	add.w	r3, r7, #612	; 0x264
 80083ae:	4618      	mov	r0, r3
 80083b0:	f005 ffd6 	bl	800e360 <_ZNSaIcEC1Ev>
 80083b4:	f507 7219 	add.w	r2, r7, #612	; 0x264
 80083b8:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80083bc:	495a      	ldr	r1, [pc, #360]	; (8008528 <_ZN10SmartDryer12startProgramEh+0x714>)
 80083be:	4618      	mov	r0, r3
 80083c0:	f006 fa66 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80083c4:	1d3b      	adds	r3, r7, #4
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80083ce:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 80083d2:	9300      	str	r3, [sp, #0]
 80083d4:	2328      	movs	r3, #40	; 0x28
 80083d6:	2282      	movs	r2, #130	; 0x82
 80083d8:	4620      	mov	r0, r4
 80083da:	f7fc fa74 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80083de:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80083e2:	4618      	mov	r0, r3
 80083e4:	f006 f8e7 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80083e8:	f507 7319 	add.w	r3, r7, #612	; 0x264
 80083ec:	4618      	mov	r0, r3
 80083ee:	f005 ffb8 	bl	800e362 <_ZNSaIcED1Ev>
		display->drawString("Fine programma", NHDST7565_LCD::RIGHT_POS, 40, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 80083f2:	1d3b      	adds	r3, r7, #4
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681c      	ldr	r4, [r3, #0]
 80083f8:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80083fc:	4618      	mov	r0, r3
 80083fe:	f005 ffaf 	bl	800e360 <_ZNSaIcEC1Ev>
 8008402:	f507 7220 	add.w	r2, r7, #640	; 0x280
 8008406:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800840a:	4948      	ldr	r1, [pc, #288]	; (800852c <_ZN10SmartDryer12startProgramEh+0x718>)
 800840c:	4618      	mov	r0, r3
 800840e:	f006 fa3f 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008412:	1d3b      	adds	r3, r7, #4
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800841c:	f507 711a 	add.w	r1, r7, #616	; 0x268
 8008420:	9300      	str	r3, [sp, #0]
 8008422:	2328      	movs	r3, #40	; 0x28
 8008424:	2284      	movs	r2, #132	; 0x84
 8008426:	4620      	mov	r0, r4
 8008428:	f7fc fa4d 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800842c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008430:	4618      	mov	r0, r3
 8008432:	f006 f8c0 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008436:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800843a:	4618      	mov	r0, r3
 800843c:	f005 ff91 	bl	800e362 <_ZNSaIcED1Ev>
		display->drawString(StartHour + ":" + StartMinute, NHDST7565_LCD::LEFT_POS, 50, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8008440:	1d3b      	adds	r3, r7, #4
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681c      	ldr	r4, [r3, #0]
 8008446:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 800844a:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800844e:	4a38      	ldr	r2, [pc, #224]	; (8008530 <_ZN10SmartDryer12startProgramEh+0x71c>)
 8008450:	4618      	mov	r0, r3
 8008452:	f7fb fd83 	bl	8003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8008456:	f507 7321 	add.w	r3, r7, #644	; 0x284
 800845a:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800845e:	f507 7127 	add.w	r1, r7, #668	; 0x29c
 8008462:	4618      	mov	r0, r3
 8008464:	f7fb fd8d 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8008468:	1d3b      	adds	r3, r7, #4
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008472:	f507 7121 	add.w	r1, r7, #644	; 0x284
 8008476:	9300      	str	r3, [sp, #0]
 8008478:	2332      	movs	r3, #50	; 0x32
 800847a:	2282      	movs	r2, #130	; 0x82
 800847c:	4620      	mov	r0, r4
 800847e:	f7fc fa22 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8008482:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8008486:	4618      	mov	r0, r3
 8008488:	f006 f895 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800848c:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8008490:	4618      	mov	r0, r3
 8008492:	f006 f890 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(EndHour + ":" + EndMinute, NHDST7565_LCD::RIGHT_POS, 50, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8008496:	1d3b      	adds	r3, r7, #4
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681c      	ldr	r4, [r3, #0]
 800849c:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 80084a0:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80084a4:	4a22      	ldr	r2, [pc, #136]	; (8008530 <_ZN10SmartDryer12startProgramEh+0x71c>)
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7fb fd58 	bl	8003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 80084ac:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80084b0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80084b4:	f507 7133 	add.w	r1, r7, #716	; 0x2cc
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7fb fd62 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 80084be:	1d3b      	adds	r3, r7, #4
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80084c8:	f507 712d 	add.w	r1, r7, #692	; 0x2b4
 80084cc:	9300      	str	r3, [sp, #0]
 80084ce:	2332      	movs	r3, #50	; 0x32
 80084d0:	2284      	movs	r2, #132	; 0x84
 80084d2:	4620      	mov	r0, r4
 80084d4:	f7fc f9f7 	bl	80048c6 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80084d8:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80084dc:	4618      	mov	r0, r3
 80084de:	f006 f86a 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80084e2:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 80084e6:	4618      	mov	r0, r3
 80084e8:	f006 f865 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->sendFrameBuffer();
 80084ec:	1d3b      	adds	r3, r7, #4
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7fc f9cc 	bl	8004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 80084f8:	2308      	movs	r3, #8
 80084fa:	f887 3335 	strb.w	r3, [r7, #821]	; 0x335
		WichKey = keyboard->checkKey();
 80084fe:	1d3b      	adds	r3, r7, #4
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	4618      	mov	r0, r3
 8008506:	f7fc fe57 	bl	80051b8 <_ZN8DryerKey8checkKeyEv>
 800850a:	4603      	mov	r3, r0
 800850c:	f887 3335 	strb.w	r3, [r7, #821]	; 0x335
		switch(WichKey)
 8008510:	f897 3335 	ldrb.w	r3, [r7, #821]	; 0x335
 8008514:	2b03      	cmp	r3, #3
 8008516:	d04f      	beq.n	80085b8 <_ZN10SmartDryer12startProgramEh+0x7a4>
 8008518:	e00c      	b.n	8008534 <_ZN10SmartDryer12startProgramEh+0x720>
 800851a:	bf00      	nop
 800851c:	0800f778 	.word	0x0800f778
 8008520:	0800f77c 	.word	0x0800f77c
 8008524:	0800f790 	.word	0x0800f790
 8008528:	0800f7a4 	.word	0x0800f7a4
 800852c:	0800f7b8 	.word	0x0800f7b8
 8008530:	0800f7c8 	.word	0x0800f7c8
 8008534:	2b06      	cmp	r3, #6
 8008536:	d000      	beq.n	800853a <_ZN10SmartDryer12startProgramEh+0x726>
				programStartedTimer->stopTimer();
				ProgramEnd = true;
				ExitStartProgram = true;
				break;
			default:
				break;
 8008538:	e03f      	b.n	80085ba <_ZN10SmartDryer12startProgramEh+0x7a6>
				statusParam->dryerOn = false;
 800853a:	1d3b      	adds	r3, r7, #4
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008540:	2200      	movs	r2, #0
 8008542:	701a      	strb	r2, [r3, #0]
				statusParam->programStarted = false;
 8008544:	1d3b      	adds	r3, r7, #4
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854a:	2200      	movs	r2, #0
 800854c:	721a      	strb	r2, [r3, #8]
				ledStatus = PROGRAM_END;
 800854e:	1d3b      	adds	r3, r7, #4
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8008556:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
				display->drawFullScreenPopUp("Programma terminato", 2000);
 800855a:	1d3b      	adds	r3, r7, #4
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681c      	ldr	r4, [r3, #0]
 8008560:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8008564:	4618      	mov	r0, r3
 8008566:	f005 fefb 	bl	800e360 <_ZNSaIcEC1Ev>
 800856a:	f507 723f 	add.w	r2, r7, #764	; 0x2fc
 800856e:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8008572:	499e      	ldr	r1, [pc, #632]	; (80087ec <_ZN10SmartDryer12startProgramEh+0x9d8>)
 8008574:	4618      	mov	r0, r3
 8008576:	f006 f98b 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800857a:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 800857e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008582:	4619      	mov	r1, r3
 8008584:	4620      	mov	r0, r4
 8008586:	f7fc fcc7 	bl	8004f18 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 800858a:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 800858e:	4618      	mov	r0, r3
 8008590:	f006 f811 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008594:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8008598:	4618      	mov	r0, r3
 800859a:	f005 fee2 	bl	800e362 <_ZNSaIcED1Ev>
				programStartedTimer->stopTimer();
 800859e:	1d3b      	adds	r3, r7, #4
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7fa fee0 	bl	800336a <_ZN11ChronoTimer9stopTimerEv>
				ProgramEnd = true;
 80085aa:	2301      	movs	r3, #1
 80085ac:	f887 3336 	strb.w	r3, [r7, #822]	; 0x336
				ExitStartProgram = true;
 80085b0:	2301      	movs	r3, #1
 80085b2:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
				break;
 80085b6:	e000      	b.n	80085ba <_ZN10SmartDryer12startProgramEh+0x7a6>
				break;
 80085b8:	bf00      	nop
		}

		if(!statusParam->programStarted && !ProgramEnd)
 80085ba:	1d3b      	adds	r3, r7, #4
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c0:	7a1b      	ldrb	r3, [r3, #8]
 80085c2:	f083 0301 	eor.w	r3, r3, #1
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d06c      	beq.n	80086a6 <_ZN10SmartDryer12startProgramEh+0x892>
 80085cc:	f897 3336 	ldrb.w	r3, [r7, #822]	; 0x336
 80085d0:	f083 0301 	eor.w	r3, r3, #1
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d065      	beq.n	80086a6 <_ZN10SmartDryer12startProgramEh+0x892>
		{
			if(ActualTime.hour == dryerPrograms[WichProgram].startTime.hour && ActualTime.minute == dryerPrograms[WichProgram].startTime.minute &&
 80085da:	f107 030c 	add.w	r3, r7, #12
 80085de:	7899      	ldrb	r1, [r3, #2]
 80085e0:	1cfb      	adds	r3, r7, #3
 80085e2:	781a      	ldrb	r2, [r3, #0]
 80085e4:	1d3b      	adds	r3, r7, #4
 80085e6:	6818      	ldr	r0, [r3, #0]
 80085e8:	4613      	mov	r3, r2
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	4413      	add	r3, r2
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	4403      	add	r3, r0
 80085f2:	3346      	adds	r3, #70	; 0x46
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	4299      	cmp	r1, r3
 80085f8:	f040 80c5 	bne.w	8008786 <_ZN10SmartDryer12startProgramEh+0x972>
 80085fc:	f107 030c 	add.w	r3, r7, #12
 8008600:	7859      	ldrb	r1, [r3, #1]
 8008602:	1cfb      	adds	r3, r7, #3
 8008604:	781a      	ldrb	r2, [r3, #0]
 8008606:	1d3b      	adds	r3, r7, #4
 8008608:	6818      	ldr	r0, [r3, #0]
 800860a:	4613      	mov	r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	4413      	add	r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4403      	add	r3, r0
 8008614:	3345      	adds	r3, #69	; 0x45
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	4299      	cmp	r1, r3
 800861a:	f040 80b4 	bne.w	8008786 <_ZN10SmartDryer12startProgramEh+0x972>
					ActualTime.day == dryerPrograms[WichProgram].startTime.day)
 800861e:	f107 030c 	add.w	r3, r7, #12
 8008622:	78d9      	ldrb	r1, [r3, #3]
 8008624:	1cfb      	adds	r3, r7, #3
 8008626:	781a      	ldrb	r2, [r3, #0]
 8008628:	1d3b      	adds	r3, r7, #4
 800862a:	6818      	ldr	r0, [r3, #0]
 800862c:	4613      	mov	r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	4413      	add	r3, r2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4403      	add	r3, r0
 8008636:	3347      	adds	r3, #71	; 0x47
 8008638:	781b      	ldrb	r3, [r3, #0]
			if(ActualTime.hour == dryerPrograms[WichProgram].startTime.hour && ActualTime.minute == dryerPrograms[WichProgram].startTime.minute &&
 800863a:	4299      	cmp	r1, r3
 800863c:	f040 80a3 	bne.w	8008786 <_ZN10SmartDryer12startProgramEh+0x972>
			{
				statusParam->programStarted = true;
 8008640:	1d3b      	adds	r3, r7, #4
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008646:	2201      	movs	r2, #1
 8008648:	721a      	strb	r2, [r3, #8]
				statusParam->dryerOn = true;
 800864a:	1d3b      	adds	r3, r7, #4
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008650:	2201      	movs	r2, #1
 8008652:	701a      	strb	r2, [r3, #0]
				ledStatus = PROGRAM_INIT;
 8008654:	1d3b      	adds	r3, r7, #4
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f240 12f5 	movw	r2, #501	; 0x1f5
 800865c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
				display->drawFullScreenPopUp("Programma iniziato", 2000);
 8008660:	1d3b      	adds	r3, r7, #4
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681c      	ldr	r4, [r3, #0]
 8008666:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800866a:	4618      	mov	r0, r3
 800866c:	f005 fe78 	bl	800e360 <_ZNSaIcEC1Ev>
 8008670:	f507 7246 	add.w	r2, r7, #792	; 0x318
 8008674:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8008678:	495d      	ldr	r1, [pc, #372]	; (80087f0 <_ZN10SmartDryer12startProgramEh+0x9dc>)
 800867a:	4618      	mov	r0, r3
 800867c:	f006 f908 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008680:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8008684:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008688:	4619      	mov	r1, r3
 800868a:	4620      	mov	r0, r4
 800868c:	f7fc fc44 	bl	8004f18 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 8008690:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8008694:	4618      	mov	r0, r3
 8008696:	f005 ff8e 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800869a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800869e:	4618      	mov	r0, r3
 80086a0:	f005 fe5f 	bl	800e362 <_ZNSaIcED1Ev>
			if(ActualTime.hour == dryerPrograms[WichProgram].startTime.hour && ActualTime.minute == dryerPrograms[WichProgram].startTime.minute &&
 80086a4:	e06f      	b.n	8008786 <_ZN10SmartDryer12startProgramEh+0x972>
			}
		}
		else
		{
			if(!ProgramEnd)
 80086a6:	f897 3336 	ldrb.w	r3, [r7, #822]	; 0x336
 80086aa:	f083 0301 	eor.w	r3, r3, #1
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d069      	beq.n	8008788 <_ZN10SmartDryer12startProgramEh+0x974>
			{
				if(ActualTime.hour == dryerPrograms[WichProgram].endTime.hour && ActualTime.minute == dryerPrograms[WichProgram].endTime.minute &&
 80086b4:	f107 030c 	add.w	r3, r7, #12
 80086b8:	7899      	ldrb	r1, [r3, #2]
 80086ba:	1cfb      	adds	r3, r7, #3
 80086bc:	781a      	ldrb	r2, [r3, #0]
 80086be:	1d3b      	adds	r3, r7, #4
 80086c0:	6818      	ldr	r0, [r3, #0]
 80086c2:	4613      	mov	r3, r2
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	4413      	add	r3, r2
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	4403      	add	r3, r0
 80086cc:	334e      	adds	r3, #78	; 0x4e
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	4299      	cmp	r1, r3
 80086d2:	d159      	bne.n	8008788 <_ZN10SmartDryer12startProgramEh+0x974>
 80086d4:	f107 030c 	add.w	r3, r7, #12
 80086d8:	7859      	ldrb	r1, [r3, #1]
 80086da:	1cfb      	adds	r3, r7, #3
 80086dc:	781a      	ldrb	r2, [r3, #0]
 80086de:	1d3b      	adds	r3, r7, #4
 80086e0:	6818      	ldr	r0, [r3, #0]
 80086e2:	4613      	mov	r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4413      	add	r3, r2
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	4403      	add	r3, r0
 80086ec:	334d      	adds	r3, #77	; 0x4d
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	4299      	cmp	r1, r3
 80086f2:	d149      	bne.n	8008788 <_ZN10SmartDryer12startProgramEh+0x974>
						ActualTime.day == dryerPrograms[WichProgram].endTime.day)
 80086f4:	f107 030c 	add.w	r3, r7, #12
 80086f8:	78d9      	ldrb	r1, [r3, #3]
 80086fa:	1cfb      	adds	r3, r7, #3
 80086fc:	781a      	ldrb	r2, [r3, #0]
 80086fe:	1d3b      	adds	r3, r7, #4
 8008700:	6818      	ldr	r0, [r3, #0]
 8008702:	4613      	mov	r3, r2
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	4413      	add	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4403      	add	r3, r0
 800870c:	334f      	adds	r3, #79	; 0x4f
 800870e:	781b      	ldrb	r3, [r3, #0]
				if(ActualTime.hour == dryerPrograms[WichProgram].endTime.hour && ActualTime.minute == dryerPrograms[WichProgram].endTime.minute &&
 8008710:	4299      	cmp	r1, r3
 8008712:	d139      	bne.n	8008788 <_ZN10SmartDryer12startProgramEh+0x974>
				{
					statusParam->programStarted = false;
 8008714:	1d3b      	adds	r3, r7, #4
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871a:	2200      	movs	r2, #0
 800871c:	721a      	strb	r2, [r3, #8]
					statusParam->dryerOn = false;
 800871e:	1d3b      	adds	r3, r7, #4
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008724:	2200      	movs	r2, #0
 8008726:	701a      	strb	r2, [r3, #0]
					ledStatus = PROGRAM_END;
 8008728:	1d3b      	adds	r3, r7, #4
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8008730:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
					ProgramEnd = true;
 8008734:	2301      	movs	r3, #1
 8008736:	f887 3336 	strb.w	r3, [r7, #822]	; 0x336
					display->drawFullScreenPopUp("Programma terminato", 2000);
 800873a:	1d3b      	adds	r3, r7, #4
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681c      	ldr	r4, [r3, #0]
 8008740:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8008744:	4618      	mov	r0, r3
 8008746:	f005 fe0b 	bl	800e360 <_ZNSaIcEC1Ev>
 800874a:	f507 724d 	add.w	r2, r7, #820	; 0x334
 800874e:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8008752:	4926      	ldr	r1, [pc, #152]	; (80087ec <_ZN10SmartDryer12startProgramEh+0x9d8>)
 8008754:	4618      	mov	r0, r3
 8008756:	f006 f89b 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800875a:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 800875e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008762:	4619      	mov	r1, r3
 8008764:	4620      	mov	r0, r4
 8008766:	f7fc fbd7 	bl	8004f18 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 800876a:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 800876e:	4618      	mov	r0, r3
 8008770:	f005 ff21 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008774:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8008778:	4618      	mov	r0, r3
 800877a:	f005 fdf2 	bl	800e362 <_ZNSaIcED1Ev>
					ExitStartProgram = true;
 800877e:	2301      	movs	r3, #1
 8008780:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
 8008784:	e000      	b.n	8008788 <_ZN10SmartDryer12startProgramEh+0x974>
			if(ActualTime.hour == dryerPrograms[WichProgram].startTime.hour && ActualTime.minute == dryerPrograms[WichProgram].startTime.minute &&
 8008786:	bf00      	nop
				}
			}
		}
		peripheralsControl();
 8008788:	1d3b      	adds	r3, r7, #4
 800878a:	6818      	ldr	r0, [r3, #0]
 800878c:	f7fd f9da 	bl	8005b44 <_ZN10SmartDryer18peripheralsControlEv>
	while(!ExitStartProgram)
 8008790:	e541      	b.n	8008216 <_ZN10SmartDryer12startProgramEh+0x402>
	String TempRead = "", TempSet = "";
 8008792:	f107 0314 	add.w	r3, r7, #20
 8008796:	4618      	mov	r0, r3
 8008798:	f005 ff0d 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800879c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80087a0:	4618      	mov	r0, r3
 80087a2:	f005 ff08 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String StartHour = "", StartMinute = "", EndHour = "", EndMinute = "";
 80087a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80087aa:	4618      	mov	r0, r3
 80087ac:	f005 ff03 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80087b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80087b4:	4618      	mov	r0, r3
 80087b6:	f005 fefe 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80087ba:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80087be:	4618      	mov	r0, r3
 80087c0:	f005 fef9 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80087c4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80087c8:	4618      	mov	r0, r3
 80087ca:	f005 fef4 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Time = "", Date = "";
 80087ce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80087d2:	4618      	mov	r0, r3
 80087d4:	f005 feef 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80087d8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80087dc:	4618      	mov	r0, r3
 80087de:	f005 feea 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
}
 80087e2:	bf00      	nop
 80087e4:	f507 774f 	add.w	r7, r7, #828	; 0x33c
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd90      	pop	{r4, r7, pc}
 80087ec:	0800f7cc 	.word	0x0800f7cc
 80087f0:	0800f7e0 	.word	0x0800f7e0

080087f4 <_ZN10SmartDryer3runEv>:

void SmartDryer::run()
{
 80087f4:	b590      	push	{r4, r7, lr}
 80087f6:	b08b      	sub	sp, #44	; 0x2c
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
	display->drawFullScreenPopUp("Smart Dryer", 1000);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681c      	ldr	r4, [r3, #0]
 8008800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008804:	4618      	mov	r0, r3
 8008806:	f005 fdab 	bl	800e360 <_ZNSaIcEC1Ev>
 800880a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800880e:	f107 030c 	add.w	r3, r7, #12
 8008812:	4934      	ldr	r1, [pc, #208]	; (80088e4 <_ZN10SmartDryer3runEv+0xf0>)
 8008814:	4618      	mov	r0, r3
 8008816:	f006 f83b 	bl	800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800881a:	f107 030c 	add.w	r3, r7, #12
 800881e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008822:	4619      	mov	r1, r3
 8008824:	4620      	mov	r0, r4
 8008826:	f7fc fb77 	bl	8004f18 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 800882a:	f107 030c 	add.w	r3, r7, #12
 800882e:	4618      	mov	r0, r3
 8008830:	f005 fec1 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008838:	4618      	mov	r0, r3
 800883a:	f005 fd92 	bl	800e362 <_ZNSaIcED1Ev>
	while(1)
	{
		switch(screen)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8008844:	2b07      	cmp	r3, #7
 8008846:	d84b      	bhi.n	80088e0 <_ZN10SmartDryer3runEv+0xec>
 8008848:	a201      	add	r2, pc, #4	; (adr r2, 8008850 <_ZN10SmartDryer3runEv+0x5c>)
 800884a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800884e:	bf00      	nop
 8008850:	08008871 	.word	0x08008871
 8008854:	08008879 	.word	0x08008879
 8008858:	08008889 	.word	0x08008889
 800885c:	08008899 	.word	0x08008899
 8008860:	080088a9 	.word	0x080088a9
 8008864:	080088e1 	.word	0x080088e1
 8008868:	080088e1 	.word	0x080088e1
 800886c:	080088c5 	.word	0x080088c5
		{
			case NAV_MENU:
				navMenu();
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f7fd f9d7 	bl	8005c24 <_ZN10SmartDryer7navMenuEv>
				break;
 8008876:	e034      	b.n	80088e2 <_ZN10SmartDryer3runEv+0xee>
			case CHANGE_TIME:
				changeTime();
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f7fe fa7f 	bl	8006d7c <_ZN10SmartDryer10changeTimeEv>
				screen = NAV_MENU;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
				break;
 8008886:	e02c      	b.n	80088e2 <_ZN10SmartDryer3runEv+0xee>
			case CHANGE_DATE:
				changeDate();
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f7fe fc2d 	bl	80070e8 <_ZN10SmartDryer10changeDateEv>
				screen = NAV_MENU;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
				break;
 8008896:	e024      	b.n	80088e2 <_ZN10SmartDryer3runEv+0xee>
			case SHOW_INFO:
				//TODO aggiungere schermata con info su: temperatura camera, ora, data, stato dryer, numero versione
				showInfo();
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f7fe fe57 	bl	800754c <_ZN10SmartDryer8showInfoEv>
				screen = NAV_MENU;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
				break;
 80088a6:	e01c      	b.n	80088e2 <_ZN10SmartDryer3runEv+0xee>
			case CHANGE_PROGRAM_1:
				//TODO aggiungere altri possibili programmi in cascata
				changeProgram(screen - CHANGE_PROGRAM_1);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 80088ae:	3b04      	subs	r3, #4
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	4619      	mov	r1, r3
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f7fe fe53 	bl	8007560 <_ZN10SmartDryer13changeProgramEh>
				screen = NAV_MENU;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
				break;
 80088c2:	e00e      	b.n	80088e2 <_ZN10SmartDryer3runEv+0xee>
			case START_PROGRAM_1:
				//TODO aggiungere altri possibili programmi in cascata
				startProgram(screen - START_PROGRAM_1);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 80088ca:	3b07      	subs	r3, #7
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	4619      	mov	r1, r3
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f7ff fa9f 	bl	8007e14 <_ZN10SmartDryer12startProgramEh>
				screen = NAV_MENU;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
				break;
 80088de:	e000      	b.n	80088e2 <_ZN10SmartDryer3runEv+0xee>
			default:
				break;
 80088e0:	bf00      	nop
		switch(screen)
 80088e2:	e7ac      	b.n	800883e <_ZN10SmartDryer3runEv+0x4a>
 80088e4:	0800f7f4 	.word	0x0800f7f4

080088e8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4618      	mov	r0, r3
 80088f4:	f000 f83a 	bl	800896c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4618      	mov	r0, r3
 80088fc:	3708      	adds	r7, #8
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 8008902:	b580      	push	{r7, lr}
 8008904:	b082      	sub	sp, #8
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
 800890a:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800890c:	6838      	ldr	r0, [r7, #0]
 800890e:	f7fb fb81 	bl	8004014 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8008912:	4603      	mov	r3, r0
 8008914:	4619      	mov	r1, r3
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 f857 	bl	80089ca <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_>
 800891c:	bf00      	nop
 800891e:	3708      	adds	r7, #8
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	461a      	mov	r2, r3
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	1ad3      	subs	r3, r2, r3
 8008938:	10db      	asrs	r3, r3, #3
 800893a:	4a04      	ldr	r2, [pc, #16]	; (800894c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv+0x28>)
 800893c:	fb02 f303 	mul.w	r3, r2, r3
 8008940:	4618      	mov	r0, r3
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	bc80      	pop	{r7}
 8008948:	4770      	bx	lr
 800894a:	bf00      	nop
 800894c:	aaaaaaab 	.word	0xaaaaaaab

08008950 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4619      	mov	r1, r3
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f862 	bl	8008a28 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endEPS5_>
 8008964:	bf00      	nop
 8008966:	3708      	adds	r7, #8
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      _Vector_base()
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	4618      	mov	r0, r3
 8008978:	f000 f86e 	bl	8008a58 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4618      	mov	r0, r3
 8008980:	3708      	adds	r7, #8
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8008986:	b480      	push	{r7}
 8008988:	b083      	sub	sp, #12
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4618      	mov	r0, r3
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	bc80      	pop	{r7}
 8008998:	4770      	bx	lr

0800899a <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800899a:	b580      	push	{r7, lr}
 800899c:	b084      	sub	sp, #16
 800899e:	af00      	add	r7, sp, #0
 80089a0:	60f8      	str	r0, [r7, #12]
 80089a2:	60b9      	str	r1, [r7, #8]
 80089a4:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80089a6:	68b9      	ldr	r1, [r7, #8]
 80089a8:	68f8      	ldr	r0, [r7, #12]
 80089aa:	f000 f87d 	bl	8008aa8 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
    }
 80089ae:	bf00      	nop
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80089b6:	b480      	push	{r7}
 80089b8:	b083      	sub	sp, #12
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4618      	mov	r0, r3
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bc80      	pop	{r7}
 80089c8:	4770      	bx	lr

080089ca <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 80089ca:	b5b0      	push	{r4, r5, r7, lr}
 80089cc:	b082      	sub	sp, #8
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	685a      	ldr	r2, [r3, #4]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d012      	beq.n	8008a06 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_+0x3c>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80089e0:	687c      	ldr	r4, [r7, #4]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	685d      	ldr	r5, [r3, #4]
 80089e6:	6838      	ldr	r0, [r7, #0]
 80089e8:	f7ff ffe5 	bl	80089b6 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80089ec:	4603      	mov	r3, r0
 80089ee:	461a      	mov	r2, r3
 80089f0:	4629      	mov	r1, r5
 80089f2:	4620      	mov	r0, r4
 80089f4:	f000 f865 	bl	8008ac2 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	f103 0218 	add.w	r2, r3, #24
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8008a04:	e00c      	b.n	8008a20 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 f86e 	bl	8008ae8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 8008a0c:	4604      	mov	r4, r0
 8008a0e:	6838      	ldr	r0, [r7, #0]
 8008a10:	f7ff ffd1 	bl	80089b6 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008a14:	4603      	mov	r3, r0
 8008a16:	461a      	mov	r2, r3
 8008a18:	4621      	mov	r1, r4
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f876 	bl	8008b0c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
      }
 8008a20:	bf00      	nop
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bdb0      	pop	{r4, r5, r7, pc}

08008a28 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endEPS5_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8008a28:	b590      	push	{r4, r7, lr}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	685c      	ldr	r4, [r3, #4]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7ff ffa4 	bl	8008986 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	461a      	mov	r2, r3
 8008a42:	4621      	mov	r1, r4
 8008a44:	6838      	ldr	r0, [r7, #0]
 8008a46:	f7ff ffa8 	bl	800899a <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	683a      	ldr	r2, [r7, #0]
 8008a4e:	605a      	str	r2, [r3, #4]
      }
 8008a50:	bf00      	nop
 8008a52:	370c      	adds	r7, #12
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd90      	pop	{r4, r7, pc}

08008a58 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 f8eb 	bl	8008c3c <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	601a      	str	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	605a      	str	r2, [r3, #4]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	609a      	str	r2, [r3, #8]
	{ }
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3708      	adds	r7, #8
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>:
      _M_deallocate(pointer __p, size_t __n)
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b084      	sub	sp, #16
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	60f8      	str	r0, [r7, #12]
 8008a8a:	60b9      	str	r1, [r7, #8]
 8008a8c:	607a      	str	r2, [r7, #4]
	if (__p)
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d005      	beq.n	8008aa0 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	68b9      	ldr	r1, [r7, #8]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 f8da 	bl	8008c54 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>
      }
 8008aa0:	bf00      	nop
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8008ab2:	6839      	ldr	r1, [r7, #0]
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 f8e6 	bl	8008c86 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
    }
 8008aba:	bf00      	nop
 8008abc:	3708      	adds	r7, #8
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b084      	sub	sp, #16
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	60f8      	str	r0, [r7, #12]
 8008aca:	60b9      	str	r1, [r7, #8]
 8008acc:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f7ff ff71 	bl	80089b6 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	68b9      	ldr	r1, [r7, #8]
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f000 f8eb 	bl	8008cb6 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_>
 8008ae0:	bf00      	nop
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	1d1a      	adds	r2, r3, #4
 8008af4:	f107 030c 	add.w	r3, r7, #12
 8008af8:	4611      	mov	r1, r2
 8008afa:	4618      	mov	r0, r3
 8008afc:	f000 f8f5 	bl	8008cea <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	4618      	mov	r0, r3
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
	...

08008b0c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8008b0c:	b5b0      	push	{r4, r5, r7, lr}
 8008b0e:	b08a      	sub	sp, #40	; 0x28
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8008b18:	4a46      	ldr	r2, [pc, #280]	; (8008c34 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x128>)
 8008b1a:	2101      	movs	r1, #1
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f000 f8f3 	bl	8008d08 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>
 8008b22:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f000 f937 	bl	8008d98 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	617b      	str	r3, [r7, #20]
 8008b2e:	f107 0214 	add.w	r2, r7, #20
 8008b32:	f107 0308 	add.w	r3, r7, #8
 8008b36:	4611      	mov	r1, r2
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f000 f93d 	bl	8008db8 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b46:	4618      	mov	r0, r3
 8008b48:	f000 f952 	bl	8008df0 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>
 8008b4c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8008b52:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8008b54:	6a3a      	ldr	r2, [r7, #32]
 8008b56:	4613      	mov	r3, r2
 8008b58:	005b      	lsls	r3, r3, #1
 8008b5a:	4413      	add	r3, r2
 8008b5c:	00db      	lsls	r3, r3, #3
 8008b5e:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	189d      	adds	r5, r3, r2
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f7ff ff26 	bl	80089b6 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	4629      	mov	r1, r5
 8008b70:	4620      	mov	r0, r4
 8008b72:	f7ff ffa6 	bl	8008ac2 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8008b76:	2300      	movs	r3, #0
 8008b78:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681c      	ldr	r4, [r3, #0]
 8008b7e:	f107 0308 	add.w	r3, r7, #8
 8008b82:	4618      	mov	r0, r3
 8008b84:	f000 f948 	bl	8008e18 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7ff fef9 	bl	8008986 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8008b94:	4603      	mov	r3, r0
	  __new_finish
 8008b96:	69fa      	ldr	r2, [r7, #28]
 8008b98:	4629      	mov	r1, r5
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	f000 f946 	bl	8008e2c <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8008ba0:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	3318      	adds	r3, #24
 8008ba6:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 8008ba8:	f107 0308 	add.w	r3, r7, #8
 8008bac:	4618      	mov	r0, r3
 8008bae:	f000 f933 	bl	8008e18 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	681c      	ldr	r4, [r3, #0]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7ff fee2 	bl	8008986 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8008bc2:	4603      	mov	r3, r0
	  __new_finish
 8008bc4:	69ba      	ldr	r2, [r7, #24]
 8008bc6:	4629      	mov	r1, r5
 8008bc8:	4620      	mov	r0, r4
 8008bca:	f000 f92f 	bl	8008e2c <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 8008bce:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681c      	ldr	r4, [r3, #0]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7ff fed3 	bl	8008986 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8008be0:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008be2:	461a      	mov	r2, r3
 8008be4:	4629      	mov	r1, r5
 8008be6:	4620      	mov	r0, r4
 8008be8:	f7ff fed7 	bl	800899a <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	1ad3      	subs	r3, r2, r3
 8008bfe:	10db      	asrs	r3, r3, #3
 8008c00:	4a0d      	ldr	r2, [pc, #52]	; (8008c38 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x12c>)
 8008c02:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(this->_M_impl._M_start,
 8008c06:	461a      	mov	r2, r3
 8008c08:	f7ff ff3b 	bl	8008a82 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      this->_M_impl._M_start = __new_start;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	69fa      	ldr	r2, [r7, #28]
 8008c10:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	69ba      	ldr	r2, [r7, #24]
 8008c16:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8008c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	005b      	lsls	r3, r3, #1
 8008c1e:	4413      	add	r3, r2
 8008c20:	00db      	lsls	r3, r3, #3
 8008c22:	461a      	mov	r2, r3
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	441a      	add	r2, r3
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	609a      	str	r2, [r3, #8]
    }
 8008c2c:	bf00      	nop
 8008c2e:	3728      	adds	r7, #40	; 0x28
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bdb0      	pop	{r4, r5, r7, pc}
 8008c34:	0800f800 	.word	0x0800f800
 8008c38:	aaaaaaab 	.word	0xaaaaaaab

08008c3c <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 f90a 	bl	8008e5e <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3708      	adds	r7, #8
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	68b9      	ldr	r1, [r7, #8]
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f000 f904 	bl	8008e72 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>
 8008c6a:	bf00      	nop
 8008c6c:	3710      	adds	r7, #16
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8008c72:	b480      	push	{r7}
 8008c74:	b083      	sub	sp, #12
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bc80      	pop	{r7}
 8008c84:	4770      	bx	lr

08008c86 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 8008c86:	b580      	push	{r7, lr}
 8008c88:	b082      	sub	sp, #8
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
 8008c8e:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d00a      	beq.n	8008cae <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f7ff ffea 	bl	8008c72 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f000 f8f3 	bl	8008e8c <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	3318      	adds	r3, #24
 8008caa:	607b      	str	r3, [r7, #4]
 8008cac:	e7f0      	b.n	8008c90 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0xa>
	}
 8008cae:	bf00      	nop
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8008cb6:	b590      	push	{r4, r7, lr}
 8008cb8:	b085      	sub	sp, #20
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	60f8      	str	r0, [r7, #12]
 8008cbe:	60b9      	str	r1, [r7, #8]
 8008cc0:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f7ff fe77 	bl	80089b6 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008cc8:	4604      	mov	r4, r0
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	4619      	mov	r1, r3
 8008cce:	2018      	movs	r0, #24
 8008cd0:	f7fc faff 	bl	80052d2 <_ZnwjPv>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d003      	beq.n	8008ce2 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_+0x2c>
 8008cda:	4621      	mov	r1, r4
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f005 fc50 	bl	800e582 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8008ce2:	bf00      	nop
 8008ce4:	3714      	adds	r7, #20
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd90      	pop	{r4, r7, pc}

08008cea <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8008cea:	b480      	push	{r7}
 8008cec:	b083      	sub	sp, #12
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	601a      	str	r2, [r3, #0]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4618      	mov	r0, r3
 8008d00:	370c      	adds	r7, #12
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bc80      	pop	{r7}
 8008d06:	4770      	bx	lr

08008d08 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8008d08:	b590      	push	{r4, r7, lr}
 8008d0a:	b087      	sub	sp, #28
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8008d14:	68f8      	ldr	r0, [r7, #12]
 8008d16:	f000 f8c4 	bl	8008ea2 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8008d1a:	4604      	mov	r4, r0
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	f7ff fe01 	bl	8008924 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8008d22:	4603      	mov	r3, r0
 8008d24:	1ae2      	subs	r2, r4, r3
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	bf34      	ite	cc
 8008d2c:	2301      	movcc	r3, #1
 8008d2e:	2300      	movcs	r3, #0
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d003      	beq.n	8008d3e <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f005 fb19 	bl	800e370 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 8008d3e:	68f8      	ldr	r0, [r7, #12]
 8008d40:	f7ff fdf0 	bl	8008924 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8008d44:	4604      	mov	r4, r0
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f7ff fdec 	bl	8008924 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	613b      	str	r3, [r7, #16]
 8008d50:	f107 0208 	add.w	r2, r7, #8
 8008d54:	f107 0310 	add.w	r3, r7, #16
 8008d58:	4611      	mov	r1, r2
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f000 f8b2 	bl	8008ec4 <_ZSt3maxIjERKT_S2_S2_>
 8008d60:	4603      	mov	r3, r0
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4423      	add	r3, r4
 8008d66:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8008d68:	68f8      	ldr	r0, [r7, #12]
 8008d6a:	f7ff fddb 	bl	8008924 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d306      	bcc.n	8008d84 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x7c>
 8008d76:	68f8      	ldr	r0, [r7, #12]
 8008d78:	f000 f893 	bl	8008ea2 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d904      	bls.n	8008d8e <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x86>
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f000 f88c 	bl	8008ea2 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	e000      	b.n	8008d90 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x88>
 8008d8e:	697b      	ldr	r3, [r7, #20]
      }
 8008d90:	4618      	mov	r0, r3
 8008d92:	371c      	adds	r7, #28
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd90      	pop	{r4, r7, pc}

08008d98 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	f107 030c 	add.w	r3, r7, #12
 8008da6:	4611      	mov	r1, r2
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7ff ff9e 	bl	8008cea <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	4618      	mov	r0, r3
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8008db8:	b590      	push	{r4, r7, lr}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 f828 	bl	8008e18 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	461c      	mov	r4, r3
 8008dce:	6838      	ldr	r0, [r7, #0]
 8008dd0:	f000 f822 	bl	8008e18 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	1ae3      	subs	r3, r4, r3
 8008dda:	10db      	asrs	r3, r3, #3
 8008ddc:	4a03      	ldr	r2, [pc, #12]	; (8008dec <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_+0x34>)
 8008dde:	fb02 f303 	mul.w	r3, r2, r3
 8008de2:	4618      	mov	r0, r3
 8008de4:	370c      	adds	r7, #12
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd90      	pop	{r4, r7, pc}
 8008dea:	bf00      	nop
 8008dec:	aaaaaaab 	.word	0xaaaaaaab

08008df0 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d006      	beq.n	8008e0e <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x1e>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6839      	ldr	r1, [r7, #0]
 8008e04:	4618      	mov	r0, r3
 8008e06:	f000 f870 	bl	8008eea <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	e000      	b.n	8008e10 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x20>
 8008e0e:	2300      	movs	r3, #0
      }
 8008e10:	4618      	mov	r0, r3
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4618      	mov	r0, r3
 8008e24:	370c      	adds	r7, #12
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bc80      	pop	{r7}
 8008e2a:	4770      	bx	lr

08008e2c <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8008e2c:	b590      	push	{r4, r7, lr}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	607a      	str	r2, [r7, #4]
 8008e38:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f000 f864 	bl	8008f08 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 8008e40:	4604      	mov	r4, r0
 8008e42:	68b8      	ldr	r0, [r7, #8]
 8008e44:	f000 f860 	bl	8008f08 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 8008e48:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	4620      	mov	r0, r4
 8008e50:	f000 f869 	bl	8008f26 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>
 8008e54:	4603      	mov	r3, r0
    }
 8008e56:	4618      	mov	r0, r3
 8008e58:	3714      	adds	r7, #20
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd90      	pop	{r4, r7, pc}

08008e5e <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8008e5e:	b480      	push	{r7}
 8008e60:	b083      	sub	sp, #12
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4618      	mov	r0, r3
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bc80      	pop	{r7}
 8008e70:	4770      	bx	lr

08008e72 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>:
      deallocate(pointer __p, size_type)
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b084      	sub	sp, #16
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	60f8      	str	r0, [r7, #12]
 8008e7a:	60b9      	str	r1, [r7, #8]
 8008e7c:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8008e7e:	68b8      	ldr	r0, [r7, #8]
 8008e80:	f005 fa6c 	bl	800e35c <_ZdlPv>
      }
 8008e84:	bf00      	nop
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f005 fb8e 	bl	800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008e9a:	bf00      	nop
 8008e9c:	3708      	adds	r7, #8
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b082      	sub	sp, #8
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4618      	mov	r0, r3
 8008eae:	f000 f857 	bl	8008f60 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f000 f847 	bl	8008f48 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d201      	bcs.n	8008ede <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	e000      	b.n	8008ee0 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8008ede:	687b      	ldr	r3, [r7, #4]
    }
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	370c      	adds	r7, #12
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bc80      	pop	{r7}
 8008ee8:	4770      	bx	lr

08008eea <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b082      	sub	sp, #8
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
 8008ef2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	6839      	ldr	r1, [r7, #0]
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 f83b 	bl	8008f74 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 8008efe:	4603      	mov	r3, r0
 8008f00:	4618      	mov	r0, r3
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8008f10:	f107 030c 	add.w	r3, r7, #12
 8008f14:	6879      	ldr	r1, [r7, #4]
 8008f16:	4618      	mov	r0, r3
 8008f18:	f000 f84d 	bl	8008fb6 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3710      	adds	r7, #16
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b084      	sub	sp, #16
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	60f8      	str	r0, [r7, #12]
 8008f2e:	60b9      	str	r1, [r7, #8]
 8008f30:	607a      	str	r2, [r7, #4]
 8008f32:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	68b9      	ldr	r1, [r7, #8]
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f000 f84a 	bl	8008fd2 <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	4618      	mov	r0, r3
 8008f42:	3710      	adds	r7, #16
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 f851 	bl	8008ff8 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 8008f56:	4603      	mov	r3, r0
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3708      	adds	r7, #8
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	370c      	adds	r7, #12
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bc80      	pop	{r7}
 8008f72:	4770      	bx	lr

08008f74 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8008f80:	68f8      	ldr	r0, [r7, #12]
 8008f82:	f000 f839 	bl	8008ff8 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 8008f86:	4602      	mov	r2, r0
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	bf8c      	ite	hi
 8008f8e:	2301      	movhi	r3, #1
 8008f90:	2300      	movls	r3, #0
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d001      	beq.n	8008f9c <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8008f98:	f005 f9e4 	bl	800e364 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008f9c:	68ba      	ldr	r2, [r7, #8]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	005b      	lsls	r3, r3, #1
 8008fa2:	4413      	add	r3, r2
 8008fa4:	00db      	lsls	r3, r3, #3
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f005 f9be 	bl	800e328 <_Znwj>
 8008fac:	4603      	mov	r3, r0
      }
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>:
      move_iterator(iterator_type __i)
 8008fb6:	b480      	push	{r7}
 8008fb8:	b083      	sub	sp, #12
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
 8008fbe:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	683a      	ldr	r2, [r7, #0]
 8008fc4:	601a      	str	r2, [r3, #0]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4618      	mov	r0, r3
 8008fca:	370c      	adds	r7, #12
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bc80      	pop	{r7}
 8008fd0:	4770      	bx	lr

08008fd2 <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b086      	sub	sp, #24
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	60f8      	str	r0, [r7, #12]
 8008fda:	60b9      	str	r1, [r7, #8]
 8008fdc:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	68b9      	ldr	r1, [r7, #8]
 8008fe6:	68f8      	ldr	r0, [r7, #12]
 8008fe8:	f000 f812 	bl	8009010 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>
 8008fec:	4603      	mov	r3, r0
    }
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3718      	adds	r7, #24
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
	...

08008ff8 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8009000:	4b02      	ldr	r3, [pc, #8]	; (800900c <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv+0x14>)
 8009002:	4618      	mov	r0, r3
 8009004:	370c      	adds	r7, #12
 8009006:	46bd      	mov	sp, r7
 8009008:	bc80      	pop	{r7}
 800900a:	4770      	bx	lr
 800900c:	0aaaaaaa 	.word	0x0aaaaaaa

08009010 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8009010:	b590      	push	{r4, r7, lr}
 8009012:	b087      	sub	sp, #28
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8009020:	f107 0208 	add.w	r2, r7, #8
 8009024:	f107 030c 	add.w	r3, r7, #12
 8009028:	4611      	mov	r1, r2
 800902a:	4618      	mov	r0, r3
 800902c:	f000 f81f 	bl	800906e <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d016      	beq.n	8009064 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 8009036:	6978      	ldr	r0, [r7, #20]
 8009038:	f7ff fe1b 	bl	8008c72 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800903c:	4604      	mov	r4, r0
 800903e:	f107 030c 	add.w	r3, r7, #12
 8009042:	4618      	mov	r0, r3
 8009044:	f000 f834 	bl	80090b0 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 8009048:	4603      	mov	r3, r0
 800904a:	4619      	mov	r1, r3
 800904c:	4620      	mov	r0, r4
 800904e:	f000 f83a 	bl	80090c6 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8009052:	f107 030c 	add.w	r3, r7, #12
 8009056:	4618      	mov	r0, r3
 8009058:	f000 f81a 	bl	8009090 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	3318      	adds	r3, #24
 8009060:	617b      	str	r3, [r7, #20]
 8009062:	e7dd      	b.n	8009020 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x10>
	      return __cur;
 8009064:	697b      	ldr	r3, [r7, #20]
	}
 8009066:	4618      	mov	r0, r3
 8009068:	371c      	adds	r7, #28
 800906a:	46bd      	mov	sp, r7
 800906c:	bd90      	pop	{r4, r7, pc}

0800906e <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800906e:	b580      	push	{r7, lr}
 8009070:	b082      	sub	sp, #8
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
 8009076:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8009078:	6839      	ldr	r1, [r7, #0]
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 f83c 	bl	80090f8 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 8009080:	4603      	mov	r3, r0
 8009082:	f083 0301 	eor.w	r3, r3, #1
 8009086:	b2db      	uxtb	r3, r3
 8009088:	4618      	mov	r0, r3
 800908a:	3708      	adds	r7, #8
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++()
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
	++_M_current;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f103 0218 	add.w	r2, r3, #24
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	601a      	str	r2, [r3, #0]
	return *this;
 80090a4:	687b      	ldr	r3, [r7, #4]
      }
 80090a6:	4618      	mov	r0, r3
 80090a8:	370c      	adds	r7, #12
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bc80      	pop	{r7}
 80090ae:	4770      	bx	lr

080090b0 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4618      	mov	r0, r3
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bc80      	pop	{r7}
 80090c4:	4770      	bx	lr

080090c6 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 80090c6:	b590      	push	{r4, r7, lr}
 80090c8:	b083      	sub	sp, #12
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
 80090ce:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 80090d0:	6838      	ldr	r0, [r7, #0]
 80090d2:	f7ff fc70 	bl	80089b6 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80090d6:	4604      	mov	r4, r0
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4619      	mov	r1, r3
 80090dc:	2018      	movs	r0, #24
 80090de:	f7fc f8f8 	bl	80052d2 <_ZnwjPv>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d003      	beq.n	80090f0 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_+0x2a>
 80090e8:	4621      	mov	r1, r4
 80090ea:	4618      	mov	r0, r3
 80090ec:	f005 fa49 	bl	800e582 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80090f0:	bf00      	nop
 80090f2:	370c      	adds	r7, #12
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd90      	pop	{r4, r7, pc}

080090f8 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator==(const move_iterator<_Iterator>& __x,
 80090f8:	b590      	push	{r4, r7, lr}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 f80e 	bl	8009124 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8009108:	4604      	mov	r4, r0
 800910a:	6838      	ldr	r0, [r7, #0]
 800910c:	f000 f80a 	bl	8009124 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8009110:	4603      	mov	r3, r0
 8009112:	429c      	cmp	r4, r3
 8009114:	bf0c      	ite	eq
 8009116:	2301      	moveq	r3, #1
 8009118:	2300      	movne	r3, #0
 800911a:	b2db      	uxtb	r3, r3
 800911c:	4618      	mov	r0, r3
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	bd90      	pop	{r4, r7, pc}

08009124 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4618      	mov	r0, r3
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	bc80      	pop	{r7}
 8009138:	4770      	bx	lr
	...

0800913c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8009142:	1d3b      	adds	r3, r7, #4
 8009144:	2200      	movs	r2, #0
 8009146:	601a      	str	r2, [r3, #0]
 8009148:	605a      	str	r2, [r3, #4]
 800914a:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 800914c:	4b18      	ldr	r3, [pc, #96]	; (80091b0 <MX_ADC1_Init+0x74>)
 800914e:	4a19      	ldr	r2, [pc, #100]	; (80091b4 <MX_ADC1_Init+0x78>)
 8009150:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8009152:	4b17      	ldr	r3, [pc, #92]	; (80091b0 <MX_ADC1_Init+0x74>)
 8009154:	2200      	movs	r2, #0
 8009156:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8009158:	4b15      	ldr	r3, [pc, #84]	; (80091b0 <MX_ADC1_Init+0x74>)
 800915a:	2200      	movs	r2, #0
 800915c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800915e:	4b14      	ldr	r3, [pc, #80]	; (80091b0 <MX_ADC1_Init+0x74>)
 8009160:	2200      	movs	r2, #0
 8009162:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009164:	4b12      	ldr	r3, [pc, #72]	; (80091b0 <MX_ADC1_Init+0x74>)
 8009166:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800916a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800916c:	4b10      	ldr	r3, [pc, #64]	; (80091b0 <MX_ADC1_Init+0x74>)
 800916e:	2200      	movs	r2, #0
 8009170:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8009172:	4b0f      	ldr	r3, [pc, #60]	; (80091b0 <MX_ADC1_Init+0x74>)
 8009174:	2201      	movs	r2, #1
 8009176:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009178:	480d      	ldr	r0, [pc, #52]	; (80091b0 <MX_ADC1_Init+0x74>)
 800917a:	f000 fe31 	bl	8009de0 <HAL_ADC_Init>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d001      	beq.n	8009188 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8009184:	f000 f9d4 	bl	8009530 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8009188:	2300      	movs	r3, #0
 800918a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800918c:	2301      	movs	r3, #1
 800918e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8009190:	2300      	movs	r3, #0
 8009192:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009194:	1d3b      	adds	r3, r7, #4
 8009196:	4619      	mov	r1, r3
 8009198:	4805      	ldr	r0, [pc, #20]	; (80091b0 <MX_ADC1_Init+0x74>)
 800919a:	f000 ff8b 	bl	800a0b4 <HAL_ADC_ConfigChannel>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d001      	beq.n	80091a8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80091a4:	f000 f9c4 	bl	8009530 <Error_Handler>
  }

}
 80091a8:	bf00      	nop
 80091aa:	3710      	adds	r7, #16
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	2000053c 	.word	0x2000053c
 80091b4:	40012400 	.word	0x40012400

080091b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b088      	sub	sp, #32
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091c0:	f107 0310 	add.w	r3, r7, #16
 80091c4:	2200      	movs	r2, #0
 80091c6:	601a      	str	r2, [r3, #0]
 80091c8:	605a      	str	r2, [r3, #4]
 80091ca:	609a      	str	r2, [r3, #8]
 80091cc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a14      	ldr	r2, [pc, #80]	; (8009224 <HAL_ADC_MspInit+0x6c>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d121      	bne.n	800921c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80091d8:	4b13      	ldr	r3, [pc, #76]	; (8009228 <HAL_ADC_MspInit+0x70>)
 80091da:	699b      	ldr	r3, [r3, #24]
 80091dc:	4a12      	ldr	r2, [pc, #72]	; (8009228 <HAL_ADC_MspInit+0x70>)
 80091de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80091e2:	6193      	str	r3, [r2, #24]
 80091e4:	4b10      	ldr	r3, [pc, #64]	; (8009228 <HAL_ADC_MspInit+0x70>)
 80091e6:	699b      	ldr	r3, [r3, #24]
 80091e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091ec:	60fb      	str	r3, [r7, #12]
 80091ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80091f0:	4b0d      	ldr	r3, [pc, #52]	; (8009228 <HAL_ADC_MspInit+0x70>)
 80091f2:	699b      	ldr	r3, [r3, #24]
 80091f4:	4a0c      	ldr	r2, [pc, #48]	; (8009228 <HAL_ADC_MspInit+0x70>)
 80091f6:	f043 0304 	orr.w	r3, r3, #4
 80091fa:	6193      	str	r3, [r2, #24]
 80091fc:	4b0a      	ldr	r3, [pc, #40]	; (8009228 <HAL_ADC_MspInit+0x70>)
 80091fe:	699b      	ldr	r3, [r3, #24]
 8009200:	f003 0304 	and.w	r3, r3, #4
 8009204:	60bb      	str	r3, [r7, #8]
 8009206:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = CurrentSensor_Pin;
 8009208:	2301      	movs	r3, #1
 800920a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800920c:	2303      	movs	r3, #3
 800920e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CurrentSensor_GPIO_Port, &GPIO_InitStruct);
 8009210:	f107 0310 	add.w	r3, r7, #16
 8009214:	4619      	mov	r1, r3
 8009216:	4805      	ldr	r0, [pc, #20]	; (800922c <HAL_ADC_MspInit+0x74>)
 8009218:	f001 fb14 	bl	800a844 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800921c:	bf00      	nop
 800921e:	3720      	adds	r7, #32
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	40012400 	.word	0x40012400
 8009228:	40021000 	.word	0x40021000
 800922c:	40010800 	.word	0x40010800

08009230 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b086      	sub	sp, #24
 8009234:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009236:	f107 0308 	add.w	r3, r7, #8
 800923a:	2200      	movs	r2, #0
 800923c:	601a      	str	r2, [r3, #0]
 800923e:	605a      	str	r2, [r3, #4]
 8009240:	609a      	str	r2, [r3, #8]
 8009242:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009244:	4b28      	ldr	r3, [pc, #160]	; (80092e8 <MX_GPIO_Init+0xb8>)
 8009246:	699b      	ldr	r3, [r3, #24]
 8009248:	4a27      	ldr	r2, [pc, #156]	; (80092e8 <MX_GPIO_Init+0xb8>)
 800924a:	f043 0304 	orr.w	r3, r3, #4
 800924e:	6193      	str	r3, [r2, #24]
 8009250:	4b25      	ldr	r3, [pc, #148]	; (80092e8 <MX_GPIO_Init+0xb8>)
 8009252:	699b      	ldr	r3, [r3, #24]
 8009254:	f003 0304 	and.w	r3, r3, #4
 8009258:	607b      	str	r3, [r7, #4]
 800925a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800925c:	4b22      	ldr	r3, [pc, #136]	; (80092e8 <MX_GPIO_Init+0xb8>)
 800925e:	699b      	ldr	r3, [r3, #24]
 8009260:	4a21      	ldr	r2, [pc, #132]	; (80092e8 <MX_GPIO_Init+0xb8>)
 8009262:	f043 0308 	orr.w	r3, r3, #8
 8009266:	6193      	str	r3, [r2, #24]
 8009268:	4b1f      	ldr	r3, [pc, #124]	; (80092e8 <MX_GPIO_Init+0xb8>)
 800926a:	699b      	ldr	r3, [r3, #24]
 800926c:	f003 0308 	and.w	r3, r3, #8
 8009270:	603b      	str	r3, [r7, #0]
 8009272:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ThermoSensor_Pin|LcdCS_Pin, GPIO_PIN_SET);
 8009274:	2201      	movs	r2, #1
 8009276:	210c      	movs	r1, #12
 8009278:	481c      	ldr	r0, [pc, #112]	; (80092ec <MX_GPIO_Init+0xbc>)
 800927a:	f001 fd43 	bl	800ad04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LcdA0_Pin|LcdReset_Pin|ThermoCtrl_Pin|FanCtrl_Pin
 800927e:	2200      	movs	r2, #0
 8009280:	f641 6150 	movw	r1, #7760	; 0x1e50
 8009284:	4819      	ldr	r0, [pc, #100]	; (80092ec <MX_GPIO_Init+0xbc>)
 8009286:	f001 fd3d 	bl	800ad04 <HAL_GPIO_WritePin>
                          |RedLed_Pin|GreenLed_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = ThermoSensor_Pin|LcdCS_Pin|LcdA0_Pin|LcdReset_Pin
 800928a:	f240 435c 	movw	r3, #1116	; 0x45c
 800928e:	60bb      	str	r3, [r7, #8]
                          |FanCtrl_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009290:	2301      	movs	r3, #1
 8009292:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009294:	2300      	movs	r3, #0
 8009296:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009298:	2303      	movs	r3, #3
 800929a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800929c:	f107 0308 	add.w	r3, r7, #8
 80092a0:	4619      	mov	r1, r3
 80092a2:	4812      	ldr	r0, [pc, #72]	; (80092ec <MX_GPIO_Init+0xbc>)
 80092a4:	f001 face 	bl	800a844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = UpButton_Pin|DownButton_Pin|LeftButton_Pin|OkButton_Pin;
 80092a8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80092ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80092ae:	2300      	movs	r3, #0
 80092b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80092b2:	2301      	movs	r3, #1
 80092b4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80092b6:	f107 0308 	add.w	r3, r7, #8
 80092ba:	4619      	mov	r1, r3
 80092bc:	480c      	ldr	r0, [pc, #48]	; (80092f0 <MX_GPIO_Init+0xc0>)
 80092be:	f001 fac1 	bl	800a844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ThermoCtrl_Pin|RedLed_Pin|GreenLed_Pin;
 80092c2:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 80092c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80092c8:	2301      	movs	r3, #1
 80092ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092cc:	2300      	movs	r3, #0
 80092ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092d0:	2302      	movs	r3, #2
 80092d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092d4:	f107 0308 	add.w	r3, r7, #8
 80092d8:	4619      	mov	r1, r3
 80092da:	4804      	ldr	r0, [pc, #16]	; (80092ec <MX_GPIO_Init+0xbc>)
 80092dc:	f001 fab2 	bl	800a844 <HAL_GPIO_Init>

}
 80092e0:	bf00      	nop
 80092e2:	3718      	adds	r7, #24
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	40021000 	.word	0x40021000
 80092ec:	40010800 	.word	0x40010800
 80092f0:	40010c00 	.word	0x40010c00

080092f4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80092f8:	4b12      	ldr	r3, [pc, #72]	; (8009344 <MX_I2C1_Init+0x50>)
 80092fa:	4a13      	ldr	r2, [pc, #76]	; (8009348 <MX_I2C1_Init+0x54>)
 80092fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80092fe:	4b11      	ldr	r3, [pc, #68]	; (8009344 <MX_I2C1_Init+0x50>)
 8009300:	4a12      	ldr	r2, [pc, #72]	; (800934c <MX_I2C1_Init+0x58>)
 8009302:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009304:	4b0f      	ldr	r3, [pc, #60]	; (8009344 <MX_I2C1_Init+0x50>)
 8009306:	2200      	movs	r2, #0
 8009308:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800930a:	4b0e      	ldr	r3, [pc, #56]	; (8009344 <MX_I2C1_Init+0x50>)
 800930c:	2200      	movs	r2, #0
 800930e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009310:	4b0c      	ldr	r3, [pc, #48]	; (8009344 <MX_I2C1_Init+0x50>)
 8009312:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009316:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009318:	4b0a      	ldr	r3, [pc, #40]	; (8009344 <MX_I2C1_Init+0x50>)
 800931a:	2200      	movs	r2, #0
 800931c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800931e:	4b09      	ldr	r3, [pc, #36]	; (8009344 <MX_I2C1_Init+0x50>)
 8009320:	2200      	movs	r2, #0
 8009322:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009324:	4b07      	ldr	r3, [pc, #28]	; (8009344 <MX_I2C1_Init+0x50>)
 8009326:	2200      	movs	r2, #0
 8009328:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800932a:	4b06      	ldr	r3, [pc, #24]	; (8009344 <MX_I2C1_Init+0x50>)
 800932c:	2200      	movs	r2, #0
 800932e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009330:	4804      	ldr	r0, [pc, #16]	; (8009344 <MX_I2C1_Init+0x50>)
 8009332:	f001 fd3f 	bl	800adb4 <HAL_I2C_Init>
 8009336:	4603      	mov	r3, r0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d001      	beq.n	8009340 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800933c:	f000 f8f8 	bl	8009530 <Error_Handler>
  }

}
 8009340:	bf00      	nop
 8009342:	bd80      	pop	{r7, pc}
 8009344:	2000056c 	.word	0x2000056c
 8009348:	40005400 	.word	0x40005400
 800934c:	000186a0 	.word	0x000186a0

08009350 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b08a      	sub	sp, #40	; 0x28
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009358:	f107 0314 	add.w	r3, r7, #20
 800935c:	2200      	movs	r2, #0
 800935e:	601a      	str	r2, [r3, #0]
 8009360:	605a      	str	r2, [r3, #4]
 8009362:	609a      	str	r2, [r3, #8]
 8009364:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a1d      	ldr	r2, [pc, #116]	; (80093e0 <HAL_I2C_MspInit+0x90>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d132      	bne.n	80093d6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009370:	4b1c      	ldr	r3, [pc, #112]	; (80093e4 <HAL_I2C_MspInit+0x94>)
 8009372:	699b      	ldr	r3, [r3, #24]
 8009374:	4a1b      	ldr	r2, [pc, #108]	; (80093e4 <HAL_I2C_MspInit+0x94>)
 8009376:	f043 0308 	orr.w	r3, r3, #8
 800937a:	6193      	str	r3, [r2, #24]
 800937c:	4b19      	ldr	r3, [pc, #100]	; (80093e4 <HAL_I2C_MspInit+0x94>)
 800937e:	699b      	ldr	r3, [r3, #24]
 8009380:	f003 0308 	and.w	r3, r3, #8
 8009384:	613b      	str	r3, [r7, #16]
 8009386:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8009388:	f44f 7340 	mov.w	r3, #768	; 0x300
 800938c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800938e:	2312      	movs	r3, #18
 8009390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009392:	2303      	movs	r3, #3
 8009394:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009396:	f107 0314 	add.w	r3, r7, #20
 800939a:	4619      	mov	r1, r3
 800939c:	4812      	ldr	r0, [pc, #72]	; (80093e8 <HAL_I2C_MspInit+0x98>)
 800939e:	f001 fa51 	bl	800a844 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80093a2:	4b12      	ldr	r3, [pc, #72]	; (80093ec <HAL_I2C_MspInit+0x9c>)
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	627b      	str	r3, [r7, #36]	; 0x24
 80093a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093aa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80093ae:	627b      	str	r3, [r7, #36]	; 0x24
 80093b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b2:	f043 0302 	orr.w	r3, r3, #2
 80093b6:	627b      	str	r3, [r7, #36]	; 0x24
 80093b8:	4a0c      	ldr	r2, [pc, #48]	; (80093ec <HAL_I2C_MspInit+0x9c>)
 80093ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093bc:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80093be:	4b09      	ldr	r3, [pc, #36]	; (80093e4 <HAL_I2C_MspInit+0x94>)
 80093c0:	69db      	ldr	r3, [r3, #28]
 80093c2:	4a08      	ldr	r2, [pc, #32]	; (80093e4 <HAL_I2C_MspInit+0x94>)
 80093c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80093c8:	61d3      	str	r3, [r2, #28]
 80093ca:	4b06      	ldr	r3, [pc, #24]	; (80093e4 <HAL_I2C_MspInit+0x94>)
 80093cc:	69db      	ldr	r3, [r3, #28]
 80093ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80093d2:	60fb      	str	r3, [r7, #12]
 80093d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80093d6:	bf00      	nop
 80093d8:	3728      	adds	r7, #40	; 0x28
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	40005400 	.word	0x40005400
 80093e4:	40021000 	.word	0x40021000
 80093e8:	40010c00 	.word	0x40010c00
 80093ec:	40010000 	.word	0x40010000

080093f0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80093f0:	b598      	push	{r3, r4, r7, lr}
 80093f2:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80093f4:	f000 fc70 	bl	8009cd8 <HAL_Init>


	/* Configure the system clock */
	SystemClock_Config();
 80093f8:	f000 f836 	bl	8009468 <_Z18SystemClock_Configv>


	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80093fc:	f7ff ff18 	bl	8009230 <MX_GPIO_Init>
	MX_ADC1_Init();
 8009400:	f7ff fe9c 	bl	800913c <MX_ADC1_Init>
	MX_I2C1_Init();
 8009404:	f7ff ff76 	bl	80092f4 <MX_I2C1_Init>
	MX_SPI1_Init();
 8009408:	f000 f8a2 	bl	8009550 <MX_SPI1_Init>
	MX_TIM2_Init();
 800940c:	f000 fb4a 	bl	8009aa4 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8009410:	f000 fbb0 	bl	8009b74 <MX_USART1_UART_Init>

	HAL_TIM_Base_Start(&htim2);
 8009414:	4812      	ldr	r0, [pc, #72]	; (8009460 <main+0x70>)
 8009416:	f003 ff2b 	bl	800d270 <HAL_TIM_Base_Start>

	DryerApplication = new SmartDryer();
 800941a:	20b8      	movs	r0, #184	; 0xb8
 800941c:	f004 ff84 	bl	800e328 <_Znwj>
 8009420:	4603      	mov	r3, r0
 8009422:	461c      	mov	r4, r3
 8009424:	4620      	mov	r0, r4
 8009426:	f7fb ffc5 	bl	80053b4 <_ZN10SmartDryerC1Ev>
 800942a:	4b0e      	ldr	r3, [pc, #56]	; (8009464 <main+0x74>)
 800942c:	601c      	str	r4, [r3, #0]

	DryerApplication->setup();
 800942e:	4b0d      	ldr	r3, [pc, #52]	; (8009464 <main+0x74>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4618      	mov	r0, r3
 8009434:	f7fc ffc8 	bl	80063c8 <_ZN10SmartDryer5setupEv>

	if(DryerApplication->enableTest)
 8009438:	4b0a      	ldr	r3, [pc, #40]	; (8009464 <main+0x74>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 8009440:	2b00      	cmp	r3, #0
 8009442:	d005      	beq.n	8009450 <main+0x60>
	{
		DryerApplication->test();
 8009444:	4b07      	ldr	r3, [pc, #28]	; (8009464 <main+0x74>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4618      	mov	r0, r3
 800944a:	f7fc feb5 	bl	80061b8 <_ZN10SmartDryer4testEv>
 800944e:	e004      	b.n	800945a <main+0x6a>
	}
	else
	{
		DryerApplication->run();
 8009450:	4b04      	ldr	r3, [pc, #16]	; (8009464 <main+0x74>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4618      	mov	r0, r3
 8009456:	f7ff f9cd 	bl	80087f4 <_ZN10SmartDryer3runEv>
	}
}
 800945a:	2300      	movs	r3, #0
 800945c:	4618      	mov	r0, r3
 800945e:	bd98      	pop	{r3, r4, r7, pc}
 8009460:	20000618 	.word	0x20000618
 8009464:	20000528 	.word	0x20000528

08009468 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b094      	sub	sp, #80	; 0x50
 800946c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800946e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009472:	2228      	movs	r2, #40	; 0x28
 8009474:	2100      	movs	r1, #0
 8009476:	4618      	mov	r0, r3
 8009478:	f005 fb57 	bl	800eb2a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800947c:	f107 0314 	add.w	r3, r7, #20
 8009480:	2200      	movs	r2, #0
 8009482:	601a      	str	r2, [r3, #0]
 8009484:	605a      	str	r2, [r3, #4]
 8009486:	609a      	str	r2, [r3, #8]
 8009488:	60da      	str	r2, [r3, #12]
 800948a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800948c:	1d3b      	adds	r3, r7, #4
 800948e:	2200      	movs	r2, #0
 8009490:	601a      	str	r2, [r3, #0]
 8009492:	605a      	str	r2, [r3, #4]
 8009494:	609a      	str	r2, [r3, #8]
 8009496:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8009498:	2302      	movs	r3, #2
 800949a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800949c:	2301      	movs	r3, #1
 800949e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80094a0:	2310      	movs	r3, #16
 80094a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80094a4:	2302      	movs	r3, #2
 80094a6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80094a8:	2300      	movs	r3, #0
 80094aa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80094ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80094b0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80094b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80094b6:	4618      	mov	r0, r3
 80094b8:	f002 fcba 	bl	800be30 <HAL_RCC_OscConfig>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	bf14      	ite	ne
 80094c2:	2301      	movne	r3, #1
 80094c4:	2300      	moveq	r3, #0
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d001      	beq.n	80094d0 <_Z18SystemClock_Configv+0x68>
	{
		Error_Handler();
 80094cc:	f000 f830 	bl	8009530 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80094d0:	230f      	movs	r3, #15
 80094d2:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80094d4:	2302      	movs	r3, #2
 80094d6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80094d8:	2300      	movs	r3, #0
 80094da:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80094dc:	2300      	movs	r3, #0
 80094de:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80094e0:	2300      	movs	r3, #0
 80094e2:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80094e4:	f107 0314 	add.w	r3, r7, #20
 80094e8:	2100      	movs	r1, #0
 80094ea:	4618      	mov	r0, r3
 80094ec:	f003 f810 	bl	800c510 <HAL_RCC_ClockConfig>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	bf14      	ite	ne
 80094f6:	2301      	movne	r3, #1
 80094f8:	2300      	moveq	r3, #0
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d001      	beq.n	8009504 <_Z18SystemClock_Configv+0x9c>
	{
		Error_Handler();
 8009500:	f000 f816 	bl	8009530 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8009504:	2302      	movs	r3, #2
 8009506:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8009508:	2300      	movs	r3, #0
 800950a:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800950c:	1d3b      	adds	r3, r7, #4
 800950e:	4618      	mov	r0, r3
 8009510:	f003 fa40 	bl	800c994 <HAL_RCCEx_PeriphCLKConfig>
 8009514:	4603      	mov	r3, r0
 8009516:	2b00      	cmp	r3, #0
 8009518:	bf14      	ite	ne
 800951a:	2301      	movne	r3, #1
 800951c:	2300      	moveq	r3, #0
 800951e:	b2db      	uxtb	r3, r3
 8009520:	2b00      	cmp	r3, #0
 8009522:	d001      	beq.n	8009528 <_Z18SystemClock_Configv+0xc0>
	{
		Error_Handler();
 8009524:	f000 f804 	bl	8009530 <Error_Handler>
	}
}
 8009528:	bf00      	nop
 800952a:	3750      	adds	r7, #80	; 0x50
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8009530:	b480      	push	{r7}
 8009532:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8009534:	bf00      	nop
 8009536:	46bd      	mov	sp, r7
 8009538:	bc80      	pop	{r7}
 800953a:	4770      	bx	lr

0800953c <assert_failed>:
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8009546:	bf00      	nop
 8009548:	370c      	adds	r7, #12
 800954a:	46bd      	mov	sp, r7
 800954c:	bc80      	pop	{r7}
 800954e:	4770      	bx	lr

08009550 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8009554:	4b18      	ldr	r3, [pc, #96]	; (80095b8 <MX_SPI1_Init+0x68>)
 8009556:	4a19      	ldr	r2, [pc, #100]	; (80095bc <MX_SPI1_Init+0x6c>)
 8009558:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800955a:	4b17      	ldr	r3, [pc, #92]	; (80095b8 <MX_SPI1_Init+0x68>)
 800955c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009560:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8009562:	4b15      	ldr	r3, [pc, #84]	; (80095b8 <MX_SPI1_Init+0x68>)
 8009564:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009568:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800956a:	4b13      	ldr	r3, [pc, #76]	; (80095b8 <MX_SPI1_Init+0x68>)
 800956c:	2200      	movs	r2, #0
 800956e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009570:	4b11      	ldr	r3, [pc, #68]	; (80095b8 <MX_SPI1_Init+0x68>)
 8009572:	2200      	movs	r2, #0
 8009574:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009576:	4b10      	ldr	r3, [pc, #64]	; (80095b8 <MX_SPI1_Init+0x68>)
 8009578:	2200      	movs	r2, #0
 800957a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800957c:	4b0e      	ldr	r3, [pc, #56]	; (80095b8 <MX_SPI1_Init+0x68>)
 800957e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009582:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8009584:	4b0c      	ldr	r3, [pc, #48]	; (80095b8 <MX_SPI1_Init+0x68>)
 8009586:	2228      	movs	r2, #40	; 0x28
 8009588:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800958a:	4b0b      	ldr	r3, [pc, #44]	; (80095b8 <MX_SPI1_Init+0x68>)
 800958c:	2200      	movs	r2, #0
 800958e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009590:	4b09      	ldr	r3, [pc, #36]	; (80095b8 <MX_SPI1_Init+0x68>)
 8009592:	2200      	movs	r2, #0
 8009594:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009596:	4b08      	ldr	r3, [pc, #32]	; (80095b8 <MX_SPI1_Init+0x68>)
 8009598:	2200      	movs	r2, #0
 800959a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800959c:	4b06      	ldr	r3, [pc, #24]	; (80095b8 <MX_SPI1_Init+0x68>)
 800959e:	220a      	movs	r2, #10
 80095a0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80095a2:	4805      	ldr	r0, [pc, #20]	; (80095b8 <MX_SPI1_Init+0x68>)
 80095a4:	f003 fb00 	bl	800cba8 <HAL_SPI_Init>
 80095a8:	4603      	mov	r3, r0
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d001      	beq.n	80095b2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80095ae:	f7ff ffbf 	bl	8009530 <Error_Handler>
  }

}
 80095b2:	bf00      	nop
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	200005c0 	.word	0x200005c0
 80095bc:	40013000 	.word	0x40013000

080095c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b088      	sub	sp, #32
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095c8:	f107 0310 	add.w	r3, r7, #16
 80095cc:	2200      	movs	r2, #0
 80095ce:	601a      	str	r2, [r3, #0]
 80095d0:	605a      	str	r2, [r3, #4]
 80095d2:	609a      	str	r2, [r3, #8]
 80095d4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a15      	ldr	r2, [pc, #84]	; (8009630 <HAL_SPI_MspInit+0x70>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d123      	bne.n	8009628 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80095e0:	4b14      	ldr	r3, [pc, #80]	; (8009634 <HAL_SPI_MspInit+0x74>)
 80095e2:	699b      	ldr	r3, [r3, #24]
 80095e4:	4a13      	ldr	r2, [pc, #76]	; (8009634 <HAL_SPI_MspInit+0x74>)
 80095e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80095ea:	6193      	str	r3, [r2, #24]
 80095ec:	4b11      	ldr	r3, [pc, #68]	; (8009634 <HAL_SPI_MspInit+0x74>)
 80095ee:	699b      	ldr	r3, [r3, #24]
 80095f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80095f4:	60fb      	str	r3, [r7, #12]
 80095f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80095f8:	4b0e      	ldr	r3, [pc, #56]	; (8009634 <HAL_SPI_MspInit+0x74>)
 80095fa:	699b      	ldr	r3, [r3, #24]
 80095fc:	4a0d      	ldr	r2, [pc, #52]	; (8009634 <HAL_SPI_MspInit+0x74>)
 80095fe:	f043 0304 	orr.w	r3, r3, #4
 8009602:	6193      	str	r3, [r2, #24]
 8009604:	4b0b      	ldr	r3, [pc, #44]	; (8009634 <HAL_SPI_MspInit+0x74>)
 8009606:	699b      	ldr	r3, [r3, #24]
 8009608:	f003 0304 	and.w	r3, r3, #4
 800960c:	60bb      	str	r3, [r7, #8]
 800960e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Sck_Pin|Mosi_Pin;
 8009610:	23a0      	movs	r3, #160	; 0xa0
 8009612:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009614:	2302      	movs	r3, #2
 8009616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009618:	2303      	movs	r3, #3
 800961a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800961c:	f107 0310 	add.w	r3, r7, #16
 8009620:	4619      	mov	r1, r3
 8009622:	4805      	ldr	r0, [pc, #20]	; (8009638 <HAL_SPI_MspInit+0x78>)
 8009624:	f001 f90e 	bl	800a844 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8009628:	bf00      	nop
 800962a:	3720      	adds	r7, #32
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}
 8009630:	40013000 	.word	0x40013000
 8009634:	40021000 	.word	0x40021000
 8009638:	40010800 	.word	0x40010800

0800963c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800963c:	b480      	push	{r7}
 800963e:	b085      	sub	sp, #20
 8009640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8009642:	4b15      	ldr	r3, [pc, #84]	; (8009698 <HAL_MspInit+0x5c>)
 8009644:	699b      	ldr	r3, [r3, #24]
 8009646:	4a14      	ldr	r2, [pc, #80]	; (8009698 <HAL_MspInit+0x5c>)
 8009648:	f043 0301 	orr.w	r3, r3, #1
 800964c:	6193      	str	r3, [r2, #24]
 800964e:	4b12      	ldr	r3, [pc, #72]	; (8009698 <HAL_MspInit+0x5c>)
 8009650:	699b      	ldr	r3, [r3, #24]
 8009652:	f003 0301 	and.w	r3, r3, #1
 8009656:	60bb      	str	r3, [r7, #8]
 8009658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800965a:	4b0f      	ldr	r3, [pc, #60]	; (8009698 <HAL_MspInit+0x5c>)
 800965c:	69db      	ldr	r3, [r3, #28]
 800965e:	4a0e      	ldr	r2, [pc, #56]	; (8009698 <HAL_MspInit+0x5c>)
 8009660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009664:	61d3      	str	r3, [r2, #28]
 8009666:	4b0c      	ldr	r3, [pc, #48]	; (8009698 <HAL_MspInit+0x5c>)
 8009668:	69db      	ldr	r3, [r3, #28]
 800966a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800966e:	607b      	str	r3, [r7, #4]
 8009670:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8009672:	4b0a      	ldr	r3, [pc, #40]	; (800969c <HAL_MspInit+0x60>)
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	60fb      	str	r3, [r7, #12]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800967e:	60fb      	str	r3, [r7, #12]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009686:	60fb      	str	r3, [r7, #12]
 8009688:	4a04      	ldr	r2, [pc, #16]	; (800969c <HAL_MspInit+0x60>)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800968e:	bf00      	nop
 8009690:	3714      	adds	r7, #20
 8009692:	46bd      	mov	sp, r7
 8009694:	bc80      	pop	{r7}
 8009696:	4770      	bx	lr
 8009698:	40021000 	.word	0x40021000
 800969c:	40010000 	.word	0x40010000

080096a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80096a0:	b480      	push	{r7}
 80096a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80096a4:	bf00      	nop
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bc80      	pop	{r7}
 80096aa:	4770      	bx	lr

080096ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 80096b0:	f001 f842 	bl	800a738 <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80096b4:	e7fe      	b.n	80096b4 <HardFault_Handler+0x8>

080096b6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80096b6:	b480      	push	{r7}
 80096b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80096ba:	e7fe      	b.n	80096ba <MemManage_Handler+0x4>

080096bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80096bc:	b480      	push	{r7}
 80096be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80096c0:	e7fe      	b.n	80096c0 <BusFault_Handler+0x4>

080096c2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80096c2:	b480      	push	{r7}
 80096c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80096c6:	e7fe      	b.n	80096c6 <UsageFault_Handler+0x4>

080096c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80096c8:	b480      	push	{r7}
 80096ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80096cc:	bf00      	nop
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bc80      	pop	{r7}
 80096d2:	4770      	bx	lr

080096d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80096d4:	b480      	push	{r7}
 80096d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80096d8:	bf00      	nop
 80096da:	46bd      	mov	sp, r7
 80096dc:	bc80      	pop	{r7}
 80096de:	4770      	bx	lr

080096e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80096e0:	b480      	push	{r7}
 80096e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80096e4:	bf00      	nop
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bc80      	pop	{r7}
 80096ea:	4770      	bx	lr

080096ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80096f0:	f000 fb38 	bl	8009d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80096f4:	bf00      	nop
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80096fc:	4802      	ldr	r0, [pc, #8]	; (8009708 <USART1_IRQHandler+0x10>)
 80096fe:	f004 fac3 	bl	800dc88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009702:	bf00      	nop
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	20000658 	.word	0x20000658

0800970c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800970c:	b480      	push	{r7}
 800970e:	af00      	add	r7, sp, #0
	return 1;
 8009710:	2301      	movs	r3, #1
}
 8009712:	4618      	mov	r0, r3
 8009714:	46bd      	mov	sp, r7
 8009716:	bc80      	pop	{r7}
 8009718:	4770      	bx	lr

0800971a <_kill>:

int _kill(int pid, int sig)
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b082      	sub	sp, #8
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
 8009722:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8009724:	f005 f986 	bl	800ea34 <__errno>
 8009728:	4602      	mov	r2, r0
 800972a:	2316      	movs	r3, #22
 800972c:	6013      	str	r3, [r2, #0]
	return -1;
 800972e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009732:	4618      	mov	r0, r3
 8009734:	3708      	adds	r7, #8
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <_exit>:

void _exit (int status)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b082      	sub	sp, #8
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8009742:	f04f 31ff 	mov.w	r1, #4294967295
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f7ff ffe7 	bl	800971a <_kill>
	while (1) {}		/* Make sure we hang here */
 800974c:	e7fe      	b.n	800974c <_exit+0x12>
	...

08009750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b086      	sub	sp, #24
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009758:	4a14      	ldr	r2, [pc, #80]	; (80097ac <_sbrk+0x5c>)
 800975a:	4b15      	ldr	r3, [pc, #84]	; (80097b0 <_sbrk+0x60>)
 800975c:	1ad3      	subs	r3, r2, r3
 800975e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009764:	4b13      	ldr	r3, [pc, #76]	; (80097b4 <_sbrk+0x64>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d102      	bne.n	8009772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800976c:	4b11      	ldr	r3, [pc, #68]	; (80097b4 <_sbrk+0x64>)
 800976e:	4a12      	ldr	r2, [pc, #72]	; (80097b8 <_sbrk+0x68>)
 8009770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009772:	4b10      	ldr	r3, [pc, #64]	; (80097b4 <_sbrk+0x64>)
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	4413      	add	r3, r2
 800977a:	693a      	ldr	r2, [r7, #16]
 800977c:	429a      	cmp	r2, r3
 800977e:	d207      	bcs.n	8009790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009780:	f005 f958 	bl	800ea34 <__errno>
 8009784:	4602      	mov	r2, r0
 8009786:	230c      	movs	r3, #12
 8009788:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800978a:	f04f 33ff 	mov.w	r3, #4294967295
 800978e:	e009      	b.n	80097a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009790:	4b08      	ldr	r3, [pc, #32]	; (80097b4 <_sbrk+0x64>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009796:	4b07      	ldr	r3, [pc, #28]	; (80097b4 <_sbrk+0x64>)
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4413      	add	r3, r2
 800979e:	4a05      	ldr	r2, [pc, #20]	; (80097b4 <_sbrk+0x64>)
 80097a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80097a2:	68fb      	ldr	r3, [r7, #12]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3718      	adds	r7, #24
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	20005000 	.word	0x20005000
 80097b0:	00000400 	.word	0x00000400
 80097b4:	2000052c 	.word	0x2000052c
 80097b8:	200006a0 	.word	0x200006a0

080097bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80097bc:	b480      	push	{r7}
 80097be:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80097c0:	4b15      	ldr	r3, [pc, #84]	; (8009818 <SystemInit+0x5c>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a14      	ldr	r2, [pc, #80]	; (8009818 <SystemInit+0x5c>)
 80097c6:	f043 0301 	orr.w	r3, r3, #1
 80097ca:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80097cc:	4b12      	ldr	r3, [pc, #72]	; (8009818 <SystemInit+0x5c>)
 80097ce:	685a      	ldr	r2, [r3, #4]
 80097d0:	4911      	ldr	r1, [pc, #68]	; (8009818 <SystemInit+0x5c>)
 80097d2:	4b12      	ldr	r3, [pc, #72]	; (800981c <SystemInit+0x60>)
 80097d4:	4013      	ands	r3, r2
 80097d6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80097d8:	4b0f      	ldr	r3, [pc, #60]	; (8009818 <SystemInit+0x5c>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4a0e      	ldr	r2, [pc, #56]	; (8009818 <SystemInit+0x5c>)
 80097de:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80097e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097e6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80097e8:	4b0b      	ldr	r3, [pc, #44]	; (8009818 <SystemInit+0x5c>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a0a      	ldr	r2, [pc, #40]	; (8009818 <SystemInit+0x5c>)
 80097ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80097f2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80097f4:	4b08      	ldr	r3, [pc, #32]	; (8009818 <SystemInit+0x5c>)
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	4a07      	ldr	r2, [pc, #28]	; (8009818 <SystemInit+0x5c>)
 80097fa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80097fe:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8009800:	4b05      	ldr	r3, [pc, #20]	; (8009818 <SystemInit+0x5c>)
 8009802:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8009806:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8009808:	4b05      	ldr	r3, [pc, #20]	; (8009820 <SystemInit+0x64>)
 800980a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800980e:	609a      	str	r2, [r3, #8]
#endif 
}
 8009810:	bf00      	nop
 8009812:	46bd      	mov	sp, r7
 8009814:	bc80      	pop	{r7}
 8009816:	4770      	bx	lr
 8009818:	40021000 	.word	0x40021000
 800981c:	f8ff0000 	.word	0xf8ff0000
 8009820:	e000ed00 	.word	0xe000ed00

08009824 <_ZN13THERMO_SENSOR12clearI2CBuffEv>:
// HOLD MASTER - SCL line is blocked (controlled by sensor) during measurement
// NO HOLD MASTER - allows other I2C communication tasks while sensor performing
// measurements.

void THERMO_SENSOR::clearI2CBuff()
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b082      	sub	sp, #8
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
	memset(i2cBuffer, 0x00, BUFFER_LEN);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2220      	movs	r2, #32
 8009830:	2100      	movs	r1, #0
 8009832:	4618      	mov	r0, r3
 8009834:	f005 f979 	bl	800eb2a <memset>
	i2cBufferIndex = 0;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	f883 2020 	strb.w	r2, [r3, #32]
}
 8009840:	bf00      	nop
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <_ZN13THERMO_SENSOR13readSensor_hmEh>:

uint16_t THERMO_SENSOR::readSensor_hm(uint8_t command)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b086      	sub	sp, #24
 800984c:	af02      	add	r7, sp, #8
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	460b      	mov	r3, r1
 8009852:	70fb      	strb	r3, [r7, #3]
	uint8_t data[2];
	uint16_t result;
//	uint8_t n = 0;
	uint8_t d;

	if(command == TRIGGER_RH_MEASUREMENT_HM || command == TRIGGER_RH_MEASUREMENT_NHM)
 8009854:	78fb      	ldrb	r3, [r7, #3]
 8009856:	2be5      	cmp	r3, #229	; 0xe5
 8009858:	d002      	beq.n	8009860 <_ZN13THERMO_SENSOR13readSensor_hmEh+0x18>
 800985a:	78fb      	ldrb	r3, [r7, #3]
 800985c:	2bf5      	cmp	r3, #245	; 0xf5
 800985e:	d101      	bne.n	8009864 <_ZN13THERMO_SENSOR13readSensor_hmEh+0x1c>
		d = 30;
 8009860:	231e      	movs	r3, #30
 8009862:	737b      	strb	r3, [r7, #13]
	if(command == TRIGGER_T_MEASUREMENT_HM || command == TRIGGER_T_MEASUREMENT_NHM)
 8009864:	78fb      	ldrb	r3, [r7, #3]
 8009866:	2be3      	cmp	r3, #227	; 0xe3
 8009868:	d002      	beq.n	8009870 <_ZN13THERMO_SENSOR13readSensor_hmEh+0x28>
 800986a:	78fb      	ldrb	r3, [r7, #3]
 800986c:	2bf3      	cmp	r3, #243	; 0xf3
 800986e:	d101      	bne.n	8009874 <_ZN13THERMO_SENSOR13readSensor_hmEh+0x2c>
		d = 85;
 8009870:	2355      	movs	r3, #85	; 0x55
 8009872:	737b      	strb	r3, [r7, #13]

	clearI2CBuff();
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f7ff ffd5 	bl	8009824 <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	i2cBuffer[0] = command;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	78fa      	ldrb	r2, [r7, #3]
 800987e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, I2CTEMPADDR, i2cBuffer, 1, 10);
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	230a      	movs	r3, #10
 8009884:	9300      	str	r3, [sp, #0]
 8009886:	2301      	movs	r3, #1
 8009888:	2180      	movs	r1, #128	; 0x80
 800988a:	482d      	ldr	r0, [pc, #180]	; (8009940 <_ZN13THERMO_SENSOR13readSensor_hmEh+0xf8>)
 800988c:	f001 fc4c 	bl	800b128 <HAL_I2C_Master_Transmit>
	HAL_Delay(d);
 8009890:	7b7b      	ldrb	r3, [r7, #13]
 8009892:	4618      	mov	r0, r3
 8009894:	f000 fa82 	bl	8009d9c <HAL_Delay>
	clearI2CBuff();
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f7ff ffc3 	bl	8009824 <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	HAL_I2C_Master_Receive(&hi2c1, I2CTEMPADDR, i2cBuffer, 3, 10);
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	230a      	movs	r3, #10
 80098a2:	9300      	str	r3, [sp, #0]
 80098a4:	2303      	movs	r3, #3
 80098a6:	2180      	movs	r1, #128	; 0x80
 80098a8:	4825      	ldr	r0, [pc, #148]	; (8009940 <_ZN13THERMO_SENSOR13readSensor_hmEh+0xf8>)
 80098aa:	f001 fd3b 	bl	800b324 <HAL_I2C_Master_Receive>
	data[0] = i2cBuffer[i2cBufferIndex++]; 	// read data (MSB)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80098b4:	1c5a      	adds	r2, r3, #1
 80098b6:	b2d1      	uxtb	r1, r2
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	f882 1020 	strb.w	r1, [r2, #32]
 80098be:	461a      	mov	r2, r3
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	5c9b      	ldrb	r3, [r3, r2]
 80098c4:	723b      	strb	r3, [r7, #8]
	data[1] = i2cBuffer[i2cBufferIndex++]; 	// read data (LSB)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80098cc:	1c5a      	adds	r2, r3, #1
 80098ce:	b2d1      	uxtb	r1, r2
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	f882 1020 	strb.w	r1, [r2, #32]
 80098d6:	461a      	mov	r2, r3
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	5c9b      	ldrb	r3, [r3, r2]
 80098dc:	727b      	strb	r3, [r7, #9]
	checksum = i2cBuffer[i2cBufferIndex++];	// read checksum
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80098e4:	1c5a      	adds	r2, r3, #1
 80098e6:	b2d1      	uxtb	r1, r2
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	f882 1020 	strb.w	r1, [r2, #32]
 80098ee:	461a      	mov	r2, r3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	5c9b      	ldrb	r3, [r3, r2]
 80098f4:	733b      	strb	r3, [r7, #12]
	result = (data[0] << 8);
 80098f6:	7a3b      	ldrb	r3, [r7, #8]
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	021b      	lsls	r3, r3, #8
 80098fc:	81fb      	strh	r3, [r7, #14]
	result += data[1];
 80098fe:	7a7b      	ldrb	r3, [r7, #9]
 8009900:	b29a      	uxth	r2, r3
 8009902:	89fb      	ldrh	r3, [r7, #14]
 8009904:	4413      	add	r3, r2
 8009906:	81fb      	strh	r3, [r7, #14]
	if(CRC_Checksum (data, 2, checksum))
 8009908:	7b3b      	ldrb	r3, [r7, #12]
 800990a:	f107 0108 	add.w	r1, r7, #8
 800990e:	2202      	movs	r2, #2
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 f84d 	bl	80099b0 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	bf14      	ite	ne
 800991c:	2301      	movne	r3, #1
 800991e:	2300      	moveq	r3, #0
 8009920:	b2db      	uxtb	r3, r3
 8009922:	2b00      	cmp	r3, #0
 8009924:	d004      	beq.n	8009930 <_ZN13THERMO_SENSOR13readSensor_hmEh+0xe8>
	{
		reset();
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 f89e 	bl	8009a68 <_ZN13THERMO_SENSOR5resetEv>
		result = 1;
 800992c:	2301      	movs	r3, #1
 800992e:	81fb      	strh	r3, [r7, #14]
	}
	clearI2CBuff();
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f7ff ff77 	bl	8009824 <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	return result; // @suppress("Return with parenthesis")
 8009936:	89fb      	ldrh	r3, [r7, #14]
}
 8009938:	4618      	mov	r0, r3
 800993a:	3710      	adds	r7, #16
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}
 8009940:	2000056c 	.word	0x2000056c
 8009944:	00000000 	.word	0x00000000

08009948 <_ZN13THERMO_SENSOR5CalcTEt>:
	rh &= ~0x0003;	// clean last two bits
  	return (-6.0 + 125.0/65536 * (float)rh); // return relative humidity
}

float THERMO_SENSOR::CalcT(uint16_t t)
{
 8009948:	b590      	push	{r4, r7, lr}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	460b      	mov	r3, r1
 8009952:	807b      	strh	r3, [r7, #2]
	t &= ~0x0003;	// clean last two bits
 8009954:	887b      	ldrh	r3, [r7, #2]
 8009956:	f023 0303 	bic.w	r3, r3, #3
 800995a:	807b      	strh	r3, [r7, #2]
	return (-46.85 + 175.72/65536 * (float)t);
 800995c:	887b      	ldrh	r3, [r7, #2]
 800995e:	4618      	mov	r0, r3
 8009960:	f7f7 f8d2 	bl	8000b08 <__aeabi_ui2f>
 8009964:	4603      	mov	r3, r0
 8009966:	4618      	mov	r0, r3
 8009968:	f7f6 fd5e 	bl	8000428 <__aeabi_f2d>
 800996c:	a30c      	add	r3, pc, #48	; (adr r3, 80099a0 <_ZN13THERMO_SENSOR5CalcTEt+0x58>)
 800996e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009972:	f7f6 fdb1 	bl	80004d8 <__aeabi_dmul>
 8009976:	4603      	mov	r3, r0
 8009978:	460c      	mov	r4, r1
 800997a:	4618      	mov	r0, r3
 800997c:	4621      	mov	r1, r4
 800997e:	a30a      	add	r3, pc, #40	; (adr r3, 80099a8 <_ZN13THERMO_SENSOR5CalcTEt+0x60>)
 8009980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009984:	f7f6 fbf0 	bl	8000168 <__aeabi_dsub>
 8009988:	4603      	mov	r3, r0
 800998a:	460c      	mov	r4, r1
 800998c:	4618      	mov	r0, r3
 800998e:	4621      	mov	r1, r4
 8009990:	f7f6 ffb4 	bl	80008fc <__aeabi_d2f>
 8009994:	4603      	mov	r3, r0
}
 8009996:	4618      	mov	r0, r3
 8009998:	370c      	adds	r7, #12
 800999a:	46bd      	mov	sp, r7
 800999c:	bd90      	pop	{r4, r7, pc}
 800999e:	bf00      	nop
 80099a0:	3d70a3d7 	.word	0x3d70a3d7
 80099a4:	3f65f70a 	.word	0x3f65f70a
 80099a8:	cccccccd 	.word	0xcccccccd
 80099ac:	40476ccc 	.word	0x40476ccc

080099b0 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh>:

uint8_t THERMO_SENSOR::CRC_Checksum(uint8_t data[], uint8_t no_of_bytes, uint8_t checksum)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b087      	sub	sp, #28
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	60f8      	str	r0, [r7, #12]
 80099b8:	60b9      	str	r1, [r7, #8]
 80099ba:	4611      	mov	r1, r2
 80099bc:	461a      	mov	r2, r3
 80099be:	460b      	mov	r3, r1
 80099c0:	71fb      	strb	r3, [r7, #7]
 80099c2:	4613      	mov	r3, r2
 80099c4:	71bb      	strb	r3, [r7, #6]
	uint8_t crc = 0;
 80099c6:	2300      	movs	r3, #0
 80099c8:	75fb      	strb	r3, [r7, #23]
  	uint8_t byteCtr;
  	uint8_t ret = 0;
 80099ca:	2300      	movs	r3, #0
 80099cc:	757b      	strb	r3, [r7, #21]

 	 //calculates 8-Bit checksum with given polynomial
  	for (byteCtr = 0; byteCtr < no_of_bytes; ++byteCtr)
 80099ce:	2300      	movs	r3, #0
 80099d0:	75bb      	strb	r3, [r7, #22]
 80099d2:	7dba      	ldrb	r2, [r7, #22]
 80099d4:	79fb      	ldrb	r3, [r7, #7]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d222      	bcs.n	8009a20 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x70>
 	 {
		crc ^= (data[byteCtr]);
 80099da:	7dbb      	ldrb	r3, [r7, #22]
 80099dc:	68ba      	ldr	r2, [r7, #8]
 80099de:	4413      	add	r3, r2
 80099e0:	781a      	ldrb	r2, [r3, #0]
 80099e2:	7dfb      	ldrb	r3, [r7, #23]
 80099e4:	4053      	eors	r3, r2
 80099e6:	75fb      	strb	r3, [r7, #23]
		for (uint8_t bit = 8; bit > 0; --bit)
 80099e8:	2308      	movs	r3, #8
 80099ea:	753b      	strb	r3, [r7, #20]
 80099ec:	7d3b      	ldrb	r3, [r7, #20]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d012      	beq.n	8009a18 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x68>
		{
		   if (crc & 0x80)
 80099f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	da07      	bge.n	8009a0a <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x5a>
			   crc = (crc << 1) ^ POLYNOMIAL;
 80099fa:	7dfb      	ldrb	r3, [r7, #23]
 80099fc:	005b      	lsls	r3, r3, #1
 80099fe:	b25b      	sxtb	r3, r3
 8009a00:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8009a04:	b25b      	sxtb	r3, r3
 8009a06:	75fb      	strb	r3, [r7, #23]
 8009a08:	e002      	b.n	8009a10 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x60>
		   else
			   crc = (crc << 1);
 8009a0a:	7dfb      	ldrb	r3, [r7, #23]
 8009a0c:	005b      	lsls	r3, r3, #1
 8009a0e:	75fb      	strb	r3, [r7, #23]
		for (uint8_t bit = 8; bit > 0; --bit)
 8009a10:	7d3b      	ldrb	r3, [r7, #20]
 8009a12:	3b01      	subs	r3, #1
 8009a14:	753b      	strb	r3, [r7, #20]
 8009a16:	e7e9      	b.n	80099ec <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x3c>
  	for (byteCtr = 0; byteCtr < no_of_bytes; ++byteCtr)
 8009a18:	7dbb      	ldrb	r3, [r7, #22]
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	75bb      	strb	r3, [r7, #22]
 8009a1e:	e7d8      	b.n	80099d2 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x22>
		}
 	 }
 	 if (crc != checksum)
 8009a20:	7dfa      	ldrb	r2, [r7, #23]
 8009a22:	79bb      	ldrb	r3, [r7, #6]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d002      	beq.n	8009a2e <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x7e>
 		 ret = 1;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	757b      	strb	r3, [r7, #21]
 8009a2c:	e001      	b.n	8009a32 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x82>
 	 else
 		 ret = 0;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	757b      	strb	r3, [r7, #21]
 	 return ret;
 8009a32:	7d7b      	ldrb	r3, [r7, #21]
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	371c      	adds	r7, #28
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bc80      	pop	{r7}
 8009a3c:	4770      	bx	lr

08009a3e <_ZN13THERMO_SENSOR14getTemperatureEv>:

	return CalcRH(result);
}

float THERMO_SENSOR::getTemperature(void)
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b084      	sub	sp, #16
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
	uint16_t result; 	// return variable

	result = readSensor_hm(TRIGGER_T_MEASUREMENT_NHM);
 8009a46:	21f3      	movs	r1, #243	; 0xf3
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f7ff fefd 	bl	8009848 <_ZN13THERMO_SENSOR13readSensor_hmEh>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	81fb      	strh	r3, [r7, #14]

	return CalcT(result);
 8009a52:	89fb      	ldrh	r3, [r7, #14]
 8009a54:	4619      	mov	r1, r3
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f7ff ff76 	bl	8009948 <_ZN13THERMO_SENSOR5CalcTEt>
 8009a5c:	4603      	mov	r3, r0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3710      	adds	r7, #16
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
	...

08009a68 <_ZN13THERMO_SENSOR5resetEv>:

void THERMO_SENSOR::reset()
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af02      	add	r7, sp, #8
 8009a6e:	6078      	str	r0, [r7, #4]
	clearI2CBuff();
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f7ff fed7 	bl	8009824 <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	i2cBuffer[0] = SOFT_RESET;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	22fe      	movs	r2, #254	; 0xfe
 8009a7a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, I2CTEMPADDR, i2cBuffer, 1, 10);
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	230a      	movs	r3, #10
 8009a80:	9300      	str	r3, [sp, #0]
 8009a82:	2301      	movs	r3, #1
 8009a84:	2180      	movs	r1, #128	; 0x80
 8009a86:	4806      	ldr	r0, [pc, #24]	; (8009aa0 <_ZN13THERMO_SENSOR5resetEv+0x38>)
 8009a88:	f001 fb4e 	bl	800b128 <HAL_I2C_Master_Transmit>
	HAL_Delay(15);
 8009a8c:	200f      	movs	r0, #15
 8009a8e:	f000 f985 	bl	8009d9c <HAL_Delay>
	clearI2CBuff();
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f7ff fec6 	bl	8009824 <_ZN13THERMO_SENSOR12clearI2CBuffEv>
}
 8009a98:	bf00      	nop
 8009a9a:	3708      	adds	r7, #8
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	2000056c 	.word	0x2000056c

08009aa4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b086      	sub	sp, #24
 8009aa8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009aaa:	f107 0308 	add.w	r3, r7, #8
 8009aae:	2200      	movs	r2, #0
 8009ab0:	601a      	str	r2, [r3, #0]
 8009ab2:	605a      	str	r2, [r3, #4]
 8009ab4:	609a      	str	r2, [r3, #8]
 8009ab6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009ab8:	463b      	mov	r3, r7
 8009aba:	2200      	movs	r2, #0
 8009abc:	601a      	str	r2, [r3, #0]
 8009abe:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8009ac0:	4b1d      	ldr	r3, [pc, #116]	; (8009b38 <MX_TIM2_Init+0x94>)
 8009ac2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009ac6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8009ac8:	4b1b      	ldr	r3, [pc, #108]	; (8009b38 <MX_TIM2_Init+0x94>)
 8009aca:	2200      	movs	r2, #0
 8009acc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009ace:	4b1a      	ldr	r3, [pc, #104]	; (8009b38 <MX_TIM2_Init+0x94>)
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535 - 1;
 8009ad4:	4b18      	ldr	r3, [pc, #96]	; (8009b38 <MX_TIM2_Init+0x94>)
 8009ad6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009ada:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009adc:	4b16      	ldr	r3, [pc, #88]	; (8009b38 <MX_TIM2_Init+0x94>)
 8009ade:	2200      	movs	r2, #0
 8009ae0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009ae2:	4b15      	ldr	r3, [pc, #84]	; (8009b38 <MX_TIM2_Init+0x94>)
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009ae8:	4813      	ldr	r0, [pc, #76]	; (8009b38 <MX_TIM2_Init+0x94>)
 8009aea:	f003 fb3b 	bl	800d164 <HAL_TIM_Base_Init>
 8009aee:	4603      	mov	r3, r0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d001      	beq.n	8009af8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8009af4:	f7ff fd1c 	bl	8009530 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009afc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009afe:	f107 0308 	add.w	r3, r7, #8
 8009b02:	4619      	mov	r1, r3
 8009b04:	480c      	ldr	r0, [pc, #48]	; (8009b38 <MX_TIM2_Init+0x94>)
 8009b06:	f003 fbf7 	bl	800d2f8 <HAL_TIM_ConfigClockSource>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d001      	beq.n	8009b14 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8009b10:	f7ff fd0e 	bl	8009530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009b14:	2300      	movs	r3, #0
 8009b16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009b1c:	463b      	mov	r3, r7
 8009b1e:	4619      	mov	r1, r3
 8009b20:	4805      	ldr	r0, [pc, #20]	; (8009b38 <MX_TIM2_Init+0x94>)
 8009b22:	f003 ff73 	bl	800da0c <HAL_TIMEx_MasterConfigSynchronization>
 8009b26:	4603      	mov	r3, r0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d001      	beq.n	8009b30 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8009b2c:	f7ff fd00 	bl	8009530 <Error_Handler>
  }

}
 8009b30:	bf00      	nop
 8009b32:	3718      	adds	r7, #24
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	20000618 	.word	0x20000618

08009b3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b085      	sub	sp, #20
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b4c:	d10b      	bne.n	8009b66 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009b4e:	4b08      	ldr	r3, [pc, #32]	; (8009b70 <HAL_TIM_Base_MspInit+0x34>)
 8009b50:	69db      	ldr	r3, [r3, #28]
 8009b52:	4a07      	ldr	r2, [pc, #28]	; (8009b70 <HAL_TIM_Base_MspInit+0x34>)
 8009b54:	f043 0301 	orr.w	r3, r3, #1
 8009b58:	61d3      	str	r3, [r2, #28]
 8009b5a:	4b05      	ldr	r3, [pc, #20]	; (8009b70 <HAL_TIM_Base_MspInit+0x34>)
 8009b5c:	69db      	ldr	r3, [r3, #28]
 8009b5e:	f003 0301 	and.w	r3, r3, #1
 8009b62:	60fb      	str	r3, [r7, #12]
 8009b64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8009b66:	bf00      	nop
 8009b68:	3714      	adds	r7, #20
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bc80      	pop	{r7}
 8009b6e:	4770      	bx	lr
 8009b70:	40021000 	.word	0x40021000

08009b74 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8009b78:	4b11      	ldr	r3, [pc, #68]	; (8009bc0 <MX_USART1_UART_Init+0x4c>)
 8009b7a:	4a12      	ldr	r2, [pc, #72]	; (8009bc4 <MX_USART1_UART_Init+0x50>)
 8009b7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8009b7e:	4b10      	ldr	r3, [pc, #64]	; (8009bc0 <MX_USART1_UART_Init+0x4c>)
 8009b80:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8009b84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009b86:	4b0e      	ldr	r3, [pc, #56]	; (8009bc0 <MX_USART1_UART_Init+0x4c>)
 8009b88:	2200      	movs	r2, #0
 8009b8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009b8c:	4b0c      	ldr	r3, [pc, #48]	; (8009bc0 <MX_USART1_UART_Init+0x4c>)
 8009b8e:	2200      	movs	r2, #0
 8009b90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009b92:	4b0b      	ldr	r3, [pc, #44]	; (8009bc0 <MX_USART1_UART_Init+0x4c>)
 8009b94:	2200      	movs	r2, #0
 8009b96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009b98:	4b09      	ldr	r3, [pc, #36]	; (8009bc0 <MX_USART1_UART_Init+0x4c>)
 8009b9a:	220c      	movs	r2, #12
 8009b9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009b9e:	4b08      	ldr	r3, [pc, #32]	; (8009bc0 <MX_USART1_UART_Init+0x4c>)
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009ba4:	4b06      	ldr	r3, [pc, #24]	; (8009bc0 <MX_USART1_UART_Init+0x4c>)
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009baa:	4805      	ldr	r0, [pc, #20]	; (8009bc0 <MX_USART1_UART_Init+0x4c>)
 8009bac:	f003 ffc4 	bl	800db38 <HAL_UART_Init>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d001      	beq.n	8009bba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8009bb6:	f7ff fcbb 	bl	8009530 <Error_Handler>
  }

}
 8009bba:	bf00      	nop
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	20000658 	.word	0x20000658
 8009bc4:	40013800 	.word	0x40013800

08009bc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b08a      	sub	sp, #40	; 0x28
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009bd0:	f107 0314 	add.w	r3, r7, #20
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	601a      	str	r2, [r3, #0]
 8009bd8:	605a      	str	r2, [r3, #4]
 8009bda:	609a      	str	r2, [r3, #8]
 8009bdc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a26      	ldr	r2, [pc, #152]	; (8009c7c <HAL_UART_MspInit+0xb4>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d145      	bne.n	8009c74 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009be8:	4b25      	ldr	r3, [pc, #148]	; (8009c80 <HAL_UART_MspInit+0xb8>)
 8009bea:	699b      	ldr	r3, [r3, #24]
 8009bec:	4a24      	ldr	r2, [pc, #144]	; (8009c80 <HAL_UART_MspInit+0xb8>)
 8009bee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009bf2:	6193      	str	r3, [r2, #24]
 8009bf4:	4b22      	ldr	r3, [pc, #136]	; (8009c80 <HAL_UART_MspInit+0xb8>)
 8009bf6:	699b      	ldr	r3, [r3, #24]
 8009bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bfc:	613b      	str	r3, [r7, #16]
 8009bfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009c00:	4b1f      	ldr	r3, [pc, #124]	; (8009c80 <HAL_UART_MspInit+0xb8>)
 8009c02:	699b      	ldr	r3, [r3, #24]
 8009c04:	4a1e      	ldr	r2, [pc, #120]	; (8009c80 <HAL_UART_MspInit+0xb8>)
 8009c06:	f043 0308 	orr.w	r3, r3, #8
 8009c0a:	6193      	str	r3, [r2, #24]
 8009c0c:	4b1c      	ldr	r3, [pc, #112]	; (8009c80 <HAL_UART_MspInit+0xb8>)
 8009c0e:	699b      	ldr	r3, [r3, #24]
 8009c10:	f003 0308 	and.w	r3, r3, #8
 8009c14:	60fb      	str	r3, [r7, #12]
 8009c16:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 8009c18:	2340      	movs	r3, #64	; 0x40
 8009c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c1c:	2302      	movs	r3, #2
 8009c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009c20:	2303      	movs	r3, #3
 8009c22:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8009c24:	f107 0314 	add.w	r3, r7, #20
 8009c28:	4619      	mov	r1, r3
 8009c2a:	4816      	ldr	r0, [pc, #88]	; (8009c84 <HAL_UART_MspInit+0xbc>)
 8009c2c:	f000 fe0a 	bl	800a844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 8009c30:	2380      	movs	r3, #128	; 0x80
 8009c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009c34:	2300      	movs	r3, #0
 8009c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 8009c3c:	f107 0314 	add.w	r3, r7, #20
 8009c40:	4619      	mov	r1, r3
 8009c42:	4810      	ldr	r0, [pc, #64]	; (8009c84 <HAL_UART_MspInit+0xbc>)
 8009c44:	f000 fdfe 	bl	800a844 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8009c48:	4b0f      	ldr	r3, [pc, #60]	; (8009c88 <HAL_UART_MspInit+0xc0>)
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8009c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c50:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8009c54:	627b      	str	r3, [r7, #36]	; 0x24
 8009c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c58:	f043 0304 	orr.w	r3, r3, #4
 8009c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8009c5e:	4a0a      	ldr	r2, [pc, #40]	; (8009c88 <HAL_UART_MspInit+0xc0>)
 8009c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c62:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009c64:	2200      	movs	r2, #0
 8009c66:	2100      	movs	r1, #0
 8009c68:	2025      	movs	r0, #37	; 0x25
 8009c6a:	f000 fd21 	bl	800a6b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009c6e:	2025      	movs	r0, #37	; 0x25
 8009c70:	f000 fd4a 	bl	800a708 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8009c74:	bf00      	nop
 8009c76:	3728      	adds	r7, #40	; 0x28
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}
 8009c7c:	40013800 	.word	0x40013800
 8009c80:	40021000 	.word	0x40021000
 8009c84:	40010c00 	.word	0x40010c00
 8009c88:	40010000 	.word	0x40010000

08009c8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8009c8c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8009c8e:	e003      	b.n	8009c98 <LoopCopyDataInit>

08009c90 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8009c90:	4b0b      	ldr	r3, [pc, #44]	; (8009cc0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8009c92:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8009c94:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8009c96:	3104      	adds	r1, #4

08009c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8009c98:	480a      	ldr	r0, [pc, #40]	; (8009cc4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8009c9a:	4b0b      	ldr	r3, [pc, #44]	; (8009cc8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8009c9c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8009c9e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8009ca0:	d3f6      	bcc.n	8009c90 <CopyDataInit>
  ldr r2, =_sbss
 8009ca2:	4a0a      	ldr	r2, [pc, #40]	; (8009ccc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8009ca4:	e002      	b.n	8009cac <LoopFillZerobss>

08009ca6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8009ca6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8009ca8:	f842 3b04 	str.w	r3, [r2], #4

08009cac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8009cac:	4b08      	ldr	r3, [pc, #32]	; (8009cd0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8009cae:	429a      	cmp	r2, r3
  bcc FillZerobss
 8009cb0:	d3f9      	bcc.n	8009ca6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009cb2:	f7ff fd83 	bl	80097bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009cb6:	f004 fec3 	bl	800ea40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009cba:	f7ff fb99 	bl	80093f0 <main>
  bx lr
 8009cbe:	4770      	bx	lr
  ldr r3, =_sidata
 8009cc0:	08012760 	.word	0x08012760
  ldr r0, =_sdata
 8009cc4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8009cc8:	2000010c 	.word	0x2000010c
  ldr r2, =_sbss
 8009ccc:	2000010c 	.word	0x2000010c
  ldr r3, = _ebss
 8009cd0:	200006a0 	.word	0x200006a0

08009cd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009cd4:	e7fe      	b.n	8009cd4 <ADC1_2_IRQHandler>
	...

08009cd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009cdc:	4b08      	ldr	r3, [pc, #32]	; (8009d00 <HAL_Init+0x28>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a07      	ldr	r2, [pc, #28]	; (8009d00 <HAL_Init+0x28>)
 8009ce2:	f043 0310 	orr.w	r3, r3, #16
 8009ce6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009ce8:	2003      	movs	r0, #3
 8009cea:	f000 fcc1 	bl	800a670 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009cee:	2000      	movs	r0, #0
 8009cf0:	f000 f808 	bl	8009d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009cf4:	f7ff fca2 	bl	800963c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009cf8:	2300      	movs	r3, #0
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	40022000 	.word	0x40022000

08009d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009d0c:	4b12      	ldr	r3, [pc, #72]	; (8009d58 <HAL_InitTick+0x54>)
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	4b12      	ldr	r3, [pc, #72]	; (8009d5c <HAL_InitTick+0x58>)
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	4619      	mov	r1, r3
 8009d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d22:	4618      	mov	r0, r3
 8009d24:	f000 fd0c 	bl	800a740 <HAL_SYSTICK_Config>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d001      	beq.n	8009d32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	e00e      	b.n	8009d50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2b0f      	cmp	r3, #15
 8009d36:	d80a      	bhi.n	8009d4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009d38:	2200      	movs	r2, #0
 8009d3a:	6879      	ldr	r1, [r7, #4]
 8009d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d40:	f000 fcb6 	bl	800a6b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009d44:	4a06      	ldr	r2, [pc, #24]	; (8009d60 <HAL_InitTick+0x5c>)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	e000      	b.n	8009d50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009d4e:	2301      	movs	r3, #1
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3708      	adds	r7, #8
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	2000009c 	.word	0x2000009c
 8009d5c:	200000a4 	.word	0x200000a4
 8009d60:	200000a0 	.word	0x200000a0

08009d64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009d64:	b480      	push	{r7}
 8009d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009d68:	4b05      	ldr	r3, [pc, #20]	; (8009d80 <HAL_IncTick+0x1c>)
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	4b05      	ldr	r3, [pc, #20]	; (8009d84 <HAL_IncTick+0x20>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4413      	add	r3, r2
 8009d74:	4a03      	ldr	r2, [pc, #12]	; (8009d84 <HAL_IncTick+0x20>)
 8009d76:	6013      	str	r3, [r2, #0]
}
 8009d78:	bf00      	nop
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bc80      	pop	{r7}
 8009d7e:	4770      	bx	lr
 8009d80:	200000a4 	.word	0x200000a4
 8009d84:	20000698 	.word	0x20000698

08009d88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8009d8c:	4b02      	ldr	r3, [pc, #8]	; (8009d98 <HAL_GetTick+0x10>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bc80      	pop	{r7}
 8009d96:	4770      	bx	lr
 8009d98:	20000698 	.word	0x20000698

08009d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009da4:	f7ff fff0 	bl	8009d88 <HAL_GetTick>
 8009da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db4:	d005      	beq.n	8009dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009db6:	4b09      	ldr	r3, [pc, #36]	; (8009ddc <HAL_Delay+0x40>)
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	461a      	mov	r2, r3
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	4413      	add	r3, r2
 8009dc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009dc2:	bf00      	nop
 8009dc4:	f7ff ffe0 	bl	8009d88 <HAL_GetTick>
 8009dc8:	4602      	mov	r2, r0
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	1ad3      	subs	r3, r2, r3
 8009dce:	68fa      	ldr	r2, [r7, #12]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d8f7      	bhi.n	8009dc4 <HAL_Delay+0x28>
  {
  }
}
 8009dd4:	bf00      	nop
 8009dd6:	3710      	adds	r7, #16
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	200000a4 	.word	0x200000a4

08009de0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b086      	sub	sp, #24
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009de8:	2300      	movs	r3, #0
 8009dea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8009dec:	2300      	movs	r3, #0
 8009dee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8009df0:	2300      	movs	r3, #0
 8009df2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8009df4:	2300      	movs	r3, #0
 8009df6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d101      	bne.n	8009e02 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e153      	b.n	800a0aa <HAL_ADC_Init+0x2ca>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4a9f      	ldr	r2, [pc, #636]	; (800a084 <HAL_ADC_Init+0x2a4>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d009      	beq.n	8009e20 <HAL_ADC_Init+0x40>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a9d      	ldr	r2, [pc, #628]	; (800a088 <HAL_ADC_Init+0x2a8>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d004      	beq.n	8009e20 <HAL_ADC_Init+0x40>
 8009e16:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009e1a:	489c      	ldr	r0, [pc, #624]	; (800a08c <HAL_ADC_Init+0x2ac>)
 8009e1c:	f7ff fb8e 	bl	800953c <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d009      	beq.n	8009e3c <HAL_ADC_Init+0x5c>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e30:	d004      	beq.n	8009e3c <HAL_ADC_Init+0x5c>
 8009e32:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8009e36:	4895      	ldr	r0, [pc, #596]	; (800a08c <HAL_ADC_Init+0x2ac>)
 8009e38:	f7ff fb80 	bl	800953c <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d009      	beq.n	8009e58 <HAL_ADC_Init+0x78>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e4c:	d004      	beq.n	8009e58 <HAL_ADC_Init+0x78>
 8009e4e:	f240 11b5 	movw	r1, #437	; 0x1b5
 8009e52:	488e      	ldr	r0, [pc, #568]	; (800a08c <HAL_ADC_Init+0x2ac>)
 8009e54:	f7ff fb72 	bl	800953c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	7b1b      	ldrb	r3, [r3, #12]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d008      	beq.n	8009e72 <HAL_ADC_Init+0x92>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	7b1b      	ldrb	r3, [r3, #12]
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d004      	beq.n	8009e72 <HAL_ADC_Init+0x92>
 8009e68:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8009e6c:	4887      	ldr	r0, [pc, #540]	; (800a08c <HAL_ADC_Init+0x2ac>)
 8009e6e:	f7ff fb65 	bl	800953c <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	69db      	ldr	r3, [r3, #28]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d022      	beq.n	8009ec0 <HAL_ADC_Init+0xe0>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	69db      	ldr	r3, [r3, #28]
 8009e7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e82:	d01d      	beq.n	8009ec0 <HAL_ADC_Init+0xe0>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	69db      	ldr	r3, [r3, #28]
 8009e88:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009e8c:	d018      	beq.n	8009ec0 <HAL_ADC_Init+0xe0>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	69db      	ldr	r3, [r3, #28]
 8009e92:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009e96:	d013      	beq.n	8009ec0 <HAL_ADC_Init+0xe0>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	69db      	ldr	r3, [r3, #28]
 8009e9c:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8009ea0:	d00e      	beq.n	8009ec0 <HAL_ADC_Init+0xe0>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	69db      	ldr	r3, [r3, #28]
 8009ea6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009eaa:	d009      	beq.n	8009ec0 <HAL_ADC_Init+0xe0>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	69db      	ldr	r3, [r3, #28]
 8009eb0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8009eb4:	d004      	beq.n	8009ec0 <HAL_ADC_Init+0xe0>
 8009eb6:	f240 11b7 	movw	r1, #439	; 0x1b7
 8009eba:	4874      	ldr	r0, [pc, #464]	; (800a08c <HAL_ADC_Init+0x2ac>)
 8009ebc:	f7ff fb3e 	bl	800953c <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d02a      	beq.n	8009f1e <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	691b      	ldr	r3, [r3, #16]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d003      	beq.n	8009ed8 <HAL_ADC_Init+0xf8>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	691b      	ldr	r3, [r3, #16]
 8009ed4:	2b10      	cmp	r3, #16
 8009ed6:	d904      	bls.n	8009ee2 <HAL_ADC_Init+0x102>
 8009ed8:	f240 11bb 	movw	r1, #443	; 0x1bb
 8009edc:	486b      	ldr	r0, [pc, #428]	; (800a08c <HAL_ADC_Init+0x2ac>)
 8009ede:	f7ff fb2d 	bl	800953c <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	7d1b      	ldrb	r3, [r3, #20]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d008      	beq.n	8009efc <HAL_ADC_Init+0x11c>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	7d1b      	ldrb	r3, [r3, #20]
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d004      	beq.n	8009efc <HAL_ADC_Init+0x11c>
 8009ef2:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8009ef6:	4865      	ldr	r0, [pc, #404]	; (800a08c <HAL_ADC_Init+0x2ac>)
 8009ef8:	f7ff fb20 	bl	800953c <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	7d1b      	ldrb	r3, [r3, #20]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d00c      	beq.n	8009f1e <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	699b      	ldr	r3, [r3, #24]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d003      	beq.n	8009f14 <HAL_ADC_Init+0x134>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	699b      	ldr	r3, [r3, #24]
 8009f10:	2b08      	cmp	r3, #8
 8009f12:	d904      	bls.n	8009f1e <HAL_ADC_Init+0x13e>
 8009f14:	f240 11bf 	movw	r1, #447	; 0x1bf
 8009f18:	485c      	ldr	r0, [pc, #368]	; (800a08c <HAL_ADC_Init+0x2ac>)
 8009f1a:	f7ff fb0f 	bl	800953c <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d109      	bne.n	8009f3a <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f7ff f93f 	bl	80091b8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 fa7e 	bl	800a43c <ADC_ConversionStop_Disable>
 8009f40:	4603      	mov	r3, r0
 8009f42:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f48:	f003 0310 	and.w	r3, r3, #16
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	f040 80a3 	bne.w	800a098 <HAL_ADC_Init+0x2b8>
 8009f52:	7dfb      	ldrb	r3, [r7, #23]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	f040 809f 	bne.w	800a098 <HAL_ADC_Init+0x2b8>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f5e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009f62:	f023 0302 	bic.w	r3, r3, #2
 8009f66:	f043 0202 	orr.w	r2, r3, #2
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8009f76:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	7b1b      	ldrb	r3, [r3, #12]
 8009f7c:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8009f7e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8009f80:	68ba      	ldr	r2, [r7, #8]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	689b      	ldr	r3, [r3, #8]
 8009f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f8e:	d003      	beq.n	8009f98 <HAL_ADC_Init+0x1b8>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d102      	bne.n	8009f9e <HAL_ADC_Init+0x1be>
 8009f98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f9c:	e000      	b.n	8009fa0 <HAL_ADC_Init+0x1c0>
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	693a      	ldr	r2, [r7, #16]
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	7d1b      	ldrb	r3, [r3, #20]
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d119      	bne.n	8009fe2 <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	7b1b      	ldrb	r3, [r3, #12]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d109      	bne.n	8009fca <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	699b      	ldr	r3, [r3, #24]
 8009fba:	3b01      	subs	r3, #1
 8009fbc:	035a      	lsls	r2, r3, #13
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009fc6:	613b      	str	r3, [r7, #16]
 8009fc8:	e00b      	b.n	8009fe2 <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fce:	f043 0220 	orr.w	r2, r3, #32
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fda:	f043 0201 	orr.w	r2, r3, #1
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	693a      	ldr	r2, [r7, #16]
 8009ff2:	430a      	orrs	r2, r1
 8009ff4:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	689a      	ldr	r2, [r3, #8]
 8009ffc:	4b24      	ldr	r3, [pc, #144]	; (800a090 <HAL_ADC_Init+0x2b0>)
 8009ffe:	4013      	ands	r3, r2
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	6812      	ldr	r2, [r2, #0]
 800a004:	68b9      	ldr	r1, [r7, #8]
 800a006:	430b      	orrs	r3, r1
 800a008:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a012:	d003      	beq.n	800a01c <HAL_ADC_Init+0x23c>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	689b      	ldr	r3, [r3, #8]
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d104      	bne.n	800a026 <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	691b      	ldr	r3, [r3, #16]
 800a020:	3b01      	subs	r3, #1
 800a022:	051b      	lsls	r3, r3, #20
 800a024:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a02c:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	68fa      	ldr	r2, [r7, #12]
 800a036:	430a      	orrs	r2, r1
 800a038:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	689a      	ldr	r2, [r3, #8]
 800a040:	4b14      	ldr	r3, [pc, #80]	; (800a094 <HAL_ADC_Init+0x2b4>)
 800a042:	4013      	ands	r3, r2
 800a044:	68ba      	ldr	r2, [r7, #8]
 800a046:	429a      	cmp	r2, r3
 800a048:	d10b      	bne.n	800a062 <HAL_ADC_Init+0x282>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2200      	movs	r2, #0
 800a04e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a054:	f023 0303 	bic.w	r3, r3, #3
 800a058:	f043 0201 	orr.w	r2, r3, #1
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800a060:	e022      	b.n	800a0a8 <HAL_ADC_Init+0x2c8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a066:	f023 0312 	bic.w	r3, r3, #18
 800a06a:	f043 0210 	orr.w	r2, r3, #16
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a076:	f043 0201 	orr.w	r2, r3, #1
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800a07e:	2301      	movs	r3, #1
 800a080:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800a082:	e011      	b.n	800a0a8 <HAL_ADC_Init+0x2c8>
 800a084:	40012400 	.word	0x40012400
 800a088:	40012800 	.word	0x40012800
 800a08c:	0800f848 	.word	0x0800f848
 800a090:	ffe1f7fd 	.word	0xffe1f7fd
 800a094:	ff1f0efe 	.word	0xff1f0efe
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a09c:	f043 0210 	orr.w	r2, r3, #16
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800a0a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3718      	adds	r7, #24
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop

0800a0b4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a88      	ldr	r2, [pc, #544]	; (800a2ec <HAL_ADC_ConfigChannel+0x238>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d009      	beq.n	800a0e4 <HAL_ADC_ConfigChannel+0x30>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a86      	ldr	r2, [pc, #536]	; (800a2f0 <HAL_ADC_ConfigChannel+0x23c>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d004      	beq.n	800a0e4 <HAL_ADC_ConfigChannel+0x30>
 800a0da:	f240 71ce 	movw	r1, #1998	; 0x7ce
 800a0de:	4885      	ldr	r0, [pc, #532]	; (800a2f4 <HAL_ADC_ConfigChannel+0x240>)
 800a0e0:	f7ff fa2c 	bl	800953c <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d048      	beq.n	800a17e <HAL_ADC_ConfigChannel+0xca>
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d044      	beq.n	800a17e <HAL_ADC_ConfigChannel+0xca>
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	2b02      	cmp	r3, #2
 800a0fa:	d040      	beq.n	800a17e <HAL_ADC_ConfigChannel+0xca>
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2b03      	cmp	r3, #3
 800a102:	d03c      	beq.n	800a17e <HAL_ADC_ConfigChannel+0xca>
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	2b04      	cmp	r3, #4
 800a10a:	d038      	beq.n	800a17e <HAL_ADC_ConfigChannel+0xca>
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	2b05      	cmp	r3, #5
 800a112:	d034      	beq.n	800a17e <HAL_ADC_ConfigChannel+0xca>
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	2b06      	cmp	r3, #6
 800a11a:	d030      	beq.n	800a17e <HAL_ADC_ConfigChannel+0xca>
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2b07      	cmp	r3, #7
 800a122:	d02c      	beq.n	800a17e <HAL_ADC_ConfigChannel+0xca>
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	2b08      	cmp	r3, #8
 800a12a:	d028      	beq.n	800a17e <HAL_ADC_ConfigChannel+0xca>
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2b09      	cmp	r3, #9
 800a132:	d024      	beq.n	800a17e <HAL_ADC_ConfigChannel+0xca>
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2b0a      	cmp	r3, #10
 800a13a:	d020      	beq.n	800a17e <HAL_ADC_ConfigChannel+0xca>
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2b0b      	cmp	r3, #11
 800a142:	d01c      	beq.n	800a17e <HAL_ADC_ConfigChannel+0xca>
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	2b0c      	cmp	r3, #12
 800a14a:	d018      	beq.n	800a17e <HAL_ADC_ConfigChannel+0xca>
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	2b0d      	cmp	r3, #13
 800a152:	d014      	beq.n	800a17e <HAL_ADC_ConfigChannel+0xca>
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	2b0e      	cmp	r3, #14
 800a15a:	d010      	beq.n	800a17e <HAL_ADC_ConfigChannel+0xca>
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2b0f      	cmp	r3, #15
 800a162:	d00c      	beq.n	800a17e <HAL_ADC_ConfigChannel+0xca>
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	2b10      	cmp	r3, #16
 800a16a:	d008      	beq.n	800a17e <HAL_ADC_ConfigChannel+0xca>
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2b11      	cmp	r3, #17
 800a172:	d004      	beq.n	800a17e <HAL_ADC_ConfigChannel+0xca>
 800a174:	f240 71cf 	movw	r1, #1999	; 0x7cf
 800a178:	485e      	ldr	r0, [pc, #376]	; (800a2f4 <HAL_ADC_ConfigChannel+0x240>)
 800a17a:	f7ff f9df 	bl	800953c <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	2b01      	cmp	r3, #1
 800a184:	d040      	beq.n	800a208 <HAL_ADC_ConfigChannel+0x154>
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	2b02      	cmp	r3, #2
 800a18c:	d03c      	beq.n	800a208 <HAL_ADC_ConfigChannel+0x154>
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	2b03      	cmp	r3, #3
 800a194:	d038      	beq.n	800a208 <HAL_ADC_ConfigChannel+0x154>
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	2b04      	cmp	r3, #4
 800a19c:	d034      	beq.n	800a208 <HAL_ADC_ConfigChannel+0x154>
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	2b05      	cmp	r3, #5
 800a1a4:	d030      	beq.n	800a208 <HAL_ADC_ConfigChannel+0x154>
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	2b06      	cmp	r3, #6
 800a1ac:	d02c      	beq.n	800a208 <HAL_ADC_ConfigChannel+0x154>
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	2b07      	cmp	r3, #7
 800a1b4:	d028      	beq.n	800a208 <HAL_ADC_ConfigChannel+0x154>
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	2b08      	cmp	r3, #8
 800a1bc:	d024      	beq.n	800a208 <HAL_ADC_ConfigChannel+0x154>
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	2b09      	cmp	r3, #9
 800a1c4:	d020      	beq.n	800a208 <HAL_ADC_ConfigChannel+0x154>
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	2b0a      	cmp	r3, #10
 800a1cc:	d01c      	beq.n	800a208 <HAL_ADC_ConfigChannel+0x154>
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	2b0b      	cmp	r3, #11
 800a1d4:	d018      	beq.n	800a208 <HAL_ADC_ConfigChannel+0x154>
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	2b0c      	cmp	r3, #12
 800a1dc:	d014      	beq.n	800a208 <HAL_ADC_ConfigChannel+0x154>
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	2b0d      	cmp	r3, #13
 800a1e4:	d010      	beq.n	800a208 <HAL_ADC_ConfigChannel+0x154>
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	2b0e      	cmp	r3, #14
 800a1ec:	d00c      	beq.n	800a208 <HAL_ADC_ConfigChannel+0x154>
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	2b0f      	cmp	r3, #15
 800a1f4:	d008      	beq.n	800a208 <HAL_ADC_ConfigChannel+0x154>
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	2b10      	cmp	r3, #16
 800a1fc:	d004      	beq.n	800a208 <HAL_ADC_ConfigChannel+0x154>
 800a1fe:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800a202:	483c      	ldr	r0, [pc, #240]	; (800a2f4 <HAL_ADC_ConfigChannel+0x240>)
 800a204:	f7ff f99a 	bl	800953c <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	689b      	ldr	r3, [r3, #8]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d020      	beq.n	800a252 <HAL_ADC_ConfigChannel+0x19e>
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	689b      	ldr	r3, [r3, #8]
 800a214:	2b01      	cmp	r3, #1
 800a216:	d01c      	beq.n	800a252 <HAL_ADC_ConfigChannel+0x19e>
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	689b      	ldr	r3, [r3, #8]
 800a21c:	2b02      	cmp	r3, #2
 800a21e:	d018      	beq.n	800a252 <HAL_ADC_ConfigChannel+0x19e>
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	689b      	ldr	r3, [r3, #8]
 800a224:	2b03      	cmp	r3, #3
 800a226:	d014      	beq.n	800a252 <HAL_ADC_ConfigChannel+0x19e>
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	689b      	ldr	r3, [r3, #8]
 800a22c:	2b04      	cmp	r3, #4
 800a22e:	d010      	beq.n	800a252 <HAL_ADC_ConfigChannel+0x19e>
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	689b      	ldr	r3, [r3, #8]
 800a234:	2b05      	cmp	r3, #5
 800a236:	d00c      	beq.n	800a252 <HAL_ADC_ConfigChannel+0x19e>
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	2b06      	cmp	r3, #6
 800a23e:	d008      	beq.n	800a252 <HAL_ADC_ConfigChannel+0x19e>
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	2b07      	cmp	r3, #7
 800a246:	d004      	beq.n	800a252 <HAL_ADC_ConfigChannel+0x19e>
 800a248:	f240 71d1 	movw	r1, #2001	; 0x7d1
 800a24c:	4829      	ldr	r0, [pc, #164]	; (800a2f4 <HAL_ADC_ConfigChannel+0x240>)
 800a24e:	f7ff f975 	bl	800953c <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d101      	bne.n	800a260 <HAL_ADC_ConfigChannel+0x1ac>
 800a25c:	2302      	movs	r3, #2
 800a25e:	e0e2      	b.n	800a426 <HAL_ADC_ConfigChannel+0x372>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2201      	movs	r2, #1
 800a264:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	2b06      	cmp	r3, #6
 800a26e:	d81c      	bhi.n	800a2aa <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	685a      	ldr	r2, [r3, #4]
 800a27a:	4613      	mov	r3, r2
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	4413      	add	r3, r2
 800a280:	3b05      	subs	r3, #5
 800a282:	221f      	movs	r2, #31
 800a284:	fa02 f303 	lsl.w	r3, r2, r3
 800a288:	43db      	mvns	r3, r3
 800a28a:	4019      	ands	r1, r3
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	6818      	ldr	r0, [r3, #0]
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	685a      	ldr	r2, [r3, #4]
 800a294:	4613      	mov	r3, r2
 800a296:	009b      	lsls	r3, r3, #2
 800a298:	4413      	add	r3, r2
 800a29a:	3b05      	subs	r3, #5
 800a29c:	fa00 f203 	lsl.w	r2, r0, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	430a      	orrs	r2, r1
 800a2a6:	635a      	str	r2, [r3, #52]	; 0x34
 800a2a8:	e042      	b.n	800a330 <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	2b0c      	cmp	r3, #12
 800a2b0:	d822      	bhi.n	800a2f8 <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	685a      	ldr	r2, [r3, #4]
 800a2bc:	4613      	mov	r3, r2
 800a2be:	009b      	lsls	r3, r3, #2
 800a2c0:	4413      	add	r3, r2
 800a2c2:	3b23      	subs	r3, #35	; 0x23
 800a2c4:	221f      	movs	r2, #31
 800a2c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ca:	43db      	mvns	r3, r3
 800a2cc:	4019      	ands	r1, r3
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	6818      	ldr	r0, [r3, #0]
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	685a      	ldr	r2, [r3, #4]
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	009b      	lsls	r3, r3, #2
 800a2da:	4413      	add	r3, r2
 800a2dc:	3b23      	subs	r3, #35	; 0x23
 800a2de:	fa00 f203 	lsl.w	r2, r0, r3
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	430a      	orrs	r2, r1
 800a2e8:	631a      	str	r2, [r3, #48]	; 0x30
 800a2ea:	e021      	b.n	800a330 <HAL_ADC_ConfigChannel+0x27c>
 800a2ec:	40012400 	.word	0x40012400
 800a2f0:	40012800 	.word	0x40012800
 800a2f4:	0800f848 	.word	0x0800f848
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	685a      	ldr	r2, [r3, #4]
 800a302:	4613      	mov	r3, r2
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	4413      	add	r3, r2
 800a308:	3b41      	subs	r3, #65	; 0x41
 800a30a:	221f      	movs	r2, #31
 800a30c:	fa02 f303 	lsl.w	r3, r2, r3
 800a310:	43db      	mvns	r3, r3
 800a312:	4019      	ands	r1, r3
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	6818      	ldr	r0, [r3, #0]
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	685a      	ldr	r2, [r3, #4]
 800a31c:	4613      	mov	r3, r2
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	4413      	add	r3, r2
 800a322:	3b41      	subs	r3, #65	; 0x41
 800a324:	fa00 f203 	lsl.w	r2, r0, r3
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	430a      	orrs	r2, r1
 800a32e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	2b09      	cmp	r3, #9
 800a336:	d91c      	bls.n	800a372 <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	68d9      	ldr	r1, [r3, #12]
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	4613      	mov	r3, r2
 800a344:	005b      	lsls	r3, r3, #1
 800a346:	4413      	add	r3, r2
 800a348:	3b1e      	subs	r3, #30
 800a34a:	2207      	movs	r2, #7
 800a34c:	fa02 f303 	lsl.w	r3, r2, r3
 800a350:	43db      	mvns	r3, r3
 800a352:	4019      	ands	r1, r3
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	6898      	ldr	r0, [r3, #8]
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	4613      	mov	r3, r2
 800a35e:	005b      	lsls	r3, r3, #1
 800a360:	4413      	add	r3, r2
 800a362:	3b1e      	subs	r3, #30
 800a364:	fa00 f203 	lsl.w	r2, r0, r3
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	430a      	orrs	r2, r1
 800a36e:	60da      	str	r2, [r3, #12]
 800a370:	e019      	b.n	800a3a6 <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	6919      	ldr	r1, [r3, #16]
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	681a      	ldr	r2, [r3, #0]
 800a37c:	4613      	mov	r3, r2
 800a37e:	005b      	lsls	r3, r3, #1
 800a380:	4413      	add	r3, r2
 800a382:	2207      	movs	r2, #7
 800a384:	fa02 f303 	lsl.w	r3, r2, r3
 800a388:	43db      	mvns	r3, r3
 800a38a:	4019      	ands	r1, r3
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	6898      	ldr	r0, [r3, #8]
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	4613      	mov	r3, r2
 800a396:	005b      	lsls	r3, r3, #1
 800a398:	4413      	add	r3, r2
 800a39a:	fa00 f203 	lsl.w	r2, r0, r3
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	430a      	orrs	r2, r1
 800a3a4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	2b10      	cmp	r3, #16
 800a3ac:	d003      	beq.n	800a3b6 <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800a3b2:	2b11      	cmp	r3, #17
 800a3b4:	d132      	bne.n	800a41c <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a1d      	ldr	r2, [pc, #116]	; (800a430 <HAL_ADC_ConfigChannel+0x37c>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d125      	bne.n	800a40c <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	689b      	ldr	r3, [r3, #8]
 800a3c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d126      	bne.n	800a41c <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	689a      	ldr	r2, [r3, #8]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800a3dc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2b10      	cmp	r3, #16
 800a3e4:	d11a      	bne.n	800a41c <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a3e6:	4b13      	ldr	r3, [pc, #76]	; (800a434 <HAL_ADC_ConfigChannel+0x380>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a13      	ldr	r2, [pc, #76]	; (800a438 <HAL_ADC_ConfigChannel+0x384>)
 800a3ec:	fba2 2303 	umull	r2, r3, r2, r3
 800a3f0:	0c9a      	lsrs	r2, r3, #18
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	4413      	add	r3, r2
 800a3f8:	005b      	lsls	r3, r3, #1
 800a3fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800a3fc:	e002      	b.n	800a404 <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	3b01      	subs	r3, #1
 800a402:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1f9      	bne.n	800a3fe <HAL_ADC_ConfigChannel+0x34a>
 800a40a:	e007      	b.n	800a41c <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a410:	f043 0220 	orr.w	r2, r3, #32
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800a418:	2301      	movs	r3, #1
 800a41a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2200      	movs	r2, #0
 800a420:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800a424:	7bfb      	ldrb	r3, [r7, #15]
}
 800a426:	4618      	mov	r0, r3
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	40012400 	.word	0x40012400
 800a434:	2000009c 	.word	0x2000009c
 800a438:	431bde83 	.word	0x431bde83

0800a43c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a444:	2300      	movs	r3, #0
 800a446:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	f003 0301 	and.w	r3, r3, #1
 800a452:	2b01      	cmp	r3, #1
 800a454:	d127      	bne.n	800a4a6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	689a      	ldr	r2, [r3, #8]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f022 0201 	bic.w	r2, r2, #1
 800a464:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800a466:	f7ff fc8f 	bl	8009d88 <HAL_GetTick>
 800a46a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800a46c:	e014      	b.n	800a498 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800a46e:	f7ff fc8b 	bl	8009d88 <HAL_GetTick>
 800a472:	4602      	mov	r2, r0
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	1ad3      	subs	r3, r2, r3
 800a478:	2b02      	cmp	r3, #2
 800a47a:	d90d      	bls.n	800a498 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a480:	f043 0210 	orr.w	r2, r3, #16
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a48c:	f043 0201 	orr.w	r2, r3, #1
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800a494:	2301      	movs	r3, #1
 800a496:	e007      	b.n	800a4a8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	f003 0301 	and.w	r3, r3, #1
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d0e3      	beq.n	800a46e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800a4a6:	2300      	movs	r3, #0
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3710      	adds	r7, #16
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f003 0307 	and.w	r3, r3, #7
 800a4be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a4c0:	4b0c      	ldr	r3, [pc, #48]	; (800a4f4 <__NVIC_SetPriorityGrouping+0x44>)
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a4c6:	68ba      	ldr	r2, [r7, #8]
 800a4c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a4cc:	4013      	ands	r3, r2
 800a4ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a4d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a4dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a4e2:	4a04      	ldr	r2, [pc, #16]	; (800a4f4 <__NVIC_SetPriorityGrouping+0x44>)
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	60d3      	str	r3, [r2, #12]
}
 800a4e8:	bf00      	nop
 800a4ea:	3714      	adds	r7, #20
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bc80      	pop	{r7}
 800a4f0:	4770      	bx	lr
 800a4f2:	bf00      	nop
 800a4f4:	e000ed00 	.word	0xe000ed00

0800a4f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a4fc:	4b04      	ldr	r3, [pc, #16]	; (800a510 <__NVIC_GetPriorityGrouping+0x18>)
 800a4fe:	68db      	ldr	r3, [r3, #12]
 800a500:	0a1b      	lsrs	r3, r3, #8
 800a502:	f003 0307 	and.w	r3, r3, #7
}
 800a506:	4618      	mov	r0, r3
 800a508:	46bd      	mov	sp, r7
 800a50a:	bc80      	pop	{r7}
 800a50c:	4770      	bx	lr
 800a50e:	bf00      	nop
 800a510:	e000ed00 	.word	0xe000ed00

0800a514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	4603      	mov	r3, r0
 800a51c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a51e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a522:	2b00      	cmp	r3, #0
 800a524:	db0b      	blt.n	800a53e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a526:	79fb      	ldrb	r3, [r7, #7]
 800a528:	f003 021f 	and.w	r2, r3, #31
 800a52c:	4906      	ldr	r1, [pc, #24]	; (800a548 <__NVIC_EnableIRQ+0x34>)
 800a52e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a532:	095b      	lsrs	r3, r3, #5
 800a534:	2001      	movs	r0, #1
 800a536:	fa00 f202 	lsl.w	r2, r0, r2
 800a53a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a53e:	bf00      	nop
 800a540:	370c      	adds	r7, #12
 800a542:	46bd      	mov	sp, r7
 800a544:	bc80      	pop	{r7}
 800a546:	4770      	bx	lr
 800a548:	e000e100 	.word	0xe000e100

0800a54c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b083      	sub	sp, #12
 800a550:	af00      	add	r7, sp, #0
 800a552:	4603      	mov	r3, r0
 800a554:	6039      	str	r1, [r7, #0]
 800a556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	db0a      	blt.n	800a576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	b2da      	uxtb	r2, r3
 800a564:	490c      	ldr	r1, [pc, #48]	; (800a598 <__NVIC_SetPriority+0x4c>)
 800a566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a56a:	0112      	lsls	r2, r2, #4
 800a56c:	b2d2      	uxtb	r2, r2
 800a56e:	440b      	add	r3, r1
 800a570:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a574:	e00a      	b.n	800a58c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	b2da      	uxtb	r2, r3
 800a57a:	4908      	ldr	r1, [pc, #32]	; (800a59c <__NVIC_SetPriority+0x50>)
 800a57c:	79fb      	ldrb	r3, [r7, #7]
 800a57e:	f003 030f 	and.w	r3, r3, #15
 800a582:	3b04      	subs	r3, #4
 800a584:	0112      	lsls	r2, r2, #4
 800a586:	b2d2      	uxtb	r2, r2
 800a588:	440b      	add	r3, r1
 800a58a:	761a      	strb	r2, [r3, #24]
}
 800a58c:	bf00      	nop
 800a58e:	370c      	adds	r7, #12
 800a590:	46bd      	mov	sp, r7
 800a592:	bc80      	pop	{r7}
 800a594:	4770      	bx	lr
 800a596:	bf00      	nop
 800a598:	e000e100 	.word	0xe000e100
 800a59c:	e000ed00 	.word	0xe000ed00

0800a5a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b089      	sub	sp, #36	; 0x24
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f003 0307 	and.w	r3, r3, #7
 800a5b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a5b4:	69fb      	ldr	r3, [r7, #28]
 800a5b6:	f1c3 0307 	rsb	r3, r3, #7
 800a5ba:	2b04      	cmp	r3, #4
 800a5bc:	bf28      	it	cs
 800a5be:	2304      	movcs	r3, #4
 800a5c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a5c2:	69fb      	ldr	r3, [r7, #28]
 800a5c4:	3304      	adds	r3, #4
 800a5c6:	2b06      	cmp	r3, #6
 800a5c8:	d902      	bls.n	800a5d0 <NVIC_EncodePriority+0x30>
 800a5ca:	69fb      	ldr	r3, [r7, #28]
 800a5cc:	3b03      	subs	r3, #3
 800a5ce:	e000      	b.n	800a5d2 <NVIC_EncodePriority+0x32>
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a5d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a5d8:	69bb      	ldr	r3, [r7, #24]
 800a5da:	fa02 f303 	lsl.w	r3, r2, r3
 800a5de:	43da      	mvns	r2, r3
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	401a      	ands	r2, r3
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a5e8:	f04f 31ff 	mov.w	r1, #4294967295
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	fa01 f303 	lsl.w	r3, r1, r3
 800a5f2:	43d9      	mvns	r1, r3
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a5f8:	4313      	orrs	r3, r2
         );
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3724      	adds	r7, #36	; 0x24
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bc80      	pop	{r7}
 800a602:	4770      	bx	lr

0800a604 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800a604:	b480      	push	{r7}
 800a606:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a608:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a60c:	4b05      	ldr	r3, [pc, #20]	; (800a624 <__NVIC_SystemReset+0x20>)
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a614:	4903      	ldr	r1, [pc, #12]	; (800a624 <__NVIC_SystemReset+0x20>)
 800a616:	4b04      	ldr	r3, [pc, #16]	; (800a628 <__NVIC_SystemReset+0x24>)
 800a618:	4313      	orrs	r3, r2
 800a61a:	60cb      	str	r3, [r1, #12]
 800a61c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800a620:	bf00      	nop
 800a622:	e7fd      	b.n	800a620 <__NVIC_SystemReset+0x1c>
 800a624:	e000ed00 	.word	0xe000ed00
 800a628:	05fa0004 	.word	0x05fa0004

0800a62c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	3b01      	subs	r3, #1
 800a638:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a63c:	d301      	bcc.n	800a642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a63e:	2301      	movs	r3, #1
 800a640:	e00f      	b.n	800a662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a642:	4a0a      	ldr	r2, [pc, #40]	; (800a66c <SysTick_Config+0x40>)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	3b01      	subs	r3, #1
 800a648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a64a:	210f      	movs	r1, #15
 800a64c:	f04f 30ff 	mov.w	r0, #4294967295
 800a650:	f7ff ff7c 	bl	800a54c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a654:	4b05      	ldr	r3, [pc, #20]	; (800a66c <SysTick_Config+0x40>)
 800a656:	2200      	movs	r2, #0
 800a658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a65a:	4b04      	ldr	r3, [pc, #16]	; (800a66c <SysTick_Config+0x40>)
 800a65c:	2207      	movs	r2, #7
 800a65e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a660:	2300      	movs	r3, #0
}
 800a662:	4618      	mov	r0, r3
 800a664:	3708      	adds	r7, #8
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	e000e010 	.word	0xe000e010

0800a670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2b07      	cmp	r3, #7
 800a67c:	d00f      	beq.n	800a69e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2b06      	cmp	r3, #6
 800a682:	d00c      	beq.n	800a69e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2b05      	cmp	r3, #5
 800a688:	d009      	beq.n	800a69e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2b04      	cmp	r3, #4
 800a68e:	d006      	beq.n	800a69e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2b03      	cmp	r3, #3
 800a694:	d003      	beq.n	800a69e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800a696:	2192      	movs	r1, #146	; 0x92
 800a698:	4804      	ldr	r0, [pc, #16]	; (800a6ac <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800a69a:	f7fe ff4f 	bl	800953c <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f7ff ff06 	bl	800a4b0 <__NVIC_SetPriorityGrouping>
}
 800a6a4:	bf00      	nop
 800a6a6:	3708      	adds	r7, #8
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}
 800a6ac:	0800f880 	.word	0x0800f880

0800a6b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b086      	sub	sp, #24
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	607a      	str	r2, [r7, #4]
 800a6bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2b0f      	cmp	r3, #15
 800a6c6:	d903      	bls.n	800a6d0 <HAL_NVIC_SetPriority+0x20>
 800a6c8:	21aa      	movs	r1, #170	; 0xaa
 800a6ca:	480e      	ldr	r0, [pc, #56]	; (800a704 <HAL_NVIC_SetPriority+0x54>)
 800a6cc:	f7fe ff36 	bl	800953c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	2b0f      	cmp	r3, #15
 800a6d4:	d903      	bls.n	800a6de <HAL_NVIC_SetPriority+0x2e>
 800a6d6:	21ab      	movs	r1, #171	; 0xab
 800a6d8:	480a      	ldr	r0, [pc, #40]	; (800a704 <HAL_NVIC_SetPriority+0x54>)
 800a6da:	f7fe ff2f 	bl	800953c <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a6de:	f7ff ff0b 	bl	800a4f8 <__NVIC_GetPriorityGrouping>
 800a6e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	68b9      	ldr	r1, [r7, #8]
 800a6e8:	6978      	ldr	r0, [r7, #20]
 800a6ea:	f7ff ff59 	bl	800a5a0 <NVIC_EncodePriority>
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6f4:	4611      	mov	r1, r2
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f7ff ff28 	bl	800a54c <__NVIC_SetPriority>
}
 800a6fc:	bf00      	nop
 800a6fe:	3718      	adds	r7, #24
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}
 800a704:	0800f880 	.word	0x0800f880

0800a708 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b082      	sub	sp, #8
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	4603      	mov	r3, r0
 800a710:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800a712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a716:	2b00      	cmp	r3, #0
 800a718:	da03      	bge.n	800a722 <HAL_NVIC_EnableIRQ+0x1a>
 800a71a:	21be      	movs	r1, #190	; 0xbe
 800a71c:	4805      	ldr	r0, [pc, #20]	; (800a734 <HAL_NVIC_EnableIRQ+0x2c>)
 800a71e:	f7fe ff0d 	bl	800953c <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a726:	4618      	mov	r0, r3
 800a728:	f7ff fef4 	bl	800a514 <__NVIC_EnableIRQ>
}
 800a72c:	bf00      	nop
 800a72e:	3708      	adds	r7, #8
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}
 800a734:	0800f880 	.word	0x0800f880

0800a738 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800a73c:	f7ff ff62 	bl	800a604 <__NVIC_SystemReset>

0800a740 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b082      	sub	sp, #8
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f7ff ff6f 	bl	800a62c <SysTick_Config>
 800a74e:	4603      	mov	r3, r0
}
 800a750:	4618      	mov	r0, r3
 800a752:	3708      	adds	r7, #8
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}

0800a758 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a760:	2300      	movs	r3, #0
 800a762:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a76a:	2b02      	cmp	r3, #2
 800a76c:	d005      	beq.n	800a77a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2204      	movs	r2, #4
 800a772:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800a774:	2301      	movs	r3, #1
 800a776:	73fb      	strb	r3, [r7, #15]
 800a778:	e051      	b.n	800a81e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	681a      	ldr	r2, [r3, #0]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f022 020e 	bic.w	r2, r2, #14
 800a788:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f022 0201 	bic.w	r2, r2, #1
 800a798:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a22      	ldr	r2, [pc, #136]	; (800a828 <HAL_DMA_Abort_IT+0xd0>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d029      	beq.n	800a7f8 <HAL_DMA_Abort_IT+0xa0>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a20      	ldr	r2, [pc, #128]	; (800a82c <HAL_DMA_Abort_IT+0xd4>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d022      	beq.n	800a7f4 <HAL_DMA_Abort_IT+0x9c>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4a1f      	ldr	r2, [pc, #124]	; (800a830 <HAL_DMA_Abort_IT+0xd8>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d01a      	beq.n	800a7ee <HAL_DMA_Abort_IT+0x96>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a1d      	ldr	r2, [pc, #116]	; (800a834 <HAL_DMA_Abort_IT+0xdc>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d012      	beq.n	800a7e8 <HAL_DMA_Abort_IT+0x90>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4a1c      	ldr	r2, [pc, #112]	; (800a838 <HAL_DMA_Abort_IT+0xe0>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d00a      	beq.n	800a7e2 <HAL_DMA_Abort_IT+0x8a>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a1a      	ldr	r2, [pc, #104]	; (800a83c <HAL_DMA_Abort_IT+0xe4>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d102      	bne.n	800a7dc <HAL_DMA_Abort_IT+0x84>
 800a7d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a7da:	e00e      	b.n	800a7fa <HAL_DMA_Abort_IT+0xa2>
 800a7dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a7e0:	e00b      	b.n	800a7fa <HAL_DMA_Abort_IT+0xa2>
 800a7e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a7e6:	e008      	b.n	800a7fa <HAL_DMA_Abort_IT+0xa2>
 800a7e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a7ec:	e005      	b.n	800a7fa <HAL_DMA_Abort_IT+0xa2>
 800a7ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7f2:	e002      	b.n	800a7fa <HAL_DMA_Abort_IT+0xa2>
 800a7f4:	2310      	movs	r3, #16
 800a7f6:	e000      	b.n	800a7fa <HAL_DMA_Abort_IT+0xa2>
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	4a11      	ldr	r2, [pc, #68]	; (800a840 <HAL_DMA_Abort_IT+0xe8>)
 800a7fc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2201      	movs	r2, #1
 800a802:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a812:	2b00      	cmp	r3, #0
 800a814:	d003      	beq.n	800a81e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	4798      	blx	r3
    } 
  }
  return status;
 800a81e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a820:	4618      	mov	r0, r3
 800a822:	3710      	adds	r7, #16
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}
 800a828:	40020008 	.word	0x40020008
 800a82c:	4002001c 	.word	0x4002001c
 800a830:	40020030 	.word	0x40020030
 800a834:	40020044 	.word	0x40020044
 800a838:	40020058 	.word	0x40020058
 800a83c:	4002006c 	.word	0x4002006c
 800a840:	40020000 	.word	0x40020000

0800a844 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b08a      	sub	sp, #40	; 0x28
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a84e:	2300      	movs	r3, #0
 800a850:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800a852:	2300      	movs	r3, #0
 800a854:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	4a9c      	ldr	r2, [pc, #624]	; (800aacc <HAL_GPIO_Init+0x288>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d013      	beq.n	800a886 <HAL_GPIO_Init+0x42>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	4a9b      	ldr	r2, [pc, #620]	; (800aad0 <HAL_GPIO_Init+0x28c>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d00f      	beq.n	800a886 <HAL_GPIO_Init+0x42>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	4a9a      	ldr	r2, [pc, #616]	; (800aad4 <HAL_GPIO_Init+0x290>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d00b      	beq.n	800a886 <HAL_GPIO_Init+0x42>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	4a99      	ldr	r2, [pc, #612]	; (800aad8 <HAL_GPIO_Init+0x294>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d007      	beq.n	800a886 <HAL_GPIO_Init+0x42>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	4a98      	ldr	r2, [pc, #608]	; (800aadc <HAL_GPIO_Init+0x298>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d003      	beq.n	800a886 <HAL_GPIO_Init+0x42>
 800a87e:	21bd      	movs	r1, #189	; 0xbd
 800a880:	4897      	ldr	r0, [pc, #604]	; (800aae0 <HAL_GPIO_Init+0x29c>)
 800a882:	f7fe fe5b 	bl	800953c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d005      	beq.n	800a89c <HAL_GPIO_Init+0x58>
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	0c1b      	lsrs	r3, r3, #16
 800a896:	041b      	lsls	r3, r3, #16
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d003      	beq.n	800a8a4 <HAL_GPIO_Init+0x60>
 800a89c:	21be      	movs	r1, #190	; 0xbe
 800a89e:	4890      	ldr	r0, [pc, #576]	; (800aae0 <HAL_GPIO_Init+0x29c>)
 800a8a0:	f7fe fe4c 	bl	800953c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	f000 81eb 	beq.w	800ac84 <HAL_GPIO_Init+0x440>
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	f000 81e6 	beq.w	800ac84 <HAL_GPIO_Init+0x440>
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	2b11      	cmp	r3, #17
 800a8be:	f000 81e1 	beq.w	800ac84 <HAL_GPIO_Init+0x440>
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	2b02      	cmp	r3, #2
 800a8c8:	f000 81dc 	beq.w	800ac84 <HAL_GPIO_Init+0x440>
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	2b12      	cmp	r3, #18
 800a8d2:	f000 81d7 	beq.w	800ac84 <HAL_GPIO_Init+0x440>
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	4a82      	ldr	r2, [pc, #520]	; (800aae4 <HAL_GPIO_Init+0x2a0>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	f000 81d1 	beq.w	800ac84 <HAL_GPIO_Init+0x440>
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	4a80      	ldr	r2, [pc, #512]	; (800aae8 <HAL_GPIO_Init+0x2a4>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	f000 81cb 	beq.w	800ac84 <HAL_GPIO_Init+0x440>
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	4a7e      	ldr	r2, [pc, #504]	; (800aaec <HAL_GPIO_Init+0x2a8>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	f000 81c5 	beq.w	800ac84 <HAL_GPIO_Init+0x440>
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	4a7c      	ldr	r2, [pc, #496]	; (800aaf0 <HAL_GPIO_Init+0x2ac>)
 800a900:	4293      	cmp	r3, r2
 800a902:	f000 81bf 	beq.w	800ac84 <HAL_GPIO_Init+0x440>
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	4a7a      	ldr	r2, [pc, #488]	; (800aaf4 <HAL_GPIO_Init+0x2b0>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	f000 81b9 	beq.w	800ac84 <HAL_GPIO_Init+0x440>
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	685b      	ldr	r3, [r3, #4]
 800a916:	4a78      	ldr	r2, [pc, #480]	; (800aaf8 <HAL_GPIO_Init+0x2b4>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	f000 81b3 	beq.w	800ac84 <HAL_GPIO_Init+0x440>
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	2b03      	cmp	r3, #3
 800a924:	f000 81ae 	beq.w	800ac84 <HAL_GPIO_Init+0x440>
 800a928:	21bf      	movs	r1, #191	; 0xbf
 800a92a:	486d      	ldr	r0, [pc, #436]	; (800aae0 <HAL_GPIO_Init+0x29c>)
 800a92c:	f7fe fe06 	bl	800953c <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a930:	e1a8      	b.n	800ac84 <HAL_GPIO_Init+0x440>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800a932:	2201      	movs	r2, #1
 800a934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a936:	fa02 f303 	lsl.w	r3, r2, r3
 800a93a:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	69fa      	ldr	r2, [r7, #28]
 800a942:	4013      	ands	r3, r2
 800a944:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800a946:	69ba      	ldr	r2, [r7, #24]
 800a948:	69fb      	ldr	r3, [r7, #28]
 800a94a:	429a      	cmp	r2, r3
 800a94c:	f040 8197 	bne.w	800ac7e <HAL_GPIO_Init+0x43a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	4a5e      	ldr	r2, [pc, #376]	; (800aacc <HAL_GPIO_Init+0x288>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d013      	beq.n	800a980 <HAL_GPIO_Init+0x13c>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	4a5d      	ldr	r2, [pc, #372]	; (800aad0 <HAL_GPIO_Init+0x28c>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d00f      	beq.n	800a980 <HAL_GPIO_Init+0x13c>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	4a5c      	ldr	r2, [pc, #368]	; (800aad4 <HAL_GPIO_Init+0x290>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d00b      	beq.n	800a980 <HAL_GPIO_Init+0x13c>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	4a5b      	ldr	r2, [pc, #364]	; (800aad8 <HAL_GPIO_Init+0x294>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d007      	beq.n	800a980 <HAL_GPIO_Init+0x13c>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	4a5a      	ldr	r2, [pc, #360]	; (800aadc <HAL_GPIO_Init+0x298>)
 800a974:	4293      	cmp	r3, r2
 800a976:	d003      	beq.n	800a980 <HAL_GPIO_Init+0x13c>
 800a978:	21cd      	movs	r1, #205	; 0xcd
 800a97a:	4859      	ldr	r0, [pc, #356]	; (800aae0 <HAL_GPIO_Init+0x29c>)
 800a97c:	f7fe fdde 	bl	800953c <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	2b12      	cmp	r3, #18
 800a986:	d065      	beq.n	800aa54 <HAL_GPIO_Init+0x210>
 800a988:	2b12      	cmp	r3, #18
 800a98a:	d80e      	bhi.n	800a9aa <HAL_GPIO_Init+0x166>
 800a98c:	2b02      	cmp	r3, #2
 800a98e:	d04c      	beq.n	800aa2a <HAL_GPIO_Init+0x1e6>
 800a990:	2b02      	cmp	r3, #2
 800a992:	d804      	bhi.n	800a99e <HAL_GPIO_Init+0x15a>
 800a994:	2b00      	cmp	r3, #0
 800a996:	d072      	beq.n	800aa7e <HAL_GPIO_Init+0x23a>
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d01d      	beq.n	800a9d8 <HAL_GPIO_Init+0x194>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800a99c:	e0b1      	b.n	800ab02 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800a99e:	2b03      	cmp	r3, #3
 800a9a0:	f000 80ac 	beq.w	800aafc <HAL_GPIO_Init+0x2b8>
 800a9a4:	2b11      	cmp	r3, #17
 800a9a6:	d02b      	beq.n	800aa00 <HAL_GPIO_Init+0x1bc>
          break;
 800a9a8:	e0ab      	b.n	800ab02 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800a9aa:	4a4f      	ldr	r2, [pc, #316]	; (800aae8 <HAL_GPIO_Init+0x2a4>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d066      	beq.n	800aa7e <HAL_GPIO_Init+0x23a>
 800a9b0:	4a4d      	ldr	r2, [pc, #308]	; (800aae8 <HAL_GPIO_Init+0x2a4>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d806      	bhi.n	800a9c4 <HAL_GPIO_Init+0x180>
 800a9b6:	4a4b      	ldr	r2, [pc, #300]	; (800aae4 <HAL_GPIO_Init+0x2a0>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d060      	beq.n	800aa7e <HAL_GPIO_Init+0x23a>
 800a9bc:	4a4c      	ldr	r2, [pc, #304]	; (800aaf0 <HAL_GPIO_Init+0x2ac>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d05d      	beq.n	800aa7e <HAL_GPIO_Init+0x23a>
          break;
 800a9c2:	e09e      	b.n	800ab02 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800a9c4:	4a49      	ldr	r2, [pc, #292]	; (800aaec <HAL_GPIO_Init+0x2a8>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d059      	beq.n	800aa7e <HAL_GPIO_Init+0x23a>
 800a9ca:	4a4b      	ldr	r2, [pc, #300]	; (800aaf8 <HAL_GPIO_Init+0x2b4>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d056      	beq.n	800aa7e <HAL_GPIO_Init+0x23a>
 800a9d0:	4a48      	ldr	r2, [pc, #288]	; (800aaf4 <HAL_GPIO_Init+0x2b0>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d053      	beq.n	800aa7e <HAL_GPIO_Init+0x23a>
          break;
 800a9d6:	e094      	b.n	800ab02 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	2b02      	cmp	r3, #2
 800a9de:	d00b      	beq.n	800a9f8 <HAL_GPIO_Init+0x1b4>
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d007      	beq.n	800a9f8 <HAL_GPIO_Init+0x1b4>
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	68db      	ldr	r3, [r3, #12]
 800a9ec:	2b03      	cmp	r3, #3
 800a9ee:	d003      	beq.n	800a9f8 <HAL_GPIO_Init+0x1b4>
 800a9f0:	21d5      	movs	r1, #213	; 0xd5
 800a9f2:	483b      	ldr	r0, [pc, #236]	; (800aae0 <HAL_GPIO_Init+0x29c>)
 800a9f4:	f7fe fda2 	bl	800953c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	623b      	str	r3, [r7, #32]
          break;
 800a9fe:	e080      	b.n	800ab02 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	2b02      	cmp	r3, #2
 800aa06:	d00b      	beq.n	800aa20 <HAL_GPIO_Init+0x1dc>
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	68db      	ldr	r3, [r3, #12]
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d007      	beq.n	800aa20 <HAL_GPIO_Init+0x1dc>
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	2b03      	cmp	r3, #3
 800aa16:	d003      	beq.n	800aa20 <HAL_GPIO_Init+0x1dc>
 800aa18:	21dc      	movs	r1, #220	; 0xdc
 800aa1a:	4831      	ldr	r0, [pc, #196]	; (800aae0 <HAL_GPIO_Init+0x29c>)
 800aa1c:	f7fe fd8e 	bl	800953c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	68db      	ldr	r3, [r3, #12]
 800aa24:	3304      	adds	r3, #4
 800aa26:	623b      	str	r3, [r7, #32]
          break;
 800aa28:	e06b      	b.n	800ab02 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	68db      	ldr	r3, [r3, #12]
 800aa2e:	2b02      	cmp	r3, #2
 800aa30:	d00b      	beq.n	800aa4a <HAL_GPIO_Init+0x206>
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d007      	beq.n	800aa4a <HAL_GPIO_Init+0x206>
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	68db      	ldr	r3, [r3, #12]
 800aa3e:	2b03      	cmp	r3, #3
 800aa40:	d003      	beq.n	800aa4a <HAL_GPIO_Init+0x206>
 800aa42:	21e3      	movs	r1, #227	; 0xe3
 800aa44:	4826      	ldr	r0, [pc, #152]	; (800aae0 <HAL_GPIO_Init+0x29c>)
 800aa46:	f7fe fd79 	bl	800953c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	3308      	adds	r3, #8
 800aa50:	623b      	str	r3, [r7, #32]
          break;
 800aa52:	e056      	b.n	800ab02 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	68db      	ldr	r3, [r3, #12]
 800aa58:	2b02      	cmp	r3, #2
 800aa5a:	d00b      	beq.n	800aa74 <HAL_GPIO_Init+0x230>
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	68db      	ldr	r3, [r3, #12]
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d007      	beq.n	800aa74 <HAL_GPIO_Init+0x230>
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	68db      	ldr	r3, [r3, #12]
 800aa68:	2b03      	cmp	r3, #3
 800aa6a:	d003      	beq.n	800aa74 <HAL_GPIO_Init+0x230>
 800aa6c:	21ea      	movs	r1, #234	; 0xea
 800aa6e:	481c      	ldr	r0, [pc, #112]	; (800aae0 <HAL_GPIO_Init+0x29c>)
 800aa70:	f7fe fd64 	bl	800953c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	68db      	ldr	r3, [r3, #12]
 800aa78:	330c      	adds	r3, #12
 800aa7a:	623b      	str	r3, [r7, #32]
          break;
 800aa7c:	e041      	b.n	800ab02 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	689b      	ldr	r3, [r3, #8]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d00b      	beq.n	800aa9e <HAL_GPIO_Init+0x25a>
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	689b      	ldr	r3, [r3, #8]
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d007      	beq.n	800aa9e <HAL_GPIO_Init+0x25a>
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	689b      	ldr	r3, [r3, #8]
 800aa92:	2b02      	cmp	r3, #2
 800aa94:	d003      	beq.n	800aa9e <HAL_GPIO_Init+0x25a>
 800aa96:	21f7      	movs	r1, #247	; 0xf7
 800aa98:	4811      	ldr	r0, [pc, #68]	; (800aae0 <HAL_GPIO_Init+0x29c>)
 800aa9a:	f7fe fd4f 	bl	800953c <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	689b      	ldr	r3, [r3, #8]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d102      	bne.n	800aaac <HAL_GPIO_Init+0x268>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800aaa6:	2304      	movs	r3, #4
 800aaa8:	623b      	str	r3, [r7, #32]
          break;
 800aaaa:	e02a      	b.n	800ab02 <HAL_GPIO_Init+0x2be>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	689b      	ldr	r3, [r3, #8]
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d105      	bne.n	800aac0 <HAL_GPIO_Init+0x27c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800aab4:	2308      	movs	r3, #8
 800aab6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	69fa      	ldr	r2, [r7, #28]
 800aabc:	611a      	str	r2, [r3, #16]
          break;
 800aabe:	e020      	b.n	800ab02 <HAL_GPIO_Init+0x2be>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800aac0:	2308      	movs	r3, #8
 800aac2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	69fa      	ldr	r2, [r7, #28]
 800aac8:	615a      	str	r2, [r3, #20]
          break;
 800aaca:	e01a      	b.n	800ab02 <HAL_GPIO_Init+0x2be>
 800aacc:	40010800 	.word	0x40010800
 800aad0:	40010c00 	.word	0x40010c00
 800aad4:	40011000 	.word	0x40011000
 800aad8:	40011400 	.word	0x40011400
 800aadc:	40011800 	.word	0x40011800
 800aae0:	0800f8bc 	.word	0x0800f8bc
 800aae4:	10110000 	.word	0x10110000
 800aae8:	10210000 	.word	0x10210000
 800aaec:	10310000 	.word	0x10310000
 800aaf0:	10120000 	.word	0x10120000
 800aaf4:	10220000 	.word	0x10220000
 800aaf8:	10320000 	.word	0x10320000
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800aafc:	2300      	movs	r3, #0
 800aafe:	623b      	str	r3, [r7, #32]
          break;
 800ab00:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800ab02:	69bb      	ldr	r3, [r7, #24]
 800ab04:	2bff      	cmp	r3, #255	; 0xff
 800ab06:	d801      	bhi.n	800ab0c <HAL_GPIO_Init+0x2c8>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	e001      	b.n	800ab10 <HAL_GPIO_Init+0x2cc>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	3304      	adds	r3, #4
 800ab10:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800ab12:	69bb      	ldr	r3, [r7, #24]
 800ab14:	2bff      	cmp	r3, #255	; 0xff
 800ab16:	d802      	bhi.n	800ab1e <HAL_GPIO_Init+0x2da>
 800ab18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	e002      	b.n	800ab24 <HAL_GPIO_Init+0x2e0>
 800ab1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab20:	3b08      	subs	r3, #8
 800ab22:	009b      	lsls	r3, r3, #2
 800ab24:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	681a      	ldr	r2, [r3, #0]
 800ab2a:	210f      	movs	r1, #15
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	fa01 f303 	lsl.w	r3, r1, r3
 800ab32:	43db      	mvns	r3, r3
 800ab34:	401a      	ands	r2, r3
 800ab36:	6a39      	ldr	r1, [r7, #32]
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	fa01 f303 	lsl.w	r3, r1, r3
 800ab3e:	431a      	orrs	r2, r3
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	f000 8096 	beq.w	800ac7e <HAL_GPIO_Init+0x43a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800ab52:	4b52      	ldr	r3, [pc, #328]	; (800ac9c <HAL_GPIO_Init+0x458>)
 800ab54:	699b      	ldr	r3, [r3, #24]
 800ab56:	4a51      	ldr	r2, [pc, #324]	; (800ac9c <HAL_GPIO_Init+0x458>)
 800ab58:	f043 0301 	orr.w	r3, r3, #1
 800ab5c:	6193      	str	r3, [r2, #24]
 800ab5e:	4b4f      	ldr	r3, [pc, #316]	; (800ac9c <HAL_GPIO_Init+0x458>)
 800ab60:	699b      	ldr	r3, [r3, #24]
 800ab62:	f003 0301 	and.w	r3, r3, #1
 800ab66:	60bb      	str	r3, [r7, #8]
 800ab68:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800ab6a:	4a4d      	ldr	r2, [pc, #308]	; (800aca0 <HAL_GPIO_Init+0x45c>)
 800ab6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6e:	089b      	lsrs	r3, r3, #2
 800ab70:	3302      	adds	r3, #2
 800ab72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab76:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800ab78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab7a:	f003 0303 	and.w	r3, r3, #3
 800ab7e:	009b      	lsls	r3, r3, #2
 800ab80:	220f      	movs	r2, #15
 800ab82:	fa02 f303 	lsl.w	r3, r2, r3
 800ab86:	43db      	mvns	r3, r3
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	4013      	ands	r3, r2
 800ab8c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	4a44      	ldr	r2, [pc, #272]	; (800aca4 <HAL_GPIO_Init+0x460>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d013      	beq.n	800abbe <HAL_GPIO_Init+0x37a>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	4a43      	ldr	r2, [pc, #268]	; (800aca8 <HAL_GPIO_Init+0x464>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d00d      	beq.n	800abba <HAL_GPIO_Init+0x376>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	4a42      	ldr	r2, [pc, #264]	; (800acac <HAL_GPIO_Init+0x468>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d007      	beq.n	800abb6 <HAL_GPIO_Init+0x372>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	4a41      	ldr	r2, [pc, #260]	; (800acb0 <HAL_GPIO_Init+0x46c>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d101      	bne.n	800abb2 <HAL_GPIO_Init+0x36e>
 800abae:	2303      	movs	r3, #3
 800abb0:	e006      	b.n	800abc0 <HAL_GPIO_Init+0x37c>
 800abb2:	2304      	movs	r3, #4
 800abb4:	e004      	b.n	800abc0 <HAL_GPIO_Init+0x37c>
 800abb6:	2302      	movs	r3, #2
 800abb8:	e002      	b.n	800abc0 <HAL_GPIO_Init+0x37c>
 800abba:	2301      	movs	r3, #1
 800abbc:	e000      	b.n	800abc0 <HAL_GPIO_Init+0x37c>
 800abbe:	2300      	movs	r3, #0
 800abc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abc2:	f002 0203 	and.w	r2, r2, #3
 800abc6:	0092      	lsls	r2, r2, #2
 800abc8:	4093      	lsls	r3, r2
 800abca:	68fa      	ldr	r2, [r7, #12]
 800abcc:	4313      	orrs	r3, r2
 800abce:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800abd0:	4933      	ldr	r1, [pc, #204]	; (800aca0 <HAL_GPIO_Init+0x45c>)
 800abd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd4:	089b      	lsrs	r3, r3, #2
 800abd6:	3302      	adds	r3, #2
 800abd8:	68fa      	ldr	r2, [r7, #12]
 800abda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d006      	beq.n	800abf8 <HAL_GPIO_Init+0x3b4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800abea:	4b32      	ldr	r3, [pc, #200]	; (800acb4 <HAL_GPIO_Init+0x470>)
 800abec:	681a      	ldr	r2, [r3, #0]
 800abee:	4931      	ldr	r1, [pc, #196]	; (800acb4 <HAL_GPIO_Init+0x470>)
 800abf0:	69bb      	ldr	r3, [r7, #24]
 800abf2:	4313      	orrs	r3, r2
 800abf4:	600b      	str	r3, [r1, #0]
 800abf6:	e006      	b.n	800ac06 <HAL_GPIO_Init+0x3c2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800abf8:	4b2e      	ldr	r3, [pc, #184]	; (800acb4 <HAL_GPIO_Init+0x470>)
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	43db      	mvns	r3, r3
 800ac00:	492c      	ldr	r1, [pc, #176]	; (800acb4 <HAL_GPIO_Init+0x470>)
 800ac02:	4013      	ands	r3, r2
 800ac04:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d006      	beq.n	800ac20 <HAL_GPIO_Init+0x3dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800ac12:	4b28      	ldr	r3, [pc, #160]	; (800acb4 <HAL_GPIO_Init+0x470>)
 800ac14:	685a      	ldr	r2, [r3, #4]
 800ac16:	4927      	ldr	r1, [pc, #156]	; (800acb4 <HAL_GPIO_Init+0x470>)
 800ac18:	69bb      	ldr	r3, [r7, #24]
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	604b      	str	r3, [r1, #4]
 800ac1e:	e006      	b.n	800ac2e <HAL_GPIO_Init+0x3ea>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800ac20:	4b24      	ldr	r3, [pc, #144]	; (800acb4 <HAL_GPIO_Init+0x470>)
 800ac22:	685a      	ldr	r2, [r3, #4]
 800ac24:	69bb      	ldr	r3, [r7, #24]
 800ac26:	43db      	mvns	r3, r3
 800ac28:	4922      	ldr	r1, [pc, #136]	; (800acb4 <HAL_GPIO_Init+0x470>)
 800ac2a:	4013      	ands	r3, r2
 800ac2c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d006      	beq.n	800ac48 <HAL_GPIO_Init+0x404>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800ac3a:	4b1e      	ldr	r3, [pc, #120]	; (800acb4 <HAL_GPIO_Init+0x470>)
 800ac3c:	689a      	ldr	r2, [r3, #8]
 800ac3e:	491d      	ldr	r1, [pc, #116]	; (800acb4 <HAL_GPIO_Init+0x470>)
 800ac40:	69bb      	ldr	r3, [r7, #24]
 800ac42:	4313      	orrs	r3, r2
 800ac44:	608b      	str	r3, [r1, #8]
 800ac46:	e006      	b.n	800ac56 <HAL_GPIO_Init+0x412>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800ac48:	4b1a      	ldr	r3, [pc, #104]	; (800acb4 <HAL_GPIO_Init+0x470>)
 800ac4a:	689a      	ldr	r2, [r3, #8]
 800ac4c:	69bb      	ldr	r3, [r7, #24]
 800ac4e:	43db      	mvns	r3, r3
 800ac50:	4918      	ldr	r1, [pc, #96]	; (800acb4 <HAL_GPIO_Init+0x470>)
 800ac52:	4013      	ands	r3, r2
 800ac54:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d006      	beq.n	800ac70 <HAL_GPIO_Init+0x42c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800ac62:	4b14      	ldr	r3, [pc, #80]	; (800acb4 <HAL_GPIO_Init+0x470>)
 800ac64:	68da      	ldr	r2, [r3, #12]
 800ac66:	4913      	ldr	r1, [pc, #76]	; (800acb4 <HAL_GPIO_Init+0x470>)
 800ac68:	69bb      	ldr	r3, [r7, #24]
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	60cb      	str	r3, [r1, #12]
 800ac6e:	e006      	b.n	800ac7e <HAL_GPIO_Init+0x43a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800ac70:	4b10      	ldr	r3, [pc, #64]	; (800acb4 <HAL_GPIO_Init+0x470>)
 800ac72:	68da      	ldr	r2, [r3, #12]
 800ac74:	69bb      	ldr	r3, [r7, #24]
 800ac76:	43db      	mvns	r3, r3
 800ac78:	490e      	ldr	r1, [pc, #56]	; (800acb4 <HAL_GPIO_Init+0x470>)
 800ac7a:	4013      	ands	r3, r2
 800ac7c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800ac7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac80:	3301      	adds	r3, #1
 800ac82:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8a:	fa22 f303 	lsr.w	r3, r2, r3
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	f47f ae4f 	bne.w	800a932 <HAL_GPIO_Init+0xee>
  }
}
 800ac94:	bf00      	nop
 800ac96:	3728      	adds	r7, #40	; 0x28
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}
 800ac9c:	40021000 	.word	0x40021000
 800aca0:	40010000 	.word	0x40010000
 800aca4:	40010800 	.word	0x40010800
 800aca8:	40010c00 	.word	0x40010c00
 800acac:	40011000 	.word	0x40011000
 800acb0:	40011400 	.word	0x40011400
 800acb4:	40010400 	.word	0x40010400

0800acb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	460b      	mov	r3, r1
 800acc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800acc4:	887b      	ldrh	r3, [r7, #2]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d004      	beq.n	800acd4 <HAL_GPIO_ReadPin+0x1c>
 800acca:	887b      	ldrh	r3, [r7, #2]
 800accc:	0c1b      	lsrs	r3, r3, #16
 800acce:	041b      	lsls	r3, r3, #16
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d004      	beq.n	800acde <HAL_GPIO_ReadPin+0x26>
 800acd4:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800acd8:	4809      	ldr	r0, [pc, #36]	; (800ad00 <HAL_GPIO_ReadPin+0x48>)
 800acda:	f7fe fc2f 	bl	800953c <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	689a      	ldr	r2, [r3, #8]
 800ace2:	887b      	ldrh	r3, [r7, #2]
 800ace4:	4013      	ands	r3, r2
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d002      	beq.n	800acf0 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 800acea:	2301      	movs	r3, #1
 800acec:	73fb      	strb	r3, [r7, #15]
 800acee:	e001      	b.n	800acf4 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800acf0:	2300      	movs	r3, #0
 800acf2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800acf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	0800f8bc 	.word	0x0800f8bc

0800ad04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b082      	sub	sp, #8
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	807b      	strh	r3, [r7, #2]
 800ad10:	4613      	mov	r3, r2
 800ad12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800ad14:	887b      	ldrh	r3, [r7, #2]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d004      	beq.n	800ad24 <HAL_GPIO_WritePin+0x20>
 800ad1a:	887b      	ldrh	r3, [r7, #2]
 800ad1c:	0c1b      	lsrs	r3, r3, #16
 800ad1e:	041b      	lsls	r3, r3, #16
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d004      	beq.n	800ad2e <HAL_GPIO_WritePin+0x2a>
 800ad24:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800ad28:	480e      	ldr	r0, [pc, #56]	; (800ad64 <HAL_GPIO_WritePin+0x60>)
 800ad2a:	f7fe fc07 	bl	800953c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800ad2e:	787b      	ldrb	r3, [r7, #1]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d007      	beq.n	800ad44 <HAL_GPIO_WritePin+0x40>
 800ad34:	787b      	ldrb	r3, [r7, #1]
 800ad36:	2b01      	cmp	r3, #1
 800ad38:	d004      	beq.n	800ad44 <HAL_GPIO_WritePin+0x40>
 800ad3a:	f240 11d5 	movw	r1, #469	; 0x1d5
 800ad3e:	4809      	ldr	r0, [pc, #36]	; (800ad64 <HAL_GPIO_WritePin+0x60>)
 800ad40:	f7fe fbfc 	bl	800953c <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800ad44:	787b      	ldrb	r3, [r7, #1]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d003      	beq.n	800ad52 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ad4a:	887a      	ldrh	r2, [r7, #2]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800ad50:	e003      	b.n	800ad5a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800ad52:	887b      	ldrh	r3, [r7, #2]
 800ad54:	041a      	lsls	r2, r3, #16
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	611a      	str	r2, [r3, #16]
}
 800ad5a:	bf00      	nop
 800ad5c:	3708      	adds	r7, #8
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	0800f8bc 	.word	0x0800f8bc

0800ad68 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	460b      	mov	r3, r1
 800ad72:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800ad74:	887b      	ldrh	r3, [r7, #2]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d004      	beq.n	800ad84 <HAL_GPIO_TogglePin+0x1c>
 800ad7a:	887b      	ldrh	r3, [r7, #2]
 800ad7c:	0c1b      	lsrs	r3, r3, #16
 800ad7e:	041b      	lsls	r3, r3, #16
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d004      	beq.n	800ad8e <HAL_GPIO_TogglePin+0x26>
 800ad84:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 800ad88:	4809      	ldr	r0, [pc, #36]	; (800adb0 <HAL_GPIO_TogglePin+0x48>)
 800ad8a:	f7fe fbd7 	bl	800953c <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	68da      	ldr	r2, [r3, #12]
 800ad92:	887b      	ldrh	r3, [r7, #2]
 800ad94:	4013      	ands	r3, r2
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d003      	beq.n	800ada2 <HAL_GPIO_TogglePin+0x3a>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800ad9a:	887a      	ldrh	r2, [r7, #2]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800ada0:	e002      	b.n	800ada8 <HAL_GPIO_TogglePin+0x40>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800ada2:	887a      	ldrh	r2, [r7, #2]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	611a      	str	r2, [r3, #16]
}
 800ada8:	bf00      	nop
 800adaa:	3708      	adds	r7, #8
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}
 800adb0:	0800f8bc 	.word	0x0800f8bc

0800adb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b084      	sub	sp, #16
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d101      	bne.n	800adc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800adc2:	2301      	movs	r3, #1
 800adc4:	e1ab      	b.n	800b11e <HAL_I2C_Init+0x36a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4aa0      	ldr	r2, [pc, #640]	; (800b04c <HAL_I2C_Init+0x298>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d009      	beq.n	800ade4 <HAL_I2C_Init+0x30>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4a9e      	ldr	r2, [pc, #632]	; (800b050 <HAL_I2C_Init+0x29c>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d004      	beq.n	800ade4 <HAL_I2C_Init+0x30>
 800adda:	f240 11d1 	movw	r1, #465	; 0x1d1
 800adde:	489d      	ldr	r0, [pc, #628]	; (800b054 <HAL_I2C_Init+0x2a0>)
 800ade0:	f7fe fbac 	bl	800953c <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d004      	beq.n	800adf6 <HAL_I2C_Init+0x42>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	4a99      	ldr	r2, [pc, #612]	; (800b058 <HAL_I2C_Init+0x2a4>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d904      	bls.n	800ae00 <HAL_I2C_Init+0x4c>
 800adf6:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800adfa:	4896      	ldr	r0, [pc, #600]	; (800b054 <HAL_I2C_Init+0x2a0>)
 800adfc:	f7fe fb9e 	bl	800953c <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	689b      	ldr	r3, [r3, #8]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d009      	beq.n	800ae1c <HAL_I2C_Init+0x68>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	689b      	ldr	r3, [r3, #8]
 800ae0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae10:	d004      	beq.n	800ae1c <HAL_I2C_Init+0x68>
 800ae12:	f240 11d3 	movw	r1, #467	; 0x1d3
 800ae16:	488f      	ldr	r0, [pc, #572]	; (800b054 <HAL_I2C_Init+0x2a0>)
 800ae18:	f7fe fb90 	bl	800953c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	68db      	ldr	r3, [r3, #12]
 800ae20:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ae24:	f023 0303 	bic.w	r3, r3, #3
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d004      	beq.n	800ae36 <HAL_I2C_Init+0x82>
 800ae2c:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800ae30:	4888      	ldr	r0, [pc, #544]	; (800b054 <HAL_I2C_Init+0x2a0>)
 800ae32:	f7fe fb83 	bl	800953c <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	691b      	ldr	r3, [r3, #16]
 800ae3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae3e:	d009      	beq.n	800ae54 <HAL_I2C_Init+0xa0>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	691b      	ldr	r3, [r3, #16]
 800ae44:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ae48:	d004      	beq.n	800ae54 <HAL_I2C_Init+0xa0>
 800ae4a:	f240 11d5 	movw	r1, #469	; 0x1d5
 800ae4e:	4881      	ldr	r0, [pc, #516]	; (800b054 <HAL_I2C_Init+0x2a0>)
 800ae50:	f7fe fb74 	bl	800953c <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	695b      	ldr	r3, [r3, #20]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d008      	beq.n	800ae6e <HAL_I2C_Init+0xba>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	695b      	ldr	r3, [r3, #20]
 800ae60:	2b01      	cmp	r3, #1
 800ae62:	d004      	beq.n	800ae6e <HAL_I2C_Init+0xba>
 800ae64:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 800ae68:	487a      	ldr	r0, [pc, #488]	; (800b054 <HAL_I2C_Init+0x2a0>)
 800ae6a:	f7fe fb67 	bl	800953c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	699b      	ldr	r3, [r3, #24]
 800ae72:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d004      	beq.n	800ae84 <HAL_I2C_Init+0xd0>
 800ae7a:	f240 11d7 	movw	r1, #471	; 0x1d7
 800ae7e:	4875      	ldr	r0, [pc, #468]	; (800b054 <HAL_I2C_Init+0x2a0>)
 800ae80:	f7fe fb5c 	bl	800953c <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	69db      	ldr	r3, [r3, #28]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d008      	beq.n	800ae9e <HAL_I2C_Init+0xea>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	69db      	ldr	r3, [r3, #28]
 800ae90:	2b40      	cmp	r3, #64	; 0x40
 800ae92:	d004      	beq.n	800ae9e <HAL_I2C_Init+0xea>
 800ae94:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800ae98:	486e      	ldr	r0, [pc, #440]	; (800b054 <HAL_I2C_Init+0x2a0>)
 800ae9a:	f7fe fb4f 	bl	800953c <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6a1b      	ldr	r3, [r3, #32]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d008      	beq.n	800aeb8 <HAL_I2C_Init+0x104>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6a1b      	ldr	r3, [r3, #32]
 800aeaa:	2b80      	cmp	r3, #128	; 0x80
 800aeac:	d004      	beq.n	800aeb8 <HAL_I2C_Init+0x104>
 800aeae:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aeb2:	4868      	ldr	r0, [pc, #416]	; (800b054 <HAL_I2C_Init+0x2a0>)
 800aeb4:	f7fe fb42 	bl	800953c <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aebe:	b2db      	uxtb	r3, r3
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d106      	bne.n	800aed2 <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2200      	movs	r2, #0
 800aec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f7fe fa3f 	bl	8009350 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2224      	movs	r2, #36	; 0x24
 800aed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f022 0201 	bic.w	r2, r2, #1
 800aee8:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aef8:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800af08:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800af0a:	f001 fcfd 	bl	800c908 <HAL_RCC_GetPCLK1Freq>
 800af0e:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	4a51      	ldr	r2, [pc, #324]	; (800b05c <HAL_I2C_Init+0x2a8>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d807      	bhi.n	800af2a <HAL_I2C_Init+0x176>
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	4a50      	ldr	r2, [pc, #320]	; (800b060 <HAL_I2C_Init+0x2ac>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	bf94      	ite	ls
 800af22:	2301      	movls	r3, #1
 800af24:	2300      	movhi	r3, #0
 800af26:	b2db      	uxtb	r3, r3
 800af28:	e006      	b.n	800af38 <HAL_I2C_Init+0x184>
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	4a4d      	ldr	r2, [pc, #308]	; (800b064 <HAL_I2C_Init+0x2b0>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	bf94      	ite	ls
 800af32:	2301      	movls	r3, #1
 800af34:	2300      	movhi	r3, #0
 800af36:	b2db      	uxtb	r3, r3
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d001      	beq.n	800af40 <HAL_I2C_Init+0x18c>
  {
    return HAL_ERROR;
 800af3c:	2301      	movs	r3, #1
 800af3e:	e0ee      	b.n	800b11e <HAL_I2C_Init+0x36a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	4a49      	ldr	r2, [pc, #292]	; (800b068 <HAL_I2C_Init+0x2b4>)
 800af44:	fba2 2303 	umull	r2, r3, r2, r3
 800af48:	0c9b      	lsrs	r3, r3, #18
 800af4a:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	68ba      	ldr	r2, [r7, #8]
 800af5c:	430a      	orrs	r2, r1
 800af5e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	6a1b      	ldr	r3, [r3, #32]
 800af66:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	4a3b      	ldr	r2, [pc, #236]	; (800b05c <HAL_I2C_Init+0x2a8>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d802      	bhi.n	800af7a <HAL_I2C_Init+0x1c6>
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	3301      	adds	r3, #1
 800af78:	e009      	b.n	800af8e <HAL_I2C_Init+0x1da>
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800af80:	fb02 f303 	mul.w	r3, r2, r3
 800af84:	4a39      	ldr	r2, [pc, #228]	; (800b06c <HAL_I2C_Init+0x2b8>)
 800af86:	fba2 2303 	umull	r2, r3, r2, r3
 800af8a:	099b      	lsrs	r3, r3, #6
 800af8c:	3301      	adds	r3, #1
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	6812      	ldr	r2, [r2, #0]
 800af92:	430b      	orrs	r3, r1
 800af94:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	69db      	ldr	r3, [r3, #28]
 800af9c:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800afa0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	492c      	ldr	r1, [pc, #176]	; (800b05c <HAL_I2C_Init+0x2a8>)
 800afaa:	428b      	cmp	r3, r1
 800afac:	d80d      	bhi.n	800afca <HAL_I2C_Init+0x216>
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	1e59      	subs	r1, r3, #1
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	005b      	lsls	r3, r3, #1
 800afb8:	fbb1 f3f3 	udiv	r3, r1, r3
 800afbc:	3301      	adds	r3, #1
 800afbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800afc2:	2b04      	cmp	r3, #4
 800afc4:	bf38      	it	cc
 800afc6:	2304      	movcc	r3, #4
 800afc8:	e062      	b.n	800b090 <HAL_I2C_Init+0x2dc>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	689b      	ldr	r3, [r3, #8]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d111      	bne.n	800aff6 <HAL_I2C_Init+0x242>
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	1e58      	subs	r0, r3, #1
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6859      	ldr	r1, [r3, #4]
 800afda:	460b      	mov	r3, r1
 800afdc:	005b      	lsls	r3, r3, #1
 800afde:	440b      	add	r3, r1
 800afe0:	fbb0 f3f3 	udiv	r3, r0, r3
 800afe4:	3301      	adds	r3, #1
 800afe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800afea:	2b00      	cmp	r3, #0
 800afec:	bf0c      	ite	eq
 800afee:	2301      	moveq	r3, #1
 800aff0:	2300      	movne	r3, #0
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	e012      	b.n	800b01c <HAL_I2C_Init+0x268>
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	1e58      	subs	r0, r3, #1
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6859      	ldr	r1, [r3, #4]
 800affe:	460b      	mov	r3, r1
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	440b      	add	r3, r1
 800b004:	0099      	lsls	r1, r3, #2
 800b006:	440b      	add	r3, r1
 800b008:	fbb0 f3f3 	udiv	r3, r0, r3
 800b00c:	3301      	adds	r3, #1
 800b00e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b012:	2b00      	cmp	r3, #0
 800b014:	bf0c      	ite	eq
 800b016:	2301      	moveq	r3, #1
 800b018:	2300      	movne	r3, #0
 800b01a:	b2db      	uxtb	r3, r3
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d001      	beq.n	800b024 <HAL_I2C_Init+0x270>
 800b020:	2301      	movs	r3, #1
 800b022:	e035      	b.n	800b090 <HAL_I2C_Init+0x2dc>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	689b      	ldr	r3, [r3, #8]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d121      	bne.n	800b070 <HAL_I2C_Init+0x2bc>
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	1e58      	subs	r0, r3, #1
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6859      	ldr	r1, [r3, #4]
 800b034:	460b      	mov	r3, r1
 800b036:	005b      	lsls	r3, r3, #1
 800b038:	440b      	add	r3, r1
 800b03a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b03e:	3301      	adds	r3, #1
 800b040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b048:	e022      	b.n	800b090 <HAL_I2C_Init+0x2dc>
 800b04a:	bf00      	nop
 800b04c:	40005400 	.word	0x40005400
 800b050:	40005800 	.word	0x40005800
 800b054:	0800f8f8 	.word	0x0800f8f8
 800b058:	00061a80 	.word	0x00061a80
 800b05c:	000186a0 	.word	0x000186a0
 800b060:	001e847f 	.word	0x001e847f
 800b064:	003d08ff 	.word	0x003d08ff
 800b068:	431bde83 	.word	0x431bde83
 800b06c:	10624dd3 	.word	0x10624dd3
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	1e58      	subs	r0, r3, #1
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6859      	ldr	r1, [r3, #4]
 800b078:	460b      	mov	r3, r1
 800b07a:	009b      	lsls	r3, r3, #2
 800b07c:	440b      	add	r3, r1
 800b07e:	0099      	lsls	r1, r3, #2
 800b080:	440b      	add	r3, r1
 800b082:	fbb0 f3f3 	udiv	r3, r0, r3
 800b086:	3301      	adds	r3, #1
 800b088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b08c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b090:	6879      	ldr	r1, [r7, #4]
 800b092:	6809      	ldr	r1, [r1, #0]
 800b094:	4313      	orrs	r3, r2
 800b096:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	69da      	ldr	r2, [r3, #28]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6a1b      	ldr	r3, [r3, #32]
 800b0aa:	431a      	orrs	r2, r3
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	430a      	orrs	r2, r1
 800b0b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	689b      	ldr	r3, [r3, #8]
 800b0ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b0be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	6911      	ldr	r1, [r2, #16]
 800b0c6:	687a      	ldr	r2, [r7, #4]
 800b0c8:	68d2      	ldr	r2, [r2, #12]
 800b0ca:	4311      	orrs	r1, r2
 800b0cc:	687a      	ldr	r2, [r7, #4]
 800b0ce:	6812      	ldr	r2, [r2, #0]
 800b0d0:	430b      	orrs	r3, r1
 800b0d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	68db      	ldr	r3, [r3, #12]
 800b0da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	695a      	ldr	r2, [r3, #20]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	699b      	ldr	r3, [r3, #24]
 800b0e6:	431a      	orrs	r2, r3
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	430a      	orrs	r2, r1
 800b0ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	681a      	ldr	r2, [r3, #0]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f042 0201 	orr.w	r2, r2, #1
 800b0fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2200      	movs	r2, #0
 800b104:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2220      	movs	r2, #32
 800b10a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2200      	movs	r2, #0
 800b112:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b11c:	2300      	movs	r3, #0
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3710      	adds	r7, #16
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop

0800b128 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b088      	sub	sp, #32
 800b12c:	af02      	add	r7, sp, #8
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	607a      	str	r2, [r7, #4]
 800b132:	461a      	mov	r2, r3
 800b134:	460b      	mov	r3, r1
 800b136:	817b      	strh	r3, [r7, #10]
 800b138:	4613      	mov	r3, r2
 800b13a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b13c:	f7fe fe24 	bl	8009d88 <HAL_GetTick>
 800b140:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b148:	b2db      	uxtb	r3, r3
 800b14a:	2b20      	cmp	r3, #32
 800b14c:	f040 80e0 	bne.w	800b310 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	9300      	str	r3, [sp, #0]
 800b154:	2319      	movs	r3, #25
 800b156:	2201      	movs	r2, #1
 800b158:	4970      	ldr	r1, [pc, #448]	; (800b31c <HAL_I2C_Master_Transmit+0x1f4>)
 800b15a:	68f8      	ldr	r0, [r7, #12]
 800b15c:	f000 fc8c 	bl	800ba78 <I2C_WaitOnFlagUntilTimeout>
 800b160:	4603      	mov	r3, r0
 800b162:	2b00      	cmp	r3, #0
 800b164:	d001      	beq.n	800b16a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b166:	2302      	movs	r3, #2
 800b168:	e0d3      	b.n	800b312 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b170:	2b01      	cmp	r3, #1
 800b172:	d101      	bne.n	800b178 <HAL_I2C_Master_Transmit+0x50>
 800b174:	2302      	movs	r3, #2
 800b176:	e0cc      	b.n	800b312 <HAL_I2C_Master_Transmit+0x1ea>
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2201      	movs	r2, #1
 800b17c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f003 0301 	and.w	r3, r3, #1
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d007      	beq.n	800b19e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	681a      	ldr	r2, [r3, #0]
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f042 0201 	orr.w	r2, r2, #1
 800b19c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b1ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2221      	movs	r2, #33	; 0x21
 800b1b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2210      	movs	r2, #16
 800b1ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	687a      	ldr	r2, [r7, #4]
 800b1c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	893a      	ldrh	r2, [r7, #8]
 800b1ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1d4:	b29a      	uxth	r2, r3
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	4a50      	ldr	r2, [pc, #320]	; (800b320 <HAL_I2C_Master_Transmit+0x1f8>)
 800b1de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b1e0:	8979      	ldrh	r1, [r7, #10]
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	6a3a      	ldr	r2, [r7, #32]
 800b1e6:	68f8      	ldr	r0, [r7, #12]
 800b1e8:	f000 faf6 	bl	800b7d8 <I2C_MasterRequestWrite>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d001      	beq.n	800b1f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	e08d      	b.n	800b312 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	613b      	str	r3, [r7, #16]
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	695b      	ldr	r3, [r3, #20]
 800b200:	613b      	str	r3, [r7, #16]
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	699b      	ldr	r3, [r3, #24]
 800b208:	613b      	str	r3, [r7, #16]
 800b20a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b20c:	e066      	b.n	800b2dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b20e:	697a      	ldr	r2, [r7, #20]
 800b210:	6a39      	ldr	r1, [r7, #32]
 800b212:	68f8      	ldr	r0, [r7, #12]
 800b214:	f000 fd06 	bl	800bc24 <I2C_WaitOnTXEFlagUntilTimeout>
 800b218:	4603      	mov	r3, r0
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d00d      	beq.n	800b23a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b222:	2b04      	cmp	r3, #4
 800b224:	d107      	bne.n	800b236 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	681a      	ldr	r2, [r3, #0]
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b234:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b236:	2301      	movs	r3, #1
 800b238:	e06b      	b.n	800b312 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b23e:	781a      	ldrb	r2, [r3, #0]
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b24a:	1c5a      	adds	r2, r3, #1
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b254:	b29b      	uxth	r3, r3
 800b256:	3b01      	subs	r3, #1
 800b258:	b29a      	uxth	r2, r3
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b262:	3b01      	subs	r3, #1
 800b264:	b29a      	uxth	r2, r3
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	695b      	ldr	r3, [r3, #20]
 800b270:	f003 0304 	and.w	r3, r3, #4
 800b274:	2b04      	cmp	r3, #4
 800b276:	d11b      	bne.n	800b2b0 <HAL_I2C_Master_Transmit+0x188>
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d017      	beq.n	800b2b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b284:	781a      	ldrb	r2, [r3, #0]
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b290:	1c5a      	adds	r2, r3, #1
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b29a:	b29b      	uxth	r3, r3
 800b29c:	3b01      	subs	r3, #1
 800b29e:	b29a      	uxth	r2, r3
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2a8:	3b01      	subs	r3, #1
 800b2aa:	b29a      	uxth	r2, r3
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b2b0:	697a      	ldr	r2, [r7, #20]
 800b2b2:	6a39      	ldr	r1, [r7, #32]
 800b2b4:	68f8      	ldr	r0, [r7, #12]
 800b2b6:	f000 fcf6 	bl	800bca6 <I2C_WaitOnBTFFlagUntilTimeout>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d00d      	beq.n	800b2dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2c4:	2b04      	cmp	r3, #4
 800b2c6:	d107      	bne.n	800b2d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	681a      	ldr	r2, [r3, #0]
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b2d8:	2301      	movs	r3, #1
 800b2da:	e01a      	b.n	800b312 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d194      	bne.n	800b20e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2220      	movs	r2, #32
 800b2f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2200      	movs	r2, #0
 800b300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2200      	movs	r2, #0
 800b308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b30c:	2300      	movs	r3, #0
 800b30e:	e000      	b.n	800b312 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b310:	2302      	movs	r3, #2
  }
}
 800b312:	4618      	mov	r0, r3
 800b314:	3718      	adds	r7, #24
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
 800b31a:	bf00      	nop
 800b31c:	00100002 	.word	0x00100002
 800b320:	ffff0000 	.word	0xffff0000

0800b324 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b08c      	sub	sp, #48	; 0x30
 800b328:	af02      	add	r7, sp, #8
 800b32a:	60f8      	str	r0, [r7, #12]
 800b32c:	607a      	str	r2, [r7, #4]
 800b32e:	461a      	mov	r2, r3
 800b330:	460b      	mov	r3, r1
 800b332:	817b      	strh	r3, [r7, #10]
 800b334:	4613      	mov	r3, r2
 800b336:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800b338:	2300      	movs	r3, #0
 800b33a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b33c:	f7fe fd24 	bl	8009d88 <HAL_GetTick>
 800b340:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b348:	b2db      	uxtb	r3, r3
 800b34a:	2b20      	cmp	r3, #32
 800b34c:	f040 8238 	bne.w	800b7c0 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b352:	9300      	str	r3, [sp, #0]
 800b354:	2319      	movs	r3, #25
 800b356:	2201      	movs	r2, #1
 800b358:	497e      	ldr	r1, [pc, #504]	; (800b554 <HAL_I2C_Master_Receive+0x230>)
 800b35a:	68f8      	ldr	r0, [r7, #12]
 800b35c:	f000 fb8c 	bl	800ba78 <I2C_WaitOnFlagUntilTimeout>
 800b360:	4603      	mov	r3, r0
 800b362:	2b00      	cmp	r3, #0
 800b364:	d001      	beq.n	800b36a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800b366:	2302      	movs	r3, #2
 800b368:	e22b      	b.n	800b7c2 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b370:	2b01      	cmp	r3, #1
 800b372:	d101      	bne.n	800b378 <HAL_I2C_Master_Receive+0x54>
 800b374:	2302      	movs	r3, #2
 800b376:	e224      	b.n	800b7c2 <HAL_I2C_Master_Receive+0x49e>
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2201      	movs	r2, #1
 800b37c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f003 0301 	and.w	r3, r3, #1
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	d007      	beq.n	800b39e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	681a      	ldr	r2, [r3, #0]
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f042 0201 	orr.w	r2, r2, #1
 800b39c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	681a      	ldr	r2, [r3, #0]
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b3ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2222      	movs	r2, #34	; 0x22
 800b3b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2210      	movs	r2, #16
 800b3ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	893a      	ldrh	r2, [r7, #8]
 800b3ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3d4:	b29a      	uxth	r2, r3
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	4a5e      	ldr	r2, [pc, #376]	; (800b558 <HAL_I2C_Master_Receive+0x234>)
 800b3de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b3e0:	8979      	ldrh	r1, [r7, #10]
 800b3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3e6:	68f8      	ldr	r0, [r7, #12]
 800b3e8:	f000 fa78 	bl	800b8dc <I2C_MasterRequestRead>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d001      	beq.n	800b3f6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	e1e5      	b.n	800b7c2 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d113      	bne.n	800b426 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b3fe:	2300      	movs	r3, #0
 800b400:	61fb      	str	r3, [r7, #28]
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	695b      	ldr	r3, [r3, #20]
 800b408:	61fb      	str	r3, [r7, #28]
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	699b      	ldr	r3, [r3, #24]
 800b410:	61fb      	str	r3, [r7, #28]
 800b412:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	681a      	ldr	r2, [r3, #0]
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b422:	601a      	str	r2, [r3, #0]
 800b424:	e1b9      	b.n	800b79a <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	d11d      	bne.n	800b46a <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	681a      	ldr	r2, [r3, #0]
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b43c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b43e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b440:	2300      	movs	r3, #0
 800b442:	61bb      	str	r3, [r7, #24]
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	695b      	ldr	r3, [r3, #20]
 800b44a:	61bb      	str	r3, [r7, #24]
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	699b      	ldr	r3, [r3, #24]
 800b452:	61bb      	str	r3, [r7, #24]
 800b454:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	681a      	ldr	r2, [r3, #0]
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b464:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800b466:	b662      	cpsie	i
 800b468:	e197      	b.n	800b79a <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b46e:	2b02      	cmp	r3, #2
 800b470:	d11d      	bne.n	800b4ae <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	681a      	ldr	r2, [r3, #0]
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b480:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b482:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b484:	2300      	movs	r3, #0
 800b486:	617b      	str	r3, [r7, #20]
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	695b      	ldr	r3, [r3, #20]
 800b48e:	617b      	str	r3, [r7, #20]
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	699b      	ldr	r3, [r3, #24]
 800b496:	617b      	str	r3, [r7, #20]
 800b498:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800b4aa:	b662      	cpsie	i
 800b4ac:	e175      	b.n	800b79a <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b4bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b4be:	2300      	movs	r3, #0
 800b4c0:	613b      	str	r3, [r7, #16]
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	695b      	ldr	r3, [r3, #20]
 800b4c8:	613b      	str	r3, [r7, #16]
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	699b      	ldr	r3, [r3, #24]
 800b4d0:	613b      	str	r3, [r7, #16]
 800b4d2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800b4d4:	e161      	b.n	800b79a <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4da:	2b03      	cmp	r3, #3
 800b4dc:	f200 811a 	bhi.w	800b714 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d123      	bne.n	800b530 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b4e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b4ec:	68f8      	ldr	r0, [r7, #12]
 800b4ee:	f000 fc1b 	bl	800bd28 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d001      	beq.n	800b4fc <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	e162      	b.n	800b7c2 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	691a      	ldr	r2, [r3, #16]
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b506:	b2d2      	uxtb	r2, r2
 800b508:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b50e:	1c5a      	adds	r2, r3, #1
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b518:	3b01      	subs	r3, #1
 800b51a:	b29a      	uxth	r2, r3
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b524:	b29b      	uxth	r3, r3
 800b526:	3b01      	subs	r3, #1
 800b528:	b29a      	uxth	r2, r3
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b52e:	e134      	b.n	800b79a <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b534:	2b02      	cmp	r3, #2
 800b536:	d150      	bne.n	800b5da <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53a:	9300      	str	r3, [sp, #0]
 800b53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53e:	2200      	movs	r2, #0
 800b540:	4906      	ldr	r1, [pc, #24]	; (800b55c <HAL_I2C_Master_Receive+0x238>)
 800b542:	68f8      	ldr	r0, [r7, #12]
 800b544:	f000 fa98 	bl	800ba78 <I2C_WaitOnFlagUntilTimeout>
 800b548:	4603      	mov	r3, r0
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d008      	beq.n	800b560 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 800b54e:	2301      	movs	r3, #1
 800b550:	e137      	b.n	800b7c2 <HAL_I2C_Master_Receive+0x49e>
 800b552:	bf00      	nop
 800b554:	00100002 	.word	0x00100002
 800b558:	ffff0000 	.word	0xffff0000
 800b55c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800b560:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	681a      	ldr	r2, [r3, #0]
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b570:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	691a      	ldr	r2, [r3, #16]
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b57c:	b2d2      	uxtb	r2, r2
 800b57e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b584:	1c5a      	adds	r2, r3, #1
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b58e:	3b01      	subs	r3, #1
 800b590:	b29a      	uxth	r2, r3
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b59a:	b29b      	uxth	r3, r3
 800b59c:	3b01      	subs	r3, #1
 800b59e:	b29a      	uxth	r2, r3
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800b5a4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	691a      	ldr	r2, [r3, #16]
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b0:	b2d2      	uxtb	r2, r2
 800b5b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b8:	1c5a      	adds	r2, r3, #1
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5c2:	3b01      	subs	r3, #1
 800b5c4:	b29a      	uxth	r2, r3
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5ce:	b29b      	uxth	r3, r3
 800b5d0:	3b01      	subs	r3, #1
 800b5d2:	b29a      	uxth	r2, r3
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b5d8:	e0df      	b.n	800b79a <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5dc:	9300      	str	r3, [sp, #0]
 800b5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	497a      	ldr	r1, [pc, #488]	; (800b7cc <HAL_I2C_Master_Receive+0x4a8>)
 800b5e4:	68f8      	ldr	r0, [r7, #12]
 800b5e6:	f000 fa47 	bl	800ba78 <I2C_WaitOnFlagUntilTimeout>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d001      	beq.n	800b5f4 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	e0e6      	b.n	800b7c2 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	681a      	ldr	r2, [r3, #0]
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b602:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b604:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	691a      	ldr	r2, [r3, #16]
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b610:	b2d2      	uxtb	r2, r2
 800b612:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b618:	1c5a      	adds	r2, r3, #1
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b622:	3b01      	subs	r3, #1
 800b624:	b29a      	uxth	r2, r3
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b62e:	b29b      	uxth	r3, r3
 800b630:	3b01      	subs	r3, #1
 800b632:	b29a      	uxth	r2, r3
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800b638:	4b65      	ldr	r3, [pc, #404]	; (800b7d0 <HAL_I2C_Master_Receive+0x4ac>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	08db      	lsrs	r3, r3, #3
 800b63e:	4a65      	ldr	r2, [pc, #404]	; (800b7d4 <HAL_I2C_Master_Receive+0x4b0>)
 800b640:	fba2 2303 	umull	r2, r3, r2, r3
 800b644:	0a1a      	lsrs	r2, r3, #8
 800b646:	4613      	mov	r3, r2
 800b648:	009b      	lsls	r3, r3, #2
 800b64a:	4413      	add	r3, r2
 800b64c:	00da      	lsls	r2, r3, #3
 800b64e:	1ad3      	subs	r3, r2, r3
 800b650:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800b652:	6a3b      	ldr	r3, [r7, #32]
 800b654:	3b01      	subs	r3, #1
 800b656:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800b658:	6a3b      	ldr	r3, [r7, #32]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d117      	bne.n	800b68e <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2200      	movs	r2, #0
 800b662:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	2220      	movs	r2, #32
 800b668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2200      	movs	r2, #0
 800b670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b678:	f043 0220 	orr.w	r2, r3, #32
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800b680:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2200      	movs	r2, #0
 800b686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800b68a:	2301      	movs	r3, #1
 800b68c:	e099      	b.n	800b7c2 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	695b      	ldr	r3, [r3, #20]
 800b694:	f003 0304 	and.w	r3, r3, #4
 800b698:	2b04      	cmp	r3, #4
 800b69a:	d1da      	bne.n	800b652 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	681a      	ldr	r2, [r3, #0]
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b6aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	691a      	ldr	r2, [r3, #16]
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b6:	b2d2      	uxtb	r2, r2
 800b6b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6be:	1c5a      	adds	r2, r3, #1
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6c8:	3b01      	subs	r3, #1
 800b6ca:	b29a      	uxth	r2, r3
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	3b01      	subs	r3, #1
 800b6d8:	b29a      	uxth	r2, r3
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b6de:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	691a      	ldr	r2, [r3, #16]
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ea:	b2d2      	uxtb	r2, r2
 800b6ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f2:	1c5a      	adds	r2, r3, #1
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6fc:	3b01      	subs	r3, #1
 800b6fe:	b29a      	uxth	r2, r3
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b708:	b29b      	uxth	r3, r3
 800b70a:	3b01      	subs	r3, #1
 800b70c:	b29a      	uxth	r2, r3
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b712:	e042      	b.n	800b79a <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b716:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b718:	68f8      	ldr	r0, [r7, #12]
 800b71a:	f000 fb05 	bl	800bd28 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b71e:	4603      	mov	r3, r0
 800b720:	2b00      	cmp	r3, #0
 800b722:	d001      	beq.n	800b728 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 800b724:	2301      	movs	r3, #1
 800b726:	e04c      	b.n	800b7c2 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	691a      	ldr	r2, [r3, #16]
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b732:	b2d2      	uxtb	r2, r2
 800b734:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b73a:	1c5a      	adds	r2, r3, #1
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b744:	3b01      	subs	r3, #1
 800b746:	b29a      	uxth	r2, r3
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b750:	b29b      	uxth	r3, r3
 800b752:	3b01      	subs	r3, #1
 800b754:	b29a      	uxth	r2, r3
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	695b      	ldr	r3, [r3, #20]
 800b760:	f003 0304 	and.w	r3, r3, #4
 800b764:	2b04      	cmp	r3, #4
 800b766:	d118      	bne.n	800b79a <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	691a      	ldr	r2, [r3, #16]
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b772:	b2d2      	uxtb	r2, r2
 800b774:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b77a:	1c5a      	adds	r2, r3, #1
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b784:	3b01      	subs	r3, #1
 800b786:	b29a      	uxth	r2, r3
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b790:	b29b      	uxth	r3, r3
 800b792:	3b01      	subs	r3, #1
 800b794:	b29a      	uxth	r2, r3
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	f47f ae99 	bne.w	800b4d6 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2220      	movs	r2, #32
 800b7a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	e000      	b.n	800b7c2 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 800b7c0:	2302      	movs	r3, #2
  }
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3728      	adds	r7, #40	; 0x28
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	00010004 	.word	0x00010004
 800b7d0:	2000009c 	.word	0x2000009c
 800b7d4:	14f8b589 	.word	0x14f8b589

0800b7d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b088      	sub	sp, #32
 800b7dc:	af02      	add	r7, sp, #8
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	607a      	str	r2, [r7, #4]
 800b7e2:	603b      	str	r3, [r7, #0]
 800b7e4:	460b      	mov	r3, r1
 800b7e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	2b08      	cmp	r3, #8
 800b7f2:	d006      	beq.n	800b802 <I2C_MasterRequestWrite+0x2a>
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	2b01      	cmp	r3, #1
 800b7f8:	d003      	beq.n	800b802 <I2C_MasterRequestWrite+0x2a>
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b800:	d108      	bne.n	800b814 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	681a      	ldr	r2, [r3, #0]
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b810:	601a      	str	r2, [r3, #0]
 800b812:	e00b      	b.n	800b82c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b818:	2b12      	cmp	r3, #18
 800b81a:	d107      	bne.n	800b82c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	681a      	ldr	r2, [r3, #0]
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b82a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	9300      	str	r3, [sp, #0]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2200      	movs	r2, #0
 800b834:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b838:	68f8      	ldr	r0, [r7, #12]
 800b83a:	f000 f91d 	bl	800ba78 <I2C_WaitOnFlagUntilTimeout>
 800b83e:	4603      	mov	r3, r0
 800b840:	2b00      	cmp	r3, #0
 800b842:	d00d      	beq.n	800b860 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b84e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b852:	d103      	bne.n	800b85c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b85a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b85c:	2303      	movs	r3, #3
 800b85e:	e035      	b.n	800b8cc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	691b      	ldr	r3, [r3, #16]
 800b864:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b868:	d108      	bne.n	800b87c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b86a:	897b      	ldrh	r3, [r7, #10]
 800b86c:	b2db      	uxtb	r3, r3
 800b86e:	461a      	mov	r2, r3
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b878:	611a      	str	r2, [r3, #16]
 800b87a:	e01b      	b.n	800b8b4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b87c:	897b      	ldrh	r3, [r7, #10]
 800b87e:	11db      	asrs	r3, r3, #7
 800b880:	b2db      	uxtb	r3, r3
 800b882:	f003 0306 	and.w	r3, r3, #6
 800b886:	b2db      	uxtb	r3, r3
 800b888:	f063 030f 	orn	r3, r3, #15
 800b88c:	b2da      	uxtb	r2, r3
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	687a      	ldr	r2, [r7, #4]
 800b898:	490e      	ldr	r1, [pc, #56]	; (800b8d4 <I2C_MasterRequestWrite+0xfc>)
 800b89a:	68f8      	ldr	r0, [r7, #12]
 800b89c:	f000 f943 	bl	800bb26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d001      	beq.n	800b8aa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	e010      	b.n	800b8cc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b8aa:	897b      	ldrh	r3, [r7, #10]
 800b8ac:	b2da      	uxtb	r2, r3
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	4907      	ldr	r1, [pc, #28]	; (800b8d8 <I2C_MasterRequestWrite+0x100>)
 800b8ba:	68f8      	ldr	r0, [r7, #12]
 800b8bc:	f000 f933 	bl	800bb26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d001      	beq.n	800b8ca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	e000      	b.n	800b8cc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b8ca:	2300      	movs	r3, #0
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3718      	adds	r7, #24
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}
 800b8d4:	00010008 	.word	0x00010008
 800b8d8:	00010002 	.word	0x00010002

0800b8dc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b088      	sub	sp, #32
 800b8e0:	af02      	add	r7, sp, #8
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	607a      	str	r2, [r7, #4]
 800b8e6:	603b      	str	r3, [r7, #0]
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	681a      	ldr	r2, [r3, #0]
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b900:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	2b08      	cmp	r3, #8
 800b906:	d006      	beq.n	800b916 <I2C_MasterRequestRead+0x3a>
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	2b01      	cmp	r3, #1
 800b90c:	d003      	beq.n	800b916 <I2C_MasterRequestRead+0x3a>
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b914:	d108      	bne.n	800b928 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	681a      	ldr	r2, [r3, #0]
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b924:	601a      	str	r2, [r3, #0]
 800b926:	e00b      	b.n	800b940 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b92c:	2b11      	cmp	r3, #17
 800b92e:	d107      	bne.n	800b940 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b93e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	9300      	str	r3, [sp, #0]
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2200      	movs	r2, #0
 800b948:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b94c:	68f8      	ldr	r0, [r7, #12]
 800b94e:	f000 f893 	bl	800ba78 <I2C_WaitOnFlagUntilTimeout>
 800b952:	4603      	mov	r3, r0
 800b954:	2b00      	cmp	r3, #0
 800b956:	d00d      	beq.n	800b974 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b966:	d103      	bne.n	800b970 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b96e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b970:	2303      	movs	r3, #3
 800b972:	e079      	b.n	800ba68 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	691b      	ldr	r3, [r3, #16]
 800b978:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b97c:	d108      	bne.n	800b990 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b97e:	897b      	ldrh	r3, [r7, #10]
 800b980:	b2db      	uxtb	r3, r3
 800b982:	f043 0301 	orr.w	r3, r3, #1
 800b986:	b2da      	uxtb	r2, r3
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	611a      	str	r2, [r3, #16]
 800b98e:	e05f      	b.n	800ba50 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b990:	897b      	ldrh	r3, [r7, #10]
 800b992:	11db      	asrs	r3, r3, #7
 800b994:	b2db      	uxtb	r3, r3
 800b996:	f003 0306 	and.w	r3, r3, #6
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	f063 030f 	orn	r3, r3, #15
 800b9a0:	b2da      	uxtb	r2, r3
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	687a      	ldr	r2, [r7, #4]
 800b9ac:	4930      	ldr	r1, [pc, #192]	; (800ba70 <I2C_MasterRequestRead+0x194>)
 800b9ae:	68f8      	ldr	r0, [r7, #12]
 800b9b0:	f000 f8b9 	bl	800bb26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d001      	beq.n	800b9be <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	e054      	b.n	800ba68 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b9be:	897b      	ldrh	r3, [r7, #10]
 800b9c0:	b2da      	uxtb	r2, r3
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	687a      	ldr	r2, [r7, #4]
 800b9cc:	4929      	ldr	r1, [pc, #164]	; (800ba74 <I2C_MasterRequestRead+0x198>)
 800b9ce:	68f8      	ldr	r0, [r7, #12]
 800b9d0:	f000 f8a9 	bl	800bb26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d001      	beq.n	800b9de <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	e044      	b.n	800ba68 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b9de:	2300      	movs	r3, #0
 800b9e0:	613b      	str	r3, [r7, #16]
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	695b      	ldr	r3, [r3, #20]
 800b9e8:	613b      	str	r3, [r7, #16]
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	699b      	ldr	r3, [r3, #24]
 800b9f0:	613b      	str	r3, [r7, #16]
 800b9f2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	681a      	ldr	r2, [r3, #0]
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ba02:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	9300      	str	r3, [sp, #0]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ba10:	68f8      	ldr	r0, [r7, #12]
 800ba12:	f000 f831 	bl	800ba78 <I2C_WaitOnFlagUntilTimeout>
 800ba16:	4603      	mov	r3, r0
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d00d      	beq.n	800ba38 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba2a:	d103      	bne.n	800ba34 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba32:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800ba34:	2303      	movs	r3, #3
 800ba36:	e017      	b.n	800ba68 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800ba38:	897b      	ldrh	r3, [r7, #10]
 800ba3a:	11db      	asrs	r3, r3, #7
 800ba3c:	b2db      	uxtb	r3, r3
 800ba3e:	f003 0306 	and.w	r3, r3, #6
 800ba42:	b2db      	uxtb	r3, r3
 800ba44:	f063 030e 	orn	r3, r3, #14
 800ba48:	b2da      	uxtb	r2, r3
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	687a      	ldr	r2, [r7, #4]
 800ba54:	4907      	ldr	r1, [pc, #28]	; (800ba74 <I2C_MasterRequestRead+0x198>)
 800ba56:	68f8      	ldr	r0, [r7, #12]
 800ba58:	f000 f865 	bl	800bb26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d001      	beq.n	800ba66 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800ba62:	2301      	movs	r3, #1
 800ba64:	e000      	b.n	800ba68 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800ba66:	2300      	movs	r3, #0
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3718      	adds	r7, #24
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}
 800ba70:	00010008 	.word	0x00010008
 800ba74:	00010002 	.word	0x00010002

0800ba78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b084      	sub	sp, #16
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	60b9      	str	r1, [r7, #8]
 800ba82:	603b      	str	r3, [r7, #0]
 800ba84:	4613      	mov	r3, r2
 800ba86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ba88:	e025      	b.n	800bad6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba90:	d021      	beq.n	800bad6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba92:	f7fe f979 	bl	8009d88 <HAL_GetTick>
 800ba96:	4602      	mov	r2, r0
 800ba98:	69bb      	ldr	r3, [r7, #24]
 800ba9a:	1ad3      	subs	r3, r2, r3
 800ba9c:	683a      	ldr	r2, [r7, #0]
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d302      	bcc.n	800baa8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d116      	bne.n	800bad6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2200      	movs	r2, #0
 800baac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2220      	movs	r2, #32
 800bab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2200      	movs	r2, #0
 800baba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bac2:	f043 0220 	orr.w	r2, r3, #32
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	2200      	movs	r2, #0
 800bace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bad2:	2301      	movs	r3, #1
 800bad4:	e023      	b.n	800bb1e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	0c1b      	lsrs	r3, r3, #16
 800bada:	b2db      	uxtb	r3, r3
 800badc:	2b01      	cmp	r3, #1
 800bade:	d10d      	bne.n	800bafc <I2C_WaitOnFlagUntilTimeout+0x84>
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	695b      	ldr	r3, [r3, #20]
 800bae6:	43da      	mvns	r2, r3
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	4013      	ands	r3, r2
 800baec:	b29b      	uxth	r3, r3
 800baee:	2b00      	cmp	r3, #0
 800baf0:	bf0c      	ite	eq
 800baf2:	2301      	moveq	r3, #1
 800baf4:	2300      	movne	r3, #0
 800baf6:	b2db      	uxtb	r3, r3
 800baf8:	461a      	mov	r2, r3
 800bafa:	e00c      	b.n	800bb16 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	699b      	ldr	r3, [r3, #24]
 800bb02:	43da      	mvns	r2, r3
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	4013      	ands	r3, r2
 800bb08:	b29b      	uxth	r3, r3
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	bf0c      	ite	eq
 800bb0e:	2301      	moveq	r3, #1
 800bb10:	2300      	movne	r3, #0
 800bb12:	b2db      	uxtb	r3, r3
 800bb14:	461a      	mov	r2, r3
 800bb16:	79fb      	ldrb	r3, [r7, #7]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d0b6      	beq.n	800ba8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bb1c:	2300      	movs	r3, #0
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3710      	adds	r7, #16
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}

0800bb26 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800bb26:	b580      	push	{r7, lr}
 800bb28:	b084      	sub	sp, #16
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	60f8      	str	r0, [r7, #12]
 800bb2e:	60b9      	str	r1, [r7, #8]
 800bb30:	607a      	str	r2, [r7, #4]
 800bb32:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bb34:	e051      	b.n	800bbda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	695b      	ldr	r3, [r3, #20]
 800bb3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb44:	d123      	bne.n	800bb8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb54:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bb5e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2200      	movs	r2, #0
 800bb64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2220      	movs	r2, #32
 800bb6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2200      	movs	r2, #0
 800bb72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb7a:	f043 0204 	orr.w	r2, r3, #4
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2200      	movs	r2, #0
 800bb86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e046      	b.n	800bc1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb94:	d021      	beq.n	800bbda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb96:	f7fe f8f7 	bl	8009d88 <HAL_GetTick>
 800bb9a:	4602      	mov	r2, r0
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	1ad3      	subs	r3, r2, r3
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d302      	bcc.n	800bbac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d116      	bne.n	800bbda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	2220      	movs	r2, #32
 800bbb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbc6:	f043 0220 	orr.w	r2, r3, #32
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	e020      	b.n	800bc1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	0c1b      	lsrs	r3, r3, #16
 800bbde:	b2db      	uxtb	r3, r3
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d10c      	bne.n	800bbfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	695b      	ldr	r3, [r3, #20]
 800bbea:	43da      	mvns	r2, r3
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	4013      	ands	r3, r2
 800bbf0:	b29b      	uxth	r3, r3
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	bf14      	ite	ne
 800bbf6:	2301      	movne	r3, #1
 800bbf8:	2300      	moveq	r3, #0
 800bbfa:	b2db      	uxtb	r3, r3
 800bbfc:	e00b      	b.n	800bc16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	699b      	ldr	r3, [r3, #24]
 800bc04:	43da      	mvns	r2, r3
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	4013      	ands	r3, r2
 800bc0a:	b29b      	uxth	r3, r3
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	bf14      	ite	ne
 800bc10:	2301      	movne	r3, #1
 800bc12:	2300      	moveq	r3, #0
 800bc14:	b2db      	uxtb	r3, r3
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d18d      	bne.n	800bb36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800bc1a:	2300      	movs	r3, #0
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3710      	adds	r7, #16
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bc30:	e02d      	b.n	800bc8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bc32:	68f8      	ldr	r0, [r7, #12]
 800bc34:	f000 f8ce 	bl	800bdd4 <I2C_IsAcknowledgeFailed>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d001      	beq.n	800bc42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	e02d      	b.n	800bc9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc48:	d021      	beq.n	800bc8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc4a:	f7fe f89d 	bl	8009d88 <HAL_GetTick>
 800bc4e:	4602      	mov	r2, r0
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	1ad3      	subs	r3, r2, r3
 800bc54:	68ba      	ldr	r2, [r7, #8]
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d302      	bcc.n	800bc60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d116      	bne.n	800bc8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	2200      	movs	r2, #0
 800bc64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	2220      	movs	r2, #32
 800bc6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2200      	movs	r2, #0
 800bc72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc7a:	f043 0220 	orr.w	r2, r3, #32
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	2200      	movs	r2, #0
 800bc86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	e007      	b.n	800bc9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	695b      	ldr	r3, [r3, #20]
 800bc94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc98:	2b80      	cmp	r3, #128	; 0x80
 800bc9a:	d1ca      	bne.n	800bc32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bc9c:	2300      	movs	r3, #0
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3710      	adds	r7, #16
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}

0800bca6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b084      	sub	sp, #16
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	60f8      	str	r0, [r7, #12]
 800bcae:	60b9      	str	r1, [r7, #8]
 800bcb0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bcb2:	e02d      	b.n	800bd10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bcb4:	68f8      	ldr	r0, [r7, #12]
 800bcb6:	f000 f88d 	bl	800bdd4 <I2C_IsAcknowledgeFailed>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d001      	beq.n	800bcc4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	e02d      	b.n	800bd20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcca:	d021      	beq.n	800bd10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bccc:	f7fe f85c 	bl	8009d88 <HAL_GetTick>
 800bcd0:	4602      	mov	r2, r0
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	1ad3      	subs	r3, r2, r3
 800bcd6:	68ba      	ldr	r2, [r7, #8]
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	d302      	bcc.n	800bce2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d116      	bne.n	800bd10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	2200      	movs	r2, #0
 800bce6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2220      	movs	r2, #32
 800bcec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcfc:	f043 0220 	orr.w	r2, r3, #32
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2200      	movs	r2, #0
 800bd08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	e007      	b.n	800bd20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	695b      	ldr	r3, [r3, #20]
 800bd16:	f003 0304 	and.w	r3, r3, #4
 800bd1a:	2b04      	cmp	r3, #4
 800bd1c:	d1ca      	bne.n	800bcb4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bd1e:	2300      	movs	r3, #0
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3710      	adds	r7, #16
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b084      	sub	sp, #16
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	60b9      	str	r1, [r7, #8]
 800bd32:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bd34:	e042      	b.n	800bdbc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	695b      	ldr	r3, [r3, #20]
 800bd3c:	f003 0310 	and.w	r3, r3, #16
 800bd40:	2b10      	cmp	r3, #16
 800bd42:	d119      	bne.n	800bd78 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f06f 0210 	mvn.w	r2, #16
 800bd4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2200      	movs	r2, #0
 800bd52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2220      	movs	r2, #32
 800bd58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bd74:	2301      	movs	r3, #1
 800bd76:	e029      	b.n	800bdcc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd78:	f7fe f806 	bl	8009d88 <HAL_GetTick>
 800bd7c:	4602      	mov	r2, r0
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	1ad3      	subs	r3, r2, r3
 800bd82:	68ba      	ldr	r2, [r7, #8]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d302      	bcc.n	800bd8e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d116      	bne.n	800bdbc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	2200      	movs	r2, #0
 800bd92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	2220      	movs	r2, #32
 800bd98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bda8:	f043 0220 	orr.w	r2, r3, #32
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bdb8:	2301      	movs	r3, #1
 800bdba:	e007      	b.n	800bdcc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	695b      	ldr	r3, [r3, #20]
 800bdc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdc6:	2b40      	cmp	r3, #64	; 0x40
 800bdc8:	d1b5      	bne.n	800bd36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bdca:	2300      	movs	r3, #0
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3710      	adds	r7, #16
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}

0800bdd4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b083      	sub	sp, #12
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	695b      	ldr	r3, [r3, #20]
 800bde2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bde6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdea:	d11b      	bne.n	800be24 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bdf4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2220      	movs	r2, #32
 800be00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2200      	movs	r2, #0
 800be08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be10:	f043 0204 	orr.w	r2, r3, #4
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2200      	movs	r2, #0
 800be1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800be20:	2301      	movs	r3, #1
 800be22:	e000      	b.n	800be26 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800be24:	2300      	movs	r3, #0
}
 800be26:	4618      	mov	r0, r3
 800be28:	370c      	adds	r7, #12
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bc80      	pop	{r7}
 800be2e:	4770      	bx	lr

0800be30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b086      	sub	sp, #24
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d101      	bne.n	800be42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800be3e:	2301      	movs	r3, #1
 800be40:	e35c      	b.n	800c4fc <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d01c      	beq.n	800be84 <HAL_RCC_OscConfig+0x54>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f003 0301 	and.w	r3, r3, #1
 800be52:	2b00      	cmp	r3, #0
 800be54:	d116      	bne.n	800be84 <HAL_RCC_OscConfig+0x54>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f003 0302 	and.w	r3, r3, #2
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d110      	bne.n	800be84 <HAL_RCC_OscConfig+0x54>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f003 0308 	and.w	r3, r3, #8
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d10a      	bne.n	800be84 <HAL_RCC_OscConfig+0x54>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f003 0304 	and.w	r3, r3, #4
 800be76:	2b00      	cmp	r3, #0
 800be78:	d104      	bne.n	800be84 <HAL_RCC_OscConfig+0x54>
 800be7a:	f240 1167 	movw	r1, #359	; 0x167
 800be7e:	48a5      	ldr	r0, [pc, #660]	; (800c114 <HAL_RCC_OscConfig+0x2e4>)
 800be80:	f7fd fb5c 	bl	800953c <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f003 0301 	and.w	r3, r3, #1
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	f000 809a 	beq.w	800bfc6 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d00e      	beq.n	800beb8 <HAL_RCC_OscConfig+0x88>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bea2:	d009      	beq.n	800beb8 <HAL_RCC_OscConfig+0x88>
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	685b      	ldr	r3, [r3, #4]
 800bea8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800beac:	d004      	beq.n	800beb8 <HAL_RCC_OscConfig+0x88>
 800beae:	f240 116d 	movw	r1, #365	; 0x16d
 800beb2:	4898      	ldr	r0, [pc, #608]	; (800c114 <HAL_RCC_OscConfig+0x2e4>)
 800beb4:	f7fd fb42 	bl	800953c <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800beb8:	4b97      	ldr	r3, [pc, #604]	; (800c118 <HAL_RCC_OscConfig+0x2e8>)
 800beba:	685b      	ldr	r3, [r3, #4]
 800bebc:	f003 030c 	and.w	r3, r3, #12
 800bec0:	2b04      	cmp	r3, #4
 800bec2:	d00c      	beq.n	800bede <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800bec4:	4b94      	ldr	r3, [pc, #592]	; (800c118 <HAL_RCC_OscConfig+0x2e8>)
 800bec6:	685b      	ldr	r3, [r3, #4]
 800bec8:	f003 030c 	and.w	r3, r3, #12
 800becc:	2b08      	cmp	r3, #8
 800bece:	d112      	bne.n	800bef6 <HAL_RCC_OscConfig+0xc6>
 800bed0:	4b91      	ldr	r3, [pc, #580]	; (800c118 <HAL_RCC_OscConfig+0x2e8>)
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bedc:	d10b      	bne.n	800bef6 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bede:	4b8e      	ldr	r3, [pc, #568]	; (800c118 <HAL_RCC_OscConfig+0x2e8>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d06c      	beq.n	800bfc4 <HAL_RCC_OscConfig+0x194>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	685b      	ldr	r3, [r3, #4]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d168      	bne.n	800bfc4 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800bef2:	2301      	movs	r3, #1
 800bef4:	e302      	b.n	800c4fc <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800befe:	d106      	bne.n	800bf0e <HAL_RCC_OscConfig+0xde>
 800bf00:	4b85      	ldr	r3, [pc, #532]	; (800c118 <HAL_RCC_OscConfig+0x2e8>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4a84      	ldr	r2, [pc, #528]	; (800c118 <HAL_RCC_OscConfig+0x2e8>)
 800bf06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bf0a:	6013      	str	r3, [r2, #0]
 800bf0c:	e02e      	b.n	800bf6c <HAL_RCC_OscConfig+0x13c>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d10c      	bne.n	800bf30 <HAL_RCC_OscConfig+0x100>
 800bf16:	4b80      	ldr	r3, [pc, #512]	; (800c118 <HAL_RCC_OscConfig+0x2e8>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4a7f      	ldr	r2, [pc, #508]	; (800c118 <HAL_RCC_OscConfig+0x2e8>)
 800bf1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bf20:	6013      	str	r3, [r2, #0]
 800bf22:	4b7d      	ldr	r3, [pc, #500]	; (800c118 <HAL_RCC_OscConfig+0x2e8>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4a7c      	ldr	r2, [pc, #496]	; (800c118 <HAL_RCC_OscConfig+0x2e8>)
 800bf28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bf2c:	6013      	str	r3, [r2, #0]
 800bf2e:	e01d      	b.n	800bf6c <HAL_RCC_OscConfig+0x13c>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bf38:	d10c      	bne.n	800bf54 <HAL_RCC_OscConfig+0x124>
 800bf3a:	4b77      	ldr	r3, [pc, #476]	; (800c118 <HAL_RCC_OscConfig+0x2e8>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	4a76      	ldr	r2, [pc, #472]	; (800c118 <HAL_RCC_OscConfig+0x2e8>)
 800bf40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bf44:	6013      	str	r3, [r2, #0]
 800bf46:	4b74      	ldr	r3, [pc, #464]	; (800c118 <HAL_RCC_OscConfig+0x2e8>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	4a73      	ldr	r2, [pc, #460]	; (800c118 <HAL_RCC_OscConfig+0x2e8>)
 800bf4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bf50:	6013      	str	r3, [r2, #0]
 800bf52:	e00b      	b.n	800bf6c <HAL_RCC_OscConfig+0x13c>
 800bf54:	4b70      	ldr	r3, [pc, #448]	; (800c118 <HAL_RCC_OscConfig+0x2e8>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	4a6f      	ldr	r2, [pc, #444]	; (800c118 <HAL_RCC_OscConfig+0x2e8>)
 800bf5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bf5e:	6013      	str	r3, [r2, #0]
 800bf60:	4b6d      	ldr	r3, [pc, #436]	; (800c118 <HAL_RCC_OscConfig+0x2e8>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	4a6c      	ldr	r2, [pc, #432]	; (800c118 <HAL_RCC_OscConfig+0x2e8>)
 800bf66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bf6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d013      	beq.n	800bf9c <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf74:	f7fd ff08 	bl	8009d88 <HAL_GetTick>
 800bf78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bf7a:	e008      	b.n	800bf8e <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bf7c:	f7fd ff04 	bl	8009d88 <HAL_GetTick>
 800bf80:	4602      	mov	r2, r0
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	1ad3      	subs	r3, r2, r3
 800bf86:	2b64      	cmp	r3, #100	; 0x64
 800bf88:	d901      	bls.n	800bf8e <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 800bf8a:	2303      	movs	r3, #3
 800bf8c:	e2b6      	b.n	800c4fc <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bf8e:	4b62      	ldr	r3, [pc, #392]	; (800c118 <HAL_RCC_OscConfig+0x2e8>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d0f0      	beq.n	800bf7c <HAL_RCC_OscConfig+0x14c>
 800bf9a:	e014      	b.n	800bfc6 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf9c:	f7fd fef4 	bl	8009d88 <HAL_GetTick>
 800bfa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bfa2:	e008      	b.n	800bfb6 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bfa4:	f7fd fef0 	bl	8009d88 <HAL_GetTick>
 800bfa8:	4602      	mov	r2, r0
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	1ad3      	subs	r3, r2, r3
 800bfae:	2b64      	cmp	r3, #100	; 0x64
 800bfb0:	d901      	bls.n	800bfb6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800bfb2:	2303      	movs	r3, #3
 800bfb4:	e2a2      	b.n	800c4fc <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bfb6:	4b58      	ldr	r3, [pc, #352]	; (800c118 <HAL_RCC_OscConfig+0x2e8>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d1f0      	bne.n	800bfa4 <HAL_RCC_OscConfig+0x174>
 800bfc2:	e000      	b.n	800bfc6 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bfc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f003 0302 	and.w	r3, r3, #2
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d079      	beq.n	800c0c6 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	691b      	ldr	r3, [r3, #16]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d008      	beq.n	800bfec <HAL_RCC_OscConfig+0x1bc>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	691b      	ldr	r3, [r3, #16]
 800bfde:	2b01      	cmp	r3, #1
 800bfe0:	d004      	beq.n	800bfec <HAL_RCC_OscConfig+0x1bc>
 800bfe2:	f240 11a1 	movw	r1, #417	; 0x1a1
 800bfe6:	484b      	ldr	r0, [pc, #300]	; (800c114 <HAL_RCC_OscConfig+0x2e4>)
 800bfe8:	f7fd faa8 	bl	800953c <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	695b      	ldr	r3, [r3, #20]
 800bff0:	2b1f      	cmp	r3, #31
 800bff2:	d904      	bls.n	800bffe <HAL_RCC_OscConfig+0x1ce>
 800bff4:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 800bff8:	4846      	ldr	r0, [pc, #280]	; (800c114 <HAL_RCC_OscConfig+0x2e4>)
 800bffa:	f7fd fa9f 	bl	800953c <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bffe:	4b46      	ldr	r3, [pc, #280]	; (800c118 <HAL_RCC_OscConfig+0x2e8>)
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	f003 030c 	and.w	r3, r3, #12
 800c006:	2b00      	cmp	r3, #0
 800c008:	d00b      	beq.n	800c022 <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800c00a:	4b43      	ldr	r3, [pc, #268]	; (800c118 <HAL_RCC_OscConfig+0x2e8>)
 800c00c:	685b      	ldr	r3, [r3, #4]
 800c00e:	f003 030c 	and.w	r3, r3, #12
 800c012:	2b08      	cmp	r3, #8
 800c014:	d11c      	bne.n	800c050 <HAL_RCC_OscConfig+0x220>
 800c016:	4b40      	ldr	r3, [pc, #256]	; (800c118 <HAL_RCC_OscConfig+0x2e8>)
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d116      	bne.n	800c050 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c022:	4b3d      	ldr	r3, [pc, #244]	; (800c118 <HAL_RCC_OscConfig+0x2e8>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f003 0302 	and.w	r3, r3, #2
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d005      	beq.n	800c03a <HAL_RCC_OscConfig+0x20a>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	691b      	ldr	r3, [r3, #16]
 800c032:	2b01      	cmp	r3, #1
 800c034:	d001      	beq.n	800c03a <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 800c036:	2301      	movs	r3, #1
 800c038:	e260      	b.n	800c4fc <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c03a:	4b37      	ldr	r3, [pc, #220]	; (800c118 <HAL_RCC_OscConfig+0x2e8>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	695b      	ldr	r3, [r3, #20]
 800c046:	00db      	lsls	r3, r3, #3
 800c048:	4933      	ldr	r1, [pc, #204]	; (800c118 <HAL_RCC_OscConfig+0x2e8>)
 800c04a:	4313      	orrs	r3, r2
 800c04c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c04e:	e03a      	b.n	800c0c6 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	691b      	ldr	r3, [r3, #16]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d020      	beq.n	800c09a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c058:	4b30      	ldr	r3, [pc, #192]	; (800c11c <HAL_RCC_OscConfig+0x2ec>)
 800c05a:	2201      	movs	r2, #1
 800c05c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c05e:	f7fd fe93 	bl	8009d88 <HAL_GetTick>
 800c062:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c064:	e008      	b.n	800c078 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c066:	f7fd fe8f 	bl	8009d88 <HAL_GetTick>
 800c06a:	4602      	mov	r2, r0
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	1ad3      	subs	r3, r2, r3
 800c070:	2b02      	cmp	r3, #2
 800c072:	d901      	bls.n	800c078 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800c074:	2303      	movs	r3, #3
 800c076:	e241      	b.n	800c4fc <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c078:	4b27      	ldr	r3, [pc, #156]	; (800c118 <HAL_RCC_OscConfig+0x2e8>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f003 0302 	and.w	r3, r3, #2
 800c080:	2b00      	cmp	r3, #0
 800c082:	d0f0      	beq.n	800c066 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c084:	4b24      	ldr	r3, [pc, #144]	; (800c118 <HAL_RCC_OscConfig+0x2e8>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	695b      	ldr	r3, [r3, #20]
 800c090:	00db      	lsls	r3, r3, #3
 800c092:	4921      	ldr	r1, [pc, #132]	; (800c118 <HAL_RCC_OscConfig+0x2e8>)
 800c094:	4313      	orrs	r3, r2
 800c096:	600b      	str	r3, [r1, #0]
 800c098:	e015      	b.n	800c0c6 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c09a:	4b20      	ldr	r3, [pc, #128]	; (800c11c <HAL_RCC_OscConfig+0x2ec>)
 800c09c:	2200      	movs	r2, #0
 800c09e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c0a0:	f7fd fe72 	bl	8009d88 <HAL_GetTick>
 800c0a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c0a6:	e008      	b.n	800c0ba <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c0a8:	f7fd fe6e 	bl	8009d88 <HAL_GetTick>
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	1ad3      	subs	r3, r2, r3
 800c0b2:	2b02      	cmp	r3, #2
 800c0b4:	d901      	bls.n	800c0ba <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 800c0b6:	2303      	movs	r3, #3
 800c0b8:	e220      	b.n	800c4fc <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c0ba:	4b17      	ldr	r3, [pc, #92]	; (800c118 <HAL_RCC_OscConfig+0x2e8>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f003 0302 	and.w	r3, r3, #2
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d1f0      	bne.n	800c0a8 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f003 0308 	and.w	r3, r3, #8
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d048      	beq.n	800c164 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	699b      	ldr	r3, [r3, #24]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d008      	beq.n	800c0ec <HAL_RCC_OscConfig+0x2bc>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	699b      	ldr	r3, [r3, #24]
 800c0de:	2b01      	cmp	r3, #1
 800c0e0:	d004      	beq.n	800c0ec <HAL_RCC_OscConfig+0x2bc>
 800c0e2:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800c0e6:	480b      	ldr	r0, [pc, #44]	; (800c114 <HAL_RCC_OscConfig+0x2e4>)
 800c0e8:	f7fd fa28 	bl	800953c <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	699b      	ldr	r3, [r3, #24]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d021      	beq.n	800c138 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c0f4:	4b0a      	ldr	r3, [pc, #40]	; (800c120 <HAL_RCC_OscConfig+0x2f0>)
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c0fa:	f7fd fe45 	bl	8009d88 <HAL_GetTick>
 800c0fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c100:	e010      	b.n	800c124 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c102:	f7fd fe41 	bl	8009d88 <HAL_GetTick>
 800c106:	4602      	mov	r2, r0
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	1ad3      	subs	r3, r2, r3
 800c10c:	2b02      	cmp	r3, #2
 800c10e:	d909      	bls.n	800c124 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 800c110:	2303      	movs	r3, #3
 800c112:	e1f3      	b.n	800c4fc <HAL_RCC_OscConfig+0x6cc>
 800c114:	0800f930 	.word	0x0800f930
 800c118:	40021000 	.word	0x40021000
 800c11c:	42420000 	.word	0x42420000
 800c120:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c124:	4b67      	ldr	r3, [pc, #412]	; (800c2c4 <HAL_RCC_OscConfig+0x494>)
 800c126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c128:	f003 0302 	and.w	r3, r3, #2
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d0e8      	beq.n	800c102 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800c130:	2001      	movs	r0, #1
 800c132:	f000 fc11 	bl	800c958 <RCC_Delay>
 800c136:	e015      	b.n	800c164 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c138:	4b63      	ldr	r3, [pc, #396]	; (800c2c8 <HAL_RCC_OscConfig+0x498>)
 800c13a:	2200      	movs	r2, #0
 800c13c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c13e:	f7fd fe23 	bl	8009d88 <HAL_GetTick>
 800c142:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c144:	e008      	b.n	800c158 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c146:	f7fd fe1f 	bl	8009d88 <HAL_GetTick>
 800c14a:	4602      	mov	r2, r0
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	1ad3      	subs	r3, r2, r3
 800c150:	2b02      	cmp	r3, #2
 800c152:	d901      	bls.n	800c158 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 800c154:	2303      	movs	r3, #3
 800c156:	e1d1      	b.n	800c4fc <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c158:	4b5a      	ldr	r3, [pc, #360]	; (800c2c4 <HAL_RCC_OscConfig+0x494>)
 800c15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c15c:	f003 0302 	and.w	r3, r3, #2
 800c160:	2b00      	cmp	r3, #0
 800c162:	d1f0      	bne.n	800c146 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f003 0304 	and.w	r3, r3, #4
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	f000 80c0 	beq.w	800c2f2 <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c172:	2300      	movs	r3, #0
 800c174:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	68db      	ldr	r3, [r3, #12]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d00c      	beq.n	800c198 <HAL_RCC_OscConfig+0x368>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	68db      	ldr	r3, [r3, #12]
 800c182:	2b01      	cmp	r3, #1
 800c184:	d008      	beq.n	800c198 <HAL_RCC_OscConfig+0x368>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	68db      	ldr	r3, [r3, #12]
 800c18a:	2b05      	cmp	r3, #5
 800c18c:	d004      	beq.n	800c198 <HAL_RCC_OscConfig+0x368>
 800c18e:	f240 2111 	movw	r1, #529	; 0x211
 800c192:	484e      	ldr	r0, [pc, #312]	; (800c2cc <HAL_RCC_OscConfig+0x49c>)
 800c194:	f7fd f9d2 	bl	800953c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c198:	4b4a      	ldr	r3, [pc, #296]	; (800c2c4 <HAL_RCC_OscConfig+0x494>)
 800c19a:	69db      	ldr	r3, [r3, #28]
 800c19c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d10d      	bne.n	800c1c0 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c1a4:	4b47      	ldr	r3, [pc, #284]	; (800c2c4 <HAL_RCC_OscConfig+0x494>)
 800c1a6:	69db      	ldr	r3, [r3, #28]
 800c1a8:	4a46      	ldr	r2, [pc, #280]	; (800c2c4 <HAL_RCC_OscConfig+0x494>)
 800c1aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c1ae:	61d3      	str	r3, [r2, #28]
 800c1b0:	4b44      	ldr	r3, [pc, #272]	; (800c2c4 <HAL_RCC_OscConfig+0x494>)
 800c1b2:	69db      	ldr	r3, [r3, #28]
 800c1b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c1b8:	60bb      	str	r3, [r7, #8]
 800c1ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c1bc:	2301      	movs	r3, #1
 800c1be:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c1c0:	4b43      	ldr	r3, [pc, #268]	; (800c2d0 <HAL_RCC_OscConfig+0x4a0>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d118      	bne.n	800c1fe <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c1cc:	4b40      	ldr	r3, [pc, #256]	; (800c2d0 <HAL_RCC_OscConfig+0x4a0>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	4a3f      	ldr	r2, [pc, #252]	; (800c2d0 <HAL_RCC_OscConfig+0x4a0>)
 800c1d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c1d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c1d8:	f7fd fdd6 	bl	8009d88 <HAL_GetTick>
 800c1dc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c1de:	e008      	b.n	800c1f2 <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c1e0:	f7fd fdd2 	bl	8009d88 <HAL_GetTick>
 800c1e4:	4602      	mov	r2, r0
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	1ad3      	subs	r3, r2, r3
 800c1ea:	2b64      	cmp	r3, #100	; 0x64
 800c1ec:	d901      	bls.n	800c1f2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800c1ee:	2303      	movs	r3, #3
 800c1f0:	e184      	b.n	800c4fc <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c1f2:	4b37      	ldr	r3, [pc, #220]	; (800c2d0 <HAL_RCC_OscConfig+0x4a0>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d0f0      	beq.n	800c1e0 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	68db      	ldr	r3, [r3, #12]
 800c202:	2b01      	cmp	r3, #1
 800c204:	d106      	bne.n	800c214 <HAL_RCC_OscConfig+0x3e4>
 800c206:	4b2f      	ldr	r3, [pc, #188]	; (800c2c4 <HAL_RCC_OscConfig+0x494>)
 800c208:	6a1b      	ldr	r3, [r3, #32]
 800c20a:	4a2e      	ldr	r2, [pc, #184]	; (800c2c4 <HAL_RCC_OscConfig+0x494>)
 800c20c:	f043 0301 	orr.w	r3, r3, #1
 800c210:	6213      	str	r3, [r2, #32]
 800c212:	e02d      	b.n	800c270 <HAL_RCC_OscConfig+0x440>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	68db      	ldr	r3, [r3, #12]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d10c      	bne.n	800c236 <HAL_RCC_OscConfig+0x406>
 800c21c:	4b29      	ldr	r3, [pc, #164]	; (800c2c4 <HAL_RCC_OscConfig+0x494>)
 800c21e:	6a1b      	ldr	r3, [r3, #32]
 800c220:	4a28      	ldr	r2, [pc, #160]	; (800c2c4 <HAL_RCC_OscConfig+0x494>)
 800c222:	f023 0301 	bic.w	r3, r3, #1
 800c226:	6213      	str	r3, [r2, #32]
 800c228:	4b26      	ldr	r3, [pc, #152]	; (800c2c4 <HAL_RCC_OscConfig+0x494>)
 800c22a:	6a1b      	ldr	r3, [r3, #32]
 800c22c:	4a25      	ldr	r2, [pc, #148]	; (800c2c4 <HAL_RCC_OscConfig+0x494>)
 800c22e:	f023 0304 	bic.w	r3, r3, #4
 800c232:	6213      	str	r3, [r2, #32]
 800c234:	e01c      	b.n	800c270 <HAL_RCC_OscConfig+0x440>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	68db      	ldr	r3, [r3, #12]
 800c23a:	2b05      	cmp	r3, #5
 800c23c:	d10c      	bne.n	800c258 <HAL_RCC_OscConfig+0x428>
 800c23e:	4b21      	ldr	r3, [pc, #132]	; (800c2c4 <HAL_RCC_OscConfig+0x494>)
 800c240:	6a1b      	ldr	r3, [r3, #32]
 800c242:	4a20      	ldr	r2, [pc, #128]	; (800c2c4 <HAL_RCC_OscConfig+0x494>)
 800c244:	f043 0304 	orr.w	r3, r3, #4
 800c248:	6213      	str	r3, [r2, #32]
 800c24a:	4b1e      	ldr	r3, [pc, #120]	; (800c2c4 <HAL_RCC_OscConfig+0x494>)
 800c24c:	6a1b      	ldr	r3, [r3, #32]
 800c24e:	4a1d      	ldr	r2, [pc, #116]	; (800c2c4 <HAL_RCC_OscConfig+0x494>)
 800c250:	f043 0301 	orr.w	r3, r3, #1
 800c254:	6213      	str	r3, [r2, #32]
 800c256:	e00b      	b.n	800c270 <HAL_RCC_OscConfig+0x440>
 800c258:	4b1a      	ldr	r3, [pc, #104]	; (800c2c4 <HAL_RCC_OscConfig+0x494>)
 800c25a:	6a1b      	ldr	r3, [r3, #32]
 800c25c:	4a19      	ldr	r2, [pc, #100]	; (800c2c4 <HAL_RCC_OscConfig+0x494>)
 800c25e:	f023 0301 	bic.w	r3, r3, #1
 800c262:	6213      	str	r3, [r2, #32]
 800c264:	4b17      	ldr	r3, [pc, #92]	; (800c2c4 <HAL_RCC_OscConfig+0x494>)
 800c266:	6a1b      	ldr	r3, [r3, #32]
 800c268:	4a16      	ldr	r2, [pc, #88]	; (800c2c4 <HAL_RCC_OscConfig+0x494>)
 800c26a:	f023 0304 	bic.w	r3, r3, #4
 800c26e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	68db      	ldr	r3, [r3, #12]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d015      	beq.n	800c2a4 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c278:	f7fd fd86 	bl	8009d88 <HAL_GetTick>
 800c27c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c27e:	e00a      	b.n	800c296 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c280:	f7fd fd82 	bl	8009d88 <HAL_GetTick>
 800c284:	4602      	mov	r2, r0
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	1ad3      	subs	r3, r2, r3
 800c28a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c28e:	4293      	cmp	r3, r2
 800c290:	d901      	bls.n	800c296 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800c292:	2303      	movs	r3, #3
 800c294:	e132      	b.n	800c4fc <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c296:	4b0b      	ldr	r3, [pc, #44]	; (800c2c4 <HAL_RCC_OscConfig+0x494>)
 800c298:	6a1b      	ldr	r3, [r3, #32]
 800c29a:	f003 0302 	and.w	r3, r3, #2
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d0ee      	beq.n	800c280 <HAL_RCC_OscConfig+0x450>
 800c2a2:	e01d      	b.n	800c2e0 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c2a4:	f7fd fd70 	bl	8009d88 <HAL_GetTick>
 800c2a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c2aa:	e013      	b.n	800c2d4 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c2ac:	f7fd fd6c 	bl	8009d88 <HAL_GetTick>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	1ad3      	subs	r3, r2, r3
 800c2b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d90a      	bls.n	800c2d4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800c2be:	2303      	movs	r3, #3
 800c2c0:	e11c      	b.n	800c4fc <HAL_RCC_OscConfig+0x6cc>
 800c2c2:	bf00      	nop
 800c2c4:	40021000 	.word	0x40021000
 800c2c8:	42420480 	.word	0x42420480
 800c2cc:	0800f930 	.word	0x0800f930
 800c2d0:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c2d4:	4b8b      	ldr	r3, [pc, #556]	; (800c504 <HAL_RCC_OscConfig+0x6d4>)
 800c2d6:	6a1b      	ldr	r3, [r3, #32]
 800c2d8:	f003 0302 	and.w	r3, r3, #2
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d1e5      	bne.n	800c2ac <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800c2e0:	7dfb      	ldrb	r3, [r7, #23]
 800c2e2:	2b01      	cmp	r3, #1
 800c2e4:	d105      	bne.n	800c2f2 <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c2e6:	4b87      	ldr	r3, [pc, #540]	; (800c504 <HAL_RCC_OscConfig+0x6d4>)
 800c2e8:	69db      	ldr	r3, [r3, #28]
 800c2ea:	4a86      	ldr	r2, [pc, #536]	; (800c504 <HAL_RCC_OscConfig+0x6d4>)
 800c2ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c2f0:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	69db      	ldr	r3, [r3, #28]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d00c      	beq.n	800c314 <HAL_RCC_OscConfig+0x4e4>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	69db      	ldr	r3, [r3, #28]
 800c2fe:	2b01      	cmp	r3, #1
 800c300:	d008      	beq.n	800c314 <HAL_RCC_OscConfig+0x4e4>
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	69db      	ldr	r3, [r3, #28]
 800c306:	2b02      	cmp	r3, #2
 800c308:	d004      	beq.n	800c314 <HAL_RCC_OscConfig+0x4e4>
 800c30a:	f240 21af 	movw	r1, #687	; 0x2af
 800c30e:	487e      	ldr	r0, [pc, #504]	; (800c508 <HAL_RCC_OscConfig+0x6d8>)
 800c310:	f7fd f914 	bl	800953c <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	69db      	ldr	r3, [r3, #28]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	f000 80ee 	beq.w	800c4fa <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c31e:	4b79      	ldr	r3, [pc, #484]	; (800c504 <HAL_RCC_OscConfig+0x6d4>)
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	f003 030c 	and.w	r3, r3, #12
 800c326:	2b08      	cmp	r3, #8
 800c328:	f000 80ce 	beq.w	800c4c8 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	69db      	ldr	r3, [r3, #28]
 800c330:	2b02      	cmp	r3, #2
 800c332:	f040 80b2 	bne.w	800c49a <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6a1b      	ldr	r3, [r3, #32]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d009      	beq.n	800c352 <HAL_RCC_OscConfig+0x522>
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6a1b      	ldr	r3, [r3, #32]
 800c342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c346:	d004      	beq.n	800c352 <HAL_RCC_OscConfig+0x522>
 800c348:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 800c34c:	486e      	ldr	r0, [pc, #440]	; (800c508 <HAL_RCC_OscConfig+0x6d8>)
 800c34e:	f7fd f8f5 	bl	800953c <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c356:	2b00      	cmp	r3, #0
 800c358:	d04a      	beq.n	800c3f0 <HAL_RCC_OscConfig+0x5c0>
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c35e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c362:	d045      	beq.n	800c3f0 <HAL_RCC_OscConfig+0x5c0>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c368:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c36c:	d040      	beq.n	800c3f0 <HAL_RCC_OscConfig+0x5c0>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c372:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c376:	d03b      	beq.n	800c3f0 <HAL_RCC_OscConfig+0x5c0>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c37c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c380:	d036      	beq.n	800c3f0 <HAL_RCC_OscConfig+0x5c0>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c386:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800c38a:	d031      	beq.n	800c3f0 <HAL_RCC_OscConfig+0x5c0>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c390:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800c394:	d02c      	beq.n	800c3f0 <HAL_RCC_OscConfig+0x5c0>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c39a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800c39e:	d027      	beq.n	800c3f0 <HAL_RCC_OscConfig+0x5c0>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c3a8:	d022      	beq.n	800c3f0 <HAL_RCC_OscConfig+0x5c0>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ae:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800c3b2:	d01d      	beq.n	800c3f0 <HAL_RCC_OscConfig+0x5c0>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3b8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800c3bc:	d018      	beq.n	800c3f0 <HAL_RCC_OscConfig+0x5c0>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3c2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800c3c6:	d013      	beq.n	800c3f0 <HAL_RCC_OscConfig+0x5c0>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c3d0:	d00e      	beq.n	800c3f0 <HAL_RCC_OscConfig+0x5c0>
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3d6:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 800c3da:	d009      	beq.n	800c3f0 <HAL_RCC_OscConfig+0x5c0>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3e0:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800c3e4:	d004      	beq.n	800c3f0 <HAL_RCC_OscConfig+0x5c0>
 800c3e6:	f240 21b9 	movw	r1, #697	; 0x2b9
 800c3ea:	4847      	ldr	r0, [pc, #284]	; (800c508 <HAL_RCC_OscConfig+0x6d8>)
 800c3ec:	f7fd f8a6 	bl	800953c <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c3f0:	4b46      	ldr	r3, [pc, #280]	; (800c50c <HAL_RCC_OscConfig+0x6dc>)
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c3f6:	f7fd fcc7 	bl	8009d88 <HAL_GetTick>
 800c3fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c3fc:	e008      	b.n	800c410 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c3fe:	f7fd fcc3 	bl	8009d88 <HAL_GetTick>
 800c402:	4602      	mov	r2, r0
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	1ad3      	subs	r3, r2, r3
 800c408:	2b02      	cmp	r3, #2
 800c40a:	d901      	bls.n	800c410 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800c40c:	2303      	movs	r3, #3
 800c40e:	e075      	b.n	800c4fc <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c410:	4b3c      	ldr	r3, [pc, #240]	; (800c504 <HAL_RCC_OscConfig+0x6d4>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d1f0      	bne.n	800c3fe <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6a1b      	ldr	r3, [r3, #32]
 800c420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c424:	d116      	bne.n	800c454 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	689b      	ldr	r3, [r3, #8]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d009      	beq.n	800c442 <HAL_RCC_OscConfig+0x612>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	689b      	ldr	r3, [r3, #8]
 800c432:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c436:	d004      	beq.n	800c442 <HAL_RCC_OscConfig+0x612>
 800c438:	f240 21cf 	movw	r1, #719	; 0x2cf
 800c43c:	4832      	ldr	r0, [pc, #200]	; (800c508 <HAL_RCC_OscConfig+0x6d8>)
 800c43e:	f7fd f87d 	bl	800953c <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800c442:	4b30      	ldr	r3, [pc, #192]	; (800c504 <HAL_RCC_OscConfig+0x6d4>)
 800c444:	685b      	ldr	r3, [r3, #4]
 800c446:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	689b      	ldr	r3, [r3, #8]
 800c44e:	492d      	ldr	r1, [pc, #180]	; (800c504 <HAL_RCC_OscConfig+0x6d4>)
 800c450:	4313      	orrs	r3, r2
 800c452:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c454:	4b2b      	ldr	r3, [pc, #172]	; (800c504 <HAL_RCC_OscConfig+0x6d4>)
 800c456:	685b      	ldr	r3, [r3, #4]
 800c458:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6a19      	ldr	r1, [r3, #32]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c464:	430b      	orrs	r3, r1
 800c466:	4927      	ldr	r1, [pc, #156]	; (800c504 <HAL_RCC_OscConfig+0x6d4>)
 800c468:	4313      	orrs	r3, r2
 800c46a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c46c:	4b27      	ldr	r3, [pc, #156]	; (800c50c <HAL_RCC_OscConfig+0x6dc>)
 800c46e:	2201      	movs	r2, #1
 800c470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c472:	f7fd fc89 	bl	8009d88 <HAL_GetTick>
 800c476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c478:	e008      	b.n	800c48c <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c47a:	f7fd fc85 	bl	8009d88 <HAL_GetTick>
 800c47e:	4602      	mov	r2, r0
 800c480:	693b      	ldr	r3, [r7, #16]
 800c482:	1ad3      	subs	r3, r2, r3
 800c484:	2b02      	cmp	r3, #2
 800c486:	d901      	bls.n	800c48c <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 800c488:	2303      	movs	r3, #3
 800c48a:	e037      	b.n	800c4fc <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c48c:	4b1d      	ldr	r3, [pc, #116]	; (800c504 <HAL_RCC_OscConfig+0x6d4>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c494:	2b00      	cmp	r3, #0
 800c496:	d0f0      	beq.n	800c47a <HAL_RCC_OscConfig+0x64a>
 800c498:	e02f      	b.n	800c4fa <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c49a:	4b1c      	ldr	r3, [pc, #112]	; (800c50c <HAL_RCC_OscConfig+0x6dc>)
 800c49c:	2200      	movs	r2, #0
 800c49e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c4a0:	f7fd fc72 	bl	8009d88 <HAL_GetTick>
 800c4a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c4a6:	e008      	b.n	800c4ba <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c4a8:	f7fd fc6e 	bl	8009d88 <HAL_GetTick>
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	1ad3      	subs	r3, r2, r3
 800c4b2:	2b02      	cmp	r3, #2
 800c4b4:	d901      	bls.n	800c4ba <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 800c4b6:	2303      	movs	r3, #3
 800c4b8:	e020      	b.n	800c4fc <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c4ba:	4b12      	ldr	r3, [pc, #72]	; (800c504 <HAL_RCC_OscConfig+0x6d4>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d1f0      	bne.n	800c4a8 <HAL_RCC_OscConfig+0x678>
 800c4c6:	e018      	b.n	800c4fa <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	69db      	ldr	r3, [r3, #28]
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	d101      	bne.n	800c4d4 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	e013      	b.n	800c4fc <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800c4d4:	4b0b      	ldr	r3, [pc, #44]	; (800c504 <HAL_RCC_OscConfig+0x6d4>)
 800c4d6:	685b      	ldr	r3, [r3, #4]
 800c4d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6a1b      	ldr	r3, [r3, #32]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d106      	bne.n	800c4f6 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d001      	beq.n	800c4fa <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	e000      	b.n	800c4fc <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 800c4fa:	2300      	movs	r3, #0
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3718      	adds	r7, #24
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}
 800c504:	40021000 	.word	0x40021000
 800c508:	0800f930 	.word	0x0800f930
 800c50c:	42420060 	.word	0x42420060

0800c510 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b084      	sub	sp, #16
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d101      	bne.n	800c524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c520:	2301      	movs	r3, #1
 800c522:	e176      	b.n	800c812 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f003 0301 	and.w	r3, r3, #1
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d116      	bne.n	800c55e <HAL_RCC_ClockConfig+0x4e>
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f003 0302 	and.w	r3, r3, #2
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d110      	bne.n	800c55e <HAL_RCC_ClockConfig+0x4e>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f003 0304 	and.w	r3, r3, #4
 800c544:	2b00      	cmp	r3, #0
 800c546:	d10a      	bne.n	800c55e <HAL_RCC_ClockConfig+0x4e>
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f003 0308 	and.w	r3, r3, #8
 800c550:	2b00      	cmp	r3, #0
 800c552:	d104      	bne.n	800c55e <HAL_RCC_ClockConfig+0x4e>
 800c554:	f44f 714e 	mov.w	r1, #824	; 0x338
 800c558:	4874      	ldr	r0, [pc, #464]	; (800c72c <HAL_RCC_ClockConfig+0x21c>)
 800c55a:	f7fc ffef 	bl	800953c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d00a      	beq.n	800c57a <HAL_RCC_ClockConfig+0x6a>
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	2b01      	cmp	r3, #1
 800c568:	d007      	beq.n	800c57a <HAL_RCC_ClockConfig+0x6a>
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	2b02      	cmp	r3, #2
 800c56e:	d004      	beq.n	800c57a <HAL_RCC_ClockConfig+0x6a>
 800c570:	f240 3139 	movw	r1, #825	; 0x339
 800c574:	486d      	ldr	r0, [pc, #436]	; (800c72c <HAL_RCC_ClockConfig+0x21c>)
 800c576:	f7fc ffe1 	bl	800953c <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c57a:	4b6d      	ldr	r3, [pc, #436]	; (800c730 <HAL_RCC_ClockConfig+0x220>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f003 0307 	and.w	r3, r3, #7
 800c582:	683a      	ldr	r2, [r7, #0]
 800c584:	429a      	cmp	r2, r3
 800c586:	d910      	bls.n	800c5aa <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c588:	4b69      	ldr	r3, [pc, #420]	; (800c730 <HAL_RCC_ClockConfig+0x220>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f023 0207 	bic.w	r2, r3, #7
 800c590:	4967      	ldr	r1, [pc, #412]	; (800c730 <HAL_RCC_ClockConfig+0x220>)
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	4313      	orrs	r3, r2
 800c596:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c598:	4b65      	ldr	r3, [pc, #404]	; (800c730 <HAL_RCC_ClockConfig+0x220>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f003 0307 	and.w	r3, r3, #7
 800c5a0:	683a      	ldr	r2, [r7, #0]
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d001      	beq.n	800c5aa <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	e133      	b.n	800c812 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f003 0302 	and.w	r3, r3, #2
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d049      	beq.n	800c64a <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f003 0304 	and.w	r3, r3, #4
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d005      	beq.n	800c5ce <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c5c2:	4b5c      	ldr	r3, [pc, #368]	; (800c734 <HAL_RCC_ClockConfig+0x224>)
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	4a5b      	ldr	r2, [pc, #364]	; (800c734 <HAL_RCC_ClockConfig+0x224>)
 800c5c8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800c5cc:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f003 0308 	and.w	r3, r3, #8
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d005      	beq.n	800c5e6 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c5da:	4b56      	ldr	r3, [pc, #344]	; (800c734 <HAL_RCC_ClockConfig+0x224>)
 800c5dc:	685b      	ldr	r3, [r3, #4]
 800c5de:	4a55      	ldr	r2, [pc, #340]	; (800c734 <HAL_RCC_ClockConfig+0x224>)
 800c5e0:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800c5e4:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	689b      	ldr	r3, [r3, #8]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d024      	beq.n	800c638 <HAL_RCC_ClockConfig+0x128>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	689b      	ldr	r3, [r3, #8]
 800c5f2:	2b80      	cmp	r3, #128	; 0x80
 800c5f4:	d020      	beq.n	800c638 <HAL_RCC_ClockConfig+0x128>
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	689b      	ldr	r3, [r3, #8]
 800c5fa:	2b90      	cmp	r3, #144	; 0x90
 800c5fc:	d01c      	beq.n	800c638 <HAL_RCC_ClockConfig+0x128>
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	689b      	ldr	r3, [r3, #8]
 800c602:	2ba0      	cmp	r3, #160	; 0xa0
 800c604:	d018      	beq.n	800c638 <HAL_RCC_ClockConfig+0x128>
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	689b      	ldr	r3, [r3, #8]
 800c60a:	2bb0      	cmp	r3, #176	; 0xb0
 800c60c:	d014      	beq.n	800c638 <HAL_RCC_ClockConfig+0x128>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	689b      	ldr	r3, [r3, #8]
 800c612:	2bc0      	cmp	r3, #192	; 0xc0
 800c614:	d010      	beq.n	800c638 <HAL_RCC_ClockConfig+0x128>
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	689b      	ldr	r3, [r3, #8]
 800c61a:	2bd0      	cmp	r3, #208	; 0xd0
 800c61c:	d00c      	beq.n	800c638 <HAL_RCC_ClockConfig+0x128>
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	689b      	ldr	r3, [r3, #8]
 800c622:	2be0      	cmp	r3, #224	; 0xe0
 800c624:	d008      	beq.n	800c638 <HAL_RCC_ClockConfig+0x128>
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	689b      	ldr	r3, [r3, #8]
 800c62a:	2bf0      	cmp	r3, #240	; 0xf0
 800c62c:	d004      	beq.n	800c638 <HAL_RCC_ClockConfig+0x128>
 800c62e:	f240 315f 	movw	r1, #863	; 0x35f
 800c632:	483e      	ldr	r0, [pc, #248]	; (800c72c <HAL_RCC_ClockConfig+0x21c>)
 800c634:	f7fc ff82 	bl	800953c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c638:	4b3e      	ldr	r3, [pc, #248]	; (800c734 <HAL_RCC_ClockConfig+0x224>)
 800c63a:	685b      	ldr	r3, [r3, #4]
 800c63c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	689b      	ldr	r3, [r3, #8]
 800c644:	493b      	ldr	r1, [pc, #236]	; (800c734 <HAL_RCC_ClockConfig+0x224>)
 800c646:	4313      	orrs	r3, r2
 800c648:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f003 0301 	and.w	r3, r3, #1
 800c652:	2b00      	cmp	r3, #0
 800c654:	d051      	beq.n	800c6fa <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d00c      	beq.n	800c678 <HAL_RCC_ClockConfig+0x168>
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	2b01      	cmp	r3, #1
 800c664:	d008      	beq.n	800c678 <HAL_RCC_ClockConfig+0x168>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	685b      	ldr	r3, [r3, #4]
 800c66a:	2b02      	cmp	r3, #2
 800c66c:	d004      	beq.n	800c678 <HAL_RCC_ClockConfig+0x168>
 800c66e:	f240 3166 	movw	r1, #870	; 0x366
 800c672:	482e      	ldr	r0, [pc, #184]	; (800c72c <HAL_RCC_ClockConfig+0x21c>)
 800c674:	f7fc ff62 	bl	800953c <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	685b      	ldr	r3, [r3, #4]
 800c67c:	2b01      	cmp	r3, #1
 800c67e:	d107      	bne.n	800c690 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c680:	4b2c      	ldr	r3, [pc, #176]	; (800c734 <HAL_RCC_ClockConfig+0x224>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d115      	bne.n	800c6b8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800c68c:	2301      	movs	r3, #1
 800c68e:	e0c0      	b.n	800c812 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	685b      	ldr	r3, [r3, #4]
 800c694:	2b02      	cmp	r3, #2
 800c696:	d107      	bne.n	800c6a8 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c698:	4b26      	ldr	r3, [pc, #152]	; (800c734 <HAL_RCC_ClockConfig+0x224>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d109      	bne.n	800c6b8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	e0b4      	b.n	800c812 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c6a8:	4b22      	ldr	r3, [pc, #136]	; (800c734 <HAL_RCC_ClockConfig+0x224>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	f003 0302 	and.w	r3, r3, #2
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d101      	bne.n	800c6b8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	e0ac      	b.n	800c812 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c6b8:	4b1e      	ldr	r3, [pc, #120]	; (800c734 <HAL_RCC_ClockConfig+0x224>)
 800c6ba:	685b      	ldr	r3, [r3, #4]
 800c6bc:	f023 0203 	bic.w	r2, r3, #3
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	491b      	ldr	r1, [pc, #108]	; (800c734 <HAL_RCC_ClockConfig+0x224>)
 800c6c6:	4313      	orrs	r3, r2
 800c6c8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c6ca:	f7fd fb5d 	bl	8009d88 <HAL_GetTick>
 800c6ce:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c6d0:	e00a      	b.n	800c6e8 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c6d2:	f7fd fb59 	bl	8009d88 <HAL_GetTick>
 800c6d6:	4602      	mov	r2, r0
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	1ad3      	subs	r3, r2, r3
 800c6dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d901      	bls.n	800c6e8 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 800c6e4:	2303      	movs	r3, #3
 800c6e6:	e094      	b.n	800c812 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c6e8:	4b12      	ldr	r3, [pc, #72]	; (800c734 <HAL_RCC_ClockConfig+0x224>)
 800c6ea:	685b      	ldr	r3, [r3, #4]
 800c6ec:	f003 020c 	and.w	r2, r3, #12
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	685b      	ldr	r3, [r3, #4]
 800c6f4:	009b      	lsls	r3, r3, #2
 800c6f6:	429a      	cmp	r2, r3
 800c6f8:	d1eb      	bne.n	800c6d2 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c6fa:	4b0d      	ldr	r3, [pc, #52]	; (800c730 <HAL_RCC_ClockConfig+0x220>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f003 0307 	and.w	r3, r3, #7
 800c702:	683a      	ldr	r2, [r7, #0]
 800c704:	429a      	cmp	r2, r3
 800c706:	d217      	bcs.n	800c738 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c708:	4b09      	ldr	r3, [pc, #36]	; (800c730 <HAL_RCC_ClockConfig+0x220>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f023 0207 	bic.w	r2, r3, #7
 800c710:	4907      	ldr	r1, [pc, #28]	; (800c730 <HAL_RCC_ClockConfig+0x220>)
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	4313      	orrs	r3, r2
 800c716:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c718:	4b05      	ldr	r3, [pc, #20]	; (800c730 <HAL_RCC_ClockConfig+0x220>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f003 0307 	and.w	r3, r3, #7
 800c720:	683a      	ldr	r2, [r7, #0]
 800c722:	429a      	cmp	r2, r3
 800c724:	d008      	beq.n	800c738 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 800c726:	2301      	movs	r3, #1
 800c728:	e073      	b.n	800c812 <HAL_RCC_ClockConfig+0x302>
 800c72a:	bf00      	nop
 800c72c:	0800f930 	.word	0x0800f930
 800c730:	40022000 	.word	0x40022000
 800c734:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f003 0304 	and.w	r3, r3, #4
 800c740:	2b00      	cmp	r3, #0
 800c742:	d025      	beq.n	800c790 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	68db      	ldr	r3, [r3, #12]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d018      	beq.n	800c77e <HAL_RCC_ClockConfig+0x26e>
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	68db      	ldr	r3, [r3, #12]
 800c750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c754:	d013      	beq.n	800c77e <HAL_RCC_ClockConfig+0x26e>
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	68db      	ldr	r3, [r3, #12]
 800c75a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800c75e:	d00e      	beq.n	800c77e <HAL_RCC_ClockConfig+0x26e>
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	68db      	ldr	r3, [r3, #12]
 800c764:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c768:	d009      	beq.n	800c77e <HAL_RCC_ClockConfig+0x26e>
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	68db      	ldr	r3, [r3, #12]
 800c76e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c772:	d004      	beq.n	800c77e <HAL_RCC_ClockConfig+0x26e>
 800c774:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 800c778:	4828      	ldr	r0, [pc, #160]	; (800c81c <HAL_RCC_ClockConfig+0x30c>)
 800c77a:	f7fc fedf 	bl	800953c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c77e:	4b28      	ldr	r3, [pc, #160]	; (800c820 <HAL_RCC_ClockConfig+0x310>)
 800c780:	685b      	ldr	r3, [r3, #4]
 800c782:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	68db      	ldr	r3, [r3, #12]
 800c78a:	4925      	ldr	r1, [pc, #148]	; (800c820 <HAL_RCC_ClockConfig+0x310>)
 800c78c:	4313      	orrs	r3, r2
 800c78e:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	f003 0308 	and.w	r3, r3, #8
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d026      	beq.n	800c7ea <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	691b      	ldr	r3, [r3, #16]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d018      	beq.n	800c7d6 <HAL_RCC_ClockConfig+0x2c6>
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	691b      	ldr	r3, [r3, #16]
 800c7a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7ac:	d013      	beq.n	800c7d6 <HAL_RCC_ClockConfig+0x2c6>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	691b      	ldr	r3, [r3, #16]
 800c7b2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800c7b6:	d00e      	beq.n	800c7d6 <HAL_RCC_ClockConfig+0x2c6>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	691b      	ldr	r3, [r3, #16]
 800c7bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c7c0:	d009      	beq.n	800c7d6 <HAL_RCC_ClockConfig+0x2c6>
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	691b      	ldr	r3, [r3, #16]
 800c7c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c7ca:	d004      	beq.n	800c7d6 <HAL_RCC_ClockConfig+0x2c6>
 800c7cc:	f240 31ab 	movw	r1, #939	; 0x3ab
 800c7d0:	4812      	ldr	r0, [pc, #72]	; (800c81c <HAL_RCC_ClockConfig+0x30c>)
 800c7d2:	f7fc feb3 	bl	800953c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c7d6:	4b12      	ldr	r3, [pc, #72]	; (800c820 <HAL_RCC_ClockConfig+0x310>)
 800c7d8:	685b      	ldr	r3, [r3, #4]
 800c7da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	691b      	ldr	r3, [r3, #16]
 800c7e2:	00db      	lsls	r3, r3, #3
 800c7e4:	490e      	ldr	r1, [pc, #56]	; (800c820 <HAL_RCC_ClockConfig+0x310>)
 800c7e6:	4313      	orrs	r3, r2
 800c7e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c7ea:	f000 f821 	bl	800c830 <HAL_RCC_GetSysClockFreq>
 800c7ee:	4601      	mov	r1, r0
 800c7f0:	4b0b      	ldr	r3, [pc, #44]	; (800c820 <HAL_RCC_ClockConfig+0x310>)
 800c7f2:	685b      	ldr	r3, [r3, #4]
 800c7f4:	091b      	lsrs	r3, r3, #4
 800c7f6:	f003 030f 	and.w	r3, r3, #15
 800c7fa:	4a0a      	ldr	r2, [pc, #40]	; (800c824 <HAL_RCC_ClockConfig+0x314>)
 800c7fc:	5cd3      	ldrb	r3, [r2, r3]
 800c7fe:	fa21 f303 	lsr.w	r3, r1, r3
 800c802:	4a09      	ldr	r2, [pc, #36]	; (800c828 <HAL_RCC_ClockConfig+0x318>)
 800c804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800c806:	4b09      	ldr	r3, [pc, #36]	; (800c82c <HAL_RCC_ClockConfig+0x31c>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4618      	mov	r0, r3
 800c80c:	f7fd fa7a 	bl	8009d04 <HAL_InitTick>

  return HAL_OK;
 800c810:	2300      	movs	r3, #0
}
 800c812:	4618      	mov	r0, r3
 800c814:	3710      	adds	r7, #16
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}
 800c81a:	bf00      	nop
 800c81c:	0800f930 	.word	0x0800f930
 800c820:	40021000 	.word	0x40021000
 800c824:	08012578 	.word	0x08012578
 800c828:	2000009c 	.word	0x2000009c
 800c82c:	200000a0 	.word	0x200000a0

0800c830 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c830:	b490      	push	{r4, r7}
 800c832:	b08a      	sub	sp, #40	; 0x28
 800c834:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800c836:	4b2a      	ldr	r3, [pc, #168]	; (800c8e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800c838:	1d3c      	adds	r4, r7, #4
 800c83a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c83c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800c840:	4b28      	ldr	r3, [pc, #160]	; (800c8e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800c842:	881b      	ldrh	r3, [r3, #0]
 800c844:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800c846:	2300      	movs	r3, #0
 800c848:	61fb      	str	r3, [r7, #28]
 800c84a:	2300      	movs	r3, #0
 800c84c:	61bb      	str	r3, [r7, #24]
 800c84e:	2300      	movs	r3, #0
 800c850:	627b      	str	r3, [r7, #36]	; 0x24
 800c852:	2300      	movs	r3, #0
 800c854:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800c856:	2300      	movs	r3, #0
 800c858:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800c85a:	4b23      	ldr	r3, [pc, #140]	; (800c8e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c85c:	685b      	ldr	r3, [r3, #4]
 800c85e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800c860:	69fb      	ldr	r3, [r7, #28]
 800c862:	f003 030c 	and.w	r3, r3, #12
 800c866:	2b04      	cmp	r3, #4
 800c868:	d002      	beq.n	800c870 <HAL_RCC_GetSysClockFreq+0x40>
 800c86a:	2b08      	cmp	r3, #8
 800c86c:	d003      	beq.n	800c876 <HAL_RCC_GetSysClockFreq+0x46>
 800c86e:	e02d      	b.n	800c8cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800c870:	4b1e      	ldr	r3, [pc, #120]	; (800c8ec <HAL_RCC_GetSysClockFreq+0xbc>)
 800c872:	623b      	str	r3, [r7, #32]
      break;
 800c874:	e02d      	b.n	800c8d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800c876:	69fb      	ldr	r3, [r7, #28]
 800c878:	0c9b      	lsrs	r3, r3, #18
 800c87a:	f003 030f 	and.w	r3, r3, #15
 800c87e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c882:	4413      	add	r3, r2
 800c884:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800c888:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800c88a:	69fb      	ldr	r3, [r7, #28]
 800c88c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c890:	2b00      	cmp	r3, #0
 800c892:	d013      	beq.n	800c8bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800c894:	4b14      	ldr	r3, [pc, #80]	; (800c8e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	0c5b      	lsrs	r3, r3, #17
 800c89a:	f003 0301 	and.w	r3, r3, #1
 800c89e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c8a2:	4413      	add	r3, r2
 800c8a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800c8a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	4a0f      	ldr	r2, [pc, #60]	; (800c8ec <HAL_RCC_GetSysClockFreq+0xbc>)
 800c8ae:	fb02 f203 	mul.w	r2, r2, r3
 800c8b2:	69bb      	ldr	r3, [r7, #24]
 800c8b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8b8:	627b      	str	r3, [r7, #36]	; 0x24
 800c8ba:	e004      	b.n	800c8c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	4a0c      	ldr	r2, [pc, #48]	; (800c8f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800c8c0:	fb02 f303 	mul.w	r3, r2, r3
 800c8c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800c8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c8:	623b      	str	r3, [r7, #32]
      break;
 800c8ca:	e002      	b.n	800c8d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800c8cc:	4b07      	ldr	r3, [pc, #28]	; (800c8ec <HAL_RCC_GetSysClockFreq+0xbc>)
 800c8ce:	623b      	str	r3, [r7, #32]
      break;
 800c8d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c8d2:	6a3b      	ldr	r3, [r7, #32]
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3728      	adds	r7, #40	; 0x28
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bc90      	pop	{r4, r7}
 800c8dc:	4770      	bx	lr
 800c8de:	bf00      	nop
 800c8e0:	0800f968 	.word	0x0800f968
 800c8e4:	0800f978 	.word	0x0800f978
 800c8e8:	40021000 	.word	0x40021000
 800c8ec:	007a1200 	.word	0x007a1200
 800c8f0:	003d0900 	.word	0x003d0900

0800c8f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c8f8:	4b02      	ldr	r3, [pc, #8]	; (800c904 <HAL_RCC_GetHCLKFreq+0x10>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bc80      	pop	{r7}
 800c902:	4770      	bx	lr
 800c904:	2000009c 	.word	0x2000009c

0800c908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c90c:	f7ff fff2 	bl	800c8f4 <HAL_RCC_GetHCLKFreq>
 800c910:	4601      	mov	r1, r0
 800c912:	4b05      	ldr	r3, [pc, #20]	; (800c928 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c914:	685b      	ldr	r3, [r3, #4]
 800c916:	0a1b      	lsrs	r3, r3, #8
 800c918:	f003 0307 	and.w	r3, r3, #7
 800c91c:	4a03      	ldr	r2, [pc, #12]	; (800c92c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c91e:	5cd3      	ldrb	r3, [r2, r3]
 800c920:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c924:	4618      	mov	r0, r3
 800c926:	bd80      	pop	{r7, pc}
 800c928:	40021000 	.word	0x40021000
 800c92c:	08012588 	.word	0x08012588

0800c930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c934:	f7ff ffde 	bl	800c8f4 <HAL_RCC_GetHCLKFreq>
 800c938:	4601      	mov	r1, r0
 800c93a:	4b05      	ldr	r3, [pc, #20]	; (800c950 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c93c:	685b      	ldr	r3, [r3, #4]
 800c93e:	0adb      	lsrs	r3, r3, #11
 800c940:	f003 0307 	and.w	r3, r3, #7
 800c944:	4a03      	ldr	r2, [pc, #12]	; (800c954 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c946:	5cd3      	ldrb	r3, [r2, r3]
 800c948:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	bd80      	pop	{r7, pc}
 800c950:	40021000 	.word	0x40021000
 800c954:	08012588 	.word	0x08012588

0800c958 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800c958:	b480      	push	{r7}
 800c95a:	b085      	sub	sp, #20
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800c960:	4b0a      	ldr	r3, [pc, #40]	; (800c98c <RCC_Delay+0x34>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4a0a      	ldr	r2, [pc, #40]	; (800c990 <RCC_Delay+0x38>)
 800c966:	fba2 2303 	umull	r2, r3, r2, r3
 800c96a:	0a5b      	lsrs	r3, r3, #9
 800c96c:	687a      	ldr	r2, [r7, #4]
 800c96e:	fb02 f303 	mul.w	r3, r2, r3
 800c972:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800c974:	bf00      	nop
  }
  while (Delay --);
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	1e5a      	subs	r2, r3, #1
 800c97a:	60fa      	str	r2, [r7, #12]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d1f9      	bne.n	800c974 <RCC_Delay+0x1c>
}
 800c980:	bf00      	nop
 800c982:	3714      	adds	r7, #20
 800c984:	46bd      	mov	sp, r7
 800c986:	bc80      	pop	{r7}
 800c988:	4770      	bx	lr
 800c98a:	bf00      	nop
 800c98c:	2000009c 	.word	0x2000009c
 800c990:	10624dd3 	.word	0x10624dd3

0800c994 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b086      	sub	sp, #24
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800c99c:	2300      	movs	r3, #0
 800c99e:	613b      	str	r3, [r7, #16]
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f003 0301 	and.w	r3, r3, #1
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d10f      	bne.n	800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f003 0302 	and.w	r3, r3, #2
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d109      	bne.n	800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	f003 0310 	and.w	r3, r3, #16
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d103      	bne.n	800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800c9c8:	216c      	movs	r1, #108	; 0x6c
 800c9ca:	4873      	ldr	r0, [pc, #460]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800c9cc:	f7fc fdb6 	bl	800953c <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f003 0301 	and.w	r3, r3, #1
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	f000 8095 	beq.w	800cb08 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	685b      	ldr	r3, [r3, #4]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d012      	beq.n	800ca0c <HAL_RCCEx_PeriphCLKConfig+0x78>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	685b      	ldr	r3, [r3, #4]
 800c9ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9ee:	d00d      	beq.n	800ca0c <HAL_RCCEx_PeriphCLKConfig+0x78>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	685b      	ldr	r3, [r3, #4]
 800c9f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9f8:	d008      	beq.n	800ca0c <HAL_RCCEx_PeriphCLKConfig+0x78>
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	685b      	ldr	r3, [r3, #4]
 800c9fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca02:	d003      	beq.n	800ca0c <HAL_RCCEx_PeriphCLKConfig+0x78>
 800ca04:	2172      	movs	r1, #114	; 0x72
 800ca06:	4864      	ldr	r0, [pc, #400]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800ca08:	f7fc fd98 	bl	800953c <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ca10:	4b62      	ldr	r3, [pc, #392]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800ca12:	69db      	ldr	r3, [r3, #28]
 800ca14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d10d      	bne.n	800ca38 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ca1c:	4b5f      	ldr	r3, [pc, #380]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800ca1e:	69db      	ldr	r3, [r3, #28]
 800ca20:	4a5e      	ldr	r2, [pc, #376]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800ca22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca26:	61d3      	str	r3, [r2, #28]
 800ca28:	4b5c      	ldr	r3, [pc, #368]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800ca2a:	69db      	ldr	r3, [r3, #28]
 800ca2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca30:	60bb      	str	r3, [r7, #8]
 800ca32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ca34:	2301      	movs	r3, #1
 800ca36:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ca38:	4b59      	ldr	r3, [pc, #356]	; (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d118      	bne.n	800ca76 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ca44:	4b56      	ldr	r3, [pc, #344]	; (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	4a55      	ldr	r2, [pc, #340]	; (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800ca4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ca50:	f7fd f99a 	bl	8009d88 <HAL_GetTick>
 800ca54:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ca56:	e008      	b.n	800ca6a <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ca58:	f7fd f996 	bl	8009d88 <HAL_GetTick>
 800ca5c:	4602      	mov	r2, r0
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	1ad3      	subs	r3, r2, r3
 800ca62:	2b64      	cmp	r3, #100	; 0x64
 800ca64:	d901      	bls.n	800ca6a <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 800ca66:	2303      	movs	r3, #3
 800ca68:	e092      	b.n	800cb90 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ca6a:	4b4d      	ldr	r3, [pc, #308]	; (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d0f0      	beq.n	800ca58 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ca76:	4b49      	ldr	r3, [pc, #292]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800ca78:	6a1b      	ldr	r3, [r3, #32]
 800ca7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca7e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d02e      	beq.n	800cae4 <HAL_RCCEx_PeriphCLKConfig+0x150>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	685b      	ldr	r3, [r3, #4]
 800ca8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca8e:	68fa      	ldr	r2, [r7, #12]
 800ca90:	429a      	cmp	r2, r3
 800ca92:	d027      	beq.n	800cae4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ca94:	4b41      	ldr	r3, [pc, #260]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800ca96:	6a1b      	ldr	r3, [r3, #32]
 800ca98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca9c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ca9e:	4b41      	ldr	r3, [pc, #260]	; (800cba4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800caa0:	2201      	movs	r2, #1
 800caa2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800caa4:	4b3f      	ldr	r3, [pc, #252]	; (800cba4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800caa6:	2200      	movs	r2, #0
 800caa8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800caaa:	4a3c      	ldr	r2, [pc, #240]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f003 0301 	and.w	r3, r3, #1
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d014      	beq.n	800cae4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800caba:	f7fd f965 	bl	8009d88 <HAL_GetTick>
 800cabe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cac0:	e00a      	b.n	800cad8 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cac2:	f7fd f961 	bl	8009d88 <HAL_GetTick>
 800cac6:	4602      	mov	r2, r0
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	1ad3      	subs	r3, r2, r3
 800cacc:	f241 3288 	movw	r2, #5000	; 0x1388
 800cad0:	4293      	cmp	r3, r2
 800cad2:	d901      	bls.n	800cad8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 800cad4:	2303      	movs	r3, #3
 800cad6:	e05b      	b.n	800cb90 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cad8:	4b30      	ldr	r3, [pc, #192]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800cada:	6a1b      	ldr	r3, [r3, #32]
 800cadc:	f003 0302 	and.w	r3, r3, #2
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d0ee      	beq.n	800cac2 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cae4:	4b2d      	ldr	r3, [pc, #180]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800cae6:	6a1b      	ldr	r3, [r3, #32]
 800cae8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	492a      	ldr	r1, [pc, #168]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800caf2:	4313      	orrs	r3, r2
 800caf4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800caf6:	7dfb      	ldrb	r3, [r7, #23]
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d105      	bne.n	800cb08 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cafc:	4b27      	ldr	r3, [pc, #156]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800cafe:	69db      	ldr	r3, [r3, #28]
 800cb00:	4a26      	ldr	r2, [pc, #152]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800cb02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb06:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f003 0302 	and.w	r3, r3, #2
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d01f      	beq.n	800cb54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	689b      	ldr	r3, [r3, #8]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d012      	beq.n	800cb42 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	689b      	ldr	r3, [r3, #8]
 800cb20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cb24:	d00d      	beq.n	800cb42 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	689b      	ldr	r3, [r3, #8]
 800cb2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb2e:	d008      	beq.n	800cb42 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	689b      	ldr	r3, [r3, #8]
 800cb34:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800cb38:	d003      	beq.n	800cb42 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800cb3a:	21b9      	movs	r1, #185	; 0xb9
 800cb3c:	4816      	ldr	r0, [pc, #88]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800cb3e:	f7fc fcfd 	bl	800953c <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cb42:	4b16      	ldr	r3, [pc, #88]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800cb44:	685b      	ldr	r3, [r3, #4]
 800cb46:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	689b      	ldr	r3, [r3, #8]
 800cb4e:	4913      	ldr	r1, [pc, #76]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800cb50:	4313      	orrs	r3, r2
 800cb52:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f003 0310 	and.w	r3, r3, #16
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d016      	beq.n	800cb8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	68db      	ldr	r3, [r3, #12]
 800cb64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cb68:	d008      	beq.n	800cb7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	68db      	ldr	r3, [r3, #12]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d004      	beq.n	800cb7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800cb72:	f240 1115 	movw	r1, #277	; 0x115
 800cb76:	4808      	ldr	r0, [pc, #32]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800cb78:	f7fc fce0 	bl	800953c <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cb7c:	4b07      	ldr	r3, [pc, #28]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	68db      	ldr	r3, [r3, #12]
 800cb88:	4904      	ldr	r1, [pc, #16]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800cb8a:	4313      	orrs	r3, r2
 800cb8c:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800cb8e:	2300      	movs	r3, #0
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3718      	adds	r7, #24
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}
 800cb98:	0800f97c 	.word	0x0800f97c
 800cb9c:	40021000 	.word	0x40021000
 800cba0:	40007000 	.word	0x40007000
 800cba4:	42420440 	.word	0x42420440

0800cba8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d101      	bne.n	800cbba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	e0fd      	b.n	800cdb6 <HAL_SPI_Init+0x20e>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	4a80      	ldr	r2, [pc, #512]	; (800cdc0 <HAL_SPI_Init+0x218>)
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	d009      	beq.n	800cbd8 <HAL_SPI_Init+0x30>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	4a7e      	ldr	r2, [pc, #504]	; (800cdc4 <HAL_SPI_Init+0x21c>)
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d004      	beq.n	800cbd8 <HAL_SPI_Init+0x30>
 800cbce:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800cbd2:	487d      	ldr	r0, [pc, #500]	; (800cdc8 <HAL_SPI_Init+0x220>)
 800cbd4:	f7fc fcb2 	bl	800953c <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	685b      	ldr	r3, [r3, #4]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d009      	beq.n	800cbf4 <HAL_SPI_Init+0x4c>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	685b      	ldr	r3, [r3, #4]
 800cbe4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cbe8:	d004      	beq.n	800cbf4 <HAL_SPI_Init+0x4c>
 800cbea:	f240 1159 	movw	r1, #345	; 0x159
 800cbee:	4876      	ldr	r0, [pc, #472]	; (800cdc8 <HAL_SPI_Init+0x220>)
 800cbf0:	f7fc fca4 	bl	800953c <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	689b      	ldr	r3, [r3, #8]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d00e      	beq.n	800cc1a <HAL_SPI_Init+0x72>
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	689b      	ldr	r3, [r3, #8]
 800cc00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc04:	d009      	beq.n	800cc1a <HAL_SPI_Init+0x72>
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	689b      	ldr	r3, [r3, #8]
 800cc0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc0e:	d004      	beq.n	800cc1a <HAL_SPI_Init+0x72>
 800cc10:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 800cc14:	486c      	ldr	r0, [pc, #432]	; (800cdc8 <HAL_SPI_Init+0x220>)
 800cc16:	f7fc fc91 	bl	800953c <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	68db      	ldr	r3, [r3, #12]
 800cc1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc22:	d008      	beq.n	800cc36 <HAL_SPI_Init+0x8e>
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	68db      	ldr	r3, [r3, #12]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d004      	beq.n	800cc36 <HAL_SPI_Init+0x8e>
 800cc2c:	f240 115b 	movw	r1, #347	; 0x15b
 800cc30:	4865      	ldr	r0, [pc, #404]	; (800cdc8 <HAL_SPI_Init+0x220>)
 800cc32:	f7fc fc83 	bl	800953c <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	699b      	ldr	r3, [r3, #24]
 800cc3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc3e:	d00d      	beq.n	800cc5c <HAL_SPI_Init+0xb4>
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	699b      	ldr	r3, [r3, #24]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d009      	beq.n	800cc5c <HAL_SPI_Init+0xb4>
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	699b      	ldr	r3, [r3, #24]
 800cc4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cc50:	d004      	beq.n	800cc5c <HAL_SPI_Init+0xb4>
 800cc52:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800cc56:	485c      	ldr	r0, [pc, #368]	; (800cdc8 <HAL_SPI_Init+0x220>)
 800cc58:	f7fc fc70 	bl	800953c <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	69db      	ldr	r3, [r3, #28]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d020      	beq.n	800cca6 <HAL_SPI_Init+0xfe>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	69db      	ldr	r3, [r3, #28]
 800cc68:	2b08      	cmp	r3, #8
 800cc6a:	d01c      	beq.n	800cca6 <HAL_SPI_Init+0xfe>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	69db      	ldr	r3, [r3, #28]
 800cc70:	2b10      	cmp	r3, #16
 800cc72:	d018      	beq.n	800cca6 <HAL_SPI_Init+0xfe>
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	69db      	ldr	r3, [r3, #28]
 800cc78:	2b18      	cmp	r3, #24
 800cc7a:	d014      	beq.n	800cca6 <HAL_SPI_Init+0xfe>
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	69db      	ldr	r3, [r3, #28]
 800cc80:	2b20      	cmp	r3, #32
 800cc82:	d010      	beq.n	800cca6 <HAL_SPI_Init+0xfe>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	69db      	ldr	r3, [r3, #28]
 800cc88:	2b28      	cmp	r3, #40	; 0x28
 800cc8a:	d00c      	beq.n	800cca6 <HAL_SPI_Init+0xfe>
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	69db      	ldr	r3, [r3, #28]
 800cc90:	2b30      	cmp	r3, #48	; 0x30
 800cc92:	d008      	beq.n	800cca6 <HAL_SPI_Init+0xfe>
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	69db      	ldr	r3, [r3, #28]
 800cc98:	2b38      	cmp	r3, #56	; 0x38
 800cc9a:	d004      	beq.n	800cca6 <HAL_SPI_Init+0xfe>
 800cc9c:	f240 115d 	movw	r1, #349	; 0x15d
 800cca0:	4849      	ldr	r0, [pc, #292]	; (800cdc8 <HAL_SPI_Init+0x220>)
 800cca2:	f7fc fc4b 	bl	800953c <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6a1b      	ldr	r3, [r3, #32]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d008      	beq.n	800ccc0 <HAL_SPI_Init+0x118>
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6a1b      	ldr	r3, [r3, #32]
 800ccb2:	2b80      	cmp	r3, #128	; 0x80
 800ccb4:	d004      	beq.n	800ccc0 <HAL_SPI_Init+0x118>
 800ccb6:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800ccba:	4843      	ldr	r0, [pc, #268]	; (800cdc8 <HAL_SPI_Init+0x220>)
 800ccbc:	f7fc fc3e 	bl	800953c <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d004      	beq.n	800ccd2 <HAL_SPI_Init+0x12a>
 800ccc8:	f240 1161 	movw	r1, #353	; 0x161
 800cccc:	483e      	ldr	r0, [pc, #248]	; (800cdc8 <HAL_SPI_Init+0x220>)
 800ccce:	f7fc fc35 	bl	800953c <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d119      	bne.n	800cd0e <HAL_SPI_Init+0x166>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	691b      	ldr	r3, [r3, #16]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d008      	beq.n	800ccf4 <HAL_SPI_Init+0x14c>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	691b      	ldr	r3, [r3, #16]
 800cce6:	2b02      	cmp	r3, #2
 800cce8:	d004      	beq.n	800ccf4 <HAL_SPI_Init+0x14c>
 800ccea:	f44f 71b2 	mov.w	r1, #356	; 0x164
 800ccee:	4836      	ldr	r0, [pc, #216]	; (800cdc8 <HAL_SPI_Init+0x220>)
 800ccf0:	f7fc fc24 	bl	800953c <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	695b      	ldr	r3, [r3, #20]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d008      	beq.n	800cd0e <HAL_SPI_Init+0x166>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	695b      	ldr	r3, [r3, #20]
 800cd00:	2b01      	cmp	r3, #1
 800cd02:	d004      	beq.n	800cd0e <HAL_SPI_Init+0x166>
 800cd04:	f240 1165 	movw	r1, #357	; 0x165
 800cd08:	482f      	ldr	r0, [pc, #188]	; (800cdc8 <HAL_SPI_Init+0x220>)
 800cd0a:	f7fc fc17 	bl	800953c <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2200      	movs	r2, #0
 800cd12:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cd1a:	b2db      	uxtb	r3, r3
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d106      	bne.n	800cd2e <HAL_SPI_Init+0x186>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2200      	movs	r2, #0
 800cd24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f7fc fc49 	bl	80095c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2202      	movs	r2, #2
 800cd32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	681a      	ldr	r2, [r3, #0]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cd44:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	685a      	ldr	r2, [r3, #4]
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	689b      	ldr	r3, [r3, #8]
 800cd4e:	431a      	orrs	r2, r3
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	68db      	ldr	r3, [r3, #12]
 800cd54:	431a      	orrs	r2, r3
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	691b      	ldr	r3, [r3, #16]
 800cd5a:	431a      	orrs	r2, r3
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	695b      	ldr	r3, [r3, #20]
 800cd60:	431a      	orrs	r2, r3
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	699b      	ldr	r3, [r3, #24]
 800cd66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cd6a:	431a      	orrs	r2, r3
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	69db      	ldr	r3, [r3, #28]
 800cd70:	431a      	orrs	r2, r3
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6a1b      	ldr	r3, [r3, #32]
 800cd76:	ea42 0103 	orr.w	r1, r2, r3
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	430a      	orrs	r2, r1
 800cd84:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	699b      	ldr	r3, [r3, #24]
 800cd8a:	0c1a      	lsrs	r2, r3, #16
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	f002 0204 	and.w	r2, r2, #4
 800cd94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	69da      	ldr	r2, [r3, #28]
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cda4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2200      	movs	r2, #0
 800cdaa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2201      	movs	r2, #1
 800cdb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800cdb4:	2300      	movs	r3, #0
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3708      	adds	r7, #8
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}
 800cdbe:	bf00      	nop
 800cdc0:	40013000 	.word	0x40013000
 800cdc4:	40003800 	.word	0x40003800
 800cdc8:	0800f9cc 	.word	0x0800f9cc

0800cdcc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b088      	sub	sp, #32
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	60f8      	str	r0, [r7, #12]
 800cdd4:	60b9      	str	r1, [r7, #8]
 800cdd6:	603b      	str	r3, [r7, #0]
 800cdd8:	4613      	mov	r3, r2
 800cdda:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cddc:	2300      	movs	r3, #0
 800cdde:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	689b      	ldr	r3, [r3, #8]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d009      	beq.n	800cdfc <HAL_SPI_Transmit+0x30>
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	689b      	ldr	r3, [r3, #8]
 800cdec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cdf0:	d004      	beq.n	800cdfc <HAL_SPI_Transmit+0x30>
 800cdf2:	f240 310a 	movw	r1, #778	; 0x30a
 800cdf6:	4896      	ldr	r0, [pc, #600]	; (800d050 <HAL_SPI_Transmit+0x284>)
 800cdf8:	f7fc fba0 	bl	800953c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d101      	bne.n	800ce0a <HAL_SPI_Transmit+0x3e>
 800ce06:	2302      	movs	r3, #2
 800ce08:	e11e      	b.n	800d048 <HAL_SPI_Transmit+0x27c>
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	2201      	movs	r2, #1
 800ce0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ce12:	f7fc ffb9 	bl	8009d88 <HAL_GetTick>
 800ce16:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ce18:	88fb      	ldrh	r3, [r7, #6]
 800ce1a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ce22:	b2db      	uxtb	r3, r3
 800ce24:	2b01      	cmp	r3, #1
 800ce26:	d002      	beq.n	800ce2e <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 800ce28:	2302      	movs	r3, #2
 800ce2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ce2c:	e103      	b.n	800d036 <HAL_SPI_Transmit+0x26a>
  }

  if ((pData == NULL) || (Size == 0U))
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d002      	beq.n	800ce3a <HAL_SPI_Transmit+0x6e>
 800ce34:	88fb      	ldrh	r3, [r7, #6]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d102      	bne.n	800ce40 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ce3e:	e0fa      	b.n	800d036 <HAL_SPI_Transmit+0x26a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	2203      	movs	r2, #3
 800ce44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	68ba      	ldr	r2, [r7, #8]
 800ce52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	88fa      	ldrh	r2, [r7, #6]
 800ce58:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	88fa      	ldrh	r2, [r7, #6]
 800ce5e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	2200      	movs	r2, #0
 800ce64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	2200      	movs	r2, #0
 800ce76:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	689b      	ldr	r3, [r3, #8]
 800ce82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce86:	d107      	bne.n	800ce98 <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	681a      	ldr	r2, [r3, #0]
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ce96:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cea2:	2b40      	cmp	r3, #64	; 0x40
 800cea4:	d007      	beq.n	800ceb6 <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	681a      	ldr	r2, [r3, #0]
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ceb4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	68db      	ldr	r3, [r3, #12]
 800ceba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cebe:	d14b      	bne.n	800cf58 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	685b      	ldr	r3, [r3, #4]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d002      	beq.n	800cece <HAL_SPI_Transmit+0x102>
 800cec8:	8afb      	ldrh	r3, [r7, #22]
 800ceca:	2b01      	cmp	r3, #1
 800cecc:	d13e      	bne.n	800cf4c <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ced2:	881a      	ldrh	r2, [r3, #0]
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cede:	1c9a      	adds	r2, r3, #2
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cee8:	b29b      	uxth	r3, r3
 800ceea:	3b01      	subs	r3, #1
 800ceec:	b29a      	uxth	r2, r3
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800cef2:	e02b      	b.n	800cf4c <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	689b      	ldr	r3, [r3, #8]
 800cefa:	f003 0302 	and.w	r3, r3, #2
 800cefe:	2b02      	cmp	r3, #2
 800cf00:	d112      	bne.n	800cf28 <HAL_SPI_Transmit+0x15c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf06:	881a      	ldrh	r2, [r3, #0]
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf12:	1c9a      	adds	r2, r3, #2
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cf1c:	b29b      	uxth	r3, r3
 800cf1e:	3b01      	subs	r3, #1
 800cf20:	b29a      	uxth	r2, r3
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	86da      	strh	r2, [r3, #54]	; 0x36
 800cf26:	e011      	b.n	800cf4c <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cf28:	f7fc ff2e 	bl	8009d88 <HAL_GetTick>
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	69bb      	ldr	r3, [r7, #24]
 800cf30:	1ad3      	subs	r3, r2, r3
 800cf32:	683a      	ldr	r2, [r7, #0]
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d803      	bhi.n	800cf40 <HAL_SPI_Transmit+0x174>
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf3e:	d102      	bne.n	800cf46 <HAL_SPI_Transmit+0x17a>
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d102      	bne.n	800cf4c <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800cf46:	2303      	movs	r3, #3
 800cf48:	77fb      	strb	r3, [r7, #31]
          goto error;
 800cf4a:	e074      	b.n	800d036 <HAL_SPI_Transmit+0x26a>
    while (hspi->TxXferCount > 0U)
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cf50:	b29b      	uxth	r3, r3
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d1ce      	bne.n	800cef4 <HAL_SPI_Transmit+0x128>
 800cf56:	e04c      	b.n	800cff2 <HAL_SPI_Transmit+0x226>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d002      	beq.n	800cf66 <HAL_SPI_Transmit+0x19a>
 800cf60:	8afb      	ldrh	r3, [r7, #22]
 800cf62:	2b01      	cmp	r3, #1
 800cf64:	d140      	bne.n	800cfe8 <HAL_SPI_Transmit+0x21c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	330c      	adds	r3, #12
 800cf70:	7812      	ldrb	r2, [r2, #0]
 800cf72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf78:	1c5a      	adds	r2, r3, #1
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cf82:	b29b      	uxth	r3, r3
 800cf84:	3b01      	subs	r3, #1
 800cf86:	b29a      	uxth	r2, r3
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800cf8c:	e02c      	b.n	800cfe8 <HAL_SPI_Transmit+0x21c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	689b      	ldr	r3, [r3, #8]
 800cf94:	f003 0302 	and.w	r3, r3, #2
 800cf98:	2b02      	cmp	r3, #2
 800cf9a:	d113      	bne.n	800cfc4 <HAL_SPI_Transmit+0x1f8>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	330c      	adds	r3, #12
 800cfa6:	7812      	ldrb	r2, [r2, #0]
 800cfa8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfae:	1c5a      	adds	r2, r3, #1
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cfb8:	b29b      	uxth	r3, r3
 800cfba:	3b01      	subs	r3, #1
 800cfbc:	b29a      	uxth	r2, r3
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	86da      	strh	r2, [r3, #54]	; 0x36
 800cfc2:	e011      	b.n	800cfe8 <HAL_SPI_Transmit+0x21c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cfc4:	f7fc fee0 	bl	8009d88 <HAL_GetTick>
 800cfc8:	4602      	mov	r2, r0
 800cfca:	69bb      	ldr	r3, [r7, #24]
 800cfcc:	1ad3      	subs	r3, r2, r3
 800cfce:	683a      	ldr	r2, [r7, #0]
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	d803      	bhi.n	800cfdc <HAL_SPI_Transmit+0x210>
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfda:	d102      	bne.n	800cfe2 <HAL_SPI_Transmit+0x216>
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d102      	bne.n	800cfe8 <HAL_SPI_Transmit+0x21c>
        {
          errorcode = HAL_TIMEOUT;
 800cfe2:	2303      	movs	r3, #3
 800cfe4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800cfe6:	e026      	b.n	800d036 <HAL_SPI_Transmit+0x26a>
    while (hspi->TxXferCount > 0U)
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d1cd      	bne.n	800cf8e <HAL_SPI_Transmit+0x1c2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cff2:	69ba      	ldr	r2, [r7, #24]
 800cff4:	6839      	ldr	r1, [r7, #0]
 800cff6:	68f8      	ldr	r0, [r7, #12]
 800cff8:	f000 f896 	bl	800d128 <SPI_EndRxTxTransaction>
 800cffc:	4603      	mov	r3, r0
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d002      	beq.n	800d008 <HAL_SPI_Transmit+0x23c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	2220      	movs	r2, #32
 800d006:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	689b      	ldr	r3, [r3, #8]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d10a      	bne.n	800d026 <HAL_SPI_Transmit+0x25a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d010:	2300      	movs	r3, #0
 800d012:	613b      	str	r3, [r7, #16]
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	68db      	ldr	r3, [r3, #12]
 800d01a:	613b      	str	r3, [r7, #16]
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	689b      	ldr	r3, [r3, #8]
 800d022:	613b      	str	r3, [r7, #16]
 800d024:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d002      	beq.n	800d034 <HAL_SPI_Transmit+0x268>
  {
    errorcode = HAL_ERROR;
 800d02e:	2301      	movs	r3, #1
 800d030:	77fb      	strb	r3, [r7, #31]
 800d032:	e000      	b.n	800d036 <HAL_SPI_Transmit+0x26a>
  }

error:
 800d034:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	2201      	movs	r2, #1
 800d03a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	2200      	movs	r2, #0
 800d042:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d046:	7ffb      	ldrb	r3, [r7, #31]
}
 800d048:	4618      	mov	r0, r3
 800d04a:	3720      	adds	r7, #32
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}
 800d050:	0800f9cc 	.word	0x0800f9cc

0800d054 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b084      	sub	sp, #16
 800d058:	af00      	add	r7, sp, #0
 800d05a:	60f8      	str	r0, [r7, #12]
 800d05c:	60b9      	str	r1, [r7, #8]
 800d05e:	603b      	str	r3, [r7, #0]
 800d060:	4613      	mov	r3, r2
 800d062:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d064:	e04c      	b.n	800d100 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d06c:	d048      	beq.n	800d100 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800d06e:	f7fc fe8b 	bl	8009d88 <HAL_GetTick>
 800d072:	4602      	mov	r2, r0
 800d074:	69bb      	ldr	r3, [r7, #24]
 800d076:	1ad3      	subs	r3, r2, r3
 800d078:	683a      	ldr	r2, [r7, #0]
 800d07a:	429a      	cmp	r2, r3
 800d07c:	d902      	bls.n	800d084 <SPI_WaitFlagStateUntilTimeout+0x30>
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d13d      	bne.n	800d100 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	685a      	ldr	r2, [r3, #4]
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d092:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	685b      	ldr	r3, [r3, #4]
 800d098:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d09c:	d111      	bne.n	800d0c2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	689b      	ldr	r3, [r3, #8]
 800d0a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d0a6:	d004      	beq.n	800d0b2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	689b      	ldr	r3, [r3, #8]
 800d0ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d0b0:	d107      	bne.n	800d0c2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	681a      	ldr	r2, [r3, #0]
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d0c0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d0ca:	d10f      	bne.n	800d0ec <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	681a      	ldr	r2, [r3, #0]
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d0da:	601a      	str	r2, [r3, #0]
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	681a      	ldr	r2, [r3, #0]
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d0ea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800d0fc:	2303      	movs	r3, #3
 800d0fe:	e00f      	b.n	800d120 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	689a      	ldr	r2, [r3, #8]
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	4013      	ands	r3, r2
 800d10a:	68ba      	ldr	r2, [r7, #8]
 800d10c:	429a      	cmp	r2, r3
 800d10e:	bf0c      	ite	eq
 800d110:	2301      	moveq	r3, #1
 800d112:	2300      	movne	r3, #0
 800d114:	b2db      	uxtb	r3, r3
 800d116:	461a      	mov	r2, r3
 800d118:	79fb      	ldrb	r3, [r7, #7]
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d1a3      	bne.n	800d066 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800d11e:	2300      	movs	r3, #0
}
 800d120:	4618      	mov	r0, r3
 800d122:	3710      	adds	r7, #16
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}

0800d128 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b086      	sub	sp, #24
 800d12c:	af02      	add	r7, sp, #8
 800d12e:	60f8      	str	r0, [r7, #12]
 800d130:	60b9      	str	r1, [r7, #8]
 800d132:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	9300      	str	r3, [sp, #0]
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	2200      	movs	r2, #0
 800d13c:	2180      	movs	r1, #128	; 0x80
 800d13e:	68f8      	ldr	r0, [r7, #12]
 800d140:	f7ff ff88 	bl	800d054 <SPI_WaitFlagStateUntilTimeout>
 800d144:	4603      	mov	r3, r0
 800d146:	2b00      	cmp	r3, #0
 800d148:	d007      	beq.n	800d15a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d14e:	f043 0220 	orr.w	r2, r3, #32
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800d156:	2303      	movs	r3, #3
 800d158:	e000      	b.n	800d15c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800d15a:	2300      	movs	r3, #0
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3710      	adds	r7, #16
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}

0800d164 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b082      	sub	sp, #8
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d101      	bne.n	800d176 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d172:	2301      	movs	r3, #1
 800d174:	e06f      	b.n	800d256 <HAL_TIM_Base_Init+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	4a39      	ldr	r2, [pc, #228]	; (800d260 <HAL_TIM_Base_Init+0xfc>)
 800d17c:	4293      	cmp	r3, r2
 800d17e:	d013      	beq.n	800d1a8 <HAL_TIM_Base_Init+0x44>
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d188:	d00e      	beq.n	800d1a8 <HAL_TIM_Base_Init+0x44>
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	4a35      	ldr	r2, [pc, #212]	; (800d264 <HAL_TIM_Base_Init+0x100>)
 800d190:	4293      	cmp	r3, r2
 800d192:	d009      	beq.n	800d1a8 <HAL_TIM_Base_Init+0x44>
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	4a33      	ldr	r2, [pc, #204]	; (800d268 <HAL_TIM_Base_Init+0x104>)
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d004      	beq.n	800d1a8 <HAL_TIM_Base_Init+0x44>
 800d19e:	f44f 7189 	mov.w	r1, #274	; 0x112
 800d1a2:	4832      	ldr	r0, [pc, #200]	; (800d26c <HAL_TIM_Base_Init+0x108>)
 800d1a4:	f7fc f9ca 	bl	800953c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	689b      	ldr	r3, [r3, #8]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d014      	beq.n	800d1da <HAL_TIM_Base_Init+0x76>
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	689b      	ldr	r3, [r3, #8]
 800d1b4:	2b10      	cmp	r3, #16
 800d1b6:	d010      	beq.n	800d1da <HAL_TIM_Base_Init+0x76>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	689b      	ldr	r3, [r3, #8]
 800d1bc:	2b20      	cmp	r3, #32
 800d1be:	d00c      	beq.n	800d1da <HAL_TIM_Base_Init+0x76>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	689b      	ldr	r3, [r3, #8]
 800d1c4:	2b40      	cmp	r3, #64	; 0x40
 800d1c6:	d008      	beq.n	800d1da <HAL_TIM_Base_Init+0x76>
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	689b      	ldr	r3, [r3, #8]
 800d1cc:	2b60      	cmp	r3, #96	; 0x60
 800d1ce:	d004      	beq.n	800d1da <HAL_TIM_Base_Init+0x76>
 800d1d0:	f240 1113 	movw	r1, #275	; 0x113
 800d1d4:	4825      	ldr	r0, [pc, #148]	; (800d26c <HAL_TIM_Base_Init+0x108>)
 800d1d6:	f7fc f9b1 	bl	800953c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	691b      	ldr	r3, [r3, #16]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d00e      	beq.n	800d200 <HAL_TIM_Base_Init+0x9c>
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	691b      	ldr	r3, [r3, #16]
 800d1e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1ea:	d009      	beq.n	800d200 <HAL_TIM_Base_Init+0x9c>
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	691b      	ldr	r3, [r3, #16]
 800d1f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d1f4:	d004      	beq.n	800d200 <HAL_TIM_Base_Init+0x9c>
 800d1f6:	f44f 718a 	mov.w	r1, #276	; 0x114
 800d1fa:	481c      	ldr	r0, [pc, #112]	; (800d26c <HAL_TIM_Base_Init+0x108>)
 800d1fc:	f7fc f99e 	bl	800953c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	699b      	ldr	r3, [r3, #24]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d008      	beq.n	800d21a <HAL_TIM_Base_Init+0xb6>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	699b      	ldr	r3, [r3, #24]
 800d20c:	2b80      	cmp	r3, #128	; 0x80
 800d20e:	d004      	beq.n	800d21a <HAL_TIM_Base_Init+0xb6>
 800d210:	f240 1115 	movw	r1, #277	; 0x115
 800d214:	4815      	ldr	r0, [pc, #84]	; (800d26c <HAL_TIM_Base_Init+0x108>)
 800d216:	f7fc f991 	bl	800953c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d220:	b2db      	uxtb	r3, r3
 800d222:	2b00      	cmp	r3, #0
 800d224:	d106      	bne.n	800d234 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2200      	movs	r2, #0
 800d22a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f7fc fc84 	bl	8009b3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2202      	movs	r2, #2
 800d238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681a      	ldr	r2, [r3, #0]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	3304      	adds	r3, #4
 800d244:	4619      	mov	r1, r3
 800d246:	4610      	mov	r0, r2
 800d248:	f000 fae8 	bl	800d81c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2201      	movs	r2, #1
 800d250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d254:	2300      	movs	r3, #0
}
 800d256:	4618      	mov	r0, r3
 800d258:	3708      	adds	r7, #8
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}
 800d25e:	bf00      	nop
 800d260:	40012c00 	.word	0x40012c00
 800d264:	40000400 	.word	0x40000400
 800d268:	40000800 	.word	0x40000800
 800d26c:	0800fa04 	.word	0x0800fa04

0800d270 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b084      	sub	sp, #16
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4a1a      	ldr	r2, [pc, #104]	; (800d2e8 <HAL_TIM_Base_Start+0x78>)
 800d27e:	4293      	cmp	r3, r2
 800d280:	d013      	beq.n	800d2aa <HAL_TIM_Base_Start+0x3a>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d28a:	d00e      	beq.n	800d2aa <HAL_TIM_Base_Start+0x3a>
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	4a16      	ldr	r2, [pc, #88]	; (800d2ec <HAL_TIM_Base_Start+0x7c>)
 800d292:	4293      	cmp	r3, r2
 800d294:	d009      	beq.n	800d2aa <HAL_TIM_Base_Start+0x3a>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	4a15      	ldr	r2, [pc, #84]	; (800d2f0 <HAL_TIM_Base_Start+0x80>)
 800d29c:	4293      	cmp	r3, r2
 800d29e:	d004      	beq.n	800d2aa <HAL_TIM_Base_Start+0x3a>
 800d2a0:	f240 1185 	movw	r1, #389	; 0x185
 800d2a4:	4813      	ldr	r0, [pc, #76]	; (800d2f4 <HAL_TIM_Base_Start+0x84>)
 800d2a6:	f7fc f949 	bl	800953c <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2202      	movs	r2, #2
 800d2ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	689b      	ldr	r3, [r3, #8]
 800d2b8:	f003 0307 	and.w	r3, r3, #7
 800d2bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	2b06      	cmp	r3, #6
 800d2c2:	d007      	beq.n	800d2d4 <HAL_TIM_Base_Start+0x64>
  {
    __HAL_TIM_ENABLE(htim);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	681a      	ldr	r2, [r3, #0]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	f042 0201 	orr.w	r2, r2, #1
 800d2d2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2201      	movs	r2, #1
 800d2d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d2dc:	2300      	movs	r3, #0
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	3710      	adds	r7, #16
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}
 800d2e6:	bf00      	nop
 800d2e8:	40012c00 	.word	0x40012c00
 800d2ec:	40000400 	.word	0x40000400
 800d2f0:	40000800 	.word	0x40000800
 800d2f4:	0800fa04 	.word	0x0800fa04

0800d2f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b084      	sub	sp, #16
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
 800d300:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d308:	2b01      	cmp	r3, #1
 800d30a:	d101      	bne.n	800d310 <HAL_TIM_ConfigClockSource+0x18>
 800d30c:	2302      	movs	r3, #2
 800d30e:	e279      	b.n	800d804 <HAL_TIM_ConfigClockSource+0x50c>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2201      	movs	r2, #1
 800d314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2202      	movs	r2, #2
 800d31c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d328:	d029      	beq.n	800d37e <HAL_TIM_ConfigClockSource+0x86>
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d332:	d024      	beq.n	800d37e <HAL_TIM_ConfigClockSource+0x86>
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d020      	beq.n	800d37e <HAL_TIM_ConfigClockSource+0x86>
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	2b10      	cmp	r3, #16
 800d342:	d01c      	beq.n	800d37e <HAL_TIM_ConfigClockSource+0x86>
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	2b20      	cmp	r3, #32
 800d34a:	d018      	beq.n	800d37e <HAL_TIM_ConfigClockSource+0x86>
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	2b30      	cmp	r3, #48	; 0x30
 800d352:	d014      	beq.n	800d37e <HAL_TIM_ConfigClockSource+0x86>
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	2b40      	cmp	r3, #64	; 0x40
 800d35a:	d010      	beq.n	800d37e <HAL_TIM_ConfigClockSource+0x86>
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	2b50      	cmp	r3, #80	; 0x50
 800d362:	d00c      	beq.n	800d37e <HAL_TIM_ConfigClockSource+0x86>
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	2b60      	cmp	r3, #96	; 0x60
 800d36a:	d008      	beq.n	800d37e <HAL_TIM_ConfigClockSource+0x86>
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	2b70      	cmp	r3, #112	; 0x70
 800d372:	d004      	beq.n	800d37e <HAL_TIM_ConfigClockSource+0x86>
 800d374:	f241 118a 	movw	r1, #4490	; 0x118a
 800d378:	4896      	ldr	r0, [pc, #600]	; (800d5d4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800d37a:	f7fc f8df 	bl	800953c <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	689b      	ldr	r3, [r3, #8]
 800d384:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d38c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d394:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	68fa      	ldr	r2, [r7, #12]
 800d39c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	2b40      	cmp	r3, #64	; 0x40
 800d3a4:	f000 81b6 	beq.w	800d714 <HAL_TIM_ConfigClockSource+0x41c>
 800d3a8:	2b40      	cmp	r3, #64	; 0x40
 800d3aa:	d80f      	bhi.n	800d3cc <HAL_TIM_ConfigClockSource+0xd4>
 800d3ac:	2b10      	cmp	r3, #16
 800d3ae:	f000 81fd 	beq.w	800d7ac <HAL_TIM_ConfigClockSource+0x4b4>
 800d3b2:	2b10      	cmp	r3, #16
 800d3b4:	d803      	bhi.n	800d3be <HAL_TIM_ConfigClockSource+0xc6>
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	f000 81f8 	beq.w	800d7ac <HAL_TIM_ConfigClockSource+0x4b4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800d3bc:	e219      	b.n	800d7f2 <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 800d3be:	2b20      	cmp	r3, #32
 800d3c0:	f000 81f4 	beq.w	800d7ac <HAL_TIM_ConfigClockSource+0x4b4>
 800d3c4:	2b30      	cmp	r3, #48	; 0x30
 800d3c6:	f000 81f1 	beq.w	800d7ac <HAL_TIM_ConfigClockSource+0x4b4>
      break;
 800d3ca:	e212      	b.n	800d7f2 <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 800d3cc:	2b70      	cmp	r3, #112	; 0x70
 800d3ce:	d02e      	beq.n	800d42e <HAL_TIM_ConfigClockSource+0x136>
 800d3d0:	2b70      	cmp	r3, #112	; 0x70
 800d3d2:	d806      	bhi.n	800d3e2 <HAL_TIM_ConfigClockSource+0xea>
 800d3d4:	2b50      	cmp	r3, #80	; 0x50
 800d3d6:	f000 8105 	beq.w	800d5e4 <HAL_TIM_ConfigClockSource+0x2ec>
 800d3da:	2b60      	cmp	r3, #96	; 0x60
 800d3dc:	f000 814e 	beq.w	800d67c <HAL_TIM_ConfigClockSource+0x384>
      break;
 800d3e0:	e207      	b.n	800d7f2 <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 800d3e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d3e6:	d004      	beq.n	800d3f2 <HAL_TIM_ConfigClockSource+0xfa>
 800d3e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d3ec:	f000 808a 	beq.w	800d504 <HAL_TIM_ConfigClockSource+0x20c>
      break;
 800d3f0:	e1ff      	b.n	800d7f2 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	4a78      	ldr	r2, [pc, #480]	; (800d5d8 <HAL_TIM_ConfigClockSource+0x2e0>)
 800d3f8:	4293      	cmp	r3, r2
 800d3fa:	f000 81f9 	beq.w	800d7f0 <HAL_TIM_ConfigClockSource+0x4f8>
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d406:	f000 81f3 	beq.w	800d7f0 <HAL_TIM_ConfigClockSource+0x4f8>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	4a73      	ldr	r2, [pc, #460]	; (800d5dc <HAL_TIM_ConfigClockSource+0x2e4>)
 800d410:	4293      	cmp	r3, r2
 800d412:	f000 81ed 	beq.w	800d7f0 <HAL_TIM_ConfigClockSource+0x4f8>
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	4a71      	ldr	r2, [pc, #452]	; (800d5e0 <HAL_TIM_ConfigClockSource+0x2e8>)
 800d41c:	4293      	cmp	r3, r2
 800d41e:	f000 81e7 	beq.w	800d7f0 <HAL_TIM_ConfigClockSource+0x4f8>
 800d422:	f241 1196 	movw	r1, #4502	; 0x1196
 800d426:	486b      	ldr	r0, [pc, #428]	; (800d5d4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800d428:	f7fc f888 	bl	800953c <assert_failed>
      break;
 800d42c:	e1e0      	b.n	800d7f0 <HAL_TIM_ConfigClockSource+0x4f8>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	4a69      	ldr	r2, [pc, #420]	; (800d5d8 <HAL_TIM_ConfigClockSource+0x2e0>)
 800d434:	4293      	cmp	r3, r2
 800d436:	d013      	beq.n	800d460 <HAL_TIM_ConfigClockSource+0x168>
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d440:	d00e      	beq.n	800d460 <HAL_TIM_ConfigClockSource+0x168>
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	4a65      	ldr	r2, [pc, #404]	; (800d5dc <HAL_TIM_ConfigClockSource+0x2e4>)
 800d448:	4293      	cmp	r3, r2
 800d44a:	d009      	beq.n	800d460 <HAL_TIM_ConfigClockSource+0x168>
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	4a63      	ldr	r2, [pc, #396]	; (800d5e0 <HAL_TIM_ConfigClockSource+0x2e8>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d004      	beq.n	800d460 <HAL_TIM_ConfigClockSource+0x168>
 800d456:	f241 119d 	movw	r1, #4509	; 0x119d
 800d45a:	485e      	ldr	r0, [pc, #376]	; (800d5d4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800d45c:	f7fc f86e 	bl	800953c <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	689b      	ldr	r3, [r3, #8]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d013      	beq.n	800d490 <HAL_TIM_ConfigClockSource+0x198>
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	689b      	ldr	r3, [r3, #8]
 800d46c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d470:	d00e      	beq.n	800d490 <HAL_TIM_ConfigClockSource+0x198>
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	689b      	ldr	r3, [r3, #8]
 800d476:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d47a:	d009      	beq.n	800d490 <HAL_TIM_ConfigClockSource+0x198>
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	689b      	ldr	r3, [r3, #8]
 800d480:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d484:	d004      	beq.n	800d490 <HAL_TIM_ConfigClockSource+0x198>
 800d486:	f44f 518d 	mov.w	r1, #4512	; 0x11a0
 800d48a:	4852      	ldr	r0, [pc, #328]	; (800d5d4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800d48c:	f7fc f856 	bl	800953c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	685b      	ldr	r3, [r3, #4]
 800d494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d498:	d014      	beq.n	800d4c4 <HAL_TIM_ConfigClockSource+0x1cc>
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	685b      	ldr	r3, [r3, #4]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d010      	beq.n	800d4c4 <HAL_TIM_ConfigClockSource+0x1cc>
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	685b      	ldr	r3, [r3, #4]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d00c      	beq.n	800d4c4 <HAL_TIM_ConfigClockSource+0x1cc>
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	685b      	ldr	r3, [r3, #4]
 800d4ae:	2b02      	cmp	r3, #2
 800d4b0:	d008      	beq.n	800d4c4 <HAL_TIM_ConfigClockSource+0x1cc>
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	685b      	ldr	r3, [r3, #4]
 800d4b6:	2b0a      	cmp	r3, #10
 800d4b8:	d004      	beq.n	800d4c4 <HAL_TIM_ConfigClockSource+0x1cc>
 800d4ba:	f241 11a1 	movw	r1, #4513	; 0x11a1
 800d4be:	4845      	ldr	r0, [pc, #276]	; (800d5d4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800d4c0:	f7fc f83c 	bl	800953c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	68db      	ldr	r3, [r3, #12]
 800d4c8:	2b0f      	cmp	r3, #15
 800d4ca:	d904      	bls.n	800d4d6 <HAL_TIM_ConfigClockSource+0x1de>
 800d4cc:	f241 11a2 	movw	r1, #4514	; 0x11a2
 800d4d0:	4840      	ldr	r0, [pc, #256]	; (800d5d4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800d4d2:	f7fc f833 	bl	800953c <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6818      	ldr	r0, [r3, #0]
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	6899      	ldr	r1, [r3, #8]
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	685a      	ldr	r2, [r3, #4]
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	68db      	ldr	r3, [r3, #12]
 800d4e6:	f000 fa72 	bl	800d9ce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	689b      	ldr	r3, [r3, #8]
 800d4f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d4f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	68fa      	ldr	r2, [r7, #12]
 800d500:	609a      	str	r2, [r3, #8]
      break;
 800d502:	e176      	b.n	800d7f2 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	4a33      	ldr	r2, [pc, #204]	; (800d5d8 <HAL_TIM_ConfigClockSource+0x2e0>)
 800d50a:	4293      	cmp	r3, r2
 800d50c:	d013      	beq.n	800d536 <HAL_TIM_ConfigClockSource+0x23e>
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d516:	d00e      	beq.n	800d536 <HAL_TIM_ConfigClockSource+0x23e>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	4a2f      	ldr	r2, [pc, #188]	; (800d5dc <HAL_TIM_ConfigClockSource+0x2e4>)
 800d51e:	4293      	cmp	r3, r2
 800d520:	d009      	beq.n	800d536 <HAL_TIM_ConfigClockSource+0x23e>
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	4a2e      	ldr	r2, [pc, #184]	; (800d5e0 <HAL_TIM_ConfigClockSource+0x2e8>)
 800d528:	4293      	cmp	r3, r2
 800d52a:	d004      	beq.n	800d536 <HAL_TIM_ConfigClockSource+0x23e>
 800d52c:	f241 11b5 	movw	r1, #4533	; 0x11b5
 800d530:	4828      	ldr	r0, [pc, #160]	; (800d5d4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800d532:	f7fc f803 	bl	800953c <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	689b      	ldr	r3, [r3, #8]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d013      	beq.n	800d566 <HAL_TIM_ConfigClockSource+0x26e>
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	689b      	ldr	r3, [r3, #8]
 800d542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d546:	d00e      	beq.n	800d566 <HAL_TIM_ConfigClockSource+0x26e>
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	689b      	ldr	r3, [r3, #8]
 800d54c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d550:	d009      	beq.n	800d566 <HAL_TIM_ConfigClockSource+0x26e>
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	689b      	ldr	r3, [r3, #8]
 800d556:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d55a:	d004      	beq.n	800d566 <HAL_TIM_ConfigClockSource+0x26e>
 800d55c:	f241 11b8 	movw	r1, #4536	; 0x11b8
 800d560:	481c      	ldr	r0, [pc, #112]	; (800d5d4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800d562:	f7fb ffeb 	bl	800953c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	685b      	ldr	r3, [r3, #4]
 800d56a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d56e:	d014      	beq.n	800d59a <HAL_TIM_ConfigClockSource+0x2a2>
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	685b      	ldr	r3, [r3, #4]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d010      	beq.n	800d59a <HAL_TIM_ConfigClockSource+0x2a2>
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	685b      	ldr	r3, [r3, #4]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d00c      	beq.n	800d59a <HAL_TIM_ConfigClockSource+0x2a2>
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	685b      	ldr	r3, [r3, #4]
 800d584:	2b02      	cmp	r3, #2
 800d586:	d008      	beq.n	800d59a <HAL_TIM_ConfigClockSource+0x2a2>
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	685b      	ldr	r3, [r3, #4]
 800d58c:	2b0a      	cmp	r3, #10
 800d58e:	d004      	beq.n	800d59a <HAL_TIM_ConfigClockSource+0x2a2>
 800d590:	f241 11b9 	movw	r1, #4537	; 0x11b9
 800d594:	480f      	ldr	r0, [pc, #60]	; (800d5d4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800d596:	f7fb ffd1 	bl	800953c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	68db      	ldr	r3, [r3, #12]
 800d59e:	2b0f      	cmp	r3, #15
 800d5a0:	d904      	bls.n	800d5ac <HAL_TIM_ConfigClockSource+0x2b4>
 800d5a2:	f241 11ba 	movw	r1, #4538	; 0x11ba
 800d5a6:	480b      	ldr	r0, [pc, #44]	; (800d5d4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800d5a8:	f7fb ffc8 	bl	800953c <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6818      	ldr	r0, [r3, #0]
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	6899      	ldr	r1, [r3, #8]
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	685a      	ldr	r2, [r3, #4]
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	68db      	ldr	r3, [r3, #12]
 800d5bc:	f000 fa07 	bl	800d9ce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	689a      	ldr	r2, [r3, #8]
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d5ce:	609a      	str	r2, [r3, #8]
      break;
 800d5d0:	e10f      	b.n	800d7f2 <HAL_TIM_ConfigClockSource+0x4fa>
 800d5d2:	bf00      	nop
 800d5d4:	0800fa04 	.word	0x0800fa04
 800d5d8:	40012c00 	.word	0x40012c00
 800d5dc:	40000400 	.word	0x40000400
 800d5e0:	40000800 	.word	0x40000800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	4a88      	ldr	r2, [pc, #544]	; (800d80c <HAL_TIM_ConfigClockSource+0x514>)
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	d013      	beq.n	800d616 <HAL_TIM_ConfigClockSource+0x31e>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d5f6:	d00e      	beq.n	800d616 <HAL_TIM_ConfigClockSource+0x31e>
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	4a84      	ldr	r2, [pc, #528]	; (800d810 <HAL_TIM_ConfigClockSource+0x518>)
 800d5fe:	4293      	cmp	r3, r2
 800d600:	d009      	beq.n	800d616 <HAL_TIM_ConfigClockSource+0x31e>
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	4a83      	ldr	r2, [pc, #524]	; (800d814 <HAL_TIM_ConfigClockSource+0x51c>)
 800d608:	4293      	cmp	r3, r2
 800d60a:	d004      	beq.n	800d616 <HAL_TIM_ConfigClockSource+0x31e>
 800d60c:	f241 11c9 	movw	r1, #4553	; 0x11c9
 800d610:	4881      	ldr	r0, [pc, #516]	; (800d818 <HAL_TIM_ConfigClockSource+0x520>)
 800d612:	f7fb ff93 	bl	800953c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	685b      	ldr	r3, [r3, #4]
 800d61a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d61e:	d014      	beq.n	800d64a <HAL_TIM_ConfigClockSource+0x352>
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	685b      	ldr	r3, [r3, #4]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d010      	beq.n	800d64a <HAL_TIM_ConfigClockSource+0x352>
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	685b      	ldr	r3, [r3, #4]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d00c      	beq.n	800d64a <HAL_TIM_ConfigClockSource+0x352>
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	685b      	ldr	r3, [r3, #4]
 800d634:	2b02      	cmp	r3, #2
 800d636:	d008      	beq.n	800d64a <HAL_TIM_ConfigClockSource+0x352>
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	685b      	ldr	r3, [r3, #4]
 800d63c:	2b0a      	cmp	r3, #10
 800d63e:	d004      	beq.n	800d64a <HAL_TIM_ConfigClockSource+0x352>
 800d640:	f241 11cc 	movw	r1, #4556	; 0x11cc
 800d644:	4874      	ldr	r0, [pc, #464]	; (800d818 <HAL_TIM_ConfigClockSource+0x520>)
 800d646:	f7fb ff79 	bl	800953c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	68db      	ldr	r3, [r3, #12]
 800d64e:	2b0f      	cmp	r3, #15
 800d650:	d904      	bls.n	800d65c <HAL_TIM_ConfigClockSource+0x364>
 800d652:	f241 11cd 	movw	r1, #4557	; 0x11cd
 800d656:	4870      	ldr	r0, [pc, #448]	; (800d818 <HAL_TIM_ConfigClockSource+0x520>)
 800d658:	f7fb ff70 	bl	800953c <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6818      	ldr	r0, [r3, #0]
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	6859      	ldr	r1, [r3, #4]
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	68db      	ldr	r3, [r3, #12]
 800d668:	461a      	mov	r2, r3
 800d66a:	f000 f939 	bl	800d8e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	2150      	movs	r1, #80	; 0x50
 800d674:	4618      	mov	r0, r3
 800d676:	f000 f990 	bl	800d99a <TIM_ITRx_SetConfig>
      break;
 800d67a:	e0ba      	b.n	800d7f2 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	4a62      	ldr	r2, [pc, #392]	; (800d80c <HAL_TIM_ConfigClockSource+0x514>)
 800d682:	4293      	cmp	r3, r2
 800d684:	d013      	beq.n	800d6ae <HAL_TIM_ConfigClockSource+0x3b6>
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d68e:	d00e      	beq.n	800d6ae <HAL_TIM_ConfigClockSource+0x3b6>
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	4a5e      	ldr	r2, [pc, #376]	; (800d810 <HAL_TIM_ConfigClockSource+0x518>)
 800d696:	4293      	cmp	r3, r2
 800d698:	d009      	beq.n	800d6ae <HAL_TIM_ConfigClockSource+0x3b6>
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	4a5d      	ldr	r2, [pc, #372]	; (800d814 <HAL_TIM_ConfigClockSource+0x51c>)
 800d6a0:	4293      	cmp	r3, r2
 800d6a2:	d004      	beq.n	800d6ae <HAL_TIM_ConfigClockSource+0x3b6>
 800d6a4:	f241 11d9 	movw	r1, #4569	; 0x11d9
 800d6a8:	485b      	ldr	r0, [pc, #364]	; (800d818 <HAL_TIM_ConfigClockSource+0x520>)
 800d6aa:	f7fb ff47 	bl	800953c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	685b      	ldr	r3, [r3, #4]
 800d6b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d6b6:	d014      	beq.n	800d6e2 <HAL_TIM_ConfigClockSource+0x3ea>
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	685b      	ldr	r3, [r3, #4]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d010      	beq.n	800d6e2 <HAL_TIM_ConfigClockSource+0x3ea>
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	685b      	ldr	r3, [r3, #4]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d00c      	beq.n	800d6e2 <HAL_TIM_ConfigClockSource+0x3ea>
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	685b      	ldr	r3, [r3, #4]
 800d6cc:	2b02      	cmp	r3, #2
 800d6ce:	d008      	beq.n	800d6e2 <HAL_TIM_ConfigClockSource+0x3ea>
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	685b      	ldr	r3, [r3, #4]
 800d6d4:	2b0a      	cmp	r3, #10
 800d6d6:	d004      	beq.n	800d6e2 <HAL_TIM_ConfigClockSource+0x3ea>
 800d6d8:	f241 11dc 	movw	r1, #4572	; 0x11dc
 800d6dc:	484e      	ldr	r0, [pc, #312]	; (800d818 <HAL_TIM_ConfigClockSource+0x520>)
 800d6de:	f7fb ff2d 	bl	800953c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	68db      	ldr	r3, [r3, #12]
 800d6e6:	2b0f      	cmp	r3, #15
 800d6e8:	d904      	bls.n	800d6f4 <HAL_TIM_ConfigClockSource+0x3fc>
 800d6ea:	f241 11dd 	movw	r1, #4573	; 0x11dd
 800d6ee:	484a      	ldr	r0, [pc, #296]	; (800d818 <HAL_TIM_ConfigClockSource+0x520>)
 800d6f0:	f7fb ff24 	bl	800953c <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	6818      	ldr	r0, [r3, #0]
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	6859      	ldr	r1, [r3, #4]
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	68db      	ldr	r3, [r3, #12]
 800d700:	461a      	mov	r2, r3
 800d702:	f000 f91b 	bl	800d93c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	2160      	movs	r1, #96	; 0x60
 800d70c:	4618      	mov	r0, r3
 800d70e:	f000 f944 	bl	800d99a <TIM_ITRx_SetConfig>
      break;
 800d712:	e06e      	b.n	800d7f2 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	4a3c      	ldr	r2, [pc, #240]	; (800d80c <HAL_TIM_ConfigClockSource+0x514>)
 800d71a:	4293      	cmp	r3, r2
 800d71c:	d013      	beq.n	800d746 <HAL_TIM_ConfigClockSource+0x44e>
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d726:	d00e      	beq.n	800d746 <HAL_TIM_ConfigClockSource+0x44e>
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	4a38      	ldr	r2, [pc, #224]	; (800d810 <HAL_TIM_ConfigClockSource+0x518>)
 800d72e:	4293      	cmp	r3, r2
 800d730:	d009      	beq.n	800d746 <HAL_TIM_ConfigClockSource+0x44e>
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	4a37      	ldr	r2, [pc, #220]	; (800d814 <HAL_TIM_ConfigClockSource+0x51c>)
 800d738:	4293      	cmp	r3, r2
 800d73a:	d004      	beq.n	800d746 <HAL_TIM_ConfigClockSource+0x44e>
 800d73c:	f241 11e9 	movw	r1, #4585	; 0x11e9
 800d740:	4835      	ldr	r0, [pc, #212]	; (800d818 <HAL_TIM_ConfigClockSource+0x520>)
 800d742:	f7fb fefb 	bl	800953c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	685b      	ldr	r3, [r3, #4]
 800d74a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d74e:	d014      	beq.n	800d77a <HAL_TIM_ConfigClockSource+0x482>
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	685b      	ldr	r3, [r3, #4]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d010      	beq.n	800d77a <HAL_TIM_ConfigClockSource+0x482>
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d00c      	beq.n	800d77a <HAL_TIM_ConfigClockSource+0x482>
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	685b      	ldr	r3, [r3, #4]
 800d764:	2b02      	cmp	r3, #2
 800d766:	d008      	beq.n	800d77a <HAL_TIM_ConfigClockSource+0x482>
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	685b      	ldr	r3, [r3, #4]
 800d76c:	2b0a      	cmp	r3, #10
 800d76e:	d004      	beq.n	800d77a <HAL_TIM_ConfigClockSource+0x482>
 800d770:	f241 11ec 	movw	r1, #4588	; 0x11ec
 800d774:	4828      	ldr	r0, [pc, #160]	; (800d818 <HAL_TIM_ConfigClockSource+0x520>)
 800d776:	f7fb fee1 	bl	800953c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	68db      	ldr	r3, [r3, #12]
 800d77e:	2b0f      	cmp	r3, #15
 800d780:	d904      	bls.n	800d78c <HAL_TIM_ConfigClockSource+0x494>
 800d782:	f241 11ed 	movw	r1, #4589	; 0x11ed
 800d786:	4824      	ldr	r0, [pc, #144]	; (800d818 <HAL_TIM_ConfigClockSource+0x520>)
 800d788:	f7fb fed8 	bl	800953c <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	6818      	ldr	r0, [r3, #0]
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	6859      	ldr	r1, [r3, #4]
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	68db      	ldr	r3, [r3, #12]
 800d798:	461a      	mov	r2, r3
 800d79a:	f000 f8a1 	bl	800d8e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	2140      	movs	r1, #64	; 0x40
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f000 f8f8 	bl	800d99a <TIM_ITRx_SetConfig>
      break;
 800d7aa:	e022      	b.n	800d7f2 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	4a16      	ldr	r2, [pc, #88]	; (800d80c <HAL_TIM_ConfigClockSource+0x514>)
 800d7b2:	4293      	cmp	r3, r2
 800d7b4:	d013      	beq.n	800d7de <HAL_TIM_ConfigClockSource+0x4e6>
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7be:	d00e      	beq.n	800d7de <HAL_TIM_ConfigClockSource+0x4e6>
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	4a12      	ldr	r2, [pc, #72]	; (800d810 <HAL_TIM_ConfigClockSource+0x518>)
 800d7c6:	4293      	cmp	r3, r2
 800d7c8:	d009      	beq.n	800d7de <HAL_TIM_ConfigClockSource+0x4e6>
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	4a11      	ldr	r2, [pc, #68]	; (800d814 <HAL_TIM_ConfigClockSource+0x51c>)
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	d004      	beq.n	800d7de <HAL_TIM_ConfigClockSource+0x4e6>
 800d7d4:	f241 11fc 	movw	r1, #4604	; 0x11fc
 800d7d8:	480f      	ldr	r0, [pc, #60]	; (800d818 <HAL_TIM_ConfigClockSource+0x520>)
 800d7da:	f7fb feaf 	bl	800953c <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681a      	ldr	r2, [r3, #0]
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	4619      	mov	r1, r3
 800d7e8:	4610      	mov	r0, r2
 800d7ea:	f000 f8d6 	bl	800d99a <TIM_ITRx_SetConfig>
      break;
 800d7ee:	e000      	b.n	800d7f2 <HAL_TIM_ConfigClockSource+0x4fa>
      break;
 800d7f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2201      	movs	r2, #1
 800d7f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d802:	2300      	movs	r3, #0
}
 800d804:	4618      	mov	r0, r3
 800d806:	3710      	adds	r7, #16
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}
 800d80c:	40012c00 	.word	0x40012c00
 800d810:	40000400 	.word	0x40000400
 800d814:	40000800 	.word	0x40000800
 800d818:	0800fa04 	.word	0x0800fa04

0800d81c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d81c:	b480      	push	{r7}
 800d81e:	b085      	sub	sp, #20
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	4a29      	ldr	r2, [pc, #164]	; (800d8d4 <TIM_Base_SetConfig+0xb8>)
 800d830:	4293      	cmp	r3, r2
 800d832:	d00b      	beq.n	800d84c <TIM_Base_SetConfig+0x30>
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d83a:	d007      	beq.n	800d84c <TIM_Base_SetConfig+0x30>
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	4a26      	ldr	r2, [pc, #152]	; (800d8d8 <TIM_Base_SetConfig+0xbc>)
 800d840:	4293      	cmp	r3, r2
 800d842:	d003      	beq.n	800d84c <TIM_Base_SetConfig+0x30>
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	4a25      	ldr	r2, [pc, #148]	; (800d8dc <TIM_Base_SetConfig+0xc0>)
 800d848:	4293      	cmp	r3, r2
 800d84a:	d108      	bne.n	800d85e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d852:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	685b      	ldr	r3, [r3, #4]
 800d858:	68fa      	ldr	r2, [r7, #12]
 800d85a:	4313      	orrs	r3, r2
 800d85c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	4a1c      	ldr	r2, [pc, #112]	; (800d8d4 <TIM_Base_SetConfig+0xb8>)
 800d862:	4293      	cmp	r3, r2
 800d864:	d00b      	beq.n	800d87e <TIM_Base_SetConfig+0x62>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d86c:	d007      	beq.n	800d87e <TIM_Base_SetConfig+0x62>
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	4a19      	ldr	r2, [pc, #100]	; (800d8d8 <TIM_Base_SetConfig+0xbc>)
 800d872:	4293      	cmp	r3, r2
 800d874:	d003      	beq.n	800d87e <TIM_Base_SetConfig+0x62>
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	4a18      	ldr	r2, [pc, #96]	; (800d8dc <TIM_Base_SetConfig+0xc0>)
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d108      	bne.n	800d890 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	68db      	ldr	r3, [r3, #12]
 800d88a:	68fa      	ldr	r2, [r7, #12]
 800d88c:	4313      	orrs	r3, r2
 800d88e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	695b      	ldr	r3, [r3, #20]
 800d89a:	4313      	orrs	r3, r2
 800d89c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	68fa      	ldr	r2, [r7, #12]
 800d8a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	689a      	ldr	r2, [r3, #8]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	681a      	ldr	r2, [r3, #0]
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	4a07      	ldr	r2, [pc, #28]	; (800d8d4 <TIM_Base_SetConfig+0xb8>)
 800d8b8:	4293      	cmp	r3, r2
 800d8ba:	d103      	bne.n	800d8c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	691a      	ldr	r2, [r3, #16]
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2201      	movs	r2, #1
 800d8c8:	615a      	str	r2, [r3, #20]
}
 800d8ca:	bf00      	nop
 800d8cc:	3714      	adds	r7, #20
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bc80      	pop	{r7}
 800d8d2:	4770      	bx	lr
 800d8d4:	40012c00 	.word	0x40012c00
 800d8d8:	40000400 	.word	0x40000400
 800d8dc:	40000800 	.word	0x40000800

0800d8e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b087      	sub	sp, #28
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	60f8      	str	r0, [r7, #12]
 800d8e8:	60b9      	str	r1, [r7, #8]
 800d8ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	6a1b      	ldr	r3, [r3, #32]
 800d8f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	6a1b      	ldr	r3, [r3, #32]
 800d8f6:	f023 0201 	bic.w	r2, r3, #1
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	699b      	ldr	r3, [r3, #24]
 800d902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d90a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	011b      	lsls	r3, r3, #4
 800d910:	693a      	ldr	r2, [r7, #16]
 800d912:	4313      	orrs	r3, r2
 800d914:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	f023 030a 	bic.w	r3, r3, #10
 800d91c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d91e:	697a      	ldr	r2, [r7, #20]
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	4313      	orrs	r3, r2
 800d924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	693a      	ldr	r2, [r7, #16]
 800d92a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	697a      	ldr	r2, [r7, #20]
 800d930:	621a      	str	r2, [r3, #32]
}
 800d932:	bf00      	nop
 800d934:	371c      	adds	r7, #28
 800d936:	46bd      	mov	sp, r7
 800d938:	bc80      	pop	{r7}
 800d93a:	4770      	bx	lr

0800d93c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d93c:	b480      	push	{r7}
 800d93e:	b087      	sub	sp, #28
 800d940:	af00      	add	r7, sp, #0
 800d942:	60f8      	str	r0, [r7, #12]
 800d944:	60b9      	str	r1, [r7, #8]
 800d946:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	6a1b      	ldr	r3, [r3, #32]
 800d94c:	f023 0210 	bic.w	r2, r3, #16
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	699b      	ldr	r3, [r3, #24]
 800d958:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	6a1b      	ldr	r3, [r3, #32]
 800d95e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d960:	697b      	ldr	r3, [r7, #20]
 800d962:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d966:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	031b      	lsls	r3, r3, #12
 800d96c:	697a      	ldr	r2, [r7, #20]
 800d96e:	4313      	orrs	r3, r2
 800d970:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d978:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	011b      	lsls	r3, r3, #4
 800d97e:	693a      	ldr	r2, [r7, #16]
 800d980:	4313      	orrs	r3, r2
 800d982:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	697a      	ldr	r2, [r7, #20]
 800d988:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	693a      	ldr	r2, [r7, #16]
 800d98e:	621a      	str	r2, [r3, #32]
}
 800d990:	bf00      	nop
 800d992:	371c      	adds	r7, #28
 800d994:	46bd      	mov	sp, r7
 800d996:	bc80      	pop	{r7}
 800d998:	4770      	bx	lr

0800d99a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d99a:	b480      	push	{r7}
 800d99c:	b085      	sub	sp, #20
 800d99e:	af00      	add	r7, sp, #0
 800d9a0:	6078      	str	r0, [r7, #4]
 800d9a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	689b      	ldr	r3, [r3, #8]
 800d9a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d9b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d9b2:	683a      	ldr	r2, [r7, #0]
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	4313      	orrs	r3, r2
 800d9b8:	f043 0307 	orr.w	r3, r3, #7
 800d9bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	68fa      	ldr	r2, [r7, #12]
 800d9c2:	609a      	str	r2, [r3, #8]
}
 800d9c4:	bf00      	nop
 800d9c6:	3714      	adds	r7, #20
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bc80      	pop	{r7}
 800d9cc:	4770      	bx	lr

0800d9ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d9ce:	b480      	push	{r7}
 800d9d0:	b087      	sub	sp, #28
 800d9d2:	af00      	add	r7, sp, #0
 800d9d4:	60f8      	str	r0, [r7, #12]
 800d9d6:	60b9      	str	r1, [r7, #8]
 800d9d8:	607a      	str	r2, [r7, #4]
 800d9da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	689b      	ldr	r3, [r3, #8]
 800d9e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d9e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	021a      	lsls	r2, r3, #8
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	431a      	orrs	r2, r3
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	4313      	orrs	r3, r2
 800d9f6:	697a      	ldr	r2, [r7, #20]
 800d9f8:	4313      	orrs	r3, r2
 800d9fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	697a      	ldr	r2, [r7, #20]
 800da00:	609a      	str	r2, [r3, #8]
}
 800da02:	bf00      	nop
 800da04:	371c      	adds	r7, #28
 800da06:	46bd      	mov	sp, r7
 800da08:	bc80      	pop	{r7}
 800da0a:	4770      	bx	lr

0800da0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b084      	sub	sp, #16
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
 800da14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	4a43      	ldr	r2, [pc, #268]	; (800db28 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800da1c:	4293      	cmp	r3, r2
 800da1e:	d013      	beq.n	800da48 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da28:	d00e      	beq.n	800da48 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	4a3f      	ldr	r2, [pc, #252]	; (800db2c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800da30:	4293      	cmp	r3, r2
 800da32:	d009      	beq.n	800da48 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	4a3d      	ldr	r2, [pc, #244]	; (800db30 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800da3a:	4293      	cmp	r3, r2
 800da3c:	d004      	beq.n	800da48 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800da3e:	f240 6164 	movw	r1, #1636	; 0x664
 800da42:	483c      	ldr	r0, [pc, #240]	; (800db34 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800da44:	f7fb fd7a 	bl	800953c <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800da48:	683b      	ldr	r3, [r7, #0]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d020      	beq.n	800da92 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	2b10      	cmp	r3, #16
 800da56:	d01c      	beq.n	800da92 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	2b20      	cmp	r3, #32
 800da5e:	d018      	beq.n	800da92 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	2b30      	cmp	r3, #48	; 0x30
 800da66:	d014      	beq.n	800da92 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	2b40      	cmp	r3, #64	; 0x40
 800da6e:	d010      	beq.n	800da92 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	2b50      	cmp	r3, #80	; 0x50
 800da76:	d00c      	beq.n	800da92 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	2b60      	cmp	r3, #96	; 0x60
 800da7e:	d008      	beq.n	800da92 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	2b70      	cmp	r3, #112	; 0x70
 800da86:	d004      	beq.n	800da92 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800da88:	f240 6165 	movw	r1, #1637	; 0x665
 800da8c:	4829      	ldr	r0, [pc, #164]	; (800db34 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800da8e:	f7fb fd55 	bl	800953c <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	685b      	ldr	r3, [r3, #4]
 800da96:	2b80      	cmp	r3, #128	; 0x80
 800da98:	d008      	beq.n	800daac <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	685b      	ldr	r3, [r3, #4]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d004      	beq.n	800daac <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 800daa2:	f240 6166 	movw	r1, #1638	; 0x666
 800daa6:	4823      	ldr	r0, [pc, #140]	; (800db34 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800daa8:	f7fb fd48 	bl	800953c <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dab2:	2b01      	cmp	r3, #1
 800dab4:	d101      	bne.n	800daba <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800dab6:	2302      	movs	r3, #2
 800dab8:	e032      	b.n	800db20 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2201      	movs	r2, #1
 800dabe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2202      	movs	r2, #2
 800dac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	685b      	ldr	r3, [r3, #4]
 800dad0:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	689b      	ldr	r3, [r3, #8]
 800dad8:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dae0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	68fa      	ldr	r2, [r7, #12]
 800dae8:	4313      	orrs	r3, r2
 800daea:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800daf2:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	685b      	ldr	r3, [r3, #4]
 800daf8:	68ba      	ldr	r2, [r7, #8]
 800dafa:	4313      	orrs	r3, r2
 800dafc:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	68fa      	ldr	r2, [r7, #12]
 800db04:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	68ba      	ldr	r2, [r7, #8]
 800db0c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2201      	movs	r2, #1
 800db12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2200      	movs	r2, #0
 800db1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800db1e:	2300      	movs	r3, #0
}
 800db20:	4618      	mov	r0, r3
 800db22:	3710      	adds	r7, #16
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}
 800db28:	40012c00 	.word	0x40012c00
 800db2c:	40000400 	.word	0x40000400
 800db30:	40000800 	.word	0x40000800
 800db34:	0800fa3c 	.word	0x0800fa3c

0800db38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b082      	sub	sp, #8
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d101      	bne.n	800db4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800db46:	2301      	movs	r3, #1
 800db48:	e092      	b.n	800dc70 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	699b      	ldr	r3, [r3, #24]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d02c      	beq.n	800dbac <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	4a48      	ldr	r2, [pc, #288]	; (800dc78 <HAL_UART_Init+0x140>)
 800db58:	4293      	cmp	r3, r2
 800db5a:	d00e      	beq.n	800db7a <HAL_UART_Init+0x42>
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	4a46      	ldr	r2, [pc, #280]	; (800dc7c <HAL_UART_Init+0x144>)
 800db62:	4293      	cmp	r3, r2
 800db64:	d009      	beq.n	800db7a <HAL_UART_Init+0x42>
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	4a45      	ldr	r2, [pc, #276]	; (800dc80 <HAL_UART_Init+0x148>)
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d004      	beq.n	800db7a <HAL_UART_Init+0x42>
 800db70:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800db74:	4843      	ldr	r0, [pc, #268]	; (800dc84 <HAL_UART_Init+0x14c>)
 800db76:	f7fb fce1 	bl	800953c <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	699b      	ldr	r3, [r3, #24]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d028      	beq.n	800dbd4 <HAL_UART_Init+0x9c>
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	699b      	ldr	r3, [r3, #24]
 800db86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db8a:	d023      	beq.n	800dbd4 <HAL_UART_Init+0x9c>
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	699b      	ldr	r3, [r3, #24]
 800db90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db94:	d01e      	beq.n	800dbd4 <HAL_UART_Init+0x9c>
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	699b      	ldr	r3, [r3, #24]
 800db9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800db9e:	d019      	beq.n	800dbd4 <HAL_UART_Init+0x9c>
 800dba0:	f240 1147 	movw	r1, #327	; 0x147
 800dba4:	4837      	ldr	r0, [pc, #220]	; (800dc84 <HAL_UART_Init+0x14c>)
 800dba6:	f7fb fcc9 	bl	800953c <assert_failed>
 800dbaa:	e013      	b.n	800dbd4 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	4a31      	ldr	r2, [pc, #196]	; (800dc78 <HAL_UART_Init+0x140>)
 800dbb2:	4293      	cmp	r3, r2
 800dbb4:	d00e      	beq.n	800dbd4 <HAL_UART_Init+0x9c>
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	4a30      	ldr	r2, [pc, #192]	; (800dc7c <HAL_UART_Init+0x144>)
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	d009      	beq.n	800dbd4 <HAL_UART_Init+0x9c>
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	4a2e      	ldr	r2, [pc, #184]	; (800dc80 <HAL_UART_Init+0x148>)
 800dbc6:	4293      	cmp	r3, r2
 800dbc8:	d004      	beq.n	800dbd4 <HAL_UART_Init+0x9c>
 800dbca:	f240 114b 	movw	r1, #331	; 0x14b
 800dbce:	482d      	ldr	r0, [pc, #180]	; (800dc84 <HAL_UART_Init+0x14c>)
 800dbd0:	f7fb fcb4 	bl	800953c <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	689b      	ldr	r3, [r3, #8]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d009      	beq.n	800dbf0 <HAL_UART_Init+0xb8>
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	689b      	ldr	r3, [r3, #8]
 800dbe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dbe4:	d004      	beq.n	800dbf0 <HAL_UART_Init+0xb8>
 800dbe6:	f240 114d 	movw	r1, #333	; 0x14d
 800dbea:	4826      	ldr	r0, [pc, #152]	; (800dc84 <HAL_UART_Init+0x14c>)
 800dbec:	f7fb fca6 	bl	800953c <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800dbf6:	b2db      	uxtb	r3, r3
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d106      	bne.n	800dc0a <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2200      	movs	r2, #0
 800dc00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f7fb ffdf 	bl	8009bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2224      	movs	r2, #36	; 0x24
 800dc0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	68da      	ldr	r2, [r3, #12]
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dc20:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	f000 fa66 	bl	800e0f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	691a      	ldr	r2, [r3, #16]
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dc36:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	695a      	ldr	r2, [r3, #20]
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dc46:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	68da      	ldr	r2, [r3, #12]
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dc56:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2220      	movs	r2, #32
 800dc62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2220      	movs	r2, #32
 800dc6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800dc6e:	2300      	movs	r3, #0
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	3708      	adds	r7, #8
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd80      	pop	{r7, pc}
 800dc78:	40013800 	.word	0x40013800
 800dc7c:	40004400 	.word	0x40004400
 800dc80:	40004800 	.word	0x40004800
 800dc84:	0800fa78 	.word	0x0800fa78

0800dc88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b088      	sub	sp, #32
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	68db      	ldr	r3, [r3, #12]
 800dc9e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	695b      	ldr	r3, [r3, #20]
 800dca6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800dca8:	2300      	movs	r3, #0
 800dcaa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800dcac:	2300      	movs	r3, #0
 800dcae:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800dcb0:	69fb      	ldr	r3, [r7, #28]
 800dcb2:	f003 030f 	and.w	r3, r3, #15
 800dcb6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d10d      	bne.n	800dcda <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800dcbe:	69fb      	ldr	r3, [r7, #28]
 800dcc0:	f003 0320 	and.w	r3, r3, #32
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d008      	beq.n	800dcda <HAL_UART_IRQHandler+0x52>
 800dcc8:	69bb      	ldr	r3, [r7, #24]
 800dcca:	f003 0320 	and.w	r3, r3, #32
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d003      	beq.n	800dcda <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f000 f98d 	bl	800dff2 <UART_Receive_IT>
      return;
 800dcd8:	e0cc      	b.n	800de74 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800dcda:	693b      	ldr	r3, [r7, #16]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	f000 80ab 	beq.w	800de38 <HAL_UART_IRQHandler+0x1b0>
 800dce2:	697b      	ldr	r3, [r7, #20]
 800dce4:	f003 0301 	and.w	r3, r3, #1
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d105      	bne.n	800dcf8 <HAL_UART_IRQHandler+0x70>
 800dcec:	69bb      	ldr	r3, [r7, #24]
 800dcee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	f000 80a0 	beq.w	800de38 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800dcf8:	69fb      	ldr	r3, [r7, #28]
 800dcfa:	f003 0301 	and.w	r3, r3, #1
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d00a      	beq.n	800dd18 <HAL_UART_IRQHandler+0x90>
 800dd02:	69bb      	ldr	r3, [r7, #24]
 800dd04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d005      	beq.n	800dd18 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd10:	f043 0201 	orr.w	r2, r3, #1
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800dd18:	69fb      	ldr	r3, [r7, #28]
 800dd1a:	f003 0304 	and.w	r3, r3, #4
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d00a      	beq.n	800dd38 <HAL_UART_IRQHandler+0xb0>
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	f003 0301 	and.w	r3, r3, #1
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d005      	beq.n	800dd38 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd30:	f043 0202 	orr.w	r2, r3, #2
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800dd38:	69fb      	ldr	r3, [r7, #28]
 800dd3a:	f003 0302 	and.w	r3, r3, #2
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d00a      	beq.n	800dd58 <HAL_UART_IRQHandler+0xd0>
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	f003 0301 	and.w	r3, r3, #1
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d005      	beq.n	800dd58 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd50:	f043 0204 	orr.w	r2, r3, #4
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800dd58:	69fb      	ldr	r3, [r7, #28]
 800dd5a:	f003 0308 	and.w	r3, r3, #8
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d00a      	beq.n	800dd78 <HAL_UART_IRQHandler+0xf0>
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	f003 0301 	and.w	r3, r3, #1
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d005      	beq.n	800dd78 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd70:	f043 0208 	orr.w	r2, r3, #8
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d078      	beq.n	800de72 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800dd80:	69fb      	ldr	r3, [r7, #28]
 800dd82:	f003 0320 	and.w	r3, r3, #32
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d007      	beq.n	800dd9a <HAL_UART_IRQHandler+0x112>
 800dd8a:	69bb      	ldr	r3, [r7, #24]
 800dd8c:	f003 0320 	and.w	r3, r3, #32
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d002      	beq.n	800dd9a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f000 f92c 	bl	800dff2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	695b      	ldr	r3, [r3, #20]
 800dda0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	bf14      	ite	ne
 800dda8:	2301      	movne	r3, #1
 800ddaa:	2300      	moveq	r3, #0
 800ddac:	b2db      	uxtb	r3, r3
 800ddae:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddb4:	f003 0308 	and.w	r3, r3, #8
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d102      	bne.n	800ddc2 <HAL_UART_IRQHandler+0x13a>
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d031      	beq.n	800de26 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f000 f877 	bl	800deb6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	695b      	ldr	r3, [r3, #20]
 800ddce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d023      	beq.n	800de1e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	695a      	ldr	r2, [r3, #20]
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dde4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d013      	beq.n	800de16 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddf2:	4a22      	ldr	r2, [pc, #136]	; (800de7c <HAL_UART_IRQHandler+0x1f4>)
 800ddf4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	f7fc fcac 	bl	800a758 <HAL_DMA_Abort_IT>
 800de00:	4603      	mov	r3, r0
 800de02:	2b00      	cmp	r3, #0
 800de04:	d016      	beq.n	800de34 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de0c:	687a      	ldr	r2, [r7, #4]
 800de0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800de10:	4610      	mov	r0, r2
 800de12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de14:	e00e      	b.n	800de34 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f000 f844 	bl	800dea4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de1c:	e00a      	b.n	800de34 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f000 f840 	bl	800dea4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de24:	e006      	b.n	800de34 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f000 f83c 	bl	800dea4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2200      	movs	r2, #0
 800de30:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800de32:	e01e      	b.n	800de72 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de34:	bf00      	nop
    return;
 800de36:	e01c      	b.n	800de72 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800de38:	69fb      	ldr	r3, [r7, #28]
 800de3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d008      	beq.n	800de54 <HAL_UART_IRQHandler+0x1cc>
 800de42:	69bb      	ldr	r3, [r7, #24]
 800de44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d003      	beq.n	800de54 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f000 f863 	bl	800df18 <UART_Transmit_IT>
    return;
 800de52:	e00f      	b.n	800de74 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800de54:	69fb      	ldr	r3, [r7, #28]
 800de56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d00a      	beq.n	800de74 <HAL_UART_IRQHandler+0x1ec>
 800de5e:	69bb      	ldr	r3, [r7, #24]
 800de60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de64:	2b00      	cmp	r3, #0
 800de66:	d005      	beq.n	800de74 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f000 f8aa 	bl	800dfc2 <UART_EndTransmit_IT>
    return;
 800de6e:	bf00      	nop
 800de70:	e000      	b.n	800de74 <HAL_UART_IRQHandler+0x1ec>
    return;
 800de72:	bf00      	nop
  }
}
 800de74:	3720      	adds	r7, #32
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}
 800de7a:	bf00      	nop
 800de7c:	0800def1 	.word	0x0800def1

0800de80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800de80:	b480      	push	{r7}
 800de82:	b083      	sub	sp, #12
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800de88:	bf00      	nop
 800de8a:	370c      	adds	r7, #12
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bc80      	pop	{r7}
 800de90:	4770      	bx	lr

0800de92 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800de92:	b480      	push	{r7}
 800de94:	b083      	sub	sp, #12
 800de96:	af00      	add	r7, sp, #0
 800de98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800de9a:	bf00      	nop
 800de9c:	370c      	adds	r7, #12
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bc80      	pop	{r7}
 800dea2:	4770      	bx	lr

0800dea4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dea4:	b480      	push	{r7}
 800dea6:	b083      	sub	sp, #12
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800deac:	bf00      	nop
 800deae:	370c      	adds	r7, #12
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bc80      	pop	{r7}
 800deb4:	4770      	bx	lr

0800deb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800deb6:	b480      	push	{r7}
 800deb8:	b083      	sub	sp, #12
 800deba:	af00      	add	r7, sp, #0
 800debc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	68da      	ldr	r2, [r3, #12]
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800decc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	695a      	ldr	r2, [r3, #20]
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	f022 0201 	bic.w	r2, r2, #1
 800dedc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	2220      	movs	r2, #32
 800dee2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800dee6:	bf00      	nop
 800dee8:	370c      	adds	r7, #12
 800deea:	46bd      	mov	sp, r7
 800deec:	bc80      	pop	{r7}
 800deee:	4770      	bx	lr

0800def0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b084      	sub	sp, #16
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800defc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	2200      	movs	r2, #0
 800df02:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2200      	movs	r2, #0
 800df08:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800df0a:	68f8      	ldr	r0, [r7, #12]
 800df0c:	f7ff ffca 	bl	800dea4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800df10:	bf00      	nop
 800df12:	3710      	adds	r7, #16
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}

0800df18 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800df18:	b480      	push	{r7}
 800df1a:	b085      	sub	sp, #20
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800df26:	b2db      	uxtb	r3, r3
 800df28:	2b21      	cmp	r3, #33	; 0x21
 800df2a:	d144      	bne.n	800dfb6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	689b      	ldr	r3, [r3, #8]
 800df30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df34:	d11a      	bne.n	800df6c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	6a1b      	ldr	r3, [r3, #32]
 800df3a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	881b      	ldrh	r3, [r3, #0]
 800df40:	461a      	mov	r2, r3
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800df4a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	691b      	ldr	r3, [r3, #16]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d105      	bne.n	800df60 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6a1b      	ldr	r3, [r3, #32]
 800df58:	1c9a      	adds	r2, r3, #2
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	621a      	str	r2, [r3, #32]
 800df5e:	e00e      	b.n	800df7e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	6a1b      	ldr	r3, [r3, #32]
 800df64:	1c5a      	adds	r2, r3, #1
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	621a      	str	r2, [r3, #32]
 800df6a:	e008      	b.n	800df7e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	6a1b      	ldr	r3, [r3, #32]
 800df70:	1c59      	adds	r1, r3, #1
 800df72:	687a      	ldr	r2, [r7, #4]
 800df74:	6211      	str	r1, [r2, #32]
 800df76:	781a      	ldrb	r2, [r3, #0]
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800df82:	b29b      	uxth	r3, r3
 800df84:	3b01      	subs	r3, #1
 800df86:	b29b      	uxth	r3, r3
 800df88:	687a      	ldr	r2, [r7, #4]
 800df8a:	4619      	mov	r1, r3
 800df8c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d10f      	bne.n	800dfb2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	68da      	ldr	r2, [r3, #12]
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dfa0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	68da      	ldr	r2, [r3, #12]
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dfb0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	e000      	b.n	800dfb8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800dfb6:	2302      	movs	r3, #2
  }
}
 800dfb8:	4618      	mov	r0, r3
 800dfba:	3714      	adds	r7, #20
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bc80      	pop	{r7}
 800dfc0:	4770      	bx	lr

0800dfc2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dfc2:	b580      	push	{r7, lr}
 800dfc4:	b082      	sub	sp, #8
 800dfc6:	af00      	add	r7, sp, #0
 800dfc8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	68da      	ldr	r2, [r3, #12]
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dfd8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	2220      	movs	r2, #32
 800dfde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f7ff ff4c 	bl	800de80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800dfe8:	2300      	movs	r3, #0
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	3708      	adds	r7, #8
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}

0800dff2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800dff2:	b580      	push	{r7, lr}
 800dff4:	b084      	sub	sp, #16
 800dff6:	af00      	add	r7, sp, #0
 800dff8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e000:	b2db      	uxtb	r3, r3
 800e002:	2b22      	cmp	r3, #34	; 0x22
 800e004:	d171      	bne.n	800e0ea <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	689b      	ldr	r3, [r3, #8]
 800e00a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e00e:	d123      	bne.n	800e058 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e014:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	691b      	ldr	r3, [r3, #16]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d10e      	bne.n	800e03c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	685b      	ldr	r3, [r3, #4]
 800e024:	b29b      	uxth	r3, r3
 800e026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e02a:	b29a      	uxth	r2, r3
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e034:	1c9a      	adds	r2, r3, #2
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	629a      	str	r2, [r3, #40]	; 0x28
 800e03a:	e029      	b.n	800e090 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	685b      	ldr	r3, [r3, #4]
 800e042:	b29b      	uxth	r3, r3
 800e044:	b2db      	uxtb	r3, r3
 800e046:	b29a      	uxth	r2, r3
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e050:	1c5a      	adds	r2, r3, #1
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	629a      	str	r2, [r3, #40]	; 0x28
 800e056:	e01b      	b.n	800e090 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	691b      	ldr	r3, [r3, #16]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d10a      	bne.n	800e076 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	6858      	ldr	r0, [r3, #4]
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e06a:	1c59      	adds	r1, r3, #1
 800e06c:	687a      	ldr	r2, [r7, #4]
 800e06e:	6291      	str	r1, [r2, #40]	; 0x28
 800e070:	b2c2      	uxtb	r2, r0
 800e072:	701a      	strb	r2, [r3, #0]
 800e074:	e00c      	b.n	800e090 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	685b      	ldr	r3, [r3, #4]
 800e07c:	b2da      	uxtb	r2, r3
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e082:	1c58      	adds	r0, r3, #1
 800e084:	6879      	ldr	r1, [r7, #4]
 800e086:	6288      	str	r0, [r1, #40]	; 0x28
 800e088:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e08c:	b2d2      	uxtb	r2, r2
 800e08e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e094:	b29b      	uxth	r3, r3
 800e096:	3b01      	subs	r3, #1
 800e098:	b29b      	uxth	r3, r3
 800e09a:	687a      	ldr	r2, [r7, #4]
 800e09c:	4619      	mov	r1, r3
 800e09e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d120      	bne.n	800e0e6 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	68da      	ldr	r2, [r3, #12]
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	f022 0220 	bic.w	r2, r2, #32
 800e0b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	68da      	ldr	r2, [r3, #12]
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e0c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	695a      	ldr	r2, [r3, #20]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	f022 0201 	bic.w	r2, r2, #1
 800e0d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2220      	movs	r2, #32
 800e0d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f7ff fed8 	bl	800de92 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	e002      	b.n	800e0ec <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	e000      	b.n	800e0ec <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800e0ea:	2302      	movs	r3, #2
  }
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	3710      	adds	r7, #16
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}

0800e0f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b084      	sub	sp, #16
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	685b      	ldr	r3, [r3, #4]
 800e100:	4a84      	ldr	r2, [pc, #528]	; (800e314 <UART_SetConfig+0x220>)
 800e102:	4293      	cmp	r3, r2
 800e104:	d904      	bls.n	800e110 <UART_SetConfig+0x1c>
 800e106:	f640 31fd 	movw	r1, #3069	; 0xbfd
 800e10a:	4883      	ldr	r0, [pc, #524]	; (800e318 <UART_SetConfig+0x224>)
 800e10c:	f7fb fa16 	bl	800953c <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	68db      	ldr	r3, [r3, #12]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d009      	beq.n	800e12c <UART_SetConfig+0x38>
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	68db      	ldr	r3, [r3, #12]
 800e11c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e120:	d004      	beq.n	800e12c <UART_SetConfig+0x38>
 800e122:	f640 31fe 	movw	r1, #3070	; 0xbfe
 800e126:	487c      	ldr	r0, [pc, #496]	; (800e318 <UART_SetConfig+0x224>)
 800e128:	f7fb fa08 	bl	800953c <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	691b      	ldr	r3, [r3, #16]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d00e      	beq.n	800e152 <UART_SetConfig+0x5e>
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	691b      	ldr	r3, [r3, #16]
 800e138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e13c:	d009      	beq.n	800e152 <UART_SetConfig+0x5e>
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	691b      	ldr	r3, [r3, #16]
 800e142:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e146:	d004      	beq.n	800e152 <UART_SetConfig+0x5e>
 800e148:	f640 31ff 	movw	r1, #3071	; 0xbff
 800e14c:	4872      	ldr	r0, [pc, #456]	; (800e318 <UART_SetConfig+0x224>)
 800e14e:	f7fb f9f5 	bl	800953c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	695a      	ldr	r2, [r3, #20]
 800e156:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800e15a:	4013      	ands	r3, r2
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d103      	bne.n	800e168 <UART_SetConfig+0x74>
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	695b      	ldr	r3, [r3, #20]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d104      	bne.n	800e172 <UART_SetConfig+0x7e>
 800e168:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800e16c:	486a      	ldr	r0, [pc, #424]	; (800e318 <UART_SetConfig+0x224>)
 800e16e:	f7fb f9e5 	bl	800953c <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	691b      	ldr	r3, [r3, #16]
 800e178:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	68da      	ldr	r2, [r3, #12]
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	430a      	orrs	r2, r1
 800e186:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	689a      	ldr	r2, [r3, #8]
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	691b      	ldr	r3, [r3, #16]
 800e190:	431a      	orrs	r2, r3
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	695b      	ldr	r3, [r3, #20]
 800e196:	4313      	orrs	r3, r2
 800e198:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	68db      	ldr	r3, [r3, #12]
 800e1a0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800e1a4:	f023 030c 	bic.w	r3, r3, #12
 800e1a8:	687a      	ldr	r2, [r7, #4]
 800e1aa:	6812      	ldr	r2, [r2, #0]
 800e1ac:	68f9      	ldr	r1, [r7, #12]
 800e1ae:	430b      	orrs	r3, r1
 800e1b0:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	695b      	ldr	r3, [r3, #20]
 800e1b8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	699a      	ldr	r2, [r3, #24]
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	430a      	orrs	r2, r1
 800e1c6:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	4a53      	ldr	r2, [pc, #332]	; (800e31c <UART_SetConfig+0x228>)
 800e1ce:	4293      	cmp	r3, r2
 800e1d0:	d14e      	bne.n	800e270 <UART_SetConfig+0x17c>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800e1d2:	f7fe fbad 	bl	800c930 <HAL_RCC_GetPCLK2Freq>
 800e1d6:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e1d8:	68ba      	ldr	r2, [r7, #8]
 800e1da:	4613      	mov	r3, r2
 800e1dc:	009b      	lsls	r3, r3, #2
 800e1de:	4413      	add	r3, r2
 800e1e0:	009a      	lsls	r2, r3, #2
 800e1e2:	441a      	add	r2, r3
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	685b      	ldr	r3, [r3, #4]
 800e1e8:	009b      	lsls	r3, r3, #2
 800e1ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1ee:	4a4c      	ldr	r2, [pc, #304]	; (800e320 <UART_SetConfig+0x22c>)
 800e1f0:	fba2 2303 	umull	r2, r3, r2, r3
 800e1f4:	095b      	lsrs	r3, r3, #5
 800e1f6:	0119      	lsls	r1, r3, #4
 800e1f8:	68ba      	ldr	r2, [r7, #8]
 800e1fa:	4613      	mov	r3, r2
 800e1fc:	009b      	lsls	r3, r3, #2
 800e1fe:	4413      	add	r3, r2
 800e200:	009a      	lsls	r2, r3, #2
 800e202:	441a      	add	r2, r3
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	685b      	ldr	r3, [r3, #4]
 800e208:	009b      	lsls	r3, r3, #2
 800e20a:	fbb2 f2f3 	udiv	r2, r2, r3
 800e20e:	4b44      	ldr	r3, [pc, #272]	; (800e320 <UART_SetConfig+0x22c>)
 800e210:	fba3 0302 	umull	r0, r3, r3, r2
 800e214:	095b      	lsrs	r3, r3, #5
 800e216:	2064      	movs	r0, #100	; 0x64
 800e218:	fb00 f303 	mul.w	r3, r0, r3
 800e21c:	1ad3      	subs	r3, r2, r3
 800e21e:	011b      	lsls	r3, r3, #4
 800e220:	3332      	adds	r3, #50	; 0x32
 800e222:	4a3f      	ldr	r2, [pc, #252]	; (800e320 <UART_SetConfig+0x22c>)
 800e224:	fba2 2303 	umull	r2, r3, r2, r3
 800e228:	095b      	lsrs	r3, r3, #5
 800e22a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e22e:	4419      	add	r1, r3
 800e230:	68ba      	ldr	r2, [r7, #8]
 800e232:	4613      	mov	r3, r2
 800e234:	009b      	lsls	r3, r3, #2
 800e236:	4413      	add	r3, r2
 800e238:	009a      	lsls	r2, r3, #2
 800e23a:	441a      	add	r2, r3
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	685b      	ldr	r3, [r3, #4]
 800e240:	009b      	lsls	r3, r3, #2
 800e242:	fbb2 f2f3 	udiv	r2, r2, r3
 800e246:	4b36      	ldr	r3, [pc, #216]	; (800e320 <UART_SetConfig+0x22c>)
 800e248:	fba3 0302 	umull	r0, r3, r3, r2
 800e24c:	095b      	lsrs	r3, r3, #5
 800e24e:	2064      	movs	r0, #100	; 0x64
 800e250:	fb00 f303 	mul.w	r3, r0, r3
 800e254:	1ad3      	subs	r3, r2, r3
 800e256:	011b      	lsls	r3, r3, #4
 800e258:	3332      	adds	r3, #50	; 0x32
 800e25a:	4a31      	ldr	r2, [pc, #196]	; (800e320 <UART_SetConfig+0x22c>)
 800e25c:	fba2 2303 	umull	r2, r3, r2, r3
 800e260:	095b      	lsrs	r3, r3, #5
 800e262:	f003 020f 	and.w	r2, r3, #15
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	440a      	add	r2, r1
 800e26c:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800e26e:	e04d      	b.n	800e30c <UART_SetConfig+0x218>
    pclk = HAL_RCC_GetPCLK1Freq();
 800e270:	f7fe fb4a 	bl	800c908 <HAL_RCC_GetPCLK1Freq>
 800e274:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e276:	68ba      	ldr	r2, [r7, #8]
 800e278:	4613      	mov	r3, r2
 800e27a:	009b      	lsls	r3, r3, #2
 800e27c:	4413      	add	r3, r2
 800e27e:	009a      	lsls	r2, r3, #2
 800e280:	441a      	add	r2, r3
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	685b      	ldr	r3, [r3, #4]
 800e286:	009b      	lsls	r3, r3, #2
 800e288:	fbb2 f3f3 	udiv	r3, r2, r3
 800e28c:	4a24      	ldr	r2, [pc, #144]	; (800e320 <UART_SetConfig+0x22c>)
 800e28e:	fba2 2303 	umull	r2, r3, r2, r3
 800e292:	095b      	lsrs	r3, r3, #5
 800e294:	0119      	lsls	r1, r3, #4
 800e296:	68ba      	ldr	r2, [r7, #8]
 800e298:	4613      	mov	r3, r2
 800e29a:	009b      	lsls	r3, r3, #2
 800e29c:	4413      	add	r3, r2
 800e29e:	009a      	lsls	r2, r3, #2
 800e2a0:	441a      	add	r2, r3
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	685b      	ldr	r3, [r3, #4]
 800e2a6:	009b      	lsls	r3, r3, #2
 800e2a8:	fbb2 f2f3 	udiv	r2, r2, r3
 800e2ac:	4b1c      	ldr	r3, [pc, #112]	; (800e320 <UART_SetConfig+0x22c>)
 800e2ae:	fba3 0302 	umull	r0, r3, r3, r2
 800e2b2:	095b      	lsrs	r3, r3, #5
 800e2b4:	2064      	movs	r0, #100	; 0x64
 800e2b6:	fb00 f303 	mul.w	r3, r0, r3
 800e2ba:	1ad3      	subs	r3, r2, r3
 800e2bc:	011b      	lsls	r3, r3, #4
 800e2be:	3332      	adds	r3, #50	; 0x32
 800e2c0:	4a17      	ldr	r2, [pc, #92]	; (800e320 <UART_SetConfig+0x22c>)
 800e2c2:	fba2 2303 	umull	r2, r3, r2, r3
 800e2c6:	095b      	lsrs	r3, r3, #5
 800e2c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e2cc:	4419      	add	r1, r3
 800e2ce:	68ba      	ldr	r2, [r7, #8]
 800e2d0:	4613      	mov	r3, r2
 800e2d2:	009b      	lsls	r3, r3, #2
 800e2d4:	4413      	add	r3, r2
 800e2d6:	009a      	lsls	r2, r3, #2
 800e2d8:	441a      	add	r2, r3
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	685b      	ldr	r3, [r3, #4]
 800e2de:	009b      	lsls	r3, r3, #2
 800e2e0:	fbb2 f2f3 	udiv	r2, r2, r3
 800e2e4:	4b0e      	ldr	r3, [pc, #56]	; (800e320 <UART_SetConfig+0x22c>)
 800e2e6:	fba3 0302 	umull	r0, r3, r3, r2
 800e2ea:	095b      	lsrs	r3, r3, #5
 800e2ec:	2064      	movs	r0, #100	; 0x64
 800e2ee:	fb00 f303 	mul.w	r3, r0, r3
 800e2f2:	1ad3      	subs	r3, r2, r3
 800e2f4:	011b      	lsls	r3, r3, #4
 800e2f6:	3332      	adds	r3, #50	; 0x32
 800e2f8:	4a09      	ldr	r2, [pc, #36]	; (800e320 <UART_SetConfig+0x22c>)
 800e2fa:	fba2 2303 	umull	r2, r3, r2, r3
 800e2fe:	095b      	lsrs	r3, r3, #5
 800e300:	f003 020f 	and.w	r2, r3, #15
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	440a      	add	r2, r1
 800e30a:	609a      	str	r2, [r3, #8]
}
 800e30c:	bf00      	nop
 800e30e:	3710      	adds	r7, #16
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}
 800e314:	0044aa20 	.word	0x0044aa20
 800e318:	0800fa78 	.word	0x0800fa78
 800e31c:	40013800 	.word	0x40013800
 800e320:	51eb851f 	.word	0x51eb851f

0800e324 <_Znaj>:
 800e324:	f000 b800 	b.w	800e328 <_Znwj>

0800e328 <_Znwj>:
 800e328:	b510      	push	{r4, lr}
 800e32a:	2800      	cmp	r0, #0
 800e32c:	bf14      	ite	ne
 800e32e:	4604      	movne	r4, r0
 800e330:	2401      	moveq	r4, #1
 800e332:	4620      	mov	r0, r4
 800e334:	f000 fba8 	bl	800ea88 <malloc>
 800e338:	b930      	cbnz	r0, 800e348 <_Znwj+0x20>
 800e33a:	f000 f807 	bl	800e34c <_ZSt15get_new_handlerv>
 800e33e:	b908      	cbnz	r0, 800e344 <_Znwj+0x1c>
 800e340:	f000 fb70 	bl	800ea24 <abort>
 800e344:	4780      	blx	r0
 800e346:	e7f4      	b.n	800e332 <_Znwj+0xa>
 800e348:	bd10      	pop	{r4, pc}
	...

0800e34c <_ZSt15get_new_handlerv>:
 800e34c:	4b02      	ldr	r3, [pc, #8]	; (800e358 <_ZSt15get_new_handlerv+0xc>)
 800e34e:	6818      	ldr	r0, [r3, #0]
 800e350:	f3bf 8f5b 	dmb	ish
 800e354:	4770      	bx	lr
 800e356:	bf00      	nop
 800e358:	20000530 	.word	0x20000530

0800e35c <_ZdlPv>:
 800e35c:	f000 bb9c 	b.w	800ea98 <free>

0800e360 <_ZNSaIcEC1Ev>:
 800e360:	4770      	bx	lr

0800e362 <_ZNSaIcED1Ev>:
 800e362:	4770      	bx	lr

0800e364 <_ZSt17__throw_bad_allocv>:
 800e364:	b508      	push	{r3, lr}
 800e366:	f000 fb5d 	bl	800ea24 <abort>

0800e36a <_ZSt19__throw_logic_errorPKc>:
 800e36a:	b508      	push	{r3, lr}
 800e36c:	f000 fb5a 	bl	800ea24 <abort>

0800e370 <_ZSt20__throw_length_errorPKc>:
 800e370:	b508      	push	{r3, lr}
 800e372:	f000 fb57 	bl	800ea24 <abort>

0800e376 <_ZSt24__throw_out_of_range_fmtPKcz>:
 800e376:	b40f      	push	{r0, r1, r2, r3}
 800e378:	b580      	push	{r7, lr}
 800e37a:	b082      	sub	sp, #8
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	f107 0410 	add.w	r4, r7, #16
 800e382:	f854 5b04 	ldr.w	r5, [r4], #4
 800e386:	4628      	mov	r0, r5
 800e388:	f7f1 fee2 	bl	8000150 <strlen>
 800e38c:	f200 230e 	addw	r3, r0, #526	; 0x20e
 800e390:	f023 0307 	bic.w	r3, r3, #7
 800e394:	ebad 0d03 	sub.w	sp, sp, r3
 800e398:	f500 7100 	add.w	r1, r0, #512	; 0x200
 800e39c:	4623      	mov	r3, r4
 800e39e:	462a      	mov	r2, r5
 800e3a0:	4668      	mov	r0, sp
 800e3a2:	607c      	str	r4, [r7, #4]
 800e3a4:	f000 fad8 	bl	800e958 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 800e3a8:	f000 fb3c 	bl	800ea24 <abort>

0800e3ac <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 800e3ac:	b10a      	cbz	r2, 800e3b2 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 800e3ae:	f000 bb89 	b.w	800eac4 <memcmp>
 800e3b2:	4610      	mov	r0, r2
 800e3b4:	4770      	bx	lr

0800e3b6 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 800e3b6:	b10a      	cbz	r2, 800e3bc <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 800e3b8:	f000 bb93 	b.w	800eae2 <memcpy>
 800e3bc:	4770      	bx	lr

0800e3be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 800e3be:	6001      	str	r1, [r0, #0]
 800e3c0:	4770      	bx	lr

0800e3c2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 800e3c2:	6800      	ldr	r0, [r0, #0]
 800e3c4:	4770      	bx	lr

0800e3c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 800e3c6:	3008      	adds	r0, #8
 800e3c8:	4770      	bx	lr

0800e3ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 800e3ca:	6081      	str	r1, [r0, #8]
 800e3cc:	4770      	bx	lr

0800e3ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	6803      	ldr	r3, [r0, #0]
 800e3d2:	6041      	str	r1, [r0, #4]
 800e3d4:	545a      	strb	r2, [r3, r1]
 800e3d6:	4770      	bx	lr

0800e3d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800e3d8:	b508      	push	{r3, lr}
 800e3da:	680b      	ldr	r3, [r1, #0]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	da02      	bge.n	800e3e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 800e3e0:	4809      	ldr	r0, [pc, #36]	; (800e408 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 800e3e2:	f7ff ffc5 	bl	800e370 <_ZSt20__throw_length_errorPKc>
 800e3e6:	4293      	cmp	r3, r2
 800e3e8:	d908      	bls.n	800e3fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800e3ea:	0052      	lsls	r2, r2, #1
 800e3ec:	4293      	cmp	r3, r2
 800e3ee:	d205      	bcs.n	800e3fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800e3f0:	2a00      	cmp	r2, #0
 800e3f2:	bfb6      	itet	lt
 800e3f4:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800e3f8:	600a      	strge	r2, [r1, #0]
 800e3fa:	600b      	strlt	r3, [r1, #0]
 800e3fc:	6808      	ldr	r0, [r1, #0]
 800e3fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e402:	3001      	adds	r0, #1
 800e404:	f7ff bf90 	b.w	800e328 <_Znwj>
 800e408:	08012635 	.word	0x08012635

0800e40c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800e40c:	4603      	mov	r3, r0
 800e40e:	f853 0b08 	ldr.w	r0, [r3], #8
 800e412:	4298      	cmp	r0, r3
 800e414:	d001      	beq.n	800e41a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800e416:	f7ff bfa1 	b.w	800e35c <_ZdlPv>
 800e41a:	4770      	bx	lr

0800e41c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 800e41c:	b510      	push	{r4, lr}
 800e41e:	6843      	ldr	r3, [r0, #4]
 800e420:	4614      	mov	r4, r2
 800e422:	4299      	cmp	r1, r3
 800e424:	d904      	bls.n	800e430 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x14>
 800e426:	460a      	mov	r2, r1
 800e428:	4802      	ldr	r0, [pc, #8]	; (800e434 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 800e42a:	4621      	mov	r1, r4
 800e42c:	f7ff ffa3 	bl	800e376 <_ZSt24__throw_out_of_range_fmtPKcz>
 800e430:	4608      	mov	r0, r1
 800e432:	bd10      	pop	{r4, pc}
 800e434:	08012590 	.word	0x08012590

0800e438 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 800e438:	b508      	push	{r3, lr}
 800e43a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800e43e:	6840      	ldr	r0, [r0, #4]
 800e440:	3901      	subs	r1, #1
 800e442:	1a09      	subs	r1, r1, r0
 800e444:	4291      	cmp	r1, r2
 800e446:	d202      	bcs.n	800e44e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 800e448:	4618      	mov	r0, r3
 800e44a:	f7ff ff91 	bl	800e370 <_ZSt20__throw_length_errorPKc>
 800e44e:	bd08      	pop	{r3, pc}

0800e450 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 800e450:	6803      	ldr	r3, [r0, #0]
 800e452:	428b      	cmp	r3, r1
 800e454:	d806      	bhi.n	800e464 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 800e456:	6840      	ldr	r0, [r0, #4]
 800e458:	4418      	add	r0, r3
 800e45a:	4281      	cmp	r1, r0
 800e45c:	bf94      	ite	ls
 800e45e:	2000      	movls	r0, #0
 800e460:	2001      	movhi	r0, #1
 800e462:	4770      	bx	lr
 800e464:	2001      	movs	r0, #1
 800e466:	4770      	bx	lr

0800e468 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800e468:	2a01      	cmp	r2, #1
 800e46a:	b510      	push	{r4, lr}
 800e46c:	d102      	bne.n	800e474 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 800e46e:	780a      	ldrb	r2, [r1, #0]
 800e470:	7002      	strb	r2, [r0, #0]
 800e472:	bd10      	pop	{r4, pc}
 800e474:	f7ff ff9f 	bl	800e3b6 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800e478:	e7fb      	b.n	800e472 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0800e47a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 800e47a:	2a01      	cmp	r2, #1
 800e47c:	b430      	push	{r4, r5}
 800e47e:	d103      	bne.n	800e488 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 800e480:	780b      	ldrb	r3, [r1, #0]
 800e482:	7003      	strb	r3, [r0, #0]
 800e484:	bc30      	pop	{r4, r5}
 800e486:	4770      	bx	lr
 800e488:	2a00      	cmp	r2, #0
 800e48a:	d0fb      	beq.n	800e484 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 800e48c:	bc30      	pop	{r4, r5}
 800e48e:	f000 bb33 	b.w	800eaf8 <memmove>

0800e492 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800e492:	b508      	push	{r3, lr}
 800e494:	1a52      	subs	r2, r2, r1
 800e496:	f7ff ffe7 	bl	800e468 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800e49a:	bd08      	pop	{r3, pc}

0800e49c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800e49c:	b508      	push	{r3, lr}
 800e49e:	1a52      	subs	r2, r2, r1
 800e4a0:	f7ff ffe2 	bl	800e468 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800e4a4:	bd08      	pop	{r3, pc}

0800e4a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 800e4a6:	4288      	cmp	r0, r1
 800e4a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e4aa:	4604      	mov	r4, r0
 800e4ac:	460e      	mov	r6, r1
 800e4ae:	d020      	beq.n	800e4f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4c>
 800e4b0:	6802      	ldr	r2, [r0, #0]
 800e4b2:	f100 0308 	add.w	r3, r0, #8
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	bf08      	it	eq
 800e4ba:	220f      	moveq	r2, #15
 800e4bc:	684d      	ldr	r5, [r1, #4]
 800e4be:	bf18      	it	ne
 800e4c0:	6882      	ldrne	r2, [r0, #8]
 800e4c2:	42aa      	cmp	r2, r5
 800e4c4:	d20b      	bcs.n	800e4de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x38>
 800e4c6:	a902      	add	r1, sp, #8
 800e4c8:	f841 5d04 	str.w	r5, [r1, #-4]!
 800e4cc:	f7ff ff84 	bl	800e3d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800e4d0:	4607      	mov	r7, r0
 800e4d2:	4620      	mov	r0, r4
 800e4d4:	f7ff ff9a 	bl	800e40c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800e4d8:	9b01      	ldr	r3, [sp, #4]
 800e4da:	6027      	str	r7, [r4, #0]
 800e4dc:	60a3      	str	r3, [r4, #8]
 800e4de:	b125      	cbz	r5, 800e4ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x44>
 800e4e0:	462a      	mov	r2, r5
 800e4e2:	6831      	ldr	r1, [r6, #0]
 800e4e4:	6820      	ldr	r0, [r4, #0]
 800e4e6:	f7ff ffbf 	bl	800e468 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	6823      	ldr	r3, [r4, #0]
 800e4ee:	6065      	str	r5, [r4, #4]
 800e4f0:	555a      	strb	r2, [r3, r5]
 800e4f2:	b003      	add	sp, #12
 800e4f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e4f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800e4f6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800e4fa:	4616      	mov	r6, r2
 800e4fc:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800e500:	6842      	ldr	r2, [r0, #4]
 800e502:	469a      	mov	sl, r3
 800e504:	eba8 0306 	sub.w	r3, r8, r6
 800e508:	1a57      	subs	r7, r2, r1
 800e50a:	4413      	add	r3, r2
 800e50c:	6802      	ldr	r2, [r0, #0]
 800e50e:	9301      	str	r3, [sp, #4]
 800e510:	f100 0308 	add.w	r3, r0, #8
 800e514:	429a      	cmp	r2, r3
 800e516:	460d      	mov	r5, r1
 800e518:	bf14      	ite	ne
 800e51a:	6882      	ldrne	r2, [r0, #8]
 800e51c:	220f      	moveq	r2, #15
 800e51e:	a901      	add	r1, sp, #4
 800e520:	4604      	mov	r4, r0
 800e522:	f7ff ff59 	bl	800e3d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800e526:	1bbf      	subs	r7, r7, r6
 800e528:	4681      	mov	r9, r0
 800e52a:	b11d      	cbz	r5, 800e534 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800e52c:	462a      	mov	r2, r5
 800e52e:	6821      	ldr	r1, [r4, #0]
 800e530:	f7ff ff9a 	bl	800e468 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800e534:	f1ba 0f00 	cmp.w	sl, #0
 800e538:	d008      	beq.n	800e54c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 800e53a:	f1b8 0f00 	cmp.w	r8, #0
 800e53e:	d005      	beq.n	800e54c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 800e540:	4642      	mov	r2, r8
 800e542:	4651      	mov	r1, sl
 800e544:	eb09 0005 	add.w	r0, r9, r5
 800e548:	f7ff ff8e 	bl	800e468 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800e54c:	b147      	cbz	r7, 800e560 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 800e54e:	6821      	ldr	r1, [r4, #0]
 800e550:	442e      	add	r6, r5
 800e552:	eb05 0008 	add.w	r0, r5, r8
 800e556:	463a      	mov	r2, r7
 800e558:	4431      	add	r1, r6
 800e55a:	4448      	add	r0, r9
 800e55c:	f7ff ff84 	bl	800e468 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800e560:	4620      	mov	r0, r4
 800e562:	f7ff ff53 	bl	800e40c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800e566:	9b01      	ldr	r3, [sp, #4]
 800e568:	f8c4 9000 	str.w	r9, [r4]
 800e56c:	60a3      	str	r3, [r4, #8]
 800e56e:	b002      	add	sp, #8
 800e570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800e574:	f100 0208 	add.w	r2, r0, #8
 800e578:	6002      	str	r2, [r0, #0]
 800e57a:	2200      	movs	r2, #0
 800e57c:	6042      	str	r2, [r0, #4]
 800e57e:	7202      	strb	r2, [r0, #8]
 800e580:	4770      	bx	lr

0800e582 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 800e582:	b570      	push	{r4, r5, r6, lr}
 800e584:	4604      	mov	r4, r0
 800e586:	460e      	mov	r6, r1
 800e588:	3008      	adds	r0, #8
 800e58a:	6020      	str	r0, [r4, #0]
 800e58c:	f856 3b08 	ldr.w	r3, [r6], #8
 800e590:	460d      	mov	r5, r1
 800e592:	429e      	cmp	r6, r3
 800e594:	d10b      	bne.n	800e5ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 800e596:	2210      	movs	r2, #16
 800e598:	4631      	mov	r1, r6
 800e59a:	f7ff ff0c 	bl	800e3b6 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800e59e:	686b      	ldr	r3, [r5, #4]
 800e5a0:	4620      	mov	r0, r4
 800e5a2:	6063      	str	r3, [r4, #4]
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	602e      	str	r6, [r5, #0]
 800e5a8:	606b      	str	r3, [r5, #4]
 800e5aa:	722b      	strb	r3, [r5, #8]
 800e5ac:	bd70      	pop	{r4, r5, r6, pc}
 800e5ae:	6023      	str	r3, [r4, #0]
 800e5b0:	688b      	ldr	r3, [r1, #8]
 800e5b2:	60a3      	str	r3, [r4, #8]
 800e5b4:	e7f3      	b.n	800e59e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

0800e5b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800e5b6:	b510      	push	{r4, lr}
 800e5b8:	4604      	mov	r4, r0
 800e5ba:	f7ff ff27 	bl	800e40c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800e5be:	4620      	mov	r0, r4
 800e5c0:	bd10      	pop	{r4, pc}

0800e5c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 800e5c2:	b510      	push	{r4, lr}
 800e5c4:	4604      	mov	r4, r0
 800e5c6:	f7ff ff6e 	bl	800e4a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 800e5ca:	4620      	mov	r0, r4
 800e5cc:	bd10      	pop	{r4, pc}

0800e5ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 800e5ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5d0:	460b      	mov	r3, r1
 800e5d2:	4606      	mov	r6, r0
 800e5d4:	f853 7b08 	ldr.w	r7, [r3], #8
 800e5d8:	4605      	mov	r5, r0
 800e5da:	42bb      	cmp	r3, r7
 800e5dc:	460c      	mov	r4, r1
 800e5de:	f856 2b08 	ldr.w	r2, [r6], #8
 800e5e2:	d016      	beq.n	800e612 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x44>
 800e5e4:	4296      	cmp	r6, r2
 800e5e6:	bf08      	it	eq
 800e5e8:	2200      	moveq	r2, #0
 800e5ea:	6007      	str	r7, [r0, #0]
 800e5ec:	6849      	ldr	r1, [r1, #4]
 800e5ee:	bf18      	it	ne
 800e5f0:	f8d0 c008 	ldrne.w	ip, [r0, #8]
 800e5f4:	6041      	str	r1, [r0, #4]
 800e5f6:	68a1      	ldr	r1, [r4, #8]
 800e5f8:	6081      	str	r1, [r0, #8]
 800e5fa:	b142      	cbz	r2, 800e60e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 800e5fc:	6022      	str	r2, [r4, #0]
 800e5fe:	f8c4 c008 	str.w	ip, [r4, #8]
 800e602:	2300      	movs	r3, #0
 800e604:	6822      	ldr	r2, [r4, #0]
 800e606:	6063      	str	r3, [r4, #4]
 800e608:	7013      	strb	r3, [r2, #0]
 800e60a:	4628      	mov	r0, r5
 800e60c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e60e:	6023      	str	r3, [r4, #0]
 800e610:	e7f7      	b.n	800e602 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>
 800e612:	f7ff ff48 	bl	800e4a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 800e616:	e7f4      	b.n	800e602 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>

0800e618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 800e618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e61c:	4614      	mov	r4, r2
 800e61e:	4681      	mov	r9, r0
 800e620:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e622:	460f      	mov	r7, r1
 800e624:	462a      	mov	r2, r5
 800e626:	4698      	mov	r8, r3
 800e628:	4621      	mov	r1, r4
 800e62a:	4b37      	ldr	r3, [pc, #220]	; (800e708 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf0>)
 800e62c:	f7ff ff04 	bl	800e438 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800e630:	464a      	mov	r2, r9
 800e632:	f852 6b08 	ldr.w	r6, [r2], #8
 800e636:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e63a:	4296      	cmp	r6, r2
 800e63c:	bf08      	it	eq
 800e63e:	220f      	moveq	r2, #15
 800e640:	eba5 0b04 	sub.w	fp, r5, r4
 800e644:	bf18      	it	ne
 800e646:	f8d9 2008 	ldrne.w	r2, [r9, #8]
 800e64a:	eb03 0a0b 	add.w	sl, r3, fp
 800e64e:	4552      	cmp	r2, sl
 800e650:	d34e      	bcc.n	800e6f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 800e652:	443e      	add	r6, r7
 800e654:	4641      	mov	r1, r8
 800e656:	1bdf      	subs	r7, r3, r7
 800e658:	4648      	mov	r0, r9
 800e65a:	1b3f      	subs	r7, r7, r4
 800e65c:	f7ff fef8 	bl	800e450 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 800e660:	b170      	cbz	r0, 800e680 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 800e662:	b137      	cbz	r7, 800e672 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 800e664:	42ac      	cmp	r4, r5
 800e666:	d004      	beq.n	800e672 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 800e668:	463a      	mov	r2, r7
 800e66a:	1931      	adds	r1, r6, r4
 800e66c:	1970      	adds	r0, r6, r5
 800e66e:	f7ff ff04 	bl	800e47a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800e672:	b30d      	cbz	r5, 800e6b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800e674:	462a      	mov	r2, r5
 800e676:	4641      	mov	r1, r8
 800e678:	4630      	mov	r0, r6
 800e67a:	f7ff fef5 	bl	800e468 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800e67e:	e01b      	b.n	800e6b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800e680:	b135      	cbz	r5, 800e690 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x78>
 800e682:	42ac      	cmp	r4, r5
 800e684:	d33c      	bcc.n	800e700 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xe8>
 800e686:	462a      	mov	r2, r5
 800e688:	4641      	mov	r1, r8
 800e68a:	4630      	mov	r0, r6
 800e68c:	f7ff fef5 	bl	800e47a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800e690:	b197      	cbz	r7, 800e6b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800e692:	42ac      	cmp	r4, r5
 800e694:	d010      	beq.n	800e6b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800e696:	463a      	mov	r2, r7
 800e698:	1931      	adds	r1, r6, r4
 800e69a:	1970      	adds	r0, r6, r5
 800e69c:	f7ff feed 	bl	800e47a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800e6a0:	42ac      	cmp	r4, r5
 800e6a2:	d209      	bcs.n	800e6b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800e6a4:	4434      	add	r4, r6
 800e6a6:	eb08 0305 	add.w	r3, r8, r5
 800e6aa:	429c      	cmp	r4, r3
 800e6ac:	d30f      	bcc.n	800e6ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 800e6ae:	462a      	mov	r2, r5
 800e6b0:	4641      	mov	r1, r8
 800e6b2:	4630      	mov	r0, r6
 800e6b4:	f7ff fee1 	bl	800e47a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	4648      	mov	r0, r9
 800e6bc:	f8d9 3000 	ldr.w	r3, [r9]
 800e6c0:	f8c9 a004 	str.w	sl, [r9, #4]
 800e6c4:	f803 200a 	strb.w	r2, [r3, sl]
 800e6c8:	b003      	add	sp, #12
 800e6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6ce:	4544      	cmp	r4, r8
 800e6d0:	d803      	bhi.n	800e6da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc2>
 800e6d2:	462a      	mov	r2, r5
 800e6d4:	eb08 010b 	add.w	r1, r8, fp
 800e6d8:	e7ce      	b.n	800e678 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800e6da:	eba4 0408 	sub.w	r4, r4, r8
 800e6de:	4622      	mov	r2, r4
 800e6e0:	4641      	mov	r1, r8
 800e6e2:	4630      	mov	r0, r6
 800e6e4:	f7ff fec9 	bl	800e47a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800e6e8:	1b2a      	subs	r2, r5, r4
 800e6ea:	1971      	adds	r1, r6, r5
 800e6ec:	1930      	adds	r0, r6, r4
 800e6ee:	e7c4      	b.n	800e67a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x62>
 800e6f0:	9500      	str	r5, [sp, #0]
 800e6f2:	4643      	mov	r3, r8
 800e6f4:	4622      	mov	r2, r4
 800e6f6:	4639      	mov	r1, r7
 800e6f8:	4648      	mov	r0, r9
 800e6fa:	f7ff fefc 	bl	800e4f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800e6fe:	e7db      	b.n	800e6b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800e700:	2f00      	cmp	r7, #0
 800e702:	d0cf      	beq.n	800e6a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x8c>
 800e704:	e7c7      	b.n	800e696 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 800e706:	bf00      	nop
 800e708:	080125c7 	.word	0x080125c7

0800e70c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 800e70c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e70e:	4604      	mov	r4, r0
 800e710:	4608      	mov	r0, r1
 800e712:	460d      	mov	r5, r1
 800e714:	f7f1 fd1c 	bl	8000150 <strlen>
 800e718:	462b      	mov	r3, r5
 800e71a:	9000      	str	r0, [sp, #0]
 800e71c:	6862      	ldr	r2, [r4, #4]
 800e71e:	2100      	movs	r1, #0
 800e720:	4620      	mov	r0, r4
 800e722:	f7ff ff79 	bl	800e618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 800e726:	b003      	add	sp, #12
 800e728:	bd30      	pop	{r4, r5, pc}

0800e72a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 800e72a:	b508      	push	{r3, lr}
 800e72c:	f7ff ffee 	bl	800e70c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 800e730:	bd08      	pop	{r3, pc}
	...

0800e734 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 800e734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e736:	4604      	mov	r4, r0
 800e738:	460f      	mov	r7, r1
 800e73a:	4615      	mov	r5, r2
 800e73c:	4a08      	ldr	r2, [pc, #32]	; (800e760 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 800e73e:	461e      	mov	r6, r3
 800e740:	f7ff fe6c 	bl	800e41c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 800e744:	6862      	ldr	r2, [r4, #4]
 800e746:	9b08      	ldr	r3, [sp, #32]
 800e748:	1bd2      	subs	r2, r2, r7
 800e74a:	42aa      	cmp	r2, r5
 800e74c:	9300      	str	r3, [sp, #0]
 800e74e:	4601      	mov	r1, r0
 800e750:	4633      	mov	r3, r6
 800e752:	bf28      	it	cs
 800e754:	462a      	movcs	r2, r5
 800e756:	4620      	mov	r0, r4
 800e758:	f7ff ff5e 	bl	800e618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 800e75c:	b003      	add	sp, #12
 800e75e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e760:	0801261f 	.word	0x0801261f

0800e764 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 800e764:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e766:	4605      	mov	r5, r0
 800e768:	4610      	mov	r0, r2
 800e76a:	4614      	mov	r4, r2
 800e76c:	460e      	mov	r6, r1
 800e76e:	f7f1 fcef 	bl	8000150 <strlen>
 800e772:	4623      	mov	r3, r4
 800e774:	9000      	str	r0, [sp, #0]
 800e776:	2200      	movs	r2, #0
 800e778:	4631      	mov	r1, r6
 800e77a:	4628      	mov	r0, r5
 800e77c:	f7ff ffda 	bl	800e734 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 800e780:	b002      	add	sp, #8
 800e782:	bd70      	pop	{r4, r5, r6, pc}

0800e784 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800e784:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e786:	4604      	mov	r4, r0
 800e788:	4626      	mov	r6, r4
 800e78a:	f856 3b08 	ldr.w	r3, [r6], #8
 800e78e:	6840      	ldr	r0, [r0, #4]
 800e790:	42b3      	cmp	r3, r6
 800e792:	bf0c      	ite	eq
 800e794:	260f      	moveq	r6, #15
 800e796:	68a6      	ldrne	r6, [r4, #8]
 800e798:	1885      	adds	r5, r0, r2
 800e79a:	42b5      	cmp	r5, r6
 800e79c:	d80a      	bhi.n	800e7b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x30>
 800e79e:	b112      	cbz	r2, 800e7a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>
 800e7a0:	4418      	add	r0, r3
 800e7a2:	f7ff fe61 	bl	800e468 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	4620      	mov	r0, r4
 800e7aa:	6823      	ldr	r3, [r4, #0]
 800e7ac:	6065      	str	r5, [r4, #4]
 800e7ae:	555a      	strb	r2, [r3, r5]
 800e7b0:	b002      	add	sp, #8
 800e7b2:	bd70      	pop	{r4, r5, r6, pc}
 800e7b4:	9200      	str	r2, [sp, #0]
 800e7b6:	460b      	mov	r3, r1
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	4601      	mov	r1, r0
 800e7bc:	4620      	mov	r0, r4
 800e7be:	f7ff fe9a 	bl	800e4f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800e7c2:	e7f0      	b.n	800e7a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>

0800e7c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 800e7c4:	b508      	push	{r3, lr}
 800e7c6:	e9d1 1200 	ldrd	r1, r2, [r1]
 800e7ca:	f7ff ffdb 	bl	800e784 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800e7ce:	bd08      	pop	{r3, pc}

0800e7d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 800e7d0:	b570      	push	{r4, r5, r6, lr}
 800e7d2:	4604      	mov	r4, r0
 800e7d4:	4608      	mov	r0, r1
 800e7d6:	460d      	mov	r5, r1
 800e7d8:	f7f1 fcba 	bl	8000150 <strlen>
 800e7dc:	4606      	mov	r6, r0
 800e7de:	4602      	mov	r2, r0
 800e7e0:	4b05      	ldr	r3, [pc, #20]	; (800e7f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 800e7e2:	4620      	mov	r0, r4
 800e7e4:	2100      	movs	r1, #0
 800e7e6:	f7ff fe27 	bl	800e438 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800e7ea:	4632      	mov	r2, r6
 800e7ec:	4629      	mov	r1, r5
 800e7ee:	4620      	mov	r0, r4
 800e7f0:	f7ff ffc8 	bl	800e784 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800e7f4:	bd70      	pop	{r4, r5, r6, pc}
 800e7f6:	bf00      	nop
 800e7f8:	0801260a 	.word	0x0801260a

0800e7fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800e7fc:	6800      	ldr	r0, [r0, #0]
 800e7fe:	4770      	bx	lr

0800e800 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 800e800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e802:	4606      	mov	r6, r0
 800e804:	6845      	ldr	r5, [r0, #4]
 800e806:	4608      	mov	r0, r1
 800e808:	460f      	mov	r7, r1
 800e80a:	f7f1 fca1 	bl	8000150 <strlen>
 800e80e:	4285      	cmp	r5, r0
 800e810:	4604      	mov	r4, r0
 800e812:	462a      	mov	r2, r5
 800e814:	4639      	mov	r1, r7
 800e816:	bf28      	it	cs
 800e818:	4602      	movcs	r2, r0
 800e81a:	6830      	ldr	r0, [r6, #0]
 800e81c:	f7ff fdc6 	bl	800e3ac <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 800e820:	b900      	cbnz	r0, 800e824 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 800e822:	1b28      	subs	r0, r5, r4
 800e824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e826 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 800e826:	6001      	str	r1, [r0, #0]
 800e828:	4770      	bx	lr

0800e82a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800e82a:	b510      	push	{r4, lr}
 800e82c:	4604      	mov	r4, r0
 800e82e:	f100 0208 	add.w	r2, r0, #8
 800e832:	6002      	str	r2, [r0, #0]
 800e834:	e9d1 1200 	ldrd	r1, r2, [r1]
 800e838:	f04f 0300 	mov.w	r3, #0
 800e83c:	440a      	add	r2, r1
 800e83e:	f7f5 fc13 	bl	8004068 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 800e842:	4620      	mov	r0, r4
 800e844:	bd10      	pop	{r4, pc}
	...

0800e848 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800e848:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e84a:	4604      	mov	r4, r0
 800e84c:	4616      	mov	r6, r2
 800e84e:	460d      	mov	r5, r1
 800e850:	b919      	cbnz	r1, 800e85a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800e852:	b112      	cbz	r2, 800e85a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800e854:	480d      	ldr	r0, [pc, #52]	; (800e88c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800e856:	f7ff fd88 	bl	800e36a <_ZSt19__throw_logic_errorPKc>
 800e85a:	1b73      	subs	r3, r6, r5
 800e85c:	2b0f      	cmp	r3, #15
 800e85e:	9301      	str	r3, [sp, #4]
 800e860:	d907      	bls.n	800e872 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800e862:	2200      	movs	r2, #0
 800e864:	a901      	add	r1, sp, #4
 800e866:	4620      	mov	r0, r4
 800e868:	f7ff fdb6 	bl	800e3d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800e86c:	9b01      	ldr	r3, [sp, #4]
 800e86e:	6020      	str	r0, [r4, #0]
 800e870:	60a3      	str	r3, [r4, #8]
 800e872:	4632      	mov	r2, r6
 800e874:	4629      	mov	r1, r5
 800e876:	6820      	ldr	r0, [r4, #0]
 800e878:	f7ff fe10 	bl	800e49c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800e87c:	2100      	movs	r1, #0
 800e87e:	9b01      	ldr	r3, [sp, #4]
 800e880:	6822      	ldr	r2, [r4, #0]
 800e882:	6063      	str	r3, [r4, #4]
 800e884:	54d1      	strb	r1, [r2, r3]
 800e886:	b002      	add	sp, #8
 800e888:	bd70      	pop	{r4, r5, r6, pc}
 800e88a:	bf00      	nop
 800e88c:	080125e0 	.word	0x080125e0

0800e890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800e890:	b538      	push	{r3, r4, r5, lr}
 800e892:	f100 0308 	add.w	r3, r0, #8
 800e896:	4604      	mov	r4, r0
 800e898:	6003      	str	r3, [r0, #0]
 800e89a:	460d      	mov	r5, r1
 800e89c:	b159      	cbz	r1, 800e8b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800e89e:	4608      	mov	r0, r1
 800e8a0:	f7f1 fc56 	bl	8000150 <strlen>
 800e8a4:	182a      	adds	r2, r5, r0
 800e8a6:	4620      	mov	r0, r4
 800e8a8:	f04f 0300 	mov.w	r3, #0
 800e8ac:	4629      	mov	r1, r5
 800e8ae:	f7ff ffcb 	bl	800e848 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800e8b2:	4620      	mov	r0, r4
 800e8b4:	bd38      	pop	{r3, r4, r5, pc}
 800e8b6:	f04f 32ff 	mov.w	r2, #4294967295
 800e8ba:	e7f4      	b.n	800e8a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800e8bc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b09c      	sub	sp, #112	; 0x70
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	1a0e      	subs	r6, r1, r0
 800e8c4:	4680      	mov	r8, r0
 800e8c6:	2269      	movs	r2, #105	; 0x69
 800e8c8:	490e      	ldr	r1, [pc, #56]	; (800e904 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 800e8ca:	1d38      	adds	r0, r7, #4
 800e8cc:	f000 f909 	bl	800eae2 <memcpy>
 800e8d0:	f106 0377 	add.w	r3, r6, #119	; 0x77
 800e8d4:	f023 0307 	bic.w	r3, r3, #7
 800e8d8:	ebad 0d03 	sub.w	sp, sp, r3
 800e8dc:	466c      	mov	r4, sp
 800e8de:	2268      	movs	r2, #104	; 0x68
 800e8e0:	1d39      	adds	r1, r7, #4
 800e8e2:	4620      	mov	r0, r4
 800e8e4:	f000 f8fd 	bl	800eae2 <memcpy>
 800e8e8:	4632      	mov	r2, r6
 800e8ea:	4641      	mov	r1, r8
 800e8ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e8f0:	f000 f8f7 	bl	800eae2 <memcpy>
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	1c75      	adds	r5, r6, #1
 800e8f8:	4425      	add	r5, r4
 800e8fa:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 800e8fe:	4620      	mov	r0, r4
 800e900:	f7ff fd33 	bl	800e36a <_ZSt19__throw_logic_errorPKc>
 800e904:	08012658 	.word	0x08012658

0800e908 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 800e908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e90a:	af00      	add	r7, sp, #0
 800e90c:	b086      	sub	sp, #24
 800e90e:	466d      	mov	r5, sp
 800e910:	f105 040c 	add.w	r4, r5, #12
 800e914:	4623      	mov	r3, r4
 800e916:	f04f 0c0a 	mov.w	ip, #10
 800e91a:	f8df e038 	ldr.w	lr, [pc, #56]	; 800e954 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 800e91e:	fbb2 f6fc 	udiv	r6, r2, ip
 800e922:	fb0c 2216 	mls	r2, ip, r6, r2
 800e926:	f81e 2002 	ldrb.w	r2, [lr, r2]
 800e92a:	f803 2d01 	strb.w	r2, [r3, #-1]!
 800e92e:	4632      	mov	r2, r6
 800e930:	2e00      	cmp	r6, #0
 800e932:	d1f4      	bne.n	800e91e <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 800e934:	1ae4      	subs	r4, r4, r3
 800e936:	428c      	cmp	r4, r1
 800e938:	d808      	bhi.n	800e94c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 800e93a:	f1c4 010c 	rsb	r1, r4, #12
 800e93e:	4622      	mov	r2, r4
 800e940:	4429      	add	r1, r5
 800e942:	f000 f8ce 	bl	800eae2 <memcpy>
 800e946:	4620      	mov	r0, r4
 800e948:	46bd      	mov	sp, r7
 800e94a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e94c:	f04f 34ff 	mov.w	r4, #4294967295
 800e950:	e7f9      	b.n	800e946 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 800e952:	bf00      	nop
 800e954:	0801264d 	.word	0x0801264d

0800e958 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 800e958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e95c:	4606      	mov	r6, r0
 800e95e:	4615      	mov	r5, r2
 800e960:	4604      	mov	r4, r0
 800e962:	3901      	subs	r1, #1
 800e964:	1847      	adds	r7, r0, r1
 800e966:	782a      	ldrb	r2, [r5, #0]
 800e968:	b39a      	cbz	r2, 800e9d2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 800e96a:	42bc      	cmp	r4, r7
 800e96c:	d22d      	bcs.n	800e9ca <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 800e96e:	2a25      	cmp	r2, #37	; 0x25
 800e970:	d107      	bne.n	800e982 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 800e972:	786a      	ldrb	r2, [r5, #1]
 800e974:	2a73      	cmp	r2, #115	; 0x73
 800e976:	d00a      	beq.n	800e98e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 800e978:	2a7a      	cmp	r2, #122	; 0x7a
 800e97a:	d013      	beq.n	800e9a4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 800e97c:	2a25      	cmp	r2, #37	; 0x25
 800e97e:	d100      	bne.n	800e982 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 800e980:	3501      	adds	r5, #1
 800e982:	782a      	ldrb	r2, [r5, #0]
 800e984:	3401      	adds	r4, #1
 800e986:	f804 2c01 	strb.w	r2, [r4, #-1]
 800e98a:	3501      	adds	r5, #1
 800e98c:	e7eb      	b.n	800e966 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 800e98e:	1d19      	adds	r1, r3, #4
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	3b01      	subs	r3, #1
 800e994:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800e998:	b1a2      	cbz	r2, 800e9c4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6c>
 800e99a:	42bc      	cmp	r4, r7
 800e99c:	d015      	beq.n	800e9ca <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 800e99e:	f804 2b01 	strb.w	r2, [r4], #1
 800e9a2:	e7f7      	b.n	800e994 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 800e9a4:	78aa      	ldrb	r2, [r5, #2]
 800e9a6:	2a75      	cmp	r2, #117	; 0x75
 800e9a8:	d1eb      	bne.n	800e982 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 800e9aa:	681a      	ldr	r2, [r3, #0]
 800e9ac:	1b39      	subs	r1, r7, r4
 800e9ae:	4620      	mov	r0, r4
 800e9b0:	f103 0804 	add.w	r8, r3, #4
 800e9b4:	f7ff ffa8 	bl	800e908 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 800e9b8:	2800      	cmp	r0, #0
 800e9ba:	dd06      	ble.n	800e9ca <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 800e9bc:	4404      	add	r4, r0
 800e9be:	3503      	adds	r5, #3
 800e9c0:	4643      	mov	r3, r8
 800e9c2:	e7d0      	b.n	800e966 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 800e9c4:	3502      	adds	r5, #2
 800e9c6:	460b      	mov	r3, r1
 800e9c8:	e7cd      	b.n	800e966 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 800e9ca:	4621      	mov	r1, r4
 800e9cc:	4630      	mov	r0, r6
 800e9ce:	f7ff ff75 	bl	800e8bc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 800e9d2:	7022      	strb	r2, [r4, #0]
 800e9d4:	1ba0      	subs	r0, r4, r6
 800e9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800e9dc <roundf>:
 800e9dc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e9e0:	3b7f      	subs	r3, #127	; 0x7f
 800e9e2:	2b16      	cmp	r3, #22
 800e9e4:	b510      	push	{r4, lr}
 800e9e6:	4601      	mov	r1, r0
 800e9e8:	dc14      	bgt.n	800ea14 <roundf+0x38>
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	da07      	bge.n	800e9fe <roundf+0x22>
 800e9ee:	3301      	adds	r3, #1
 800e9f0:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 800e9f4:	d101      	bne.n	800e9fa <roundf+0x1e>
 800e9f6:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 800e9fa:	4608      	mov	r0, r1
 800e9fc:	bd10      	pop	{r4, pc}
 800e9fe:	4a08      	ldr	r2, [pc, #32]	; (800ea20 <roundf+0x44>)
 800ea00:	411a      	asrs	r2, r3
 800ea02:	4210      	tst	r0, r2
 800ea04:	d0f9      	beq.n	800e9fa <roundf+0x1e>
 800ea06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ea0a:	4119      	asrs	r1, r3
 800ea0c:	4401      	add	r1, r0
 800ea0e:	ea21 0102 	bic.w	r1, r1, r2
 800ea12:	e7f2      	b.n	800e9fa <roundf+0x1e>
 800ea14:	2b80      	cmp	r3, #128	; 0x80
 800ea16:	d1f0      	bne.n	800e9fa <roundf+0x1e>
 800ea18:	f7f1 ffc6 	bl	80009a8 <__addsf3>
 800ea1c:	4601      	mov	r1, r0
 800ea1e:	e7ec      	b.n	800e9fa <roundf+0x1e>
 800ea20:	007fffff 	.word	0x007fffff

0800ea24 <abort>:
 800ea24:	b508      	push	{r3, lr}
 800ea26:	2006      	movs	r0, #6
 800ea28:	f000 f966 	bl	800ecf8 <raise>
 800ea2c:	2001      	movs	r0, #1
 800ea2e:	f7fa fe84 	bl	800973a <_exit>
	...

0800ea34 <__errno>:
 800ea34:	4b01      	ldr	r3, [pc, #4]	; (800ea3c <__errno+0x8>)
 800ea36:	6818      	ldr	r0, [r3, #0]
 800ea38:	4770      	bx	lr
 800ea3a:	bf00      	nop
 800ea3c:	200000a8 	.word	0x200000a8

0800ea40 <__libc_init_array>:
 800ea40:	b570      	push	{r4, r5, r6, lr}
 800ea42:	2500      	movs	r5, #0
 800ea44:	4e0c      	ldr	r6, [pc, #48]	; (800ea78 <__libc_init_array+0x38>)
 800ea46:	4c0d      	ldr	r4, [pc, #52]	; (800ea7c <__libc_init_array+0x3c>)
 800ea48:	1ba4      	subs	r4, r4, r6
 800ea4a:	10a4      	asrs	r4, r4, #2
 800ea4c:	42a5      	cmp	r5, r4
 800ea4e:	d109      	bne.n	800ea64 <__libc_init_array+0x24>
 800ea50:	f000 fcb2 	bl	800f3b8 <_init>
 800ea54:	2500      	movs	r5, #0
 800ea56:	4e0a      	ldr	r6, [pc, #40]	; (800ea80 <__libc_init_array+0x40>)
 800ea58:	4c0a      	ldr	r4, [pc, #40]	; (800ea84 <__libc_init_array+0x44>)
 800ea5a:	1ba4      	subs	r4, r4, r6
 800ea5c:	10a4      	asrs	r4, r4, #2
 800ea5e:	42a5      	cmp	r5, r4
 800ea60:	d105      	bne.n	800ea6e <__libc_init_array+0x2e>
 800ea62:	bd70      	pop	{r4, r5, r6, pc}
 800ea64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ea68:	4798      	blx	r3
 800ea6a:	3501      	adds	r5, #1
 800ea6c:	e7ee      	b.n	800ea4c <__libc_init_array+0xc>
 800ea6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ea72:	4798      	blx	r3
 800ea74:	3501      	adds	r5, #1
 800ea76:	e7f2      	b.n	800ea5e <__libc_init_array+0x1e>
 800ea78:	08012758 	.word	0x08012758
 800ea7c:	08012758 	.word	0x08012758
 800ea80:	08012758 	.word	0x08012758
 800ea84:	0801275c 	.word	0x0801275c

0800ea88 <malloc>:
 800ea88:	4b02      	ldr	r3, [pc, #8]	; (800ea94 <malloc+0xc>)
 800ea8a:	4601      	mov	r1, r0
 800ea8c:	6818      	ldr	r0, [r3, #0]
 800ea8e:	f000 b8a1 	b.w	800ebd4 <_malloc_r>
 800ea92:	bf00      	nop
 800ea94:	200000a8 	.word	0x200000a8

0800ea98 <free>:
 800ea98:	4b02      	ldr	r3, [pc, #8]	; (800eaa4 <free+0xc>)
 800ea9a:	4601      	mov	r1, r0
 800ea9c:	6818      	ldr	r0, [r3, #0]
 800ea9e:	f000 b84d 	b.w	800eb3c <_free_r>
 800eaa2:	bf00      	nop
 800eaa4:	200000a8 	.word	0x200000a8

0800eaa8 <memchr>:
 800eaa8:	b510      	push	{r4, lr}
 800eaaa:	b2c9      	uxtb	r1, r1
 800eaac:	4402      	add	r2, r0
 800eaae:	4290      	cmp	r0, r2
 800eab0:	4603      	mov	r3, r0
 800eab2:	d101      	bne.n	800eab8 <memchr+0x10>
 800eab4:	2300      	movs	r3, #0
 800eab6:	e003      	b.n	800eac0 <memchr+0x18>
 800eab8:	781c      	ldrb	r4, [r3, #0]
 800eaba:	3001      	adds	r0, #1
 800eabc:	428c      	cmp	r4, r1
 800eabe:	d1f6      	bne.n	800eaae <memchr+0x6>
 800eac0:	4618      	mov	r0, r3
 800eac2:	bd10      	pop	{r4, pc}

0800eac4 <memcmp>:
 800eac4:	b530      	push	{r4, r5, lr}
 800eac6:	2400      	movs	r4, #0
 800eac8:	42a2      	cmp	r2, r4
 800eaca:	d101      	bne.n	800ead0 <memcmp+0xc>
 800eacc:	2000      	movs	r0, #0
 800eace:	e007      	b.n	800eae0 <memcmp+0x1c>
 800ead0:	5d03      	ldrb	r3, [r0, r4]
 800ead2:	3401      	adds	r4, #1
 800ead4:	190d      	adds	r5, r1, r4
 800ead6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800eada:	42ab      	cmp	r3, r5
 800eadc:	d0f4      	beq.n	800eac8 <memcmp+0x4>
 800eade:	1b58      	subs	r0, r3, r5
 800eae0:	bd30      	pop	{r4, r5, pc}

0800eae2 <memcpy>:
 800eae2:	b510      	push	{r4, lr}
 800eae4:	1e43      	subs	r3, r0, #1
 800eae6:	440a      	add	r2, r1
 800eae8:	4291      	cmp	r1, r2
 800eaea:	d100      	bne.n	800eaee <memcpy+0xc>
 800eaec:	bd10      	pop	{r4, pc}
 800eaee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eaf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eaf6:	e7f7      	b.n	800eae8 <memcpy+0x6>

0800eaf8 <memmove>:
 800eaf8:	4288      	cmp	r0, r1
 800eafa:	b510      	push	{r4, lr}
 800eafc:	eb01 0302 	add.w	r3, r1, r2
 800eb00:	d807      	bhi.n	800eb12 <memmove+0x1a>
 800eb02:	1e42      	subs	r2, r0, #1
 800eb04:	4299      	cmp	r1, r3
 800eb06:	d00a      	beq.n	800eb1e <memmove+0x26>
 800eb08:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb0c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800eb10:	e7f8      	b.n	800eb04 <memmove+0xc>
 800eb12:	4283      	cmp	r3, r0
 800eb14:	d9f5      	bls.n	800eb02 <memmove+0xa>
 800eb16:	1881      	adds	r1, r0, r2
 800eb18:	1ad2      	subs	r2, r2, r3
 800eb1a:	42d3      	cmn	r3, r2
 800eb1c:	d100      	bne.n	800eb20 <memmove+0x28>
 800eb1e:	bd10      	pop	{r4, pc}
 800eb20:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eb24:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800eb28:	e7f7      	b.n	800eb1a <memmove+0x22>

0800eb2a <memset>:
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	4402      	add	r2, r0
 800eb2e:	4293      	cmp	r3, r2
 800eb30:	d100      	bne.n	800eb34 <memset+0xa>
 800eb32:	4770      	bx	lr
 800eb34:	f803 1b01 	strb.w	r1, [r3], #1
 800eb38:	e7f9      	b.n	800eb2e <memset+0x4>
	...

0800eb3c <_free_r>:
 800eb3c:	b538      	push	{r3, r4, r5, lr}
 800eb3e:	4605      	mov	r5, r0
 800eb40:	2900      	cmp	r1, #0
 800eb42:	d043      	beq.n	800ebcc <_free_r+0x90>
 800eb44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb48:	1f0c      	subs	r4, r1, #4
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	bfb8      	it	lt
 800eb4e:	18e4      	addlt	r4, r4, r3
 800eb50:	f000 f928 	bl	800eda4 <__malloc_lock>
 800eb54:	4a1e      	ldr	r2, [pc, #120]	; (800ebd0 <_free_r+0x94>)
 800eb56:	6813      	ldr	r3, [r2, #0]
 800eb58:	4610      	mov	r0, r2
 800eb5a:	b933      	cbnz	r3, 800eb6a <_free_r+0x2e>
 800eb5c:	6063      	str	r3, [r4, #4]
 800eb5e:	6014      	str	r4, [r2, #0]
 800eb60:	4628      	mov	r0, r5
 800eb62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb66:	f000 b91e 	b.w	800eda6 <__malloc_unlock>
 800eb6a:	42a3      	cmp	r3, r4
 800eb6c:	d90b      	bls.n	800eb86 <_free_r+0x4a>
 800eb6e:	6821      	ldr	r1, [r4, #0]
 800eb70:	1862      	adds	r2, r4, r1
 800eb72:	4293      	cmp	r3, r2
 800eb74:	bf01      	itttt	eq
 800eb76:	681a      	ldreq	r2, [r3, #0]
 800eb78:	685b      	ldreq	r3, [r3, #4]
 800eb7a:	1852      	addeq	r2, r2, r1
 800eb7c:	6022      	streq	r2, [r4, #0]
 800eb7e:	6063      	str	r3, [r4, #4]
 800eb80:	6004      	str	r4, [r0, #0]
 800eb82:	e7ed      	b.n	800eb60 <_free_r+0x24>
 800eb84:	4613      	mov	r3, r2
 800eb86:	685a      	ldr	r2, [r3, #4]
 800eb88:	b10a      	cbz	r2, 800eb8e <_free_r+0x52>
 800eb8a:	42a2      	cmp	r2, r4
 800eb8c:	d9fa      	bls.n	800eb84 <_free_r+0x48>
 800eb8e:	6819      	ldr	r1, [r3, #0]
 800eb90:	1858      	adds	r0, r3, r1
 800eb92:	42a0      	cmp	r0, r4
 800eb94:	d10b      	bne.n	800ebae <_free_r+0x72>
 800eb96:	6820      	ldr	r0, [r4, #0]
 800eb98:	4401      	add	r1, r0
 800eb9a:	1858      	adds	r0, r3, r1
 800eb9c:	4282      	cmp	r2, r0
 800eb9e:	6019      	str	r1, [r3, #0]
 800eba0:	d1de      	bne.n	800eb60 <_free_r+0x24>
 800eba2:	6810      	ldr	r0, [r2, #0]
 800eba4:	6852      	ldr	r2, [r2, #4]
 800eba6:	4401      	add	r1, r0
 800eba8:	6019      	str	r1, [r3, #0]
 800ebaa:	605a      	str	r2, [r3, #4]
 800ebac:	e7d8      	b.n	800eb60 <_free_r+0x24>
 800ebae:	d902      	bls.n	800ebb6 <_free_r+0x7a>
 800ebb0:	230c      	movs	r3, #12
 800ebb2:	602b      	str	r3, [r5, #0]
 800ebb4:	e7d4      	b.n	800eb60 <_free_r+0x24>
 800ebb6:	6820      	ldr	r0, [r4, #0]
 800ebb8:	1821      	adds	r1, r4, r0
 800ebba:	428a      	cmp	r2, r1
 800ebbc:	bf01      	itttt	eq
 800ebbe:	6811      	ldreq	r1, [r2, #0]
 800ebc0:	6852      	ldreq	r2, [r2, #4]
 800ebc2:	1809      	addeq	r1, r1, r0
 800ebc4:	6021      	streq	r1, [r4, #0]
 800ebc6:	6062      	str	r2, [r4, #4]
 800ebc8:	605c      	str	r4, [r3, #4]
 800ebca:	e7c9      	b.n	800eb60 <_free_r+0x24>
 800ebcc:	bd38      	pop	{r3, r4, r5, pc}
 800ebce:	bf00      	nop
 800ebd0:	20000534 	.word	0x20000534

0800ebd4 <_malloc_r>:
 800ebd4:	b570      	push	{r4, r5, r6, lr}
 800ebd6:	1ccd      	adds	r5, r1, #3
 800ebd8:	f025 0503 	bic.w	r5, r5, #3
 800ebdc:	3508      	adds	r5, #8
 800ebde:	2d0c      	cmp	r5, #12
 800ebe0:	bf38      	it	cc
 800ebe2:	250c      	movcc	r5, #12
 800ebe4:	2d00      	cmp	r5, #0
 800ebe6:	4606      	mov	r6, r0
 800ebe8:	db01      	blt.n	800ebee <_malloc_r+0x1a>
 800ebea:	42a9      	cmp	r1, r5
 800ebec:	d903      	bls.n	800ebf6 <_malloc_r+0x22>
 800ebee:	230c      	movs	r3, #12
 800ebf0:	6033      	str	r3, [r6, #0]
 800ebf2:	2000      	movs	r0, #0
 800ebf4:	bd70      	pop	{r4, r5, r6, pc}
 800ebf6:	f000 f8d5 	bl	800eda4 <__malloc_lock>
 800ebfa:	4a21      	ldr	r2, [pc, #132]	; (800ec80 <_malloc_r+0xac>)
 800ebfc:	6814      	ldr	r4, [r2, #0]
 800ebfe:	4621      	mov	r1, r4
 800ec00:	b991      	cbnz	r1, 800ec28 <_malloc_r+0x54>
 800ec02:	4c20      	ldr	r4, [pc, #128]	; (800ec84 <_malloc_r+0xb0>)
 800ec04:	6823      	ldr	r3, [r4, #0]
 800ec06:	b91b      	cbnz	r3, 800ec10 <_malloc_r+0x3c>
 800ec08:	4630      	mov	r0, r6
 800ec0a:	f000 f83d 	bl	800ec88 <_sbrk_r>
 800ec0e:	6020      	str	r0, [r4, #0]
 800ec10:	4629      	mov	r1, r5
 800ec12:	4630      	mov	r0, r6
 800ec14:	f000 f838 	bl	800ec88 <_sbrk_r>
 800ec18:	1c43      	adds	r3, r0, #1
 800ec1a:	d124      	bne.n	800ec66 <_malloc_r+0x92>
 800ec1c:	230c      	movs	r3, #12
 800ec1e:	4630      	mov	r0, r6
 800ec20:	6033      	str	r3, [r6, #0]
 800ec22:	f000 f8c0 	bl	800eda6 <__malloc_unlock>
 800ec26:	e7e4      	b.n	800ebf2 <_malloc_r+0x1e>
 800ec28:	680b      	ldr	r3, [r1, #0]
 800ec2a:	1b5b      	subs	r3, r3, r5
 800ec2c:	d418      	bmi.n	800ec60 <_malloc_r+0x8c>
 800ec2e:	2b0b      	cmp	r3, #11
 800ec30:	d90f      	bls.n	800ec52 <_malloc_r+0x7e>
 800ec32:	600b      	str	r3, [r1, #0]
 800ec34:	18cc      	adds	r4, r1, r3
 800ec36:	50cd      	str	r5, [r1, r3]
 800ec38:	4630      	mov	r0, r6
 800ec3a:	f000 f8b4 	bl	800eda6 <__malloc_unlock>
 800ec3e:	f104 000b 	add.w	r0, r4, #11
 800ec42:	1d23      	adds	r3, r4, #4
 800ec44:	f020 0007 	bic.w	r0, r0, #7
 800ec48:	1ac3      	subs	r3, r0, r3
 800ec4a:	d0d3      	beq.n	800ebf4 <_malloc_r+0x20>
 800ec4c:	425a      	negs	r2, r3
 800ec4e:	50e2      	str	r2, [r4, r3]
 800ec50:	e7d0      	b.n	800ebf4 <_malloc_r+0x20>
 800ec52:	684b      	ldr	r3, [r1, #4]
 800ec54:	428c      	cmp	r4, r1
 800ec56:	bf16      	itet	ne
 800ec58:	6063      	strne	r3, [r4, #4]
 800ec5a:	6013      	streq	r3, [r2, #0]
 800ec5c:	460c      	movne	r4, r1
 800ec5e:	e7eb      	b.n	800ec38 <_malloc_r+0x64>
 800ec60:	460c      	mov	r4, r1
 800ec62:	6849      	ldr	r1, [r1, #4]
 800ec64:	e7cc      	b.n	800ec00 <_malloc_r+0x2c>
 800ec66:	1cc4      	adds	r4, r0, #3
 800ec68:	f024 0403 	bic.w	r4, r4, #3
 800ec6c:	42a0      	cmp	r0, r4
 800ec6e:	d005      	beq.n	800ec7c <_malloc_r+0xa8>
 800ec70:	1a21      	subs	r1, r4, r0
 800ec72:	4630      	mov	r0, r6
 800ec74:	f000 f808 	bl	800ec88 <_sbrk_r>
 800ec78:	3001      	adds	r0, #1
 800ec7a:	d0cf      	beq.n	800ec1c <_malloc_r+0x48>
 800ec7c:	6025      	str	r5, [r4, #0]
 800ec7e:	e7db      	b.n	800ec38 <_malloc_r+0x64>
 800ec80:	20000534 	.word	0x20000534
 800ec84:	20000538 	.word	0x20000538

0800ec88 <_sbrk_r>:
 800ec88:	b538      	push	{r3, r4, r5, lr}
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	4c05      	ldr	r4, [pc, #20]	; (800eca4 <_sbrk_r+0x1c>)
 800ec8e:	4605      	mov	r5, r0
 800ec90:	4608      	mov	r0, r1
 800ec92:	6023      	str	r3, [r4, #0]
 800ec94:	f7fa fd5c 	bl	8009750 <_sbrk>
 800ec98:	1c43      	adds	r3, r0, #1
 800ec9a:	d102      	bne.n	800eca2 <_sbrk_r+0x1a>
 800ec9c:	6823      	ldr	r3, [r4, #0]
 800ec9e:	b103      	cbz	r3, 800eca2 <_sbrk_r+0x1a>
 800eca0:	602b      	str	r3, [r5, #0]
 800eca2:	bd38      	pop	{r3, r4, r5, pc}
 800eca4:	2000069c 	.word	0x2000069c

0800eca8 <_raise_r>:
 800eca8:	291f      	cmp	r1, #31
 800ecaa:	b538      	push	{r3, r4, r5, lr}
 800ecac:	4604      	mov	r4, r0
 800ecae:	460d      	mov	r5, r1
 800ecb0:	d904      	bls.n	800ecbc <_raise_r+0x14>
 800ecb2:	2316      	movs	r3, #22
 800ecb4:	6003      	str	r3, [r0, #0]
 800ecb6:	f04f 30ff 	mov.w	r0, #4294967295
 800ecba:	bd38      	pop	{r3, r4, r5, pc}
 800ecbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ecbe:	b112      	cbz	r2, 800ecc6 <_raise_r+0x1e>
 800ecc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ecc4:	b94b      	cbnz	r3, 800ecda <_raise_r+0x32>
 800ecc6:	4620      	mov	r0, r4
 800ecc8:	f000 f830 	bl	800ed2c <_getpid_r>
 800eccc:	462a      	mov	r2, r5
 800ecce:	4601      	mov	r1, r0
 800ecd0:	4620      	mov	r0, r4
 800ecd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ecd6:	f000 b817 	b.w	800ed08 <_kill_r>
 800ecda:	2b01      	cmp	r3, #1
 800ecdc:	d00a      	beq.n	800ecf4 <_raise_r+0x4c>
 800ecde:	1c59      	adds	r1, r3, #1
 800ece0:	d103      	bne.n	800ecea <_raise_r+0x42>
 800ece2:	2316      	movs	r3, #22
 800ece4:	6003      	str	r3, [r0, #0]
 800ece6:	2001      	movs	r0, #1
 800ece8:	e7e7      	b.n	800ecba <_raise_r+0x12>
 800ecea:	2400      	movs	r4, #0
 800ecec:	4628      	mov	r0, r5
 800ecee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ecf2:	4798      	blx	r3
 800ecf4:	2000      	movs	r0, #0
 800ecf6:	e7e0      	b.n	800ecba <_raise_r+0x12>

0800ecf8 <raise>:
 800ecf8:	4b02      	ldr	r3, [pc, #8]	; (800ed04 <raise+0xc>)
 800ecfa:	4601      	mov	r1, r0
 800ecfc:	6818      	ldr	r0, [r3, #0]
 800ecfe:	f7ff bfd3 	b.w	800eca8 <_raise_r>
 800ed02:	bf00      	nop
 800ed04:	200000a8 	.word	0x200000a8

0800ed08 <_kill_r>:
 800ed08:	b538      	push	{r3, r4, r5, lr}
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	4c06      	ldr	r4, [pc, #24]	; (800ed28 <_kill_r+0x20>)
 800ed0e:	4605      	mov	r5, r0
 800ed10:	4608      	mov	r0, r1
 800ed12:	4611      	mov	r1, r2
 800ed14:	6023      	str	r3, [r4, #0]
 800ed16:	f7fa fd00 	bl	800971a <_kill>
 800ed1a:	1c43      	adds	r3, r0, #1
 800ed1c:	d102      	bne.n	800ed24 <_kill_r+0x1c>
 800ed1e:	6823      	ldr	r3, [r4, #0]
 800ed20:	b103      	cbz	r3, 800ed24 <_kill_r+0x1c>
 800ed22:	602b      	str	r3, [r5, #0]
 800ed24:	bd38      	pop	{r3, r4, r5, pc}
 800ed26:	bf00      	nop
 800ed28:	2000069c 	.word	0x2000069c

0800ed2c <_getpid_r>:
 800ed2c:	f7fa bcee 	b.w	800970c <_getpid>

0800ed30 <_vsniprintf_r>:
 800ed30:	b530      	push	{r4, r5, lr}
 800ed32:	1e14      	subs	r4, r2, #0
 800ed34:	4605      	mov	r5, r0
 800ed36:	b09b      	sub	sp, #108	; 0x6c
 800ed38:	4618      	mov	r0, r3
 800ed3a:	da05      	bge.n	800ed48 <_vsniprintf_r+0x18>
 800ed3c:	238b      	movs	r3, #139	; 0x8b
 800ed3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ed42:	602b      	str	r3, [r5, #0]
 800ed44:	b01b      	add	sp, #108	; 0x6c
 800ed46:	bd30      	pop	{r4, r5, pc}
 800ed48:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ed4c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ed50:	bf0c      	ite	eq
 800ed52:	4623      	moveq	r3, r4
 800ed54:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ed58:	9302      	str	r3, [sp, #8]
 800ed5a:	9305      	str	r3, [sp, #20]
 800ed5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ed60:	9100      	str	r1, [sp, #0]
 800ed62:	9104      	str	r1, [sp, #16]
 800ed64:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ed68:	4602      	mov	r2, r0
 800ed6a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ed6c:	4669      	mov	r1, sp
 800ed6e:	4628      	mov	r0, r5
 800ed70:	f000 f874 	bl	800ee5c <_svfiprintf_r>
 800ed74:	1c43      	adds	r3, r0, #1
 800ed76:	bfbc      	itt	lt
 800ed78:	238b      	movlt	r3, #139	; 0x8b
 800ed7a:	602b      	strlt	r3, [r5, #0]
 800ed7c:	2c00      	cmp	r4, #0
 800ed7e:	d0e1      	beq.n	800ed44 <_vsniprintf_r+0x14>
 800ed80:	2200      	movs	r2, #0
 800ed82:	9b00      	ldr	r3, [sp, #0]
 800ed84:	701a      	strb	r2, [r3, #0]
 800ed86:	e7dd      	b.n	800ed44 <_vsniprintf_r+0x14>

0800ed88 <vsniprintf>:
 800ed88:	b507      	push	{r0, r1, r2, lr}
 800ed8a:	9300      	str	r3, [sp, #0]
 800ed8c:	4613      	mov	r3, r2
 800ed8e:	460a      	mov	r2, r1
 800ed90:	4601      	mov	r1, r0
 800ed92:	4803      	ldr	r0, [pc, #12]	; (800eda0 <vsniprintf+0x18>)
 800ed94:	6800      	ldr	r0, [r0, #0]
 800ed96:	f7ff ffcb 	bl	800ed30 <_vsniprintf_r>
 800ed9a:	b003      	add	sp, #12
 800ed9c:	f85d fb04 	ldr.w	pc, [sp], #4
 800eda0:	200000a8 	.word	0x200000a8

0800eda4 <__malloc_lock>:
 800eda4:	4770      	bx	lr

0800eda6 <__malloc_unlock>:
 800eda6:	4770      	bx	lr

0800eda8 <__ssputs_r>:
 800eda8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edac:	688e      	ldr	r6, [r1, #8]
 800edae:	4682      	mov	sl, r0
 800edb0:	429e      	cmp	r6, r3
 800edb2:	460c      	mov	r4, r1
 800edb4:	4690      	mov	r8, r2
 800edb6:	4699      	mov	r9, r3
 800edb8:	d837      	bhi.n	800ee2a <__ssputs_r+0x82>
 800edba:	898a      	ldrh	r2, [r1, #12]
 800edbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800edc0:	d031      	beq.n	800ee26 <__ssputs_r+0x7e>
 800edc2:	2302      	movs	r3, #2
 800edc4:	6825      	ldr	r5, [r4, #0]
 800edc6:	6909      	ldr	r1, [r1, #16]
 800edc8:	1a6f      	subs	r7, r5, r1
 800edca:	6965      	ldr	r5, [r4, #20]
 800edcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800edd0:	fb95 f5f3 	sdiv	r5, r5, r3
 800edd4:	f109 0301 	add.w	r3, r9, #1
 800edd8:	443b      	add	r3, r7
 800edda:	429d      	cmp	r5, r3
 800eddc:	bf38      	it	cc
 800edde:	461d      	movcc	r5, r3
 800ede0:	0553      	lsls	r3, r2, #21
 800ede2:	d530      	bpl.n	800ee46 <__ssputs_r+0x9e>
 800ede4:	4629      	mov	r1, r5
 800ede6:	f7ff fef5 	bl	800ebd4 <_malloc_r>
 800edea:	4606      	mov	r6, r0
 800edec:	b950      	cbnz	r0, 800ee04 <__ssputs_r+0x5c>
 800edee:	230c      	movs	r3, #12
 800edf0:	f04f 30ff 	mov.w	r0, #4294967295
 800edf4:	f8ca 3000 	str.w	r3, [sl]
 800edf8:	89a3      	ldrh	r3, [r4, #12]
 800edfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800edfe:	81a3      	strh	r3, [r4, #12]
 800ee00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee04:	463a      	mov	r2, r7
 800ee06:	6921      	ldr	r1, [r4, #16]
 800ee08:	f7ff fe6b 	bl	800eae2 <memcpy>
 800ee0c:	89a3      	ldrh	r3, [r4, #12]
 800ee0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ee12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee16:	81a3      	strh	r3, [r4, #12]
 800ee18:	6126      	str	r6, [r4, #16]
 800ee1a:	443e      	add	r6, r7
 800ee1c:	6026      	str	r6, [r4, #0]
 800ee1e:	464e      	mov	r6, r9
 800ee20:	6165      	str	r5, [r4, #20]
 800ee22:	1bed      	subs	r5, r5, r7
 800ee24:	60a5      	str	r5, [r4, #8]
 800ee26:	454e      	cmp	r6, r9
 800ee28:	d900      	bls.n	800ee2c <__ssputs_r+0x84>
 800ee2a:	464e      	mov	r6, r9
 800ee2c:	4632      	mov	r2, r6
 800ee2e:	4641      	mov	r1, r8
 800ee30:	6820      	ldr	r0, [r4, #0]
 800ee32:	f7ff fe61 	bl	800eaf8 <memmove>
 800ee36:	68a3      	ldr	r3, [r4, #8]
 800ee38:	2000      	movs	r0, #0
 800ee3a:	1b9b      	subs	r3, r3, r6
 800ee3c:	60a3      	str	r3, [r4, #8]
 800ee3e:	6823      	ldr	r3, [r4, #0]
 800ee40:	441e      	add	r6, r3
 800ee42:	6026      	str	r6, [r4, #0]
 800ee44:	e7dc      	b.n	800ee00 <__ssputs_r+0x58>
 800ee46:	462a      	mov	r2, r5
 800ee48:	f000 fa88 	bl	800f35c <_realloc_r>
 800ee4c:	4606      	mov	r6, r0
 800ee4e:	2800      	cmp	r0, #0
 800ee50:	d1e2      	bne.n	800ee18 <__ssputs_r+0x70>
 800ee52:	6921      	ldr	r1, [r4, #16]
 800ee54:	4650      	mov	r0, sl
 800ee56:	f7ff fe71 	bl	800eb3c <_free_r>
 800ee5a:	e7c8      	b.n	800edee <__ssputs_r+0x46>

0800ee5c <_svfiprintf_r>:
 800ee5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee60:	461d      	mov	r5, r3
 800ee62:	898b      	ldrh	r3, [r1, #12]
 800ee64:	b09d      	sub	sp, #116	; 0x74
 800ee66:	061f      	lsls	r7, r3, #24
 800ee68:	4680      	mov	r8, r0
 800ee6a:	460c      	mov	r4, r1
 800ee6c:	4616      	mov	r6, r2
 800ee6e:	d50f      	bpl.n	800ee90 <_svfiprintf_r+0x34>
 800ee70:	690b      	ldr	r3, [r1, #16]
 800ee72:	b96b      	cbnz	r3, 800ee90 <_svfiprintf_r+0x34>
 800ee74:	2140      	movs	r1, #64	; 0x40
 800ee76:	f7ff fead 	bl	800ebd4 <_malloc_r>
 800ee7a:	6020      	str	r0, [r4, #0]
 800ee7c:	6120      	str	r0, [r4, #16]
 800ee7e:	b928      	cbnz	r0, 800ee8c <_svfiprintf_r+0x30>
 800ee80:	230c      	movs	r3, #12
 800ee82:	f8c8 3000 	str.w	r3, [r8]
 800ee86:	f04f 30ff 	mov.w	r0, #4294967295
 800ee8a:	e0c8      	b.n	800f01e <_svfiprintf_r+0x1c2>
 800ee8c:	2340      	movs	r3, #64	; 0x40
 800ee8e:	6163      	str	r3, [r4, #20]
 800ee90:	2300      	movs	r3, #0
 800ee92:	9309      	str	r3, [sp, #36]	; 0x24
 800ee94:	2320      	movs	r3, #32
 800ee96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee9a:	2330      	movs	r3, #48	; 0x30
 800ee9c:	f04f 0b01 	mov.w	fp, #1
 800eea0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eea4:	9503      	str	r5, [sp, #12]
 800eea6:	4637      	mov	r7, r6
 800eea8:	463d      	mov	r5, r7
 800eeaa:	f815 3b01 	ldrb.w	r3, [r5], #1
 800eeae:	b10b      	cbz	r3, 800eeb4 <_svfiprintf_r+0x58>
 800eeb0:	2b25      	cmp	r3, #37	; 0x25
 800eeb2:	d13e      	bne.n	800ef32 <_svfiprintf_r+0xd6>
 800eeb4:	ebb7 0a06 	subs.w	sl, r7, r6
 800eeb8:	d00b      	beq.n	800eed2 <_svfiprintf_r+0x76>
 800eeba:	4653      	mov	r3, sl
 800eebc:	4632      	mov	r2, r6
 800eebe:	4621      	mov	r1, r4
 800eec0:	4640      	mov	r0, r8
 800eec2:	f7ff ff71 	bl	800eda8 <__ssputs_r>
 800eec6:	3001      	adds	r0, #1
 800eec8:	f000 80a4 	beq.w	800f014 <_svfiprintf_r+0x1b8>
 800eecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eece:	4453      	add	r3, sl
 800eed0:	9309      	str	r3, [sp, #36]	; 0x24
 800eed2:	783b      	ldrb	r3, [r7, #0]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	f000 809d 	beq.w	800f014 <_svfiprintf_r+0x1b8>
 800eeda:	2300      	movs	r3, #0
 800eedc:	f04f 32ff 	mov.w	r2, #4294967295
 800eee0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eee4:	9304      	str	r3, [sp, #16]
 800eee6:	9307      	str	r3, [sp, #28]
 800eee8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eeec:	931a      	str	r3, [sp, #104]	; 0x68
 800eeee:	462f      	mov	r7, r5
 800eef0:	2205      	movs	r2, #5
 800eef2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800eef6:	4850      	ldr	r0, [pc, #320]	; (800f038 <_svfiprintf_r+0x1dc>)
 800eef8:	f7ff fdd6 	bl	800eaa8 <memchr>
 800eefc:	9b04      	ldr	r3, [sp, #16]
 800eefe:	b9d0      	cbnz	r0, 800ef36 <_svfiprintf_r+0xda>
 800ef00:	06d9      	lsls	r1, r3, #27
 800ef02:	bf44      	itt	mi
 800ef04:	2220      	movmi	r2, #32
 800ef06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ef0a:	071a      	lsls	r2, r3, #28
 800ef0c:	bf44      	itt	mi
 800ef0e:	222b      	movmi	r2, #43	; 0x2b
 800ef10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ef14:	782a      	ldrb	r2, [r5, #0]
 800ef16:	2a2a      	cmp	r2, #42	; 0x2a
 800ef18:	d015      	beq.n	800ef46 <_svfiprintf_r+0xea>
 800ef1a:	462f      	mov	r7, r5
 800ef1c:	2000      	movs	r0, #0
 800ef1e:	250a      	movs	r5, #10
 800ef20:	9a07      	ldr	r2, [sp, #28]
 800ef22:	4639      	mov	r1, r7
 800ef24:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef28:	3b30      	subs	r3, #48	; 0x30
 800ef2a:	2b09      	cmp	r3, #9
 800ef2c:	d94d      	bls.n	800efca <_svfiprintf_r+0x16e>
 800ef2e:	b1b8      	cbz	r0, 800ef60 <_svfiprintf_r+0x104>
 800ef30:	e00f      	b.n	800ef52 <_svfiprintf_r+0xf6>
 800ef32:	462f      	mov	r7, r5
 800ef34:	e7b8      	b.n	800eea8 <_svfiprintf_r+0x4c>
 800ef36:	4a40      	ldr	r2, [pc, #256]	; (800f038 <_svfiprintf_r+0x1dc>)
 800ef38:	463d      	mov	r5, r7
 800ef3a:	1a80      	subs	r0, r0, r2
 800ef3c:	fa0b f000 	lsl.w	r0, fp, r0
 800ef40:	4318      	orrs	r0, r3
 800ef42:	9004      	str	r0, [sp, #16]
 800ef44:	e7d3      	b.n	800eeee <_svfiprintf_r+0x92>
 800ef46:	9a03      	ldr	r2, [sp, #12]
 800ef48:	1d11      	adds	r1, r2, #4
 800ef4a:	6812      	ldr	r2, [r2, #0]
 800ef4c:	9103      	str	r1, [sp, #12]
 800ef4e:	2a00      	cmp	r2, #0
 800ef50:	db01      	blt.n	800ef56 <_svfiprintf_r+0xfa>
 800ef52:	9207      	str	r2, [sp, #28]
 800ef54:	e004      	b.n	800ef60 <_svfiprintf_r+0x104>
 800ef56:	4252      	negs	r2, r2
 800ef58:	f043 0302 	orr.w	r3, r3, #2
 800ef5c:	9207      	str	r2, [sp, #28]
 800ef5e:	9304      	str	r3, [sp, #16]
 800ef60:	783b      	ldrb	r3, [r7, #0]
 800ef62:	2b2e      	cmp	r3, #46	; 0x2e
 800ef64:	d10c      	bne.n	800ef80 <_svfiprintf_r+0x124>
 800ef66:	787b      	ldrb	r3, [r7, #1]
 800ef68:	2b2a      	cmp	r3, #42	; 0x2a
 800ef6a:	d133      	bne.n	800efd4 <_svfiprintf_r+0x178>
 800ef6c:	9b03      	ldr	r3, [sp, #12]
 800ef6e:	3702      	adds	r7, #2
 800ef70:	1d1a      	adds	r2, r3, #4
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	9203      	str	r2, [sp, #12]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	bfb8      	it	lt
 800ef7a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ef7e:	9305      	str	r3, [sp, #20]
 800ef80:	4d2e      	ldr	r5, [pc, #184]	; (800f03c <_svfiprintf_r+0x1e0>)
 800ef82:	2203      	movs	r2, #3
 800ef84:	7839      	ldrb	r1, [r7, #0]
 800ef86:	4628      	mov	r0, r5
 800ef88:	f7ff fd8e 	bl	800eaa8 <memchr>
 800ef8c:	b138      	cbz	r0, 800ef9e <_svfiprintf_r+0x142>
 800ef8e:	2340      	movs	r3, #64	; 0x40
 800ef90:	1b40      	subs	r0, r0, r5
 800ef92:	fa03 f000 	lsl.w	r0, r3, r0
 800ef96:	9b04      	ldr	r3, [sp, #16]
 800ef98:	3701      	adds	r7, #1
 800ef9a:	4303      	orrs	r3, r0
 800ef9c:	9304      	str	r3, [sp, #16]
 800ef9e:	7839      	ldrb	r1, [r7, #0]
 800efa0:	2206      	movs	r2, #6
 800efa2:	4827      	ldr	r0, [pc, #156]	; (800f040 <_svfiprintf_r+0x1e4>)
 800efa4:	1c7e      	adds	r6, r7, #1
 800efa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800efaa:	f7ff fd7d 	bl	800eaa8 <memchr>
 800efae:	2800      	cmp	r0, #0
 800efb0:	d038      	beq.n	800f024 <_svfiprintf_r+0x1c8>
 800efb2:	4b24      	ldr	r3, [pc, #144]	; (800f044 <_svfiprintf_r+0x1e8>)
 800efb4:	bb13      	cbnz	r3, 800effc <_svfiprintf_r+0x1a0>
 800efb6:	9b03      	ldr	r3, [sp, #12]
 800efb8:	3307      	adds	r3, #7
 800efba:	f023 0307 	bic.w	r3, r3, #7
 800efbe:	3308      	adds	r3, #8
 800efc0:	9303      	str	r3, [sp, #12]
 800efc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efc4:	444b      	add	r3, r9
 800efc6:	9309      	str	r3, [sp, #36]	; 0x24
 800efc8:	e76d      	b.n	800eea6 <_svfiprintf_r+0x4a>
 800efca:	fb05 3202 	mla	r2, r5, r2, r3
 800efce:	2001      	movs	r0, #1
 800efd0:	460f      	mov	r7, r1
 800efd2:	e7a6      	b.n	800ef22 <_svfiprintf_r+0xc6>
 800efd4:	2300      	movs	r3, #0
 800efd6:	250a      	movs	r5, #10
 800efd8:	4619      	mov	r1, r3
 800efda:	3701      	adds	r7, #1
 800efdc:	9305      	str	r3, [sp, #20]
 800efde:	4638      	mov	r0, r7
 800efe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efe4:	3a30      	subs	r2, #48	; 0x30
 800efe6:	2a09      	cmp	r2, #9
 800efe8:	d903      	bls.n	800eff2 <_svfiprintf_r+0x196>
 800efea:	2b00      	cmp	r3, #0
 800efec:	d0c8      	beq.n	800ef80 <_svfiprintf_r+0x124>
 800efee:	9105      	str	r1, [sp, #20]
 800eff0:	e7c6      	b.n	800ef80 <_svfiprintf_r+0x124>
 800eff2:	fb05 2101 	mla	r1, r5, r1, r2
 800eff6:	2301      	movs	r3, #1
 800eff8:	4607      	mov	r7, r0
 800effa:	e7f0      	b.n	800efde <_svfiprintf_r+0x182>
 800effc:	ab03      	add	r3, sp, #12
 800effe:	9300      	str	r3, [sp, #0]
 800f000:	4622      	mov	r2, r4
 800f002:	4b11      	ldr	r3, [pc, #68]	; (800f048 <_svfiprintf_r+0x1ec>)
 800f004:	a904      	add	r1, sp, #16
 800f006:	4640      	mov	r0, r8
 800f008:	f3af 8000 	nop.w
 800f00c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f010:	4681      	mov	r9, r0
 800f012:	d1d6      	bne.n	800efc2 <_svfiprintf_r+0x166>
 800f014:	89a3      	ldrh	r3, [r4, #12]
 800f016:	065b      	lsls	r3, r3, #25
 800f018:	f53f af35 	bmi.w	800ee86 <_svfiprintf_r+0x2a>
 800f01c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f01e:	b01d      	add	sp, #116	; 0x74
 800f020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f024:	ab03      	add	r3, sp, #12
 800f026:	9300      	str	r3, [sp, #0]
 800f028:	4622      	mov	r2, r4
 800f02a:	4b07      	ldr	r3, [pc, #28]	; (800f048 <_svfiprintf_r+0x1ec>)
 800f02c:	a904      	add	r1, sp, #16
 800f02e:	4640      	mov	r0, r8
 800f030:	f000 f882 	bl	800f138 <_printf_i>
 800f034:	e7ea      	b.n	800f00c <_svfiprintf_r+0x1b0>
 800f036:	bf00      	nop
 800f038:	08012724 	.word	0x08012724
 800f03c:	0801272a 	.word	0x0801272a
 800f040:	0801272e 	.word	0x0801272e
 800f044:	00000000 	.word	0x00000000
 800f048:	0800eda9 	.word	0x0800eda9

0800f04c <_printf_common>:
 800f04c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f050:	4691      	mov	r9, r2
 800f052:	461f      	mov	r7, r3
 800f054:	688a      	ldr	r2, [r1, #8]
 800f056:	690b      	ldr	r3, [r1, #16]
 800f058:	4606      	mov	r6, r0
 800f05a:	4293      	cmp	r3, r2
 800f05c:	bfb8      	it	lt
 800f05e:	4613      	movlt	r3, r2
 800f060:	f8c9 3000 	str.w	r3, [r9]
 800f064:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f068:	460c      	mov	r4, r1
 800f06a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f06e:	b112      	cbz	r2, 800f076 <_printf_common+0x2a>
 800f070:	3301      	adds	r3, #1
 800f072:	f8c9 3000 	str.w	r3, [r9]
 800f076:	6823      	ldr	r3, [r4, #0]
 800f078:	0699      	lsls	r1, r3, #26
 800f07a:	bf42      	ittt	mi
 800f07c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f080:	3302      	addmi	r3, #2
 800f082:	f8c9 3000 	strmi.w	r3, [r9]
 800f086:	6825      	ldr	r5, [r4, #0]
 800f088:	f015 0506 	ands.w	r5, r5, #6
 800f08c:	d107      	bne.n	800f09e <_printf_common+0x52>
 800f08e:	f104 0a19 	add.w	sl, r4, #25
 800f092:	68e3      	ldr	r3, [r4, #12]
 800f094:	f8d9 2000 	ldr.w	r2, [r9]
 800f098:	1a9b      	subs	r3, r3, r2
 800f09a:	42ab      	cmp	r3, r5
 800f09c:	dc29      	bgt.n	800f0f2 <_printf_common+0xa6>
 800f09e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f0a2:	6822      	ldr	r2, [r4, #0]
 800f0a4:	3300      	adds	r3, #0
 800f0a6:	bf18      	it	ne
 800f0a8:	2301      	movne	r3, #1
 800f0aa:	0692      	lsls	r2, r2, #26
 800f0ac:	d42e      	bmi.n	800f10c <_printf_common+0xc0>
 800f0ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f0b2:	4639      	mov	r1, r7
 800f0b4:	4630      	mov	r0, r6
 800f0b6:	47c0      	blx	r8
 800f0b8:	3001      	adds	r0, #1
 800f0ba:	d021      	beq.n	800f100 <_printf_common+0xb4>
 800f0bc:	6823      	ldr	r3, [r4, #0]
 800f0be:	68e5      	ldr	r5, [r4, #12]
 800f0c0:	f003 0306 	and.w	r3, r3, #6
 800f0c4:	2b04      	cmp	r3, #4
 800f0c6:	bf18      	it	ne
 800f0c8:	2500      	movne	r5, #0
 800f0ca:	f8d9 2000 	ldr.w	r2, [r9]
 800f0ce:	f04f 0900 	mov.w	r9, #0
 800f0d2:	bf08      	it	eq
 800f0d4:	1aad      	subeq	r5, r5, r2
 800f0d6:	68a3      	ldr	r3, [r4, #8]
 800f0d8:	6922      	ldr	r2, [r4, #16]
 800f0da:	bf08      	it	eq
 800f0dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f0e0:	4293      	cmp	r3, r2
 800f0e2:	bfc4      	itt	gt
 800f0e4:	1a9b      	subgt	r3, r3, r2
 800f0e6:	18ed      	addgt	r5, r5, r3
 800f0e8:	341a      	adds	r4, #26
 800f0ea:	454d      	cmp	r5, r9
 800f0ec:	d11a      	bne.n	800f124 <_printf_common+0xd8>
 800f0ee:	2000      	movs	r0, #0
 800f0f0:	e008      	b.n	800f104 <_printf_common+0xb8>
 800f0f2:	2301      	movs	r3, #1
 800f0f4:	4652      	mov	r2, sl
 800f0f6:	4639      	mov	r1, r7
 800f0f8:	4630      	mov	r0, r6
 800f0fa:	47c0      	blx	r8
 800f0fc:	3001      	adds	r0, #1
 800f0fe:	d103      	bne.n	800f108 <_printf_common+0xbc>
 800f100:	f04f 30ff 	mov.w	r0, #4294967295
 800f104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f108:	3501      	adds	r5, #1
 800f10a:	e7c2      	b.n	800f092 <_printf_common+0x46>
 800f10c:	2030      	movs	r0, #48	; 0x30
 800f10e:	18e1      	adds	r1, r4, r3
 800f110:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f114:	1c5a      	adds	r2, r3, #1
 800f116:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f11a:	4422      	add	r2, r4
 800f11c:	3302      	adds	r3, #2
 800f11e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f122:	e7c4      	b.n	800f0ae <_printf_common+0x62>
 800f124:	2301      	movs	r3, #1
 800f126:	4622      	mov	r2, r4
 800f128:	4639      	mov	r1, r7
 800f12a:	4630      	mov	r0, r6
 800f12c:	47c0      	blx	r8
 800f12e:	3001      	adds	r0, #1
 800f130:	d0e6      	beq.n	800f100 <_printf_common+0xb4>
 800f132:	f109 0901 	add.w	r9, r9, #1
 800f136:	e7d8      	b.n	800f0ea <_printf_common+0x9e>

0800f138 <_printf_i>:
 800f138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f13c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f140:	460c      	mov	r4, r1
 800f142:	7e09      	ldrb	r1, [r1, #24]
 800f144:	b085      	sub	sp, #20
 800f146:	296e      	cmp	r1, #110	; 0x6e
 800f148:	4617      	mov	r7, r2
 800f14a:	4606      	mov	r6, r0
 800f14c:	4698      	mov	r8, r3
 800f14e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f150:	f000 80b3 	beq.w	800f2ba <_printf_i+0x182>
 800f154:	d822      	bhi.n	800f19c <_printf_i+0x64>
 800f156:	2963      	cmp	r1, #99	; 0x63
 800f158:	d036      	beq.n	800f1c8 <_printf_i+0x90>
 800f15a:	d80a      	bhi.n	800f172 <_printf_i+0x3a>
 800f15c:	2900      	cmp	r1, #0
 800f15e:	f000 80b9 	beq.w	800f2d4 <_printf_i+0x19c>
 800f162:	2958      	cmp	r1, #88	; 0x58
 800f164:	f000 8083 	beq.w	800f26e <_printf_i+0x136>
 800f168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f16c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f170:	e032      	b.n	800f1d8 <_printf_i+0xa0>
 800f172:	2964      	cmp	r1, #100	; 0x64
 800f174:	d001      	beq.n	800f17a <_printf_i+0x42>
 800f176:	2969      	cmp	r1, #105	; 0x69
 800f178:	d1f6      	bne.n	800f168 <_printf_i+0x30>
 800f17a:	6820      	ldr	r0, [r4, #0]
 800f17c:	6813      	ldr	r3, [r2, #0]
 800f17e:	0605      	lsls	r5, r0, #24
 800f180:	f103 0104 	add.w	r1, r3, #4
 800f184:	d52a      	bpl.n	800f1dc <_printf_i+0xa4>
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	6011      	str	r1, [r2, #0]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	da03      	bge.n	800f196 <_printf_i+0x5e>
 800f18e:	222d      	movs	r2, #45	; 0x2d
 800f190:	425b      	negs	r3, r3
 800f192:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f196:	486f      	ldr	r0, [pc, #444]	; (800f354 <_printf_i+0x21c>)
 800f198:	220a      	movs	r2, #10
 800f19a:	e039      	b.n	800f210 <_printf_i+0xd8>
 800f19c:	2973      	cmp	r1, #115	; 0x73
 800f19e:	f000 809d 	beq.w	800f2dc <_printf_i+0x1a4>
 800f1a2:	d808      	bhi.n	800f1b6 <_printf_i+0x7e>
 800f1a4:	296f      	cmp	r1, #111	; 0x6f
 800f1a6:	d020      	beq.n	800f1ea <_printf_i+0xb2>
 800f1a8:	2970      	cmp	r1, #112	; 0x70
 800f1aa:	d1dd      	bne.n	800f168 <_printf_i+0x30>
 800f1ac:	6823      	ldr	r3, [r4, #0]
 800f1ae:	f043 0320 	orr.w	r3, r3, #32
 800f1b2:	6023      	str	r3, [r4, #0]
 800f1b4:	e003      	b.n	800f1be <_printf_i+0x86>
 800f1b6:	2975      	cmp	r1, #117	; 0x75
 800f1b8:	d017      	beq.n	800f1ea <_printf_i+0xb2>
 800f1ba:	2978      	cmp	r1, #120	; 0x78
 800f1bc:	d1d4      	bne.n	800f168 <_printf_i+0x30>
 800f1be:	2378      	movs	r3, #120	; 0x78
 800f1c0:	4865      	ldr	r0, [pc, #404]	; (800f358 <_printf_i+0x220>)
 800f1c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f1c6:	e055      	b.n	800f274 <_printf_i+0x13c>
 800f1c8:	6813      	ldr	r3, [r2, #0]
 800f1ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f1ce:	1d19      	adds	r1, r3, #4
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	6011      	str	r1, [r2, #0]
 800f1d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f1d8:	2301      	movs	r3, #1
 800f1da:	e08c      	b.n	800f2f6 <_printf_i+0x1be>
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f1e2:	6011      	str	r1, [r2, #0]
 800f1e4:	bf18      	it	ne
 800f1e6:	b21b      	sxthne	r3, r3
 800f1e8:	e7cf      	b.n	800f18a <_printf_i+0x52>
 800f1ea:	6813      	ldr	r3, [r2, #0]
 800f1ec:	6825      	ldr	r5, [r4, #0]
 800f1ee:	1d18      	adds	r0, r3, #4
 800f1f0:	6010      	str	r0, [r2, #0]
 800f1f2:	0628      	lsls	r0, r5, #24
 800f1f4:	d501      	bpl.n	800f1fa <_printf_i+0xc2>
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	e002      	b.n	800f200 <_printf_i+0xc8>
 800f1fa:	0668      	lsls	r0, r5, #25
 800f1fc:	d5fb      	bpl.n	800f1f6 <_printf_i+0xbe>
 800f1fe:	881b      	ldrh	r3, [r3, #0]
 800f200:	296f      	cmp	r1, #111	; 0x6f
 800f202:	bf14      	ite	ne
 800f204:	220a      	movne	r2, #10
 800f206:	2208      	moveq	r2, #8
 800f208:	4852      	ldr	r0, [pc, #328]	; (800f354 <_printf_i+0x21c>)
 800f20a:	2100      	movs	r1, #0
 800f20c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f210:	6865      	ldr	r5, [r4, #4]
 800f212:	2d00      	cmp	r5, #0
 800f214:	60a5      	str	r5, [r4, #8]
 800f216:	f2c0 8095 	blt.w	800f344 <_printf_i+0x20c>
 800f21a:	6821      	ldr	r1, [r4, #0]
 800f21c:	f021 0104 	bic.w	r1, r1, #4
 800f220:	6021      	str	r1, [r4, #0]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d13d      	bne.n	800f2a2 <_printf_i+0x16a>
 800f226:	2d00      	cmp	r5, #0
 800f228:	f040 808e 	bne.w	800f348 <_printf_i+0x210>
 800f22c:	4665      	mov	r5, ip
 800f22e:	2a08      	cmp	r2, #8
 800f230:	d10b      	bne.n	800f24a <_printf_i+0x112>
 800f232:	6823      	ldr	r3, [r4, #0]
 800f234:	07db      	lsls	r3, r3, #31
 800f236:	d508      	bpl.n	800f24a <_printf_i+0x112>
 800f238:	6923      	ldr	r3, [r4, #16]
 800f23a:	6862      	ldr	r2, [r4, #4]
 800f23c:	429a      	cmp	r2, r3
 800f23e:	bfde      	ittt	le
 800f240:	2330      	movle	r3, #48	; 0x30
 800f242:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f246:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f24a:	ebac 0305 	sub.w	r3, ip, r5
 800f24e:	6123      	str	r3, [r4, #16]
 800f250:	f8cd 8000 	str.w	r8, [sp]
 800f254:	463b      	mov	r3, r7
 800f256:	aa03      	add	r2, sp, #12
 800f258:	4621      	mov	r1, r4
 800f25a:	4630      	mov	r0, r6
 800f25c:	f7ff fef6 	bl	800f04c <_printf_common>
 800f260:	3001      	adds	r0, #1
 800f262:	d14d      	bne.n	800f300 <_printf_i+0x1c8>
 800f264:	f04f 30ff 	mov.w	r0, #4294967295
 800f268:	b005      	add	sp, #20
 800f26a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f26e:	4839      	ldr	r0, [pc, #228]	; (800f354 <_printf_i+0x21c>)
 800f270:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f274:	6813      	ldr	r3, [r2, #0]
 800f276:	6821      	ldr	r1, [r4, #0]
 800f278:	1d1d      	adds	r5, r3, #4
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	6015      	str	r5, [r2, #0]
 800f27e:	060a      	lsls	r2, r1, #24
 800f280:	d50b      	bpl.n	800f29a <_printf_i+0x162>
 800f282:	07ca      	lsls	r2, r1, #31
 800f284:	bf44      	itt	mi
 800f286:	f041 0120 	orrmi.w	r1, r1, #32
 800f28a:	6021      	strmi	r1, [r4, #0]
 800f28c:	b91b      	cbnz	r3, 800f296 <_printf_i+0x15e>
 800f28e:	6822      	ldr	r2, [r4, #0]
 800f290:	f022 0220 	bic.w	r2, r2, #32
 800f294:	6022      	str	r2, [r4, #0]
 800f296:	2210      	movs	r2, #16
 800f298:	e7b7      	b.n	800f20a <_printf_i+0xd2>
 800f29a:	064d      	lsls	r5, r1, #25
 800f29c:	bf48      	it	mi
 800f29e:	b29b      	uxthmi	r3, r3
 800f2a0:	e7ef      	b.n	800f282 <_printf_i+0x14a>
 800f2a2:	4665      	mov	r5, ip
 800f2a4:	fbb3 f1f2 	udiv	r1, r3, r2
 800f2a8:	fb02 3311 	mls	r3, r2, r1, r3
 800f2ac:	5cc3      	ldrb	r3, [r0, r3]
 800f2ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f2b2:	460b      	mov	r3, r1
 800f2b4:	2900      	cmp	r1, #0
 800f2b6:	d1f5      	bne.n	800f2a4 <_printf_i+0x16c>
 800f2b8:	e7b9      	b.n	800f22e <_printf_i+0xf6>
 800f2ba:	6813      	ldr	r3, [r2, #0]
 800f2bc:	6825      	ldr	r5, [r4, #0]
 800f2be:	1d18      	adds	r0, r3, #4
 800f2c0:	6961      	ldr	r1, [r4, #20]
 800f2c2:	6010      	str	r0, [r2, #0]
 800f2c4:	0628      	lsls	r0, r5, #24
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	d501      	bpl.n	800f2ce <_printf_i+0x196>
 800f2ca:	6019      	str	r1, [r3, #0]
 800f2cc:	e002      	b.n	800f2d4 <_printf_i+0x19c>
 800f2ce:	066a      	lsls	r2, r5, #25
 800f2d0:	d5fb      	bpl.n	800f2ca <_printf_i+0x192>
 800f2d2:	8019      	strh	r1, [r3, #0]
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	4665      	mov	r5, ip
 800f2d8:	6123      	str	r3, [r4, #16]
 800f2da:	e7b9      	b.n	800f250 <_printf_i+0x118>
 800f2dc:	6813      	ldr	r3, [r2, #0]
 800f2de:	1d19      	adds	r1, r3, #4
 800f2e0:	6011      	str	r1, [r2, #0]
 800f2e2:	681d      	ldr	r5, [r3, #0]
 800f2e4:	6862      	ldr	r2, [r4, #4]
 800f2e6:	2100      	movs	r1, #0
 800f2e8:	4628      	mov	r0, r5
 800f2ea:	f7ff fbdd 	bl	800eaa8 <memchr>
 800f2ee:	b108      	cbz	r0, 800f2f4 <_printf_i+0x1bc>
 800f2f0:	1b40      	subs	r0, r0, r5
 800f2f2:	6060      	str	r0, [r4, #4]
 800f2f4:	6863      	ldr	r3, [r4, #4]
 800f2f6:	6123      	str	r3, [r4, #16]
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f2fe:	e7a7      	b.n	800f250 <_printf_i+0x118>
 800f300:	6923      	ldr	r3, [r4, #16]
 800f302:	462a      	mov	r2, r5
 800f304:	4639      	mov	r1, r7
 800f306:	4630      	mov	r0, r6
 800f308:	47c0      	blx	r8
 800f30a:	3001      	adds	r0, #1
 800f30c:	d0aa      	beq.n	800f264 <_printf_i+0x12c>
 800f30e:	6823      	ldr	r3, [r4, #0]
 800f310:	079b      	lsls	r3, r3, #30
 800f312:	d413      	bmi.n	800f33c <_printf_i+0x204>
 800f314:	68e0      	ldr	r0, [r4, #12]
 800f316:	9b03      	ldr	r3, [sp, #12]
 800f318:	4298      	cmp	r0, r3
 800f31a:	bfb8      	it	lt
 800f31c:	4618      	movlt	r0, r3
 800f31e:	e7a3      	b.n	800f268 <_printf_i+0x130>
 800f320:	2301      	movs	r3, #1
 800f322:	464a      	mov	r2, r9
 800f324:	4639      	mov	r1, r7
 800f326:	4630      	mov	r0, r6
 800f328:	47c0      	blx	r8
 800f32a:	3001      	adds	r0, #1
 800f32c:	d09a      	beq.n	800f264 <_printf_i+0x12c>
 800f32e:	3501      	adds	r5, #1
 800f330:	68e3      	ldr	r3, [r4, #12]
 800f332:	9a03      	ldr	r2, [sp, #12]
 800f334:	1a9b      	subs	r3, r3, r2
 800f336:	42ab      	cmp	r3, r5
 800f338:	dcf2      	bgt.n	800f320 <_printf_i+0x1e8>
 800f33a:	e7eb      	b.n	800f314 <_printf_i+0x1dc>
 800f33c:	2500      	movs	r5, #0
 800f33e:	f104 0919 	add.w	r9, r4, #25
 800f342:	e7f5      	b.n	800f330 <_printf_i+0x1f8>
 800f344:	2b00      	cmp	r3, #0
 800f346:	d1ac      	bne.n	800f2a2 <_printf_i+0x16a>
 800f348:	7803      	ldrb	r3, [r0, #0]
 800f34a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f34e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f352:	e76c      	b.n	800f22e <_printf_i+0xf6>
 800f354:	08012735 	.word	0x08012735
 800f358:	08012746 	.word	0x08012746

0800f35c <_realloc_r>:
 800f35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f35e:	4607      	mov	r7, r0
 800f360:	4614      	mov	r4, r2
 800f362:	460e      	mov	r6, r1
 800f364:	b921      	cbnz	r1, 800f370 <_realloc_r+0x14>
 800f366:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f36a:	4611      	mov	r1, r2
 800f36c:	f7ff bc32 	b.w	800ebd4 <_malloc_r>
 800f370:	b922      	cbnz	r2, 800f37c <_realloc_r+0x20>
 800f372:	f7ff fbe3 	bl	800eb3c <_free_r>
 800f376:	4625      	mov	r5, r4
 800f378:	4628      	mov	r0, r5
 800f37a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f37c:	f000 f814 	bl	800f3a8 <_malloc_usable_size_r>
 800f380:	42a0      	cmp	r0, r4
 800f382:	d20f      	bcs.n	800f3a4 <_realloc_r+0x48>
 800f384:	4621      	mov	r1, r4
 800f386:	4638      	mov	r0, r7
 800f388:	f7ff fc24 	bl	800ebd4 <_malloc_r>
 800f38c:	4605      	mov	r5, r0
 800f38e:	2800      	cmp	r0, #0
 800f390:	d0f2      	beq.n	800f378 <_realloc_r+0x1c>
 800f392:	4631      	mov	r1, r6
 800f394:	4622      	mov	r2, r4
 800f396:	f7ff fba4 	bl	800eae2 <memcpy>
 800f39a:	4631      	mov	r1, r6
 800f39c:	4638      	mov	r0, r7
 800f39e:	f7ff fbcd 	bl	800eb3c <_free_r>
 800f3a2:	e7e9      	b.n	800f378 <_realloc_r+0x1c>
 800f3a4:	4635      	mov	r5, r6
 800f3a6:	e7e7      	b.n	800f378 <_realloc_r+0x1c>

0800f3a8 <_malloc_usable_size_r>:
 800f3a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3ac:	1f18      	subs	r0, r3, #4
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	bfbc      	itt	lt
 800f3b2:	580b      	ldrlt	r3, [r1, r0]
 800f3b4:	18c0      	addlt	r0, r0, r3
 800f3b6:	4770      	bx	lr

0800f3b8 <_init>:
 800f3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ba:	bf00      	nop
 800f3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3be:	bc08      	pop	{r3}
 800f3c0:	469e      	mov	lr, r3
 800f3c2:	4770      	bx	lr

0800f3c4 <_fini>:
 800f3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3c6:	bf00      	nop
 800f3c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3ca:	bc08      	pop	{r3}
 800f3cc:	469e      	mov	lr, r3
 800f3ce:	4770      	bx	lr

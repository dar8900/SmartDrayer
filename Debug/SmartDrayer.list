
SmartDrayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000120dc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000035b0  080121ec  080121ec  000221ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801579c  0801579c  00030278  2**0
                  CONTENTS
  4 .ARM          00000000  0801579c  0801579c  00030278  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801579c  0801579c  00030278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801579c  0801579c  0002579c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080157a0  080157a0  000257a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  080157a4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d4  20000278  08015a1c  00030278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000084c  08015a1c  0003084c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY
 12 .debug_info   0011590e  00000000  00000000  000302a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000092d7  00000000  00000000  00145baf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003b08  00000000  00000000  0014ee88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003800  00000000  00000000  00152990  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e858  00000000  00000000  00156190  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002b703  00000000  00000000  001749e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a3ebb  00000000  00000000  001a00eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00243fa6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00011c68  00000000  00000000  00244024  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000278 	.word	0x20000278
 800012c:	00000000 	.word	0x00000000
 8000130:	080121d4 	.word	0x080121d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000027c 	.word	0x2000027c
 800014c:	080121d4 	.word	0x080121d4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2f>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000904:	bf24      	itt	cs
 8000906:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800090a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800090e:	d90d      	bls.n	800092c <__aeabi_d2f+0x30>
 8000910:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000914:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000918:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800091c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000920:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000924:	bf08      	it	eq
 8000926:	f020 0001 	biceq.w	r0, r0, #1
 800092a:	4770      	bx	lr
 800092c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000930:	d121      	bne.n	8000976 <__aeabi_d2f+0x7a>
 8000932:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000936:	bfbc      	itt	lt
 8000938:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800093c:	4770      	bxlt	lr
 800093e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000942:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000946:	f1c2 0218 	rsb	r2, r2, #24
 800094a:	f1c2 0c20 	rsb	ip, r2, #32
 800094e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000952:	fa20 f002 	lsr.w	r0, r0, r2
 8000956:	bf18      	it	ne
 8000958:	f040 0001 	orrne.w	r0, r0, #1
 800095c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000960:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000964:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000968:	ea40 000c 	orr.w	r0, r0, ip
 800096c:	fa23 f302 	lsr.w	r3, r3, r2
 8000970:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000974:	e7cc      	b.n	8000910 <__aeabi_d2f+0x14>
 8000976:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097a:	d107      	bne.n	800098c <__aeabi_d2f+0x90>
 800097c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000980:	bf1e      	ittt	ne
 8000982:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000986:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800098a:	4770      	bxne	lr
 800098c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000990:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000994:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_frsub>:
 800099c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009a0:	e002      	b.n	80009a8 <__addsf3>
 80009a2:	bf00      	nop

080009a4 <__aeabi_fsub>:
 80009a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009a8 <__addsf3>:
 80009a8:	0042      	lsls	r2, r0, #1
 80009aa:	bf1f      	itttt	ne
 80009ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009b0:	ea92 0f03 	teqne	r2, r3
 80009b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009bc:	d06a      	beq.n	8000a94 <__addsf3+0xec>
 80009be:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009c6:	bfc1      	itttt	gt
 80009c8:	18d2      	addgt	r2, r2, r3
 80009ca:	4041      	eorgt	r1, r0
 80009cc:	4048      	eorgt	r0, r1
 80009ce:	4041      	eorgt	r1, r0
 80009d0:	bfb8      	it	lt
 80009d2:	425b      	neglt	r3, r3
 80009d4:	2b19      	cmp	r3, #25
 80009d6:	bf88      	it	hi
 80009d8:	4770      	bxhi	lr
 80009da:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009f6:	bf18      	it	ne
 80009f8:	4249      	negne	r1, r1
 80009fa:	ea92 0f03 	teq	r2, r3
 80009fe:	d03f      	beq.n	8000a80 <__addsf3+0xd8>
 8000a00:	f1a2 0201 	sub.w	r2, r2, #1
 8000a04:	fa41 fc03 	asr.w	ip, r1, r3
 8000a08:	eb10 000c 	adds.w	r0, r0, ip
 8000a0c:	f1c3 0320 	rsb	r3, r3, #32
 8000a10:	fa01 f103 	lsl.w	r1, r1, r3
 8000a14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a18:	d502      	bpl.n	8000a20 <__addsf3+0x78>
 8000a1a:	4249      	negs	r1, r1
 8000a1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a24:	d313      	bcc.n	8000a4e <__addsf3+0xa6>
 8000a26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a2a:	d306      	bcc.n	8000a3a <__addsf3+0x92>
 8000a2c:	0840      	lsrs	r0, r0, #1
 8000a2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a32:	f102 0201 	add.w	r2, r2, #1
 8000a36:	2afe      	cmp	r2, #254	; 0xfe
 8000a38:	d251      	bcs.n	8000ade <__addsf3+0x136>
 8000a3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a42:	bf08      	it	eq
 8000a44:	f020 0001 	biceq.w	r0, r0, #1
 8000a48:	ea40 0003 	orr.w	r0, r0, r3
 8000a4c:	4770      	bx	lr
 8000a4e:	0049      	lsls	r1, r1, #1
 8000a50:	eb40 0000 	adc.w	r0, r0, r0
 8000a54:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a58:	f1a2 0201 	sub.w	r2, r2, #1
 8000a5c:	d1ed      	bne.n	8000a3a <__addsf3+0x92>
 8000a5e:	fab0 fc80 	clz	ip, r0
 8000a62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a66:	ebb2 020c 	subs.w	r2, r2, ip
 8000a6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a6e:	bfaa      	itet	ge
 8000a70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a74:	4252      	neglt	r2, r2
 8000a76:	4318      	orrge	r0, r3
 8000a78:	bfbc      	itt	lt
 8000a7a:	40d0      	lsrlt	r0, r2
 8000a7c:	4318      	orrlt	r0, r3
 8000a7e:	4770      	bx	lr
 8000a80:	f092 0f00 	teq	r2, #0
 8000a84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a88:	bf06      	itte	eq
 8000a8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a8e:	3201      	addeq	r2, #1
 8000a90:	3b01      	subne	r3, #1
 8000a92:	e7b5      	b.n	8000a00 <__addsf3+0x58>
 8000a94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa2:	d021      	beq.n	8000ae8 <__addsf3+0x140>
 8000aa4:	ea92 0f03 	teq	r2, r3
 8000aa8:	d004      	beq.n	8000ab4 <__addsf3+0x10c>
 8000aaa:	f092 0f00 	teq	r2, #0
 8000aae:	bf08      	it	eq
 8000ab0:	4608      	moveq	r0, r1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea90 0f01 	teq	r0, r1
 8000ab8:	bf1c      	itt	ne
 8000aba:	2000      	movne	r0, #0
 8000abc:	4770      	bxne	lr
 8000abe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ac2:	d104      	bne.n	8000ace <__addsf3+0x126>
 8000ac4:	0040      	lsls	r0, r0, #1
 8000ac6:	bf28      	it	cs
 8000ac8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	4770      	bx	lr
 8000ace:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ad2:	bf3c      	itt	cc
 8000ad4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bxcc	lr
 8000ada:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ade:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ae2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae6:	4770      	bx	lr
 8000ae8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000aec:	bf16      	itet	ne
 8000aee:	4608      	movne	r0, r1
 8000af0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000af4:	4601      	movne	r1, r0
 8000af6:	0242      	lsls	r2, r0, #9
 8000af8:	bf06      	itte	eq
 8000afa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000afe:	ea90 0f01 	teqeq	r0, r1
 8000b02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_ui2f>:
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	e004      	b.n	8000b18 <__aeabi_i2f+0x8>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_i2f>:
 8000b10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b14:	bf48      	it	mi
 8000b16:	4240      	negmi	r0, r0
 8000b18:	ea5f 0c00 	movs.w	ip, r0
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b24:	4601      	mov	r1, r0
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	e01c      	b.n	8000b66 <__aeabi_l2f+0x2a>

08000b2c <__aeabi_ul2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f04f 0300 	mov.w	r3, #0
 8000b38:	e00a      	b.n	8000b50 <__aeabi_l2f+0x14>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_l2f>:
 8000b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b40:	bf08      	it	eq
 8000b42:	4770      	bxeq	lr
 8000b44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b48:	d502      	bpl.n	8000b50 <__aeabi_l2f+0x14>
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b50:	ea5f 0c01 	movs.w	ip, r1
 8000b54:	bf02      	ittt	eq
 8000b56:	4684      	moveq	ip, r0
 8000b58:	4601      	moveq	r1, r0
 8000b5a:	2000      	moveq	r0, #0
 8000b5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b60:	bf08      	it	eq
 8000b62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b6a:	fabc f28c 	clz	r2, ip
 8000b6e:	3a08      	subs	r2, #8
 8000b70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b74:	db10      	blt.n	8000b98 <__aeabi_l2f+0x5c>
 8000b76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b7a:	4463      	add	r3, ip
 8000b7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b80:	f1c2 0220 	rsb	r2, r2, #32
 8000b84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b88:	fa20 f202 	lsr.w	r2, r0, r2
 8000b8c:	eb43 0002 	adc.w	r0, r3, r2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f102 0220 	add.w	r2, r2, #32
 8000b9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ba0:	f1c2 0220 	rsb	r2, r2, #32
 8000ba4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ba8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bac:	eb43 0002 	adc.w	r0, r3, r2
 8000bb0:	bf08      	it	eq
 8000bb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_fmul>:
 8000bb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bc6:	ea92 0f0c 	teqne	r2, ip
 8000bca:	ea93 0f0c 	teqne	r3, ip
 8000bce:	d06f      	beq.n	8000cb0 <__aeabi_fmul+0xf8>
 8000bd0:	441a      	add	r2, r3
 8000bd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bd6:	0240      	lsls	r0, r0, #9
 8000bd8:	bf18      	it	ne
 8000bda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bde:	d01e      	beq.n	8000c1e <__aeabi_fmul+0x66>
 8000be0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000be4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000be8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bec:	fba0 3101 	umull	r3, r1, r0, r1
 8000bf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bf8:	bf3e      	ittt	cc
 8000bfa:	0049      	lslcc	r1, r1, #1
 8000bfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c00:	005b      	lslcc	r3, r3, #1
 8000c02:	ea40 0001 	orr.w	r0, r0, r1
 8000c06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c0a:	2afd      	cmp	r2, #253	; 0xfd
 8000c0c:	d81d      	bhi.n	8000c4a <__aeabi_fmul+0x92>
 8000c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c16:	bf08      	it	eq
 8000c18:	f020 0001 	biceq.w	r0, r0, #1
 8000c1c:	4770      	bx	lr
 8000c1e:	f090 0f00 	teq	r0, #0
 8000c22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c26:	bf08      	it	eq
 8000c28:	0249      	lsleq	r1, r1, #9
 8000c2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c32:	3a7f      	subs	r2, #127	; 0x7f
 8000c34:	bfc2      	ittt	gt
 8000c36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c3e:	4770      	bxgt	lr
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	dc5d      	bgt.n	8000d08 <__aeabi_fmul+0x150>
 8000c4c:	f112 0f19 	cmn.w	r2, #25
 8000c50:	bfdc      	itt	le
 8000c52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c56:	4770      	bxle	lr
 8000c58:	f1c2 0200 	rsb	r2, r2, #0
 8000c5c:	0041      	lsls	r1, r0, #1
 8000c5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c62:	f1c2 0220 	rsb	r2, r2, #32
 8000c66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c6e:	f140 0000 	adc.w	r0, r0, #0
 8000c72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c76:	bf08      	it	eq
 8000c78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c7c:	4770      	bx	lr
 8000c7e:	f092 0f00 	teq	r2, #0
 8000c82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c86:	bf02      	ittt	eq
 8000c88:	0040      	lsleq	r0, r0, #1
 8000c8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c8e:	3a01      	subeq	r2, #1
 8000c90:	d0f9      	beq.n	8000c86 <__aeabi_fmul+0xce>
 8000c92:	ea40 000c 	orr.w	r0, r0, ip
 8000c96:	f093 0f00 	teq	r3, #0
 8000c9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c9e:	bf02      	ittt	eq
 8000ca0:	0049      	lsleq	r1, r1, #1
 8000ca2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ca6:	3b01      	subeq	r3, #1
 8000ca8:	d0f9      	beq.n	8000c9e <__aeabi_fmul+0xe6>
 8000caa:	ea41 010c 	orr.w	r1, r1, ip
 8000cae:	e78f      	b.n	8000bd0 <__aeabi_fmul+0x18>
 8000cb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cb4:	ea92 0f0c 	teq	r2, ip
 8000cb8:	bf18      	it	ne
 8000cba:	ea93 0f0c 	teqne	r3, ip
 8000cbe:	d00a      	beq.n	8000cd6 <__aeabi_fmul+0x11e>
 8000cc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cc4:	bf18      	it	ne
 8000cc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cca:	d1d8      	bne.n	8000c7e <__aeabi_fmul+0xc6>
 8000ccc:	ea80 0001 	eor.w	r0, r0, r1
 8000cd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f090 0f00 	teq	r0, #0
 8000cda:	bf17      	itett	ne
 8000cdc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ce0:	4608      	moveq	r0, r1
 8000ce2:	f091 0f00 	teqne	r1, #0
 8000ce6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cea:	d014      	beq.n	8000d16 <__aeabi_fmul+0x15e>
 8000cec:	ea92 0f0c 	teq	r2, ip
 8000cf0:	d101      	bne.n	8000cf6 <__aeabi_fmul+0x13e>
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	d10f      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000cf6:	ea93 0f0c 	teq	r3, ip
 8000cfa:	d103      	bne.n	8000d04 <__aeabi_fmul+0x14c>
 8000cfc:	024b      	lsls	r3, r1, #9
 8000cfe:	bf18      	it	ne
 8000d00:	4608      	movne	r0, r1
 8000d02:	d108      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000d04:	ea80 0001 	eor.w	r0, r0, r1
 8000d08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d14:	4770      	bx	lr
 8000d16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_fdiv>:
 8000d20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d28:	bf1e      	ittt	ne
 8000d2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d2e:	ea92 0f0c 	teqne	r2, ip
 8000d32:	ea93 0f0c 	teqne	r3, ip
 8000d36:	d069      	beq.n	8000e0c <__aeabi_fdiv+0xec>
 8000d38:	eba2 0203 	sub.w	r2, r2, r3
 8000d3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d40:	0249      	lsls	r1, r1, #9
 8000d42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d46:	d037      	beq.n	8000db8 <__aeabi_fdiv+0x98>
 8000d48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	bf38      	it	cc
 8000d5c:	005b      	lslcc	r3, r3, #1
 8000d5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d66:	428b      	cmp	r3, r1
 8000d68:	bf24      	itt	cs
 8000d6a:	1a5b      	subcs	r3, r3, r1
 8000d6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d74:	bf24      	itt	cs
 8000d76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d82:	bf24      	itt	cs
 8000d84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d90:	bf24      	itt	cs
 8000d92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d9a:	011b      	lsls	r3, r3, #4
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000da2:	d1e0      	bne.n	8000d66 <__aeabi_fdiv+0x46>
 8000da4:	2afd      	cmp	r2, #253	; 0xfd
 8000da6:	f63f af50 	bhi.w	8000c4a <__aeabi_fmul+0x92>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db0:	bf08      	it	eq
 8000db2:	f020 0001 	biceq.w	r0, r0, #1
 8000db6:	4770      	bx	lr
 8000db8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dbc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc0:	327f      	adds	r2, #127	; 0x7f
 8000dc2:	bfc2      	ittt	gt
 8000dc4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dcc:	4770      	bxgt	lr
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd2:	f04f 0300 	mov.w	r3, #0
 8000dd6:	3a01      	subs	r2, #1
 8000dd8:	e737      	b.n	8000c4a <__aeabi_fmul+0x92>
 8000dda:	f092 0f00 	teq	r2, #0
 8000dde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de2:	bf02      	ittt	eq
 8000de4:	0040      	lsleq	r0, r0, #1
 8000de6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dea:	3a01      	subeq	r2, #1
 8000dec:	d0f9      	beq.n	8000de2 <__aeabi_fdiv+0xc2>
 8000dee:	ea40 000c 	orr.w	r0, r0, ip
 8000df2:	f093 0f00 	teq	r3, #0
 8000df6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfa:	bf02      	ittt	eq
 8000dfc:	0049      	lsleq	r1, r1, #1
 8000dfe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e02:	3b01      	subeq	r3, #1
 8000e04:	d0f9      	beq.n	8000dfa <__aeabi_fdiv+0xda>
 8000e06:	ea41 010c 	orr.w	r1, r1, ip
 8000e0a:	e795      	b.n	8000d38 <__aeabi_fdiv+0x18>
 8000e0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e10:	ea92 0f0c 	teq	r2, ip
 8000e14:	d108      	bne.n	8000e28 <__aeabi_fdiv+0x108>
 8000e16:	0242      	lsls	r2, r0, #9
 8000e18:	f47f af7d 	bne.w	8000d16 <__aeabi_fmul+0x15e>
 8000e1c:	ea93 0f0c 	teq	r3, ip
 8000e20:	f47f af70 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e776      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e28:	ea93 0f0c 	teq	r3, ip
 8000e2c:	d104      	bne.n	8000e38 <__aeabi_fdiv+0x118>
 8000e2e:	024b      	lsls	r3, r1, #9
 8000e30:	f43f af4c 	beq.w	8000ccc <__aeabi_fmul+0x114>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e76e      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e3c:	bf18      	it	ne
 8000e3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e42:	d1ca      	bne.n	8000dda <__aeabi_fdiv+0xba>
 8000e44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e48:	f47f af5c 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e50:	f47f af3c 	bne.w	8000ccc <__aeabi_fmul+0x114>
 8000e54:	e75f      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e56:	bf00      	nop

08000e58 <__aeabi_f2uiz>:
 8000e58:	0042      	lsls	r2, r0, #1
 8000e5a:	d20e      	bcs.n	8000e7a <__aeabi_f2uiz+0x22>
 8000e5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e60:	d30b      	bcc.n	8000e7a <__aeabi_f2uiz+0x22>
 8000e62:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e6a:	d409      	bmi.n	8000e80 <__aeabi_f2uiz+0x28>
 8000e6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e74:	fa23 f002 	lsr.w	r0, r3, r2
 8000e78:	4770      	bx	lr
 8000e7a:	f04f 0000 	mov.w	r0, #0
 8000e7e:	4770      	bx	lr
 8000e80:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e84:	d101      	bne.n	8000e8a <__aeabi_f2uiz+0x32>
 8000e86:	0242      	lsls	r2, r0, #9
 8000e88:	d102      	bne.n	8000e90 <__aeabi_f2uiz+0x38>
 8000e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8e:	4770      	bx	lr
 8000e90:	f04f 0000 	mov.w	r0, #0
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af02      	add	r7, sp, #8
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	70fb      	strb	r3, [r7, #3]
 8000eaa:	460b      	mov	r3, r1
 8000eac:	70bb      	strb	r3, [r7, #2]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8000eb2:	78fa      	ldrb	r2, [r7, #3]
 8000eb4:	787b      	ldrb	r3, [r7, #1]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	b2d8      	uxtb	r0, r3
 8000eba:	78ba      	ldrb	r2, [r7, #2]
 8000ebc:	7c3b      	ldrb	r3, [r7, #16]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	78ba      	ldrb	r2, [r7, #2]
 8000ec4:	78f9      	ldrb	r1, [r7, #3]
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	4603      	mov	r3, r0
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f001 fad9 	bl	8002482 <u8g2_IsIntersection>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d013      	beq.n	8000efe <u8g2_DrawBox+0x66>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8000ed6:	e00e      	b.n	8000ef6 <u8g2_DrawBox+0x5e>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8000ed8:	7878      	ldrb	r0, [r7, #1]
 8000eda:	78ba      	ldrb	r2, [r7, #2]
 8000edc:	78f9      	ldrb	r1, [r7, #3]
 8000ede:	2300      	movs	r3, #0
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f001 f999 	bl	800221c <u8g2_DrawHVLine>
    y++;    
 8000eea:	78bb      	ldrb	r3, [r7, #2]
 8000eec:	3301      	adds	r3, #1
 8000eee:	70bb      	strb	r3, [r7, #2]
    h--;
 8000ef0:	7c3b      	ldrb	r3, [r7, #16]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 8000ef6:	7c3b      	ldrb	r3, [r7, #16]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1ed      	bne.n	8000ed8 <u8g2_DrawBox+0x40>
 8000efc:	e000      	b.n	8000f00 <u8g2_DrawBox+0x68>
    return;
 8000efe:	bf00      	nop
  }
}
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b086      	sub	sp, #24
 8000f0a:	af02      	add	r7, sp, #8
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	4608      	mov	r0, r1
 8000f10:	4611      	mov	r1, r2
 8000f12:	461a      	mov	r2, r3
 8000f14:	4603      	mov	r3, r0
 8000f16:	70fb      	strb	r3, [r7, #3]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	70bb      	strb	r3, [r7, #2]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xtmp = x;
 8000f20:	78fb      	ldrb	r3, [r7, #3]
 8000f22:	73fb      	strb	r3, [r7, #15]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8000f24:	78fa      	ldrb	r2, [r7, #3]
 8000f26:	787b      	ldrb	r3, [r7, #1]
 8000f28:	4413      	add	r3, r2
 8000f2a:	b2d8      	uxtb	r0, r3
 8000f2c:	78ba      	ldrb	r2, [r7, #2]
 8000f2e:	7e3b      	ldrb	r3, [r7, #24]
 8000f30:	4413      	add	r3, r2
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	78ba      	ldrb	r2, [r7, #2]
 8000f36:	78f9      	ldrb	r1, [r7, #3]
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f001 faa0 	bl	8002482 <u8g2_IsIntersection>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d03b      	beq.n	8000fc0 <u8g2_DrawFrame+0xba>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8000f48:	7878      	ldrb	r0, [r7, #1]
 8000f4a:	78ba      	ldrb	r2, [r7, #2]
 8000f4c:	78f9      	ldrb	r1, [r7, #3]
 8000f4e:	2300      	movs	r3, #0
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	4603      	mov	r3, r0
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f001 f961 	bl	800221c <u8g2_DrawHVLine>
  if (h >= 2) {
 8000f5a:	7e3b      	ldrb	r3, [r7, #24]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d930      	bls.n	8000fc2 <u8g2_DrawFrame+0xbc>
    h-=2;
 8000f60:	7e3b      	ldrb	r3, [r7, #24]
 8000f62:	3b02      	subs	r3, #2
 8000f64:	763b      	strb	r3, [r7, #24]
    y++;
 8000f66:	78bb      	ldrb	r3, [r7, #2]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	70bb      	strb	r3, [r7, #2]
    if (h > 0) {
 8000f6c:	7e3b      	ldrb	r3, [r7, #24]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d01c      	beq.n	8000fac <u8g2_DrawFrame+0xa6>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8000f72:	7e38      	ldrb	r0, [r7, #24]
 8000f74:	78ba      	ldrb	r2, [r7, #2]
 8000f76:	78f9      	ldrb	r1, [r7, #3]
 8000f78:	2301      	movs	r3, #1
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f001 f94c 	bl	800221c <u8g2_DrawHVLine>
      x+=w;
 8000f84:	78fa      	ldrb	r2, [r7, #3]
 8000f86:	787b      	ldrb	r3, [r7, #1]
 8000f88:	4413      	add	r3, r2
 8000f8a:	70fb      	strb	r3, [r7, #3]
      x--;
 8000f8c:	78fb      	ldrb	r3, [r7, #3]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	70fb      	strb	r3, [r7, #3]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8000f92:	7e38      	ldrb	r0, [r7, #24]
 8000f94:	78ba      	ldrb	r2, [r7, #2]
 8000f96:	78f9      	ldrb	r1, [r7, #3]
 8000f98:	2301      	movs	r3, #1
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f001 f93c 	bl	800221c <u8g2_DrawHVLine>
      y+=h;
 8000fa4:	78ba      	ldrb	r2, [r7, #2]
 8000fa6:	7e3b      	ldrb	r3, [r7, #24]
 8000fa8:	4413      	add	r3, r2
 8000faa:	70bb      	strb	r3, [r7, #2]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8000fac:	7878      	ldrb	r0, [r7, #1]
 8000fae:	78ba      	ldrb	r2, [r7, #2]
 8000fb0:	7bf9      	ldrb	r1, [r7, #15]
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f001 f92f 	bl	800221c <u8g2_DrawHVLine>
 8000fbe:	e000      	b.n	8000fc2 <u8g2_DrawFrame+0xbc>
    return;
 8000fc0:	bf00      	nop
  }
}
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <u8g2_DrawRFrame>:
  }
}


void u8g2_DrawRFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af02      	add	r7, sp, #8
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	70fb      	strb	r3, [r7, #3]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	70bb      	strb	r3, [r7, #2]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xl, yu;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8000fe2:	78fa      	ldrb	r2, [r7, #3]
 8000fe4:	787b      	ldrb	r3, [r7, #1]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	b2d8      	uxtb	r0, r3
 8000fea:	78ba      	ldrb	r2, [r7, #2]
 8000fec:	7e3b      	ldrb	r3, [r7, #24]
 8000fee:	4413      	add	r3, r2
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	78ba      	ldrb	r2, [r7, #2]
 8000ff4:	78f9      	ldrb	r1, [r7, #3]
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f001 fa41 	bl	8002482 <u8g2_IsIntersection>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	f000 8095 	beq.w	8001132 <u8g2_DrawRFrame+0x16a>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	73fb      	strb	r3, [r7, #15]
  xl += r;
 800100c:	7bfa      	ldrb	r2, [r7, #15]
 800100e:	7f3b      	ldrb	r3, [r7, #28]
 8001010:	4413      	add	r3, r2
 8001012:	73fb      	strb	r3, [r7, #15]
  yu = y;
 8001014:	78bb      	ldrb	r3, [r7, #2]
 8001016:	73bb      	strb	r3, [r7, #14]
  yu += r;
 8001018:	7bba      	ldrb	r2, [r7, #14]
 800101a:	7f3b      	ldrb	r3, [r7, #28]
 800101c:	4413      	add	r3, r2
 800101e:	73bb      	strb	r3, [r7, #14]
 
  {
    u8g2_uint_t yl, xr;
      
    xr = x;
 8001020:	78fb      	ldrb	r3, [r7, #3]
 8001022:	737b      	strb	r3, [r7, #13]
    xr += w;
 8001024:	7b7a      	ldrb	r2, [r7, #13]
 8001026:	787b      	ldrb	r3, [r7, #1]
 8001028:	4413      	add	r3, r2
 800102a:	737b      	strb	r3, [r7, #13]
    xr -= r;
 800102c:	7b7a      	ldrb	r2, [r7, #13]
 800102e:	7f3b      	ldrb	r3, [r7, #28]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	737b      	strb	r3, [r7, #13]
    xr -= 1;
 8001034:	7b7b      	ldrb	r3, [r7, #13]
 8001036:	3b01      	subs	r3, #1
 8001038:	737b      	strb	r3, [r7, #13]
    
    yl = y;
 800103a:	78bb      	ldrb	r3, [r7, #2]
 800103c:	733b      	strb	r3, [r7, #12]
    yl += h;
 800103e:	7b3a      	ldrb	r2, [r7, #12]
 8001040:	7e3b      	ldrb	r3, [r7, #24]
 8001042:	4413      	add	r3, r2
 8001044:	733b      	strb	r3, [r7, #12]
    yl -= r; 
 8001046:	7b3a      	ldrb	r2, [r7, #12]
 8001048:	7f3b      	ldrb	r3, [r7, #28]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	733b      	strb	r3, [r7, #12]
    yl -= 1;
 800104e:	7b3b      	ldrb	r3, [r7, #12]
 8001050:	3b01      	subs	r3, #1
 8001052:	733b      	strb	r3, [r7, #12]

    u8g2_DrawCircle(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 8001054:	7f38      	ldrb	r0, [r7, #28]
 8001056:	7bba      	ldrb	r2, [r7, #14]
 8001058:	7bf9      	ldrb	r1, [r7, #15]
 800105a:	2302      	movs	r3, #2
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	4603      	mov	r3, r0
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 f9d0 	bl	8001406 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 8001066:	7f38      	ldrb	r0, [r7, #28]
 8001068:	7bba      	ldrb	r2, [r7, #14]
 800106a:	7b79      	ldrb	r1, [r7, #13]
 800106c:	2301      	movs	r3, #1
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	4603      	mov	r3, r0
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 f9c7 	bl	8001406 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 8001078:	7f38      	ldrb	r0, [r7, #28]
 800107a:	7b3a      	ldrb	r2, [r7, #12]
 800107c:	7bf9      	ldrb	r1, [r7, #15]
 800107e:	2304      	movs	r3, #4
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	4603      	mov	r3, r0
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f9be 	bl	8001406 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 800108a:	7f38      	ldrb	r0, [r7, #28]
 800108c:	7b3a      	ldrb	r2, [r7, #12]
 800108e:	7b79      	ldrb	r1, [r7, #13]
 8001090:	2308      	movs	r3, #8
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	4603      	mov	r3, r0
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f000 f9b5 	bl	8001406 <u8g2_DrawCircle>
  }

  {
    u8g2_uint_t ww, hh;

    ww = w;
 800109c:	787b      	ldrb	r3, [r7, #1]
 800109e:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 80010a0:	7afa      	ldrb	r2, [r7, #11]
 80010a2:	7f3b      	ldrb	r3, [r7, #28]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 80010a8:	7afa      	ldrb	r2, [r7, #11]
 80010aa:	7f3b      	ldrb	r3, [r7, #28]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	72fb      	strb	r3, [r7, #11]
    hh = h;
 80010b0:	7e3b      	ldrb	r3, [r7, #24]
 80010b2:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 80010b4:	7aba      	ldrb	r2, [r7, #10]
 80010b6:	7f3b      	ldrb	r3, [r7, #28]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 80010bc:	7aba      	ldrb	r2, [r7, #10]
 80010be:	7f3b      	ldrb	r3, [r7, #28]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	72bb      	strb	r3, [r7, #10]
    
    xl++;
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	3301      	adds	r3, #1
 80010c8:	73fb      	strb	r3, [r7, #15]
    yu++;
 80010ca:	7bbb      	ldrb	r3, [r7, #14]
 80010cc:	3301      	adds	r3, #1
 80010ce:	73bb      	strb	r3, [r7, #14]
    
    if ( ww >= 3 )
 80010d0:	7afb      	ldrb	r3, [r7, #11]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d914      	bls.n	8001100 <u8g2_DrawRFrame+0x138>
    {
      ww -= 2;
 80010d6:	7afb      	ldrb	r3, [r7, #11]
 80010d8:	3b02      	subs	r3, #2
 80010da:	72fb      	strb	r3, [r7, #11]
      h--;
 80010dc:	7e3b      	ldrb	r3, [r7, #24]
 80010de:	3b01      	subs	r3, #1
 80010e0:	763b      	strb	r3, [r7, #24]
      u8g2_DrawHLine(u8g2, xl, y, ww);
 80010e2:	7afb      	ldrb	r3, [r7, #11]
 80010e4:	78ba      	ldrb	r2, [r7, #2]
 80010e6:	7bf9      	ldrb	r1, [r7, #15]
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f001 f91a 	bl	8002322 <u8g2_DrawHLine>
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
 80010ee:	78ba      	ldrb	r2, [r7, #2]
 80010f0:	7e3b      	ldrb	r3, [r7, #24]
 80010f2:	4413      	add	r3, r2
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	7afb      	ldrb	r3, [r7, #11]
 80010f8:	7bf9      	ldrb	r1, [r7, #15]
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f001 f911 	bl	8002322 <u8g2_DrawHLine>
    }
    
    if ( hh >= 3 )
 8001100:	7abb      	ldrb	r3, [r7, #10]
 8001102:	2b02      	cmp	r3, #2
 8001104:	d916      	bls.n	8001134 <u8g2_DrawRFrame+0x16c>
    {
      hh -= 2;
 8001106:	7abb      	ldrb	r3, [r7, #10]
 8001108:	3b02      	subs	r3, #2
 800110a:	72bb      	strb	r3, [r7, #10]
      w--;
 800110c:	787b      	ldrb	r3, [r7, #1]
 800110e:	3b01      	subs	r3, #1
 8001110:	707b      	strb	r3, [r7, #1]
      u8g2_DrawVLine(u8g2, x, yu, hh);
 8001112:	7abb      	ldrb	r3, [r7, #10]
 8001114:	7bba      	ldrb	r2, [r7, #14]
 8001116:	78f9      	ldrb	r1, [r7, #3]
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f001 f91c 	bl	8002356 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x+w, yu, hh);
 800111e:	78fa      	ldrb	r2, [r7, #3]
 8001120:	787b      	ldrb	r3, [r7, #1]
 8001122:	4413      	add	r3, r2
 8001124:	b2d9      	uxtb	r1, r3
 8001126:	7abb      	ldrb	r3, [r7, #10]
 8001128:	7bba      	ldrb	r2, [r7, #14]
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f001 f913 	bl	8002356 <u8g2_DrawVLine>
 8001130:	e000      	b.n	8001134 <u8g2_DrawRFrame+0x16c>
    return;
 8001132:	bf00      	nop
    }
  }
}
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b084      	sub	sp, #16
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	7c1b      	ldrb	r3, [r3, #16]
 8001148:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001150:	461a      	mov	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	fb02 f303 	mul.w	r3, r2, r3
 8001158:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f010 fb04 	bl	8011776 <memset>
}
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b086      	sub	sp, #24
 800117a:	af02      	add	r7, sp, #8
 800117c:	6078      	str	r0, [r7, #4]
 800117e:	460b      	mov	r3, r1
 8001180:	70fb      	strb	r3, [r7, #3]
 8001182:	4613      	mov	r3, r2
 8001184:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	7c1b      	ldrb	r3, [r3, #16]
 800118c:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 800118e:	78fb      	ldrb	r3, [r7, #3]
 8001190:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001196:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	b29b      	uxth	r3, r3
 800119c:	89ba      	ldrh	r2, [r7, #12]
 800119e:	fb02 f303 	mul.w	r3, r2, r3
 80011a2:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80011a4:	89bb      	ldrh	r3, [r7, #12]
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80011aa:	89bb      	ldrh	r3, [r7, #12]
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	4413      	add	r3, r2
 80011b0:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80011b2:	7bf9      	ldrb	r1, [r7, #15]
 80011b4:	78ba      	ldrb	r2, [r7, #2]
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	460b      	mov	r3, r1
 80011bc:	2100      	movs	r1, #0
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f001 ff80 	bl	80030c4 <u8x8_DrawTile>
}
 80011c4:	bf00      	nop
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011de:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80011e6:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	7c5b      	ldrb	r3, [r3, #17]
 80011ee:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80011f0:	7bba      	ldrb	r2, [r7, #14]
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	4619      	mov	r1, r3
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ffbd 	bl	8001176 <u8g2_send_tile_row>
    src_row++;
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	3301      	adds	r3, #1
 8001200:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8001202:	7bbb      	ldrb	r3, [r7, #14]
 8001204:	3301      	adds	r3, #1
 8001206:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001208:	7bfa      	ldrb	r2, [r7, #15]
 800120a:	7b7b      	ldrb	r3, [r7, #13]
 800120c:	429a      	cmp	r2, r3
 800120e:	d203      	bcs.n	8001218 <u8g2_send_buffer+0x4c>
 8001210:	7bba      	ldrb	r2, [r7, #14]
 8001212:	7b3b      	ldrb	r3, [r7, #12]
 8001214:	429a      	cmp	r2, r3
 8001216:	d3eb      	bcc.n	80011f0 <u8g2_send_buffer+0x24>
}
 8001218:	bf00      	nop
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ffcf 	bl	80011cc <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f001 ff99 	bl	8003166 <u8x8_RefreshDisplay>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <u8g2_draw_circle_section>:
/* Circle */

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	4608      	mov	r0, r1
 8001246:	4611      	mov	r1, r2
 8001248:	461a      	mov	r2, r3
 800124a:	4603      	mov	r3, r0
 800124c:	70fb      	strb	r3, [r7, #3]
 800124e:	460b      	mov	r3, r1
 8001250:	70bb      	strb	r3, [r7, #2]
 8001252:	4613      	mov	r3, r2
 8001254:	707b      	strb	r3, [r7, #1]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 8001256:	7d3b      	ldrb	r3, [r7, #20]
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	2b00      	cmp	r3, #0
 800125e:	d017      	beq.n	8001290 <u8g2_draw_circle_section+0x54>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
 8001260:	787a      	ldrb	r2, [r7, #1]
 8001262:	78fb      	ldrb	r3, [r7, #3]
 8001264:	4413      	add	r3, r2
 8001266:	b2d9      	uxtb	r1, r3
 8001268:	7c3a      	ldrb	r2, [r7, #16]
 800126a:	78bb      	ldrb	r3, [r7, #2]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	b2db      	uxtb	r3, r3
 8001270:	461a      	mov	r2, r3
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f001 f889 	bl	800238a <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
 8001278:	787a      	ldrb	r2, [r7, #1]
 800127a:	78bb      	ldrb	r3, [r7, #2]
 800127c:	4413      	add	r3, r2
 800127e:	b2d9      	uxtb	r1, r3
 8001280:	7c3a      	ldrb	r2, [r7, #16]
 8001282:	78fb      	ldrb	r3, [r7, #3]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	b2db      	uxtb	r3, r3
 8001288:	461a      	mov	r2, r3
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f001 f87d 	bl	800238a <u8g2_DrawPixel>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 8001290:	7d3b      	ldrb	r3, [r7, #20]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d017      	beq.n	80012ca <u8g2_draw_circle_section+0x8e>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
 800129a:	787a      	ldrb	r2, [r7, #1]
 800129c:	78fb      	ldrb	r3, [r7, #3]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	b2d9      	uxtb	r1, r3
 80012a2:	7c3a      	ldrb	r2, [r7, #16]
 80012a4:	78bb      	ldrb	r3, [r7, #2]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	461a      	mov	r2, r3
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f001 f86c 	bl	800238a <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
 80012b2:	787a      	ldrb	r2, [r7, #1]
 80012b4:	78bb      	ldrb	r3, [r7, #2]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	b2d9      	uxtb	r1, r3
 80012ba:	7c3a      	ldrb	r2, [r7, #16]
 80012bc:	78fb      	ldrb	r3, [r7, #3]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	461a      	mov	r2, r3
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f001 f860 	bl	800238a <u8g2_DrawPixel>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 80012ca:	7d3b      	ldrb	r3, [r7, #20]
 80012cc:	f003 0308 	and.w	r3, r3, #8
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d017      	beq.n	8001304 <u8g2_draw_circle_section+0xc8>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
 80012d4:	787a      	ldrb	r2, [r7, #1]
 80012d6:	78fb      	ldrb	r3, [r7, #3]
 80012d8:	4413      	add	r3, r2
 80012da:	b2d9      	uxtb	r1, r3
 80012dc:	7c3a      	ldrb	r2, [r7, #16]
 80012de:	78bb      	ldrb	r3, [r7, #2]
 80012e0:	4413      	add	r3, r2
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f001 f84f 	bl	800238a <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
 80012ec:	787a      	ldrb	r2, [r7, #1]
 80012ee:	78bb      	ldrb	r3, [r7, #2]
 80012f0:	4413      	add	r3, r2
 80012f2:	b2d9      	uxtb	r1, r3
 80012f4:	7c3a      	ldrb	r2, [r7, #16]
 80012f6:	78fb      	ldrb	r3, [r7, #3]
 80012f8:	4413      	add	r3, r2
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	461a      	mov	r2, r3
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f001 f843 	bl	800238a <u8g2_DrawPixel>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 8001304:	7d3b      	ldrb	r3, [r7, #20]
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	2b00      	cmp	r3, #0
 800130c:	d017      	beq.n	800133e <u8g2_draw_circle_section+0x102>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
 800130e:	787a      	ldrb	r2, [r7, #1]
 8001310:	78fb      	ldrb	r3, [r7, #3]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	b2d9      	uxtb	r1, r3
 8001316:	7c3a      	ldrb	r2, [r7, #16]
 8001318:	78bb      	ldrb	r3, [r7, #2]
 800131a:	4413      	add	r3, r2
 800131c:	b2db      	uxtb	r3, r3
 800131e:	461a      	mov	r2, r3
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f001 f832 	bl	800238a <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
 8001326:	787a      	ldrb	r2, [r7, #1]
 8001328:	78bb      	ldrb	r3, [r7, #2]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	b2d9      	uxtb	r1, r3
 800132e:	7c3a      	ldrb	r2, [r7, #16]
 8001330:	78fb      	ldrb	r3, [r7, #3]
 8001332:	4413      	add	r3, r2
 8001334:	b2db      	uxtb	r3, r3
 8001336:	461a      	mov	r2, r3
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f001 f826 	bl	800238a <u8g2_DrawPixel>
    }
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <u8g2_draw_circle>:

static void u8g2_draw_circle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b086      	sub	sp, #24
 800134a:	af02      	add	r7, sp, #8
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	4608      	mov	r0, r1
 8001350:	4611      	mov	r1, r2
 8001352:	461a      	mov	r2, r3
 8001354:	4603      	mov	r3, r0
 8001356:	70fb      	strb	r3, [r7, #3]
 8001358:	460b      	mov	r3, r1
 800135a:	70bb      	strb	r3, [r7, #2]
 800135c:	4613      	mov	r3, r2
 800135e:	707b      	strb	r3, [r7, #1]
    u8g2_int_t ddF_x;
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
 8001360:	2301      	movs	r3, #1
 8001362:	73fb      	strb	r3, [r7, #15]
    f -= rad;
 8001364:	7bfa      	ldrb	r2, [r7, #15]
 8001366:	787b      	ldrb	r3, [r7, #1]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	b2db      	uxtb	r3, r3
 800136c:	73fb      	strb	r3, [r7, #15]
    ddF_x = 1;
 800136e:	2301      	movs	r3, #1
 8001370:	73bb      	strb	r3, [r7, #14]
    ddF_y = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	737b      	strb	r3, [r7, #13]
    ddF_y -= rad;
 8001376:	7b7a      	ldrb	r2, [r7, #13]
 8001378:	787b      	ldrb	r3, [r7, #1]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	b2db      	uxtb	r3, r3
 800137e:	737b      	strb	r3, [r7, #13]
    ddF_y *= 2;
 8001380:	7b7b      	ldrb	r3, [r7, #13]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	b2db      	uxtb	r3, r3
 8001386:	737b      	strb	r3, [r7, #13]
    x = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	733b      	strb	r3, [r7, #12]
    y = rad;
 800138c:	787b      	ldrb	r3, [r7, #1]
 800138e:	72fb      	strb	r3, [r7, #11]

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
 8001390:	78f8      	ldrb	r0, [r7, #3]
 8001392:	7afa      	ldrb	r2, [r7, #11]
 8001394:	7b39      	ldrb	r1, [r7, #12]
 8001396:	7e3b      	ldrb	r3, [r7, #24]
 8001398:	9301      	str	r3, [sp, #4]
 800139a:	78bb      	ldrb	r3, [r7, #2]
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	4603      	mov	r3, r0
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff ff4b 	bl	800123c <u8g2_draw_circle_section>
    
    while ( x < y )
 80013a6:	e026      	b.n	80013f6 <u8g2_draw_circle+0xb0>
    {
      if (f >= 0) 
 80013a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	db0b      	blt.n	80013c8 <u8g2_draw_circle+0x82>
      {
        y--;
 80013b0:	7afb      	ldrb	r3, [r7, #11]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	72fb      	strb	r3, [r7, #11]
        ddF_y += 2;
 80013b6:	7b7b      	ldrb	r3, [r7, #13]
 80013b8:	3302      	adds	r3, #2
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	737b      	strb	r3, [r7, #13]
        f += ddF_y;
 80013be:	7bfa      	ldrb	r2, [r7, #15]
 80013c0:	7b7b      	ldrb	r3, [r7, #13]
 80013c2:	4413      	add	r3, r2
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	73fb      	strb	r3, [r7, #15]
      }
      x++;
 80013c8:	7b3b      	ldrb	r3, [r7, #12]
 80013ca:	3301      	adds	r3, #1
 80013cc:	733b      	strb	r3, [r7, #12]
      ddF_x += 2;
 80013ce:	7bbb      	ldrb	r3, [r7, #14]
 80013d0:	3302      	adds	r3, #2
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	73bb      	strb	r3, [r7, #14]
      f += ddF_x;
 80013d6:	7bfa      	ldrb	r2, [r7, #15]
 80013d8:	7bbb      	ldrb	r3, [r7, #14]
 80013da:	4413      	add	r3, r2
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	73fb      	strb	r3, [r7, #15]

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
 80013e0:	78f8      	ldrb	r0, [r7, #3]
 80013e2:	7afa      	ldrb	r2, [r7, #11]
 80013e4:	7b39      	ldrb	r1, [r7, #12]
 80013e6:	7e3b      	ldrb	r3, [r7, #24]
 80013e8:	9301      	str	r3, [sp, #4]
 80013ea:	78bb      	ldrb	r3, [r7, #2]
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	4603      	mov	r3, r0
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ff23 	bl	800123c <u8g2_draw_circle_section>
    while ( x < y )
 80013f6:	7b3a      	ldrb	r2, [r7, #12]
 80013f8:	7afb      	ldrb	r3, [r7, #11]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d3d4      	bcc.n	80013a8 <u8g2_draw_circle+0x62>
    }
}
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <u8g2_DrawCircle>:

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8001406:	b590      	push	{r4, r7, lr}
 8001408:	b085      	sub	sp, #20
 800140a:	af02      	add	r7, sp, #8
 800140c:	6078      	str	r0, [r7, #4]
 800140e:	4608      	mov	r0, r1
 8001410:	4611      	mov	r1, r2
 8001412:	461a      	mov	r2, r3
 8001414:	4603      	mov	r3, r0
 8001416:	70fb      	strb	r3, [r7, #3]
 8001418:	460b      	mov	r3, r1
 800141a:	70bb      	strb	r3, [r7, #2]
 800141c:	4613      	mov	r3, r2
 800141e:	707b      	strb	r3, [r7, #1]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 8001420:	78fa      	ldrb	r2, [r7, #3]
 8001422:	787b      	ldrb	r3, [r7, #1]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	b2d9      	uxtb	r1, r3
 8001428:	78ba      	ldrb	r2, [r7, #2]
 800142a:	787b      	ldrb	r3, [r7, #1]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	b2d8      	uxtb	r0, r3
 8001430:	78fa      	ldrb	r2, [r7, #3]
 8001432:	787b      	ldrb	r3, [r7, #1]
 8001434:	4413      	add	r3, r2
 8001436:	b2db      	uxtb	r3, r3
 8001438:	3301      	adds	r3, #1
 800143a:	b2dc      	uxtb	r4, r3
 800143c:	78ba      	ldrb	r2, [r7, #2]
 800143e:	787b      	ldrb	r3, [r7, #1]
 8001440:	4413      	add	r3, r2
 8001442:	b2db      	uxtb	r3, r3
 8001444:	3301      	adds	r3, #1
 8001446:	b2db      	uxtb	r3, r3
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	4623      	mov	r3, r4
 800144c:	4602      	mov	r2, r0
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f001 f817 	bl	8002482 <u8g2_IsIntersection>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d009      	beq.n	800146e <u8g2_DrawCircle+0x68>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
 800145a:	7878      	ldrb	r0, [r7, #1]
 800145c:	78ba      	ldrb	r2, [r7, #2]
 800145e:	78f9      	ldrb	r1, [r7, #3]
 8001460:	7e3b      	ldrb	r3, [r7, #24]
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	4603      	mov	r3, r0
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff ff6d 	bl	8001346 <u8g2_draw_circle>
 800146c:	e000      	b.n	8001470 <u8g2_DrawCircle+0x6a>
      return;
 800146e:	bf00      	nop
}
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	bd90      	pop	{r4, r7, pc}
	...

08001478 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2208      	movs	r2, #8
 8001484:	701a      	strb	r2, [r3, #0]
  return buf;
 8001486:	4b03      	ldr	r3, [pc, #12]	; (8001494 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	20000294 	.word	0x20000294

08001498 <u8g2_Setup_st7565_nhd_c12864_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_erc12864_alt, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_nhd_c12864_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af02      	add	r7, sp, #8
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
 80014a4:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_nhd_c12864, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a0b      	ldr	r2, [pc, #44]	; (80014dc <u8g2_Setup_st7565_nhd_c12864_f+0x44>)
 80014ae:	490c      	ldr	r1, [pc, #48]	; (80014e0 <u8g2_Setup_st7565_nhd_c12864_f+0x48>)
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f001 feb7 	bl	8003224 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 80014b6:	f107 0313 	add.w	r3, r7, #19
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ffdc 	bl	8001478 <u8g2_m_16_8_f>
 80014c0:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80014c2:	7cfa      	ldrb	r2, [r7, #19]
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <u8g2_Setup_st7565_nhd_c12864_f+0x4c>)
 80014ca:	6979      	ldr	r1, [r7, #20]
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f001 f8c0 	bl	8002652 <u8g2_SetupBuffer>
}
 80014d2:	bf00      	nop
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	08002de9 	.word	0x08002de9
 80014e0:	08002f85 	.word	0x08002f85
 80014e4:	080024d9 	.word	0x080024d9

080014e8 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80014f4:	78fb      	ldrb	r3, [r7, #3]
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	781b      	ldrb	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr

0800150a <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 800150a:	b480      	push	{r7}
 800150c:	b085      	sub	sp, #20
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	460b      	mov	r3, r1
 8001514:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8001516:	78fb      	ldrb	r3, [r7, #3]
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	4413      	add	r3, r2
 800151c:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	81fb      	strh	r3, [r7, #14]
    font++;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3301      	adds	r3, #1
 8001528:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800152a:	89fb      	ldrh	r3, [r7, #14]
 800152c:	021b      	lsls	r3, r3, #8
 800152e:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	b29a      	uxth	r2, r3
 8001536:	89fb      	ldrh	r3, [r7, #14]
 8001538:	4413      	add	r3, r2
 800153a:	81fb      	strh	r3, [r7, #14]
    return pos;
 800153c:	89fb      	ldrh	r3, [r7, #14]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr

08001548 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8001552:	2100      	movs	r1, #0
 8001554:	6838      	ldr	r0, [r7, #0]
 8001556:	f7ff ffc7 	bl	80014e8 <u8g2_font_get_byte>
 800155a:	4603      	mov	r3, r0
 800155c:	461a      	mov	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8001562:	2101      	movs	r1, #1
 8001564:	6838      	ldr	r0, [r7, #0]
 8001566:	f7ff ffbf 	bl	80014e8 <u8g2_font_get_byte>
 800156a:	4603      	mov	r3, r0
 800156c:	461a      	mov	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8001572:	2102      	movs	r1, #2
 8001574:	6838      	ldr	r0, [r7, #0]
 8001576:	f7ff ffb7 	bl	80014e8 <u8g2_font_get_byte>
 800157a:	4603      	mov	r3, r0
 800157c:	461a      	mov	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8001582:	2103      	movs	r1, #3
 8001584:	6838      	ldr	r0, [r7, #0]
 8001586:	f7ff ffaf 	bl	80014e8 <u8g2_font_get_byte>
 800158a:	4603      	mov	r3, r0
 800158c:	461a      	mov	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8001592:	2104      	movs	r1, #4
 8001594:	6838      	ldr	r0, [r7, #0]
 8001596:	f7ff ffa7 	bl	80014e8 <u8g2_font_get_byte>
 800159a:	4603      	mov	r3, r0
 800159c:	461a      	mov	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80015a2:	2105      	movs	r1, #5
 80015a4:	6838      	ldr	r0, [r7, #0]
 80015a6:	f7ff ff9f 	bl	80014e8 <u8g2_font_get_byte>
 80015aa:	4603      	mov	r3, r0
 80015ac:	461a      	mov	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80015b2:	2106      	movs	r1, #6
 80015b4:	6838      	ldr	r0, [r7, #0]
 80015b6:	f7ff ff97 	bl	80014e8 <u8g2_font_get_byte>
 80015ba:	4603      	mov	r3, r0
 80015bc:	461a      	mov	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80015c2:	2107      	movs	r1, #7
 80015c4:	6838      	ldr	r0, [r7, #0]
 80015c6:	f7ff ff8f 	bl	80014e8 <u8g2_font_get_byte>
 80015ca:	4603      	mov	r3, r0
 80015cc:	461a      	mov	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80015d2:	2108      	movs	r1, #8
 80015d4:	6838      	ldr	r0, [r7, #0]
 80015d6:	f7ff ff87 	bl	80014e8 <u8g2_font_get_byte>
 80015da:	4603      	mov	r3, r0
 80015dc:	461a      	mov	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80015e2:	2109      	movs	r1, #9
 80015e4:	6838      	ldr	r0, [r7, #0]
 80015e6:	f7ff ff7f 	bl	80014e8 <u8g2_font_get_byte>
 80015ea:	4603      	mov	r3, r0
 80015ec:	b25a      	sxtb	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80015f2:	210a      	movs	r1, #10
 80015f4:	6838      	ldr	r0, [r7, #0]
 80015f6:	f7ff ff77 	bl	80014e8 <u8g2_font_get_byte>
 80015fa:	4603      	mov	r3, r0
 80015fc:	b25a      	sxtb	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8001602:	210b      	movs	r1, #11
 8001604:	6838      	ldr	r0, [r7, #0]
 8001606:	f7ff ff6f 	bl	80014e8 <u8g2_font_get_byte>
 800160a:	4603      	mov	r3, r0
 800160c:	b25a      	sxtb	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8001612:	210c      	movs	r1, #12
 8001614:	6838      	ldr	r0, [r7, #0]
 8001616:	f7ff ff67 	bl	80014e8 <u8g2_font_get_byte>
 800161a:	4603      	mov	r3, r0
 800161c:	b25a      	sxtb	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8001622:	210d      	movs	r1, #13
 8001624:	6838      	ldr	r0, [r7, #0]
 8001626:	f7ff ff5f 	bl	80014e8 <u8g2_font_get_byte>
 800162a:	4603      	mov	r3, r0
 800162c:	b25a      	sxtb	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8001632:	210e      	movs	r1, #14
 8001634:	6838      	ldr	r0, [r7, #0]
 8001636:	f7ff ff57 	bl	80014e8 <u8g2_font_get_byte>
 800163a:	4603      	mov	r3, r0
 800163c:	b25a      	sxtb	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8001642:	210f      	movs	r1, #15
 8001644:	6838      	ldr	r0, [r7, #0]
 8001646:	f7ff ff4f 	bl	80014e8 <u8g2_font_get_byte>
 800164a:	4603      	mov	r3, r0
 800164c:	b25a      	sxtb	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8001652:	2110      	movs	r1, #16
 8001654:	6838      	ldr	r0, [r7, #0]
 8001656:	f7ff ff47 	bl	80014e8 <u8g2_font_get_byte>
 800165a:	4603      	mov	r3, r0
 800165c:	b25a      	sxtb	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8001662:	2111      	movs	r1, #17
 8001664:	6838      	ldr	r0, [r7, #0]
 8001666:	f7ff ff50 	bl	800150a <u8g2_font_get_word>
 800166a:	4603      	mov	r3, r0
 800166c:	461a      	mov	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8001672:	2113      	movs	r1, #19
 8001674:	6838      	ldr	r0, [r7, #0]
 8001676:	f7ff ff48 	bl	800150a <u8g2_font_get_word>
 800167a:	4603      	mov	r3, r0
 800167c:	461a      	mov	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8001682:	2115      	movs	r1, #21
 8001684:	6838      	ldr	r0, [r7, #0]
 8001686:	f7ff ff40 	bl	800150a <u8g2_font_get_word>
 800168a:	4603      	mov	r3, r0
 800168c:	461a      	mov	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	82da      	strh	r2, [r3, #22]
#endif
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 800169a:	b480      	push	{r7}
 800169c:	b085      	sub	sp, #20
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	460b      	mov	r3, r1
 80016a4:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	7a9b      	ldrb	r3, [r3, #10]
 80016aa:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80016b4:	7bfa      	ldrb	r2, [r7, #15]
 80016b6:	7b7b      	ldrb	r3, [r7, #13]
 80016b8:	fa42 f303 	asr.w	r3, r2, r3
 80016bc:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80016be:	7b7b      	ldrb	r3, [r7, #13]
 80016c0:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80016c2:	7bba      	ldrb	r2, [r7, #14]
 80016c4:	78fb      	ldrb	r3, [r7, #3]
 80016c6:	4413      	add	r3, r2
 80016c8:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80016ca:	7bbb      	ldrb	r3, [r7, #14]
 80016cc:	2b07      	cmp	r3, #7
 80016ce:	d91a      	bls.n	8001706 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80016d0:	2308      	movs	r3, #8
 80016d2:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80016d4:	7b3a      	ldrb	r2, [r7, #12]
 80016d6:	7b7b      	ldrb	r3, [r7, #13]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	1c5a      	adds	r2, r3, #1
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	461a      	mov	r2, r3
 80016ee:	7b3b      	ldrb	r3, [r7, #12]
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	b25a      	sxtb	r2, r3
 80016f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	b25b      	sxtb	r3, r3
 80016fe:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8001700:	7bbb      	ldrb	r3, [r7, #14]
 8001702:	3b08      	subs	r3, #8
 8001704:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8001706:	78fb      	ldrb	r3, [r7, #3]
 8001708:	f04f 32ff 	mov.w	r2, #4294967295
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	b2db      	uxtb	r3, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	b2da      	uxtb	r2, r3
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	4013      	ands	r3, r2
 800171a:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	7bba      	ldrb	r2, [r7, #14]
 8001720:	729a      	strb	r2, [r3, #10]
  return val;
 8001722:	7bfb      	ldrb	r3, [r7, #15]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr

0800172e <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	460b      	mov	r3, r1
 8001738:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 800173a:	78fb      	ldrb	r3, [r7, #3]
 800173c:	4619      	mov	r1, r3
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff ffab 	bl	800169a <u8g2_font_decode_get_unsigned_bits>
 8001744:	4603      	mov	r3, r0
 8001746:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8001748:	2301      	movs	r3, #1
 800174a:	73bb      	strb	r3, [r7, #14]
  cnt--;
 800174c:	78fb      	ldrb	r3, [r7, #3]
 800174e:	3b01      	subs	r3, #1
 8001750:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8001752:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001756:	78fb      	ldrb	r3, [r7, #3]
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	73bb      	strb	r3, [r7, #14]
  v -= d;
 800175e:	7bfa      	ldrb	r2, [r7, #15]
 8001760:	7bbb      	ldrb	r3, [r7, #14]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	b2db      	uxtb	r3, r3
 8001766:	73fb      	strb	r3, [r7, #15]
  return v;
 8001768:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 800176c:	4618      	mov	r0, r3
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8001774:	b490      	push	{r4, r7}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4604      	mov	r4, r0
 800177c:	4608      	mov	r0, r1
 800177e:	4611      	mov	r1, r2
 8001780:	461a      	mov	r2, r3
 8001782:	4623      	mov	r3, r4
 8001784:	71fb      	strb	r3, [r7, #7]
 8001786:	4603      	mov	r3, r0
 8001788:	71bb      	strb	r3, [r7, #6]
 800178a:	460b      	mov	r3, r1
 800178c:	717b      	strb	r3, [r7, #5]
 800178e:	4613      	mov	r3, r2
 8001790:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8001792:	793b      	ldrb	r3, [r7, #4]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d008      	beq.n	80017aa <u8g2_add_vector_y+0x36>
 8001798:	2b02      	cmp	r3, #2
 800179a:	d00b      	beq.n	80017b4 <u8g2_add_vector_y+0x40>
 800179c:	2b00      	cmp	r3, #0
 800179e:	d10e      	bne.n	80017be <u8g2_add_vector_y+0x4a>
  {
    case 0:
      dy += y;
 80017a0:	797a      	ldrb	r2, [r7, #5]
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	4413      	add	r3, r2
 80017a6:	71fb      	strb	r3, [r7, #7]
      break;
 80017a8:	e00e      	b.n	80017c8 <u8g2_add_vector_y+0x54>
    case 1:
      dy += x;
 80017aa:	79ba      	ldrb	r2, [r7, #6]
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	4413      	add	r3, r2
 80017b0:	71fb      	strb	r3, [r7, #7]
      break;
 80017b2:	e009      	b.n	80017c8 <u8g2_add_vector_y+0x54>
    case 2:
      dy -= y;
 80017b4:	797b      	ldrb	r3, [r7, #5]
 80017b6:	79fa      	ldrb	r2, [r7, #7]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	71fb      	strb	r3, [r7, #7]
      break;
 80017bc:	e004      	b.n	80017c8 <u8g2_add_vector_y+0x54>
    default:
      dy -= x;
 80017be:	79bb      	ldrb	r3, [r7, #6]
 80017c0:	79fa      	ldrb	r2, [r7, #7]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	71fb      	strb	r3, [r7, #7]
      break;      
 80017c6:	bf00      	nop
  }
  return dy;
 80017c8:	79fb      	ldrb	r3, [r7, #7]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc90      	pop	{r4, r7}
 80017d2:	4770      	bx	lr

080017d4 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80017d4:	b490      	push	{r4, r7}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4604      	mov	r4, r0
 80017dc:	4608      	mov	r0, r1
 80017de:	4611      	mov	r1, r2
 80017e0:	461a      	mov	r2, r3
 80017e2:	4623      	mov	r3, r4
 80017e4:	71fb      	strb	r3, [r7, #7]
 80017e6:	4603      	mov	r3, r0
 80017e8:	71bb      	strb	r3, [r7, #6]
 80017ea:	460b      	mov	r3, r1
 80017ec:	717b      	strb	r3, [r7, #5]
 80017ee:	4613      	mov	r3, r2
 80017f0:	713b      	strb	r3, [r7, #4]
  switch(dir)
 80017f2:	793b      	ldrb	r3, [r7, #4]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d008      	beq.n	800180a <u8g2_add_vector_x+0x36>
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d00b      	beq.n	8001814 <u8g2_add_vector_x+0x40>
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d10e      	bne.n	800181e <u8g2_add_vector_x+0x4a>
  {
    case 0:
      dx += x;
 8001800:	79ba      	ldrb	r2, [r7, #6]
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	4413      	add	r3, r2
 8001806:	71fb      	strb	r3, [r7, #7]
      break;
 8001808:	e00e      	b.n	8001828 <u8g2_add_vector_x+0x54>
    case 1:
      dx -= y;
 800180a:	797b      	ldrb	r3, [r7, #5]
 800180c:	79fa      	ldrb	r2, [r7, #7]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	71fb      	strb	r3, [r7, #7]
      break;
 8001812:	e009      	b.n	8001828 <u8g2_add_vector_x+0x54>
    case 2:
      dx -= x;
 8001814:	79bb      	ldrb	r3, [r7, #6]
 8001816:	79fa      	ldrb	r2, [r7, #7]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	71fb      	strb	r3, [r7, #7]
      break;
 800181c:	e004      	b.n	8001828 <u8g2_add_vector_x+0x54>
    default:
      dx += y;
 800181e:	797a      	ldrb	r2, [r7, #5]
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	4413      	add	r3, r2
 8001824:	71fb      	strb	r3, [r7, #7]
      break;      
 8001826:	bf00      	nop
  }
  return dx;
 8001828:	79fb      	ldrb	r3, [r7, #7]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bc90      	pop	{r4, r7}
 8001832:	4770      	bx	lr

08001834 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af02      	add	r7, sp, #8
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	70fb      	strb	r3, [r7, #3]
 8001840:	4613      	mov	r3, r2
 8001842:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3354      	adds	r3, #84	; 0x54
 8001848:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 800184a:	78fb      	ldrb	r3, [r7, #3]
 800184c:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001854:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800185c:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001864:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8001866:	7bfa      	ldrb	r2, [r7, #15]
 8001868:	7d7b      	ldrb	r3, [r7, #21]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8001872:	7dfa      	ldrb	r2, [r7, #23]
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	429a      	cmp	r2, r3
 8001878:	d201      	bcs.n	800187e <u8g2_font_decode_len+0x4a>
      current = cnt;
 800187a:	7dfb      	ldrb	r3, [r7, #23]
 800187c:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	791b      	ldrb	r3, [r3, #4]
 8001882:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	795b      	ldrb	r3, [r3, #5]
 8001888:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800188a:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800188e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	7b9b      	ldrb	r3, [r3, #14]
 8001896:	7bb8      	ldrb	r0, [r7, #14]
 8001898:	f7ff ff9c 	bl	80017d4 <u8g2_add_vector_x>
 800189c:	4603      	mov	r3, r0
 800189e:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80018a0:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80018a4:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	7b9b      	ldrb	r3, [r3, #14]
 80018ac:	7b78      	ldrb	r0, [r7, #13]
 80018ae:	f7ff ff61 	bl	8001774 <u8g2_add_vector_y>
 80018b2:	4603      	mov	r3, r0
 80018b4:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80018b6:	78bb      	ldrb	r3, [r7, #2]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00f      	beq.n	80018dc <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	7b1a      	ldrb	r2, [r3, #12]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	7b9b      	ldrb	r3, [r3, #14]
 80018ca:	7db8      	ldrb	r0, [r7, #22]
 80018cc:	7b7a      	ldrb	r2, [r7, #13]
 80018ce:	7bb9      	ldrb	r1, [r7, #14]
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	4603      	mov	r3, r0
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 fca1 	bl	800221c <u8g2_DrawHVLine>
 80018da:	e012      	b.n	8001902 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	7adb      	ldrb	r3, [r3, #11]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d10e      	bne.n	8001902 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	7b5a      	ldrb	r2, [r3, #13]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	7b9b      	ldrb	r3, [r3, #14]
 80018f2:	7db8      	ldrb	r0, [r7, #22]
 80018f4:	7b7a      	ldrb	r2, [r7, #13]
 80018f6:	7bb9      	ldrb	r1, [r7, #14]
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	4603      	mov	r3, r0
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 fc8d 	bl	800221c <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8001902:	7dfa      	ldrb	r2, [r7, #23]
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	429a      	cmp	r2, r3
 8001908:	d309      	bcc.n	800191e <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 800190a:	7dfa      	ldrb	r2, [r7, #23]
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	757b      	strb	r3, [r7, #21]
    ly++;
 8001916:	7d3b      	ldrb	r3, [r7, #20]
 8001918:	3301      	adds	r3, #1
 800191a:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 800191c:	e79f      	b.n	800185e <u8g2_font_decode_len+0x2a>
      break;
 800191e:	bf00      	nop
  }
  lx += cnt;
 8001920:	7d7a      	ldrb	r2, [r7, #21]
 8001922:	7dfb      	ldrb	r3, [r7, #23]
 8001924:	4413      	add	r3, r2
 8001926:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001928:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8001930:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	71da      	strb	r2, [r3, #7]
  
}
 8001938:	bf00      	nop
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3354      	adds	r3, #84	; 0x54
 800194e:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001962:	4619      	mov	r1, r3
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f7ff fe98 	bl	800169a <u8g2_font_decode_get_unsigned_bits>
 800196a:	4603      	mov	r3, r0
 800196c:	b25a      	sxtb	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001978:	4619      	mov	r1, r3
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f7ff fe8d 	bl	800169a <u8g2_font_decode_get_unsigned_bits>
 8001980:	4603      	mov	r3, r0
 8001982:	b25a      	sxtb	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	7b1b      	ldrb	r3, [r3, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	bf0c      	ite	eq
 800199a:	2301      	moveq	r3, #1
 800199c:	2300      	movne	r3, #0
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	461a      	mov	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	735a      	strb	r2, [r3, #13]
}
 80019a6:	bf00      	nop
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af02      	add	r7, sp, #8
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3354      	adds	r3, #84	; 0x54
 80019be:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 80019c0:	6839      	ldr	r1, [r7, #0]
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ffbc 	bl	8001940 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80019ce:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80019d6:	4619      	mov	r1, r3
 80019d8:	6938      	ldr	r0, [r7, #16]
 80019da:	f7ff fea8 	bl	800172e <u8g2_font_decode_get_signed_bits>
 80019de:	4603      	mov	r3, r0
 80019e0:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80019e8:	4619      	mov	r1, r3
 80019ea:	6938      	ldr	r0, [r7, #16]
 80019ec:	f7ff fe9f 	bl	800172e <u8g2_font_decode_get_signed_bits>
 80019f0:	4603      	mov	r3, r0
 80019f2:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80019fa:	4619      	mov	r1, r3
 80019fc:	6938      	ldr	r0, [r7, #16]
 80019fe:	f7ff fe96 	bl	800172e <u8g2_font_decode_get_signed_bits>
 8001a02:	4603      	mov	r3, r0
 8001a04:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f340 80cf 	ble.w	8001bb0 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	7918      	ldrb	r0, [r3, #4]
 8001a16:	7bfa      	ldrb	r2, [r7, #15]
 8001a18:	7b7b      	ldrb	r3, [r7, #13]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	425b      	negs	r3, r3
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	b25a      	sxtb	r2, r3
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	7b9b      	ldrb	r3, [r3, #14]
 8001a28:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001a2c:	f7ff fed2 	bl	80017d4 <u8g2_add_vector_x>
 8001a30:	4603      	mov	r3, r0
 8001a32:	461a      	mov	r2, r3
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	7958      	ldrb	r0, [r3, #5]
 8001a3c:	7bfa      	ldrb	r2, [r7, #15]
 8001a3e:	7b7b      	ldrb	r3, [r7, #13]
 8001a40:	4413      	add	r3, r2
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	425b      	negs	r3, r3
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	b25a      	sxtb	r2, r3
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	7b9b      	ldrb	r3, [r3, #14]
 8001a4e:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001a52:	f7ff fe8f 	bl	8001774 <u8g2_add_vector_y>
 8001a56:	4603      	mov	r3, r0
 8001a58:	461a      	mov	r2, r3
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	791b      	ldrb	r3, [r3, #4]
 8001a62:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	795b      	ldrb	r3, [r3, #5]
 8001a68:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8001a6a:	7dfb      	ldrb	r3, [r7, #23]
 8001a6c:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8001a6e:	7d7b      	ldrb	r3, [r7, #21]
 8001a70:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	7b9b      	ldrb	r3, [r3, #14]
 8001a76:	2b03      	cmp	r3, #3
 8001a78:	d852      	bhi.n	8001b20 <u8g2_font_decode_glyph+0x170>
 8001a7a:	a201      	add	r2, pc, #4	; (adr r2, 8001a80 <u8g2_font_decode_glyph+0xd0>)
 8001a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a80:	08001a91 	.word	0x08001a91
 8001a84:	08001aa9 	.word	0x08001aa9
 8001a88:	08001acd 	.word	0x08001acd
 8001a8c:	08001afd 	.word	0x08001afd
      {
	case 0:
	    x1 += decode->glyph_width;
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	7dbb      	ldrb	r3, [r7, #22]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8001a9e:	7bfa      	ldrb	r2, [r7, #15]
 8001aa0:	7d3b      	ldrb	r3, [r7, #20]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	753b      	strb	r3, [r7, #20]
	    break;
 8001aa6:	e03b      	b.n	8001b20 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	7dfa      	ldrb	r2, [r7, #23]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001ab0:	7dfb      	ldrb	r3, [r7, #23]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8001ab6:	7dbb      	ldrb	r3, [r7, #22]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	7d3b      	ldrb	r3, [r7, #20]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	753b      	strb	r3, [r7, #20]
	    break;
 8001aca:	e029      	b.n	8001b20 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	7dfa      	ldrb	r2, [r7, #23]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001ada:	7dfb      	ldrb	r3, [r7, #23]
 8001adc:	3301      	adds	r3, #1
 8001ade:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8001ae0:	7dbb      	ldrb	r3, [r7, #22]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8001ae6:	7bfb      	ldrb	r3, [r7, #15]
 8001ae8:	7d7a      	ldrb	r2, [r7, #21]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001aee:	7d7b      	ldrb	r3, [r7, #21]
 8001af0:	3301      	adds	r3, #1
 8001af2:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001af4:	7d3b      	ldrb	r3, [r7, #20]
 8001af6:	3301      	adds	r3, #1
 8001af8:	753b      	strb	r3, [r7, #20]
	    break;	  
 8001afa:	e011      	b.n	8001b20 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8001afc:	7bfa      	ldrb	r2, [r7, #15]
 8001afe:	7dbb      	ldrb	r3, [r7, #22]
 8001b00:	4413      	add	r3, r2
 8001b02:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	7d7a      	ldrb	r2, [r7, #21]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001b12:	7d7b      	ldrb	r3, [r7, #21]
 8001b14:	3301      	adds	r3, #1
 8001b16:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001b18:	7d3b      	ldrb	r3, [r7, #20]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	753b      	strb	r3, [r7, #20]
	    break;	  
 8001b1e:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001b20:	7db8      	ldrb	r0, [r7, #22]
 8001b22:	7d7a      	ldrb	r2, [r7, #21]
 8001b24:	7df9      	ldrb	r1, [r7, #23]
 8001b26:	7d3b      	ldrb	r3, [r7, #20]
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 fca8 	bl	8002482 <u8g2_IsIntersection>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d102      	bne.n	8001b3e <u8g2_font_decode_glyph+0x18e>
	return d;
 8001b38:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001b3c:	e03a      	b.n	8001bb4 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	2200      	movs	r2, #0
 8001b42:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	2200      	movs	r2, #0
 8001b48:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8001b50:	4619      	mov	r1, r3
 8001b52:	6938      	ldr	r0, [r7, #16]
 8001b54:	f7ff fda1 	bl	800169a <u8g2_font_decode_get_unsigned_bits>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8001b62:	4619      	mov	r1, r3
 8001b64:	6938      	ldr	r0, [r7, #16]
 8001b66:	f7ff fd98 	bl	800169a <u8g2_font_decode_get_unsigned_bits>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8001b6e:	7afb      	ldrb	r3, [r7, #11]
 8001b70:	2200      	movs	r2, #0
 8001b72:	4619      	mov	r1, r3
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff fe5d 	bl	8001834 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001b7a:	7abb      	ldrb	r3, [r7, #10]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	4619      	mov	r1, r3
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff fe57 	bl	8001834 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001b86:	2101      	movs	r1, #1
 8001b88:	6938      	ldr	r0, [r7, #16]
 8001b8a:	f7ff fd86 	bl	800169a <u8g2_font_decode_get_unsigned_bits>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1ec      	bne.n	8001b6e <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001b9a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	dd00      	ble.n	8001ba4 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001ba2:	e7d2      	b.n	8001b4a <u8g2_font_decode_glyph+0x19a>
	break;
 8001ba4:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	7b1a      	ldrb	r2, [r3, #12]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  }
  return d;
 8001bb0:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bcc:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	3317      	adds	r3, #23
 8001bd2:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8001bd4:	887b      	ldrh	r3, [r7, #2]
 8001bd6:	2bff      	cmp	r3, #255	; 0xff
 8001bd8:	d82a      	bhi.n	8001c30 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8001bda:	887b      	ldrh	r3, [r7, #2]
 8001bdc:	2b60      	cmp	r3, #96	; 0x60
 8001bde:	d907      	bls.n	8001bf0 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8001be6:	461a      	mov	r2, r3
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	4413      	add	r3, r2
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	e009      	b.n	8001c04 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001bf0:	887b      	ldrh	r3, [r7, #2]
 8001bf2:	2b40      	cmp	r3, #64	; 0x40
 8001bf4:	d906      	bls.n	8001c04 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	4413      	add	r3, r2
 8001c02:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	3301      	adds	r3, #1
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d04e      	beq.n	8001cac <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	887a      	ldrh	r2, [r7, #2]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d102      	bne.n	8001c20 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	3302      	adds	r3, #2
 8001c1e:	e049      	b.n	8001cb4 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	3301      	adds	r3, #1
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001c2e:	e7e9      	b.n	8001c04 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8001c36:	461a      	mov	r2, r3
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001c42:	2100      	movs	r1, #0
 8001c44:	6938      	ldr	r0, [r7, #16]
 8001c46:	f7ff fc60 	bl	800150a <u8g2_font_get_word>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	4413      	add	r3, r2
 8001c52:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001c54:	2102      	movs	r1, #2
 8001c56:	6938      	ldr	r0, [r7, #16]
 8001c58:	f7ff fc57 	bl	800150a <u8g2_font_get_word>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	3304      	adds	r3, #4
 8001c64:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8001c66:	89fa      	ldrh	r2, [r7, #14]
 8001c68:	887b      	ldrh	r3, [r7, #2]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d3e9      	bcc.n	8001c42 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001c74:	89fb      	ldrh	r3, [r7, #14]
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	89fb      	ldrh	r3, [r7, #14]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001c88:	89fb      	ldrh	r3, [r7, #14]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d010      	beq.n	8001cb0 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8001c8e:	89fa      	ldrh	r2, [r7, #14]
 8001c90:	887b      	ldrh	r3, [r7, #2]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d102      	bne.n	8001c9c <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	3303      	adds	r3, #3
 8001c9a:	e00b      	b.n	8001cb4 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	3302      	adds	r3, #2
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8001caa:	e7e0      	b.n	8001c6e <u8g2_font_get_glyph_data+0xb2>
	break;
 8001cac:	bf00      	nop
 8001cae:	e000      	b.n	8001cb2 <u8g2_font_get_glyph_data+0xf6>
	break;
 8001cb0:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	4608      	mov	r0, r1
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4603      	mov	r3, r0
 8001ccc:	70fb      	strb	r3, [r7, #3]
 8001cce:	460b      	mov	r3, r1
 8001cd0:	70bb      	strb	r3, [r7, #2]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	78fa      	ldrb	r2, [r7, #3]
 8001cde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  u8g2->font_decode.target_y = y;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	78ba      	ldrb	r2, [r7, #2]
 8001ce6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8001cea:	883b      	ldrh	r3, [r7, #0]
 8001cec:	4619      	mov	r1, r3
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff ff64 	bl	8001bbc <u8g2_font_get_glyph_data>
 8001cf4:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001cfc:	68b9      	ldr	r1, [r7, #8]
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff fe56 	bl	80019b0 <u8g2_font_decode_glyph>
 8001d04:	4603      	mov	r3, r0
 8001d06:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <u8g2_GetGlyphWidth>:
  return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b084      	sub	sp, #16
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	807b      	strh	r3, [r7, #2]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 8001d1e:	887b      	ldrh	r3, [r7, #2]
 8001d20:	4619      	mov	r1, r3
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff ff4a 	bl	8001bbc <u8g2_font_get_glyph_data>
 8001d28:	60f8      	str	r0, [r7, #12]
  if ( glyph_data == NULL )
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <u8g2_GetGlyphWidth+0x22>
    return 0; 
 8001d30:	2300      	movs	r3, #0
 8001d32:	e027      	b.n	8001d84 <u8g2_GetGlyphWidth+0x72>
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 8001d34:	68f9      	ldr	r1, [r7, #12]
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff fe02 	bl	8001940 <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	f7ff fcef 	bl	800172e <u8g2_font_decode_get_signed_bits>
 8001d50:	4603      	mov	r3, r0
 8001d52:	461a      	mov	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001d66:	4619      	mov	r1, r3
 8001d68:	4610      	mov	r0, r2
 8001d6a:	f7ff fce0 	bl	800172e <u8g2_font_decode_get_signed_bits>
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	f7ff fcd6 	bl	800172e <u8g2_font_decode_get_signed_bits>
 8001d82:	4603      	mov	r3, r0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	78fa      	ldrb	r2, [r7, #3]
 8001d9c:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr
	...

08001dac <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	4608      	mov	r0, r1
 8001db6:	4611      	mov	r1, r2
 8001db8:	461a      	mov	r2, r3
 8001dba:	4603      	mov	r3, r0
 8001dbc:	70fb      	strb	r3, [r7, #3]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	70bb      	strb	r3, [r7, #2]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d833      	bhi.n	8001e38 <u8g2_DrawGlyph+0x8c>
 8001dd0:	a201      	add	r2, pc, #4	; (adr r2, 8001dd8 <u8g2_DrawGlyph+0x2c>)
 8001dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd6:	bf00      	nop
 8001dd8:	08001de9 	.word	0x08001de9
 8001ddc:	08001dfd 	.word	0x08001dfd
 8001de0:	08001e11 	.word	0x08001e11
 8001de4:	08001e25 	.word	0x08001e25
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	4798      	blx	r3
 8001df0:	4603      	mov	r3, r0
 8001df2:	461a      	mov	r2, r3
 8001df4:	78bb      	ldrb	r3, [r7, #2]
 8001df6:	4413      	add	r3, r2
 8001df8:	70bb      	strb	r3, [r7, #2]
      break;
 8001dfa:	e01d      	b.n	8001e38 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	4798      	blx	r3
 8001e04:	4603      	mov	r3, r0
 8001e06:	461a      	mov	r2, r3
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	1a9b      	subs	r3, r3, r2
 8001e0c:	70fb      	strb	r3, [r7, #3]
      break;
 8001e0e:	e013      	b.n	8001e38 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	4798      	blx	r3
 8001e18:	4603      	mov	r3, r0
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	78bb      	ldrb	r3, [r7, #2]
 8001e1e:	1a9b      	subs	r3, r3, r2
 8001e20:	70bb      	strb	r3, [r7, #2]
      break;
 8001e22:	e009      	b.n	8001e38 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	4798      	blx	r3
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	461a      	mov	r2, r3
 8001e30:	78fb      	ldrb	r3, [r7, #3]
 8001e32:	4413      	add	r3, r2
 8001e34:	70fb      	strb	r3, [r7, #3]
      break;
 8001e36:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8001e38:	883b      	ldrh	r3, [r7, #0]
 8001e3a:	78ba      	ldrb	r2, [r7, #2]
 8001e3c:	78f9      	ldrb	r1, [r7, #3]
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff ff3c 	bl	8001cbc <u8g2_font_draw_glyph>
 8001e44:	4603      	mov	r3, r0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop

08001e50 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	72fb      	strb	r3, [r7, #11]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 fec2 	bl	8002bec <u8x8_utf8_init>
  sum = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	7812      	ldrb	r2, [r2, #0]
 8001e74:	4611      	mov	r1, r2
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	4798      	blx	r3
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8001e7e:	8abb      	ldrh	r3, [r7, #20]
 8001e80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d038      	beq.n	8001efa <u8g2_draw_string+0xaa>
      break;
    str++;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8001e8e:	8abb      	ldrh	r3, [r7, #20]
 8001e90:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d0e9      	beq.n	8001e6c <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8001e98:	8abb      	ldrh	r3, [r7, #20]
 8001e9a:	7aba      	ldrb	r2, [r7, #10]
 8001e9c:	7af9      	ldrb	r1, [r7, #11]
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f7ff ff84 	bl	8001dac <u8g2_DrawGlyph>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	d81e      	bhi.n	8001ef0 <u8g2_draw_string+0xa0>
 8001eb2:	a201      	add	r2, pc, #4	; (adr r2, 8001eb8 <u8g2_draw_string+0x68>)
 8001eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb8:	08001ec9 	.word	0x08001ec9
 8001ebc:	08001ed3 	.word	0x08001ed3
 8001ec0:	08001edd 	.word	0x08001edd
 8001ec4:	08001ee7 	.word	0x08001ee7
      {
	case 0:
	  x += delta;
 8001ec8:	7afa      	ldrb	r2, [r7, #11]
 8001eca:	7cfb      	ldrb	r3, [r7, #19]
 8001ecc:	4413      	add	r3, r2
 8001ece:	72fb      	strb	r3, [r7, #11]
	  break;
 8001ed0:	e00e      	b.n	8001ef0 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8001ed2:	7aba      	ldrb	r2, [r7, #10]
 8001ed4:	7cfb      	ldrb	r3, [r7, #19]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	72bb      	strb	r3, [r7, #10]
	  break;
 8001eda:	e009      	b.n	8001ef0 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001edc:	7afa      	ldrb	r2, [r7, #11]
 8001ede:	7cfb      	ldrb	r3, [r7, #19]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	72fb      	strb	r3, [r7, #11]
	  break;
 8001ee4:	e004      	b.n	8001ef0 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8001ee6:	7aba      	ldrb	r2, [r7, #10]
 8001ee8:	7cfb      	ldrb	r3, [r7, #19]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	72bb      	strb	r3, [r7, #10]
	  break;
 8001eee:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8001ef0:	7dfa      	ldrb	r2, [r7, #23]
 8001ef2:	7cfb      	ldrb	r3, [r7, #19]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001ef8:	e7b8      	b.n	8001e6c <u8g2_draw_string+0x1c>
      break;
 8001efa:	bf00      	nop
    }
  }
  return sum;
 8001efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop

08001f08 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	460b      	mov	r3, r1
 8001f14:	72fb      	strb	r3, [r7, #11]
 8001f16:	4613      	mov	r3, r2
 8001f18:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4a06      	ldr	r2, [pc, #24]	; (8001f38 <u8g2_DrawStr+0x30>)
 8001f1e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8001f20:	7aba      	ldrb	r2, [r7, #10]
 8001f22:	7af9      	ldrb	r1, [r7, #11]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f7ff ff92 	bl	8001e50 <u8g2_draw_string>
 8001f2c:	4603      	mov	r3, r0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	08002c07 	.word	0x08002c07

08001f3c <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d05d      	beq.n	8002008 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f993 2071 	ldrsb.w	r2, [r3, #113]	; 0x71
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f993 2072 	ldrsb.w	r2, [r3, #114]	; 0x72
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d04d      	beq.n	800200a <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d11c      	bne.n	8001fb2 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f993 207e 	ldrsb.w	r2, [r3, #126]	; 0x7e
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f993 3073 	ldrsb.w	r3, [r3, #115]	; 0x73
 8001f84:	429a      	cmp	r2, r3
 8001f86:	da05      	bge.n	8001f94 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f993 2073 	ldrsb.w	r2, [r3, #115]	; 0x73
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	dd32      	ble.n	800200a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8001fb0:	e02b      	b.n	800200a <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8001fb8:	461a      	mov	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8001fc8:	440b      	add	r3, r1
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	da0d      	bge.n	8001fea <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	4413      	add	r3, r2
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	b25a      	sxtb	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	dd07      	ble.n	800200a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f993 2070 	ldrsb.w	r2, [r3, #112]	; 0x70
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8002006:	e000      	b.n	800200a <u8g2_UpdateRefHeight+0xce>
    return;
 8002008:	bf00      	nop
  }  
}
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr

08002012 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  return 0;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr
	...

08002028 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a03      	ldr	r2, [pc, #12]	; (8002040 <u8g2_SetFontPosBaseline+0x18>)
 8002034:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr
 8002040:	08002013 	.word	0x08002013

08002044 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d00b      	beq.n	8002070 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	64da      	str	r2, [r3, #76]	; 0x4c
    u8g2_read_font_info(&(u8g2->font_info), font);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3364      	adds	r3, #100	; 0x64
 8002062:	6839      	ldr	r1, [r7, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fa6f 	bl	8001548 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff ff66 	bl	8001f3c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint16_t e;
  u8g2_uint_t  w, dx;
  
  u8g2->font_decode.glyph_width = 0;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 fdae 	bl	8002bec <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	73fb      	strb	r3, [r7, #15]
  dx = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	73bb      	strb	r3, [r7, #14]

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	7812      	ldrb	r2, [r2, #0]
 80020a0:	4611      	mov	r1, r2
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	4798      	blx	r3
 80020a6:	4603      	mov	r3, r0
 80020a8:	81bb      	strh	r3, [r7, #12]
    if ( e == 0x0ffff )
 80020aa:	89bb      	ldrh	r3, [r7, #12]
 80020ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d013      	beq.n	80020dc <u8g2_string_width+0x64>
      break;
    str++;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	3301      	adds	r3, #1
 80020b8:	603b      	str	r3, [r7, #0]
    if ( e != 0x0fffe )
 80020ba:	89bb      	ldrh	r3, [r7, #12]
 80020bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d0e9      	beq.n	8002098 <u8g2_string_width+0x20>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 80020c4:	89bb      	ldrh	r3, [r7, #12]
 80020c6:	4619      	mov	r1, r3
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff fe22 	bl	8001d12 <u8g2_GetGlyphWidth>
 80020ce:	4603      	mov	r3, r0
 80020d0:	73bb      	strb	r3, [r7, #14]
      w += dx;
 80020d2:	7bfa      	ldrb	r2, [r7, #15]
 80020d4:	7bbb      	ldrb	r3, [r7, #14]
 80020d6:	4413      	add	r3, r2
 80020d8:	73fb      	strb	r3, [r7, #15]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80020da:	e7dd      	b.n	8002098 <u8g2_string_width+0x20>
      break;
 80020dc:	bf00      	nop
    }
  }
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d011      	beq.n	800210c <u8g2_string_width+0x94>
  {
    w -= dx;
 80020e8:	7bfa      	ldrb	r2, [r7, #15]
 80020ea:	7bbb      	ldrb	r3, [r7, #14]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	73fb      	strb	r3, [r7, #15]
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	4413      	add	r3, r2
 80020fc:	73fb      	strb	r3, [r7, #15]
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002104:	b2da      	uxtb	r2, r3
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	4413      	add	r3, r2
 800210a:	73fb      	strb	r3, [r7, #15]
  }
  // printf("w=%d \n", w);
  
  return w;  
 800210c:	7bfb      	ldrb	r3, [r7, #15]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <u8g2_GetStrWidth>:




u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a05      	ldr	r2, [pc, #20]	; (800213c <u8g2_GetStrWidth+0x24>)
 8002126:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, s);
 8002128:	6839      	ldr	r1, [r7, #0]
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff ffa4 	bl	8002078 <u8g2_string_width>
 8002130:	4603      	mov	r3, r0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	08002c07 	.word	0x08002c07

08002140 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8002140:	b480      	push	{r7}
 8002142:	b087      	sub	sp, #28
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	4611      	mov	r1, r2
 800214c:	461a      	mov	r2, r3
 800214e:	460b      	mov	r3, r1
 8002150:	71fb      	strb	r3, [r7, #7]
 8002152:	4613      	mov	r3, r2
 8002154:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 800215c:	7dfb      	ldrb	r3, [r7, #23]
 800215e:	75bb      	strb	r3, [r7, #22]
  b += *len;
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	781a      	ldrb	r2, [r3, #0]
 8002164:	7dbb      	ldrb	r3, [r7, #22]
 8002166:	4413      	add	r3, r2
 8002168:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 800216a:	7dfa      	ldrb	r2, [r7, #23]
 800216c:	7dbb      	ldrb	r3, [r7, #22]
 800216e:	429a      	cmp	r2, r3
 8002170:	d90b      	bls.n	800218a <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8002172:	7dfa      	ldrb	r2, [r7, #23]
 8002174:	79bb      	ldrb	r3, [r7, #6]
 8002176:	429a      	cmp	r2, r3
 8002178:	d205      	bcs.n	8002186 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 800217a:	79bb      	ldrb	r3, [r7, #6]
 800217c:	75bb      	strb	r3, [r7, #22]
      b--;
 800217e:	7dbb      	ldrb	r3, [r7, #22]
 8002180:	3b01      	subs	r3, #1
 8002182:	75bb      	strb	r3, [r7, #22]
 8002184:	e001      	b.n	800218a <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 800218a:	7dfa      	ldrb	r2, [r7, #23]
 800218c:	79bb      	ldrb	r3, [r7, #6]
 800218e:	429a      	cmp	r2, r3
 8002190:	d301      	bcc.n	8002196 <u8g2_clip_intersection2+0x56>
    return 0;
 8002192:	2300      	movs	r3, #0
 8002194:	e01c      	b.n	80021d0 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8002196:	7dba      	ldrb	r2, [r7, #22]
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	429a      	cmp	r2, r3
 800219c:	d801      	bhi.n	80021a2 <u8g2_clip_intersection2+0x62>
    return 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	e016      	b.n	80021d0 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 80021a2:	7dfa      	ldrb	r2, [r7, #23]
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d201      	bcs.n	80021ae <u8g2_clip_intersection2+0x6e>
    a = c;
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 80021ae:	7dba      	ldrb	r2, [r7, #22]
 80021b0:	79bb      	ldrb	r3, [r7, #6]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d901      	bls.n	80021ba <u8g2_clip_intersection2+0x7a>
    b = d;
 80021b6:	79bb      	ldrb	r3, [r7, #6]
 80021b8:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	7dfa      	ldrb	r2, [r7, #23]
 80021be:	701a      	strb	r2, [r3, #0]
  b -= a;
 80021c0:	7dba      	ldrb	r2, [r7, #22]
 80021c2:	7dfb      	ldrb	r3, [r7, #23]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	75bb      	strb	r3, [r7, #22]
  *len = b;
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	7dba      	ldrb	r2, [r7, #22]
 80021cc:	701a      	strb	r2, [r3, #0]
  return 1;
 80021ce:	2301      	movs	r3, #1
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	371c      	adds	r7, #28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr

080021da <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80021da:	b590      	push	{r4, r7, lr}
 80021dc:	b085      	sub	sp, #20
 80021de:	af02      	add	r7, sp, #8
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	4608      	mov	r0, r1
 80021e4:	4611      	mov	r1, r2
 80021e6:	461a      	mov	r2, r3
 80021e8:	4603      	mov	r3, r0
 80021ea:	70fb      	strb	r3, [r7, #3]
 80021ec:	460b      	mov	r3, r1
 80021ee:	70bb      	strb	r3, [r7, #2]
 80021f0:	4613      	mov	r3, r2
 80021f2:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021fa:	78ba      	ldrb	r2, [r7, #2]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002204:	7878      	ldrb	r0, [r7, #1]
 8002206:	78ba      	ldrb	r2, [r7, #2]
 8002208:	78f9      	ldrb	r1, [r7, #3]
 800220a:	7e3b      	ldrb	r3, [r7, #24]
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	4603      	mov	r3, r0
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	47a0      	blx	r4
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	bd90      	pop	{r4, r7, pc}

0800221c <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800221c:	b590      	push	{r4, r7, lr}
 800221e:	b085      	sub	sp, #20
 8002220:	af02      	add	r7, sp, #8
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	4608      	mov	r0, r1
 8002226:	4611      	mov	r1, r2
 8002228:	461a      	mov	r2, r3
 800222a:	4603      	mov	r3, r0
 800222c:	70fb      	strb	r3, [r7, #3]
 800222e:	460b      	mov	r3, r1
 8002230:	70bb      	strb	r3, [r7, #2]
 8002232:	4613      	mov	r3, r2
 8002234:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800223c:	2b00      	cmp	r3, #0
 800223e:	d06d      	beq.n	800231c <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8002240:	787b      	ldrb	r3, [r7, #1]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d06a      	beq.n	800231c <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8002246:	787b      	ldrb	r3, [r7, #1]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d918      	bls.n	800227e <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 800224c:	7e3b      	ldrb	r3, [r7, #24]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d109      	bne.n	8002266 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 8002252:	78fa      	ldrb	r2, [r7, #3]
 8002254:	787b      	ldrb	r3, [r7, #1]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	b2db      	uxtb	r3, r3
 800225a:	70fb      	strb	r3, [r7, #3]
	  x++;
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	3301      	adds	r3, #1
 8002260:	b2db      	uxtb	r3, r3
 8002262:	70fb      	strb	r3, [r7, #3]
 8002264:	e00b      	b.n	800227e <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 8002266:	7e3b      	ldrb	r3, [r7, #24]
 8002268:	2b03      	cmp	r3, #3
 800226a:	d108      	bne.n	800227e <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 800226c:	78ba      	ldrb	r2, [r7, #2]
 800226e:	787b      	ldrb	r3, [r7, #1]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	b2db      	uxtb	r3, r3
 8002274:	70bb      	strb	r3, [r7, #2]
	  y++;
 8002276:	78bb      	ldrb	r3, [r7, #2]
 8002278:	3301      	adds	r3, #1
 800227a:	b2db      	uxtb	r3, r3
 800227c:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 800227e:	7e3b      	ldrb	r3, [r7, #24]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 8002286:	7e3b      	ldrb	r3, [r7, #24]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d119      	bne.n	80022c0 <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8002292:	78bb      	ldrb	r3, [r7, #2]
 8002294:	429a      	cmp	r2, r3
 8002296:	d838      	bhi.n	800230a <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800229e:	78bb      	ldrb	r3, [r7, #2]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d934      	bls.n	800230e <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022b0:	1c79      	adds	r1, r7, #1
 80022b2:	1cf8      	adds	r0, r7, #3
 80022b4:	f7ff ff44 	bl	8002140 <u8g2_clip_intersection2>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d119      	bne.n	80022f2 <u8g2_DrawHVLine+0xd6>
	  return;
 80022be:	e02d      	b.n	800231c <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80022c6:	78fb      	ldrb	r3, [r7, #3]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d822      	bhi.n	8002312 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80022d2:	78fb      	ldrb	r3, [r7, #3]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d91e      	bls.n	8002316 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022e4:	1c79      	adds	r1, r7, #1
 80022e6:	1cb8      	adds	r0, r7, #2
 80022e8:	f7ff ff2a 	bl	8002140 <u8g2_clip_intersection2>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d013      	beq.n	800231a <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	689c      	ldr	r4, [r3, #8]
 80022f8:	78f9      	ldrb	r1, [r7, #3]
 80022fa:	78ba      	ldrb	r2, [r7, #2]
 80022fc:	7878      	ldrb	r0, [r7, #1]
 80022fe:	7e3b      	ldrb	r3, [r7, #24]
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	4603      	mov	r3, r0
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	47a0      	blx	r4
 8002308:	e008      	b.n	800231c <u8g2_DrawHVLine+0x100>
	  return;
 800230a:	bf00      	nop
 800230c:	e006      	b.n	800231c <u8g2_DrawHVLine+0x100>
	  return;
 800230e:	bf00      	nop
 8002310:	e004      	b.n	800231c <u8g2_DrawHVLine+0x100>
	  return;
 8002312:	bf00      	nop
 8002314:	e002      	b.n	800231c <u8g2_DrawHVLine+0x100>
	  return;
 8002316:	bf00      	nop
 8002318:	e000      	b.n	800231c <u8g2_DrawHVLine+0x100>
	  return;
 800231a:	bf00      	nop
    }
}
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	bd90      	pop	{r4, r7, pc}

08002322 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b084      	sub	sp, #16
 8002326:	af02      	add	r7, sp, #8
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	4608      	mov	r0, r1
 800232c:	4611      	mov	r1, r2
 800232e:	461a      	mov	r2, r3
 8002330:	4603      	mov	r3, r0
 8002332:	70fb      	strb	r3, [r7, #3]
 8002334:	460b      	mov	r3, r1
 8002336:	70bb      	strb	r3, [r7, #2]
 8002338:	4613      	mov	r3, r2
 800233a:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 800233c:	7878      	ldrb	r0, [r7, #1]
 800233e:	78ba      	ldrb	r2, [r7, #2]
 8002340:	78f9      	ldrb	r1, [r7, #3]
 8002342:	2300      	movs	r3, #0
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	4603      	mov	r3, r0
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ff67 	bl	800221c <u8g2_DrawHVLine>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b084      	sub	sp, #16
 800235a:	af02      	add	r7, sp, #8
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	4608      	mov	r0, r1
 8002360:	4611      	mov	r1, r2
 8002362:	461a      	mov	r2, r3
 8002364:	4603      	mov	r3, r0
 8002366:	70fb      	strb	r3, [r7, #3]
 8002368:	460b      	mov	r3, r1
 800236a:	70bb      	strb	r3, [r7, #2]
 800236c:	4613      	mov	r3, r2
 800236e:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 8002370:	7878      	ldrb	r0, [r7, #1]
 8002372:	78ba      	ldrb	r2, [r7, #2]
 8002374:	78f9      	ldrb	r1, [r7, #3]
 8002376:	2301      	movs	r3, #1
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	4603      	mov	r3, r0
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7ff ff4d 	bl	800221c <u8g2_DrawHVLine>
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b084      	sub	sp, #16
 800238e:	af02      	add	r7, sp, #8
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	460b      	mov	r3, r1
 8002394:	70fb      	strb	r3, [r7, #3]
 8002396:	4613      	mov	r3, r2
 8002398:	70bb      	strb	r3, [r7, #2]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80023a0:	78ba      	ldrb	r2, [r7, #2]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d31a      	bcc.n	80023dc <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023ac:	78ba      	ldrb	r2, [r7, #2]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d216      	bcs.n	80023e0 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023b8:	78fa      	ldrb	r2, [r7, #3]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d312      	bcc.n	80023e4 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80023c4:	78fa      	ldrb	r2, [r7, #3]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d20e      	bcs.n	80023e8 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80023ca:	78ba      	ldrb	r2, [r7, #2]
 80023cc:	78f9      	ldrb	r1, [r7, #3]
 80023ce:	2300      	movs	r3, #0
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	2301      	movs	r3, #1
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff ff21 	bl	800221c <u8g2_DrawHVLine>
 80023da:	e006      	b.n	80023ea <u8g2_DrawPixel+0x60>
    return;
 80023dc:	bf00      	nop
 80023de:	e004      	b.n	80023ea <u8g2_DrawPixel+0x60>
    return;
 80023e0:	bf00      	nop
 80023e2:	e002      	b.n	80023ea <u8g2_DrawPixel+0x60>
    return;
 80023e4:	bf00      	nop
 80023e6:	e000      	b.n	80023ea <u8g2_DrawPixel+0x60>
    return;
 80023e8:	bf00      	nop
}
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	78fa      	ldrb	r2, [r7, #3]
 8002400:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  if ( color >= 3 )
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d903      	bls.n	8002412 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 800241c:	b490      	push	{r4, r7}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	4604      	mov	r4, r0
 8002424:	4608      	mov	r0, r1
 8002426:	4611      	mov	r1, r2
 8002428:	461a      	mov	r2, r3
 800242a:	4623      	mov	r3, r4
 800242c:	71fb      	strb	r3, [r7, #7]
 800242e:	4603      	mov	r3, r0
 8002430:	71bb      	strb	r3, [r7, #6]
 8002432:	460b      	mov	r3, r1
 8002434:	717b      	strb	r3, [r7, #5]
 8002436:	4613      	mov	r3, r2
 8002438:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 800243a:	797a      	ldrb	r2, [r7, #5]
 800243c:	79bb      	ldrb	r3, [r7, #6]
 800243e:	429a      	cmp	r2, r3
 8002440:	d20d      	bcs.n	800245e <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8002442:	793a      	ldrb	r2, [r7, #4]
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	429a      	cmp	r2, r3
 8002448:	d901      	bls.n	800244e <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 800244a:	2301      	movs	r3, #1
 800244c:	e014      	b.n	8002478 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800244e:	797a      	ldrb	r2, [r7, #5]
 8002450:	793b      	ldrb	r3, [r7, #4]
 8002452:	429a      	cmp	r2, r3
 8002454:	d901      	bls.n	800245a <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8002456:	2301      	movs	r3, #1
 8002458:	e00e      	b.n	8002478 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800245a:	2300      	movs	r3, #0
 800245c:	e00c      	b.n	8002478 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800245e:	793a      	ldrb	r2, [r7, #4]
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	429a      	cmp	r2, r3
 8002464:	d907      	bls.n	8002476 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8002466:	797a      	ldrb	r2, [r7, #5]
 8002468:	793b      	ldrb	r3, [r7, #4]
 800246a:	429a      	cmp	r2, r3
 800246c:	d901      	bls.n	8002472 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 800246e:	2301      	movs	r3, #1
 8002470:	e002      	b.n	8002478 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002472:	2300      	movs	r3, #0
 8002474:	e000      	b.n	8002478 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8002476:	2300      	movs	r3, #0
    }
  }
}
 8002478:	4618      	mov	r0, r3
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bc90      	pop	{r4, r7}
 8002480:	4770      	bx	lr

08002482 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	4608      	mov	r0, r1
 800248c:	4611      	mov	r1, r2
 800248e:	461a      	mov	r2, r3
 8002490:	4603      	mov	r3, r0
 8002492:	70fb      	strb	r3, [r7, #3]
 8002494:	460b      	mov	r3, r1
 8002496:	70bb      	strb	r3, [r7, #2]
 8002498:	4613      	mov	r3, r2
 800249a:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 80024a8:	7c3b      	ldrb	r3, [r7, #16]
 80024aa:	78ba      	ldrb	r2, [r7, #2]
 80024ac:	f7ff ffb6 	bl	800241c <u8g2_is_intersection_decision_tree>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <u8g2_IsIntersection+0x38>
    return 0; 
 80024b6:	2300      	movs	r3, #0
 80024b8:	e00a      	b.n	80024d0 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 0041 	ldrb.w	r0, [r3, #65]	; 0x41
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 80024c6:	787b      	ldrb	r3, [r7, #1]
 80024c8:	78fa      	ldrb	r2, [r7, #3]
 80024ca:	f7ff ffa7 	bl	800241c <u8g2_is_intersection_decision_tree>
 80024ce:	4603      	mov	r3, r0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80024d8:	b480      	push	{r7}
 80024da:	b087      	sub	sp, #28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	4608      	mov	r0, r1
 80024e2:	4611      	mov	r1, r2
 80024e4:	461a      	mov	r2, r3
 80024e6:	4603      	mov	r3, r0
 80024e8:	70fb      	strb	r3, [r7, #3]
 80024ea:	460b      	mov	r3, r1
 80024ec:	70bb      	strb	r3, [r7, #2]
 80024ee:	4613      	mov	r3, r2
 80024f0:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80024f2:	78bb      	ldrb	r3, [r7, #2]
 80024f4:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80024f6:	7cfb      	ldrb	r3, [r7, #19]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 80024fe:	2301      	movs	r3, #1
 8002500:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 8002502:	7c3a      	ldrb	r2, [r7, #16]
 8002504:	7cfb      	ldrb	r3, [r7, #19]
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800251a:	2b01      	cmp	r3, #1
 800251c:	d801      	bhi.n	8002522 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 800251e:	7c3b      	ldrb	r3, [r7, #16]
 8002520:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8002528:	2b01      	cmp	r3, #1
 800252a:	d001      	beq.n	8002530 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 800252c:	7c3b      	ldrb	r3, [r7, #16]
 800252e:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002530:	78bb      	ldrb	r3, [r7, #2]
 8002532:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 8002534:	89fb      	ldrh	r3, [r7, #14]
 8002536:	f023 0307 	bic.w	r3, r3, #7
 800253a:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	7c1b      	ldrb	r3, [r3, #16]
 8002542:	b29b      	uxth	r3, r3
 8002544:	89fa      	ldrh	r2, [r7, #14]
 8002546:	fb02 f303 	mul.w	r3, r2, r3
 800254a:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002550:	617b      	str	r3, [r7, #20]
  ptr += offset;
 8002552:	89fb      	ldrh	r3, [r7, #14]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	4413      	add	r3, r2
 8002558:	617b      	str	r3, [r7, #20]
  ptr += x;
 800255a:	78fb      	ldrb	r3, [r7, #3]
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	4413      	add	r3, r2
 8002560:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 8002562:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d117      	bne.n	800259a <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	781a      	ldrb	r2, [r3, #0]
 800256e:	7cbb      	ldrb	r3, [r7, #18]
 8002570:	4313      	orrs	r3, r2
 8002572:	b2da      	uxtb	r2, r3
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	781a      	ldrb	r2, [r3, #0]
 800257c:	7c7b      	ldrb	r3, [r7, #17]
 800257e:	4053      	eors	r3, r2
 8002580:	b2da      	uxtb	r2, r3
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	701a      	strb	r2, [r3, #0]
	ptr++;
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	3301      	adds	r3, #1
 800258a:	617b      	str	r3, [r7, #20]
	len--;
 800258c:	787b      	ldrb	r3, [r7, #1]
 800258e:	3b01      	subs	r3, #1
 8002590:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 8002592:	787b      	ldrb	r3, [r7, #1]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1e8      	bne.n	800256a <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002598:	e039      	b.n	800260e <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	781a      	ldrb	r2, [r3, #0]
 800259e:	7cbb      	ldrb	r3, [r7, #18]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	781a      	ldrb	r2, [r3, #0]
 80025ac:	7c7b      	ldrb	r3, [r7, #17]
 80025ae:	4053      	eors	r3, r2
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80025b6:	7cfb      	ldrb	r3, [r7, #19]
 80025b8:	3301      	adds	r3, #1
 80025ba:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 80025bc:	7cfb      	ldrb	r3, [r7, #19]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	74fb      	strb	r3, [r7, #19]
      len--;
 80025c4:	787b      	ldrb	r3, [r7, #1]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 80025ca:	7cfb      	ldrb	r3, [r7, #19]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d115      	bne.n	80025fc <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80025d6:	461a      	mov	r2, r3
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	4413      	add	r3, r2
 80025dc:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d801      	bhi.n	80025ec <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 80025e8:	2301      	movs	r3, #1
 80025ea:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d008      	beq.n	8002608 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 80025f6:	2301      	movs	r3, #1
 80025f8:	747b      	strb	r3, [r7, #17]
 80025fa:	e005      	b.n	8002608 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 80025fc:	7cbb      	ldrb	r3, [r7, #18]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 8002602:	7c7b      	ldrb	r3, [r7, #17]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 8002608:	787b      	ldrb	r3, [r7, #1]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1c5      	bne.n	800259a <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800260e:	bf00      	nop
 8002610:	371c      	adds	r7, #28
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->clip_y0 = 0;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	22ff      	movs	r2, #255	; 0xff
 8002634:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	22ff      	movs	r2, #255	; 0xff
 800263c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  u8g2->cb->update_page_win(u8g2);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	4798      	blx	r3
}
 800264a:	bf00      	nop
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b084      	sub	sp, #16
 8002656:	af00      	add	r7, sp, #0
 8002658:	60f8      	str	r0, [r7, #12]
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	603b      	str	r3, [r7, #0]
 800265e:	4613      	mov	r3, r2
 8002660:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	64da      	str	r2, [r3, #76]	; 0x4c
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	79fa      	ldrb	r2, [r7, #7]
 8002678:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
  u8g2->bitmap_transparency = 0;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  
  u8g2->draw_color = 1;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->is_auto_page_clear = 1;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  
  u8g2->cb = u8g2_cb;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f7ff ffaf 	bl	8002618 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f7ff fcb4 	bl	8002028 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
#endif
}
 80026c8:	bf00      	nop
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026e4:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80026e6:	7bfb      	ldrb	r3, [r7, #15]
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	7bfa      	ldrb	r2, [r7, #15]
 80026f0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  
  t = display_info->tile_width;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	7c1b      	ldrb	r3, [r3, #16]
 80026f8:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	2b1f      	cmp	r3, #31
 80026fe:	d901      	bls.n	8002704 <u8g2_update_dimension_common+0x34>
    t = 31;
 8002700:	231f      	movs	r3, #31
 8002702:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	7bfa      	ldrb	r2, [r7, #15]
 800270e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002718:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800271a:	7bfb      	ldrb	r3, [r7, #15]
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  t = u8g2->tile_buf_height;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800272e:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8002738:	4413      	add	r3, r2
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	7c52      	ldrb	r2, [r2, #17]
 800273e:	4293      	cmp	r3, r2
 8002740:	dd06      	ble.n	8002750 <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	7c5a      	ldrb	r2, [r3, #17]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8002750:	7bfb      	ldrb	r3, [r7, #15]
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->buf_y1 = u8g2->buf_y0;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  u8g2->buf_y1 += t;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	4413      	add	r3, r2
 8002778:	b2da      	uxtb	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	22f0      	movs	r2, #240	; 0xf0
 8002784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  if ( display_info->pixel_width <= 240 )
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	8a9b      	ldrh	r3, [r3, #20]
 800278c:	2bf0      	cmp	r3, #240	; 0xf0
 800278e:	d805      	bhi.n	800279c <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	8a9b      	ldrh	r3, [r3, #20]
 8002794:	b2da      	uxtb	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  u8g2->height = display_info->pixel_height;
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	8adb      	ldrh	r3, [r3, #22]
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#endif

}
 80027a8:	bf00      	nop
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b084      	sub	sp, #16
 80027b6:	af02      	add	r7, sp, #8
 80027b8:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 0046 	ldrb.w	r0, [r3, #70]	; 0x46
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	4603      	mov	r3, r0
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff fe53 	bl	8002482 <u8g2_IsIntersection>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d104      	bne.n	80027ec <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80027ea:	e03b      	b.n	8002864 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002800:	429a      	cmp	r2, r3
 8002802:	d205      	bcs.n	8002810 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800281c:	429a      	cmp	r2, r3
 800281e:	d905      	bls.n	800282c <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002838:	429a      	cmp	r2, r3
 800283a:	d205      	bcs.n	8002848 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002854:	429a      	cmp	r2, r3
 8002856:	d905      	bls.n	8002864 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8002864:	bf00      	nop
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7ff ff2b 	bl	80026d0 <u8g2_update_dimension_common>
}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b082      	sub	sp, #8
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = u8g2->buf_y0;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->buf_y1;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff ff7b 	bl	80027b2 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80028bc:	bf00      	nop
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <u8g2_update_dimension_r1>:


void u8g2_update_dimension_r1(u8g2_t *u8g2)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff feff 	bl	80026d0 <u8g2_update_dimension_common>
  
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	8a9b      	ldrh	r3, [r3, #20]
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	8adb      	ldrh	r3, [r3, #22]
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <u8g2_update_page_win_r1>:

void u8g2_update_page_win_r1(u8g2_t *u8g2)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = u8g2->buf_y0;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->buf_y1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = 0;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height;	/* pixel_buf_width replaced with height (which is the real pixel width) */
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7ff ff41 	bl	80027b2 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002930:	bf00      	nop
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <u8g2_update_dimension_r2>:

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff fec5 	bl	80026d0 <u8g2_update_dimension_common>
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( u8g2->height >= u8g2->buf_y1 )
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800297e:	429a      	cmp	r2, r3
 8002980:	d30a      	bcc.n	8002998 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	b2da      	uxtb	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff feff 	bl	80027b2 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80029b4:	bf00      	nop
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <u8g2_update_dimension_r3>:


void u8g2_update_dimension_r3(u8g2_t *u8g2)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff fe83 	bl	80026d0 <u8g2_update_dimension_common>
  
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	8a9b      	ldrh	r3, [r3, #20]
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	8adb      	ldrh	r3, [r3, #22]
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <u8g2_update_page_win_r3>:

void u8g2_update_page_win_r3(u8g2_t *u8g2)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->width */
  u8g2->user_x0 = 0;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  if ( u8g2->width >= u8g2->buf_y1 )
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d30a      	bcc.n	8002a24 <u8g2_update_page_win_r3+0x36>
    u8g2->user_x0 = u8g2->width - u8g2->buf_y1;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width - u8g2->buf_y0;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = 0;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height;	/* pixel_buf_width replaced with height (pixel_width) */
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff feaf 	bl	80027b2 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002a54:	bf00      	nop
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	4608      	mov	r0, r1
 8002a66:	4611      	mov	r1, r2
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	70fb      	strb	r3, [r7, #3]
 8002a6e:	460b      	mov	r3, r1
 8002a70:	70bb      	strb	r3, [r7, #2]
 8002a72:	4613      	mov	r3, r2
 8002a74:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002a76:	7878      	ldrb	r0, [r7, #1]
 8002a78:	78ba      	ldrb	r2, [r7, #2]
 8002a7a:	78f9      	ldrb	r1, [r7, #3]
 8002a7c:	7c3b      	ldrb	r3, [r7, #16]
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	4603      	mov	r3, r0
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff fba9 	bl	80021da <u8g2_draw_hv_line_2dir>
}
 8002a88:	bf00      	nop
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <u8g2_draw_l90_r1>:
  u8g2_draw_hv_line_2dir(u8g2, xx, y, len, dir);
}

/* dir = 0 or 1 */
void u8g2_draw_l90_r1(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af02      	add	r7, sp, #8
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	4608      	mov	r0, r1
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	70fb      	strb	r3, [r7, #3]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	70bb      	strb	r3, [r7, #2]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	707b      	strb	r3, [r7, #1]

#ifdef __unix
  assert( dir <= 1 );
#endif
  
  yy = x;
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	73bb      	strb	r3, [r7, #14]
  
  xx = u8g2->height;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ab4:	73fb      	strb	r3, [r7, #15]
  xx -= y;
 8002ab6:	7bfa      	ldrb	r2, [r7, #15]
 8002ab8:	78bb      	ldrb	r3, [r7, #2]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	73fb      	strb	r3, [r7, #15]
  xx--;
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
  
  dir ++;
 8002ac4:	7e3b      	ldrb	r3, [r7, #24]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	763b      	strb	r3, [r7, #24]
  if ( dir == 2 )
 8002aca:	7e3b      	ldrb	r3, [r7, #24]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d108      	bne.n	8002ae2 <u8g2_draw_l90_r1+0x52>
  {
    xx -= len;
 8002ad0:	7bfa      	ldrb	r2, [r7, #15]
 8002ad2:	787b      	ldrb	r3, [r7, #1]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	73fb      	strb	r3, [r7, #15]
    xx++;
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
 8002ada:	3301      	adds	r3, #1
 8002adc:	73fb      	strb	r3, [r7, #15]
    dir = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	763b      	strb	r3, [r7, #24]
  }
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002ae2:	7878      	ldrb	r0, [r7, #1]
 8002ae4:	7bba      	ldrb	r2, [r7, #14]
 8002ae6:	7bf9      	ldrb	r1, [r7, #15]
 8002ae8:	7e3b      	ldrb	r3, [r7, #24]
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	4603      	mov	r3, r0
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff fb73 	bl	80021da <u8g2_draw_hv_line_2dir>
}
 8002af4:	bf00      	nop
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <u8g2_draw_l90_r2>:

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	4608      	mov	r0, r1
 8002b06:	4611      	mov	r1, r2
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	70fb      	strb	r3, [r7, #3]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	70bb      	strb	r3, [r7, #2]
 8002b12:	4613      	mov	r3, r2
 8002b14:	707b      	strb	r3, [r7, #1]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b1c:	73bb      	strb	r3, [r7, #14]
  yy -= y;
 8002b1e:	7bba      	ldrb	r2, [r7, #14]
 8002b20:	78bb      	ldrb	r3, [r7, #2]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	73bb      	strb	r3, [r7, #14]
  
  xx = u8g2->width;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b2c:	73fb      	strb	r3, [r7, #15]
  xx -= x;
 8002b2e:	7bfa      	ldrb	r2, [r7, #15]
 8002b30:	78fb      	ldrb	r3, [r7, #3]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	73fb      	strb	r3, [r7, #15]
  
  if ( dir == 0 )
 8002b36:	7e3b      	ldrb	r3, [r7, #24]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d107      	bne.n	8002b4c <u8g2_draw_l90_r2+0x50>
  {
    yy--;
 8002b3c:	7bbb      	ldrb	r3, [r7, #14]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	73bb      	strb	r3, [r7, #14]
    xx -= len;
 8002b42:	7bfa      	ldrb	r2, [r7, #15]
 8002b44:	787b      	ldrb	r3, [r7, #1]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	73fb      	strb	r3, [r7, #15]
 8002b4a:	e009      	b.n	8002b60 <u8g2_draw_l90_r2+0x64>
  }
  else if ( dir == 1 )
 8002b4c:	7e3b      	ldrb	r3, [r7, #24]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d106      	bne.n	8002b60 <u8g2_draw_l90_r2+0x64>
  {
    xx--;
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
 8002b54:	3b01      	subs	r3, #1
 8002b56:	73fb      	strb	r3, [r7, #15]
    yy -= len;
 8002b58:	7bba      	ldrb	r2, [r7, #14]
 8002b5a:	787b      	ldrb	r3, [r7, #1]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	73bb      	strb	r3, [r7, #14]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002b60:	7878      	ldrb	r0, [r7, #1]
 8002b62:	7bba      	ldrb	r2, [r7, #14]
 8002b64:	7bf9      	ldrb	r1, [r7, #15]
 8002b66:	7e3b      	ldrb	r3, [r7, #24]
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7ff fb34 	bl	80021da <u8g2_draw_hv_line_2dir>
}
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <u8g2_draw_l90_r3>:

void u8g2_draw_l90_r3(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b086      	sub	sp, #24
 8002b7e:	af02      	add	r7, sp, #8
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	4608      	mov	r0, r1
 8002b84:	4611      	mov	r1, r2
 8002b86:	461a      	mov	r2, r3
 8002b88:	4603      	mov	r3, r0
 8002b8a:	70fb      	strb	r3, [r7, #3]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	70bb      	strb	r3, [r7, #2]
 8002b90:	4613      	mov	r3, r2
 8002b92:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xx, yy;

  xx = y;
 8002b94:	78bb      	ldrb	r3, [r7, #2]
 8002b96:	73bb      	strb	r3, [r7, #14]
  
  yy = u8g2->width;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b9e:	73fb      	strb	r3, [r7, #15]
  yy -= x;
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	78fb      	ldrb	r3, [r7, #3]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	73fb      	strb	r3, [r7, #15]
  
  if ( dir == 0 )
 8002ba8:	7e3b      	ldrb	r3, [r7, #24]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10c      	bne.n	8002bc8 <u8g2_draw_l90_r3+0x4e>
  {
    yy--;
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	73fb      	strb	r3, [r7, #15]
    yy -= len;
 8002bb4:	7bfa      	ldrb	r2, [r7, #15]
 8002bb6:	787b      	ldrb	r3, [r7, #1]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	73fb      	strb	r3, [r7, #15]
    yy++;
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	73fb      	strb	r3, [r7, #15]
    dir = 1;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	763b      	strb	r3, [r7, #24]
 8002bc6:	e004      	b.n	8002bd2 <u8g2_draw_l90_r3+0x58>
  }
  else
  {
    yy--;
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	73fb      	strb	r3, [r7, #15]
    dir = 0;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	763b      	strb	r3, [r7, #24]
  }
  
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002bd2:	7878      	ldrb	r0, [r7, #1]
 8002bd4:	7bfa      	ldrb	r2, [r7, #15]
 8002bd6:	7bb9      	ldrb	r1, [r7, #14]
 8002bd8:	7e3b      	ldrb	r3, [r7, #24]
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	4603      	mov	r3, r0
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff fafb 	bl	80021da <u8g2_draw_hv_line_2dir>
}
 8002be4:	bf00      	nop
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr

08002c06 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
 8002c0e:	460b      	mov	r3, r1
 8002c10:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8002c12:	78fb      	ldrb	r3, [r7, #3]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d002      	beq.n	8002c1e <u8x8_ascii_next+0x18>
 8002c18:	78fb      	ldrb	r3, [r7, #3]
 8002c1a:	2b0a      	cmp	r3, #10
 8002c1c:	d102      	bne.n	8002c24 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8002c1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c22:	e001      	b.n	8002c28 <u8x8_ascii_next+0x22>
  return b;
 8002c24:	78fb      	ldrb	r3, [r7, #3]
 8002c26:	b29b      	uxth	r3, r3
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr

08002c32 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8002c32:	b590      	push	{r4, r7, lr}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691c      	ldr	r4, [r3, #16]
 8002c42:	78fa      	ldrb	r2, [r7, #3]
 8002c44:	2300      	movs	r3, #0
 8002c46:	2120      	movs	r1, #32
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	47a0      	blx	r4
 8002c4c:	4603      	mov	r3, r0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd90      	pop	{r4, r7, pc}

08002c56 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002c56:	b590      	push	{r4, r7, lr}
 8002c58:	b085      	sub	sp, #20
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	60f8      	str	r0, [r7, #12]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	607a      	str	r2, [r7, #4]
 8002c62:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	691c      	ldr	r4, [r3, #16]
 8002c68:	7afa      	ldrb	r2, [r7, #11]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2117      	movs	r1, #23
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	47a0      	blx	r4
 8002c72:	4603      	mov	r3, r0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd90      	pop	{r4, r7, pc}

08002c7c <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	460b      	mov	r3, r1
 8002c86:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002c88:	1cfb      	adds	r3, r7, #3
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7ff ffe1 	bl	8002c56 <u8x8_byte_SendBytes>
 8002c94:	4603      	mov	r3, r0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002c9e:	b590      	push	{r4, r7, lr}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68dc      	ldr	r4, [r3, #12]
 8002cae:	78fa      	ldrb	r2, [r7, #3]
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	2115      	movs	r1, #21
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	47a0      	blx	r4
 8002cb8:	4603      	mov	r3, r0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd90      	pop	{r4, r7, pc}

08002cc2 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002cc2:	b590      	push	{r4, r7, lr}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68dc      	ldr	r4, [r3, #12]
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	2116      	movs	r1, #22
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	47a0      	blx	r4
 8002cdc:	4603      	mov	r3, r0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd90      	pop	{r4, r7, pc}

08002ce6 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002ce6:	b590      	push	{r4, r7, lr}
 8002ce8:	b085      	sub	sp, #20
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	460b      	mov	r3, r1
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	68dc      	ldr	r4, [r3, #12]
 8002cf8:	7afa      	ldrb	r2, [r7, #11]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2117      	movs	r1, #23
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	47a0      	blx	r4
 8002d02:	4603      	mov	r3, r0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd90      	pop	{r4, r7, pc}

08002d0c <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68dc      	ldr	r4, [r3, #12]
 8002d18:	2300      	movs	r3, #0
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2118      	movs	r1, #24
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	47a0      	blx	r4
 8002d22:	4603      	mov	r3, r0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd90      	pop	{r4, r7, pc}

08002d2c <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8002d2c:	b590      	push	{r4, r7, lr}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68dc      	ldr	r4, [r3, #12]
 8002d38:	2300      	movs	r3, #0
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2119      	movs	r1, #25
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	47a0      	blx	r4
 8002d42:	4603      	mov	r3, r0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd90      	pop	{r4, r7, pc}

08002d4c <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8002d4c:	b590      	push	{r4, r7, lr}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	73fb      	strb	r3, [r7, #15]
    data++;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	2b17      	cmp	r3, #23
 8002d66:	d017      	beq.n	8002d98 <u8x8_cad_SendSequence+0x4c>
 8002d68:	2b17      	cmp	r3, #23
 8002d6a:	dc02      	bgt.n	8002d72 <u8x8_cad_SendSequence+0x26>
 8002d6c:	2b15      	cmp	r3, #21
 8002d6e:	db37      	blt.n	8002de0 <u8x8_cad_SendSequence+0x94>
 8002d70:	e004      	b.n	8002d7c <u8x8_cad_SendSequence+0x30>
 8002d72:	2b19      	cmp	r3, #25
 8002d74:	dd1e      	ble.n	8002db4 <u8x8_cad_SendSequence+0x68>
 8002d76:	2bfe      	cmp	r3, #254	; 0xfe
 8002d78:	d024      	beq.n	8002dc4 <u8x8_cad_SendSequence+0x78>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8002d7a:	e031      	b.n	8002de0 <u8x8_cad_SendSequence+0x94>
	  v = *data;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68dc      	ldr	r4, [r3, #12]
 8002d86:	7bba      	ldrb	r2, [r7, #14]
 8002d88:	7bf9      	ldrb	r1, [r7, #15]
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	47a0      	blx	r4
	  data++;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	3301      	adds	r3, #1
 8002d94:	603b      	str	r3, [r7, #0]
	  break;
 8002d96:	e022      	b.n	8002dde <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002d9e:	f107 030e 	add.w	r3, r7, #14
 8002da2:	461a      	mov	r2, r3
 8002da4:	2101      	movs	r1, #1
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7ff ff9d 	bl	8002ce6 <u8x8_cad_SendData>
	  data++;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	3301      	adds	r3, #1
 8002db0:	603b      	str	r3, [r7, #0]
	  break;
 8002db2:	e014      	b.n	8002dde <u8x8_cad_SendSequence+0x92>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68dc      	ldr	r4, [r3, #12]
 8002db8:	7bf9      	ldrb	r1, [r7, #15]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	47a0      	blx	r4
	  break;
 8002dc2:	e00c      	b.n	8002dde <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002dca:	7bbb      	ldrb	r3, [r7, #14]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	2129      	movs	r1, #41	; 0x29
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f9d7 	bl	8003184 <u8x8_gpio_call>
	  data++;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	603b      	str	r3, [r7, #0]
	  break;
 8002ddc:	bf00      	nop
    cmd = *data;
 8002dde:	e7ba      	b.n	8002d56 <u8x8_cad_SendSequence+0xa>
	return;
 8002de0:	bf00      	nop
    }
  }
}
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd90      	pop	{r4, r7, pc}

08002de8 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002de8:	b590      	push	{r4, r7, lr}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	607b      	str	r3, [r7, #4]
 8002df2:	460b      	mov	r3, r1
 8002df4:	72fb      	strb	r3, [r7, #11]
 8002df6:	4613      	mov	r3, r2
 8002df8:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8002dfa:	7afb      	ldrb	r3, [r7, #11]
 8002dfc:	3b14      	subs	r3, #20
 8002dfe:	2b05      	cmp	r3, #5
 8002e00:	d82f      	bhi.n	8002e62 <u8x8_cad_001+0x7a>
 8002e02:	a201      	add	r2, pc, #4	; (adr r2, 8002e08 <u8x8_cad_001+0x20>)
 8002e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e08:	08002e51 	.word	0x08002e51
 8002e0c:	08002e21 	.word	0x08002e21
 8002e10:	08002e35 	.word	0x08002e35
 8002e14:	08002e49 	.word	0x08002e49
 8002e18:	08002e51 	.word	0x08002e51
 8002e1c:	08002e51 	.word	0x08002e51
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8002e20:	2100      	movs	r1, #0
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f7ff ff05 	bl	8002c32 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002e28:	7abb      	ldrb	r3, [r7, #10]
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f7ff ff25 	bl	8002c7c <u8x8_byte_SendByte>
      break;
 8002e32:	e018      	b.n	8002e66 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8002e34:	2100      	movs	r1, #0
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f7ff fefb 	bl	8002c32 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002e3c:	7abb      	ldrb	r3, [r7, #10]
 8002e3e:	4619      	mov	r1, r3
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f7ff ff1b 	bl	8002c7c <u8x8_byte_SendByte>
      break;
 8002e46:	e00e      	b.n	8002e66 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8002e48:	2101      	movs	r1, #1
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f7ff fef1 	bl	8002c32 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	691c      	ldr	r4, [r3, #16]
 8002e54:	7aba      	ldrb	r2, [r7, #10]
 8002e56:	7af9      	ldrb	r1, [r7, #11]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	47a0      	blx	r4
 8002e5e:	4603      	mov	r3, r0
 8002e60:	e002      	b.n	8002e68 <u8x8_cad_001+0x80>
    default:
      return 0;
 8002e62:	2300      	movs	r3, #0
 8002e64:	e000      	b.n	8002e68 <u8x8_cad_001+0x80>
  }
  return 1;
 8002e66:	2301      	movs	r3, #1
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd90      	pop	{r4, r7, pc}

08002e70 <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	607b      	str	r3, [r7, #4]
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	72fb      	strb	r3, [r7, #11]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002e82:	7afb      	ldrb	r3, [r7, #11]
 8002e84:	2b0e      	cmp	r3, #14
 8002e86:	d05f      	beq.n	8002f48 <u8x8_d_st7565_common+0xd8>
 8002e88:	2b0f      	cmp	r3, #15
 8002e8a:	d002      	beq.n	8002e92 <u8x8_d_st7565_common+0x22>
 8002e8c:	2b0b      	cmp	r3, #11
 8002e8e:	d04e      	beq.n	8002f2e <u8x8_d_st7565_common+0xbe>
 8002e90:	e06c      	b.n	8002f6c <u8x8_d_st7565_common+0xfc>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f7ff ff3a 	bl	8002d0c <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	795b      	ldrb	r3, [r3, #5]
 8002e9c:	75bb      	strb	r3, [r7, #22]
      x *= 8;
 8002e9e:	7dbb      	ldrb	r3, [r7, #22]
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	75bb      	strb	r3, [r7, #22]
      x += u8x8->x_offset;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002eaa:	7dbb      	ldrb	r3, [r7, #22]
 8002eac:	4413      	add	r3, r2
 8002eae:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002eb0:	7dbb      	ldrb	r3, [r7, #22]
 8002eb2:	091b      	lsrs	r3, r3, #4
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	f043 0310 	orr.w	r3, r3, #16
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f7ff feed 	bl	8002c9e <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8002ec4:	7dbb      	ldrb	r3, [r7, #22]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	4619      	mov	r1, r3
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f7ff fee5 	bl	8002c9e <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	799b      	ldrb	r3, [r3, #6]
 8002ed8:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	4619      	mov	r1, r3
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f7ff fedc 	bl	8002c9e <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	791b      	ldrb	r3, [r3, #4]
 8002eea:	75fb      	strb	r3, [r7, #23]
      c *= 8;
 8002eec:	7dfb      	ldrb	r3, [r7, #23]
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	613b      	str	r3, [r7, #16]
      /* 
	The following if condition checks the hardware limits of the st7565 
	controller: It is not allowed to write beyond the display limits.
	This is in fact an issue within flip mode.
      */
      if ( c + x > 132u )
 8002ef8:	7dfa      	ldrb	r2, [r7, #23]
 8002efa:	7dbb      	ldrb	r3, [r7, #22]
 8002efc:	4413      	add	r3, r2
 8002efe:	2b84      	cmp	r3, #132	; 0x84
 8002f00:	d905      	bls.n	8002f0e <u8x8_d_st7565_common+0x9e>
      {
	c = 132u;
 8002f02:	2384      	movs	r3, #132	; 0x84
 8002f04:	75fb      	strb	r3, [r7, #23]
	c -= x;
 8002f06:	7dfa      	ldrb	r2, [r7, #23]
 8002f08:	7dbb      	ldrb	r3, [r7, #22]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	75fb      	strb	r3, [r7, #23]
      }
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 8002f0e:	7dfb      	ldrb	r3, [r7, #23]
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	4619      	mov	r1, r3
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f7ff fee6 	bl	8002ce6 <u8x8_cad_SendData>
	arg_int--;
 8002f1a:	7abb      	ldrb	r3, [r7, #10]
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8002f20:	7abb      	ldrb	r3, [r7, #10]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f3      	bne.n	8002f0e <u8x8_d_st7565_common+0x9e>
      
      u8x8_cad_EndTransfer(u8x8);
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f7ff ff00 	bl	8002d2c <u8x8_cad_EndTransfer>
      break;
 8002f2c:	e020      	b.n	8002f70 <u8x8_d_st7565_common+0x100>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8002f2e:	7abb      	ldrb	r3, [r7, #10]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d104      	bne.n	8002f3e <u8x8_d_st7565_common+0xce>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 8002f34:	4911      	ldr	r1, [pc, #68]	; (8002f7c <u8x8_d_st7565_common+0x10c>)
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f7ff ff08 	bl	8002d4c <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
      break;
 8002f3c:	e018      	b.n	8002f70 <u8x8_d_st7565_common+0x100>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 8002f3e:	4910      	ldr	r1, [pc, #64]	; (8002f80 <u8x8_d_st7565_common+0x110>)
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f7ff ff03 	bl	8002d4c <u8x8_cad_SendSequence>
      break;
 8002f46:	e013      	b.n	8002f70 <u8x8_d_st7565_common+0x100>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f7ff fedf 	bl	8002d0c <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8002f4e:	2181      	movs	r1, #129	; 0x81
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f7ff fea4 	bl	8002c9e <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 8002f56:	7abb      	ldrb	r3, [r7, #10]
 8002f58:	089b      	lsrs	r3, r3, #2
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f7ff feaf 	bl	8002cc2 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f7ff fee1 	bl	8002d2c <u8x8_cad_EndTransfer>
      break;
 8002f6a:	e001      	b.n	8002f70 <u8x8_d_st7565_common+0x100>
#endif
    default:
      return 0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	e000      	b.n	8002f72 <u8x8_d_st7565_common+0x102>
  }
  return 1;
 8002f70:	2301      	movs	r3, #1
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	08015448 	.word	0x08015448
 8002f80:	08015450 	.word	0x08015450

08002f84 <u8x8_d_st7565_nhd_c12864>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_st7565_nhd_c12864(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	607b      	str	r3, [r7, #4]
 8002f8e:	460b      	mov	r3, r1
 8002f90:	72fb      	strb	r3, [r7, #11]
 8002f92:	4613      	mov	r3, r2
 8002f94:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 8002f96:	7aba      	ldrb	r2, [r7, #10]
 8002f98:	7af9      	ldrb	r1, [r7, #11]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f7ff ff67 	bl	8002e70 <u8x8_d_st7565_common>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d12e      	bne.n	8003006 <u8x8_d_st7565_nhd_c12864+0x82>
  {
    /* msg not handled, then try here */
    switch(msg)
 8002fa8:	7afb      	ldrb	r3, [r7, #11]
 8002faa:	2b0a      	cmp	r3, #10
 8002fac:	d008      	beq.n	8002fc0 <u8x8_d_st7565_nhd_c12864+0x3c>
 8002fae:	2b0d      	cmp	r3, #13
 8002fb0:	d00e      	beq.n	8002fd0 <u8x8_d_st7565_nhd_c12864+0x4c>
 8002fb2:	2b09      	cmp	r3, #9
 8002fb4:	d125      	bne.n	8003002 <u8x8_d_st7565_nhd_c12864+0x7e>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_nhd_c12864_display_info);
 8002fb6:	4917      	ldr	r1, [pc, #92]	; (8003014 <u8x8_d_st7565_nhd_c12864+0x90>)
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 f833 	bl	8003024 <u8x8_d_helper_display_setup_memory>
	break;
 8002fbe:	e023      	b.n	8003008 <u8x8_d_st7565_nhd_c12864+0x84>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 f842 	bl	800304a <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_nhd_c12864_init_seq);
 8002fc6:	4914      	ldr	r1, [pc, #80]	; (8003018 <u8x8_d_st7565_nhd_c12864+0x94>)
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f7ff febf 	bl	8002d4c <u8x8_cad_SendSequence>
	break;
 8002fce:	e01b      	b.n	8003008 <u8x8_d_st7565_nhd_c12864+0x84>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
 8002fd0:	7abb      	ldrb	r3, [r7, #10]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10a      	bne.n	8002fec <u8x8_d_st7565_nhd_c12864+0x68>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 8002fd6:	4911      	ldr	r1, [pc, #68]	; (800301c <u8x8_d_st7565_nhd_c12864+0x98>)
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f7ff feb7 	bl	8002d4c <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	7c9a      	ldrb	r2, [r3, #18]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
	}	
	break;
 8002fea:	e00d      	b.n	8003008 <u8x8_d_st7565_nhd_c12864+0x84>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 8002fec:	490c      	ldr	r1, [pc, #48]	; (8003020 <u8x8_d_st7565_nhd_c12864+0x9c>)
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f7ff feac 	bl	8002d4c <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	7cda      	ldrb	r2, [r3, #19]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	break;
 8003000:	e002      	b.n	8003008 <u8x8_d_st7565_nhd_c12864+0x84>
      default:
	return 0;		/* msg unknown */
 8003002:	2300      	movs	r3, #0
 8003004:	e001      	b.n	800300a <u8x8_d_st7565_nhd_c12864+0x86>
    }
  }
 8003006:	bf00      	nop
  return 1;
 8003008:	2301      	movs	r3, #1
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	08015468 	.word	0x08015468
 8003018:	08015480 	.word	0x08015480
 800301c:	08015458 	.word	0x08015458
 8003020:	08015460 	.word	0x08015460

08003024 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	7c9a      	ldrb	r2, [r3, #18]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	bc80      	pop	{r7}
 8003048:	4770      	bx	lr

0800304a <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800304a:	b590      	push	{r4, r7, lr}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695c      	ldr	r4, [r3, #20]
 8003056:	2300      	movs	r3, #0
 8003058:	2200      	movs	r2, #0
 800305a:	2128      	movs	r1, #40	; 0x28
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68dc      	ldr	r4, [r3, #12]
 8003064:	2300      	movs	r3, #0
 8003066:	2200      	movs	r2, #0
 8003068:	2114      	movs	r1, #20
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800306e:	2201      	movs	r2, #1
 8003070:	214b      	movs	r1, #75	; 0x4b
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f886 	bl	8003184 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	791b      	ldrb	r3, [r3, #4]
 800307e:	461a      	mov	r2, r3
 8003080:	2129      	movs	r1, #41	; 0x29
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f87e 	bl	8003184 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8003088:	2200      	movs	r2, #0
 800308a:	214b      	movs	r1, #75	; 0x4b
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f879 	bl	8003184 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	791b      	ldrb	r3, [r3, #4]
 8003098:	461a      	mov	r2, r3
 800309a:	2129      	movs	r1, #41	; 0x29
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f871 	bl	8003184 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80030a2:	2201      	movs	r2, #1
 80030a4:	214b      	movs	r1, #75	; 0x4b
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f86c 	bl	8003184 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	795b      	ldrb	r3, [r3, #5]
 80030b2:	461a      	mov	r2, r3
 80030b4:	2129      	movs	r1, #41	; 0x29
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f864 	bl	8003184 <u8x8_gpio_call>
}    
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd90      	pop	{r4, r7, pc}

080030c4 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80030c4:	b590      	push	{r4, r7, lr}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	4608      	mov	r0, r1
 80030ce:	4611      	mov	r1, r2
 80030d0:	461a      	mov	r2, r3
 80030d2:	4603      	mov	r3, r0
 80030d4:	70fb      	strb	r3, [r7, #3]
 80030d6:	460b      	mov	r3, r1
 80030d8:	70bb      	strb	r3, [r7, #2]
 80030da:	4613      	mov	r3, r2
 80030dc:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80030de:	78fb      	ldrb	r3, [r7, #3]
 80030e0:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80030e2:	78bb      	ldrb	r3, [r7, #2]
 80030e4:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80030e6:	787b      	ldrb	r3, [r7, #1]
 80030e8:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689c      	ldr	r4, [r3, #8]
 80030f2:	f107 0308 	add.w	r3, r7, #8
 80030f6:	2201      	movs	r2, #1
 80030f8:	210f      	movs	r1, #15
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	47a0      	blx	r4
 80030fe:	4603      	mov	r3, r0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	bd90      	pop	{r4, r7, pc}

08003108 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8003108:	b590      	push	{r4, r7, lr}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689c      	ldr	r4, [r3, #8]
 8003114:	2300      	movs	r3, #0
 8003116:	2200      	movs	r2, #0
 8003118:	2109      	movs	r1, #9
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	47a0      	blx	r4
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	bd90      	pop	{r4, r7, pc}

08003126 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8003126:	b590      	push	{r4, r7, lr}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689c      	ldr	r4, [r3, #8]
 8003132:	2300      	movs	r3, #0
 8003134:	2200      	movs	r2, #0
 8003136:	210a      	movs	r1, #10
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	47a0      	blx	r4
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	bd90      	pop	{r4, r7, pc}

08003144 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8003144:	b590      	push	{r4, r7, lr}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689c      	ldr	r4, [r3, #8]
 8003154:	78fa      	ldrb	r2, [r7, #3]
 8003156:	2300      	movs	r3, #0
 8003158:	210b      	movs	r1, #11
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	47a0      	blx	r4
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	bd90      	pop	{r4, r7, pc}

08003166 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8003166:	b590      	push	{r4, r7, lr}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689c      	ldr	r4, [r3, #8]
 8003172:	2300      	movs	r3, #0
 8003174:	2200      	movs	r2, #0
 8003176:	2110      	movs	r1, #16
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	47a0      	blx	r4
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	bd90      	pop	{r4, r7, pc}

08003184 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8003184:	b590      	push	{r4, r7, lr}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	70fb      	strb	r3, [r7, #3]
 8003190:	4613      	mov	r3, r2
 8003192:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	695c      	ldr	r4, [r3, #20]
 8003198:	78ba      	ldrb	r2, [r7, #2]
 800319a:	78f9      	ldrb	r1, [r7, #3]
 800319c:	2300      	movs	r3, #0
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	47a0      	blx	r4
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd90      	pop	{r4, r7, pc}

080031aa <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b085      	sub	sp, #20
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	60f8      	str	r0, [r7, #12]
 80031b2:	607b      	str	r3, [r7, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	72fb      	strb	r3, [r7, #11]
 80031b8:	4613      	mov	r3, r2
 80031ba:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr

080031c8 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a11      	ldr	r2, [pc, #68]	; (8003220 <u8x8_SetupDefaults+0x58>)
 80031da:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a10      	ldr	r2, [pc, #64]	; (8003220 <u8x8_SetupDefaults+0x58>)
 80031e0:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a0e      	ldr	r2, [pc, #56]	; (8003220 <u8x8_SetupDefaults+0x58>)
 80031e6:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a0d      	ldr	r2, [pc, #52]	; (8003220 <u8x8_SetupDefaults+0x58>)
 80031ec:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	22ff      	movs	r2, #255	; 0xff
 8003208:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	22ff      	movs	r2, #255	; 0xff
 8003210:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	080031ab 	.word	0x080031ab

08003224 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
 8003230:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f7ff ffc8 	bl	80031c8 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f7ff ff59 	bl	8003108 <u8x8_SetupMemory>
}
 8003256:	bf00      	nop
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <_ZN11ChronoTimerC1Eh>:
 *      Author: deo
 */

#include <ChronoTimer.h>

ChronoTimer::ChronoTimer(uint8_t Resolution)
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
 8003266:	460b      	mov	r3, r1
 8003268:	70fb      	strb	r3, [r7, #3]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	701a      	strb	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	609a      	str	r2, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	60da      	str	r2, [r3, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	741a      	strb	r2, [r3, #16]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	745a      	strb	r2, [r3, #17]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	749a      	strb	r2, [r3, #18]
{
	if(Resolution <= HOURS)
 8003294:	78fb      	ldrb	r3, [r7, #3]
 8003296:	2b03      	cmp	r3, #3
 8003298:	d802      	bhi.n	80032a0 <_ZN11ChronoTimerC1Eh+0x42>
		resolution = Resolution;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	78fa      	ldrb	r2, [r7, #3]
 800329e:	701a      	strb	r2, [r3, #0]
}
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4618      	mov	r0, r3
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr

080032ac <_ZN11ChronoTimer8setTimerEm>:

void ChronoTimer::setTimer(uint32_t SetDelay)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
	if(oldSettedDelay != SetDelay)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d031      	beq.n	8003324 <_ZN11ChronoTimer8setTimerEm+0x78>
	{
		switch(resolution)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d826      	bhi.n	8003316 <_ZN11ChronoTimer8setTimerEm+0x6a>
 80032c8:	a201      	add	r2, pc, #4	; (adr r2, 80032d0 <_ZN11ChronoTimer8setTimerEm+0x24>)
 80032ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ce:	bf00      	nop
 80032d0:	080032e1 	.word	0x080032e1
 80032d4:	080032e9 	.word	0x080032e9
 80032d8:	080032f9 	.word	0x080032f9
 80032dc:	08003309 	.word	0x08003309
		{
		case MILLIS:
			timeDelay = SetDelay;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	605a      	str	r2, [r3, #4]
			break;
 80032e6:	e017      	b.n	8003318 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case SECONDS:
			timeDelay = SetDelay * 1000;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032ee:	fb02 f203 	mul.w	r2, r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	605a      	str	r2, [r3, #4]
			break;
 80032f6:	e00f      	b.n	8003318 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case MINUTE:
			timeDelay = SetDelay * 1000 * 60;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	f64e 2260 	movw	r2, #60000	; 0xea60
 80032fe:	fb02 f203 	mul.w	r2, r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	605a      	str	r2, [r3, #4]
			break;
 8003306:	e007      	b.n	8003318 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case HOURS:
			timeDelay = SetDelay * 1000 * 3600;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	4a09      	ldr	r2, [pc, #36]	; (8003330 <_ZN11ChronoTimer8setTimerEm+0x84>)
 800330c:	fb02 f203 	mul.w	r2, r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	605a      	str	r2, [r3, #4]
			break;
 8003314:	e000      	b.n	8003318 <_ZN11ChronoTimer8setTimerEm+0x6c>
		default:
			break;
 8003316:	bf00      	nop
		}
		isSetted = true;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	741a      	strb	r2, [r3, #16]
		oldSettedDelay = SetDelay;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	609a      	str	r2, [r3, #8]
	}

}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	0036ee80 	.word	0x0036ee80

08003334 <_ZN11ChronoTimer10startTimerEv>:

void ChronoTimer::startTimer()
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
	if(isStopped && isSetted)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	7c9b      	ldrb	r3, [r3, #18]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00e      	beq.n	8003362 <_ZN11ChronoTimer10startTimerEv+0x2e>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	7c1b      	ldrb	r3, [r3, #16]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00a      	beq.n	8003362 <_ZN11ChronoTimer10startTimerEv+0x2e>
	{
		isStarted = true;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	745a      	strb	r2, [r3, #17]
		isStopped = false;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	749a      	strb	r2, [r3, #18]
		getTick = HAL_GetTick();
 8003358:	f008 ff0e 	bl	800c178 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	60da      	str	r2, [r3, #12]
	}
}
 8003362:	bf00      	nop
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <_ZN11ChronoTimer9stopTimerEv>:

void ChronoTimer::stopTimer()
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
	if(isStarted)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	7c5b      	ldrb	r3, [r3, #17]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d008      	beq.n	800338c <_ZN11ChronoTimer9stopTimerEv+0x22>
	{
		isStarted = false;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	745a      	strb	r2, [r3, #17]
		isStopped = true;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	749a      	strb	r2, [r3, #18]
		getTick = 0;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	60da      	str	r2, [r3, #12]
	}
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr

08003396 <_ZN11ChronoTimer7restartEv>:

void ChronoTimer::restart()
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
	stopTimer();
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7ff ffe3 	bl	800336a <_ZN11ChronoTimer9stopTimerEv>
	startTimer();
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7ff ffc5 	bl	8003334 <_ZN11ChronoTimer10startTimerEv>
}
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <_ZN11ChronoTimer10isFinishedEbm>:

bool ChronoTimer::isFinished(bool Restart, uint32_t DelayReset)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b086      	sub	sp, #24
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	60f8      	str	r0, [r7, #12]
 80033ba:	460b      	mov	r3, r1
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	72fb      	strb	r3, [r7, #11]
	bool Finish = false;
 80033c0:	2300      	movs	r3, #0
 80033c2:	75fb      	strb	r3, [r7, #23]
	if(DelayReset > 0)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <_ZN11ChronoTimer10isFinishedEbm+0x20>
	{
		setTimer(DelayReset);
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f7ff ff6d 	bl	80032ac <_ZN11ChronoTimer8setTimerEm>
	}
	startTimer();
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f7ff ffae 	bl	8003334 <_ZN11ChronoTimer10startTimerEv>
	if(HAL_GetTick() - getTick >= timeDelay)
 80033d8:	f008 fece 	bl	800c178 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	1ad2      	subs	r2, r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	bf2c      	ite	cs
 80033ec:	2301      	movcs	r3, #1
 80033ee:	2300      	movcc	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <_ZN11ChronoTimer10isFinishedEbm+0x48>
	{
		Finish = true;
 80033f6:	2301      	movs	r3, #1
 80033f8:	75fb      	strb	r3, [r7, #23]
	}
	if(Restart && Finish)
 80033fa:	7afb      	ldrb	r3, [r7, #11]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d005      	beq.n	800340c <_ZN11ChronoTimer10isFinishedEbm+0x5a>
 8003400:	7dfb      	ldrb	r3, [r7, #23]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <_ZN11ChronoTimer10isFinishedEbm+0x5a>
	{
		restart();
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f7ff ffc5 	bl	8003396 <_ZN11ChronoTimer7restartEv>
	}
	return Finish;
 800340c:	7dfb      	ldrb	r3, [r7, #23]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af02      	add	r7, sp, #8
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	4b04      	ldr	r3, [pc, #16]	; (800343c <_ZNSt7__cxx119to_stringEi+0x24>)
 800342a:	2210      	movs	r2, #16
 800342c:	4904      	ldr	r1, [pc, #16]	; (8003440 <_ZNSt7__cxx119to_stringEi+0x28>)
 800342e:	f000 fd45 	bl	8003ebc <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	080121ec 	.word	0x080121ec
 8003440:	08011b5d 	.word	0x08011b5d

08003444 <_ZL7bcd2binh>:
   values as BCD.
    @param val BCD value
    @return Binary value
*/
/**************************************************************************/
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	4603      	mov	r3, r0
 800344c:	71fb      	strb	r3, [r7, #7]
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	111b      	asrs	r3, r3, #4
 8003452:	b2db      	uxtb	r3, r3
 8003454:	461a      	mov	r2, r3
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	b2da      	uxtb	r2, r3
 800345e:	79fb      	ldrb	r3, [r7, #7]
 8003460:	4413      	add	r3, r2
 8003462:	b2db      	uxtb	r3, r3
 8003464:	4618      	mov	r0, r3
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	bc80      	pop	{r7}
 800346c:	4770      	bx	lr
	...

08003470 <_ZL7bin2bcdh>:
    @brief  Convert a binary value to BCD format for the RTC registers
    @param val Binary value
    @return BCD value
*/
/**************************************************************************/
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	71fb      	strb	r3, [r7, #7]
 800347a:	79fb      	ldrb	r3, [r7, #7]
 800347c:	4a08      	ldr	r2, [pc, #32]	; (80034a0 <_ZL7bin2bcdh+0x30>)
 800347e:	fba2 2303 	umull	r2, r3, r2, r3
 8003482:	08db      	lsrs	r3, r3, #3
 8003484:	b2db      	uxtb	r3, r3
 8003486:	461a      	mov	r2, r3
 8003488:	0052      	lsls	r2, r2, #1
 800348a:	4413      	add	r3, r2
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	b2da      	uxtb	r2, r3
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	4413      	add	r3, r2
 8003494:	b2db      	uxtb	r3, r3
 8003496:	4618      	mov	r0, r3
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr
 80034a0:	cccccccd 	.word	0xcccccccd

080034a4 <_ZN10DS1307_RTC18devAddressLShiftedEv>:
  return t; // @suppress("Return with parenthesis")
}


uint16_t DS1307_RTC::devAddressLShifted()
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
	return ds1307Address << 1;
 80034ac:	23d0      	movs	r3, #208	; 0xd0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr

080034b8 <_ZN10DS1307_RTC12clearI2CBuffEv>:

void DS1307_RTC::clearI2CBuff()
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
	memset(i2cBuffer, 0x00, BUFFER_LEN);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2220      	movs	r2, #32
 80034c4:	2100      	movs	r1, #0
 80034c6:	4618      	mov	r0, r3
 80034c8:	f00e f955 	bl	8011776 <memset>
	i2cBufferIndex = 0;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2020 	strb.w	r2, [r3, #32]
}
 80034d4:	bf00      	nop
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <_ZN10DS1307_RTCC1Ev>:

DS1307_RTC::DS1307_RTC()
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2020 	strb.w	r2, [r3, #32]
{

}
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4618      	mov	r0, r3
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr

080034f8 <_ZN10DS1307_RTC5setupEv>:

void DS1307_RTC::setup()
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af02      	add	r7, sp, #8
 80034fe:	6078      	str	r0, [r7, #4]
	clearI2CBuff();
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff ffd9 	bl	80034b8 <_ZN10DS1307_RTC12clearI2CBuffEv>
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), i2cBuffer, 0, 1);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7ff ffcc 	bl	80034a4 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 800350c:	4603      	mov	r3, r0
 800350e:	4619      	mov	r1, r3
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	2301      	movs	r3, #1
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	2300      	movs	r3, #0
 8003518:	4803      	ldr	r0, [pc, #12]	; (8003528 <_ZN10DS1307_RTC5setupEv+0x30>)
 800351a:	f00a fad5 	bl	800dac8 <HAL_I2C_Master_Transmit>
}
 800351e:	bf00      	nop
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	200006f4 	.word	0x200006f4

0800352c <_ZN10DS1307_RTC9isRunningEv>:



bool DS1307_RTC::isRunning()
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af02      	add	r7, sp, #8
 8003532:	6078      	str	r0, [r7, #4]
	bool Live = false;
 8003534:	2300      	movs	r3, #0
 8003536:	75fb      	strb	r3, [r7, #23]
	uint8_t RxData = 0;
 8003538:	2300      	movs	r3, #0
 800353a:	75bb      	strb	r3, [r7, #22]
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), 0, 1, 1);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7ff ffb1 	bl	80034a4 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 8003542:	4603      	mov	r3, r0
 8003544:	4619      	mov	r1, r3
 8003546:	2301      	movs	r3, #1
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	2301      	movs	r3, #1
 800354c:	2200      	movs	r2, #0
 800354e:	4823      	ldr	r0, [pc, #140]	; (80035dc <_ZN10DS1307_RTC9isRunningEv+0xb0>)
 8003550:	f00a faba 	bl	800dac8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, devAddressLShifted(), i2cBuffer, 1, 1);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff ffa5 	bl	80034a4 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 800355a:	4603      	mov	r3, r0
 800355c:	4619      	mov	r1, r3
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	2301      	movs	r3, #1
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	2301      	movs	r3, #1
 8003566:	481d      	ldr	r0, [pc, #116]	; (80035dc <_ZN10DS1307_RTC9isRunningEv+0xb0>)
 8003568:	f00a fbac 	bl	800dcc4 <HAL_I2C_Master_Receive>
	RxData = i2cBuffer[0];
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	75bb      	strb	r3, [r7, #22]
	clearI2CBuff();
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7ff ffa0 	bl	80034b8 <_ZN10DS1307_RTC12clearI2CBuffEv>
	if(RxData >> 7 == 0x00)
 8003578:	7dbb      	ldrb	r3, [r7, #22]
 800357a:	11db      	asrs	r3, r3, #7
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <_ZN10DS1307_RTC9isRunningEv+0x58>
	{
		Live = true;
 8003580:	2301      	movs	r3, #1
 8003582:	75fb      	strb	r3, [r7, #23]
	}
	if(Live)
 8003584:	7dfb      	ldrb	r3, [r7, #23]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d022      	beq.n	80035d0 <_ZN10DS1307_RTC9isRunningEv+0xa4>
	{
		TIME_DATE_T ReadTime;
		getTimeDate(ReadTime);
 800358a:	f107 030c 	add.w	r3, r7, #12
 800358e:	4619      	mov	r1, r3
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f8cf 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
		if(ReadTime.year == 0  && ReadTime.month == 0  && ReadTime.day == 0)
 8003596:	8a7b      	ldrh	r3, [r7, #18]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d119      	bne.n	80035d0 <_ZN10DS1307_RTC9isRunningEv+0xa4>
 800359c:	7c3b      	ldrb	r3, [r7, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d116      	bne.n	80035d0 <_ZN10DS1307_RTC9isRunningEv+0xa4>
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d113      	bne.n	80035d0 <_ZN10DS1307_RTC9isRunningEv+0xa4>
		{
			ReadTime.hour = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	73bb      	strb	r3, [r7, #14]
			ReadTime.minute = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	737b      	strb	r3, [r7, #13]
			ReadTime.second = 0;
 80035b0:	2300      	movs	r3, #0
 80035b2:	733b      	strb	r3, [r7, #12]
			ReadTime.day = 1;
 80035b4:	2301      	movs	r3, #1
 80035b6:	73fb      	strb	r3, [r7, #15]
			ReadTime.month = 1;
 80035b8:	2301      	movs	r3, #1
 80035ba:	743b      	strb	r3, [r7, #16]
			ReadTime.year = 2020;
 80035bc:	f240 73e4 	movw	r3, #2020	; 0x7e4
 80035c0:	827b      	strh	r3, [r7, #18]
			adjustTimeDate(ReadTime);
 80035c2:	f107 030c 	add.w	r3, r7, #12
 80035c6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f808 	bl	80035e0 <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>
		}
	}
	return Live;
 80035d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	200006f4 	.word	0x200006f4

080035e0 <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>:



void DS1307_RTC::adjustTimeDate(TIME_DATE_T AdjustVar)
{
 80035e0:	b590      	push	{r4, r7, lr}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af02      	add	r7, sp, #8
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	1d3b      	adds	r3, r7, #4
 80035ea:	e883 0006 	stmia.w	r3, {r1, r2}
	clearI2CBuff();
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f7ff ff62 	bl	80034b8 <_ZN10DS1307_RTC12clearI2CBuffEv>
	i2cBuffer[i2cBufferIndex++] = 0;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	b2d1      	uxtb	r1, r2
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	f882 1020 	strb.w	r1, [r2, #32]
 8003604:	461a      	mov	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2100      	movs	r1, #0
 800360a:	5499      	strb	r1, [r3, r2]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.second);
 800360c:	7939      	ldrb	r1, [r7, #4]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	b2d0      	uxtb	r0, r2
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	f882 0020 	strb.w	r0, [r2, #32]
 800361e:	461c      	mov	r4, r3
 8003620:	4608      	mov	r0, r1
 8003622:	f7ff ff25 	bl	8003470 <_ZL7bin2bcdh>
 8003626:	4603      	mov	r3, r0
 8003628:	461a      	mov	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.minute);
 800362e:	7979      	ldrb	r1, [r7, #5]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	b2d0      	uxtb	r0, r2
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	f882 0020 	strb.w	r0, [r2, #32]
 8003640:	461c      	mov	r4, r3
 8003642:	4608      	mov	r0, r1
 8003644:	f7ff ff14 	bl	8003470 <_ZL7bin2bcdh>
 8003648:	4603      	mov	r3, r0
 800364a:	461a      	mov	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.hour);
 8003650:	79b9      	ldrb	r1, [r7, #6]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003658:	1c5a      	adds	r2, r3, #1
 800365a:	b2d0      	uxtb	r0, r2
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	f882 0020 	strb.w	r0, [r2, #32]
 8003662:	461c      	mov	r4, r3
 8003664:	4608      	mov	r0, r1
 8003666:	f7ff ff03 	bl	8003470 <_ZL7bin2bcdh>
 800366a:	4603      	mov	r3, r0
 800366c:	461a      	mov	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(0);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	b2d1      	uxtb	r1, r2
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	f882 1020 	strb.w	r1, [r2, #32]
 8003682:	461c      	mov	r4, r3
 8003684:	2000      	movs	r0, #0
 8003686:	f7ff fef3 	bl	8003470 <_ZL7bin2bcdh>
 800368a:	4603      	mov	r3, r0
 800368c:	461a      	mov	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.day);
 8003692:	79f9      	ldrb	r1, [r7, #7]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f893 3020 	ldrb.w	r3, [r3, #32]
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	b2d0      	uxtb	r0, r2
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	f882 0020 	strb.w	r0, [r2, #32]
 80036a4:	461c      	mov	r4, r3
 80036a6:	4608      	mov	r0, r1
 80036a8:	f7ff fee2 	bl	8003470 <_ZL7bin2bcdh>
 80036ac:	4603      	mov	r3, r0
 80036ae:	461a      	mov	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.month);
 80036b4:	7a39      	ldrb	r1, [r7, #8]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	b2d0      	uxtb	r0, r2
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	f882 0020 	strb.w	r0, [r2, #32]
 80036c6:	461c      	mov	r4, r3
 80036c8:	4608      	mov	r0, r1
 80036ca:	f7ff fed1 	bl	8003470 <_ZL7bin2bcdh>
 80036ce:	4603      	mov	r3, r0
 80036d0:	461a      	mov	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.year - 2000);
 80036d6:	897b      	ldrh	r3, [r7, #10]
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	3330      	adds	r3, #48	; 0x30
 80036dc:	b2d9      	uxtb	r1, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	b2d0      	uxtb	r0, r2
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	f882 0020 	strb.w	r0, [r2, #32]
 80036ee:	461c      	mov	r4, r3
 80036f0:	4608      	mov	r0, r1
 80036f2:	f7ff febd 	bl	8003470 <_ZL7bin2bcdh>
 80036f6:	4603      	mov	r3, r0
 80036f8:	461a      	mov	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	551a      	strb	r2, [r3, r4]
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), i2cBuffer, i2cBufferIndex, 1);
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f7ff fed0 	bl	80034a4 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 8003704:	4603      	mov	r3, r0
 8003706:	4618      	mov	r0, r3
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003710:	b299      	uxth	r1, r3
 8003712:	2301      	movs	r3, #1
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	460b      	mov	r3, r1
 8003718:	4601      	mov	r1, r0
 800371a:	4805      	ldr	r0, [pc, #20]	; (8003730 <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE+0x150>)
 800371c:	f00a f9d4 	bl	800dac8 <HAL_I2C_Master_Transmit>
	clearI2CBuff();
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f7ff fec9 	bl	80034b8 <_ZN10DS1307_RTC12clearI2CBuffEv>
}
 8003726:	bf00      	nop
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	bd90      	pop	{r4, r7, pc}
 800372e:	bf00      	nop
 8003730:	200006f4 	.word	0x200006f4

08003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>:

void DS1307_RTC::getTimeDate(TIME_DATE_T &RetTimeDate)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af02      	add	r7, sp, #8
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
	clearI2CBuff();
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff feba 	bl	80034b8 <_ZN10DS1307_RTC12clearI2CBuffEv>
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), 0, 1, 1);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7ff fead 	bl	80034a4 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 800374a:	4603      	mov	r3, r0
 800374c:	4619      	mov	r1, r3
 800374e:	2301      	movs	r3, #1
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	2301      	movs	r3, #1
 8003754:	2200      	movs	r2, #0
 8003756:	4848      	ldr	r0, [pc, #288]	; (8003878 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE+0x144>)
 8003758:	f00a f9b6 	bl	800dac8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, devAddressLShifted(), i2cBuffer, 7, 1);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff fea1 	bl	80034a4 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 8003762:	4603      	mov	r3, r0
 8003764:	4619      	mov	r1, r3
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	2301      	movs	r3, #1
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	2307      	movs	r3, #7
 800376e:	4842      	ldr	r0, [pc, #264]	; (8003878 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE+0x144>)
 8003770:	f00a faa8 	bl	800dcc4 <HAL_I2C_Master_Receive>
	RetTimeDate.second = bcd2bin(i2cBuffer[i2cBufferIndex++] & 0x7F);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 3020 	ldrb.w	r3, [r3, #32]
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	b2d1      	uxtb	r1, r2
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	f882 1020 	strb.w	r1, [r2, #32]
 8003784:	461a      	mov	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	5c9b      	ldrb	r3, [r3, r2]
 800378a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800378e:	b2db      	uxtb	r3, r3
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff fe57 	bl	8003444 <_ZL7bcd2binh>
 8003796:	4603      	mov	r3, r0
 8003798:	461a      	mov	r2, r3
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	701a      	strb	r2, [r3, #0]
	RetTimeDate.minute = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	b2d1      	uxtb	r1, r2
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	f882 1020 	strb.w	r1, [r2, #32]
 80037ae:	461a      	mov	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	5c9b      	ldrb	r3, [r3, r2]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff fe45 	bl	8003444 <_ZL7bcd2binh>
 80037ba:	4603      	mov	r3, r0
 80037bc:	461a      	mov	r2, r3
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	705a      	strb	r2, [r3, #1]
	RetTimeDate.hour = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	b2d1      	uxtb	r1, r2
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	f882 1020 	strb.w	r1, [r2, #32]
 80037d2:	461a      	mov	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	5c9b      	ldrb	r3, [r3, r2]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff fe33 	bl	8003444 <_ZL7bcd2binh>
 80037de:	4603      	mov	r3, r0
 80037e0:	461a      	mov	r2, r3
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	709a      	strb	r2, [r3, #2]
	i2cBufferIndex++;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037ec:	3301      	adds	r3, #1
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f883 2020 	strb.w	r2, [r3, #32]
	RetTimeDate.day = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037fc:	1c5a      	adds	r2, r3, #1
 80037fe:	b2d1      	uxtb	r1, r2
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	f882 1020 	strb.w	r1, [r2, #32]
 8003806:	461a      	mov	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	5c9b      	ldrb	r3, [r3, r2]
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff fe19 	bl	8003444 <_ZL7bcd2binh>
 8003812:	4603      	mov	r3, r0
 8003814:	461a      	mov	r2, r3
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	70da      	strb	r2, [r3, #3]
	RetTimeDate.month = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	b2d1      	uxtb	r1, r2
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	f882 1020 	strb.w	r1, [r2, #32]
 800382a:	461a      	mov	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	5c9b      	ldrb	r3, [r3, r2]
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff fe07 	bl	8003444 <_ZL7bcd2binh>
 8003836:	4603      	mov	r3, r0
 8003838:	461a      	mov	r2, r3
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	711a      	strb	r2, [r3, #4]
	RetTimeDate.year = bcd2bin(i2cBuffer[i2cBufferIndex++]) + 2000;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003844:	1c5a      	adds	r2, r3, #1
 8003846:	b2d1      	uxtb	r1, r2
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	f882 1020 	strb.w	r1, [r2, #32]
 800384e:	461a      	mov	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	5c9b      	ldrb	r3, [r3, r2]
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff fdf5 	bl	8003444 <_ZL7bcd2binh>
 800385a:	4603      	mov	r3, r0
 800385c:	b29b      	uxth	r3, r3
 800385e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003862:	b29a      	uxth	r2, r3
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	80da      	strh	r2, [r3, #6]
	clearI2CBuff();
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff fe25 	bl	80034b8 <_ZN10DS1307_RTC12clearI2CBuffEv>
}
 800386e:	bf00      	nop
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	200006f4 	.word	0x200006f4

0800387c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh>:

String DS1307_RTC::getTimeDateStr(uint8_t FormatType)
{
 800387c:	b590      	push	{r4, r7, lr}
 800387e:	f5ad 7d73 	sub.w	sp, sp, #972	; 0x3cc
 8003882:	af00      	add	r7, sp, #0
 8003884:	f107 030c 	add.w	r3, r7, #12
 8003888:	6018      	str	r0, [r3, #0]
 800388a:	f107 0308 	add.w	r3, r7, #8
 800388e:	6019      	str	r1, [r3, #0]
 8003890:	1dfb      	adds	r3, r7, #7
 8003892:	701a      	strb	r2, [r3, #0]
	String second, minute, hour, day, month, year, RetStr = "Wrong type";
 8003894:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003898:	4618      	mov	r0, r3
 800389a:	f00d fc67 	bl	801116c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800389e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80038a2:	4618      	mov	r0, r3
 80038a4:	f00d fc62 	bl	801116c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80038a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80038ac:	4618      	mov	r0, r3
 80038ae:	f00d fc5d 	bl	801116c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80038b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80038b6:	4618      	mov	r0, r3
 80038b8:	f00d fc58 	bl	801116c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80038bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80038c0:	4618      	mov	r0, r3
 80038c2:	f00d fc53 	bl	801116c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80038c6:	f107 031c 	add.w	r3, r7, #28
 80038ca:	4618      	mov	r0, r3
 80038cc:	f00d fc4e 	bl	801116c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80038d0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038d4:	4618      	mov	r0, r3
 80038d6:	f00d fb39 	bl	8010f4c <_ZNSaIcEC1Ev>
 80038da:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80038de:	f107 030c 	add.w	r3, r7, #12
 80038e2:	49df      	ldr	r1, [pc, #892]	; (8003c60 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e4>)
 80038e4:	6818      	ldr	r0, [r3, #0]
 80038e6:	f00d fdf9 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80038ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038ee:	4618      	mov	r0, r3
 80038f0:	f00d fb2d 	bl	8010f4e <_ZNSaIcED1Ev>
	TIME_DATE_T TimeDate;
	getTimeDate(TimeDate);
 80038f4:	f107 0214 	add.w	r2, r7, #20
 80038f8:	f107 0308 	add.w	r3, r7, #8
 80038fc:	4611      	mov	r1, r2
 80038fe:	6818      	ldr	r0, [r3, #0]
 8003900:	f7ff ff18 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
	second = TimeDate.second > 9 ? std::to_string(TimeDate.second) : "0" + std::to_string(TimeDate.second);
 8003904:	f107 0314 	add.w	r3, r7, #20
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	2400      	movs	r4, #0
 800390c:	2b09      	cmp	r3, #9
 800390e:	d90a      	bls.n	8003926 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0xaa>
 8003910:	f107 0314 	add.w	r3, r7, #20
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	461a      	mov	r2, r3
 8003918:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800391c:	4611      	mov	r1, r2
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff fd7a 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003924:	e012      	b.n	800394c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0xd0>
 8003926:	f107 0314 	add.w	r3, r7, #20
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	461a      	mov	r2, r3
 800392e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003932:	4611      	mov	r1, r2
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff fd6f 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 800393a:	2401      	movs	r4, #1
 800393c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003940:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8003944:	49c7      	ldr	r1, [pc, #796]	; (8003c64 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003946:	4618      	mov	r0, r3
 8003948:	f000 faf0 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800394c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003950:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003954:	4611      	mov	r1, r2
 8003956:	4618      	mov	r0, r3
 8003958:	f00d fc35 	bl	80111c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800395c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003960:	4618      	mov	r0, r3
 8003962:	f00d fc24 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003966:	2c00      	cmp	r4, #0
 8003968:	d004      	beq.n	8003974 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0xf8>
 800396a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800396e:	4618      	mov	r0, r3
 8003970:	f00d fc1d 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	minute = TimeDate.minute > 9 ? std::to_string(TimeDate.minute) : "0" + std::to_string(TimeDate.minute);
 8003974:	f107 0314 	add.w	r3, r7, #20
 8003978:	785b      	ldrb	r3, [r3, #1]
 800397a:	2400      	movs	r4, #0
 800397c:	2b09      	cmp	r3, #9
 800397e:	d90a      	bls.n	8003996 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x11a>
 8003980:	f107 0314 	add.w	r3, r7, #20
 8003984:	785b      	ldrb	r3, [r3, #1]
 8003986:	461a      	mov	r2, r3
 8003988:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800398c:	4611      	mov	r1, r2
 800398e:	4618      	mov	r0, r3
 8003990:	f7ff fd42 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003994:	e012      	b.n	80039bc <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x140>
 8003996:	f107 0314 	add.w	r3, r7, #20
 800399a:	785b      	ldrb	r3, [r3, #1]
 800399c:	461a      	mov	r2, r3
 800399e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80039a2:	4611      	mov	r1, r2
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff fd37 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 80039aa:	2401      	movs	r4, #1
 80039ac:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80039b0:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80039b4:	49ab      	ldr	r1, [pc, #684]	; (8003c64 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 fab8 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 80039bc:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80039c0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80039c4:	4611      	mov	r1, r2
 80039c6:	4618      	mov	r0, r3
 80039c8:	f00d fbfd 	bl	80111c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80039cc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80039d0:	4618      	mov	r0, r3
 80039d2:	f00d fbec 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80039d6:	2c00      	cmp	r4, #0
 80039d8:	d004      	beq.n	80039e4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x168>
 80039da:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80039de:	4618      	mov	r0, r3
 80039e0:	f00d fbe5 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	hour = TimeDate.hour > 9 ? std::to_string(TimeDate.hour) : "0" + std::to_string(TimeDate.hour);
 80039e4:	f107 0314 	add.w	r3, r7, #20
 80039e8:	789b      	ldrb	r3, [r3, #2]
 80039ea:	2400      	movs	r4, #0
 80039ec:	2b09      	cmp	r3, #9
 80039ee:	d90a      	bls.n	8003a06 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x18a>
 80039f0:	f107 0314 	add.w	r3, r7, #20
 80039f4:	789b      	ldrb	r3, [r3, #2]
 80039f6:	461a      	mov	r2, r3
 80039f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80039fc:	4611      	mov	r1, r2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff fd0a 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003a04:	e012      	b.n	8003a2c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x1b0>
 8003a06:	f107 0314 	add.w	r3, r7, #20
 8003a0a:	789b      	ldrb	r3, [r3, #2]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003a12:	4611      	mov	r1, r2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff fcff 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003a1a:	2401      	movs	r4, #1
 8003a1c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003a20:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8003a24:	498f      	ldr	r1, [pc, #572]	; (8003c64 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 fa80 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003a2c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003a30:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003a34:	4611      	mov	r1, r2
 8003a36:	4618      	mov	r0, r3
 8003a38:	f00d fbc5 	bl	80111c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003a3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003a40:	4618      	mov	r0, r3
 8003a42:	f00d fbb4 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003a46:	2c00      	cmp	r4, #0
 8003a48:	d004      	beq.n	8003a54 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x1d8>
 8003a4a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f00d fbad 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	day = TimeDate.day > 9 ? std::to_string(TimeDate.day) : "0" + std::to_string(TimeDate.day);
 8003a54:	f107 0314 	add.w	r3, r7, #20
 8003a58:	78db      	ldrb	r3, [r3, #3]
 8003a5a:	2400      	movs	r4, #0
 8003a5c:	2b09      	cmp	r3, #9
 8003a5e:	d90a      	bls.n	8003a76 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x1fa>
 8003a60:	f107 0314 	add.w	r3, r7, #20
 8003a64:	78db      	ldrb	r3, [r3, #3]
 8003a66:	461a      	mov	r2, r3
 8003a68:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003a6c:	4611      	mov	r1, r2
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff fcd2 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003a74:	e012      	b.n	8003a9c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x220>
 8003a76:	f107 0314 	add.w	r3, r7, #20
 8003a7a:	78db      	ldrb	r3, [r3, #3]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003a82:	4611      	mov	r1, r2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff fcc7 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003a8a:	2401      	movs	r4, #1
 8003a8c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003a90:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003a94:	4973      	ldr	r1, [pc, #460]	; (8003c64 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fa48 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003a9c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8003aa0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003aa4:	4611      	mov	r1, r2
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f00d fb8d 	bl	80111c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003aac:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f00d fb7c 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003ab6:	2c00      	cmp	r4, #0
 8003ab8:	d004      	beq.n	8003ac4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x248>
 8003aba:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f00d fb75 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	month = TimeDate.month > 9 ? std::to_string(TimeDate.month) : "0" + std::to_string(TimeDate.month);
 8003ac4:	f107 0314 	add.w	r3, r7, #20
 8003ac8:	791b      	ldrb	r3, [r3, #4]
 8003aca:	2400      	movs	r4, #0
 8003acc:	2b09      	cmp	r3, #9
 8003ace:	d90a      	bls.n	8003ae6 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x26a>
 8003ad0:	f107 0314 	add.w	r3, r7, #20
 8003ad4:	791b      	ldrb	r3, [r3, #4]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003adc:	4611      	mov	r1, r2
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff fc9a 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003ae4:	e012      	b.n	8003b0c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x290>
 8003ae6:	f107 0314 	add.w	r3, r7, #20
 8003aea:	791b      	ldrb	r3, [r3, #4]
 8003aec:	461a      	mov	r2, r3
 8003aee:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003af2:	4611      	mov	r1, r2
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff fc8f 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003afa:	2401      	movs	r4, #1
 8003afc:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003b00:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8003b04:	4957      	ldr	r1, [pc, #348]	; (8003c64 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fa10 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003b0c:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8003b10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b14:	4611      	mov	r1, r2
 8003b16:	4618      	mov	r0, r3
 8003b18:	f00d fb55 	bl	80111c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003b1c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003b20:	4618      	mov	r0, r3
 8003b22:	f00d fb44 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003b26:	2c00      	cmp	r4, #0
 8003b28:	d004      	beq.n	8003b34 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x2b8>
 8003b2a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f00d fb3d 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	year = std::to_string(TimeDate.year % 100);
 8003b34:	f107 0314 	add.w	r3, r7, #20
 8003b38:	88db      	ldrh	r3, [r3, #6]
 8003b3a:	4a4b      	ldr	r2, [pc, #300]	; (8003c68 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3ec>)
 8003b3c:	fba2 1203 	umull	r1, r2, r2, r3
 8003b40:	0952      	lsrs	r2, r2, #5
 8003b42:	2164      	movs	r1, #100	; 0x64
 8003b44:	fb01 f202 	mul.w	r2, r1, r2
 8003b48:	1a9b      	subs	r3, r3, r2
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003b52:	4611      	mov	r1, r2
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff fc5f 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8003b5a:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8003b5e:	f107 031c 	add.w	r3, r7, #28
 8003b62:	4611      	mov	r1, r2
 8003b64:	4618      	mov	r0, r3
 8003b66:	f00d fb2e 	bl	80111c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003b6a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f00d fb1d 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	switch(FormatType)
 8003b74:	1dfb      	adds	r3, r7, #7
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	f200 816c 	bhi.w	8003e56 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5da>
 8003b7e:	a201      	add	r2, pc, #4	; (adr r2, 8003b84 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x308>)
 8003b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b84:	08003b99 	.word	0x08003b99
 8003b88:	08003c17 	.word	0x08003c17
 8003b8c:	08003c71 	.word	0x08003c71
 8003b90:	08003cef 	.word	0x08003cef
 8003b94:	08003d37 	.word	0x08003d37
	{
	case ONLY_TIME:
		RetStr = hour + ":" + minute + ":" + second;
 8003b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b9c:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8003ba0:	4a32      	ldr	r2, [pc, #200]	; (8003c6c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3f0>)
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 f9da 	bl	8003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003ba8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003bac:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003bb0:	f507 7100 	add.w	r1, r7, #512	; 0x200
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 f9e4 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003bba:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003bbe:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8003bc2:	4a2a      	ldr	r2, [pc, #168]	; (8003c6c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3f0>)
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f000 f9f3 	bl	8003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003bca:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003bce:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8003bd2:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 f9d3 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003bdc:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 8003be0:	f107 030c 	add.w	r3, r7, #12
 8003be4:	4611      	mov	r1, r2
 8003be6:	6818      	ldr	r0, [r3, #0]
 8003be8:	f00d faed 	bl	80111c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003bec:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f00d fadc 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003bf6:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f00d fad7 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003c00:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003c04:	4618      	mov	r0, r3
 8003c06:	f00d fad2 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f00d facd 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003c14:	e120      	b.n	8003e58 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	case ONLY_TIME_NO_SEC:
		RetStr = hour + ":" + minute;
 8003c16:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003c1a:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8003c1e:	4a13      	ldr	r2, [pc, #76]	; (8003c6c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3f0>)
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 f99b 	bl	8003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003c26:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003c2a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003c2e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 f9a5 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003c38:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8003c3c:	f107 030c 	add.w	r3, r7, #12
 8003c40:	4611      	mov	r1, r2
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	f00d fabf 	bl	80111c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003c48:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f00d faae 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003c52:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003c56:	4618      	mov	r0, r3
 8003c58:	f00d faa9 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003c5c:	e0fc      	b.n	8003e58 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
 8003c5e:	bf00      	nop
 8003c60:	08012260 	.word	0x08012260
 8003c64:	0801226c 	.word	0x0801226c
 8003c68:	51eb851f 	.word	0x51eb851f
 8003c6c:	08012270 	.word	0x08012270
	case ONLY_DATE:
		RetStr = day + "/" + month + "/" + year;
 8003c70:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8003c74:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003c78:	4a8d      	ldr	r2, [pc, #564]	; (8003eb0 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 f96e 	bl	8003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003c80:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8003c84:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003c88:	f507 7124 	add.w	r1, r7, #656	; 0x290
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 f978 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003c92:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c96:	f507 711e 	add.w	r1, r7, #632	; 0x278
 8003c9a:	4a85      	ldr	r2, [pc, #532]	; (8003eb0 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 f987 	bl	8003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003ca2:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003ca6:	f107 021c 	add.w	r2, r7, #28
 8003caa:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 f967 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003cb4:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8003cb8:	f107 030c 	add.w	r3, r7, #12
 8003cbc:	4611      	mov	r1, r2
 8003cbe:	6818      	ldr	r0, [r3, #0]
 8003cc0:	f00d fa81 	bl	80111c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003cc4:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f00d fa70 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003cce:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f00d fa6b 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003cd8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f00d fa66 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003ce2:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f00d fa61 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003cec:	e0b4      	b.n	8003e58 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	case ONLY_DATE_NO_YEAR:
		RetStr = day + "/" + month;
 8003cee:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8003cf2:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003cf6:	4a6e      	ldr	r2, [pc, #440]	; (8003eb0 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 f92f 	bl	8003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003cfe:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8003d02:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003d06:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 f939 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003d10:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8003d14:	f107 030c 	add.w	r3, r7, #12
 8003d18:	4611      	mov	r1, r2
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	f00d fa53 	bl	80111c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003d20:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8003d24:	4618      	mov	r0, r3
 8003d26:	f00d fa42 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003d2a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f00d fa3d 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003d34:	e090      	b.n	8003e58 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	case TIME_DATE:
		RetStr = hour + ":" + minute + ":" + second + " " + day + "/" + month + "/" + year;
 8003d36:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8003d3a:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8003d3e:	4a5d      	ldr	r2, [pc, #372]	; (8003eb4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x638>)
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 f90b 	bl	8003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003d46:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8003d4a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003d4e:	f507 716c 	add.w	r1, r7, #944	; 0x3b0
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 f915 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003d58:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8003d5c:	f507 7166 	add.w	r1, r7, #920	; 0x398
 8003d60:	4a54      	ldr	r2, [pc, #336]	; (8003eb4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x638>)
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 f924 	bl	8003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003d68:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8003d6c:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8003d70:	f507 7160 	add.w	r1, r7, #896	; 0x380
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 f904 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003d7a:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8003d7e:	f507 715a 	add.w	r1, r7, #872	; 0x368
 8003d82:	4a4d      	ldr	r2, [pc, #308]	; (8003eb8 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x63c>)
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 f913 	bl	8003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003d8a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8003d8e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003d92:	f507 7154 	add.w	r1, r7, #848	; 0x350
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 f8f3 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003d9c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003da0:	f507 714e 	add.w	r1, r7, #824	; 0x338
 8003da4:	4a42      	ldr	r2, [pc, #264]	; (8003eb0 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 f902 	bl	8003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003dac:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003db0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003db4:	f507 7148 	add.w	r1, r7, #800	; 0x320
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 f8e2 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003dbe:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003dc2:	f507 7142 	add.w	r1, r7, #776	; 0x308
 8003dc6:	4a3a      	ldr	r2, [pc, #232]	; (8003eb0 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 f8f1 	bl	8003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003dce:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8003dd2:	f107 021c 	add.w	r2, r7, #28
 8003dd6:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 f8d1 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003de0:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8003de4:	f107 030c 	add.w	r3, r7, #12
 8003de8:	4611      	mov	r1, r2
 8003dea:	6818      	ldr	r0, [r3, #0]
 8003dec:	f00d f9eb 	bl	80111c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003df0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8003df4:	4618      	mov	r0, r3
 8003df6:	f00d f9da 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003dfa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f00d f9d5 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e04:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f00d f9d0 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e0e:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003e12:	4618      	mov	r0, r3
 8003e14:	f00d f9cb 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e18:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f00d f9c6 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e22:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8003e26:	4618      	mov	r0, r3
 8003e28:	f00d f9c1 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e2c:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8003e30:	4618      	mov	r0, r3
 8003e32:	f00d f9bc 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e36:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f00d f9b7 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e40:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8003e44:	4618      	mov	r0, r3
 8003e46:	f00d f9b2 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e4a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f00d f9ad 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003e54:	e000      	b.n	8003e58 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	default:
		break;
 8003e56:	bf00      	nop
	}
	return RetStr;
 8003e58:	bf00      	nop
	String second, minute, hour, day, month, year, RetStr = "Wrong type";
 8003e5a:	f107 031c 	add.w	r3, r7, #28
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f00d f9a5 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f00d f9a0 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e6e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e72:	4618      	mov	r0, r3
 8003e74:	f00d f99b 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e78:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f00d f996 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e82:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003e86:	4618      	mov	r0, r3
 8003e88:	f00d f991 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e8c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003e90:	4618      	mov	r0, r3
 8003e92:	f00d f98c 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return RetStr;
 8003e96:	f107 030c 	add.w	r3, r7, #12
 8003e9a:	f107 020c 	add.w	r2, r7, #12
 8003e9e:	6812      	ldr	r2, [r2, #0]
 8003ea0:	601a      	str	r2, [r3, #0]
}
 8003ea2:	f107 030c 	add.w	r3, r7, #12
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	f507 7773 	add.w	r7, r7, #972	; 0x3cc
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd90      	pop	{r4, r7, pc}
 8003eb0:	08012274 	.word	0x08012274
 8003eb4:	08012270 	.word	0x08012270
 8003eb8:	08012278 	.word	0x08012278

08003ebc <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8003ebc:	b408      	push	{r3}
 8003ebe:	b590      	push	{r4, r7, lr}
 8003ec0:	b088      	sub	sp, #32
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	60f8      	str	r0, [r7, #12]
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	3307      	adds	r3, #7
 8003ece:	3307      	adds	r3, #7
 8003ed0:	08db      	lsrs	r3, r3, #3
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	ebad 0d03 	sub.w	sp, sp, r3
 8003ed8:	466b      	mov	r3, sp
 8003eda:	3307      	adds	r3, #7
 8003edc:	08db      	lsrs	r3, r3, #3
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 8003ee2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ee6:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 8003ee8:	68bc      	ldr	r4, [r7, #8]
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eee:	6879      	ldr	r1, [r7, #4]
 8003ef0:	69f8      	ldr	r0, [r7, #28]
 8003ef2:	47a0      	blx	r4
 8003ef4:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	69fa      	ldr	r2, [r7, #28]
 8003efa:	18d4      	adds	r4, r2, r3
 8003efc:	f107 0314 	add.w	r3, r7, #20
 8003f00:	4618      	mov	r0, r3
 8003f02:	f00d f823 	bl	8010f4c <_ZNSaIcEC1Ev>
 8003f06:	f107 0314 	add.w	r3, r7, #20
 8003f0a:	4622      	mov	r2, r4
 8003f0c:	69f9      	ldr	r1, [r7, #28]
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 f865 	bl	8003fde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 8003f14:	f107 0314 	add.w	r3, r7, #20
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f00d f818 	bl	8010f4e <_ZNSaIcED1Ev>
    }
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	3720      	adds	r7, #32
 8003f22:	46bd      	mov	sp, r7
 8003f24:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003f28:	b001      	add	sp, #4
 8003f2a:	4770      	bx	lr

08003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f00d fa37 	bl	80113b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 8003f42:	4603      	mov	r3, r0
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 f865 	bl	8004014 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f00d f913 	bl	801117a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
 8003f68:	68b9      	ldr	r1, [r7, #8]
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f00d fa83 	bl	8011476 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__rhs);
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f00d fa52 	bl	801141c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
      return __str;
 8003f78:	bf00      	nop
    }
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b084      	sub	sp, #16
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	60f8      	str	r0, [r7, #12]
 8003f8a:	60b9      	str	r1, [r7, #8]
 8003f8c:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	68b8      	ldr	r0, [r7, #8]
 8003f92:	f00d fa3d 	bl	8011410 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8003f96:	4603      	mov	r3, r0
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 f83b 	bl	8004014 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f00d f8e9 	bl	801117a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 8003fbc:	6879      	ldr	r1, [r7, #4]
 8003fbe:	68b8      	ldr	r0, [r7, #8]
 8003fc0:	f00d fa2c 	bl	801141c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 f824 	bl	8004014 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	4619      	mov	r1, r3
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f00d f8d2 	bl	801117a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 8003fde:	b590      	push	{r4, r7, lr}
 8003fe0:	b085      	sub	sp, #20
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	607a      	str	r2, [r7, #4]
 8003fea:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 8003fec:	68fc      	ldr	r4, [r7, #12]
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f00c ffe5 	bl	8010fbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	4620      	mov	r0, r4
 8003ffc:	f00d fa39 	bl	8011472 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	68b9      	ldr	r1, [r7, #8]
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 f80f 	bl	8004028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4618      	mov	r0, r3
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	bd90      	pop	{r4, r7, pc}

08004014 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4618      	mov	r0, r3
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr

08004028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	68b9      	ldr	r1, [r7, #8]
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 f804 	bl	8004046 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 800403e:	bf00      	nop
 8004040:	3718      	adds	r7, #24
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 8004046:	b590      	push	{r4, r7, lr}
 8004048:	b087      	sub	sp, #28
 800404a:	af00      	add	r7, sp, #0
 800404c:	60f8      	str	r0, [r7, #12]
 800404e:	60b9      	str	r1, [r7, #8]
 8004050:	607a      	str	r2, [r7, #4]
 8004052:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 8004054:	4623      	mov	r3, r4
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	68b9      	ldr	r1, [r7, #8]
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f000 f804 	bl	8004068 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 8004060:	bf00      	nop
 8004062:	371c      	adds	r7, #28
 8004064:	46bd      	mov	sp, r7
 8004066:	bd90      	pop	{r4, r7, pc}

08004068 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
 8004074:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8004076:	68b8      	ldr	r0, [r7, #8]
 8004078:	f000 f83e 	bl	80040f8 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d005      	beq.n	800408e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	429a      	cmp	r2, r3
 8004088:	d001      	beq.n	800408e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800408a:	2301      	movs	r3, #1
 800408c:	e000      	b.n	8004090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 800408e:	2300      	movs	r3, #0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8004094:	4817      	ldr	r0, [pc, #92]	; (80040f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 8004096:	f00c ff5e 	bl	8010f56 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	68b8      	ldr	r0, [r7, #8]
 800409e:	f000 f843 	bl	8004128 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 80040a2:	4603      	mov	r3, r0
 80040a4:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2b0f      	cmp	r3, #15
 80040aa:	d910      	bls.n	80040ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 80040ac:	f107 0314 	add.w	r3, r7, #20
 80040b0:	2200      	movs	r2, #0
 80040b2:	4619      	mov	r1, r3
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f00c ff8b 	bl	8010fd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80040ba:	4603      	mov	r3, r0
 80040bc:	4619      	mov	r1, r3
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f00c ff79 	bl	8010fb6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	4619      	mov	r1, r3
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f00c ff7a 	bl	8010fc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f00c ff73 	bl	8010fba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80040d4:	4603      	mov	r3, r0
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	68b9      	ldr	r1, [r7, #8]
 80040da:	4618      	mov	r0, r3
 80040dc:	f00c ffd5 	bl	801108a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	4619      	mov	r1, r3
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f00c ff6e 	bl	8010fc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 80040ea:	bf00      	nop
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	0801227c 	.word	0x0801227c

080040f8 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	bf0c      	ite	eq
 8004106:	2301      	moveq	r3, #1
 8004108:	2300      	movne	r3, #0
 800410a:	b2db      	uxtb	r3, r3
 800410c:	4618      	mov	r0, r3
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	bc80      	pop	{r7}
 8004114:	4770      	bx	lr

08004116 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800411e:	4618      	mov	r0, r3
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	bc80      	pop	{r7}
 8004126:	4770      	bx	lr

08004128 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8004128:	b5b0      	push	{r4, r5, r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8004132:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8004134:	1d3b      	adds	r3, r7, #4
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff ffed 	bl	8004116 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 800413c:	462a      	mov	r2, r5
 800413e:	6839      	ldr	r1, [r7, #0]
 8004140:	4620      	mov	r0, r4
 8004142:	f000 f805 	bl	8004150 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8004146:	4603      	mov	r3, r0
    }
 8004148:	4618      	mov	r0, r3
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bdb0      	pop	{r4, r5, r7, pc}

08004150 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	1ad3      	subs	r3, r2, r3
    }
 8004162:	4618      	mov	r0, r3
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	bc80      	pop	{r7}
 800416a:	4770      	bx	lr

0800416c <_Z7DelayNsm>:
#include "Display.h"
#include "tim.h"


void DelayNs(uint32_t NsDelay)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
	if(NsDelay < 16)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b0f      	cmp	r3, #15
 8004178:	d801      	bhi.n	800417e <_Z7DelayNsm+0x12>
	{
		NsDelay = 16;
 800417a:	2310      	movs	r3, #16
 800417c:	607b      	str	r3, [r7, #4]
	}
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800417e:	4b0a      	ldr	r3, [pc, #40]	; (80041a8 <_Z7DelayNsm+0x3c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2200      	movs	r2, #0
 8004184:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim2) < NsDelay);
 8004186:	4b08      	ldr	r3, [pc, #32]	; (80041a8 <_Z7DelayNsm+0x3c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	429a      	cmp	r2, r3
 8004190:	bf8c      	ite	hi
 8004192:	2301      	movhi	r3, #1
 8004194:	2300      	movls	r3, #0
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	d000      	beq.n	800419e <_Z7DelayNsm+0x32>
 800419c:	e7f3      	b.n	8004186 <_Z7DelayNsm+0x1a>
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr
 80041a8:	200007a0 	.word	0x200007a0

080041ac <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv>:

uint8_t u8g2_gpio_and_delay_stm32(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	607b      	str	r3, [r7, #4]
 80041b6:	460b      	mov	r3, r1
 80041b8:	72fb      	strb	r3, [r7, #11]
 80041ba:	4613      	mov	r3, r2
 80041bc:	72bb      	strb	r3, [r7, #10]

	switch(msg)
 80041be:	7afb      	ldrb	r3, [r7, #11]
 80041c0:	3b28      	subs	r3, #40	; 0x28
 80041c2:	2b23      	cmp	r3, #35	; 0x23
 80041c4:	d86b      	bhi.n	800429e <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xf2>
 80041c6:	a201      	add	r2, pc, #4	; (adr r2, 80041cc <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x20>)
 80041c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041cc:	080042a9 	.word	0x080042a9
 80041d0:	0800426b 	.word	0x0800426b
 80041d4:	08004261 	.word	0x08004261
 80041d8:	0800425d 	.word	0x0800425d
 80041dc:	080042a9 	.word	0x080042a9
 80041e0:	0800429f 	.word	0x0800429f
 80041e4:	0800429f 	.word	0x0800429f
 80041e8:	0800429f 	.word	0x0800429f
 80041ec:	0800429f 	.word	0x0800429f
 80041f0:	0800429f 	.word	0x0800429f
 80041f4:	0800429f 	.word	0x0800429f
 80041f8:	0800429f 	.word	0x0800429f
 80041fc:	0800429f 	.word	0x0800429f
 8004200:	0800429f 	.word	0x0800429f
 8004204:	0800429f 	.word	0x0800429f
 8004208:	0800429f 	.word	0x0800429f
 800420c:	0800429f 	.word	0x0800429f
 8004210:	0800429f 	.word	0x0800429f
 8004214:	0800429f 	.word	0x0800429f
 8004218:	0800429f 	.word	0x0800429f
 800421c:	0800429f 	.word	0x0800429f
 8004220:	0800429f 	.word	0x0800429f
 8004224:	0800429f 	.word	0x0800429f
 8004228:	0800429f 	.word	0x0800429f
 800422c:	0800429f 	.word	0x0800429f
 8004230:	0800429f 	.word	0x0800429f
 8004234:	0800429f 	.word	0x0800429f
 8004238:	0800429f 	.word	0x0800429f
 800423c:	0800429f 	.word	0x0800429f
 8004240:	0800429f 	.word	0x0800429f
 8004244:	0800429f 	.word	0x0800429f
 8004248:	0800429f 	.word	0x0800429f
 800424c:	0800429f 	.word	0x0800429f
 8004250:	08004275 	.word	0x08004275
 8004254:	08004283 	.word	0x08004283
 8004258:	08004291 	.word	0x08004291
		case U8X8_MSG_DELAY_NANO:			// delay arg_int * 1 nano second
			//		DelayNs(arg_int);
			break;
		case U8X8_MSG_DELAY_100NANO:		// delay arg_int * 100 nano seconds
			//		DelayNs(arg_int);
			__NOP();
 800425c:	bf00      	nop
			break;
 800425e:	e024      	b.n	80042aa <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
			//Function which delays 10us
		case U8X8_MSG_DELAY_10MICRO:
			DelayNs(10000);
 8004260:	f242 7010 	movw	r0, #10000	; 0x2710
 8004264:	f7ff ff82 	bl	800416c <_Z7DelayNsm>
			//		for (uint16_t n = 0; n < 320; n++)
			//		{
			//			__NOP();
			//		}
			break;
 8004268:	e01f      	b.n	80042aa <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		case U8X8_MSG_DELAY_MILLI:			// delay arg_int * 1 milli second
			HAL_Delay(arg_int);
 800426a:	7abb      	ldrb	r3, [r7, #10]
 800426c:	4618      	mov	r0, r3
 800426e:	f007 ff8d 	bl	800c18c <HAL_Delay>
			break;					// arg_int=1: delay by 5us, arg_int = 4: delay by 1.25us
 8004272:	e01a      	b.n	80042aa <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
			//		//	case U8X8_MSG_GPIO_D1:				// D1 or SPI data pin: Output level in arg_int
			//	case U8X8_MSG_GPIO_SPI_DATA:
			//		HAL_GPIO_WritePin(Mosi_GPIO_Port, Mosi_Pin, (GPIO_PinState)arg_int);
			//		break;
		case U8X8_MSG_GPIO_CS:				// CS (chip select) pin: Output level in arg_int
			HAL_GPIO_WritePin(LcdCS_GPIO_Port, LcdCS_Pin, (GPIO_PinState)arg_int);
 8004274:	7abb      	ldrb	r3, [r7, #10]
 8004276:	461a      	mov	r2, r3
 8004278:	2108      	movs	r1, #8
 800427a:	480e      	ldr	r0, [pc, #56]	; (80042b4 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 800427c:	f009 fa12 	bl	800d6a4 <HAL_GPIO_WritePin>
			break;
 8004280:	e013      	b.n	80042aa <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		case U8X8_MSG_GPIO_DC:				// DC (data/cmd, A0, register select) pin: Output level in arg_int
			HAL_GPIO_WritePin(LcdA0_GPIO_Port, LcdA0_Pin, (GPIO_PinState)arg_int);
 8004282:	7abb      	ldrb	r3, [r7, #10]
 8004284:	461a      	mov	r2, r3
 8004286:	2110      	movs	r1, #16
 8004288:	480a      	ldr	r0, [pc, #40]	; (80042b4 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 800428a:	f009 fa0b 	bl	800d6a4 <HAL_GPIO_WritePin>
			break;
 800428e:	e00c      	b.n	80042aa <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		case U8X8_MSG_GPIO_RESET:			// Reset pin: Output level in arg_int
			HAL_GPIO_WritePin(LcdReset_GPIO_Port, LcdReset_Pin, (GPIO_PinState)arg_int);
 8004290:	7abb      	ldrb	r3, [r7, #10]
 8004292:	461a      	mov	r2, r3
 8004294:	2140      	movs	r1, #64	; 0x40
 8004296:	4807      	ldr	r0, [pc, #28]	; (80042b4 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 8004298:	f009 fa04 	bl	800d6a4 <HAL_GPIO_WritePin>
			break;
 800429c:	e005      	b.n	80042aa <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		default:
			u8x8_SetGPIOResult(u8x8, 1);			// default return value
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			break;
 80042a6:	e000      	b.n	80042aa <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
			break;							// can be used to setup pins
 80042a8:	bf00      	nop
	}
	return 1; // command processed successfully. // @suppress("Return with parenthesis")
 80042aa:	2301      	movs	r3, #1
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40010800 	.word	0x40010800

080042b8 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8g2, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	607b      	str	r3, [r7, #4]
 80042c2:	460b      	mov	r3, r1
 80042c4:	72fb      	strb	r3, [r7, #11]
 80042c6:	4613      	mov	r3, r2
 80042c8:	72bb      	strb	r3, [r7, #10]
	//	uint8_t byte;
	//	uint8_t *data;
	switch(msg)
 80042ca:	7afb      	ldrb	r3, [r7, #11]
 80042cc:	3b14      	subs	r3, #20
 80042ce:	2b0c      	cmp	r3, #12
 80042d0:	d848      	bhi.n	8004364 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xac>
 80042d2:	a201      	add	r2, pc, #4	; (adr r2, 80042d8 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0x20>)
 80042d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d8:	0800431d 	.word	0x0800431d
 80042dc:	08004365 	.word	0x08004365
 80042e0:	08004365 	.word	0x08004365
 80042e4:	0800430d 	.word	0x0800430d
 80042e8:	0800433d 	.word	0x0800433d
 80042ec:	08004351 	.word	0x08004351
 80042f0:	08004365 	.word	0x08004365
 80042f4:	08004365 	.word	0x08004365
 80042f8:	08004365 	.word	0x08004365
 80042fc:	08004365 	.word	0x08004365
 8004300:	08004365 	.word	0x08004365
 8004304:	08004365 	.word	0x08004365
 8004308:	0800432f 	.word	0x0800432f
			//			byte = *data;
			//			data++;
			//			arg_int--;
			//			HAL_SPI_Transmit(&hspi1, &byte, 1, 100);
			//		}
			HAL_SPI_Transmit(&hspi1, (uint8_t *)arg_ptr, arg_int, 10);
 800430c:	7abb      	ldrb	r3, [r7, #10]
 800430e:	b29a      	uxth	r2, r3
 8004310:	230a      	movs	r3, #10
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	4817      	ldr	r0, [pc, #92]	; (8004374 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xbc>)
 8004316:	f00b fa29 	bl	800f76c <HAL_SPI_Transmit>
			break;
 800431a:	e025      	b.n	8004368 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_INIT:
			u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_disable_level);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	785b      	ldrb	r3, [r3, #1]
 8004322:	461a      	mov	r2, r3
 8004324:	2149      	movs	r1, #73	; 0x49
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f7fe ff2c 	bl	8003184 <u8x8_gpio_call>
			break;
 800432c:	e01c      	b.n	8004368 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_SET_DC:
			u8x8_gpio_SetDC(u8g2, arg_int);
 800432e:	7abb      	ldrb	r3, [r7, #10]
 8004330:	461a      	mov	r2, r3
 8004332:	214a      	movs	r1, #74	; 0x4a
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f7fe ff25 	bl	8003184 <u8x8_gpio_call>
			break;
 800433a:	e015      	b.n	8004368 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_START_TRANSFER:
			u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_enable_level);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	2149      	movs	r1, #73	; 0x49
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f7fe ff1c 	bl	8003184 <u8x8_gpio_call>
			__NOP();
 800434c:	bf00      	nop
			//		u8g2->gpio_and_delay_cb(u8g2, U8X8_MSG_DELAY_NANO, u8g2->display_info->post_chip_enable_wait_ns, NULL);
			break;
 800434e:	e00b      	b.n	8004368 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_END_TRANSFER:
			//		u8g2->gpio_and_delay_cb(u8g2, U8X8_MSG_DELAY_NANO, u8g2->display_info->pre_chip_disable_wait_ns, NULL);
			__NOP();
 8004350:	bf00      	nop
			u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_disable_level);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	785b      	ldrb	r3, [r3, #1]
 8004358:	461a      	mov	r2, r3
 800435a:	2149      	movs	r1, #73	; 0x49
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f7fe ff11 	bl	8003184 <u8x8_gpio_call>
			break;
 8004362:	e001      	b.n	8004368 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		default:
			return 0;
 8004364:	2300      	movs	r3, #0
 8004366:	e000      	b.n	800436a <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb2>
	}
	return 1;
 8004368:	2301      	movs	r3, #1
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	20000748 	.word	0x20000748

08004378 <_ZN13NHDST7565_LCD12TEXT_4_WRITEC1Ev>:
	{
		String text;
		uint8_t textLen;
		uint8_t textHigh;
		const uint8_t *textFont;
	}TEXT_4_WRITE;
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4618      	mov	r0, r3
 8004384:	f00c fef2 	bl	801116c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4618      	mov	r0, r3
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
	...

08004394 <_ZN13NHDST7565_LCDC1Eh>:


NHDST7565_LCD::NHDST7565_LCD(uint8_t Rotation)
 8004394:	b5b0      	push	{r4, r5, r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	460b      	mov	r3, r1
 800439e:	70fb      	strb	r3, [r7, #3]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff ffe8 	bl	8004378 <_ZN13NHDST7565_LCD12TEXT_4_WRITEC1Ev>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2020 	strb.w	r2, [r3, #32]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a0a      	ldr	r2, [pc, #40]	; (80043dc <_ZN13NHDST7565_LCDC1Eh+0x48>)
 80043b4:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 80043b8:	4615      	mov	r5, r2
 80043ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80043c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
{
	changeDisplayDisposition(Rotation);
 80043c6:	78fb      	ldrb	r3, [r7, #3]
 80043c8:	4619      	mov	r1, r3
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f808 	bl	80043e0 <_ZN13NHDST7565_LCD24changeDisplayDispositionEh>
}
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bdb0      	pop	{r4, r5, r7, pc}
 80043da:	bf00      	nop
 80043dc:	080122a8 	.word	0x080122a8

080043e0 <_ZN13NHDST7565_LCD24changeDisplayDispositionEh>:

void NHDST7565_LCD::changeDisplayDisposition(uint8_t NewRotation)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	460b      	mov	r3, r1
 80043ea:	70fb      	strb	r3, [r7, #3]
	dispParams.rotation = NewRotation;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	78fa      	ldrb	r2, [r7, #3]
 80043f0:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	if(dispParams.rotation == VERTICAL_1 || dispParams.rotation == VERTICAL_2)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d004      	beq.n	8004408 <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x28>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8004404:	2b03      	cmp	r3, #3
 8004406:	d108      	bne.n	800441a <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x3a>
	{
		dispParams.width = 64;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2240      	movs	r2, #64	; 0x40
 800440c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		dispParams.high = 128;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2280      	movs	r2, #128	; 0x80
 8004414:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 8004418:	e007      	b.n	800442a <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x4a>
	}
	else
	{
		dispParams.width = 128;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2280      	movs	r2, #128	; 0x80
 800441e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		dispParams.high = 64;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2240      	movs	r2, #64	; 0x40
 8004426:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
	}
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	bc80      	pop	{r7}
 8004432:	4770      	bx	lr

08004434 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>:


void NHDST7565_LCD::assignTextParams(String Text, const uint8_t *Font)
{
 8004434:	b590      	push	{r4, r7, lr}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
	textToWrite.textLen = 0;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	761a      	strb	r2, [r3, #24]
	textToWrite.textHigh = 0;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	765a      	strb	r2, [r3, #25]
	textToWrite.text = "";
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4930      	ldr	r1, [pc, #192]	; (8004510 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xdc>)
 8004450:	4618      	mov	r0, r3
 8004452:	f00c ff90 	bl	8011376 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	textToWrite.textFont = Font;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	61da      	str	r2, [r3, #28]
	//	if(textToWrite.textFont != Font)
	//	{
	u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	4619      	mov	r1, r3
 8004468:	4610      	mov	r0, r2
 800446a:	f7fd fdeb 	bl	8002044 <u8g2_SetFont>
	textToWrite.textHigh = u8g2_GetAscent(&U8G2_Display);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f993 30a2 	ldrsb.w	r3, [r3, #162]	; 0xa2
 8004474:	b2da      	uxtb	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	765a      	strb	r2, [r3, #25]
	//	}
	if(Text != "")
 800447a:	4925      	ldr	r1, [pc, #148]	; (8004510 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xdc>)
 800447c:	68b8      	ldr	r0, [r7, #8]
 800447e:	f000 fda7 	bl	8004fd0 <_ZStneIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00e      	beq.n	80044a6 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0x72>
		textToWrite.textLen = u8g2_GetStrWidth(&U8G2_Display, Text.c_str());
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800448e:	68b8      	ldr	r0, [r7, #8]
 8004490:	f00c ffda 	bl	8011448 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004494:	4603      	mov	r3, r0
 8004496:	4619      	mov	r1, r3
 8004498:	4620      	mov	r0, r4
 800449a:	f7fd fe3d 	bl	8002118 <u8g2_GetStrWidth>
 800449e:	4603      	mov	r3, r0
 80044a0:	461a      	mov	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	761a      	strb	r2, [r3, #24]

	if(textToWrite.textLen < dispParams.width)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	7e1a      	ldrb	r2, [r3, #24]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d205      	bcs.n	80044c0 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0x8c>
	{
		textToWrite.text = Text;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	68b9      	ldr	r1, [r7, #8]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f00c fe7e 	bl	80111ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		textToWrite.textFont = displayFonts[W_5_H_8];
		u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
		textToWrite.textLen = u8g2_GetStrWidth(&U8G2_Display, Text.c_str());
		textToWrite.textHigh = u8g2_GetAscent(&U8G2_Display);
	}
}
 80044be:	e022      	b.n	8004506 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xd2>
		textToWrite.textFont = displayFonts[W_5_H_8];
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	61da      	str	r2, [r3, #28]
		u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	4619      	mov	r1, r3
 80044d6:	4610      	mov	r0, r2
 80044d8:	f7fd fdb4 	bl	8002044 <u8g2_SetFont>
		textToWrite.textLen = u8g2_GetStrWidth(&U8G2_Display, Text.c_str());
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80044e2:	68b8      	ldr	r0, [r7, #8]
 80044e4:	f00c ffb0 	bl	8011448 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80044e8:	4603      	mov	r3, r0
 80044ea:	4619      	mov	r1, r3
 80044ec:	4620      	mov	r0, r4
 80044ee:	f7fd fe13 	bl	8002118 <u8g2_GetStrWidth>
 80044f2:	4603      	mov	r3, r0
 80044f4:	461a      	mov	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	761a      	strb	r2, [r3, #24]
		textToWrite.textHigh = u8g2_GetAscent(&U8G2_Display);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f993 30a2 	ldrsb.w	r3, [r3, #162]	; 0xa2
 8004500:	b2da      	uxtb	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	765a      	strb	r2, [r3, #25]
}
 8004506:	bf00      	nop
 8004508:	3714      	adds	r7, #20
 800450a:	46bd      	mov	sp, r7
 800450c:	bd90      	pop	{r4, r7, pc}
 800450e:	bf00      	nop
 8004510:	080122c4 	.word	0x080122c4

08004514 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_>:

void NHDST7565_LCD::assignNewDrawCoord(uint8_t OldXPos, uint8_t OldYPos,
		uint8_t &NewXPos, uint8_t &NewYPos)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	607b      	str	r3, [r7, #4]
 800451e:	460b      	mov	r3, r1
 8004520:	72fb      	strb	r3, [r7, #11]
 8004522:	4613      	mov	r3, r2
 8004524:	72bb      	strb	r3, [r7, #10]
	if(OldXPos <= dispParams.width && OldYPos <= dispParams.high)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800452c:	7afa      	ldrb	r2, [r7, #11]
 800452e:	429a      	cmp	r2, r3
 8004530:	d80c      	bhi.n	800454c <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x38>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004538:	7aba      	ldrb	r2, [r7, #10]
 800453a:	429a      	cmp	r2, r3
 800453c:	d806      	bhi.n	800454c <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x38>
	{
		NewXPos = OldXPos;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	7afa      	ldrb	r2, [r7, #11]
 8004542:	701a      	strb	r2, [r3, #0]
		NewYPos = OldYPos;
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	7aba      	ldrb	r2, [r7, #10]
 8004548:	701a      	strb	r2, [r3, #0]
 800454a:	e0bb      	b.n	80046c4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
	}
	else if(OldXPos > dispParams.width && OldYPos <= dispParams.high)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004552:	7afa      	ldrb	r2, [r7, #11]
 8004554:	429a      	cmp	r2, r3
 8004556:	d930      	bls.n	80045ba <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa6>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800455e:	7aba      	ldrb	r2, [r7, #10]
 8004560:	429a      	cmp	r2, r3
 8004562:	d82a      	bhi.n	80045ba <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa6>
	{
		NewYPos = OldYPos;
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	7aba      	ldrb	r2, [r7, #10]
 8004568:	701a      	strb	r2, [r3, #0]
		switch(OldXPos)
 800456a:	7afb      	ldrb	r3, [r7, #11]
 800456c:	2b83      	cmp	r3, #131	; 0x83
 800456e:	d00b      	beq.n	8004588 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x74>
 8004570:	2b84      	cmp	r3, #132	; 0x84
 8004572:	d011      	beq.n	8004598 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x84>
 8004574:	2b82      	cmp	r3, #130	; 0x82
 8004576:	d117      	bne.n	80045a8 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x94>
		{
			case LEFT_POS:
				NewXPos = setTextLeft();
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 f901 	bl	8004780 <_ZN13NHDST7565_LCD11setTextLeftEv>
 800457e:	4603      	mov	r3, r0
 8004580:	461a      	mov	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	701a      	strb	r2, [r3, #0]
				break;
 8004586:	e017      	b.n	80045b8 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa4>
			case CENTER_POS:
				NewXPos = setTextCenter();
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 f905 	bl	8004798 <_ZN13NHDST7565_LCD13setTextCenterEv>
 800458e:	4603      	mov	r3, r0
 8004590:	461a      	mov	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	701a      	strb	r2, [r3, #0]
				break;
 8004596:	e00f      	b.n	80045b8 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa4>
			case RIGHT_POS:
				NewXPos = setTextRight();
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 f914 	bl	80047c6 <_ZN13NHDST7565_LCD12setTextRightEv>
 800459e:	4603      	mov	r3, r0
 80045a0:	461a      	mov	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	701a      	strb	r2, [r3, #0]
				break;
 80045a6:	e007      	b.n	80045b8 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa4>
			default:
				NewXPos = setTextCenter();
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 f8f5 	bl	8004798 <_ZN13NHDST7565_LCD13setTextCenterEv>
 80045ae:	4603      	mov	r3, r0
 80045b0:	461a      	mov	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	701a      	strb	r2, [r3, #0]
				break;
 80045b6:	bf00      	nop
	else if(OldXPos > dispParams.width && OldYPos <= dispParams.high)
 80045b8:	e084      	b.n	80046c4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
		}
	}
	else if(OldXPos <= dispParams.width && OldYPos > dispParams.high)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80045c0:	7afa      	ldrb	r2, [r7, #11]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d830      	bhi.n	8004628 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x114>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80045cc:	7aba      	ldrb	r2, [r7, #10]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d92a      	bls.n	8004628 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x114>
	{
		NewXPos = OldXPos;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	7afa      	ldrb	r2, [r7, #11]
 80045d6:	701a      	strb	r2, [r3, #0]
		switch(OldYPos)
 80045d8:	7abb      	ldrb	r3, [r7, #10]
 80045da:	2b47      	cmp	r3, #71	; 0x47
 80045dc:	d00b      	beq.n	80045f6 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xe2>
 80045de:	2b48      	cmp	r3, #72	; 0x48
 80045e0:	d011      	beq.n	8004606 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xf2>
 80045e2:	2b46      	cmp	r3, #70	; 0x46
 80045e4:	d117      	bne.n	8004616 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x102>
		{
			case TOP_POS:
				NewYPos = setTextTop();
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 f900 	bl	80047ec <_ZN13NHDST7565_LCD10setTextTopEv>
 80045ec:	4603      	mov	r3, r0
 80045ee:	461a      	mov	r2, r3
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	701a      	strb	r2, [r3, #0]
				break;
 80045f4:	e017      	b.n	8004626 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x112>
			case MIDDLE_POS:
				NewYPos = setTextMiddle();
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 f906 	bl	8004808 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 80045fc:	4603      	mov	r3, r0
 80045fe:	461a      	mov	r2, r3
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	701a      	strb	r2, [r3, #0]
				break;
 8004604:	e00f      	b.n	8004626 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x112>
			case BOTTOM_POS:
				NewYPos = setTextBottom();
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 f920 	bl	800484c <_ZN13NHDST7565_LCD13setTextBottomEv>
 800460c:	4603      	mov	r3, r0
 800460e:	461a      	mov	r2, r3
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	701a      	strb	r2, [r3, #0]
				break;
 8004614:	e007      	b.n	8004626 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x112>
			default:
				NewYPos = setTextMiddle();
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 f8f6 	bl	8004808 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 800461c:	4603      	mov	r3, r0
 800461e:	461a      	mov	r2, r3
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	701a      	strb	r2, [r3, #0]
				break;
 8004624:	bf00      	nop
	else if(OldXPos <= dispParams.width && OldYPos > dispParams.high)
 8004626:	e04d      	b.n	80046c4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
		}
	}
	else
	{
		switch(OldXPos)
 8004628:	7afb      	ldrb	r3, [r7, #11]
 800462a:	2b83      	cmp	r3, #131	; 0x83
 800462c:	d00b      	beq.n	8004646 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x132>
 800462e:	2b84      	cmp	r3, #132	; 0x84
 8004630:	d011      	beq.n	8004656 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x142>
 8004632:	2b82      	cmp	r3, #130	; 0x82
 8004634:	d117      	bne.n	8004666 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x152>
		{
			case LEFT_POS:
				NewXPos = setTextLeft();
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 f8a2 	bl	8004780 <_ZN13NHDST7565_LCD11setTextLeftEv>
 800463c:	4603      	mov	r3, r0
 800463e:	461a      	mov	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	701a      	strb	r2, [r3, #0]
				break;
 8004644:	e017      	b.n	8004676 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x162>
			case CENTER_POS:
				NewXPos = setTextCenter();
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 f8a6 	bl	8004798 <_ZN13NHDST7565_LCD13setTextCenterEv>
 800464c:	4603      	mov	r3, r0
 800464e:	461a      	mov	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	701a      	strb	r2, [r3, #0]
				break;
 8004654:	e00f      	b.n	8004676 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x162>
			case RIGHT_POS:
				NewXPos = setTextRight();
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 f8b5 	bl	80047c6 <_ZN13NHDST7565_LCD12setTextRightEv>
 800465c:	4603      	mov	r3, r0
 800465e:	461a      	mov	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	701a      	strb	r2, [r3, #0]
				break;
 8004664:	e007      	b.n	8004676 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x162>
			default:
				NewXPos = setTextCenter();
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 f896 	bl	8004798 <_ZN13NHDST7565_LCD13setTextCenterEv>
 800466c:	4603      	mov	r3, r0
 800466e:	461a      	mov	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	701a      	strb	r2, [r3, #0]
				break;
 8004674:	bf00      	nop
		}
		switch(OldYPos)
 8004676:	7abb      	ldrb	r3, [r7, #10]
 8004678:	2b47      	cmp	r3, #71	; 0x47
 800467a:	d00b      	beq.n	8004694 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x180>
 800467c:	2b48      	cmp	r3, #72	; 0x48
 800467e:	d011      	beq.n	80046a4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x190>
 8004680:	2b46      	cmp	r3, #70	; 0x46
 8004682:	d117      	bne.n	80046b4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1a0>
		{
			case TOP_POS:
				NewYPos = setTextTop();
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f000 f8b1 	bl	80047ec <_ZN13NHDST7565_LCD10setTextTopEv>
 800468a:	4603      	mov	r3, r0
 800468c:	461a      	mov	r2, r3
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	701a      	strb	r2, [r3, #0]
				break;
 8004692:	e017      	b.n	80046c4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
			case MIDDLE_POS:
				NewYPos = setTextMiddle();
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 f8b7 	bl	8004808 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 800469a:	4603      	mov	r3, r0
 800469c:	461a      	mov	r2, r3
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	701a      	strb	r2, [r3, #0]
				break;
 80046a2:	e00f      	b.n	80046c4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
			case BOTTOM_POS:
				NewYPos = setTextBottom();
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 f8d1 	bl	800484c <_ZN13NHDST7565_LCD13setTextBottomEv>
 80046aa:	4603      	mov	r3, r0
 80046ac:	461a      	mov	r2, r3
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	701a      	strb	r2, [r3, #0]
				break;
 80046b2:	e007      	b.n	80046c4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
			default:
				NewYPos = setTextMiddle();
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 f8a7 	bl	8004808 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 80046ba:	4603      	mov	r3, r0
 80046bc:	461a      	mov	r2, r3
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	701a      	strb	r2, [r3, #0]
				break;
 80046c2:	bf00      	nop
		}
	}
}
 80046c4:	bf00      	nop
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <_ZN13NHDST7565_LCD8setupLcdEv>:

void NHDST7565_LCD::setupLcd()
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
	const u8g2_cb_t *DisplayRotation;
	switch(dispParams.rotation)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 80046da:	2b03      	cmp	r3, #3
 80046dc:	d816      	bhi.n	800470c <_ZN13NHDST7565_LCD8setupLcdEv+0x40>
 80046de:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <_ZN13NHDST7565_LCD8setupLcdEv+0x18>)
 80046e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e4:	080046f5 	.word	0x080046f5
 80046e8:	080046fb 	.word	0x080046fb
 80046ec:	08004701 	.word	0x08004701
 80046f0:	08004707 	.word	0x08004707
	{
		case LANDSCAPE_1:
			DisplayRotation = &u8g2_cb_r2;
 80046f4:	4b1c      	ldr	r3, [pc, #112]	; (8004768 <_ZN13NHDST7565_LCD8setupLcdEv+0x9c>)
 80046f6:	60fb      	str	r3, [r7, #12]
			break;
 80046f8:	e00b      	b.n	8004712 <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		case LANDSCAPE_2:
			DisplayRotation = &u8g2_cb_r0;
 80046fa:	4b1c      	ldr	r3, [pc, #112]	; (800476c <_ZN13NHDST7565_LCD8setupLcdEv+0xa0>)
 80046fc:	60fb      	str	r3, [r7, #12]
			break;
 80046fe:	e008      	b.n	8004712 <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		case VERTICAL_1:
			DisplayRotation = &u8g2_cb_r1;
 8004700:	4b1b      	ldr	r3, [pc, #108]	; (8004770 <_ZN13NHDST7565_LCD8setupLcdEv+0xa4>)
 8004702:	60fb      	str	r3, [r7, #12]
			break;
 8004704:	e005      	b.n	8004712 <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		case VERTICAL_2:
			DisplayRotation = &u8g2_cb_r3;
 8004706:	4b1b      	ldr	r3, [pc, #108]	; (8004774 <_ZN13NHDST7565_LCD8setupLcdEv+0xa8>)
 8004708:	60fb      	str	r3, [r7, #12]
			break;
 800470a:	e002      	b.n	8004712 <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		default:
			DisplayRotation = &u8g2_cb_r0;
 800470c:	4b17      	ldr	r3, [pc, #92]	; (800476c <_ZN13NHDST7565_LCD8setupLcdEv+0xa0>)
 800470e:	60fb      	str	r3, [r7, #12]
			break;
 8004710:	bf00      	nop
	}
	u8g2_Setup_st7565_nhd_c12864_f(&U8G2_Display, DisplayRotation, u8x8_byte_stm32_hw_spi, u8g2_gpio_and_delay_stm32);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004718:	4b17      	ldr	r3, [pc, #92]	; (8004778 <_ZN13NHDST7565_LCD8setupLcdEv+0xac>)
 800471a:	4a18      	ldr	r2, [pc, #96]	; (800477c <_ZN13NHDST7565_LCD8setupLcdEv+0xb0>)
 800471c:	68f9      	ldr	r1, [r7, #12]
 800471e:	f7fc febb 	bl	8001498 <u8g2_Setup_st7565_nhd_c12864_f>
	u8g2_InitDisplay(&U8G2_Display); // send init sequence to the display, display is in sleep mode after this, // @suppress("C-Style cast instead of C++ cast")
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	3324      	adds	r3, #36	; 0x24
 8004726:	4618      	mov	r0, r3
 8004728:	f7fe fcfd 	bl	8003126 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&U8G2_Display, 0); // wake up display // @suppress("C-Style cast instead of C++ cast")
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	3324      	adds	r3, #36	; 0x24
 8004730:	2100      	movs	r1, #0
 8004732:	4618      	mov	r0, r3
 8004734:	f7fe fd06 	bl	8003144 <u8x8_SetPowerSave>
	u8g2_SetFontMode(&U8G2_Display, 1);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3324      	adds	r3, #36	; 0x24
 800473c:	2101      	movs	r1, #1
 800473e:	4618      	mov	r0, r3
 8004740:	f7fd fb24 	bl	8001d8c <u8g2_SetFontMode>
	u8g2_SetDrawColor(&U8G2_Display, figureColorSetted);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004750:	4619      	mov	r1, r3
 8004752:	4610      	mov	r0, r2
 8004754:	f7fd fe4c 	bl	80023f0 <u8g2_SetDrawColor>
	clearScreen();
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f8a6 	bl	80048aa <_ZN13NHDST7565_LCD11clearScreenEv>
}
 800475e:	bf00      	nop
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	08015430 	.word	0x08015430
 800476c:	08015418 	.word	0x08015418
 8004770:	08015424 	.word	0x08015424
 8004774:	0801543c 	.word	0x0801543c
 8004778:	080041ad 	.word	0x080041ad
 800477c:	080042b9 	.word	0x080042b9

08004780 <_ZN13NHDST7565_LCD11setTextLeftEv>:


uint8_t NHDST7565_LCD::setTextLeft()
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8004788:	2300      	movs	r3, #0
 800478a:	73fb      	strb	r3, [r7, #15]
	//	TextLen = u8g2_GetStrWidth(U8G2_Display, textToWrite.c_str());
	return NewPos; // @suppress("Return with parenthesis")
 800478c:	7bfb      	ldrb	r3, [r7, #15]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	bc80      	pop	{r7}
 8004796:	4770      	bx	lr

08004798 <_ZN13NHDST7565_LCD13setTextCenterEv>:

uint8_t NHDST7565_LCD::setTextCenter()
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 80047a0:	2300      	movs	r3, #0
 80047a2:	73fb      	strb	r3, [r7, #15]
	NewPos = (dispParams.width - textToWrite.textLen) / 2;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80047aa:	461a      	mov	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	7e1b      	ldrb	r3, [r3, #24]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	0fda      	lsrs	r2, r3, #31
 80047b4:	4413      	add	r3, r2
 80047b6:	105b      	asrs	r3, r3, #1
 80047b8:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bc80      	pop	{r7}
 80047c4:	4770      	bx	lr

080047c6 <_ZN13NHDST7565_LCD12setTextRightEv>:

uint8_t NHDST7565_LCD::setTextRight()
{
 80047c6:	b480      	push	{r7}
 80047c8:	b085      	sub	sp, #20
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 80047ce:	2300      	movs	r3, #0
 80047d0:	73fb      	strb	r3, [r7, #15]
	NewPos = (dispParams.width - textToWrite.textLen);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	7e1b      	ldrb	r3, [r3, #24]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 80047e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bc80      	pop	{r7}
 80047ea:	4770      	bx	lr

080047ec <_ZN13NHDST7565_LCD10setTextTopEv>:

uint8_t NHDST7565_LCD::setTextTop()
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 80047f4:	2300      	movs	r3, #0
 80047f6:	73fb      	strb	r3, [r7, #15]
	NewPos = 1;
 80047f8:	2301      	movs	r3, #1
 80047fa:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	bc80      	pop	{r7}
 8004806:	4770      	bx	lr

08004808 <_ZN13NHDST7565_LCD13setTextMiddleEv>:

uint8_t NHDST7565_LCD::setTextMiddle()
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8004810:	2300      	movs	r3, #0
 8004812:	73fb      	strb	r3, [r7, #15]
	NewPos = ((dispParams.high - textToWrite.textHigh + 1) / 2) + (textToWrite.textHigh / 2) - textToWrite.textHigh;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800481a:	461a      	mov	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	7e5b      	ldrb	r3, [r3, #25]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	3301      	adds	r3, #1
 8004824:	0fda      	lsrs	r2, r3, #31
 8004826:	4413      	add	r3, r2
 8004828:	105b      	asrs	r3, r3, #1
 800482a:	b2da      	uxtb	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	7e5b      	ldrb	r3, [r3, #25]
 8004830:	085b      	lsrs	r3, r3, #1
 8004832:	b2db      	uxtb	r3, r3
 8004834:	4413      	add	r3, r2
 8004836:	b2da      	uxtb	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	7e5b      	ldrb	r3, [r3, #25]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 8004840:	7bfb      	ldrb	r3, [r7, #15]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	bc80      	pop	{r7}
 800484a:	4770      	bx	lr

0800484c <_ZN13NHDST7565_LCD13setTextBottomEv>:

uint8_t NHDST7565_LCD::setTextBottom()
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8004854:	2300      	movs	r3, #0
 8004856:	73fb      	strb	r3, [r7, #15]
	//	NewPos = (DispParams.high - textToWrite.textHigh - 1);
	NewPos = dispParams.high - 1 - textToWrite.textHigh;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	7e5b      	ldrb	r3, [r3, #25]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	b2db      	uxtb	r3, r3
 8004866:	3b01      	subs	r3, #1
 8004868:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 800486a:	7bfb      	ldrb	r3, [r7, #15]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	bc80      	pop	{r7}
 8004874:	4770      	bx	lr

08004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>:



void NHDST7565_LCD::clearFrameBuffer()
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b082      	sub	sp, #8
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
	u8g2_ClearBuffer(&U8G2_Display);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	3324      	adds	r3, #36	; 0x24
 8004882:	4618      	mov	r0, r3
 8004884:	f7fc fc59 	bl	800113a <u8g2_ClearBuffer>
}
 8004888:	bf00      	nop
 800488a:	3708      	adds	r7, #8
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>:
void NHDST7565_LCD::sendFrameBuffer()
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
	u8g2_SendBuffer(&U8G2_Display);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3324      	adds	r3, #36	; 0x24
 800489c:	4618      	mov	r0, r3
 800489e:	f7fc fcbf 	bl	8001220 <u8g2_SendBuffer>
}
 80048a2:	bf00      	nop
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <_ZN13NHDST7565_LCD11clearScreenEv>:

void NHDST7565_LCD::clearScreen()
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b082      	sub	sp, #8
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
	clearFrameBuffer();
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7ff ffdf 	bl	8004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
	sendFrameBuffer();
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7ff ffe9 	bl	8004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
}
 80048be:	bf00      	nop
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <_ZN13NHDST7565_LCD7drawBoxEhhhh>:

void NHDST7565_LCD::drawBox(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
 80048c6:	b590      	push	{r4, r7, lr}
 80048c8:	b085      	sub	sp, #20
 80048ca:	af02      	add	r7, sp, #8
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	4608      	mov	r0, r1
 80048d0:	4611      	mov	r1, r2
 80048d2:	461a      	mov	r2, r3
 80048d4:	4603      	mov	r3, r0
 80048d6:	70fb      	strb	r3, [r7, #3]
 80048d8:	460b      	mov	r3, r1
 80048da:	70bb      	strb	r3, [r7, #2]
 80048dc:	4613      	mov	r3, r2
 80048de:	707b      	strb	r3, [r7, #1]
	u8g2_DrawBox(&U8G2_Display, x, y, w, h);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80048e6:	787c      	ldrb	r4, [r7, #1]
 80048e8:	78ba      	ldrb	r2, [r7, #2]
 80048ea:	78f9      	ldrb	r1, [r7, #3]
 80048ec:	7e3b      	ldrb	r3, [r7, #24]
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	4623      	mov	r3, r4
 80048f2:	f7fc fad1 	bl	8000e98 <u8g2_DrawBox>
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd90      	pop	{r4, r7, pc}

080048fe <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>:
	if(Color != figureColorSetted)
		u8g2_SetDrawColor(&U8G2_Display, figureColorSetted);
}

void NHDST7565_LCD::drawString(String Text, uint8_t XPos, uint8_t YPos, const uint8_t *u8g2Font)
{
 80048fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004900:	b08f      	sub	sp, #60	; 0x3c
 8004902:	af02      	add	r7, sp, #8
 8004904:	60f8      	str	r0, [r7, #12]
 8004906:	60b9      	str	r1, [r7, #8]
 8004908:	4611      	mov	r1, r2
 800490a:	461a      	mov	r2, r3
 800490c:	460b      	mov	r3, r1
 800490e:	71fb      	strb	r3, [r7, #7]
 8004910:	4613      	mov	r3, r2
 8004912:	71bb      	strb	r3, [r7, #6]
	uint8_t NewXPos = 0, NewYPos = 0;
 8004914:	2300      	movs	r3, #0
 8004916:	75fb      	strb	r3, [r7, #23]
 8004918:	2300      	movs	r3, #0
 800491a:	75bb      	strb	r3, [r7, #22]
	assignTextParams(Text, u8g2Font);
 800491c:	f107 0318 	add.w	r3, r7, #24
 8004920:	68b9      	ldr	r1, [r7, #8]
 8004922:	4618      	mov	r0, r3
 8004924:	f00c fda7 	bl	8011476 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004928:	f107 0318 	add.w	r3, r7, #24
 800492c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800492e:	4619      	mov	r1, r3
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f7ff fd7f 	bl	8004434 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8004936:	f107 0318 	add.w	r3, r7, #24
 800493a:	4618      	mov	r0, r3
 800493c:	f00c fc37 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	assignNewDrawCoord(XPos, YPos, NewXPos, NewYPos);
 8004940:	f107 0017 	add.w	r0, r7, #23
 8004944:	79ba      	ldrb	r2, [r7, #6]
 8004946:	79f9      	ldrb	r1, [r7, #7]
 8004948:	f107 0316 	add.w	r3, r7, #22
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	4603      	mov	r3, r0
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f7ff fddf 	bl	8004514 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_>
//				NewYPos = setTextMiddle();
//				break;
//		}
//	}

	u8g2_DrawStr(&U8G2_Display, NewXPos, NewYPos + textToWrite.textHigh, textToWrite.text.c_str());
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800495c:	7dfd      	ldrb	r5, [r7, #23]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	7e5a      	ldrb	r2, [r3, #25]
 8004962:	7dbb      	ldrb	r3, [r7, #22]
 8004964:	4413      	add	r3, r2
 8004966:	b2de      	uxtb	r6, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4618      	mov	r0, r3
 800496c:	f00c fd6c 	bl	8011448 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004970:	4603      	mov	r3, r0
 8004972:	4632      	mov	r2, r6
 8004974:	4629      	mov	r1, r5
 8004976:	4620      	mov	r0, r4
 8004978:	f7fd fac6 	bl	8001f08 <u8g2_DrawStr>
}
 800497c:	bf00      	nop
 800497e:	3734      	adds	r7, #52	; 0x34
 8004980:	46bd      	mov	sp, r7
 8004982:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004984 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh>:
}


uint8_t NHDST7565_LCD::drawMenuList(uint8_t FirstItemXPos, uint8_t FirstItemYPos, uint8_t FirsListItem, uint8_t ItemSel, const char **MenuItems, uint8_t MaxItems,
		bool WithCheckBox, bool MenuSelected, bool *ItemsChecked, const uint8_t *u8g2Font)
{
 8004984:	b590      	push	{r4, r7, lr}
 8004986:	b0a3      	sub	sp, #140	; 0x8c
 8004988:	af02      	add	r7, sp, #8
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	4608      	mov	r0, r1
 800498e:	4611      	mov	r1, r2
 8004990:	461a      	mov	r2, r3
 8004992:	4603      	mov	r3, r0
 8004994:	70fb      	strb	r3, [r7, #3]
 8004996:	460b      	mov	r3, r1
 8004998:	70bb      	strb	r3, [r7, #2]
 800499a:	4613      	mov	r3, r2
 800499c:	707b      	strb	r3, [r7, #1]
	assignTextParams("", u8g2Font);
 800499e:	f107 0320 	add.w	r3, r7, #32
 80049a2:	4618      	mov	r0, r3
 80049a4:	f00c fad2 	bl	8010f4c <_ZNSaIcEC1Ev>
 80049a8:	f107 0220 	add.w	r2, r7, #32
 80049ac:	f107 0308 	add.w	r3, r7, #8
 80049b0:	49a8      	ldr	r1, [pc, #672]	; (8004c54 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x2d0>)
 80049b2:	4618      	mov	r0, r3
 80049b4:	f00c fd92 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80049b8:	f107 0308 	add.w	r3, r7, #8
 80049bc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80049c0:	4619      	mov	r1, r3
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7ff fd36 	bl	8004434 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 80049c8:	f107 0308 	add.w	r3, r7, #8
 80049cc:	4618      	mov	r0, r3
 80049ce:	f00c fbee 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80049d2:	f107 0320 	add.w	r3, r7, #32
 80049d6:	4618      	mov	r0, r3
 80049d8:	f00c fab9 	bl	8010f4e <_ZNSaIcED1Ev>
	uint8_t MaxLines = (dispParams.high - FirstItemYPos) / (textToWrite.textHigh + MENU_ITEM_INTERLINE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80049e2:	461a      	mov	r2, r3
 80049e4:	78bb      	ldrb	r3, [r7, #2]
 80049e6:	1ad2      	subs	r2, r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	7e5b      	ldrb	r3, [r3, #25]
 80049ec:	3303      	adds	r3, #3
 80049ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80049f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint8_t NextItem = 0;
 80049f6:	2300      	movs	r3, #0
 80049f8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	uint8_t MaxTexLen = 0;
 80049fc:	2300      	movs	r3, #0
 80049fe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t FrameHigh = 0;
 8004a02:	2300      	movs	r3, #0
 8004a04:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	for(int Item = 0; Item < MaxLines; Item++)
 8004a08:	2300      	movs	r3, #0
 8004a0a:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a0c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004a10:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004a12:	429a      	cmp	r2, r3
 8004a14:	f280 81bd 	bge.w	8004d92 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x40e>
	{
		NextItem = FirsListItem + Item;
 8004a18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	787b      	ldrb	r3, [r7, #1]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		if(NextItem >= MaxItems)
 8004a24:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8004a28:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	f080 81af 	bcs.w	8004d90 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x40c>
			break;
		if(NextItem == ItemSel && MenuSelected)
 8004a32:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8004a36:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	f040 810c 	bne.w	8004c58 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x2d4>
 8004a40:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 8107 	beq.w	8004c58 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x2d4>
		{
			assignTextParams(MenuItems[NextItem], u8g2Font);
 8004a4a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a54:	4413      	add	r3, r2
 8004a56:	681c      	ldr	r4, [r3, #0]
 8004a58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f00c fa75 	bl	8010f4c <_ZNSaIcEC1Ev>
 8004a62:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a6a:	4621      	mov	r1, r4
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f00c fd35 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7ff fcd9 	bl	8004434 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8004a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a86:	4618      	mov	r0, r3
 8004a88:	f00c fb91 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004a8c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004a90:	4618      	mov	r0, r3
 8004a92:	f00c fa5c 	bl	8010f4e <_ZNSaIcED1Ev>
			u8g2_SetFontMode(&U8G2_Display, 0);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3324      	adds	r3, #36	; 0x24
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7fd f975 	bl	8001d8c <u8g2_SetFontMode>
			u8g2_SetDrawColor(&U8G2_Display, 0);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	3324      	adds	r3, #36	; 0x24
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7fd fca1 	bl	80023f0 <u8g2_SetDrawColor>
			drawString(MenuItems[NextItem], FirstItemXPos, FirstItemYPos + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), u8g2Font);
 8004aae:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ab8:	4413      	add	r3, r2
 8004aba:	681c      	ldr	r4, [r3, #0]
 8004abc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f00c fa43 	bl	8010f4c <_ZNSaIcEC1Ev>
 8004ac6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004aca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ace:	4621      	mov	r1, r4
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f00c fd03 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	7e5b      	ldrb	r3, [r3, #25]
 8004ada:	3303      	adds	r3, #3
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004ae0:	b2d2      	uxtb	r2, r2
 8004ae2:	fb02 f303 	mul.w	r3, r2, r3
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	78bb      	ldrb	r3, [r7, #2]
 8004aea:	4413      	add	r3, r2
 8004aec:	b2d8      	uxtb	r0, r3
 8004aee:	78fa      	ldrb	r2, [r7, #3]
 8004af0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004af4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	4603      	mov	r3, r0
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7ff fefe 	bl	80048fe <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8004b02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004b06:	4618      	mov	r0, r3
 8004b08:	f00c fb51 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004b0c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004b10:	4618      	mov	r0, r3
 8004b12:	f00c fa1c 	bl	8010f4e <_ZNSaIcED1Ev>
			u8g2_SetFontMode(&U8G2_Display, 1);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	3324      	adds	r3, #36	; 0x24
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7fd f935 	bl	8001d8c <u8g2_SetFontMode>
			u8g2_SetDrawColor(&U8G2_Display, 1);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	3324      	adds	r3, #36	; 0x24
 8004b26:	2101      	movs	r1, #1
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7fd fc61 	bl	80023f0 <u8g2_SetDrawColor>
			if(!WithCheckBox)
 8004b2e:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8004b32:	f083 0301 	eor.w	r3, r3, #1
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d033      	beq.n	8004ba4 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x220>
			{
				u8g2_SetFont(&U8G2_Display, displayFonts[W_8_H_8_ICON]);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4610      	mov	r0, r2
 8004b4c:	f7fd fa7a 	bl	8002044 <u8g2_SetFont>
				u8g2_DrawGlyph(&U8G2_Display, FirstItemXPos + textToWrite.textLen + 1, FirstItemYPos + textToWrite.textHigh + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 1, 0x006F);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	7e1a      	ldrb	r2, [r3, #24]
 8004b5a:	78fb      	ldrb	r3, [r7, #3]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	3301      	adds	r3, #1
 8004b62:	b2dc      	uxtb	r4, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	7e5a      	ldrb	r2, [r3, #25]
 8004b68:	78bb      	ldrb	r3, [r7, #2]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	b2da      	uxtb	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	7e5b      	ldrb	r3, [r3, #25]
 8004b72:	3303      	adds	r3, #3
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004b78:	b2c9      	uxtb	r1, r1
 8004b7a:	fb01 f303 	mul.w	r3, r1, r3
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	4413      	add	r3, r2
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	3301      	adds	r3, #1
 8004b86:	b2da      	uxtb	r2, r3
 8004b88:	236f      	movs	r3, #111	; 0x6f
 8004b8a:	4621      	mov	r1, r4
 8004b8c:	f7fd f90e 	bl	8001dac <u8g2_DrawGlyph>
				u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	4610      	mov	r0, r2
 8004b9e:	f7fd fa51 	bl	8002044 <u8g2_SetFont>
			if(!WithCheckBox)
 8004ba2:	e0e7      	b.n	8004d74 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
			}
			else
			{
				if(ItemsChecked[NextItem])
 8004ba4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004ba8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004bac:	4413      	add	r3, r2
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d034      	beq.n	8004c1e <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x29a>
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004bc0:	3b0b      	subs	r3, #11
 8004bc2:	b2d9      	uxtb	r1, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	7e5b      	ldrb	r3, [r3, #25]
 8004bc8:	3303      	adds	r3, #3
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004bce:	b2d2      	uxtb	r2, r2
 8004bd0:	fb02 f303 	mul.w	r3, r2, r3
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	78bb      	ldrb	r3, [r7, #2]
 8004bd8:	4413      	add	r3, r2
 8004bda:	b2da      	uxtb	r2, r3
 8004bdc:	2308      	movs	r3, #8
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	2308      	movs	r3, #8
 8004be2:	f7fc f990 	bl	8000f06 <u8g2_DrawFrame>
					u8g2_DrawBox(&U8G2_Display, dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004bf2:	3b09      	subs	r3, #9
 8004bf4:	b2d9      	uxtb	r1, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	7e5b      	ldrb	r3, [r3, #25]
 8004bfa:	3303      	adds	r3, #3
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c00:	b2d2      	uxtb	r2, r2
 8004c02:	fb02 f303 	mul.w	r3, r2, r3
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	78bb      	ldrb	r3, [r7, #2]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	3302      	adds	r3, #2
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	2304      	movs	r3, #4
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	2304      	movs	r3, #4
 8004c18:	f7fc f93e 	bl	8000e98 <u8g2_DrawBox>
			if(!WithCheckBox)
 8004c1c:	e0aa      	b.n	8004d74 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
					//					drawBox(dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4, BLACK_COLOR);
				}
				else
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004c2a:	3b0b      	subs	r3, #11
 8004c2c:	b2d9      	uxtb	r1, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	7e5b      	ldrb	r3, [r3, #25]
 8004c32:	3303      	adds	r3, #3
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c38:	b2d2      	uxtb	r2, r2
 8004c3a:	fb02 f303 	mul.w	r3, r2, r3
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	78bb      	ldrb	r3, [r7, #2]
 8004c42:	4413      	add	r3, r2
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	2308      	movs	r3, #8
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	2308      	movs	r3, #8
 8004c4c:	f7fc f95b 	bl	8000f06 <u8g2_DrawFrame>
			if(!WithCheckBox)
 8004c50:	e090      	b.n	8004d74 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
 8004c52:	bf00      	nop
 8004c54:	080122c4 	.word	0x080122c4
				}
			}
		}
		else
		{
			drawString(MenuItems[NextItem], FirstItemXPos, FirstItemYPos + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), u8g2Font);
 8004c58:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c62:	4413      	add	r3, r2
 8004c64:	681c      	ldr	r4, [r3, #0]
 8004c66:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f00c f96e 	bl	8010f4c <_ZNSaIcEC1Ev>
 8004c70:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8004c74:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004c78:	4621      	mov	r1, r4
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f00c fc2e 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	7e5b      	ldrb	r3, [r3, #25]
 8004c84:	3303      	adds	r3, #3
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c8a:	b2d2      	uxtb	r2, r2
 8004c8c:	fb02 f303 	mul.w	r3, r2, r3
 8004c90:	b2da      	uxtb	r2, r3
 8004c92:	78bb      	ldrb	r3, [r7, #2]
 8004c94:	4413      	add	r3, r2
 8004c96:	b2d8      	uxtb	r0, r3
 8004c98:	78fa      	ldrb	r2, [r7, #3]
 8004c9a:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8004c9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7ff fe29 	bl	80048fe <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8004cac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f00c fa7c 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004cb6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f00c f947 	bl	8010f4e <_ZNSaIcED1Ev>
			if(WithCheckBox)
 8004cc0:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d055      	beq.n	8004d74 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
			{
				if(ItemsChecked[NextItem])
 8004cc8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004ccc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004cd0:	4413      	add	r3, r2
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d034      	beq.n	8004d42 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3be>
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004ce4:	3b0b      	subs	r3, #11
 8004ce6:	b2d9      	uxtb	r1, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	7e5b      	ldrb	r3, [r3, #25]
 8004cec:	3303      	adds	r3, #3
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	fb02 f303 	mul.w	r3, r2, r3
 8004cf8:	b2da      	uxtb	r2, r3
 8004cfa:	78bb      	ldrb	r3, [r7, #2]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	2308      	movs	r3, #8
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	2308      	movs	r3, #8
 8004d06:	f7fc f8fe 	bl	8000f06 <u8g2_DrawFrame>
					u8g2_DrawBox(&U8G2_Display, dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004d16:	3b09      	subs	r3, #9
 8004d18:	b2d9      	uxtb	r1, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	7e5b      	ldrb	r3, [r3, #25]
 8004d1e:	3303      	adds	r3, #3
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	fb02 f303 	mul.w	r3, r2, r3
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	78bb      	ldrb	r3, [r7, #2]
 8004d2e:	4413      	add	r3, r2
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	3302      	adds	r3, #2
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	2304      	movs	r3, #4
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	2304      	movs	r3, #4
 8004d3c:	f7fc f8ac 	bl	8000e98 <u8g2_DrawBox>
 8004d40:	e018      	b.n	8004d74 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
					//					drawBox(dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4, BLACK_COLOR);
				}
				else
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004d4e:	3b0b      	subs	r3, #11
 8004d50:	b2d9      	uxtb	r1, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	7e5b      	ldrb	r3, [r3, #25]
 8004d56:	3303      	adds	r3, #3
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d5c:	b2d2      	uxtb	r2, r2
 8004d5e:	fb02 f303 	mul.w	r3, r2, r3
 8004d62:	b2da      	uxtb	r2, r3
 8004d64:	78bb      	ldrb	r3, [r7, #2]
 8004d66:	4413      	add	r3, r2
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	2308      	movs	r3, #8
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	2308      	movs	r3, #8
 8004d70:	f7fc f8c9 	bl	8000f06 <u8g2_DrawFrame>
				}
			}
		}
		if(MaxTexLen < textToWrite.textLen)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	7e1b      	ldrb	r3, [r3, #24]
 8004d78:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d203      	bcs.n	8004d88 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x404>
			MaxTexLen = textToWrite.textLen;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	7e1b      	ldrb	r3, [r3, #24]
 8004d84:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	for(int Item = 0; Item < MaxLines; Item++)
 8004d88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d8e:	e63d      	b.n	8004a0c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x88>
			break;
 8004d90:	bf00      	nop
	}
	if((textToWrite.textHigh * (MaxItems + 1)) + 2 < dispParams.high - FirstItemYPos - 1 )
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	7e5b      	ldrb	r3, [r3, #25]
 8004d96:	461a      	mov	r2, r3
 8004d98:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	fb03 f302 	mul.w	r3, r3, r2
 8004da2:	1c9a      	adds	r2, r3, #2
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004daa:	4619      	mov	r1, r3
 8004dac:	78bb      	ldrb	r3, [r7, #2]
 8004dae:	1acb      	subs	r3, r1, r3
 8004db0:	3b01      	subs	r3, #1
 8004db2:	429a      	cmp	r2, r3
 8004db4:	da0c      	bge.n	8004dd0 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x44c>
		FrameHigh = (textToWrite.textHigh * (MaxItems + 1)) + 2;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	7e5b      	ldrb	r3, [r3, #25]
 8004dba:	f897 2098 	ldrb.w	r2, [r7, #152]	; 0x98
 8004dbe:	3201      	adds	r2, #1
 8004dc0:	b2d2      	uxtb	r2, r2
 8004dc2:	fb02 f303 	mul.w	r3, r2, r3
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	3302      	adds	r3, #2
 8004dca:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8004dce:	e008      	b.n	8004de2 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x45e>
	else
		FrameHigh = dispParams.high - FirstItemYPos - 1;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8004dd6:	78bb      	ldrb	r3, [r7, #2]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	if(!WithCheckBox)
 8004de2:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8004de6:	f083 0301 	eor.w	r3, r3, #1
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d015      	beq.n	8004e1c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x498>
	{
		u8g2_DrawRFrame(&U8G2_Display, FirstItemXPos - 1, FirstItemYPos - 1, MaxTexLen + 10, FrameHigh, 3);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004df6:	78fb      	ldrb	r3, [r7, #3]
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	b2d9      	uxtb	r1, r3
 8004dfc:	78bb      	ldrb	r3, [r7, #2]
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004e06:	330a      	adds	r3, #10
 8004e08:	b2dc      	uxtb	r4, r3
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	9301      	str	r3, [sp, #4]
 8004e0e:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	4623      	mov	r3, r4
 8004e16:	f7fc f8d7 	bl	8000fc8 <u8g2_DrawRFrame>
 8004e1a:	e019      	b.n	8004e50 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x4cc>
	}
	else
	{
		u8g2_DrawRFrame(&U8G2_Display, FirstItemXPos - 1, FirstItemYPos - 1, dispParams.width - FirstItemXPos - 1, FrameHigh, 3);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004e22:	78fb      	ldrb	r3, [r7, #3]
 8004e24:	3b01      	subs	r3, #1
 8004e26:	b2d9      	uxtb	r1, r3
 8004e28:	78bb      	ldrb	r3, [r7, #2]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	b2dc      	uxtb	r4, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8004e34:	78fb      	ldrb	r3, [r7, #3]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	2303      	movs	r3, #3
 8004e40:	9301      	str	r3, [sp, #4]
 8004e42:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	4622      	mov	r2, r4
 8004e4c:	f7fc f8bc 	bl	8000fc8 <u8g2_DrawRFrame>
	}
	return MaxLines;
 8004e50:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3784      	adds	r7, #132	; 0x84
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd90      	pop	{r4, r7, pc}

08004e5c <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>:

void NHDST7565_LCD::drawSymbol(uint8_t XPos, uint8_t YPos, const uint8_t *SymbolFont, uint16_t SymbolCode)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b08e      	sub	sp, #56	; 0x38
 8004e60:	af02      	add	r7, sp, #8
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	607b      	str	r3, [r7, #4]
 8004e66:	460b      	mov	r3, r1
 8004e68:	72fb      	strb	r3, [r7, #11]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	72bb      	strb	r3, [r7, #10]
	uint8_t NewXPos = 0, NewYPos = 0;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	74fb      	strb	r3, [r7, #19]
 8004e72:	2300      	movs	r3, #0
 8004e74:	74bb      	strb	r3, [r7, #18]
	assignTextParams("", SymbolFont);
 8004e76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f00c f866 	bl	8010f4c <_ZNSaIcEC1Ev>
 8004e80:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004e84:	f107 0314 	add.w	r3, r7, #20
 8004e88:	4915      	ldr	r1, [pc, #84]	; (8004ee0 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht+0x84>)
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f00c fb26 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004e90:	f107 0314 	add.w	r3, r7, #20
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	4619      	mov	r1, r3
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f7ff facb 	bl	8004434 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8004e9e:	f107 0314 	add.w	r3, r7, #20
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f00c f983 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004ea8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004eac:	4618      	mov	r0, r3
 8004eae:	f00c f84e 	bl	8010f4e <_ZNSaIcED1Ev>
	assignNewDrawCoord(XPos, YPos, NewXPos, NewYPos);
 8004eb2:	f107 0013 	add.w	r0, r7, #19
 8004eb6:	7aba      	ldrb	r2, [r7, #10]
 8004eb8:	7af9      	ldrb	r1, [r7, #11]
 8004eba:	f107 0312 	add.w	r3, r7, #18
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f7ff fb26 	bl	8004514 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_>
	u8g2_DrawGlyph(&U8G2_Display, NewXPos, NewYPos, SymbolCode);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004ece:	7cf9      	ldrb	r1, [r7, #19]
 8004ed0:	7cba      	ldrb	r2, [r7, #18]
 8004ed2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004ed4:	f7fc ff6a 	bl	8001dac <u8g2_DrawGlyph>
}
 8004ed8:	bf00      	nop
 8004eda:	3730      	adds	r7, #48	; 0x30
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	080122c4 	.word	0x080122c4

08004ee4 <_ZN13NHDST7565_LCD12drawTimeDateENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>:


void NHDST7565_LCD::drawTimeDate(String Time, String Date)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b092      	sub	sp, #72	; 0x48
 8004ee8:	af02      	add	r7, sp, #8
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
	drawString(Time, LEFT_POS, TOP_POS, displayFonts[W_3_H_6]);
 8004ef0:	f107 0310 	add.w	r3, r7, #16
 8004ef4:	68b9      	ldr	r1, [r7, #8]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f00c fabd 	bl	8011476 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004f02:	f107 0110 	add.w	r1, r7, #16
 8004f06:	9300      	str	r3, [sp, #0]
 8004f08:	2346      	movs	r3, #70	; 0x46
 8004f0a:	2282      	movs	r2, #130	; 0x82
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f7ff fcf6 	bl	80048fe <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8004f12:	f107 0310 	add.w	r3, r7, #16
 8004f16:	4618      	mov	r0, r3
 8004f18:	f00c f949 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	drawString(Date, RIGHT_POS, TOP_POS, displayFonts[W_3_H_6]);
 8004f1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f20:	6879      	ldr	r1, [r7, #4]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f00c faa7 	bl	8011476 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004f2e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004f32:	9300      	str	r3, [sp, #0]
 8004f34:	2346      	movs	r3, #70	; 0x46
 8004f36:	2284      	movs	r2, #132	; 0x84
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f7ff fce0 	bl	80048fe <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8004f3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f42:	4618      	mov	r0, r3
 8004f44:	f00c f933 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8004f48:	bf00      	nop
 8004f4a:	3740      	adds	r7, #64	; 0x40
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>:

void NHDST7565_LCD::drawFullScreenPopUp(String Text, uint16_t Delay)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08c      	sub	sp, #48	; 0x30
 8004f54:	af02      	add	r7, sp, #8
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	80fb      	strh	r3, [r7, #6]
	clearFrameBuffer();
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f7ff fc89 	bl	8004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
	u8g2_DrawRFrame(&U8G2_Display, 1, 1, dispParams.width - 1, dispParams.high - 1, 2);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004f70:	3b01      	subs	r3, #1
 8004f72:	b2d9      	uxtb	r1, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2202      	movs	r2, #2
 8004f80:	9201      	str	r2, [sp, #4]
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	460b      	mov	r3, r1
 8004f86:	2201      	movs	r2, #1
 8004f88:	2101      	movs	r1, #1
 8004f8a:	f7fc f81d 	bl	8000fc8 <u8g2_DrawRFrame>
	drawString(Text, CENTER_POS, MIDDLE_POS, displayFonts[W_6_H_13_B]);
 8004f8e:	f107 0310 	add.w	r3, r7, #16
 8004f92:	68b9      	ldr	r1, [r7, #8]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f00c fa6e 	bl	8011476 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004fa0:	f107 0110 	add.w	r1, r7, #16
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	2347      	movs	r3, #71	; 0x47
 8004fa8:	2283      	movs	r2, #131	; 0x83
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f7ff fca7 	bl	80048fe <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8004fb0:	f107 0310 	add.w	r3, r7, #16
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f00c f8fa 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	sendFrameBuffer();
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f7ff fc68 	bl	8004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
	HAL_Delay(Delay);
 8004fc0:	88fb      	ldrh	r3, [r7, #6]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f007 f8e2 	bl	800c18c <HAL_Delay>
}
 8004fc8:	bf00      	nop
 8004fca:	3728      	adds	r7, #40	; 0x28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <_ZStneIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
    { return !(__lhs == __rhs); }
 8004fda:	6839      	ldr	r1, [r7, #0]
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 f808 	bl	8004ff2 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	f083 0301 	eor.w	r3, r3, #1
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	4618      	mov	r0, r3
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b082      	sub	sp, #8
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
 8004ffa:	6039      	str	r1, [r7, #0]
    { return __lhs.compare(__rhs) == 0; }
 8004ffc:	6839      	ldr	r1, [r7, #0]
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f00c fa24 	bl	801144c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	bf0c      	ite	eq
 800500a:	2301      	moveq	r3, #1
 800500c:	2300      	movne	r3, #0
 800500e:	b2db      	uxtb	r3, r3
 8005010:	4618      	mov	r0, r3
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <_ZN12STM32_EEPROM6formatEv>:

// ERASE

//##########################################################################################################
bool STM32_EEPROM::format(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b088      	sub	sp, #32
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
	bool RetVal = false;
 8005020:	2300      	movs	r3, #0
 8005022:	77fb      	strb	r3, [r7, #31]
	uint32_t	error;
	HAL_FLASH_Unlock();
 8005024:	f007 feb6 	bl	800cd94 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	flashErase;
	flashErase.NbPages=1;
 8005028:	2301      	movs	r3, #1
 800502a:	617b      	str	r3, [r7, #20]
	flashErase.Banks = FLASH_BANK_1;
 800502c:	2301      	movs	r3, #1
 800502e:	60fb      	str	r3, [r7, #12]
	flashErase.PageAddress = _EEPROM_FLASH_PAGE_ADDRESS;
 8005030:	4b12      	ldr	r3, [pc, #72]	; (800507c <_ZN12STM32_EEPROM6formatEv+0x64>)
 8005032:	613b      	str	r3, [r7, #16]
	flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 8005034:	2300      	movs	r3, #0
 8005036:	60bb      	str	r3, [r7, #8]
	if(HAL_FLASHEx_Erase(&flashErase, &error) == HAL_OK)
 8005038:	f107 0218 	add.w	r2, r7, #24
 800503c:	f107 0308 	add.w	r3, r7, #8
 8005040:	4611      	mov	r1, r2
 8005042:	4618      	mov	r0, r3
 8005044:	f007 ff8e 	bl	800cf64 <HAL_FLASHEx_Erase>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	bf0c      	ite	eq
 800504e:	2301      	moveq	r3, #1
 8005050:	2300      	movne	r3, #0
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00a      	beq.n	800506e <_ZN12STM32_EEPROM6formatEv+0x56>
	{
		HAL_FLASH_Lock();
 8005058:	f007 fec2 	bl	800cde0 <HAL_FLASH_Lock>
		if(error != 0xFFFFFFFF)
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005062:	d002      	beq.n	800506a <_ZN12STM32_EEPROM6formatEv+0x52>
			RetVal = false;
 8005064:	2300      	movs	r3, #0
 8005066:	77fb      	strb	r3, [r7, #31]
 8005068:	e001      	b.n	800506e <_ZN12STM32_EEPROM6formatEv+0x56>
		else
			RetVal = true;
 800506a:	2301      	movs	r3, #1
 800506c:	77fb      	strb	r3, [r7, #31]
	}
	HAL_FLASH_Lock();
 800506e:	f007 feb7 	bl	800cde0 <HAL_FLASH_Lock>
	return RetVal;
 8005072:	7ffb      	ldrb	r3, [r7, #31]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3720      	adds	r7, #32
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	0801f400 	.word	0x0801f400

08005080 <_ZN12STM32_EEPROM10singleReadEtPm>:
//##########################################################################################################



bool STM32_EEPROM::singleRead(uint16_t VirtualAddress, uint32_t* Data)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	460b      	mov	r3, r1
 800508a:	607a      	str	r2, [r7, #4]
 800508c:	817b      	strh	r3, [r7, #10]
	if(VirtualAddress >= (_EEPROM_FLASH_PAGE_SIZE/4))
 800508e:	897b      	ldrh	r3, [r7, #10]
 8005090:	2bff      	cmp	r3, #255	; 0xff
 8005092:	d901      	bls.n	8005098 <_ZN12STM32_EEPROM10singleReadEtPm+0x18>
		return false;
 8005094:	2300      	movs	r3, #0
 8005096:	e009      	b.n	80050ac <_ZN12STM32_EEPROM10singleReadEtPm+0x2c>
	*Data =  (*(uint32_t*)((VirtualAddress*4) + _EEPROM_FLASH_PAGE_ADDRESS));
 8005098:	897b      	ldrh	r3, [r7, #10]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80050a0:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	601a      	str	r2, [r3, #0]
	return true;
 80050aa:	2301      	movs	r3, #1
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bc80      	pop	{r7}
 80050b4:	4770      	bx	lr

080050b6 <_ZN12STM32_EEPROM9multiReadEttPm>:


bool STM32_EEPROM::multiRead(uint16_t StartVirtualAddress,uint16_t HowMuchToRead, uint32_t* Data)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b087      	sub	sp, #28
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	60f8      	str	r0, [r7, #12]
 80050be:	607b      	str	r3, [r7, #4]
 80050c0:	460b      	mov	r3, r1
 80050c2:	817b      	strh	r3, [r7, #10]
 80050c4:	4613      	mov	r3, r2
 80050c6:	813b      	strh	r3, [r7, #8]
	bool RetVal = false;
 80050c8:	2300      	movs	r3, #0
 80050ca:	75fb      	strb	r3, [r7, #23]
	if((StartVirtualAddress+HowMuchToRead) <= (_EEPROM_FLASH_PAGE_SIZE/4))
 80050cc:	897a      	ldrh	r2, [r7, #10]
 80050ce:	893b      	ldrh	r3, [r7, #8]
 80050d0:	4413      	add	r3, r2
 80050d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d6:	dc19      	bgt.n	800510c <_ZN12STM32_EEPROM9multiReadEttPm+0x56>
	{
		for(uint16_t i = StartVirtualAddress ; i < (HowMuchToRead + StartVirtualAddress); i++)
 80050d8:	897b      	ldrh	r3, [r7, #10]
 80050da:	82bb      	strh	r3, [r7, #20]
 80050dc:	8aba      	ldrh	r2, [r7, #20]
 80050de:	8939      	ldrh	r1, [r7, #8]
 80050e0:	897b      	ldrh	r3, [r7, #10]
 80050e2:	440b      	add	r3, r1
 80050e4:	429a      	cmp	r2, r3
 80050e6:	da0f      	bge.n	8005108 <_ZN12STM32_EEPROM9multiReadEttPm+0x52>
		{
			*Data =  (*(uint32_t*)((i*4) + _EEPROM_FLASH_PAGE_ADDRESS));
 80050e8:	8abb      	ldrh	r3, [r7, #20]
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80050f0:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	601a      	str	r2, [r3, #0]
			Data++;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	3304      	adds	r3, #4
 80050fe:	607b      	str	r3, [r7, #4]
		for(uint16_t i = StartVirtualAddress ; i < (HowMuchToRead + StartVirtualAddress); i++)
 8005100:	8abb      	ldrh	r3, [r7, #20]
 8005102:	3301      	adds	r3, #1
 8005104:	82bb      	strh	r3, [r7, #20]
 8005106:	e7e9      	b.n	80050dc <_ZN12STM32_EEPROM9multiReadEttPm+0x26>
		}
		RetVal = true;
 8005108:	2301      	movs	r3, #1
 800510a:	75fb      	strb	r3, [r7, #23]
	}
	return RetVal;
 800510c:	7dfb      	ldrb	r3, [r7, #23]
}
 800510e:	4618      	mov	r0, r3
 8005110:	371c      	adds	r7, #28
 8005112:	46bd      	mov	sp, r7
 8005114:	bc80      	pop	{r7}
 8005116:	4770      	bx	lr

08005118 <_ZN12STM32_EEPROM5writeEPm>:
// SCRITTURA

//##########################################################################################################

bool STM32_EEPROM::write(uint32_t Data[])
{
 8005118:	b590      	push	{r4, r7, lr}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
    uint32_t OldValue = 0;
 8005122:	2300      	movs	r3, #0
 8005124:	60bb      	str	r3, [r7, #8]
    bool RetVal = false;
 8005126:	2300      	movs	r3, #0
 8005128:	73fb      	strb	r3, [r7, #15]
	if(format())
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7ff ff74 	bl	8005018 <_ZN12STM32_EEPROM6formatEv>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d03c      	beq.n	80051b0 <_ZN12STM32_EEPROM5writeEPm+0x98>
	{
		HAL_FLASH_Unlock();
 8005136:	f007 fe2d 	bl	800cd94 <HAL_FLASH_Unlock>
		for(uint16_t i = 0 ; i < (_EEPROM_FLASH_PAGE_SIZE/4); i++)
 800513a:	2300      	movs	r3, #0
 800513c:	81bb      	strh	r3, [r7, #12]
 800513e:	89bb      	ldrh	r3, [r7, #12]
 8005140:	2bff      	cmp	r3, #255	; 0xff
 8005142:	d833      	bhi.n	80051ac <_ZN12STM32_EEPROM5writeEPm+0x94>
		{
			singleRead(i, &OldValue);
 8005144:	f107 0208 	add.w	r2, r7, #8
 8005148:	89bb      	ldrh	r3, [r7, #12]
 800514a:	4619      	mov	r1, r3
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f7ff ff97 	bl	8005080 <_ZN12STM32_EEPROM10singleReadEtPm>
			if(Data[i] != OldValue)
 8005152:	89bb      	ldrh	r3, [r7, #12]
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	4413      	add	r3, r2
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	429a      	cmp	r2, r3
 8005160:	d020      	beq.n	80051a4 <_ZN12STM32_EEPROM5writeEPm+0x8c>
			{
				if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (i*4) + _EEPROM_FLASH_PAGE_ADDRESS, (uint64_t)Data[i]) != HAL_OK)
 8005162:	89bb      	ldrh	r3, [r7, #12]
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 800516a:	f501 31fa 	add.w	r1, r1, #128000	; 0x1f400
 800516e:	89bb      	ldrh	r3, [r7, #12]
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	4413      	add	r3, r2
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f04f 0400 	mov.w	r4, #0
 800517c:	461a      	mov	r2, r3
 800517e:	4623      	mov	r3, r4
 8005180:	2002      	movs	r0, #2
 8005182:	f007 fd57 	bl	800cc34 <HAL_FLASH_Program>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	bf14      	ite	ne
 800518c:	2301      	movne	r3, #1
 800518e:	2300      	moveq	r3, #0
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d004      	beq.n	80051a0 <_ZN12STM32_EEPROM5writeEPm+0x88>
				{
					HAL_FLASH_Lock();
 8005196:	f007 fe23 	bl	800cde0 <HAL_FLASH_Lock>
					RetVal = false;
 800519a:	2300      	movs	r3, #0
 800519c:	73fb      	strb	r3, [r7, #15]
					break;
 800519e:	e005      	b.n	80051ac <_ZN12STM32_EEPROM5writeEPm+0x94>
				}
				RetVal = true;
 80051a0:	2301      	movs	r3, #1
 80051a2:	73fb      	strb	r3, [r7, #15]
		for(uint16_t i = 0 ; i < (_EEPROM_FLASH_PAGE_SIZE/4); i++)
 80051a4:	89bb      	ldrh	r3, [r7, #12]
 80051a6:	3301      	adds	r3, #1
 80051a8:	81bb      	strh	r3, [r7, #12]
 80051aa:	e7c8      	b.n	800513e <_ZN12STM32_EEPROM5writeEPm+0x26>
			}
		}
		HAL_FLASH_Lock();
 80051ac:	f007 fe18 	bl	800cde0 <HAL_FLASH_Lock>
	}
	return RetVal;
 80051b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd90      	pop	{r4, r7, pc}

080051ba <_ZN12STM32_EEPROM16transferRamToMemEPm>:

//##########################################################################################################


void STM32_EEPROM::transferRamToMem(uint32_t *RamVector)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b082      	sub	sp, #8
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
 80051c2:	6039      	str	r1, [r7, #0]
    write(RamVector);
 80051c4:	6839      	ldr	r1, [r7, #0]
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7ff ffa6 	bl	8005118 <_ZN12STM32_EEPROM5writeEPm>
}
 80051cc:	bf00      	nop
 80051ce:	3708      	adds	r7, #8
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <_ZN12STM32_EEPROM15tranferMemToRamEPm>:

void STM32_EEPROM::tranferMemToRam(uint32_t *RamVector)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
    multiRead(EEPROM_VIRTUAL_ADDR_BEGIN, MAX_DIM_EEPROM_ARRAY, RamVector);
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051e4:	2100      	movs	r1, #0
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7ff ff65 	bl	80050b6 <_ZN12STM32_EEPROM9multiReadEttPm>
}
 80051ec:	bf00      	nop
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <_ZN12STM32_EEPROM11eraseMemoryEv>:

void STM32_EEPROM::eraseMemory()
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
	format();
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7ff ff0b 	bl	8005018 <_ZN12STM32_EEPROM6formatEv>
	tranferMemToRam(eepromArray);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4619      	mov	r1, r3
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7ff ffe3 	bl	80051d4 <_ZN12STM32_EEPROM15tranferMemToRamEPm>
    return;
 800520e:	bf00      	nop
}
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <_ZN12STM32_EEPROM11memoryEmptyEv>:


bool STM32_EEPROM::memoryEmpty()
{
 8005216:	b480      	push	{r7}
 8005218:	b085      	sub	sp, #20
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
    for(uint16_t i = 0; i < MAX_DIM_EEPROM_ARRAY; i++)
 800521e:	2300      	movs	r3, #0
 8005220:	81fb      	strh	r3, [r7, #14]
 8005222:	89fb      	ldrh	r3, [r7, #14]
 8005224:	2bff      	cmp	r3, #255	; 0xff
 8005226:	d80e      	bhi.n	8005246 <_ZN12STM32_EEPROM11memoryEmptyEv+0x30>
    {
        if(eepromArray[i] != BLANK_VALUE)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	89fb      	ldrh	r3, [r7, #14]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005238:	d001      	beq.n	800523e <_ZN12STM32_EEPROM11memoryEmptyEv+0x28>
            return false;
 800523a:	2300      	movs	r3, #0
 800523c:	e004      	b.n	8005248 <_ZN12STM32_EEPROM11memoryEmptyEv+0x32>
    for(uint16_t i = 0; i < MAX_DIM_EEPROM_ARRAY; i++)
 800523e:	89fb      	ldrh	r3, [r7, #14]
 8005240:	3301      	adds	r3, #1
 8005242:	81fb      	strh	r3, [r7, #14]
 8005244:	e7ed      	b.n	8005222 <_ZN12STM32_EEPROM11memoryEmptyEv+0xc>
    }
    return true;
 8005246:	2301      	movs	r3, #1
}
 8005248:	4618      	mov	r0, r3
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	bc80      	pop	{r7}
 8005250:	4770      	bx	lr

08005252 <_ZN12STM32_EEPROMC1Ev>:


STM32_EEPROM::STM32_EEPROM()
 8005252:	b580      	push	{r7, lr}
 8005254:	b082      	sub	sp, #8
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	605a      	str	r2, [r3, #4]
{
	eepromArray = new uint32_t[MAX_DIM_EEPROM_ARRAY];
 8005260:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005264:	f00b fe54 	bl	8010f10 <_Znaj>
 8005268:	4603      	mov	r3, r0
 800526a:	461a      	mov	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	601a      	str	r2, [r3, #0]
	tranferMemToRam(eepromArray);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4619      	mov	r1, r3
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7ff ffac 	bl	80051d4 <_ZN12STM32_EEPROM15tranferMemToRamEPm>
}
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4618      	mov	r0, r3
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <_ZN12STM32_EEPROM13writeToMemoryEtmb>:

void STM32_EEPROM::writeToMemory(uint16_t Address, uint32_t Val, bool Transfer)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b084      	sub	sp, #16
 800528a:	af00      	add	r7, sp, #0
 800528c:	60f8      	str	r0, [r7, #12]
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	461a      	mov	r2, r3
 8005292:	460b      	mov	r3, r1
 8005294:	817b      	strh	r3, [r7, #10]
 8005296:	4613      	mov	r3, r2
 8005298:	727b      	strb	r3, [r7, #9]
	eepromArray[Address] = Val;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	897b      	ldrh	r3, [r7, #10]
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4413      	add	r3, r2
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	601a      	str	r2, [r3, #0]
	if(Transfer)
 80052a8:	7a7b      	ldrb	r3, [r7, #9]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d005      	beq.n	80052ba <_ZN12STM32_EEPROM13writeToMemoryEtmb+0x34>
	{
		transferRamToMem(eepromArray);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4619      	mov	r1, r3
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f7ff ff80 	bl	80051ba <_ZN12STM32_EEPROM16transferRamToMemEPm>
	}
}
 80052ba:	bf00      	nop
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <_ZN12STM32_EEPROM10loadMemoryEtPm>:

void STM32_EEPROM::loadMemory(uint16_t Address, uint32_t *Val)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b084      	sub	sp, #16
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	60f8      	str	r0, [r7, #12]
 80052ca:	460b      	mov	r3, r1
 80052cc:	607a      	str	r2, [r7, #4]
 80052ce:	817b      	strh	r3, [r7, #10]
	tranferMemToRam(eepromArray);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4619      	mov	r1, r3
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f7ff ff7c 	bl	80051d4 <_ZN12STM32_EEPROM15tranferMemToRamEPm>
	*Val = eepromArray[Address];
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	897b      	ldrh	r3, [r7, #10]
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	601a      	str	r2, [r3, #0]
}
 80052ec:	bf00      	nop
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <_ZN6BUTTON7readPinEv>:

#include "Keyboard.h"


bool BUTTON::readPin()
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
	bool State = false;
 80052fc:	2300      	movs	r3, #0
 80052fe:	73fb      	strb	r3, [r7, #15]
	if(HAL_GPIO_ReadPin(buttonPort, buttonPin) == (GPIO_PinState)LOW)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	889b      	ldrh	r3, [r3, #4]
 8005308:	4619      	mov	r1, r3
 800530a:	4610      	mov	r0, r2
 800530c:	f008 f9a4 	bl	800d658 <HAL_GPIO_ReadPin>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	bf0c      	ite	eq
 8005316:	2301      	moveq	r3, #1
 8005318:	2300      	movne	r3, #0
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <_ZN6BUTTON7readPinEv+0x30>
	{
		State = true;
 8005320:	2301      	movs	r3, #1
 8005322:	73fb      	strb	r3, [r7, #15]
	}
	return State;
 8005324:	7bfb      	ldrb	r3, [r7, #15]
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <_ZN6BUTTONC1EP12GPIO_TypeDeftt>:

BUTTON::BUTTON(GPIO_TypeDef *ButtonPort, uint16_t ButtonPin, uint16_t LongPressDelay)
 800532e:	b480      	push	{r7}
 8005330:	b085      	sub	sp, #20
 8005332:	af00      	add	r7, sp, #0
 8005334:	60f8      	str	r0, [r7, #12]
 8005336:	60b9      	str	r1, [r7, #8]
 8005338:	4611      	mov	r1, r2
 800533a:	461a      	mov	r2, r3
 800533c:	460b      	mov	r3, r1
 800533e:	80fb      	strh	r3, [r7, #6]
 8005340:	4613      	mov	r3, r2
 8005342:	80bb      	strh	r3, [r7, #4]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	609a      	str	r2, [r3, #8]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	819a      	strh	r2, [r3, #12]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	739a      	strb	r2, [r3, #14]
{
	buttonPort = ButtonPort;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	601a      	str	r2, [r3, #0]
	buttonPin = ButtonPin;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	88fa      	ldrh	r2, [r7, #6]
 8005360:	809a      	strh	r2, [r3, #4]
	delay = LongPressDelay;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	88ba      	ldrh	r2, [r7, #4]
 8005366:	819a      	strh	r2, [r3, #12]
}
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4618      	mov	r0, r3
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	bc80      	pop	{r7}
 8005372:	4770      	bx	lr

08005374 <_ZN6BUTTON11checkButtonEv>:

uint8_t BUTTON::checkButton()
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
	uint8_t Status = NO_PRESS;
 800537c:	2302      	movs	r3, #2
 800537e:	73fb      	strb	r3, [r7, #15]
	bool LongPressed = false;
 8005380:	2300      	movs	r3, #0
 8005382:	73bb      	strb	r3, [r7, #14]
	bool ButtonState = readPin();
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f7ff ffb5 	bl	80052f4 <_ZN6BUTTON7readPinEv>
 800538a:	4603      	mov	r3, r0
 800538c:	737b      	strb	r3, [r7, #13]
	if(ButtonState)
 800538e:	7b7b      	ldrb	r3, [r7, #13]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d03c      	beq.n	800540e <_ZN6BUTTON11checkButtonEv+0x9a>
	{
		longPressDelay = HAL_GetTick();
 8005394:	f006 fef0 	bl	800c178 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	609a      	str	r2, [r3, #8]
		while(ButtonState)
 800539e:	7b7b      	ldrb	r3, [r7, #13]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d015      	beq.n	80053d0 <_ZN6BUTTON11checkButtonEv+0x5c>
		{
			ButtonState = readPin();
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f7ff ffa5 	bl	80052f4 <_ZN6BUTTON7readPinEv>
 80053aa:	4603      	mov	r3, r0
 80053ac:	737b      	strb	r3, [r7, #13]
			if(HAL_GetTick() - longPressDelay > delay)
 80053ae:	f006 fee3 	bl	800c178 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	8992      	ldrh	r2, [r2, #12]
 80053be:	4293      	cmp	r3, r2
 80053c0:	bf8c      	ite	hi
 80053c2:	2301      	movhi	r3, #1
 80053c4:	2300      	movls	r3, #0
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d0e8      	beq.n	800539e <_ZN6BUTTON11checkButtonEv+0x2a>
			{
				LongPressed = true;
 80053cc:	2301      	movs	r3, #1
 80053ce:	73bb      	strb	r3, [r7, #14]
				break;
			}
		}
		if(!LongPressed)
 80053d0:	7bbb      	ldrb	r3, [r7, #14]
 80053d2:	f083 0301 	eor.w	r3, r3, #1
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00d      	beq.n	80053f8 <_ZN6BUTTON11checkButtonEv+0x84>
		{
			if(!wasLongPressed)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	7b9b      	ldrb	r3, [r3, #14]
 80053e0:	f083 0301 	eor.w	r3, r3, #1
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d002      	beq.n	80053f0 <_ZN6BUTTON11checkButtonEv+0x7c>
				Status = PRESSED;
 80053ea:	2300      	movs	r3, #0
 80053ec:	73fb      	strb	r3, [r7, #15]
 80053ee:	e008      	b.n	8005402 <_ZN6BUTTON11checkButtonEv+0x8e>
			else
				wasLongPressed = false;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	739a      	strb	r2, [r3, #14]
 80053f6:	e004      	b.n	8005402 <_ZN6BUTTON11checkButtonEv+0x8e>
		}
		else
		{
			Status = LONG_PRESSED;
 80053f8:	2301      	movs	r3, #1
 80053fa:	73fb      	strb	r3, [r7, #15]
			wasLongPressed = true;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	739a      	strb	r2, [r3, #14]
		}
		longPressDelay = 0;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	609a      	str	r2, [r3, #8]
		HAL_Delay(10);
 8005408:	200a      	movs	r0, #10
 800540a:	f006 febf 	bl	800c18c <HAL_Delay>
	}
	return Status;
 800540e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <_ZN8DryerKeyC1Ev>:

DryerKey::DryerKey()
 8005418:	b590      	push	{r4, r7, lr}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
{
	keys[0] = new BUTTON(UpButton_GPIO_Port, UpButton_Pin, 250);
 8005420:	2010      	movs	r0, #16
 8005422:	f00b fd77 	bl	8010f14 <_Znwj>
 8005426:	4603      	mov	r3, r0
 8005428:	461c      	mov	r4, r3
 800542a:	23fa      	movs	r3, #250	; 0xfa
 800542c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005430:	491b      	ldr	r1, [pc, #108]	; (80054a0 <_ZN8DryerKeyC1Ev+0x88>)
 8005432:	4620      	mov	r0, r4
 8005434:	f7ff ff7b 	bl	800532e <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	601c      	str	r4, [r3, #0]
	keys[1] = new BUTTON(DownButton_GPIO_Port, DownButton_Pin, 250);
 800543c:	2010      	movs	r0, #16
 800543e:	f00b fd69 	bl	8010f14 <_Znwj>
 8005442:	4603      	mov	r3, r0
 8005444:	461c      	mov	r4, r3
 8005446:	23fa      	movs	r3, #250	; 0xfa
 8005448:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800544c:	4914      	ldr	r1, [pc, #80]	; (80054a0 <_ZN8DryerKeyC1Ev+0x88>)
 800544e:	4620      	mov	r0, r4
 8005450:	f7ff ff6d 	bl	800532e <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	605c      	str	r4, [r3, #4]
	keys[2] = new BUTTON(LeftButton_GPIO_Port, LeftButton_Pin, 500);
 8005458:	2010      	movs	r0, #16
 800545a:	f00b fd5b 	bl	8010f14 <_Znwj>
 800545e:	4603      	mov	r3, r0
 8005460:	461c      	mov	r4, r3
 8005462:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005466:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800546a:	490d      	ldr	r1, [pc, #52]	; (80054a0 <_ZN8DryerKeyC1Ev+0x88>)
 800546c:	4620      	mov	r0, r4
 800546e:	f7ff ff5e 	bl	800532e <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	609c      	str	r4, [r3, #8]
	keys[3] = new BUTTON(OkButton_GPIO_Port, OkButton_Pin, 500);
 8005476:	2010      	movs	r0, #16
 8005478:	f00b fd4c 	bl	8010f14 <_Znwj>
 800547c:	4603      	mov	r3, r0
 800547e:	461c      	mov	r4, r3
 8005480:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005484:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005488:	4905      	ldr	r1, [pc, #20]	; (80054a0 <_ZN8DryerKeyC1Ev+0x88>)
 800548a:	4620      	mov	r0, r4
 800548c:	f7ff ff4f 	bl	800532e <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	60dc      	str	r4, [r3, #12]
}
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4618      	mov	r0, r3
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	bd90      	pop	{r4, r7, pc}
 800549e:	bf00      	nop
 80054a0:	40010c00 	.word	0x40010c00

080054a4 <_ZN8DryerKey8checkKeyEv>:

uint8_t DryerKey::checkKey()
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
	uint8_t KeyPressed = NO_KEY;
 80054ac:	2308      	movs	r3, #8
 80054ae:	75fb      	strb	r3, [r7, #23]
	for(int Key = 0; Key < MAX_KEYS; Key++)
 80054b0:	2300      	movs	r3, #0
 80054b2:	613b      	str	r3, [r7, #16]
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	2b03      	cmp	r3, #3
 80054b8:	dc1d      	bgt.n	80054f6 <_ZN8DryerKey8checkKeyEv+0x52>
	{
		uint8_t Status = keys[Key]->checkButton();
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7ff ff56 	bl	8005374 <_ZN6BUTTON11checkButtonEv>
 80054c8:	4603      	mov	r3, r0
 80054ca:	73fb      	strb	r3, [r7, #15]
		if(Status == PRESSED)
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d102      	bne.n	80054d8 <_ZN8DryerKey8checkKeyEv+0x34>
		{
			KeyPressed = Key;
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	75fb      	strb	r3, [r7, #23]
 80054d6:	e006      	b.n	80054e6 <_ZN8DryerKey8checkKeyEv+0x42>
		}
		else if(Status == LONG_PRESSED)
 80054d8:	7bfb      	ldrb	r3, [r7, #15]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d103      	bne.n	80054e6 <_ZN8DryerKey8checkKeyEv+0x42>
		{
			KeyPressed = Key + MAX_KEYS;
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	3304      	adds	r3, #4
 80054e4:	75fb      	strb	r3, [r7, #23]
		}
		if(Status != NO_PRESS)
 80054e6:	7bfb      	ldrb	r3, [r7, #15]
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d103      	bne.n	80054f4 <_ZN8DryerKey8checkKeyEv+0x50>
	for(int Key = 0; Key < MAX_KEYS; Key++)
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	3301      	adds	r3, #1
 80054f0:	613b      	str	r3, [r7, #16]
 80054f2:	e7df      	b.n	80054b4 <_ZN8DryerKey8checkKeyEv+0x10>
		{
			break;
 80054f4:	bf00      	nop
		}
	}
	return KeyPressed;
 80054f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3718      	adds	r7, #24
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <_ZN4RELE6setPinE9PIN_STATE>:
 */

#include "RELE.h"

void RELE::setPin(PIN_STATE State)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	460b      	mov	r3, r1
 800550a:	70fb      	strb	r3, [r7, #3]
	if(State != LOW && State != HIGH)
 800550c:	78fb      	ldrb	r3, [r7, #3]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d006      	beq.n	8005520 <_ZN4RELE6setPinE9PIN_STATE+0x20>
 8005512:	78fb      	ldrb	r3, [r7, #3]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d003      	beq.n	8005520 <_ZN4RELE6setPinE9PIN_STATE+0x20>
	{
		actualState = LOW;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	719a      	strb	r2, [r3, #6]
 800551e:	e007      	b.n	8005530 <_ZN4RELE6setPinE9PIN_STATE+0x30>
	}
	else
	{
		if(actualState != State)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	799b      	ldrb	r3, [r3, #6]
 8005524:	78fa      	ldrb	r2, [r7, #3]
 8005526:	429a      	cmp	r2, r3
 8005528:	d002      	beq.n	8005530 <_ZN4RELE6setPinE9PIN_STATE+0x30>
		{
			actualState = State;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	78fa      	ldrb	r2, [r7, #3]
 800552e:	719a      	strb	r2, [r3, #6]
		}
	}
	HAL_GPIO_WritePin(relePort, relePin, (GPIO_PinState)actualState);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6818      	ldr	r0, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	8899      	ldrh	r1, [r3, #4]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	799b      	ldrb	r3, [r3, #6]
 800553c:	461a      	mov	r2, r3
 800553e:	f008 f8b1 	bl	800d6a4 <HAL_GPIO_WritePin>
}
 8005542:	bf00      	nop
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>:




RELE::RELE(GPIO_TypeDef *RelePort, uint16_t RelePin, PIN_STATE InitialState)
 800554a:	b480      	push	{r7}
 800554c:	b085      	sub	sp, #20
 800554e:	af00      	add	r7, sp, #0
 8005550:	60f8      	str	r0, [r7, #12]
 8005552:	60b9      	str	r1, [r7, #8]
 8005554:	4611      	mov	r1, r2
 8005556:	461a      	mov	r2, r3
 8005558:	460b      	mov	r3, r1
 800555a:	80fb      	strh	r3, [r7, #6]
 800555c:	4613      	mov	r3, r2
 800555e:	717b      	strb	r3, [r7, #5]
{
	relePort = RelePort;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	601a      	str	r2, [r3, #0]
	relePin = RelePin;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	88fa      	ldrh	r2, [r7, #6]
 800556a:	809a      	strh	r2, [r3, #4]
	actualState = InitialState;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	797a      	ldrb	r2, [r7, #5]
 8005570:	719a      	strb	r2, [r3, #6]

}
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4618      	mov	r0, r3
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	bc80      	pop	{r7}
 800557c:	4770      	bx	lr

0800557e <_ZN4RELE8setStateE9PIN_STATE>:

void RELE::setState(PIN_STATE NewState)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b082      	sub	sp, #8
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
 8005586:	460b      	mov	r3, r1
 8005588:	70fb      	strb	r3, [r7, #3]
	setPin(NewState);
 800558a:	78fb      	ldrb	r3, [r7, #3]
 800558c:	4619      	mov	r1, r3
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7ff ffb6 	bl	8005500 <_ZN4RELE6setPinE9PIN_STATE>
}
 8005594:	bf00      	nop
 8005596:	3708      	adds	r7, #8
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <_ZNSt7__cxx115stoulERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:
  { return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(),
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af02      	add	r7, sp, #8
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f00b ff4d 	bl	8011448 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80055ae:	4602      	mov	r2, r0
			     __idx, __base); }
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	4904      	ldr	r1, [pc, #16]	; (80055c8 <_ZNSt7__cxx115stoulERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 80055b8:	4804      	ldr	r0, [pc, #16]	; (80055cc <_ZNSt7__cxx115stoulERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 80055ba:	f000 fcf2 	bl	8005fa2 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 80055be:	4603      	mov	r3, r0
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	080122d0 	.word	0x080122d0
 80055cc:	08011ad9 	.word	0x08011ad9

080055d0 <HAL_UART_RxCpltCallback>:
uint8_t RxBuffer[RECEIVE_BUFFER_LEN];
uint8_t RxData[RECEIVE_BUFFER_LEN];


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a0a      	ldr	r2, [pc, #40]	; (8005604 <HAL_UART_RxCpltCallback+0x34>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d10c      	bne.n	80055fa <HAL_UART_RxCpltCallback+0x2a>
	{
		RxReady = true;
 80055e0:	4b09      	ldr	r3, [pc, #36]	; (8005608 <HAL_UART_RxCpltCallback+0x38>)
 80055e2:	2201      	movs	r2, #1
 80055e4:	701a      	strb	r2, [r3, #0]
		memcpy(RxData, RxBuffer, RECEIVE_BUFFER_LEN);
 80055e6:	4b09      	ldr	r3, [pc, #36]	; (800560c <HAL_UART_RxCpltCallback+0x3c>)
 80055e8:	4a09      	ldr	r2, [pc, #36]	; (8005610 <HAL_UART_RxCpltCallback+0x40>)
 80055ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80055ec:	c303      	stmia	r3!, {r0, r1}
 80055ee:	801a      	strh	r2, [r3, #0]
		memset(RxBuffer, 0x00, RECEIVE_BUFFER_LEN);
 80055f0:	220a      	movs	r2, #10
 80055f2:	2100      	movs	r1, #0
 80055f4:	4806      	ldr	r0, [pc, #24]	; (8005610 <HAL_UART_RxCpltCallback+0x40>)
 80055f6:	f00c f8be 	bl	8011776 <memset>
	}
}
 80055fa:	bf00      	nop
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	200007e0 	.word	0x200007e0
 8005608:	20000694 	.word	0x20000694
 800560c:	200006a4 	.word	0x200006a4
 8005610:	20000698 	.word	0x20000698

08005614 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a0b      	ldr	r2, [pc, #44]	; (800564c <HAL_UART_ErrorCallback+0x38>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d10e      	bne.n	8005642 <HAL_UART_ErrorCallback+0x2e>
	{
		memset(RxBuffer, 0x00, RECEIVE_BUFFER_LEN);
 8005624:	220a      	movs	r2, #10
 8005626:	2100      	movs	r1, #0
 8005628:	4809      	ldr	r0, [pc, #36]	; (8005650 <HAL_UART_ErrorCallback+0x3c>)
 800562a:	f00c f8a4 	bl	8011776 <memset>
		memset(RxData, 0x00, RECEIVE_BUFFER_LEN);
 800562e:	220a      	movs	r2, #10
 8005630:	2100      	movs	r1, #0
 8005632:	4808      	ldr	r0, [pc, #32]	; (8005654 <HAL_UART_ErrorCallback+0x40>)
 8005634:	f00c f89f 	bl	8011776 <memset>
		HAL_UART_Receive_IT(&huart1, RxBuffer, RECEIVE_BUFFER_LEN);
 8005638:	220a      	movs	r2, #10
 800563a:	4905      	ldr	r1, [pc, #20]	; (8005650 <HAL_UART_ErrorCallback+0x3c>)
 800563c:	4803      	ldr	r0, [pc, #12]	; (800564c <HAL_UART_ErrorCallback+0x38>)
 800563e:	f00b f88c 	bl	801075a <HAL_UART_Receive_IT>
	}
}
 8005642:	bf00      	nop
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	200007e0 	.word	0x200007e0
 8005650:	20000698 	.word	0x20000698
 8005654:	200006a4 	.word	0x200006a4

08005658 <_ZN13SerialMessage11writeSerialEv>:

void SerialMessage::writeSerial()
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
	uint16_t BufferLen = serialBuffer.size();
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4618      	mov	r0, r3
 8005664:	f00b fdd4 	bl	8011210 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8005668:	4603      	mov	r3, r0
 800566a:	81fb      	strh	r3, [r7, #14]
	if(!RxReady)
 800566c:	4b0a      	ldr	r3, [pc, #40]	; (8005698 <_ZN13SerialMessage11writeSerialEv+0x40>)
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	b2db      	uxtb	r3, r3
 8005672:	f083 0301 	eor.w	r3, r3, #1
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b00      	cmp	r3, #0
 800567a:	d009      	beq.n	8005690 <_ZN13SerialMessage11writeSerialEv+0x38>
		HAL_UART_Transmit(&huart1, (uint8_t *)serialBuffer.c_str(), BufferLen, SEND_TIMEOUT);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4618      	mov	r0, r3
 8005680:	f00b fee2 	bl	8011448 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8005684:	4601      	mov	r1, r0
 8005686:	89fa      	ldrh	r2, [r7, #14]
 8005688:	2364      	movs	r3, #100	; 0x64
 800568a:	4804      	ldr	r0, [pc, #16]	; (800569c <_ZN13SerialMessage11writeSerialEv+0x44>)
 800568c:	f00a ffcc 	bl	8010628 <HAL_UART_Transmit>
}
 8005690:	bf00      	nop
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	20000694 	.word	0x20000694
 800569c:	200007e0 	.word	0x200007e0

080056a0 <_ZN13SerialMessageC1Ev>:


SerialMessage::SerialMessage()
 80056a0:	b590      	push	{r4, r7, lr}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	687c      	ldr	r4, [r7, #4]
 80056aa:	f107 0308 	add.w	r3, r7, #8
 80056ae:	4618      	mov	r0, r3
 80056b0:	f00b fc4c 	bl	8010f4c <_ZNSaIcEC1Ev>
 80056b4:	f107 0308 	add.w	r3, r7, #8
 80056b8:	461a      	mov	r2, r3
 80056ba:	491f      	ldr	r1, [pc, #124]	; (8005738 <_ZN13SerialMessageC1Ev+0x98>)
 80056bc:	4620      	mov	r0, r4
 80056be:	f00b ff0d 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80056c2:	f107 0308 	add.w	r3, r7, #8
 80056c6:	4618      	mov	r0, r3
 80056c8:	f00b fc41 	bl	8010f4e <_ZNSaIcED1Ev>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f103 0418 	add.w	r4, r3, #24
 80056d2:	f107 030c 	add.w	r3, r7, #12
 80056d6:	4618      	mov	r0, r3
 80056d8:	f00b fc38 	bl	8010f4c <_ZNSaIcEC1Ev>
 80056dc:	f107 030c 	add.w	r3, r7, #12
 80056e0:	461a      	mov	r2, r3
 80056e2:	4915      	ldr	r1, [pc, #84]	; (8005738 <_ZN13SerialMessageC1Ev+0x98>)
 80056e4:	4620      	mov	r0, r4
 80056e6:	f00b fef9 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80056ea:	f107 030c 	add.w	r3, r7, #12
 80056ee:	4618      	mov	r0, r3
 80056f0:	f00b fc2d 	bl	8010f4e <_ZNSaIcED1Ev>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005702:	635a      	str	r2, [r3, #52]	; 0x34
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
{
	checkSerialDeviceTimer = new ChronoTimer(ChronoTimer::MILLIS);
 800570c:	2014      	movs	r0, #20
 800570e:	f00b fc01 	bl	8010f14 <_Znwj>
 8005712:	4603      	mov	r3, r0
 8005714:	461c      	mov	r4, r3
 8005716:	2100      	movs	r1, #0
 8005718:	4620      	mov	r0, r4
 800571a:	f7fd fda0 	bl	800325e <_ZN11ChronoTimerC1Eh>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	639c      	str	r4, [r3, #56]	; 0x38
	HAL_UART_Receive_IT(&huart1, RxBuffer, RECEIVE_BUFFER_LEN);
 8005722:	220a      	movs	r2, #10
 8005724:	4905      	ldr	r1, [pc, #20]	; (800573c <_ZN13SerialMessageC1Ev+0x9c>)
 8005726:	4806      	ldr	r0, [pc, #24]	; (8005740 <_ZN13SerialMessageC1Ev+0xa0>)
 8005728:	f00b f817 	bl	801075a <HAL_UART_Receive_IT>
}
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4618      	mov	r0, r3
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	bd90      	pop	{r4, r7, pc}
 8005736:	bf00      	nop
 8005738:	080122d8 	.word	0x080122d8
 800573c:	20000698 	.word	0x20000698
 8005740:	200007e0 	.word	0x200007e0

08005744 <_ZN13SerialMessage15clearDataBufferEv>:

void SerialMessage::clearDataBuffer()
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
	memset(RxData, 0x00, RECEIVE_BUFFER_LEN);
 800574c:	220a      	movs	r2, #10
 800574e:	2100      	movs	r1, #0
 8005750:	4803      	ldr	r0, [pc, #12]	; (8005760 <_ZN13SerialMessage15clearDataBufferEv+0x1c>)
 8005752:	f00c f810 	bl	8011776 <memset>
}
 8005756:	bf00      	nop
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	200006a4 	.word	0x200006a4

08005764 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm>:


void SerialMessage::sendMessage(String Message, bool NewLine, uint32_t SendDelay)
{
 8005764:	b590      	push	{r4, r7, lr}
 8005766:	b08b      	sub	sp, #44	; 0x2c
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	603b      	str	r3, [r7, #0]
 8005770:	4613      	mov	r3, r2
 8005772:	71fb      	strb	r3, [r7, #7]
	if(!Message.empty())
 8005774:	68b8      	ldr	r0, [r7, #8]
 8005776:	f00b fd4f 	bl	8011218 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 800577a:	4603      	mov	r3, r0
 800577c:	f083 0301 	eor.w	r3, r3, #1
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d025      	beq.n	80057d2 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm+0x6e>
	{
		if(NewLine)
 8005786:	79fb      	ldrb	r3, [r7, #7]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d013      	beq.n	80057b4 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm+0x50>
			serialBuffer = Message + "\n";
 800578c:	68fc      	ldr	r4, [r7, #12]
 800578e:	f107 0310 	add.w	r3, r7, #16
 8005792:	4a14      	ldr	r2, [pc, #80]	; (80057e4 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm+0x80>)
 8005794:	68b9      	ldr	r1, [r7, #8]
 8005796:	4618      	mov	r0, r3
 8005798:	f7fe fbe0 	bl	8003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 800579c:	f107 0310 	add.w	r3, r7, #16
 80057a0:	4619      	mov	r1, r3
 80057a2:	4620      	mov	r0, r4
 80057a4:	f00b fd0f 	bl	80111c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80057a8:	f107 0310 	add.w	r3, r7, #16
 80057ac:	4618      	mov	r0, r3
 80057ae:	f00b fcfe 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80057b2:	e004      	b.n	80057be <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm+0x5a>
		else
			serialBuffer = Message;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	68b9      	ldr	r1, [r7, #8]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f00b fcfe 	bl	80111ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		writeSerial();
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f7ff ff4a 	bl	8005658 <_ZN13SerialMessage11writeSerialEv>
		if(SendDelay != 0)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d008      	beq.n	80057dc <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm+0x78>
		{
			HAL_Delay(SendDelay);
 80057ca:	6838      	ldr	r0, [r7, #0]
 80057cc:	f006 fcde 	bl	800c18c <HAL_Delay>
	}
	else
	{
		serialBuffer = "Errore: messaggio mancante";
	}
}
 80057d0:	e004      	b.n	80057dc <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm+0x78>
		serialBuffer = "Errore: messaggio mancante";
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	4904      	ldr	r1, [pc, #16]	; (80057e8 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm+0x84>)
 80057d6:	4618      	mov	r0, r3
 80057d8:	f00b fdcd 	bl	8011376 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
}
 80057dc:	bf00      	nop
 80057de:	372c      	adds	r7, #44	; 0x2c
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd90      	pop	{r4, r7, pc}
 80057e4:	080122dc 	.word	0x080122dc
 80057e8:	080122e0 	.word	0x080122e0

080057ec <_ZN13SerialMessage17readSerialPollingEv>:

bool SerialMessage::readSerialPolling()
{
 80057ec:	b590      	push	{r4, r7, lr}
 80057ee:	b08d      	sub	sp, #52	; 0x34
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
	bool Ready = false;
 80057f4:	2300      	movs	r3, #0
 80057f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	String CommandStr = "";
 80057fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057fe:	4618      	mov	r0, r3
 8005800:	f00b fba4 	bl	8010f4c <_ZNSaIcEC1Ev>
 8005804:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005808:	f107 030c 	add.w	r3, r7, #12
 800580c:	4927      	ldr	r1, [pc, #156]	; (80058ac <_ZN13SerialMessage17readSerialPollingEv+0xc0>)
 800580e:	4618      	mov	r0, r3
 8005810:	f00b fe64 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005818:	4618      	mov	r0, r3
 800581a:	f00b fb98 	bl	8010f4e <_ZNSaIcED1Ev>

//	HAL_UART_Receive(&huart1, rxBuffer, RECEIVE_BUFFER_LEN, 100);
	if(RxReady)
 800581e:	4b24      	ldr	r3, [pc, #144]	; (80058b0 <_ZN13SerialMessage17readSerialPollingEv+0xc4>)
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	d035      	beq.n	8005894 <_ZN13SerialMessage17readSerialPollingEv+0xa8>
	{
		if(RxData[0] == '$' && (RxData[3] == '=' || RxData[3] == '$'))
 8005828:	4b22      	ldr	r3, [pc, #136]	; (80058b4 <_ZN13SerialMessage17readSerialPollingEv+0xc8>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b24      	cmp	r3, #36	; 0x24
 800582e:	d10b      	bne.n	8005848 <_ZN13SerialMessage17readSerialPollingEv+0x5c>
 8005830:	4b20      	ldr	r3, [pc, #128]	; (80058b4 <_ZN13SerialMessage17readSerialPollingEv+0xc8>)
 8005832:	78db      	ldrb	r3, [r3, #3]
 8005834:	2b3d      	cmp	r3, #61	; 0x3d
 8005836:	d003      	beq.n	8005840 <_ZN13SerialMessage17readSerialPollingEv+0x54>
 8005838:	4b1e      	ldr	r3, [pc, #120]	; (80058b4 <_ZN13SerialMessage17readSerialPollingEv+0xc8>)
 800583a:	78db      	ldrb	r3, [r3, #3]
 800583c:	2b24      	cmp	r3, #36	; 0x24
 800583e:	d103      	bne.n	8005848 <_ZN13SerialMessage17readSerialPollingEv+0x5c>
		{
			Ready = true;
 8005840:	2301      	movs	r3, #1
 8005842:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005846:	e01d      	b.n	8005884 <_ZN13SerialMessage17readSerialPollingEv+0x98>
		}
		else
		{
			for(int i = 0; i < RECEIVE_BUFFER_LEN; i++)
 8005848:	2300      	movs	r3, #0
 800584a:	62bb      	str	r3, [r7, #40]	; 0x28
 800584c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584e:	2b09      	cmp	r3, #9
 8005850:	dc0d      	bgt.n	800586e <_ZN13SerialMessage17readSerialPollingEv+0x82>
			{
				CommandStr.push_back(RxData[i]);
 8005852:	4a18      	ldr	r2, [pc, #96]	; (80058b4 <_ZN13SerialMessage17readSerialPollingEv+0xc8>)
 8005854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005856:	4413      	add	r3, r2
 8005858:	781a      	ldrb	r2, [r3, #0]
 800585a:	f107 030c 	add.w	r3, r7, #12
 800585e:	4611      	mov	r1, r2
 8005860:	4618      	mov	r0, r3
 8005862:	f00b fce1 	bl	8011228 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
			for(int i = 0; i < RECEIVE_BUFFER_LEN; i++)
 8005866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005868:	3301      	adds	r3, #1
 800586a:	62bb      	str	r3, [r7, #40]	; 0x28
 800586c:	e7ee      	b.n	800584c <_ZN13SerialMessage17readSerialPollingEv+0x60>
			}
			commandReceived = CommandStr;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	3318      	adds	r3, #24
 8005872:	f107 020c 	add.w	r2, r7, #12
 8005876:	4611      	mov	r1, r2
 8005878:	4618      	mov	r0, r3
 800587a:	f00b fc9e 	bl	80111ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
			Ready = false;
 800587e:	2300      	movs	r3, #0
 8005880:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		RxReady = false;
 8005884:	4b0a      	ldr	r3, [pc, #40]	; (80058b0 <_ZN13SerialMessage17readSerialPollingEv+0xc4>)
 8005886:	2200      	movs	r2, #0
 8005888:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, RxBuffer, RECEIVE_BUFFER_LEN);
 800588a:	220a      	movs	r2, #10
 800588c:	490a      	ldr	r1, [pc, #40]	; (80058b8 <_ZN13SerialMessage17readSerialPollingEv+0xcc>)
 800588e:	480b      	ldr	r0, [pc, #44]	; (80058bc <_ZN13SerialMessage17readSerialPollingEv+0xd0>)
 8005890:	f00a ff63 	bl	801075a <HAL_UART_Receive_IT>
	}
	return Ready;
 8005894:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
	String CommandStr = "";
 8005898:	f107 030c 	add.w	r3, r7, #12
 800589c:	4618      	mov	r0, r3
 800589e:	f00b fc86 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return Ready;
 80058a2:	4623      	mov	r3, r4
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3734      	adds	r7, #52	; 0x34
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd90      	pop	{r4, r7, pc}
 80058ac:	080122d8 	.word	0x080122d8
 80058b0:	20000694 	.word	0x20000694
 80058b4:	200006a4 	.word	0x200006a4
 80058b8:	20000698 	.word	0x20000698
 80058bc:	200007e0 	.word	0x200007e0

080058c0 <_ZN13SerialMessage15getStartStopReqEPc>:

int16_t SerialMessage::getStartStopReq(char *Req)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
	int16_t RetVal = INVALID_MESSAGE;
 80058ca:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80058ce:	81fb      	strh	r3, [r7, #14]
	if(valueSetted == UINT32_MAX)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d8:	d13f      	bne.n	800595a <_ZN13SerialMessage15getStartStopReqEPc+0x9a>
	{
		if((Req[0] >= '0' && Req[0] <= '9') && (Req[1] >= '0' && Req[1] <= '9'))
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b2f      	cmp	r3, #47	; 0x2f
 80058e0:	d92b      	bls.n	800593a <_ZN13SerialMessage15getStartStopReqEPc+0x7a>
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	2b39      	cmp	r3, #57	; 0x39
 80058e8:	d827      	bhi.n	800593a <_ZN13SerialMessage15getStartStopReqEPc+0x7a>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	3301      	adds	r3, #1
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	2b2f      	cmp	r3, #47	; 0x2f
 80058f2:	d922      	bls.n	800593a <_ZN13SerialMessage15getStartStopReqEPc+0x7a>
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	3301      	adds	r3, #1
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	2b39      	cmp	r3, #57	; 0x39
 80058fc:	d81d      	bhi.n	800593a <_ZN13SerialMessage15getStartStopReqEPc+0x7a>
		{
			if(Req[0] == '0')
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	2b30      	cmp	r3, #48	; 0x30
 8005904:	d107      	bne.n	8005916 <_ZN13SerialMessage15getStartStopReqEPc+0x56>
			{
				RetVal = START_STOP_COMMANDS_START + (Req[1] - '0');
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	3301      	adds	r3, #1
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	b29b      	uxth	r3, r3
 800590e:	3398      	adds	r3, #152	; 0x98
 8005910:	b29b      	uxth	r3, r3
 8005912:	81fb      	strh	r3, [r7, #14]
 8005914:	e011      	b.n	800593a <_ZN13SerialMessage15getStartStopReqEPc+0x7a>
			}
			else
			{
				RetVal = START_STOP_COMMANDS_START + (((Req[0] - '0') * 10) + (Req[1] - '0'));
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	3b30      	subs	r3, #48	; 0x30
 800591c:	b29b      	uxth	r3, r3
 800591e:	461a      	mov	r2, r3
 8005920:	0092      	lsls	r2, r2, #2
 8005922:	4413      	add	r3, r2
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	b29a      	uxth	r2, r3
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	3301      	adds	r3, #1
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	b29b      	uxth	r3, r3
 8005930:	4413      	add	r3, r2
 8005932:	b29b      	uxth	r3, r3
 8005934:	3398      	adds	r3, #152	; 0x98
 8005936:	b29b      	uxth	r3, r3
 8005938:	81fb      	strh	r3, [r7, #14]
			}
		}
		if((RetVal >= MAX_START_STOP_COMMANDS && RetVal == START_STOP_COMMANDS_START) || RetVal == INVALID_MESSAGE)
 800593a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800593e:	2bd2      	cmp	r3, #210	; 0xd2
 8005940:	dd03      	ble.n	800594a <_ZN13SerialMessage15getStartStopReqEPc+0x8a>
 8005942:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005946:	2bc8      	cmp	r3, #200	; 0xc8
 8005948:	d004      	beq.n	8005954 <_ZN13SerialMessage15getStartStopReqEPc+0x94>
 800594a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800594e:	f113 0f02 	cmn.w	r3, #2
 8005952:	d102      	bne.n	800595a <_ZN13SerialMessage15getStartStopReqEPc+0x9a>
		{
			RetVal = INVALID_MESSAGE;
 8005954:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005958:	81fb      	strh	r3, [r7, #14]
		}
	}
	return RetVal;
 800595a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	bc80      	pop	{r7}
 8005966:	4770      	bx	lr

08005968 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

int16_t SerialMessage::getSetReq(char *Req, String Command)
{
 8005968:	b590      	push	{r4, r7, lr}
 800596a:	b08f      	sub	sp, #60	; 0x3c
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
	int16_t RetVal = INVALID_MESSAGE;
 8005974:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005978:	86fb      	strh	r3, [r7, #54]	; 0x36
	if(valueSetted == UINT32_MAX)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800597e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005982:	f040 80e2 	bne.w	8005b4a <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e2>
	{
		if((Req[0] >= '0' && Req[0] <= '9') && (Req[1] >= '0' && Req[1] <= '9'))
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	2b2f      	cmp	r3, #47	; 0x2f
 800598c:	d92b      	bls.n	80059e6 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	2b39      	cmp	r3, #57	; 0x39
 8005994:	d827      	bhi.n	80059e6 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	3301      	adds	r3, #1
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	2b2f      	cmp	r3, #47	; 0x2f
 800599e:	d922      	bls.n	80059e6 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	3301      	adds	r3, #1
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	2b39      	cmp	r3, #57	; 0x39
 80059a8:	d81d      	bhi.n	80059e6 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
		{
			if(Req[0] == '0')
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	2b30      	cmp	r3, #48	; 0x30
 80059b0:	d107      	bne.n	80059c2 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5a>
			{
				RetVal = SET_COMMAND_START + (Req[1] - '0');
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	3301      	adds	r3, #1
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	3b26      	subs	r3, #38	; 0x26
 80059bc:	b29b      	uxth	r3, r3
 80059be:	86fb      	strh	r3, [r7, #54]	; 0x36
 80059c0:	e011      	b.n	80059e6 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
			}
			else
			{
				RetVal = SET_COMMAND_START + (((Req[0] - '0') * 10) + (Req[1] - '0'));
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	3b30      	subs	r3, #48	; 0x30
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	461a      	mov	r2, r3
 80059cc:	0092      	lsls	r2, r2, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	005b      	lsls	r3, r3, #1
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	3301      	adds	r3, #1
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	b29b      	uxth	r3, r3
 80059dc:	4413      	add	r3, r2
 80059de:	b29b      	uxth	r3, r3
 80059e0:	3b26      	subs	r3, #38	; 0x26
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	86fb      	strh	r3, [r7, #54]	; 0x36
			}
		}
		if(RetVal >= MAX_SET_COMMANDS && RetVal == SET_COMMAND_START)
 80059e6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80059ea:	2b1a      	cmp	r3, #26
 80059ec:	dd06      	ble.n	80059fc <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x94>
 80059ee:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80059f2:	2b0a      	cmp	r3, #10
 80059f4:	d102      	bne.n	80059fc <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x94>
		{
			RetVal = INVALID_MESSAGE;
 80059f6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80059fa:	86fb      	strh	r3, [r7, #54]	; 0x36
		}
		if(RetVal != INVALID_MESSAGE)
 80059fc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005a00:	f113 0f02 	cmn.w	r3, #2
 8005a04:	f000 80a1 	beq.w	8005b4a <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e2>
		{
			String ValStr = "";
 8005a08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f00b fa9d 	bl	8010f4c <_ZNSaIcEC1Ev>
 8005a12:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005a16:	f107 0310 	add.w	r3, r7, #16
 8005a1a:	494f      	ldr	r1, [pc, #316]	; (8005b58 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1f0>)
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f00b fd5d 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005a22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a26:	4618      	mov	r0, r3
 8005a28:	f00b fa91 	bl	8010f4e <_ZNSaIcED1Ev>
			bool ZeroChecked = false;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			int ValueLen = Command.length() - 5;
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f00b fbee 	bl	8011214 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	3b05      	subs	r3, #5
 8005a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
			for(uint16_t i = 4; i < Command.length() - 1; i++)
 8005a3e:	2304      	movs	r3, #4
 8005a40:	867b      	strh	r3, [r7, #50]	; 0x32
 8005a42:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f00b fbe5 	bl	8011214 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	429c      	cmp	r4, r3
 8005a50:	bf34      	ite	cc
 8005a52:	2301      	movcc	r3, #1
 8005a54:	2300      	movcs	r3, #0
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d058      	beq.n	8005b0e <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a6>
			{
				if(ValueLen > 1  && !ZeroChecked)
 8005a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	dd2a      	ble.n	8005ab8 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x150>
 8005a62:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005a66:	f083 0301 	eor.w	r3, r3, #1
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d023      	beq.n	8005ab8 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x150>
				{
					while(i < Command.length() - 1)
 8005a70:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f00b fbce 	bl	8011214 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	429c      	cmp	r4, r3
 8005a7e:	bf34      	ite	cc
 8005a80:	2301      	movcc	r3, #1
 8005a82:	2300      	movcs	r3, #0
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d02b      	beq.n	8005ae2 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x17a>
					{
						if(Command[i] == '0')
 8005a8a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f00b fbc7 	bl	8011222 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8005a94:	4603      	mov	r3, r0
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	2b30      	cmp	r3, #48	; 0x30
 8005a9a:	bf0c      	ite	eq
 8005a9c:	2301      	moveq	r3, #1
 8005a9e:	2300      	movne	r3, #0
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x146>
							i++;
 8005aa6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	867b      	strh	r3, [r7, #50]	; 0x32
 8005aac:	e7e0      	b.n	8005a70 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x108>
						else
						{
							ZeroChecked = true;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
							break;
 8005ab4:	bf00      	nop
				if(ValueLen > 1  && !ZeroChecked)
 8005ab6:	e014      	b.n	8005ae2 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x17a>
						}
					}
				}
				else if(ValueLen == 1 && Command[i] == '0')
 8005ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d10a      	bne.n	8005ad4 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16c>
 8005abe:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f00b fbad 	bl	8011222 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	2b30      	cmp	r3, #48	; 0x30
 8005ace:	d101      	bne.n	8005ad4 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16c>
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e000      	b.n	8005ad6 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16e>
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d004      	beq.n	8005ae4 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x17c>
				{
					ZeroChecked = true;
 8005ada:	2301      	movs	r3, #1
 8005adc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8005ae0:	e000      	b.n	8005ae4 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x17c>
				if(ValueLen > 1  && !ZeroChecked)
 8005ae2:	bf00      	nop
				}
				if(ZeroChecked)
 8005ae4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00c      	beq.n	8005b06 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x19e>
				{
					ValStr.push_back(Command[i]);
 8005aec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005aee:	4619      	mov	r1, r3
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f00b fb96 	bl	8011222 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8005af6:	4603      	mov	r3, r0
 8005af8:	781a      	ldrb	r2, [r3, #0]
 8005afa:	f107 0310 	add.w	r3, r7, #16
 8005afe:	4611      	mov	r1, r2
 8005b00:	4618      	mov	r0, r3
 8005b02:	f00b fb91 	bl	8011228 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
			for(uint16_t i = 4; i < Command.length() - 1; i++)
 8005b06:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005b08:	3301      	adds	r3, #1
 8005b0a:	867b      	strh	r3, [r7, #50]	; 0x32
 8005b0c:	e799      	b.n	8005a42 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xda>
				}
			}
			if(!ValStr.empty())
 8005b0e:	f107 0310 	add.w	r3, r7, #16
 8005b12:	4618      	mov	r0, r3
 8005b14:	f00b fb80 	bl	8011218 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	f083 0301 	eor.w	r3, r3, #1
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00a      	beq.n	8005b3a <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d2>
			{
				valueSetted = std::stoul(ValStr);
 8005b24:	f107 0310 	add.w	r3, r7, #16
 8005b28:	220a      	movs	r2, #10
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7ff fd35 	bl	800559c <_ZNSt7__cxx115stoulERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8005b32:	4602      	mov	r2, r0
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	635a      	str	r2, [r3, #52]	; 0x34
 8005b38:	e002      	b.n	8005b40 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d8>
			}
			else
			{
				RetVal = INVALID_MESSAGE;
 8005b3a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005b3e:	86fb      	strh	r3, [r7, #54]	; 0x36
			String ValStr = "";
 8005b40:	f107 0310 	add.w	r3, r7, #16
 8005b44:	4618      	mov	r0, r3
 8005b46:	f00b fb32 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			}
		}
	}
	return RetVal;
 8005b4a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	373c      	adds	r7, #60	; 0x3c
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd90      	pop	{r4, r7, pc}
 8005b56:	bf00      	nop
 8005b58:	080122d8 	.word	0x080122d8

08005b5c <_ZN13SerialMessage17isDeviceConnectedEv>:


bool SerialMessage::isDeviceConnected()
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b098      	sub	sp, #96	; 0x60
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
	if(checkSerialDeviceTimer->isFinished(true, DELAY_SERIAL_ALIVE_TIMER))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fd fc1f 	bl	80033b2 <_ZN11ChronoTimer10isFinishedEbm>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d02a      	beq.n	8005bd0 <_ZN13SerialMessage17isDeviceConnectedEv+0x74>
	{
		sendMessage("$?$", true, 10);
 8005b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f00b f9e4 	bl	8010f4c <_ZNSaIcEC1Ev>
 8005b84:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005b88:	f107 030c 	add.w	r3, r7, #12
 8005b8c:	4959      	ldr	r1, [pc, #356]	; (8005cf4 <_ZN13SerialMessage17isDeviceConnectedEv+0x198>)
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f00b fca4 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005b94:	f107 010c 	add.w	r1, r7, #12
 8005b98:	230a      	movs	r3, #10
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f7ff fde1 	bl	8005764 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm>
 8005ba2:	f107 030c 	add.w	r3, r7, #12
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f00b fb01 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f00b f9cc 	bl	8010f4e <_ZNSaIcED1Ev>
		if(connectionRetries < MAX_CONNECTION_RETRIES)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d807      	bhi.n	8005bd0 <_ZN13SerialMessage17isDeviceConnectedEv+0x74>
			connectionRetries++;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	}
	if(RxReady)
 8005bd0:	4b49      	ldr	r3, [pc, #292]	; (8005cf8 <_ZN13SerialMessage17isDeviceConnectedEv+0x19c>)
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d07b      	beq.n	8005cd2 <_ZN13SerialMessage17isDeviceConnectedEv+0x176>
	{
		if(RxData[0] == '$' && RxData[1] == '!' && RxData[2] == '$')
 8005bda:	4b48      	ldr	r3, [pc, #288]	; (8005cfc <_ZN13SerialMessage17isDeviceConnectedEv+0x1a0>)
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	2b24      	cmp	r3, #36	; 0x24
 8005be0:	d139      	bne.n	8005c56 <_ZN13SerialMessage17isDeviceConnectedEv+0xfa>
 8005be2:	4b46      	ldr	r3, [pc, #280]	; (8005cfc <_ZN13SerialMessage17isDeviceConnectedEv+0x1a0>)
 8005be4:	785b      	ldrb	r3, [r3, #1]
 8005be6:	2b21      	cmp	r3, #33	; 0x21
 8005be8:	d135      	bne.n	8005c56 <_ZN13SerialMessage17isDeviceConnectedEv+0xfa>
 8005bea:	4b44      	ldr	r3, [pc, #272]	; (8005cfc <_ZN13SerialMessage17isDeviceConnectedEv+0x1a0>)
 8005bec:	789b      	ldrb	r3, [r3, #2]
 8005bee:	2b24      	cmp	r3, #36	; 0x24
 8005bf0:	d131      	bne.n	8005c56 <_ZN13SerialMessage17isDeviceConnectedEv+0xfa>
		{
			devConnected = true;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			RxReady = false;
 8005bfa:	4b3f      	ldr	r3, [pc, #252]	; (8005cf8 <_ZN13SerialMessage17isDeviceConnectedEv+0x19c>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	701a      	strb	r2, [r3, #0]
			sendMessage("Thanks!", true, 10);
 8005c00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005c04:	4618      	mov	r0, r3
 8005c06:	f00b f9a1 	bl	8010f4c <_ZNSaIcEC1Ev>
 8005c0a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005c0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c12:	493b      	ldr	r1, [pc, #236]	; (8005d00 <_ZN13SerialMessage17isDeviceConnectedEv+0x1a4>)
 8005c14:	4618      	mov	r0, r3
 8005c16:	f00b fc61 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005c1a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005c1e:	230a      	movs	r3, #10
 8005c20:	2201      	movs	r2, #1
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7ff fd9e 	bl	8005764 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm>
 8005c28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f00b fabe 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005c32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005c36:	4618      	mov	r0, r3
 8005c38:	f00b f989 	bl	8010f4e <_ZNSaIcED1Ev>
			HAL_UART_Receive_IT(&huart1, RxBuffer, RECEIVE_BUFFER_LEN);
 8005c3c:	220a      	movs	r2, #10
 8005c3e:	4931      	ldr	r1, [pc, #196]	; (8005d04 <_ZN13SerialMessage17isDeviceConnectedEv+0x1a8>)
 8005c40:	4831      	ldr	r0, [pc, #196]	; (8005d08 <_ZN13SerialMessage17isDeviceConnectedEv+0x1ac>)
 8005c42:	f00a fd8a 	bl	801075a <HAL_UART_Receive_IT>
			clearDataBuffer();
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f7ff fd7c 	bl	8005744 <_ZN13SerialMessage15clearDataBufferEv>
			connectionRetries = 0;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005c54:	e03d      	b.n	8005cd2 <_ZN13SerialMessage17isDeviceConnectedEv+0x176>
		}
		else if(RxData[0] == '$' && (RxData[3] == '=' || RxData[3] == '$'))
 8005c56:	4b29      	ldr	r3, [pc, #164]	; (8005cfc <_ZN13SerialMessage17isDeviceConnectedEv+0x1a0>)
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	2b24      	cmp	r3, #36	; 0x24
 8005c5c:	d110      	bne.n	8005c80 <_ZN13SerialMessage17isDeviceConnectedEv+0x124>
 8005c5e:	4b27      	ldr	r3, [pc, #156]	; (8005cfc <_ZN13SerialMessage17isDeviceConnectedEv+0x1a0>)
 8005c60:	78db      	ldrb	r3, [r3, #3]
 8005c62:	2b3d      	cmp	r3, #61	; 0x3d
 8005c64:	d003      	beq.n	8005c6e <_ZN13SerialMessage17isDeviceConnectedEv+0x112>
 8005c66:	4b25      	ldr	r3, [pc, #148]	; (8005cfc <_ZN13SerialMessage17isDeviceConnectedEv+0x1a0>)
 8005c68:	78db      	ldrb	r3, [r3, #3]
 8005c6a:	2b24      	cmp	r3, #36	; 0x24
 8005c6c:	d108      	bne.n	8005c80 <_ZN13SerialMessage17isDeviceConnectedEv+0x124>
		{
			devConnected = true;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			connectionRetries = 0;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005c7e:	e028      	b.n	8005cd2 <_ZN13SerialMessage17isDeviceConnectedEv+0x176>
		}
		else
		{
			RxReady = false;
 8005c80:	4b1d      	ldr	r3, [pc, #116]	; (8005cf8 <_ZN13SerialMessage17isDeviceConnectedEv+0x19c>)
 8005c82:	2200      	movs	r2, #0
 8005c84:	701a      	strb	r2, [r3, #0]
			sendMessage("Who are you??", true, 10);
 8005c86:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f00b f95e 	bl	8010f4c <_ZNSaIcEC1Ev>
 8005c90:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005c94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005c98:	491c      	ldr	r1, [pc, #112]	; (8005d0c <_ZN13SerialMessage17isDeviceConnectedEv+0x1b0>)
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f00b fc1e 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005ca0:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8005ca4:	230a      	movs	r3, #10
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f7ff fd5b 	bl	8005764 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm>
 8005cae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f00b fa7b 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005cb8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f00b f946 	bl	8010f4e <_ZNSaIcED1Ev>
			HAL_UART_Receive_IT(&huart1, RxBuffer, RECEIVE_BUFFER_LEN);
 8005cc2:	220a      	movs	r2, #10
 8005cc4:	490f      	ldr	r1, [pc, #60]	; (8005d04 <_ZN13SerialMessage17isDeviceConnectedEv+0x1a8>)
 8005cc6:	4810      	ldr	r0, [pc, #64]	; (8005d08 <_ZN13SerialMessage17isDeviceConnectedEv+0x1ac>)
 8005cc8:	f00a fd47 	bl	801075a <HAL_UART_Receive_IT>
			clearDataBuffer();
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7ff fd39 	bl	8005744 <_ZN13SerialMessage15clearDataBufferEv>
		}
	}
	if(connectionRetries == MAX_CONNECTION_RETRIES)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cd8:	2b03      	cmp	r3, #3
 8005cda:	d103      	bne.n	8005ce4 <_ZN13SerialMessage17isDeviceConnectedEv+0x188>
	{
		devConnected = false;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	}
	return devConnected;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3760      	adds	r7, #96	; 0x60
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	080122fc 	.word	0x080122fc
 8005cf8:	20000694 	.word	0x20000694
 8005cfc:	200006a4 	.word	0x200006a4
 8005d00:	08012300 	.word	0x08012300
 8005d04:	20000698 	.word	0x20000698
 8005d08:	200007e0 	.word	0x200007e0
 8005d0c:	08012308 	.word	0x08012308

08005d10 <_ZN13SerialMessage20receiveSerialCommandEv>:


int16_t SerialMessage::receiveSerialCommand()
{
 8005d10:	b590      	push	{r4, r7, lr}
 8005d12:	b09b      	sub	sp, #108	; 0x6c
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
	String CommandStr = "";
 8005d18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f00b f915 	bl	8010f4c <_ZNSaIcEC1Ev>
 8005d22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005d26:	f107 0310 	add.w	r3, r7, #16
 8005d2a:	4969      	ldr	r1, [pc, #420]	; (8005ed0 <_ZN13SerialMessage20receiveSerialCommandEv+0x1c0>)
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f00b fbd5 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005d32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d36:	4618      	mov	r0, r3
 8005d38:	f00b f909 	bl	8010f4e <_ZNSaIcED1Ev>
	int16_t Command = NO_COMMANDS;
 8005d3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d40:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	bool InvalidMsg = false;
 8005d44:	2300      	movs	r3, #0
 8005d46:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	char Req[MAX_REQ_LEN];
	if(readSerialPolling())
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7ff fd4e 	bl	80057ec <_ZN13SerialMessage17readSerialPollingEv>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f000 80af 	beq.w	8005eb6 <_ZN13SerialMessage20receiveSerialCommandEv+0x1a6>
	{
		for(int i = 0; i < RECEIVE_BUFFER_LEN; i++)
 8005d58:	2300      	movs	r3, #0
 8005d5a:	663b      	str	r3, [r7, #96]	; 0x60
 8005d5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d5e:	2b09      	cmp	r3, #9
 8005d60:	dc28      	bgt.n	8005db4 <_ZN13SerialMessage20receiveSerialCommandEv+0xa4>
		{
			bool EndMsg = false;
 8005d62:	2300      	movs	r3, #0
 8005d64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if(RxData[i] == '$' && i > 0)
 8005d68:	4a5a      	ldr	r2, [pc, #360]	; (8005ed4 <_ZN13SerialMessage20receiveSerialCommandEv+0x1c4>)
 8005d6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d6c:	4413      	add	r3, r2
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	2b24      	cmp	r3, #36	; 0x24
 8005d72:	d106      	bne.n	8005d82 <_ZN13SerialMessage20receiveSerialCommandEv+0x72>
 8005d74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	dd03      	ble.n	8005d82 <_ZN13SerialMessage20receiveSerialCommandEv+0x72>
			{
				EndMsg = true;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005d80:	e002      	b.n	8005d88 <_ZN13SerialMessage20receiveSerialCommandEv+0x78>
			}
			else
			{
				InvalidMsg = true;
 8005d82:	2301      	movs	r3, #1
 8005d84:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			}
			CommandStr.push_back(RxData[i]);
 8005d88:	4a52      	ldr	r2, [pc, #328]	; (8005ed4 <_ZN13SerialMessage20receiveSerialCommandEv+0x1c4>)
 8005d8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d8c:	4413      	add	r3, r2
 8005d8e:	781a      	ldrb	r2, [r3, #0]
 8005d90:	f107 0310 	add.w	r3, r7, #16
 8005d94:	4611      	mov	r1, r2
 8005d96:	4618      	mov	r0, r3
 8005d98:	f00b fa46 	bl	8011228 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
			if(EndMsg)
 8005d9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d003      	beq.n	8005dac <_ZN13SerialMessage20receiveSerialCommandEv+0x9c>
			{
				InvalidMsg = false;
 8005da4:	2300      	movs	r3, #0
 8005da6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
				break;
 8005daa:	e003      	b.n	8005db4 <_ZN13SerialMessage20receiveSerialCommandEv+0xa4>
		for(int i = 0; i < RECEIVE_BUFFER_LEN; i++)
 8005dac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dae:	3301      	adds	r3, #1
 8005db0:	663b      	str	r3, [r7, #96]	; 0x60
 8005db2:	e7d3      	b.n	8005d5c <_ZN13SerialMessage20receiveSerialCommandEv+0x4c>
			}
		}
		commandReceived = CommandStr;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	3318      	adds	r3, #24
 8005db8:	f107 0210 	add.w	r2, r7, #16
 8005dbc:	4611      	mov	r1, r2
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f00b f9fb 	bl	80111ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		clearDataBuffer();
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f7ff fcbd 	bl	8005744 <_ZN13SerialMessage15clearDataBufferEv>
		if(InvalidMsg)
 8005dca:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d004      	beq.n	8005ddc <_ZN13SerialMessage20receiveSerialCommandEv+0xcc>
		{
			Command = INVALID_MESSAGE;
 8005dd2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005dd6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005dda:	e042      	b.n	8005e62 <_ZN13SerialMessage20receiveSerialCommandEv+0x152>
		}
		else
		{
			Req[0] = CommandStr[1];
 8005ddc:	f107 0310 	add.w	r3, r7, #16
 8005de0:	2101      	movs	r1, #1
 8005de2:	4618      	mov	r0, r3
 8005de4:	f00b fa1d 	bl	8011222 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8005de8:	4603      	mov	r3, r0
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	733b      	strb	r3, [r7, #12]
			Req[1] = CommandStr[2];
 8005dee:	f107 0310 	add.w	r3, r7, #16
 8005df2:	2102      	movs	r1, #2
 8005df4:	4618      	mov	r0, r3
 8005df6:	f00b fa14 	bl	8011222 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	737b      	strb	r3, [r7, #13]
			if(CommandStr[3] == '$')
 8005e00:	f107 0310 	add.w	r3, r7, #16
 8005e04:	2103      	movs	r1, #3
 8005e06:	4618      	mov	r0, r3
 8005e08:	f00b fa0b 	bl	8011222 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	2b24      	cmp	r3, #36	; 0x24
 8005e12:	bf0c      	ite	eq
 8005e14:	2301      	moveq	r3, #1
 8005e16:	2300      	movne	r3, #0
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d009      	beq.n	8005e32 <_ZN13SerialMessage20receiveSerialCommandEv+0x122>
			{
				Command = getStartStopReq(Req);
 8005e1e:	f107 030c 	add.w	r3, r7, #12
 8005e22:	4619      	mov	r1, r3
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f7ff fd4b 	bl	80058c0 <_ZN13SerialMessage15getStartStopReqEPc>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005e30:	e017      	b.n	8005e62 <_ZN13SerialMessage20receiveSerialCommandEv+0x152>
			}
			else
			{
				Command = getSetReq(Req, CommandStr);
 8005e32:	f107 0210 	add.w	r2, r7, #16
 8005e36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e3a:	4611      	mov	r1, r2
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f00b fb1a 	bl	8011476 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8005e42:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005e46:	f107 030c 	add.w	r3, r7, #12
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f7ff fd8b 	bl	8005968 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8005e52:	4603      	mov	r3, r0
 8005e54:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005e58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f00b f9a6 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			}

		}
		if(!InvalidMsg && Command != INVALID_MESSAGE)
 8005e62:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8005e66:	f083 0301 	eor.w	r3, r3, #1
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d022      	beq.n	8005eb6 <_ZN13SerialMessage20receiveSerialCommandEv+0x1a6>
 8005e70:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8005e74:	f113 0f02 	cmn.w	r3, #2
 8005e78:	d01d      	beq.n	8005eb6 <_ZN13SerialMessage20receiveSerialCommandEv+0x1a6>
		{
			sendMessage("$!$", true);
 8005e7a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f00b f864 	bl	8010f4c <_ZNSaIcEC1Ev>
 8005e84:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005e88:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005e8c:	4912      	ldr	r1, [pc, #72]	; (8005ed8 <_ZN13SerialMessage20receiveSerialCommandEv+0x1c8>)
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f00b fb24 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005e94:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8005e98:	2300      	movs	r3, #0
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f7ff fc61 	bl	8005764 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm>
 8005ea2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f00b f981 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005eac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f00b f84c 	bl	8010f4e <_ZNSaIcED1Ev>
		}
	}
	return Command;
 8005eb6:	f9b7 4066 	ldrsh.w	r4, [r7, #102]	; 0x66
	String CommandStr = "";
 8005eba:	f107 0310 	add.w	r3, r7, #16
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f00b f975 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return Command;
 8005ec4:	4623      	mov	r3, r4
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	376c      	adds	r7, #108	; 0x6c
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd90      	pop	{r4, r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	080122d8 	.word	0x080122d8
 8005ed4:	200006a4 	.word	0x200006a4
 8005ed8:	08012318 	.word	0x08012318

08005edc <_ZN13SerialMessage14getValueSettedEv>:

uint32_t SerialMessage::getValueSetted()
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
	uint32_t RetVal = valueSetted;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee8:	60fb      	str	r3, [r7, #12]
	valueSetted = UINT32_MAX;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f04f 32ff 	mov.w	r2, #4294967295
 8005ef0:	635a      	str	r2, [r3, #52]	; 0x34
	return RetVal;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3714      	adds	r7, #20
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bc80      	pop	{r7}
 8005efc:	4770      	bx	lr
	...

08005f00 <_ZN13SerialMessage18getCommandReceivedB5cxx11Ev>:



std::string SerialMessage::getCommandReceived()
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
	String RetCommand = commandReceived;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	3318      	adds	r3, #24
 8005f0e:	4619      	mov	r1, r3
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f00b fab0 	bl	8011476 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
	commandReceived = "";
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	3318      	adds	r3, #24
 8005f1a:	4904      	ldr	r1, [pc, #16]	; (8005f2c <_ZN13SerialMessage18getCommandReceivedB5cxx11Ev+0x2c>)
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f00b fa2a 	bl	8011376 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	return RetCommand;
 8005f22:	bf00      	nop
}
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	3708      	adds	r7, #8
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	080122d8 	.word	0x080122d8

08005f30 <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
	_Save_errno() : _M_errno(errno) { errno = 0; }
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	f00b fba2 	bl	8011680 <__errno>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	f00b fb9c 	bl	8011680 <__errno>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	6013      	str	r3, [r2, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4618      	mov	r0, r3
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	f00b fb8e 	bl	8011680 <__errno>
 8005f64:	4603      	mov	r3, r0
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	bf0c      	ite	eq
 8005f6c:	2301      	moveq	r3, #1
 8005f6e:	2300      	movne	r3, #0
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d005      	beq.n	8005f82 <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 8005f76:	f00b fb83 	bl	8011680 <__errno>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6013      	str	r3, [r2, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4618      	mov	r0, r3
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkEmSt17integral_constantIbLb0EE>:
	  _S_chk(_TRet, std::false_type) { return false; }
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	7039      	strb	r1, [r7, #0]
 8005f96:	2300      	movs	r3, #0
 8005f98:	4618      	mov	r0, r3
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bc80      	pop	{r7}
 8005fa0:	4770      	bx	lr

08005fa2 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 8005fa2:	b590      	push	{r4, r7, lr}
 8005fa4:	b08b      	sub	sp, #44	; 0x2c
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	60f8      	str	r0, [r7, #12]
 8005faa:	60b9      	str	r1, [r7, #8]
 8005fac:	607a      	str	r2, [r7, #4]
 8005fae:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 8005fb0:	f107 0314 	add.w	r3, r7, #20
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7ff ffbb 	bl	8005f30 <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 8005fba:	f107 0118 	add.w	r1, r7, #24
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	4798      	blx	r3
 8005fc6:	6278      	str	r0, [r7, #36]	; 0x24
      if (__endptr == __str)
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d102      	bne.n	8005fd6 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x34>
	std::__throw_invalid_argument(__name);
 8005fd0:	68b8      	ldr	r0, [r7, #8]
 8005fd2:	f00a ffc3 	bl	8010f5c <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 8005fd6:	f00b fb53 	bl	8011680 <__errno>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 8005fde:	2b22      	cmp	r3, #34	; 0x22
 8005fe0:	d006      	beq.n	8005ff0 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
 8005fe2:	4621      	mov	r1, r4
 8005fe4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005fe6:	f7ff ffd1 	bl	8005f8c <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkEmSt17integral_constantIbLb0EE>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d001      	beq.n	8005ff4 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e000      	b.n	8005ff6 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 8005ff4:	2300      	movs	r3, #0
      else if (errno == ERANGE
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d002      	beq.n	8006000 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
	std::__throw_out_of_range(__name);
 8005ffa:	68b8      	ldr	r0, [r7, #8]
 8005ffc:	f00a ffb4 	bl	8010f68 <_ZSt20__throw_out_of_rangePKc>
	__ret = __tmp;
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	623b      	str	r3, [r7, #32]
      if (__idx)
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d006      	beq.n	8006018 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x76>
	*__idx = __endptr - __str;
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	461a      	mov	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	461a      	mov	r2, r3
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	601a      	str	r2, [r3, #0]
      return __ret;
 8006018:	6a3c      	ldr	r4, [r7, #32]
      } const __save_errno;
 800601a:	f107 0314 	add.w	r3, r7, #20
 800601e:	4618      	mov	r0, r3
 8006020:	f7ff ff9a 	bl	8005f58 <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 8006024:	4623      	mov	r3, r4
    }
 8006026:	4618      	mov	r0, r3
 8006028:	372c      	adds	r7, #44	; 0x2c
 800602a:	46bd      	mov	sp, r7
 800602c:	bd90      	pop	{r4, r7, pc}

0800602e <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800602e:	b480      	push	{r7}
 8006030:	b083      	sub	sp, #12
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	6039      	str	r1, [r7, #0]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	4618      	mov	r0, r3
 800603c:	370c      	adds	r7, #12
 800603e:	46bd      	mov	sp, r7
 8006040:	bc80      	pop	{r7}
 8006042:	4770      	bx	lr

08006044 <_ZNSt7__cxx119to_stringEm>:
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),
					   "%ld", __val); }

  inline string
  to_string(unsigned long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af02      	add	r7, sp, #8
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
					   4 * sizeof(unsigned long),
					   "%lu", __val); }
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	4b04      	ldr	r3, [pc, #16]	; (8006068 <_ZNSt7__cxx119to_stringEm+0x24>)
 8006056:	2210      	movs	r2, #16
 8006058:	4904      	ldr	r1, [pc, #16]	; (800606c <_ZNSt7__cxx119to_stringEm+0x28>)
 800605a:	f7fd ff2f 	bl	8003ebc <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	08012320 	.word	0x08012320
 800606c:	08011b5d 	.word	0x08011b5d

08006070 <_ZN13THERMO_SENSORC1Ev>:
#include <string>

typedef std::string String;


class THERMO_SENSOR
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2020 	strb.w	r2, [r3, #32]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4618      	mov	r0, r3
 8006084:	370c      	adds	r7, #12
 8006086:	46bd      	mov	sp, r7
 8006088:	bc80      	pop	{r7}
 800608a:	4770      	bx	lr

0800608c <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>:
		bool withChebox;
		bool *itemsChecked;
		void *paramAssociated;
		uint8_t paramType;
		bool menuSelected;
	}MENU_STRUCTURE;
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4618      	mov	r0, r3
 8006098:	f00b f868 	bl	801116c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4618      	mov	r0, r3
 80060a0:	3708      	adds	r7, #8
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
	...

080060a8 <_ZN10SmartDryer12DRYER_PARAMSC1Ev>:
	}DRYER_PARAMS;
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	701a      	strb	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	705a      	strb	r2, [r3, #1]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	709a      	strb	r2, [r3, #2]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a08      	ldr	r2, [pc, #32]	; (80060e8 <_ZN10SmartDryer12DRYER_PARAMSC1Ev+0x40>)
 80060c6:	605a      	str	r2, [r3, #4]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	721a      	strb	r2, [r3, #8]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	725a      	strb	r2, [r3, #9]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	729a      	strb	r2, [r3, #10]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4618      	mov	r0, r3
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bc80      	pop	{r7}
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	41f00000 	.word	0x41f00000

080060ec <_ZN10SmartDryerC1Ev>:
		"Programma 3",
};



SmartDryer::SmartDryer()
 80060ec:	b590      	push	{r4, r7, lr}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	3348      	adds	r3, #72	; 0x48
 8006100:	2248      	movs	r2, #72	; 0x48
 8006102:	2100      	movs	r1, #0
 8006104:	4618      	mov	r0, r3
 8006106:	f00b fb36 	bl	8011776 <memset>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2202      	movs	r2, #2
 800610e:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	33a0      	adds	r3, #160	; 0xa0
 8006116:	4618      	mov	r0, r3
 8006118:	f004 fd9c 	bl	800ac54 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
{
	display = new NHDST7565_LCD(NHDST7565_LCD::LANDSCAPE_2);
 800613c:	20c8      	movs	r0, #200	; 0xc8
 800613e:	f00a fee9 	bl	8010f14 <_Znwj>
 8006142:	4603      	mov	r3, r0
 8006144:	461c      	mov	r4, r3
 8006146:	2101      	movs	r1, #1
 8006148:	4620      	mov	r0, r4
 800614a:	f7fe f923 	bl	8004394 <_ZN13NHDST7565_LCDC1Eh>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	601c      	str	r4, [r3, #0]
	keyboard = new DryerKey();
 8006152:	2010      	movs	r0, #16
 8006154:	f00a fede 	bl	8010f14 <_Znwj>
 8006158:	4603      	mov	r3, r0
 800615a:	461c      	mov	r4, r3
 800615c:	4620      	mov	r0, r4
 800615e:	f7ff f95b 	bl	8005418 <_ZN8DryerKeyC1Ev>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	609c      	str	r4, [r3, #8]
	tempSens = new THERMO_SENSOR();
 8006166:	2021      	movs	r0, #33	; 0x21
 8006168:	f00a fed4 	bl	8010f14 <_Znwj>
 800616c:	4603      	mov	r3, r0
 800616e:	461c      	mov	r4, r3
 8006170:	4620      	mov	r0, r4
 8006172:	2321      	movs	r3, #33	; 0x21
 8006174:	461a      	mov	r2, r3
 8006176:	2100      	movs	r1, #0
 8006178:	f00b fafd 	bl	8011776 <memset>
 800617c:	4620      	mov	r0, r4
 800617e:	f7ff ff77 	bl	8006070 <_ZN13THERMO_SENSORC1Ev>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	60dc      	str	r4, [r3, #12]
	fanCtrl = new RELE(FanCtrl_GPIO_Port, FanCtrl_Pin, LOW);
 8006186:	2008      	movs	r0, #8
 8006188:	f00a fec4 	bl	8010f14 <_Znwj>
 800618c:	4603      	mov	r3, r0
 800618e:	461c      	mov	r4, r3
 8006190:	2300      	movs	r3, #0
 8006192:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006196:	498c      	ldr	r1, [pc, #560]	; (80063c8 <_ZN10SmartDryerC1Ev+0x2dc>)
 8006198:	4620      	mov	r0, r4
 800619a:	f7ff f9d6 	bl	800554a <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	611c      	str	r4, [r3, #16]
	thermoCtrl = new RELE(ThermoCtrl_GPIO_Port, ThermoCtrl_Pin, LOW);
 80061a2:	2008      	movs	r0, #8
 80061a4:	f00a feb6 	bl	8010f14 <_Znwj>
 80061a8:	4603      	mov	r3, r0
 80061aa:	461c      	mov	r4, r3
 80061ac:	2300      	movs	r3, #0
 80061ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061b2:	4985      	ldr	r1, [pc, #532]	; (80063c8 <_ZN10SmartDryerC1Ev+0x2dc>)
 80061b4:	4620      	mov	r0, r4
 80061b6:	f7ff f9c8 	bl	800554a <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	615c      	str	r4, [r3, #20]

	memory = new STM32_EEPROM();
 80061be:	2008      	movs	r0, #8
 80061c0:	f00a fea8 	bl	8010f14 <_Znwj>
 80061c4:	4603      	mov	r3, r0
 80061c6:	461c      	mov	r4, r3
 80061c8:	4620      	mov	r0, r4
 80061ca:	f7ff f842 	bl	8005252 <_ZN12STM32_EEPROMC1Ev>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	619c      	str	r4, [r3, #24]

	getTempTimer = new ChronoTimer(ChronoTimer::MILLIS);
 80061d2:	2014      	movs	r0, #20
 80061d4:	f00a fe9e 	bl	8010f14 <_Znwj>
 80061d8:	4603      	mov	r3, r0
 80061da:	461c      	mov	r4, r3
 80061dc:	2100      	movs	r1, #0
 80061de:	4620      	mov	r0, r4
 80061e0:	f7fd f83d 	bl	800325e <_ZN11ChronoTimerC1Eh>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	61dc      	str	r4, [r3, #28]

	blinkRedLedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 80061e8:	2014      	movs	r0, #20
 80061ea:	f00a fe93 	bl	8010f14 <_Znwj>
 80061ee:	4603      	mov	r3, r0
 80061f0:	461c      	mov	r4, r3
 80061f2:	2100      	movs	r1, #0
 80061f4:	4620      	mov	r0, r4
 80061f6:	f7fd f832 	bl	800325e <_ZN11ChronoTimerC1Eh>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	621c      	str	r4, [r3, #32]
	blinkGreenLedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 80061fe:	2014      	movs	r0, #20
 8006200:	f00a fe88 	bl	8010f14 <_Znwj>
 8006204:	4603      	mov	r3, r0
 8006206:	461c      	mov	r4, r3
 8006208:	2100      	movs	r1, #0
 800620a:	4620      	mov	r0, r4
 800620c:	f7fd f827 	bl	800325e <_ZN11ChronoTimerC1Eh>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	625c      	str	r4, [r3, #36]	; 0x24
	takeTimeTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8006214:	2014      	movs	r0, #20
 8006216:	f00a fe7d 	bl	8010f14 <_Znwj>
 800621a:	4603      	mov	r3, r0
 800621c:	461c      	mov	r4, r3
 800621e:	2100      	movs	r1, #0
 8006220:	4620      	mov	r0, r4
 8006222:	f7fd f81c 	bl	800325e <_ZN11ChronoTimerC1Eh>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	629c      	str	r4, [r3, #40]	; 0x28
	showHelpMessageTimer = new ChronoTimer(ChronoTimer::SECONDS);
 800622a:	2014      	movs	r0, #20
 800622c:	f00a fe72 	bl	8010f14 <_Znwj>
 8006230:	4603      	mov	r3, r0
 8006232:	461c      	mov	r4, r3
 8006234:	2101      	movs	r1, #1
 8006236:	4620      	mov	r0, r4
 8006238:	f7fd f811 	bl	800325e <_ZN11ChronoTimerC1Eh>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	62dc      	str	r4, [r3, #44]	; 0x2c
	programStartedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8006240:	2014      	movs	r0, #20
 8006242:	f00a fe67 	bl	8010f14 <_Znwj>
 8006246:	4603      	mov	r3, r0
 8006248:	461c      	mov	r4, r3
 800624a:	2100      	movs	r1, #0
 800624c:	4620      	mov	r0, r4
 800624e:	f7fd f806 	bl	800325e <_ZN11ChronoTimerC1Eh>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	631c      	str	r4, [r3, #48]	; 0x30
	blinkSerialIconTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8006256:	2014      	movs	r0, #20
 8006258:	f00a fe5c 	bl	8010f14 <_Znwj>
 800625c:	4603      	mov	r3, r0
 800625e:	461c      	mov	r4, r3
 8006260:	2100      	movs	r1, #0
 8006262:	4620      	mov	r0, r4
 8006264:	f7fc fffb 	bl	800325e <_ZN11ChronoTimerC1Eh>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	635c      	str	r4, [r3, #52]	; 0x34


	testTimer = new ChronoTimer(ChronoTimer::MILLIS);
 800626c:	2014      	movs	r0, #20
 800626e:	f00a fe51 	bl	8010f14 <_Znwj>
 8006272:	4603      	mov	r3, r0
 8006274:	461c      	mov	r4, r3
 8006276:	2100      	movs	r1, #0
 8006278:	4620      	mov	r0, r4
 800627a:	f7fc fff0 	bl	800325e <_ZN11ChronoTimerC1Eh>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	639c      	str	r4, [r3, #56]	; 0x38

	externalCommand = new SerialMessage();
 8006282:	2040      	movs	r0, #64	; 0x40
 8006284:	f00a fe46 	bl	8010f14 <_Znwj>
 8006288:	4603      	mov	r3, r0
 800628a:	461c      	mov	r4, r3
 800628c:	4620      	mov	r0, r4
 800628e:	f7ff fa07 	bl	80056a0 <_ZN13SerialMessageC1Ev>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	63dc      	str	r4, [r3, #60]	; 0x3c

	clock = new DS1307_RTC();
 8006296:	2021      	movs	r0, #33	; 0x21
 8006298:	f00a fe3c 	bl	8010f14 <_Znwj>
 800629c:	4603      	mov	r3, r0
 800629e:	461c      	mov	r4, r3
 80062a0:	4620      	mov	r0, r4
 80062a2:	f7fd f91b 	bl	80034dc <_ZN10DS1307_RTCC1Ev>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	605c      	str	r4, [r3, #4]

	mainMenu = new MENU_STRUCTURE();
 80062aa:	2038      	movs	r0, #56	; 0x38
 80062ac:	f00a fe32 	bl	8010f14 <_Znwj>
 80062b0:	4603      	mov	r3, r0
 80062b2:	461c      	mov	r4, r3
 80062b4:	4620      	mov	r0, r4
 80062b6:	2338      	movs	r3, #56	; 0x38
 80062b8:	461a      	mov	r2, r3
 80062ba:	2100      	movs	r1, #0
 80062bc:	f00b fa5b 	bl	8011776 <memset>
 80062c0:	4620      	mov	r0, r4
 80062c2:	f7ff fee3 	bl	800608c <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
	thermoMenuCtrl = new MENU_STRUCTURE();
 80062cc:	2038      	movs	r0, #56	; 0x38
 80062ce:	f00a fe21 	bl	8010f14 <_Znwj>
 80062d2:	4603      	mov	r3, r0
 80062d4:	461c      	mov	r4, r3
 80062d6:	4620      	mov	r0, r4
 80062d8:	2338      	movs	r3, #56	; 0x38
 80062da:	461a      	mov	r2, r3
 80062dc:	2100      	movs	r1, #0
 80062de:	f00b fa4a 	bl	8011776 <memset>
 80062e2:	4620      	mov	r0, r4
 80062e4:	f7ff fed2 	bl	800608c <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8c3 40b0 	str.w	r4, [r3, #176]	; 0xb0
	fanMenuCtrl = new MENU_STRUCTURE();
 80062ee:	2038      	movs	r0, #56	; 0x38
 80062f0:	f00a fe10 	bl	8010f14 <_Znwj>
 80062f4:	4603      	mov	r3, r0
 80062f6:	461c      	mov	r4, r3
 80062f8:	4620      	mov	r0, r4
 80062fa:	2338      	movs	r3, #56	; 0x38
 80062fc:	461a      	mov	r2, r3
 80062fe:	2100      	movs	r1, #0
 8006300:	f00b fa39 	bl	8011776 <memset>
 8006304:	4620      	mov	r0, r4
 8006306:	f7ff fec1 	bl	800608c <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
	tempMenuCtrl = new MENU_STRUCTURE();
 8006310:	2038      	movs	r0, #56	; 0x38
 8006312:	f00a fdff 	bl	8010f14 <_Znwj>
 8006316:	4603      	mov	r3, r0
 8006318:	461c      	mov	r4, r3
 800631a:	4620      	mov	r0, r4
 800631c:	2338      	movs	r3, #56	; 0x38
 800631e:	461a      	mov	r2, r3
 8006320:	2100      	movs	r1, #0
 8006322:	f00b fa28 	bl	8011776 <memset>
 8006326:	4620      	mov	r0, r4
 8006328:	f7ff feb0 	bl	800608c <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8c3 40b8 	str.w	r4, [r3, #184]	; 0xb8
	startDryerMenu = new MENU_STRUCTURE();
 8006332:	2038      	movs	r0, #56	; 0x38
 8006334:	f00a fdee 	bl	8010f14 <_Znwj>
 8006338:	4603      	mov	r3, r0
 800633a:	461c      	mov	r4, r3
 800633c:	4620      	mov	r0, r4
 800633e:	2338      	movs	r3, #56	; 0x38
 8006340:	461a      	mov	r2, r3
 8006342:	2100      	movs	r1, #0
 8006344:	f00b fa17 	bl	8011776 <memset>
 8006348:	4620      	mov	r0, r4
 800634a:	f7ff fe9f 	bl	800608c <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
	changeProgramsMenu = new MENU_STRUCTURE();
 8006354:	2038      	movs	r0, #56	; 0x38
 8006356:	f00a fddd 	bl	8010f14 <_Znwj>
 800635a:	4603      	mov	r3, r0
 800635c:	461c      	mov	r4, r3
 800635e:	4620      	mov	r0, r4
 8006360:	2338      	movs	r3, #56	; 0x38
 8006362:	461a      	mov	r2, r3
 8006364:	2100      	movs	r1, #0
 8006366:	f00b fa06 	bl	8011776 <memset>
 800636a:	4620      	mov	r0, r4
 800636c:	f7ff fe8e 	bl	800608c <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8c3 40c0 	str.w	r4, [r3, #192]	; 0xc0
	startProgramsMenu = new MENU_STRUCTURE();
 8006376:	2038      	movs	r0, #56	; 0x38
 8006378:	f00a fdcc 	bl	8010f14 <_Znwj>
 800637c:	4603      	mov	r3, r0
 800637e:	461c      	mov	r4, r3
 8006380:	4620      	mov	r0, r4
 8006382:	2338      	movs	r3, #56	; 0x38
 8006384:	461a      	mov	r2, r3
 8006386:	2100      	movs	r1, #0
 8006388:	f00b f9f5 	bl	8011776 <memset>
 800638c:	4620      	mov	r0, r4
 800638e:	f7ff fe7d 	bl	800608c <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4

	statusParam = new DRYER_PARAMS();
 8006398:	200c      	movs	r0, #12
 800639a:	f00a fdbb 	bl	8010f14 <_Znwj>
 800639e:	4603      	mov	r3, r0
 80063a0:	461c      	mov	r4, r3
 80063a2:	4622      	mov	r2, r4
 80063a4:	2300      	movs	r3, #0
 80063a6:	6013      	str	r3, [r2, #0]
 80063a8:	6053      	str	r3, [r2, #4]
 80063aa:	6093      	str	r3, [r2, #8]
 80063ac:	4620      	mov	r0, r4
 80063ae:	f7ff fe7b 	bl	80060a8 <_ZN10SmartDryer12DRYER_PARAMSC1Ev>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	645c      	str	r4, [r3, #68]	; 0x44

	chamberTemperature.readedValueInt = 0;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4618      	mov	r0, r3
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd90      	pop	{r4, r7, pc}
 80063c8:	40010800 	.word	0x40010800

080063cc <_ZN10SmartDryer11floatStringB5cxx11Efh>:

String SmartDryer::floatString(float Number, uint8_t NDecimal)
{
 80063cc:	b590      	push	{r4, r7, lr}
 80063ce:	b08d      	sub	sp, #52	; 0x34
 80063d0:	af02      	add	r7, sp, #8
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	70fb      	strb	r3, [r7, #3]
	char CharArray[6];
	char Format[6];
	snprintf(Format, 6, "%%.%df", NDecimal);
 80063da:	78fb      	ldrb	r3, [r7, #3]
 80063dc:	f107 0014 	add.w	r0, r7, #20
 80063e0:	4a13      	ldr	r2, [pc, #76]	; (8006430 <_ZN10SmartDryer11floatStringB5cxx11Efh+0x64>)
 80063e2:	2106      	movs	r1, #6
 80063e4:	f00b faca 	bl	801197c <sniprintf>
	snprintf(CharArray, 6, Format, Number);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f7fa f81d 	bl	8000428 <__aeabi_f2d>
 80063ee:	4603      	mov	r3, r0
 80063f0:	460c      	mov	r4, r1
 80063f2:	f107 0214 	add.w	r2, r7, #20
 80063f6:	f107 001c 	add.w	r0, r7, #28
 80063fa:	e9cd 3400 	strd	r3, r4, [sp]
 80063fe:	2106      	movs	r1, #6
 8006400:	f00b fabc 	bl	801197c <sniprintf>
	return String(CharArray);
 8006404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006408:	4618      	mov	r0, r3
 800640a:	f00a fd9f 	bl	8010f4c <_ZNSaIcEC1Ev>
 800640e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006412:	f107 031c 	add.w	r3, r7, #28
 8006416:	4619      	mov	r1, r3
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f00b f85f 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800641e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006422:	4618      	mov	r0, r3
 8006424:	f00a fd93 	bl	8010f4e <_ZNSaIcED1Ev>
}
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	372c      	adds	r7, #44	; 0x2c
 800642c:	46bd      	mov	sp, r7
 800642e:	bd90      	pop	{r4, r7, pc}
 8006430:	080123fc 	.word	0x080123fc

08006434 <_ZN10SmartDryer8blinkLedEht>:

void SmartDryer::blinkLed(uint8_t WichLed, uint16_t BlinkDelay)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	460b      	mov	r3, r1
 800643e:	70fb      	strb	r3, [r7, #3]
 8006440:	4613      	mov	r3, r2
 8006442:	803b      	strh	r3, [r7, #0]
	//	GPIO_TypeDef *LedPort;
	//	uint16_t LedPin = 0;
	if(BlinkDelay <= 1)
 8006444:	883b      	ldrh	r3, [r7, #0]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d801      	bhi.n	800644e <_ZN10SmartDryer8blinkLedEht+0x1a>
	{
		BlinkDelay = 2;
 800644a:	2302      	movs	r3, #2
 800644c:	803b      	strh	r3, [r7, #0]
	}
	switch(WichLed)
 800644e:	78fb      	ldrb	r3, [r7, #3]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d002      	beq.n	800645a <_ZN10SmartDryer8blinkLedEht+0x26>
 8006454:	2b01      	cmp	r3, #1
 8006456:	d010      	beq.n	800647a <_ZN10SmartDryer8blinkLedEht+0x46>
			}
			//		LedPort = GreenLed_GPIO_Port;
			//		LedPin = GreenLed_Pin;
			break;
		default:
			break;
 8006458:	e022      	b.n	80064a0 <_ZN10SmartDryer8blinkLedEht+0x6c>
			if(blinkRedLedTimer->isFinished(true, BlinkDelay))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	883a      	ldrh	r2, [r7, #0]
 8006460:	2101      	movs	r1, #1
 8006462:	4618      	mov	r0, r3
 8006464:	f7fc ffa5 	bl	80033b2 <_ZN11ChronoTimer10isFinishedEbm>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d015      	beq.n	800649a <_ZN10SmartDryer8blinkLedEht+0x66>
				toggleLed(WichLed);
 800646e:	78fb      	ldrb	r3, [r7, #3]
 8006470:	4619      	mov	r1, r3
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f818 	bl	80064a8 <_ZN10SmartDryer9toggleLedEh>
			break;
 8006478:	e00f      	b.n	800649a <_ZN10SmartDryer8blinkLedEht+0x66>
			if(blinkGreenLedTimer->isFinished(true, BlinkDelay))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647e:	883a      	ldrh	r2, [r7, #0]
 8006480:	2101      	movs	r1, #1
 8006482:	4618      	mov	r0, r3
 8006484:	f7fc ff95 	bl	80033b2 <_ZN11ChronoTimer10isFinishedEbm>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d007      	beq.n	800649e <_ZN10SmartDryer8blinkLedEht+0x6a>
				toggleLed(WichLed);
 800648e:	78fb      	ldrb	r3, [r7, #3]
 8006490:	4619      	mov	r1, r3
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f808 	bl	80064a8 <_ZN10SmartDryer9toggleLedEh>
			break;
 8006498:	e001      	b.n	800649e <_ZN10SmartDryer8blinkLedEht+0x6a>
			break;
 800649a:	bf00      	nop
 800649c:	e000      	b.n	80064a0 <_ZN10SmartDryer8blinkLedEht+0x6c>
			break;
 800649e:	bf00      	nop
	}

}
 80064a0:	bf00      	nop
 80064a2:	3708      	adds	r7, #8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <_ZN10SmartDryer9toggleLedEh>:

void SmartDryer::toggleLed(uint8_t WichLed)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	460b      	mov	r3, r1
 80064b2:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 80064b4:	2300      	movs	r3, #0
 80064b6:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 80064b8:	78fb      	ldrb	r3, [r7, #3]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d002      	beq.n	80064c4 <_ZN10SmartDryer9toggleLedEh+0x1c>
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d006      	beq.n	80064d0 <_ZN10SmartDryer9toggleLedEh+0x28>
		case GREEN_LED:
			LedPort = GreenLed_GPIO_Port;
			LedPin = GreenLed_Pin;
			break;
		default:
			break;
 80064c2:	e00b      	b.n	80064dc <_ZN10SmartDryer9toggleLedEh+0x34>
			LedPort = RedLed_GPIO_Port;
 80064c4:	4b0a      	ldr	r3, [pc, #40]	; (80064f0 <_ZN10SmartDryer9toggleLedEh+0x48>)
 80064c6:	60fb      	str	r3, [r7, #12]
			LedPin = RedLed_Pin;
 80064c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064cc:	817b      	strh	r3, [r7, #10]
			break;
 80064ce:	e005      	b.n	80064dc <_ZN10SmartDryer9toggleLedEh+0x34>
			LedPort = GreenLed_GPIO_Port;
 80064d0:	4b07      	ldr	r3, [pc, #28]	; (80064f0 <_ZN10SmartDryer9toggleLedEh+0x48>)
 80064d2:	60fb      	str	r3, [r7, #12]
			LedPin = GreenLed_Pin;
 80064d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064d8:	817b      	strh	r3, [r7, #10]
			break;
 80064da:	bf00      	nop
	}
	HAL_GPIO_TogglePin(LedPort, LedPin);
 80064dc:	897b      	ldrh	r3, [r7, #10]
 80064de:	4619      	mov	r1, r3
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f007 f911 	bl	800d708 <HAL_GPIO_TogglePin>
}
 80064e6:	bf00      	nop
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	40010800 	.word	0x40010800

080064f4 <_ZN10SmartDryer9turnOnLedEh>:

void SmartDryer::turnOnLed(uint8_t WichLed)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	460b      	mov	r3, r1
 80064fe:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 8006500:	2300      	movs	r3, #0
 8006502:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 8006504:	78fb      	ldrb	r3, [r7, #3]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d002      	beq.n	8006510 <_ZN10SmartDryer9turnOnLedEh+0x1c>
 800650a:	2b01      	cmp	r3, #1
 800650c:	d006      	beq.n	800651c <_ZN10SmartDryer9turnOnLedEh+0x28>
		case GREEN_LED:
			LedPort = GreenLed_GPIO_Port;
			LedPin = GreenLed_Pin;
			break;
		default:
			break;
 800650e:	e00b      	b.n	8006528 <_ZN10SmartDryer9turnOnLedEh+0x34>
			LedPort = RedLed_GPIO_Port;
 8006510:	4b0a      	ldr	r3, [pc, #40]	; (800653c <_ZN10SmartDryer9turnOnLedEh+0x48>)
 8006512:	60fb      	str	r3, [r7, #12]
			LedPin = RedLed_Pin;
 8006514:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006518:	817b      	strh	r3, [r7, #10]
			break;
 800651a:	e005      	b.n	8006528 <_ZN10SmartDryer9turnOnLedEh+0x34>
			LedPort = GreenLed_GPIO_Port;
 800651c:	4b07      	ldr	r3, [pc, #28]	; (800653c <_ZN10SmartDryer9turnOnLedEh+0x48>)
 800651e:	60fb      	str	r3, [r7, #12]
			LedPin = GreenLed_Pin;
 8006520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006524:	817b      	strh	r3, [r7, #10]
			break;
 8006526:	bf00      	nop
	}
	HAL_GPIO_WritePin(LedPort, LedPin, GPIO_PIN_SET);
 8006528:	897b      	ldrh	r3, [r7, #10]
 800652a:	2201      	movs	r2, #1
 800652c:	4619      	mov	r1, r3
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f007 f8b8 	bl	800d6a4 <HAL_GPIO_WritePin>
}
 8006534:	bf00      	nop
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	40010800 	.word	0x40010800

08006540 <_ZN10SmartDryer10turnOffLedEh>:

void SmartDryer::turnOffLed(uint8_t WichLed)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	460b      	mov	r3, r1
 800654a:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 800654c:	2300      	movs	r3, #0
 800654e:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 8006550:	78fb      	ldrb	r3, [r7, #3]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d002      	beq.n	800655c <_ZN10SmartDryer10turnOffLedEh+0x1c>
 8006556:	2b01      	cmp	r3, #1
 8006558:	d006      	beq.n	8006568 <_ZN10SmartDryer10turnOffLedEh+0x28>
		case GREEN_LED:
			LedPort = GreenLed_GPIO_Port;
			LedPin = GreenLed_Pin;
			break;
		default:
			break;
 800655a:	e00b      	b.n	8006574 <_ZN10SmartDryer10turnOffLedEh+0x34>
			LedPort = RedLed_GPIO_Port;
 800655c:	4b0a      	ldr	r3, [pc, #40]	; (8006588 <_ZN10SmartDryer10turnOffLedEh+0x48>)
 800655e:	60fb      	str	r3, [r7, #12]
			LedPin = RedLed_Pin;
 8006560:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006564:	817b      	strh	r3, [r7, #10]
			break;
 8006566:	e005      	b.n	8006574 <_ZN10SmartDryer10turnOffLedEh+0x34>
			LedPort = GreenLed_GPIO_Port;
 8006568:	4b07      	ldr	r3, [pc, #28]	; (8006588 <_ZN10SmartDryer10turnOffLedEh+0x48>)
 800656a:	60fb      	str	r3, [r7, #12]
			LedPin = GreenLed_Pin;
 800656c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006570:	817b      	strh	r3, [r7, #10]
			break;
 8006572:	bf00      	nop
	}
	HAL_GPIO_WritePin(LedPort, LedPin, GPIO_PIN_RESET);
 8006574:	897b      	ldrh	r3, [r7, #10]
 8006576:	2200      	movs	r2, #0
 8006578:	4619      	mov	r1, r3
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f007 f892 	bl	800d6a4 <HAL_GPIO_WritePin>
}
 8006580:	bf00      	nop
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	40010800 	.word	0x40010800

0800658c <_ZN10SmartDryer10ledControlEv>:

void SmartDryer::ledControl()
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]

	switch(ledStatus)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800659a:	2b03      	cmp	r3, #3
 800659c:	d031      	beq.n	8006602 <_ZN10SmartDryer10ledControlEv+0x76>
 800659e:	2b03      	cmp	r3, #3
 80065a0:	dc06      	bgt.n	80065b0 <_ZN10SmartDryer10ledControlEv+0x24>
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d019      	beq.n	80065da <_ZN10SmartDryer10ledControlEv+0x4e>
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	dc22      	bgt.n	80065f0 <_ZN10SmartDryer10ledControlEv+0x64>
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00b      	beq.n	80065c6 <_ZN10SmartDryer10ledControlEv+0x3a>
 80065ae:	e07b      	b.n	80066a8 <_ZN10SmartDryer10ledControlEv+0x11c>
 80065b0:	f240 12f5 	movw	r2, #501	; 0x1f5
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d03d      	beq.n	8006634 <_ZN10SmartDryer10ledControlEv+0xa8>
 80065b8:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 80065bc:	d057      	beq.n	800666e <_ZN10SmartDryer10ledControlEv+0xe2>
 80065be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80065c2:	d02a      	beq.n	800661a <_ZN10SmartDryer10ledControlEv+0x8e>
 80065c4:	e070      	b.n	80066a8 <_ZN10SmartDryer10ledControlEv+0x11c>
	{
		case THERMO_ON_FAN_OFF:
			blinkLed(RED_LED, 10);
 80065c6:	220a      	movs	r2, #10
 80065c8:	2100      	movs	r1, #0
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7ff ff32 	bl	8006434 <_ZN10SmartDryer8blinkLedEht>
			turnOffLed(GREEN_LED);
 80065d0:	2101      	movs	r1, #1
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7ff ffb4 	bl	8006540 <_ZN10SmartDryer10turnOffLedEh>
			break;
 80065d8:	e073      	b.n	80066c2 <_ZN10SmartDryer10ledControlEv+0x136>
		case THERMO_OFF_FAN_ON:
			turnOffLed(RED_LED);
 80065da:	2100      	movs	r1, #0
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f7ff ffaf 	bl	8006540 <_ZN10SmartDryer10turnOffLedEh>
			blinkLed(GREEN_LED, 500);
 80065e2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80065e6:	2101      	movs	r1, #1
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f7ff ff23 	bl	8006434 <_ZN10SmartDryer8blinkLedEht>
			break;
 80065ee:	e068      	b.n	80066c2 <_ZN10SmartDryer10ledControlEv+0x136>
		case THERMO_OFF_FAN_OFF:
			turnOffLed(GREEN_LED);
 80065f0:	2101      	movs	r1, #1
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f7ff ffa4 	bl	8006540 <_ZN10SmartDryer10turnOffLedEh>
			turnOffLed(RED_LED);
 80065f8:	2100      	movs	r1, #0
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7ff ffa0 	bl	8006540 <_ZN10SmartDryer10turnOffLedEh>
			break;
 8006600:	e05f      	b.n	80066c2 <_ZN10SmartDryer10ledControlEv+0x136>
		case THERMO_ON_FAN_ON:
			blinkLed(RED_LED, 10);
 8006602:	220a      	movs	r2, #10
 8006604:	2100      	movs	r1, #0
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7ff ff14 	bl	8006434 <_ZN10SmartDryer8blinkLedEht>
			blinkLed(GREEN_LED, 500);
 800660c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006610:	2101      	movs	r1, #1
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7ff ff0e 	bl	8006434 <_ZN10SmartDryer8blinkLedEht>
			break;
 8006618:	e053      	b.n	80066c2 <_ZN10SmartDryer10ledControlEv+0x136>
		case TEMP_REACHED:
			turnOnLed(RED_LED);
 800661a:	2100      	movs	r1, #0
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7ff ff69 	bl	80064f4 <_ZN10SmartDryer9turnOnLedEh>
			HAL_Delay(250);
 8006622:	20fa      	movs	r0, #250	; 0xfa
 8006624:	f005 fdb2 	bl	800c18c <HAL_Delay>
			ledStatus = UNKNOWN_STATE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f240 12f7 	movw	r2, #503	; 0x1f7
 800662e:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
			break;
 8006632:	e046      	b.n	80066c2 <_ZN10SmartDryer10ledControlEv+0x136>
		case PROGRAM_INIT:
			for(int i = 0; i < 50*10; i++)
 8006634:	2300      	movs	r3, #0
 8006636:	60fb      	str	r3, [r7, #12]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800663e:	da10      	bge.n	8006662 <_ZN10SmartDryer10ledControlEv+0xd6>
			{
				blinkLed(RED_LED, 50);
 8006640:	2232      	movs	r2, #50	; 0x32
 8006642:	2100      	movs	r1, #0
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f7ff fef5 	bl	8006434 <_ZN10SmartDryer8blinkLedEht>
				blinkLed(GREEN_LED, 50);
 800664a:	2232      	movs	r2, #50	; 0x32
 800664c:	2101      	movs	r1, #1
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7ff fef0 	bl	8006434 <_ZN10SmartDryer8blinkLedEht>
				HAL_Delay(1);
 8006654:	2001      	movs	r0, #1
 8006656:	f005 fd99 	bl	800c18c <HAL_Delay>
			for(int i = 0; i < 50*10; i++)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	3301      	adds	r3, #1
 800665e:	60fb      	str	r3, [r7, #12]
 8006660:	e7ea      	b.n	8006638 <_ZN10SmartDryer10ledControlEv+0xac>
			};
			ledStatus = UNKNOWN_STATE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f240 12f7 	movw	r2, #503	; 0x1f7
 8006668:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
			break;
 800666c:	e029      	b.n	80066c2 <_ZN10SmartDryer10ledControlEv+0x136>
		case PROGRAM_END:
			for(int i = 0; i < 50*20; i++)
 800666e:	2300      	movs	r3, #0
 8006670:	60bb      	str	r3, [r7, #8]
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006678:	da10      	bge.n	800669c <_ZN10SmartDryer10ledControlEv+0x110>
			{
				blinkLed(RED_LED, 50);
 800667a:	2232      	movs	r2, #50	; 0x32
 800667c:	2100      	movs	r1, #0
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7ff fed8 	bl	8006434 <_ZN10SmartDryer8blinkLedEht>
				blinkLed(GREEN_LED, 50);
 8006684:	2232      	movs	r2, #50	; 0x32
 8006686:	2101      	movs	r1, #1
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f7ff fed3 	bl	8006434 <_ZN10SmartDryer8blinkLedEht>
				HAL_Delay(1);
 800668e:	2001      	movs	r0, #1
 8006690:	f005 fd7c 	bl	800c18c <HAL_Delay>
			for(int i = 0; i < 50*20; i++)
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	3301      	adds	r3, #1
 8006698:	60bb      	str	r3, [r7, #8]
 800669a:	e7ea      	b.n	8006672 <_ZN10SmartDryer10ledControlEv+0xe6>
			};
			ledStatus = UNKNOWN_STATE;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f240 12f7 	movw	r2, #503	; 0x1f7
 80066a2:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
			break;
 80066a6:	e00c      	b.n	80066c2 <_ZN10SmartDryer10ledControlEv+0x136>
		case UNKNOWN_STATE:
		default:
			blinkLed(RED_LED, 1000);
 80066a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80066ac:	2100      	movs	r1, #0
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f7ff fec0 	bl	8006434 <_ZN10SmartDryer8blinkLedEht>
			blinkLed(GREEN_LED, 1000);
 80066b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80066b8:	2101      	movs	r1, #1
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7ff feba 	bl	8006434 <_ZN10SmartDryer8blinkLedEht>
			break;
 80066c0:	bf00      	nop
	}
}
 80066c2:	bf00      	nop
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
	...

080066cc <_ZN10SmartDryer16thermoRegulationEf>:

void SmartDryer::thermoRegulation(float WichTemp)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b086      	sub	sp, #24
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
	uint32_t ReadedTemp = 0;
 80066d6:	2300      	movs	r3, #0
 80066d8:	617b      	str	r3, [r7, #20]
	uint32_t TempTarget = (uint32_t)roundf(WichTemp * 10);
 80066da:	497e      	ldr	r1, [pc, #504]	; (80068d4 <_ZN10SmartDryer16thermoRegulationEf+0x208>)
 80066dc:	6838      	ldr	r0, [r7, #0]
 80066de:	f7fa fa6b 	bl	8000bb8 <__aeabi_fmul>
 80066e2:	4603      	mov	r3, r0
 80066e4:	4618      	mov	r0, r3
 80066e6:	f00a ff9f 	bl	8011628 <roundf>
 80066ea:	4603      	mov	r3, r0
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7fa fbb3 	bl	8000e58 <__aeabi_f2uiz>
 80066f2:	4603      	mov	r3, r0
 80066f4:	60fb      	str	r3, [r7, #12]
	bool Reading = false;
 80066f6:	2300      	movs	r3, #0
 80066f8:	74fb      	strb	r3, [r7, #19]
	if(statusParam->dryerOn)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 80a7 	beq.w	8006854 <_ZN10SmartDryer16thermoRegulationEf+0x188>
	{
		if(getTempTimer->isFinished(true, 750))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	f240 22ee 	movw	r2, #750	; 0x2ee
 800670e:	2101      	movs	r1, #1
 8006710:	4618      	mov	r0, r3
 8006712:	f7fc fe4e 	bl	80033b2 <_ZN11ChronoTimer10isFinishedEbm>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d024      	beq.n	8006766 <_ZN10SmartDryer16thermoRegulationEf+0x9a>
		{
			chamberTemperature.readedValueFL = tempSens->getTemperature();
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	4618      	mov	r0, r3
 8006722:	f005 fb84 	bl	800be2e <_ZN13THERMO_SENSOR14getTemperatureEv>
 8006726:	4602      	mov	r2, r0
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			chamberHumity.readedValueFL = tempSens->getHumidity();
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	4618      	mov	r0, r3
 8006734:	f005 fb67 	bl	800be06 <_ZN13THERMO_SENSOR11getHumidityEv>
 8006738:	4602      	mov	r2, r0
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			ReadedTemp = (uint32_t)roundf(chamberTemperature.readedValueFL * 10);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006746:	4963      	ldr	r1, [pc, #396]	; (80068d4 <_ZN10SmartDryer16thermoRegulationEf+0x208>)
 8006748:	4618      	mov	r0, r3
 800674a:	f7fa fa35 	bl	8000bb8 <__aeabi_fmul>
 800674e:	4603      	mov	r3, r0
 8006750:	4618      	mov	r0, r3
 8006752:	f00a ff69 	bl	8011628 <roundf>
 8006756:	4603      	mov	r3, r0
 8006758:	4618      	mov	r0, r3
 800675a:	f7fa fb7d 	bl	8000e58 <__aeabi_f2uiz>
 800675e:	4603      	mov	r3, r0
 8006760:	617b      	str	r3, [r7, #20]
			Reading = true;
 8006762:	2301      	movs	r3, #1
 8006764:	74fb      	strb	r3, [r7, #19]
		}
		if(ReadedTemp != 0 && Reading)
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 80af 	beq.w	80068cc <_ZN10SmartDryer16thermoRegulationEf+0x200>
 800676e:	7cfb      	ldrb	r3, [r7, #19]
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 80ab 	beq.w	80068cc <_ZN10SmartDryer16thermoRegulationEf+0x200>
		{
			if(ReadedTemp >= TempTarget - TOLLERANCE_DEGREES)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	3b37      	subs	r3, #55	; 0x37
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	429a      	cmp	r2, r3
 800677e:	d31b      	bcc.n	80067b8 <_ZN10SmartDryer16thermoRegulationEf+0xec>
			{
				statusParam->fanOn = true;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006784:	2201      	movs	r2, #1
 8006786:	709a      	strb	r2, [r3, #2]
				statusParam->thermoOn = true;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800678c:	2201      	movs	r2, #1
 800678e:	705a      	strb	r2, [r3, #1]
				if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8006796:	f240 12f5 	movw	r2, #501	; 0x1f5
 800679a:	4293      	cmp	r3, r2
 800679c:	f000 8096 	beq.w	80068cc <_ZN10SmartDryer16thermoRegulationEf+0x200>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 80067a6:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 80067aa:	f000 808f 	beq.w	80068cc <_ZN10SmartDryer16thermoRegulationEf+0x200>
					ledStatus = THERMO_ON_FAN_ON;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2203      	movs	r2, #3
 80067b2:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		{
			chamberTemperature.readedValueFL = tempSens->getTemperature();
			chamberHumity.readedValueFL = tempSens->getHumidity();
		}
	}
}
 80067b6:	e089      	b.n	80068cc <_ZN10SmartDryer16thermoRegulationEf+0x200>
			else if(ReadedTemp >= TempTarget)
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d324      	bcc.n	800680a <_ZN10SmartDryer16thermoRegulationEf+0x13e>
				statusParam->fanOn = true;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c4:	2201      	movs	r2, #1
 80067c6:	709a      	strb	r2, [r3, #2]
				statusParam->thermoOn = false;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067cc:	2200      	movs	r2, #0
 80067ce:	705a      	strb	r2, [r3, #1]
				ledStatus = TEMP_REACHED;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80067d6:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
				if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END && ledStatus != TEMP_REACHED)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 80067e0:	f240 12f5 	movw	r2, #501	; 0x1f5
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d071      	beq.n	80068cc <_ZN10SmartDryer16thermoRegulationEf+0x200>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 80067ee:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 80067f2:	d06b      	beq.n	80068cc <_ZN10SmartDryer16thermoRegulationEf+0x200>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 80067fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80067fe:	d065      	beq.n	80068cc <_ZN10SmartDryer16thermoRegulationEf+0x200>
					ledStatus = THERMO_OFF_FAN_ON;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
}
 8006808:	e060      	b.n	80068cc <_ZN10SmartDryer16thermoRegulationEf+0x200>
			else if(ReadedTemp < TempTarget - TOLLERANCE_DEGREES)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	3b37      	subs	r3, #55	; 0x37
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	429a      	cmp	r2, r3
 8006812:	d25b      	bcs.n	80068cc <_ZN10SmartDryer16thermoRegulationEf+0x200>
				statusParam->fanOn = false;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006818:	2200      	movs	r2, #0
 800681a:	709a      	strb	r2, [r3, #2]
				statusParam->thermoOn = true;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006820:	2201      	movs	r2, #1
 8006822:	705a      	strb	r2, [r3, #1]
				if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END && ledStatus != TEMP_REACHED)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800682a:	f240 12f5 	movw	r2, #501	; 0x1f5
 800682e:	4293      	cmp	r3, r2
 8006830:	d04c      	beq.n	80068cc <_ZN10SmartDryer16thermoRegulationEf+0x200>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8006838:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 800683c:	d046      	beq.n	80068cc <_ZN10SmartDryer16thermoRegulationEf+0x200>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8006844:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006848:	d040      	beq.n	80068cc <_ZN10SmartDryer16thermoRegulationEf+0x200>
					ledStatus = THERMO_ON_FAN_OFF;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
}
 8006852:	e03b      	b.n	80068cc <_ZN10SmartDryer16thermoRegulationEf+0x200>
		statusParam->fanOn = false;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006858:	2200      	movs	r2, #0
 800685a:	709a      	strb	r2, [r3, #2]
		statusParam->thermoOn = false;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006860:	2200      	movs	r2, #0
 8006862:	705a      	strb	r2, [r3, #1]
		if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END && ledStatus != TEMP_REACHED)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800686a:	f240 12f5 	movw	r2, #501	; 0x1f5
 800686e:	4293      	cmp	r3, r2
 8006870:	d00f      	beq.n	8006892 <_ZN10SmartDryer16thermoRegulationEf+0x1c6>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8006878:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 800687c:	d009      	beq.n	8006892 <_ZN10SmartDryer16thermoRegulationEf+0x1c6>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8006884:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006888:	d003      	beq.n	8006892 <_ZN10SmartDryer16thermoRegulationEf+0x1c6>
			ledStatus = THERMO_OFF_FAN_OFF;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2202      	movs	r2, #2
 800688e:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		if(getTempTimer->isFinished(true, 750))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	69db      	ldr	r3, [r3, #28]
 8006896:	f240 22ee 	movw	r2, #750	; 0x2ee
 800689a:	2101      	movs	r1, #1
 800689c:	4618      	mov	r0, r3
 800689e:	f7fc fd88 	bl	80033b2 <_ZN11ChronoTimer10isFinishedEbm>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d011      	beq.n	80068cc <_ZN10SmartDryer16thermoRegulationEf+0x200>
			chamberTemperature.readedValueFL = tempSens->getTemperature();
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	4618      	mov	r0, r3
 80068ae:	f005 fabe 	bl	800be2e <_ZN13THERMO_SENSOR14getTemperatureEv>
 80068b2:	4602      	mov	r2, r0
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			chamberHumity.readedValueFL = tempSens->getHumidity();
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	4618      	mov	r0, r3
 80068c0:	f005 faa1 	bl	800be06 <_ZN13THERMO_SENSOR11getHumidityEv>
 80068c4:	4602      	mov	r2, r0
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
 80068cc:	bf00      	nop
 80068ce:	3718      	adds	r7, #24
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	41200000 	.word	0x41200000

080068d8 <_ZN10SmartDryer16physicalReleCtrlEv>:

void SmartDryer::physicalReleCtrl()
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
	if(statusParam->dryerOn)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d024      	beq.n	8006934 <_ZN10SmartDryer16physicalReleCtrlEv+0x5c>
	{
		if(statusParam->fanOn)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ee:	789b      	ldrb	r3, [r3, #2]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d006      	beq.n	8006902 <_ZN10SmartDryer16physicalReleCtrlEv+0x2a>
		{
			fanCtrl->setState(HIGH);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	2101      	movs	r1, #1
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7fe fe3f 	bl	800557e <_ZN4RELE8setStateE9PIN_STATE>
 8006900:	e005      	b.n	800690e <_ZN10SmartDryer16physicalReleCtrlEv+0x36>
		}
		else
		{
			fanCtrl->setState(LOW);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	2100      	movs	r1, #0
 8006908:	4618      	mov	r0, r3
 800690a:	f7fe fe38 	bl	800557e <_ZN4RELE8setStateE9PIN_STATE>
		}
		if(statusParam->thermoOn)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006912:	785b      	ldrb	r3, [r3, #1]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d006      	beq.n	8006926 <_ZN10SmartDryer16physicalReleCtrlEv+0x4e>
		{
			thermoCtrl->setState(HIGH);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	2101      	movs	r1, #1
 800691e:	4618      	mov	r0, r3
 8006920:	f7fe fe2d 	bl	800557e <_ZN4RELE8setStateE9PIN_STATE>
	else
	{
		fanCtrl->setState(LOW);
		thermoCtrl->setState(LOW);
	}
}
 8006924:	e012      	b.n	800694c <_ZN10SmartDryer16physicalReleCtrlEv+0x74>
			thermoCtrl->setState(LOW);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	2100      	movs	r1, #0
 800692c:	4618      	mov	r0, r3
 800692e:	f7fe fe26 	bl	800557e <_ZN4RELE8setStateE9PIN_STATE>
}
 8006932:	e00b      	b.n	800694c <_ZN10SmartDryer16physicalReleCtrlEv+0x74>
		fanCtrl->setState(LOW);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	2100      	movs	r1, #0
 800693a:	4618      	mov	r0, r3
 800693c:	f7fe fe1f 	bl	800557e <_ZN4RELE8setStateE9PIN_STATE>
		thermoCtrl->setState(LOW);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	695b      	ldr	r3, [r3, #20]
 8006944:	2100      	movs	r1, #0
 8006946:	4618      	mov	r0, r3
 8006948:	f7fe fe19 	bl	800557e <_ZN4RELE8setStateE9PIN_STATE>
}
 800694c:	bf00      	nop
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <_ZN10SmartDryer18peripheralsControlEv>:

void SmartDryer::peripheralsControl()
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
	thermoRegulation(statusParam->temperatureSetted);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	4619      	mov	r1, r3
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f7ff feb1 	bl	80066cc <_ZN10SmartDryer16thermoRegulationEf>
	physicalReleCtrl();
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7ff ffb4 	bl	80068d8 <_ZN10SmartDryer16physicalReleCtrlEv>
	ledControl();
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f7ff fe0b 	bl	800658c <_ZN10SmartDryer10ledControlEv>
}
 8006976:	bf00      	nop
 8006978:	3708      	adds	r7, #8
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>:


void SmartDryer::showTimeDate(String &Time, String &Date)
{
 800697e:	b590      	push	{r4, r7, lr}
 8006980:	b09d      	sub	sp, #116	; 0x74
 8006982:	af00      	add	r7, sp, #0
 8006984:	60f8      	str	r0, [r7, #12]
 8006986:	60b9      	str	r1, [r7, #8]
 8006988:	607a      	str	r2, [r7, #4]
	if(takeTimeTimer->isFinished(true, 500))
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006992:	2101      	movs	r1, #1
 8006994:	4618      	mov	r0, r3
 8006996:	f7fc fd0c 	bl	80033b2 <_ZN11ChronoTimer10isFinishedEbm>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d025      	beq.n	80069ec <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0x6e>
	{
		Time = clock->getTimeDateStr(DS1307_RTC::ONLY_TIME_NO_SEC);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6859      	ldr	r1, [r3, #4]
 80069a4:	f107 0310 	add.w	r3, r7, #16
 80069a8:	2201      	movs	r2, #1
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7fc ff66 	bl	800387c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh>
 80069b0:	f107 0310 	add.w	r3, r7, #16
 80069b4:	4619      	mov	r1, r3
 80069b6:	68b8      	ldr	r0, [r7, #8]
 80069b8:	f00a fc05 	bl	80111c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80069bc:	f107 0310 	add.w	r3, r7, #16
 80069c0:	4618      	mov	r0, r3
 80069c2:	f00a fbf4 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		Date = clock->getTimeDateStr(DS1307_RTC::ONLY_DATE_NO_YEAR);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6859      	ldr	r1, [r3, #4]
 80069ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80069ce:	2203      	movs	r2, #3
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fc ff53 	bl	800387c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh>
 80069d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80069da:	4619      	mov	r1, r3
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f00a fbf2 	bl	80111c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80069e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80069e6:	4618      	mov	r0, r3
 80069e8:	f00a fbe1 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
	display->drawTimeDate(Time, Date);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681c      	ldr	r4, [r3, #0]
 80069f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80069f4:	68b9      	ldr	r1, [r7, #8]
 80069f6:	4618      	mov	r0, r3
 80069f8:	f00a fd3d 	bl	8011476 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80069fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006a00:	6879      	ldr	r1, [r7, #4]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f00a fd37 	bl	8011476 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8006a08:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006a0c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006a10:	4619      	mov	r1, r3
 8006a12:	4620      	mov	r0, r4
 8006a14:	f7fe fa66 	bl	8004ee4 <_ZN13NHDST7565_LCD12drawTimeDateENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>
 8006a18:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f00a fbc6 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006a22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006a26:	4618      	mov	r0, r3
 8006a28:	f00a fbc1 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8006a2c:	bf00      	nop
 8006a2e:	3774      	adds	r7, #116	; 0x74
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd90      	pop	{r4, r7, pc}

08006a34 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>:

void SmartDryer::writeDefaultsDryerProgram(uint8_t WichProgram)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	70fb      	strb	r3, [r7, #3]
	dryerPrograms[WichProgram].programSetted = false;
 8006a40:	78fa      	ldrb	r2, [r7, #3]
 8006a42:	6879      	ldr	r1, [r7, #4]
 8006a44:	4613      	mov	r3, r2
 8006a46:	005b      	lsls	r3, r3, #1
 8006a48:	4413      	add	r3, r2
 8006a4a:	00db      	lsls	r3, r3, #3
 8006a4c:	440b      	add	r3, r1
 8006a4e:	3348      	adds	r3, #72	; 0x48
 8006a50:	2200      	movs	r2, #0
 8006a52:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.second = 0;
 8006a54:	78fa      	ldrb	r2, [r7, #3]
 8006a56:	6879      	ldr	r1, [r7, #4]
 8006a58:	4613      	mov	r3, r2
 8006a5a:	005b      	lsls	r3, r3, #1
 8006a5c:	4413      	add	r3, r2
 8006a5e:	00db      	lsls	r3, r3, #3
 8006a60:	440b      	add	r3, r1
 8006a62:	334a      	adds	r3, #74	; 0x4a
 8006a64:	2200      	movs	r2, #0
 8006a66:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.minute = 0;
 8006a68:	78fa      	ldrb	r2, [r7, #3]
 8006a6a:	6879      	ldr	r1, [r7, #4]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	005b      	lsls	r3, r3, #1
 8006a70:	4413      	add	r3, r2
 8006a72:	00db      	lsls	r3, r3, #3
 8006a74:	440b      	add	r3, r1
 8006a76:	334b      	adds	r3, #75	; 0x4b
 8006a78:	2200      	movs	r2, #0
 8006a7a:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.hour = 0;
 8006a7c:	78fa      	ldrb	r2, [r7, #3]
 8006a7e:	6879      	ldr	r1, [r7, #4]
 8006a80:	4613      	mov	r3, r2
 8006a82:	005b      	lsls	r3, r3, #1
 8006a84:	4413      	add	r3, r2
 8006a86:	00db      	lsls	r3, r3, #3
 8006a88:	440b      	add	r3, r1
 8006a8a:	334c      	adds	r3, #76	; 0x4c
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.day = 1;
 8006a90:	78fa      	ldrb	r2, [r7, #3]
 8006a92:	6879      	ldr	r1, [r7, #4]
 8006a94:	4613      	mov	r3, r2
 8006a96:	005b      	lsls	r3, r3, #1
 8006a98:	4413      	add	r3, r2
 8006a9a:	00db      	lsls	r3, r3, #3
 8006a9c:	440b      	add	r3, r1
 8006a9e:	334d      	adds	r3, #77	; 0x4d
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.month = 1;
 8006aa4:	78fa      	ldrb	r2, [r7, #3]
 8006aa6:	6879      	ldr	r1, [r7, #4]
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	005b      	lsls	r3, r3, #1
 8006aac:	4413      	add	r3, r2
 8006aae:	00db      	lsls	r3, r3, #3
 8006ab0:	440b      	add	r3, r1
 8006ab2:	334e      	adds	r3, #78	; 0x4e
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.year = 2020;
 8006ab8:	78fa      	ldrb	r2, [r7, #3]
 8006aba:	6879      	ldr	r1, [r7, #4]
 8006abc:	4613      	mov	r3, r2
 8006abe:	005b      	lsls	r3, r3, #1
 8006ac0:	4413      	add	r3, r2
 8006ac2:	00db      	lsls	r3, r3, #3
 8006ac4:	440b      	add	r3, r1
 8006ac6:	3350      	adds	r3, #80	; 0x50
 8006ac8:	f240 72e4 	movw	r2, #2020	; 0x7e4
 8006acc:	801a      	strh	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.second = 0;
 8006ace:	78fa      	ldrb	r2, [r7, #3]
 8006ad0:	6879      	ldr	r1, [r7, #4]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	005b      	lsls	r3, r3, #1
 8006ad6:	4413      	add	r3, r2
 8006ad8:	00db      	lsls	r3, r3, #3
 8006ada:	440b      	add	r3, r1
 8006adc:	3352      	adds	r3, #82	; 0x52
 8006ade:	2200      	movs	r2, #0
 8006ae0:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.minute = 10;
 8006ae2:	78fa      	ldrb	r2, [r7, #3]
 8006ae4:	6879      	ldr	r1, [r7, #4]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	005b      	lsls	r3, r3, #1
 8006aea:	4413      	add	r3, r2
 8006aec:	00db      	lsls	r3, r3, #3
 8006aee:	440b      	add	r3, r1
 8006af0:	3353      	adds	r3, #83	; 0x53
 8006af2:	220a      	movs	r2, #10
 8006af4:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.hour = 0;
 8006af6:	78fa      	ldrb	r2, [r7, #3]
 8006af8:	6879      	ldr	r1, [r7, #4]
 8006afa:	4613      	mov	r3, r2
 8006afc:	005b      	lsls	r3, r3, #1
 8006afe:	4413      	add	r3, r2
 8006b00:	00db      	lsls	r3, r3, #3
 8006b02:	440b      	add	r3, r1
 8006b04:	3354      	adds	r3, #84	; 0x54
 8006b06:	2200      	movs	r2, #0
 8006b08:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.day = 1;
 8006b0a:	78fa      	ldrb	r2, [r7, #3]
 8006b0c:	6879      	ldr	r1, [r7, #4]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	005b      	lsls	r3, r3, #1
 8006b12:	4413      	add	r3, r2
 8006b14:	00db      	lsls	r3, r3, #3
 8006b16:	440b      	add	r3, r1
 8006b18:	3355      	adds	r3, #85	; 0x55
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.month = 1;
 8006b1e:	78fa      	ldrb	r2, [r7, #3]
 8006b20:	6879      	ldr	r1, [r7, #4]
 8006b22:	4613      	mov	r3, r2
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	4413      	add	r3, r2
 8006b28:	00db      	lsls	r3, r3, #3
 8006b2a:	440b      	add	r3, r1
 8006b2c:	3356      	adds	r3, #86	; 0x56
 8006b2e:	2201      	movs	r2, #1
 8006b30:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.year = 2020;
 8006b32:	78fa      	ldrb	r2, [r7, #3]
 8006b34:	6879      	ldr	r1, [r7, #4]
 8006b36:	4613      	mov	r3, r2
 8006b38:	005b      	lsls	r3, r3, #1
 8006b3a:	4413      	add	r3, r2
 8006b3c:	00db      	lsls	r3, r3, #3
 8006b3e:	440b      	add	r3, r1
 8006b40:	3358      	adds	r3, #88	; 0x58
 8006b42:	f240 72e4 	movw	r2, #2020	; 0x7e4
 8006b46:	801a      	strh	r2, [r3, #0]
	dryerPrograms[WichProgram].tempSetted = 30.0;
 8006b48:	78fa      	ldrb	r2, [r7, #3]
 8006b4a:	6879      	ldr	r1, [r7, #4]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	005b      	lsls	r3, r3, #1
 8006b50:	4413      	add	r3, r2
 8006b52:	00db      	lsls	r3, r3, #3
 8006b54:	440b      	add	r3, r1
 8006b56:	335c      	adds	r3, #92	; 0x5c
 8006b58:	4a03      	ldr	r2, [pc, #12]	; (8006b68 <_ZN10SmartDryer25writeDefaultsDryerProgramEh+0x134>)
 8006b5a:	601a      	str	r2, [r3, #0]
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bc80      	pop	{r7}
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	41f00000 	.word	0x41f00000

08006b6c <_ZN10SmartDryer16saveDryerProgramEh>:

void SmartDryer::saveDryerProgram(uint8_t WichProgram)
{
 8006b6c:	b590      	push	{r4, r7, lr}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	460b      	mov	r3, r1
 8006b76:	70fb      	strb	r3, [r7, #3]
	const uint8_t MAX_DRYER_VAR = 14;
 8006b78:	230e      	movs	r3, #14
 8006b7a:	73fb      	strb	r3, [r7, #15]
	uint32_t TempToSave = 0;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	60bb      	str	r3, [r7, #8]
	TempToSave = (uint32_t)dryerPrograms[WichProgram].tempSetted;
 8006b80:	78fa      	ldrb	r2, [r7, #3]
 8006b82:	6879      	ldr	r1, [r7, #4]
 8006b84:	4613      	mov	r3, r2
 8006b86:	005b      	lsls	r3, r3, #1
 8006b88:	4413      	add	r3, r2
 8006b8a:	00db      	lsls	r3, r3, #3
 8006b8c:	440b      	add	r3, r1
 8006b8e:	335c      	adds	r3, #92	; 0x5c
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fa f960 	bl	8000e58 <__aeabi_f2uiz>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	60bb      	str	r3, [r7, #8]
	memory->writeToMemory(SETTED_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].programSetted, NO_MEM_TRANSFER);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6998      	ldr	r0, [r3, #24]
 8006ba0:	78fb      	ldrb	r3, [r7, #3]
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	00d2      	lsls	r2, r2, #3
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	005b      	lsls	r3, r3, #1
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	3301      	adds	r3, #1
 8006bb0:	b29c      	uxth	r4, r3
 8006bb2:	78fa      	ldrb	r2, [r7, #3]
 8006bb4:	6879      	ldr	r1, [r7, #4]
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	005b      	lsls	r3, r3, #1
 8006bba:	4413      	add	r3, r2
 8006bbc:	00db      	lsls	r3, r3, #3
 8006bbe:	440b      	add	r3, r1
 8006bc0:	3348      	adds	r3, #72	; 0x48
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	4621      	mov	r1, r4
 8006bca:	f7fe fb5c 	bl	8005286 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.second, NO_MEM_TRANSFER);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6998      	ldr	r0, [r3, #24]
 8006bd2:	78fb      	ldrb	r3, [r7, #3]
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	00d2      	lsls	r2, r2, #3
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	005b      	lsls	r3, r3, #1
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	3302      	adds	r3, #2
 8006be2:	b29c      	uxth	r4, r3
 8006be4:	78fa      	ldrb	r2, [r7, #3]
 8006be6:	6879      	ldr	r1, [r7, #4]
 8006be8:	4613      	mov	r3, r2
 8006bea:	005b      	lsls	r3, r3, #1
 8006bec:	4413      	add	r3, r2
 8006bee:	00db      	lsls	r3, r3, #3
 8006bf0:	440b      	add	r3, r1
 8006bf2:	334a      	adds	r3, #74	; 0x4a
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	4621      	mov	r1, r4
 8006bfc:	f7fe fb43 	bl	8005286 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.minute, NO_MEM_TRANSFER);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6998      	ldr	r0, [r3, #24]
 8006c04:	78fb      	ldrb	r3, [r7, #3]
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	461a      	mov	r2, r3
 8006c0a:	00d2      	lsls	r2, r2, #3
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	005b      	lsls	r3, r3, #1
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	3303      	adds	r3, #3
 8006c14:	b29c      	uxth	r4, r3
 8006c16:	78fa      	ldrb	r2, [r7, #3]
 8006c18:	6879      	ldr	r1, [r7, #4]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	005b      	lsls	r3, r3, #1
 8006c1e:	4413      	add	r3, r2
 8006c20:	00db      	lsls	r3, r3, #3
 8006c22:	440b      	add	r3, r1
 8006c24:	334b      	adds	r3, #75	; 0x4b
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	461a      	mov	r2, r3
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	4621      	mov	r1, r4
 8006c2e:	f7fe fb2a 	bl	8005286 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.hour, NO_MEM_TRANSFER);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6998      	ldr	r0, [r3, #24]
 8006c36:	78fb      	ldrb	r3, [r7, #3]
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	00d2      	lsls	r2, r2, #3
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	005b      	lsls	r3, r3, #1
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	3304      	adds	r3, #4
 8006c46:	b29c      	uxth	r4, r3
 8006c48:	78fa      	ldrb	r2, [r7, #3]
 8006c4a:	6879      	ldr	r1, [r7, #4]
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	005b      	lsls	r3, r3, #1
 8006c50:	4413      	add	r3, r2
 8006c52:	00db      	lsls	r3, r3, #3
 8006c54:	440b      	add	r3, r1
 8006c56:	334c      	adds	r3, #76	; 0x4c
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	4621      	mov	r1, r4
 8006c60:	f7fe fb11 	bl	8005286 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.day, NO_MEM_TRANSFER);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6998      	ldr	r0, [r3, #24]
 8006c68:	78fb      	ldrb	r3, [r7, #3]
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	00d2      	lsls	r2, r2, #3
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	005b      	lsls	r3, r3, #1
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	3305      	adds	r3, #5
 8006c78:	b29c      	uxth	r4, r3
 8006c7a:	78fa      	ldrb	r2, [r7, #3]
 8006c7c:	6879      	ldr	r1, [r7, #4]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	005b      	lsls	r3, r3, #1
 8006c82:	4413      	add	r3, r2
 8006c84:	00db      	lsls	r3, r3, #3
 8006c86:	440b      	add	r3, r1
 8006c88:	334d      	adds	r3, #77	; 0x4d
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	2300      	movs	r3, #0
 8006c90:	4621      	mov	r1, r4
 8006c92:	f7fe faf8 	bl	8005286 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.month, NO_MEM_TRANSFER);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6998      	ldr	r0, [r3, #24]
 8006c9a:	78fb      	ldrb	r3, [r7, #3]
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	00d2      	lsls	r2, r2, #3
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	005b      	lsls	r3, r3, #1
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	3306      	adds	r3, #6
 8006caa:	b29c      	uxth	r4, r3
 8006cac:	78fa      	ldrb	r2, [r7, #3]
 8006cae:	6879      	ldr	r1, [r7, #4]
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	005b      	lsls	r3, r3, #1
 8006cb4:	4413      	add	r3, r2
 8006cb6:	00db      	lsls	r3, r3, #3
 8006cb8:	440b      	add	r3, r1
 8006cba:	334e      	adds	r3, #78	; 0x4e
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	4621      	mov	r1, r4
 8006cc4:	f7fe fadf 	bl	8005286 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.year, NO_MEM_TRANSFER);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6998      	ldr	r0, [r3, #24]
 8006ccc:	78fb      	ldrb	r3, [r7, #3]
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	00d2      	lsls	r2, r2, #3
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	005b      	lsls	r3, r3, #1
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	3307      	adds	r3, #7
 8006cdc:	b29c      	uxth	r4, r3
 8006cde:	78fa      	ldrb	r2, [r7, #3]
 8006ce0:	6879      	ldr	r1, [r7, #4]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	005b      	lsls	r3, r3, #1
 8006ce6:	4413      	add	r3, r2
 8006ce8:	00db      	lsls	r3, r3, #3
 8006cea:	440b      	add	r3, r1
 8006cec:	3350      	adds	r3, #80	; 0x50
 8006cee:	881b      	ldrh	r3, [r3, #0]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	4621      	mov	r1, r4
 8006cf6:	f7fe fac6 	bl	8005286 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.second, NO_MEM_TRANSFER);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6998      	ldr	r0, [r3, #24]
 8006cfe:	78fb      	ldrb	r3, [r7, #3]
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	461a      	mov	r2, r3
 8006d04:	00d2      	lsls	r2, r2, #3
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	005b      	lsls	r3, r3, #1
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	3308      	adds	r3, #8
 8006d0e:	b29c      	uxth	r4, r3
 8006d10:	78fa      	ldrb	r2, [r7, #3]
 8006d12:	6879      	ldr	r1, [r7, #4]
 8006d14:	4613      	mov	r3, r2
 8006d16:	005b      	lsls	r3, r3, #1
 8006d18:	4413      	add	r3, r2
 8006d1a:	00db      	lsls	r3, r3, #3
 8006d1c:	440b      	add	r3, r1
 8006d1e:	3352      	adds	r3, #82	; 0x52
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	461a      	mov	r2, r3
 8006d24:	2300      	movs	r3, #0
 8006d26:	4621      	mov	r1, r4
 8006d28:	f7fe faad 	bl	8005286 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.minute, NO_MEM_TRANSFER);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6998      	ldr	r0, [r3, #24]
 8006d30:	78fb      	ldrb	r3, [r7, #3]
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	461a      	mov	r2, r3
 8006d36:	00d2      	lsls	r2, r2, #3
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	005b      	lsls	r3, r3, #1
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	3309      	adds	r3, #9
 8006d40:	b29c      	uxth	r4, r3
 8006d42:	78fa      	ldrb	r2, [r7, #3]
 8006d44:	6879      	ldr	r1, [r7, #4]
 8006d46:	4613      	mov	r3, r2
 8006d48:	005b      	lsls	r3, r3, #1
 8006d4a:	4413      	add	r3, r2
 8006d4c:	00db      	lsls	r3, r3, #3
 8006d4e:	440b      	add	r3, r1
 8006d50:	3353      	adds	r3, #83	; 0x53
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	461a      	mov	r2, r3
 8006d56:	2300      	movs	r3, #0
 8006d58:	4621      	mov	r1, r4
 8006d5a:	f7fe fa94 	bl	8005286 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.hour, NO_MEM_TRANSFER);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6998      	ldr	r0, [r3, #24]
 8006d62:	78fb      	ldrb	r3, [r7, #3]
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	461a      	mov	r2, r3
 8006d68:	00d2      	lsls	r2, r2, #3
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	005b      	lsls	r3, r3, #1
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	330a      	adds	r3, #10
 8006d72:	b29c      	uxth	r4, r3
 8006d74:	78fa      	ldrb	r2, [r7, #3]
 8006d76:	6879      	ldr	r1, [r7, #4]
 8006d78:	4613      	mov	r3, r2
 8006d7a:	005b      	lsls	r3, r3, #1
 8006d7c:	4413      	add	r3, r2
 8006d7e:	00db      	lsls	r3, r3, #3
 8006d80:	440b      	add	r3, r1
 8006d82:	3354      	adds	r3, #84	; 0x54
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	461a      	mov	r2, r3
 8006d88:	2300      	movs	r3, #0
 8006d8a:	4621      	mov	r1, r4
 8006d8c:	f7fe fa7b 	bl	8005286 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.day, NO_MEM_TRANSFER);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6998      	ldr	r0, [r3, #24]
 8006d94:	78fb      	ldrb	r3, [r7, #3]
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	461a      	mov	r2, r3
 8006d9a:	00d2      	lsls	r2, r2, #3
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	005b      	lsls	r3, r3, #1
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	330b      	adds	r3, #11
 8006da4:	b29c      	uxth	r4, r3
 8006da6:	78fa      	ldrb	r2, [r7, #3]
 8006da8:	6879      	ldr	r1, [r7, #4]
 8006daa:	4613      	mov	r3, r2
 8006dac:	005b      	lsls	r3, r3, #1
 8006dae:	4413      	add	r3, r2
 8006db0:	00db      	lsls	r3, r3, #3
 8006db2:	440b      	add	r3, r1
 8006db4:	3355      	adds	r3, #85	; 0x55
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	461a      	mov	r2, r3
 8006dba:	2300      	movs	r3, #0
 8006dbc:	4621      	mov	r1, r4
 8006dbe:	f7fe fa62 	bl	8005286 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.month, NO_MEM_TRANSFER);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6998      	ldr	r0, [r3, #24]
 8006dc6:	78fb      	ldrb	r3, [r7, #3]
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	461a      	mov	r2, r3
 8006dcc:	00d2      	lsls	r2, r2, #3
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	005b      	lsls	r3, r3, #1
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	330c      	adds	r3, #12
 8006dd6:	b29c      	uxth	r4, r3
 8006dd8:	78fa      	ldrb	r2, [r7, #3]
 8006dda:	6879      	ldr	r1, [r7, #4]
 8006ddc:	4613      	mov	r3, r2
 8006dde:	005b      	lsls	r3, r3, #1
 8006de0:	4413      	add	r3, r2
 8006de2:	00db      	lsls	r3, r3, #3
 8006de4:	440b      	add	r3, r1
 8006de6:	3356      	adds	r3, #86	; 0x56
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	461a      	mov	r2, r3
 8006dec:	2300      	movs	r3, #0
 8006dee:	4621      	mov	r1, r4
 8006df0:	f7fe fa49 	bl	8005286 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.year, NO_MEM_TRANSFER);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6998      	ldr	r0, [r3, #24]
 8006df8:	78fb      	ldrb	r3, [r7, #3]
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	00d2      	lsls	r2, r2, #3
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	005b      	lsls	r3, r3, #1
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	330d      	adds	r3, #13
 8006e08:	b29c      	uxth	r4, r3
 8006e0a:	78fa      	ldrb	r2, [r7, #3]
 8006e0c:	6879      	ldr	r1, [r7, #4]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	005b      	lsls	r3, r3, #1
 8006e12:	4413      	add	r3, r2
 8006e14:	00db      	lsls	r3, r3, #3
 8006e16:	440b      	add	r3, r1
 8006e18:	3358      	adds	r3, #88	; 0x58
 8006e1a:	881b      	ldrh	r3, [r3, #0]
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	2300      	movs	r3, #0
 8006e20:	4621      	mov	r1, r4
 8006e22:	f7fe fa30 	bl	8005286 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(TEMP_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), TempToSave, MEM_TRANSFER);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6998      	ldr	r0, [r3, #24]
 8006e2a:	78fb      	ldrb	r3, [r7, #3]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	461a      	mov	r2, r3
 8006e32:	00d2      	lsls	r2, r2, #3
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	005b      	lsls	r3, r3, #1
 8006e38:	b299      	uxth	r1, r3
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	f7fe fa22 	bl	8005286 <_ZN12STM32_EEPROM13writeToMemoryEtmb>

}
 8006e42:	bf00      	nop
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd90      	pop	{r4, r7, pc}

08006e4a <_ZN10SmartDryer16loadDryerProgramEh>:

void SmartDryer::loadDryerProgram(uint8_t WichProgram)
{
 8006e4a:	b590      	push	{r4, r7, lr}
 8006e4c:	b085      	sub	sp, #20
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
 8006e52:	460b      	mov	r3, r1
 8006e54:	70fb      	strb	r3, [r7, #3]
	const uint8_t MAX_DRYER_VAR = 14;
 8006e56:	230e      	movs	r3, #14
 8006e58:	73fb      	strb	r3, [r7, #15]
	uint32_t TempSaved = 0;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	60bb      	str	r3, [r7, #8]
	memory->loadMemory(SETTED_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].programSetted);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6998      	ldr	r0, [r3, #24]
 8006e62:	78fb      	ldrb	r3, [r7, #3]
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	461a      	mov	r2, r3
 8006e68:	00d2      	lsls	r2, r2, #3
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	005b      	lsls	r3, r3, #1
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	3301      	adds	r3, #1
 8006e72:	b299      	uxth	r1, r3
 8006e74:	78fa      	ldrb	r2, [r7, #3]
 8006e76:	4613      	mov	r3, r2
 8006e78:	005b      	lsls	r3, r3, #1
 8006e7a:	4413      	add	r3, r2
 8006e7c:	00db      	lsls	r3, r3, #3
 8006e7e:	3348      	adds	r3, #72	; 0x48
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	4413      	add	r3, r2
 8006e84:	461a      	mov	r2, r3
 8006e86:	f7fe fa1c 	bl	80052c2 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.second);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6998      	ldr	r0, [r3, #24]
 8006e8e:	78fb      	ldrb	r3, [r7, #3]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	461a      	mov	r2, r3
 8006e94:	00d2      	lsls	r2, r2, #3
 8006e96:	1ad3      	subs	r3, r2, r3
 8006e98:	005b      	lsls	r3, r3, #1
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	3302      	adds	r3, #2
 8006e9e:	b299      	uxth	r1, r3
 8006ea0:	78fa      	ldrb	r2, [r7, #3]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	005b      	lsls	r3, r3, #1
 8006ea6:	4413      	add	r3, r2
 8006ea8:	00db      	lsls	r3, r3, #3
 8006eaa:	3348      	adds	r3, #72	; 0x48
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	4413      	add	r3, r2
 8006eb0:	3302      	adds	r3, #2
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	f7fe fa05 	bl	80052c2 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.minute);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6998      	ldr	r0, [r3, #24]
 8006ebc:	78fb      	ldrb	r3, [r7, #3]
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	00d2      	lsls	r2, r2, #3
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	005b      	lsls	r3, r3, #1
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	3303      	adds	r3, #3
 8006ecc:	b299      	uxth	r1, r3
 8006ece:	78fa      	ldrb	r2, [r7, #3]
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	005b      	lsls	r3, r3, #1
 8006ed4:	4413      	add	r3, r2
 8006ed6:	00db      	lsls	r3, r3, #3
 8006ed8:	3348      	adds	r3, #72	; 0x48
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	4413      	add	r3, r2
 8006ede:	3303      	adds	r3, #3
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	f7fe f9ee 	bl	80052c2 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.hour);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6998      	ldr	r0, [r3, #24]
 8006eea:	78fb      	ldrb	r3, [r7, #3]
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	461a      	mov	r2, r3
 8006ef0:	00d2      	lsls	r2, r2, #3
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	005b      	lsls	r3, r3, #1
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	3304      	adds	r3, #4
 8006efa:	b299      	uxth	r1, r3
 8006efc:	78fa      	ldrb	r2, [r7, #3]
 8006efe:	4613      	mov	r3, r2
 8006f00:	005b      	lsls	r3, r3, #1
 8006f02:	4413      	add	r3, r2
 8006f04:	00db      	lsls	r3, r3, #3
 8006f06:	3348      	adds	r3, #72	; 0x48
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	3304      	adds	r3, #4
 8006f0e:	461a      	mov	r2, r3
 8006f10:	f7fe f9d7 	bl	80052c2 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.day);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6998      	ldr	r0, [r3, #24]
 8006f18:	78fb      	ldrb	r3, [r7, #3]
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	00d2      	lsls	r2, r2, #3
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	005b      	lsls	r3, r3, #1
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	3305      	adds	r3, #5
 8006f28:	b299      	uxth	r1, r3
 8006f2a:	78fa      	ldrb	r2, [r7, #3]
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	005b      	lsls	r3, r3, #1
 8006f30:	4413      	add	r3, r2
 8006f32:	00db      	lsls	r3, r3, #3
 8006f34:	3348      	adds	r3, #72	; 0x48
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	4413      	add	r3, r2
 8006f3a:	3305      	adds	r3, #5
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	f7fe f9c0 	bl	80052c2 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.month);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6998      	ldr	r0, [r3, #24]
 8006f46:	78fb      	ldrb	r3, [r7, #3]
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	00d2      	lsls	r2, r2, #3
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	005b      	lsls	r3, r3, #1
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	3306      	adds	r3, #6
 8006f56:	b299      	uxth	r1, r3
 8006f58:	78fa      	ldrb	r2, [r7, #3]
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	005b      	lsls	r3, r3, #1
 8006f5e:	4413      	add	r3, r2
 8006f60:	00db      	lsls	r3, r3, #3
 8006f62:	3348      	adds	r3, #72	; 0x48
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	4413      	add	r3, r2
 8006f68:	3306      	adds	r3, #6
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	f7fe f9a9 	bl	80052c2 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.year);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6998      	ldr	r0, [r3, #24]
 8006f74:	78fb      	ldrb	r3, [r7, #3]
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	461a      	mov	r2, r3
 8006f7a:	00d2      	lsls	r2, r2, #3
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	005b      	lsls	r3, r3, #1
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	3307      	adds	r3, #7
 8006f84:	b299      	uxth	r1, r3
 8006f86:	78fa      	ldrb	r2, [r7, #3]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	005b      	lsls	r3, r3, #1
 8006f8c:	4413      	add	r3, r2
 8006f8e:	00db      	lsls	r3, r3, #3
 8006f90:	3348      	adds	r3, #72	; 0x48
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	4413      	add	r3, r2
 8006f96:	3308      	adds	r3, #8
 8006f98:	461a      	mov	r2, r3
 8006f9a:	f7fe f992 	bl	80052c2 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.second);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6998      	ldr	r0, [r3, #24]
 8006fa2:	78fb      	ldrb	r3, [r7, #3]
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	00d2      	lsls	r2, r2, #3
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	005b      	lsls	r3, r3, #1
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	3308      	adds	r3, #8
 8006fb2:	b299      	uxth	r1, r3
 8006fb4:	78fa      	ldrb	r2, [r7, #3]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	005b      	lsls	r3, r3, #1
 8006fba:	4413      	add	r3, r2
 8006fbc:	00db      	lsls	r3, r3, #3
 8006fbe:	3350      	adds	r3, #80	; 0x50
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	3302      	adds	r3, #2
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	f7fe f97b 	bl	80052c2 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.minute);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6998      	ldr	r0, [r3, #24]
 8006fd0:	78fb      	ldrb	r3, [r7, #3]
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	00d2      	lsls	r2, r2, #3
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	005b      	lsls	r3, r3, #1
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	3309      	adds	r3, #9
 8006fe0:	b299      	uxth	r1, r3
 8006fe2:	78fa      	ldrb	r2, [r7, #3]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	005b      	lsls	r3, r3, #1
 8006fe8:	4413      	add	r3, r2
 8006fea:	00db      	lsls	r3, r3, #3
 8006fec:	3350      	adds	r3, #80	; 0x50
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	3303      	adds	r3, #3
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	f7fe f964 	bl	80052c2 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.hour);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6998      	ldr	r0, [r3, #24]
 8006ffe:	78fb      	ldrb	r3, [r7, #3]
 8007000:	b29b      	uxth	r3, r3
 8007002:	461a      	mov	r2, r3
 8007004:	00d2      	lsls	r2, r2, #3
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	005b      	lsls	r3, r3, #1
 800700a:	b29b      	uxth	r3, r3
 800700c:	330a      	adds	r3, #10
 800700e:	b299      	uxth	r1, r3
 8007010:	78fa      	ldrb	r2, [r7, #3]
 8007012:	4613      	mov	r3, r2
 8007014:	005b      	lsls	r3, r3, #1
 8007016:	4413      	add	r3, r2
 8007018:	00db      	lsls	r3, r3, #3
 800701a:	3350      	adds	r3, #80	; 0x50
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	4413      	add	r3, r2
 8007020:	3304      	adds	r3, #4
 8007022:	461a      	mov	r2, r3
 8007024:	f7fe f94d 	bl	80052c2 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.day);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6998      	ldr	r0, [r3, #24]
 800702c:	78fb      	ldrb	r3, [r7, #3]
 800702e:	b29b      	uxth	r3, r3
 8007030:	461a      	mov	r2, r3
 8007032:	00d2      	lsls	r2, r2, #3
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	005b      	lsls	r3, r3, #1
 8007038:	b29b      	uxth	r3, r3
 800703a:	330b      	adds	r3, #11
 800703c:	b299      	uxth	r1, r3
 800703e:	78fa      	ldrb	r2, [r7, #3]
 8007040:	4613      	mov	r3, r2
 8007042:	005b      	lsls	r3, r3, #1
 8007044:	4413      	add	r3, r2
 8007046:	00db      	lsls	r3, r3, #3
 8007048:	3350      	adds	r3, #80	; 0x50
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	4413      	add	r3, r2
 800704e:	3305      	adds	r3, #5
 8007050:	461a      	mov	r2, r3
 8007052:	f7fe f936 	bl	80052c2 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.month);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6998      	ldr	r0, [r3, #24]
 800705a:	78fb      	ldrb	r3, [r7, #3]
 800705c:	b29b      	uxth	r3, r3
 800705e:	461a      	mov	r2, r3
 8007060:	00d2      	lsls	r2, r2, #3
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	b29b      	uxth	r3, r3
 8007068:	330c      	adds	r3, #12
 800706a:	b299      	uxth	r1, r3
 800706c:	78fa      	ldrb	r2, [r7, #3]
 800706e:	4613      	mov	r3, r2
 8007070:	005b      	lsls	r3, r3, #1
 8007072:	4413      	add	r3, r2
 8007074:	00db      	lsls	r3, r3, #3
 8007076:	3350      	adds	r3, #80	; 0x50
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	4413      	add	r3, r2
 800707c:	3306      	adds	r3, #6
 800707e:	461a      	mov	r2, r3
 8007080:	f7fe f91f 	bl	80052c2 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.year);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6998      	ldr	r0, [r3, #24]
 8007088:	78fb      	ldrb	r3, [r7, #3]
 800708a:	b29b      	uxth	r3, r3
 800708c:	461a      	mov	r2, r3
 800708e:	00d2      	lsls	r2, r2, #3
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	005b      	lsls	r3, r3, #1
 8007094:	b29b      	uxth	r3, r3
 8007096:	330d      	adds	r3, #13
 8007098:	b299      	uxth	r1, r3
 800709a:	78fa      	ldrb	r2, [r7, #3]
 800709c:	4613      	mov	r3, r2
 800709e:	005b      	lsls	r3, r3, #1
 80070a0:	4413      	add	r3, r2
 80070a2:	00db      	lsls	r3, r3, #3
 80070a4:	3350      	adds	r3, #80	; 0x50
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	4413      	add	r3, r2
 80070aa:	3308      	adds	r3, #8
 80070ac:	461a      	mov	r2, r3
 80070ae:	f7fe f908 	bl	80052c2 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(TEMP_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&TempSaved);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6998      	ldr	r0, [r3, #24]
 80070b6:	78fb      	ldrb	r3, [r7, #3]
 80070b8:	3301      	adds	r3, #1
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	461a      	mov	r2, r3
 80070be:	00d2      	lsls	r2, r2, #3
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	005b      	lsls	r3, r3, #1
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	f107 0208 	add.w	r2, r7, #8
 80070ca:	4619      	mov	r1, r3
 80070cc:	f7fe f8f9 	bl	80052c2 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	dryerPrograms[WichProgram].tempSetted = (float)TempSaved;
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	78fc      	ldrb	r4, [r7, #3]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7f9 fd17 	bl	8000b08 <__aeabi_ui2f>
 80070da:	4601      	mov	r1, r0
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	4623      	mov	r3, r4
 80070e0:	005b      	lsls	r3, r3, #1
 80070e2:	4423      	add	r3, r4
 80070e4:	00db      	lsls	r3, r3, #3
 80070e6:	4413      	add	r3, r2
 80070e8:	335c      	adds	r3, #92	; 0x5c
 80070ea:	6019      	str	r1, [r3, #0]
}
 80070ec:	bf00      	nop
 80070ee:	3714      	adds	r7, #20
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd90      	pop	{r4, r7, pc}

080070f4 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE>:


void SmartDryer::checkSettedProgramTime(uint8_t WichProgram, PROGRAM_STRUCURE ProgramToSet)
{
 80070f4:	b082      	sub	sp, #8
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b082      	sub	sp, #8
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
 80070fe:	f107 0010 	add.w	r0, r7, #16
 8007102:	e880 000c 	stmia.w	r0, {r2, r3}
 8007106:	460b      	mov	r3, r1
 8007108:	70fb      	strb	r3, [r7, #3]
	clock->getTimeDate(dryerPrograms[WichProgram].startTime);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6858      	ldr	r0, [r3, #4]
 800710e:	78fa      	ldrb	r2, [r7, #3]
 8007110:	4613      	mov	r3, r2
 8007112:	005b      	lsls	r3, r3, #1
 8007114:	4413      	add	r3, r2
 8007116:	00db      	lsls	r3, r3, #3
 8007118:	3348      	adds	r3, #72	; 0x48
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	4413      	add	r3, r2
 800711e:	3302      	adds	r3, #2
 8007120:	4619      	mov	r1, r3
 8007122:	f7fc fb07 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
	HAL_Delay(250);
 8007126:	20fa      	movs	r0, #250	; 0xfa
 8007128:	f005 f830 	bl	800c18c <HAL_Delay>
	clock->getTimeDate(dryerPrograms[WichProgram].endTime);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6858      	ldr	r0, [r3, #4]
 8007130:	78fa      	ldrb	r2, [r7, #3]
 8007132:	4613      	mov	r3, r2
 8007134:	005b      	lsls	r3, r3, #1
 8007136:	4413      	add	r3, r2
 8007138:	00db      	lsls	r3, r3, #3
 800713a:	3350      	adds	r3, #80	; 0x50
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	4413      	add	r3, r2
 8007140:	3302      	adds	r3, #2
 8007142:	4619      	mov	r1, r3
 8007144:	f7fc faf6 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
	dryerPrograms[WichProgram].startTime.minute = ProgramToSet.startTime.minute;
 8007148:	78fa      	ldrb	r2, [r7, #3]
 800714a:	7cf8      	ldrb	r0, [r7, #19]
 800714c:	6879      	ldr	r1, [r7, #4]
 800714e:	4613      	mov	r3, r2
 8007150:	005b      	lsls	r3, r3, #1
 8007152:	4413      	add	r3, r2
 8007154:	00db      	lsls	r3, r3, #3
 8007156:	440b      	add	r3, r1
 8007158:	334b      	adds	r3, #75	; 0x4b
 800715a:	4602      	mov	r2, r0
 800715c:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.minute = ProgramToSet.endTime.minute;
 800715e:	78fa      	ldrb	r2, [r7, #3]
 8007160:	7ef8      	ldrb	r0, [r7, #27]
 8007162:	6879      	ldr	r1, [r7, #4]
 8007164:	4613      	mov	r3, r2
 8007166:	005b      	lsls	r3, r3, #1
 8007168:	4413      	add	r3, r2
 800716a:	00db      	lsls	r3, r3, #3
 800716c:	440b      	add	r3, r1
 800716e:	3353      	adds	r3, #83	; 0x53
 8007170:	4602      	mov	r2, r0
 8007172:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.hour = ProgramToSet.startTime.hour;
 8007174:	78fa      	ldrb	r2, [r7, #3]
 8007176:	7d38      	ldrb	r0, [r7, #20]
 8007178:	6879      	ldr	r1, [r7, #4]
 800717a:	4613      	mov	r3, r2
 800717c:	005b      	lsls	r3, r3, #1
 800717e:	4413      	add	r3, r2
 8007180:	00db      	lsls	r3, r3, #3
 8007182:	440b      	add	r3, r1
 8007184:	334c      	adds	r3, #76	; 0x4c
 8007186:	4602      	mov	r2, r0
 8007188:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.hour = ProgramToSet.endTime.hour;
 800718a:	78fa      	ldrb	r2, [r7, #3]
 800718c:	7f38      	ldrb	r0, [r7, #28]
 800718e:	6879      	ldr	r1, [r7, #4]
 8007190:	4613      	mov	r3, r2
 8007192:	005b      	lsls	r3, r3, #1
 8007194:	4413      	add	r3, r2
 8007196:	00db      	lsls	r3, r3, #3
 8007198:	440b      	add	r3, r1
 800719a:	3354      	adds	r3, #84	; 0x54
 800719c:	4602      	mov	r2, r0
 800719e:	701a      	strb	r2, [r3, #0]
	if(ProgramToSet.startTime.hour > ProgramToSet.endTime.hour)
 80071a0:	7d3a      	ldrb	r2, [r7, #20]
 80071a2:	7f3b      	ldrb	r3, [r7, #28]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d94d      	bls.n	8007244 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x150>
	{
		if(dryerPrograms[WichProgram].endTime.day + 1 < daysInMonth[dryerPrograms[WichProgram].endTime.month - 1])
 80071a8:	78fa      	ldrb	r2, [r7, #3]
 80071aa:	6879      	ldr	r1, [r7, #4]
 80071ac:	4613      	mov	r3, r2
 80071ae:	005b      	lsls	r3, r3, #1
 80071b0:	4413      	add	r3, r2
 80071b2:	00db      	lsls	r3, r3, #3
 80071b4:	440b      	add	r3, r1
 80071b6:	3355      	adds	r3, #85	; 0x55
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	1c59      	adds	r1, r3, #1
 80071bc:	78fa      	ldrb	r2, [r7, #3]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	4613      	mov	r3, r2
 80071c2:	005b      	lsls	r3, r3, #1
 80071c4:	4413      	add	r3, r2
 80071c6:	00db      	lsls	r3, r3, #3
 80071c8:	4403      	add	r3, r0
 80071ca:	3356      	adds	r3, #86	; 0x56
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	3b01      	subs	r3, #1
 80071d0:	4a60      	ldr	r2, [pc, #384]	; (8007354 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x260>)
 80071d2:	5cd3      	ldrb	r3, [r2, r3]
 80071d4:	4299      	cmp	r1, r3
 80071d6:	da15      	bge.n	8007204 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x110>
			dryerPrograms[WichProgram].endTime.day += 1;
 80071d8:	78fa      	ldrb	r2, [r7, #3]
 80071da:	6879      	ldr	r1, [r7, #4]
 80071dc:	4613      	mov	r3, r2
 80071de:	005b      	lsls	r3, r3, #1
 80071e0:	4413      	add	r3, r2
 80071e2:	00db      	lsls	r3, r3, #3
 80071e4:	440b      	add	r3, r1
 80071e6:	3355      	adds	r3, #85	; 0x55
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	78fa      	ldrb	r2, [r7, #3]
 80071ec:	3301      	adds	r3, #1
 80071ee:	b2d8      	uxtb	r0, r3
 80071f0:	6879      	ldr	r1, [r7, #4]
 80071f2:	4613      	mov	r3, r2
 80071f4:	005b      	lsls	r3, r3, #1
 80071f6:	4413      	add	r3, r2
 80071f8:	00db      	lsls	r3, r3, #3
 80071fa:	440b      	add	r3, r1
 80071fc:	3355      	adds	r3, #85	; 0x55
 80071fe:	4602      	mov	r2, r0
 8007200:	701a      	strb	r2, [r3, #0]
//	dryerPrograms[WichProgram].programSetted = true;
//	if(eepromEnabled)
//	{
//		saveDryerProgram(WichProgram);
//	}
}
 8007202:	e09f      	b.n	8007344 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
			dryerPrograms[WichProgram].endTime.day = 1;
 8007204:	78fa      	ldrb	r2, [r7, #3]
 8007206:	6879      	ldr	r1, [r7, #4]
 8007208:	4613      	mov	r3, r2
 800720a:	005b      	lsls	r3, r3, #1
 800720c:	4413      	add	r3, r2
 800720e:	00db      	lsls	r3, r3, #3
 8007210:	440b      	add	r3, r1
 8007212:	3355      	adds	r3, #85	; 0x55
 8007214:	2201      	movs	r2, #1
 8007216:	701a      	strb	r2, [r3, #0]
			dryerPrograms[WichProgram].endTime.month += 1;
 8007218:	78fa      	ldrb	r2, [r7, #3]
 800721a:	6879      	ldr	r1, [r7, #4]
 800721c:	4613      	mov	r3, r2
 800721e:	005b      	lsls	r3, r3, #1
 8007220:	4413      	add	r3, r2
 8007222:	00db      	lsls	r3, r3, #3
 8007224:	440b      	add	r3, r1
 8007226:	3356      	adds	r3, #86	; 0x56
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	78fa      	ldrb	r2, [r7, #3]
 800722c:	3301      	adds	r3, #1
 800722e:	b2d8      	uxtb	r0, r3
 8007230:	6879      	ldr	r1, [r7, #4]
 8007232:	4613      	mov	r3, r2
 8007234:	005b      	lsls	r3, r3, #1
 8007236:	4413      	add	r3, r2
 8007238:	00db      	lsls	r3, r3, #3
 800723a:	440b      	add	r3, r1
 800723c:	3356      	adds	r3, #86	; 0x56
 800723e:	4602      	mov	r2, r0
 8007240:	701a      	strb	r2, [r3, #0]
}
 8007242:	e07f      	b.n	8007344 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
	else if(ProgramToSet.endTime.hour == ProgramToSet.startTime.hour)
 8007244:	7f3a      	ldrb	r2, [r7, #28]
 8007246:	7d3b      	ldrb	r3, [r7, #20]
 8007248:	429a      	cmp	r2, r3
 800724a:	d17b      	bne.n	8007344 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
		if(ProgramToSet.startTime.minute > ProgramToSet.endTime.minute)
 800724c:	7cfa      	ldrb	r2, [r7, #19]
 800724e:	7efb      	ldrb	r3, [r7, #27]
 8007250:	429a      	cmp	r2, r3
 8007252:	d977      	bls.n	8007344 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
			if(ProgramToSet.endTime.minute + (ProgramToSet.startTime.minute  - ProgramToSet.endTime.minute) < 50)
 8007254:	7cfb      	ldrb	r3, [r7, #19]
 8007256:	2b31      	cmp	r3, #49	; 0x31
 8007258:	d80b      	bhi.n	8007272 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x17e>
				dryerPrograms[WichProgram].endTime.minute = ProgramToSet.endTime.minute + (ProgramToSet.startTime.minute  - ProgramToSet.endTime.minute);
 800725a:	78fa      	ldrb	r2, [r7, #3]
 800725c:	7cf8      	ldrb	r0, [r7, #19]
 800725e:	6879      	ldr	r1, [r7, #4]
 8007260:	4613      	mov	r3, r2
 8007262:	005b      	lsls	r3, r3, #1
 8007264:	4413      	add	r3, r2
 8007266:	00db      	lsls	r3, r3, #3
 8007268:	440b      	add	r3, r1
 800726a:	3353      	adds	r3, #83	; 0x53
 800726c:	4602      	mov	r2, r0
 800726e:	701a      	strb	r2, [r3, #0]
}
 8007270:	e068      	b.n	8007344 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
				dryerPrograms[WichProgram].endTime.minute = ProgramToSet.endTime.minute;
 8007272:	78fa      	ldrb	r2, [r7, #3]
 8007274:	7ef8      	ldrb	r0, [r7, #27]
 8007276:	6879      	ldr	r1, [r7, #4]
 8007278:	4613      	mov	r3, r2
 800727a:	005b      	lsls	r3, r3, #1
 800727c:	4413      	add	r3, r2
 800727e:	00db      	lsls	r3, r3, #3
 8007280:	440b      	add	r3, r1
 8007282:	3353      	adds	r3, #83	; 0x53
 8007284:	4602      	mov	r2, r0
 8007286:	701a      	strb	r2, [r3, #0]
				dryerPrograms[WichProgram].endTime.hour = ProgramToSet.startTime.hour + 1;
 8007288:	7d3b      	ldrb	r3, [r7, #20]
 800728a:	78fa      	ldrb	r2, [r7, #3]
 800728c:	3301      	adds	r3, #1
 800728e:	b2d8      	uxtb	r0, r3
 8007290:	6879      	ldr	r1, [r7, #4]
 8007292:	4613      	mov	r3, r2
 8007294:	005b      	lsls	r3, r3, #1
 8007296:	4413      	add	r3, r2
 8007298:	00db      	lsls	r3, r3, #3
 800729a:	440b      	add	r3, r1
 800729c:	3354      	adds	r3, #84	; 0x54
 800729e:	4602      	mov	r2, r0
 80072a0:	701a      	strb	r2, [r3, #0]
				if(ProgramToSet.startTime.hour > ProgramToSet.endTime.hour)
 80072a2:	7d3a      	ldrb	r2, [r7, #20]
 80072a4:	7f3b      	ldrb	r3, [r7, #28]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d94c      	bls.n	8007344 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
					if(dryerPrograms[WichProgram].endTime.day + 1 < daysInMonth[dryerPrograms[WichProgram].endTime.month - 1])
 80072aa:	78fa      	ldrb	r2, [r7, #3]
 80072ac:	6879      	ldr	r1, [r7, #4]
 80072ae:	4613      	mov	r3, r2
 80072b0:	005b      	lsls	r3, r3, #1
 80072b2:	4413      	add	r3, r2
 80072b4:	00db      	lsls	r3, r3, #3
 80072b6:	440b      	add	r3, r1
 80072b8:	3355      	adds	r3, #85	; 0x55
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	1c59      	adds	r1, r3, #1
 80072be:	78fa      	ldrb	r2, [r7, #3]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	4613      	mov	r3, r2
 80072c4:	005b      	lsls	r3, r3, #1
 80072c6:	4413      	add	r3, r2
 80072c8:	00db      	lsls	r3, r3, #3
 80072ca:	4403      	add	r3, r0
 80072cc:	3356      	adds	r3, #86	; 0x56
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	3b01      	subs	r3, #1
 80072d2:	4a20      	ldr	r2, [pc, #128]	; (8007354 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x260>)
 80072d4:	5cd3      	ldrb	r3, [r2, r3]
 80072d6:	4299      	cmp	r1, r3
 80072d8:	da15      	bge.n	8007306 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x212>
						dryerPrograms[WichProgram].endTime.day += 1;
 80072da:	78fa      	ldrb	r2, [r7, #3]
 80072dc:	6879      	ldr	r1, [r7, #4]
 80072de:	4613      	mov	r3, r2
 80072e0:	005b      	lsls	r3, r3, #1
 80072e2:	4413      	add	r3, r2
 80072e4:	00db      	lsls	r3, r3, #3
 80072e6:	440b      	add	r3, r1
 80072e8:	3355      	adds	r3, #85	; 0x55
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	78fa      	ldrb	r2, [r7, #3]
 80072ee:	3301      	adds	r3, #1
 80072f0:	b2d8      	uxtb	r0, r3
 80072f2:	6879      	ldr	r1, [r7, #4]
 80072f4:	4613      	mov	r3, r2
 80072f6:	005b      	lsls	r3, r3, #1
 80072f8:	4413      	add	r3, r2
 80072fa:	00db      	lsls	r3, r3, #3
 80072fc:	440b      	add	r3, r1
 80072fe:	3355      	adds	r3, #85	; 0x55
 8007300:	4602      	mov	r2, r0
 8007302:	701a      	strb	r2, [r3, #0]
}
 8007304:	e01e      	b.n	8007344 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
						dryerPrograms[WichProgram].endTime.day = 1;
 8007306:	78fa      	ldrb	r2, [r7, #3]
 8007308:	6879      	ldr	r1, [r7, #4]
 800730a:	4613      	mov	r3, r2
 800730c:	005b      	lsls	r3, r3, #1
 800730e:	4413      	add	r3, r2
 8007310:	00db      	lsls	r3, r3, #3
 8007312:	440b      	add	r3, r1
 8007314:	3355      	adds	r3, #85	; 0x55
 8007316:	2201      	movs	r2, #1
 8007318:	701a      	strb	r2, [r3, #0]
						dryerPrograms[WichProgram].endTime.month += 1;
 800731a:	78fa      	ldrb	r2, [r7, #3]
 800731c:	6879      	ldr	r1, [r7, #4]
 800731e:	4613      	mov	r3, r2
 8007320:	005b      	lsls	r3, r3, #1
 8007322:	4413      	add	r3, r2
 8007324:	00db      	lsls	r3, r3, #3
 8007326:	440b      	add	r3, r1
 8007328:	3356      	adds	r3, #86	; 0x56
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	78fa      	ldrb	r2, [r7, #3]
 800732e:	3301      	adds	r3, #1
 8007330:	b2d8      	uxtb	r0, r3
 8007332:	6879      	ldr	r1, [r7, #4]
 8007334:	4613      	mov	r3, r2
 8007336:	005b      	lsls	r3, r3, #1
 8007338:	4413      	add	r3, r2
 800733a:	00db      	lsls	r3, r3, #3
 800733c:	440b      	add	r3, r1
 800733e:	3356      	adds	r3, #86	; 0x56
 8007340:	4602      	mov	r2, r0
 8007342:	701a      	strb	r2, [r3, #0]
}
 8007344:	bf00      	nop
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800734e:	b002      	add	sp, #8
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	080154a4 	.word	0x080154a4

08007358 <_ZN10SmartDryer22serialComunicationCtrlEv>:

void SmartDryer::serialComunicationCtrl()
{
 8007358:	b5b0      	push	{r4, r5, r7, lr}
 800735a:	b0a0      	sub	sp, #128	; 0x80
 800735c:	af04      	add	r7, sp, #16
 800735e:	6078      	str	r0, [r7, #4]
	int16_t Command = 0;
 8007360:	2300      	movs	r3, #0
 8007362:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	bool TempFound = false;
 8007366:	2300      	movs	r3, #0
 8007368:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	bool SetProgramTime = false;
 800736c:	2300      	movs	r3, #0
 800736e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	float OldTemp = 0.0;
 8007372:	f04f 0300 	mov.w	r3, #0
 8007376:	657b      	str	r3, [r7, #84]	; 0x54
	uint8_t WichProgram = 0;
 8007378:	2300      	movs	r3, #0
 800737a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	PROGRAM_STRUCURE ProgramToSet;
 800737e:	f107 030c 	add.w	r3, r7, #12
 8007382:	2200      	movs	r2, #0
 8007384:	601a      	str	r2, [r3, #0]
 8007386:	605a      	str	r2, [r3, #4]
 8007388:	609a      	str	r2, [r3, #8]
 800738a:	60da      	str	r2, [r3, #12]
 800738c:	611a      	str	r2, [r3, #16]
 800738e:	615a      	str	r2, [r3, #20]
	Command = externalCommand->receiveSerialCommand();
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007394:	4618      	mov	r0, r3
 8007396:	f7fe fcbb 	bl	8005d10 <_ZN13SerialMessage20receiveSerialCommandEv>
 800739a:	4603      	mov	r3, r0
 800739c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	if(Command != SerialMessage::NO_COMMANDS && Command != SerialMessage::INVALID_MESSAGE)
 80073a0:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80073a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a8:	f000 83c9 	beq.w	8007b3e <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e6>
 80073ac:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80073b0:	f113 0f02 	cmn.w	r3, #2
 80073b4:	f000 83c3 	beq.w	8007b3e <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e6>
	{
		statusParam->serialCommandReceived = true;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073bc:	2201      	movs	r2, #1
 80073be:	729a      	strb	r2, [r3, #10]
		switch(Command)
 80073c0:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80073c4:	3b0b      	subs	r3, #11
 80073c6:	2bc7      	cmp	r3, #199	; 0xc7
 80073c8:	f200 83af 	bhi.w	8007b2a <_ZN10SmartDryer22serialComunicationCtrlEv+0x7d2>
 80073cc:	a201      	add	r2, pc, #4	; (adr r2, 80073d4 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7c>)
 80073ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d2:	bf00      	nop
 80073d4:	080076f5 	.word	0x080076f5
 80073d8:	0800776b 	.word	0x0800776b
 80073dc:	0800779b 	.word	0x0800779b
 80073e0:	080077cb 	.word	0x080077cb
 80073e4:	080077fb 	.word	0x080077fb
 80073e8:	0800782b 	.word	0x0800782b
 80073ec:	0800789d 	.word	0x0800789d
 80073f0:	080078cd 	.word	0x080078cd
 80073f4:	080078fd 	.word	0x080078fd
 80073f8:	0800792d 	.word	0x0800792d
 80073fc:	0800795d 	.word	0x0800795d
 8007400:	080079cf 	.word	0x080079cf
 8007404:	080079ff 	.word	0x080079ff
 8007408:	08007a2f 	.word	0x08007a2f
 800740c:	08007a5f 	.word	0x08007a5f
 8007410:	08007a8f 	.word	0x08007a8f
 8007414:	08007b2b 	.word	0x08007b2b
 8007418:	08007b2b 	.word	0x08007b2b
 800741c:	08007b2b 	.word	0x08007b2b
 8007420:	08007b2b 	.word	0x08007b2b
 8007424:	08007b2b 	.word	0x08007b2b
 8007428:	08007b2b 	.word	0x08007b2b
 800742c:	08007b2b 	.word	0x08007b2b
 8007430:	08007b2b 	.word	0x08007b2b
 8007434:	08007b2b 	.word	0x08007b2b
 8007438:	08007b2b 	.word	0x08007b2b
 800743c:	08007b2b 	.word	0x08007b2b
 8007440:	08007b2b 	.word	0x08007b2b
 8007444:	08007b2b 	.word	0x08007b2b
 8007448:	08007b2b 	.word	0x08007b2b
 800744c:	08007b2b 	.word	0x08007b2b
 8007450:	08007b2b 	.word	0x08007b2b
 8007454:	08007b2b 	.word	0x08007b2b
 8007458:	08007b2b 	.word	0x08007b2b
 800745c:	08007b2b 	.word	0x08007b2b
 8007460:	08007b2b 	.word	0x08007b2b
 8007464:	08007b2b 	.word	0x08007b2b
 8007468:	08007b2b 	.word	0x08007b2b
 800746c:	08007b2b 	.word	0x08007b2b
 8007470:	08007b2b 	.word	0x08007b2b
 8007474:	08007b2b 	.word	0x08007b2b
 8007478:	08007b2b 	.word	0x08007b2b
 800747c:	08007b2b 	.word	0x08007b2b
 8007480:	08007b2b 	.word	0x08007b2b
 8007484:	08007b2b 	.word	0x08007b2b
 8007488:	08007b2b 	.word	0x08007b2b
 800748c:	08007b2b 	.word	0x08007b2b
 8007490:	08007b2b 	.word	0x08007b2b
 8007494:	08007b2b 	.word	0x08007b2b
 8007498:	08007b2b 	.word	0x08007b2b
 800749c:	08007b2b 	.word	0x08007b2b
 80074a0:	08007b2b 	.word	0x08007b2b
 80074a4:	08007b2b 	.word	0x08007b2b
 80074a8:	08007b2b 	.word	0x08007b2b
 80074ac:	08007b2b 	.word	0x08007b2b
 80074b0:	08007b2b 	.word	0x08007b2b
 80074b4:	08007b2b 	.word	0x08007b2b
 80074b8:	08007b2b 	.word	0x08007b2b
 80074bc:	08007b2b 	.word	0x08007b2b
 80074c0:	08007b2b 	.word	0x08007b2b
 80074c4:	08007b2b 	.word	0x08007b2b
 80074c8:	08007b2b 	.word	0x08007b2b
 80074cc:	08007b2b 	.word	0x08007b2b
 80074d0:	08007b2b 	.word	0x08007b2b
 80074d4:	08007b2b 	.word	0x08007b2b
 80074d8:	08007b2b 	.word	0x08007b2b
 80074dc:	08007b2b 	.word	0x08007b2b
 80074e0:	08007b2b 	.word	0x08007b2b
 80074e4:	08007b2b 	.word	0x08007b2b
 80074e8:	08007b2b 	.word	0x08007b2b
 80074ec:	08007b2b 	.word	0x08007b2b
 80074f0:	08007b2b 	.word	0x08007b2b
 80074f4:	08007b2b 	.word	0x08007b2b
 80074f8:	08007b2b 	.word	0x08007b2b
 80074fc:	08007b2b 	.word	0x08007b2b
 8007500:	08007b2b 	.word	0x08007b2b
 8007504:	08007b2b 	.word	0x08007b2b
 8007508:	08007b2b 	.word	0x08007b2b
 800750c:	08007b2b 	.word	0x08007b2b
 8007510:	08007b2b 	.word	0x08007b2b
 8007514:	08007b2b 	.word	0x08007b2b
 8007518:	08007b2b 	.word	0x08007b2b
 800751c:	08007b2b 	.word	0x08007b2b
 8007520:	08007b2b 	.word	0x08007b2b
 8007524:	08007b2b 	.word	0x08007b2b
 8007528:	08007b2b 	.word	0x08007b2b
 800752c:	08007b2b 	.word	0x08007b2b
 8007530:	08007b2b 	.word	0x08007b2b
 8007534:	08007b2b 	.word	0x08007b2b
 8007538:	08007b2b 	.word	0x08007b2b
 800753c:	08007b2b 	.word	0x08007b2b
 8007540:	08007b2b 	.word	0x08007b2b
 8007544:	08007b2b 	.word	0x08007b2b
 8007548:	08007b2b 	.word	0x08007b2b
 800754c:	08007b2b 	.word	0x08007b2b
 8007550:	08007b2b 	.word	0x08007b2b
 8007554:	08007b2b 	.word	0x08007b2b
 8007558:	08007b2b 	.word	0x08007b2b
 800755c:	08007b2b 	.word	0x08007b2b
 8007560:	08007b2b 	.word	0x08007b2b
 8007564:	08007b2b 	.word	0x08007b2b
 8007568:	08007b2b 	.word	0x08007b2b
 800756c:	08007b2b 	.word	0x08007b2b
 8007570:	08007b2b 	.word	0x08007b2b
 8007574:	08007b2b 	.word	0x08007b2b
 8007578:	08007b2b 	.word	0x08007b2b
 800757c:	08007b2b 	.word	0x08007b2b
 8007580:	08007b2b 	.word	0x08007b2b
 8007584:	08007b2b 	.word	0x08007b2b
 8007588:	08007b2b 	.word	0x08007b2b
 800758c:	08007b2b 	.word	0x08007b2b
 8007590:	08007b2b 	.word	0x08007b2b
 8007594:	08007b2b 	.word	0x08007b2b
 8007598:	08007b2b 	.word	0x08007b2b
 800759c:	08007b2b 	.word	0x08007b2b
 80075a0:	08007b2b 	.word	0x08007b2b
 80075a4:	08007b2b 	.word	0x08007b2b
 80075a8:	08007b2b 	.word	0x08007b2b
 80075ac:	08007b2b 	.word	0x08007b2b
 80075b0:	08007b2b 	.word	0x08007b2b
 80075b4:	08007b2b 	.word	0x08007b2b
 80075b8:	08007b2b 	.word	0x08007b2b
 80075bc:	08007b2b 	.word	0x08007b2b
 80075c0:	08007b2b 	.word	0x08007b2b
 80075c4:	08007b2b 	.word	0x08007b2b
 80075c8:	08007b2b 	.word	0x08007b2b
 80075cc:	08007b2b 	.word	0x08007b2b
 80075d0:	08007b2b 	.word	0x08007b2b
 80075d4:	08007b2b 	.word	0x08007b2b
 80075d8:	08007b2b 	.word	0x08007b2b
 80075dc:	08007b2b 	.word	0x08007b2b
 80075e0:	08007b2b 	.word	0x08007b2b
 80075e4:	08007b2b 	.word	0x08007b2b
 80075e8:	08007b2b 	.word	0x08007b2b
 80075ec:	08007b2b 	.word	0x08007b2b
 80075f0:	08007b2b 	.word	0x08007b2b
 80075f4:	08007b2b 	.word	0x08007b2b
 80075f8:	08007b2b 	.word	0x08007b2b
 80075fc:	08007b2b 	.word	0x08007b2b
 8007600:	08007b2b 	.word	0x08007b2b
 8007604:	08007b2b 	.word	0x08007b2b
 8007608:	08007b2b 	.word	0x08007b2b
 800760c:	08007b2b 	.word	0x08007b2b
 8007610:	08007b2b 	.word	0x08007b2b
 8007614:	08007b2b 	.word	0x08007b2b
 8007618:	08007b2b 	.word	0x08007b2b
 800761c:	08007b2b 	.word	0x08007b2b
 8007620:	08007b2b 	.word	0x08007b2b
 8007624:	08007b2b 	.word	0x08007b2b
 8007628:	08007b2b 	.word	0x08007b2b
 800762c:	08007b2b 	.word	0x08007b2b
 8007630:	08007b2b 	.word	0x08007b2b
 8007634:	08007b2b 	.word	0x08007b2b
 8007638:	08007b2b 	.word	0x08007b2b
 800763c:	08007b2b 	.word	0x08007b2b
 8007640:	08007b2b 	.word	0x08007b2b
 8007644:	08007b2b 	.word	0x08007b2b
 8007648:	08007b2b 	.word	0x08007b2b
 800764c:	08007b2b 	.word	0x08007b2b
 8007650:	08007b2b 	.word	0x08007b2b
 8007654:	08007b2b 	.word	0x08007b2b
 8007658:	08007b2b 	.word	0x08007b2b
 800765c:	08007b2b 	.word	0x08007b2b
 8007660:	08007b2b 	.word	0x08007b2b
 8007664:	08007b2b 	.word	0x08007b2b
 8007668:	08007b2b 	.word	0x08007b2b
 800766c:	08007b2b 	.word	0x08007b2b
 8007670:	08007b2b 	.word	0x08007b2b
 8007674:	08007b2b 	.word	0x08007b2b
 8007678:	08007b2b 	.word	0x08007b2b
 800767c:	08007b2b 	.word	0x08007b2b
 8007680:	08007b2b 	.word	0x08007b2b
 8007684:	08007b2b 	.word	0x08007b2b
 8007688:	08007b2b 	.word	0x08007b2b
 800768c:	08007b2b 	.word	0x08007b2b
 8007690:	08007b2b 	.word	0x08007b2b
 8007694:	08007b2b 	.word	0x08007b2b
 8007698:	08007b2b 	.word	0x08007b2b
 800769c:	08007b2b 	.word	0x08007b2b
 80076a0:	08007b2b 	.word	0x08007b2b
 80076a4:	08007b2b 	.word	0x08007b2b
 80076a8:	08007b2b 	.word	0x08007b2b
 80076ac:	08007b2b 	.word	0x08007b2b
 80076b0:	08007b2b 	.word	0x08007b2b
 80076b4:	08007b2b 	.word	0x08007b2b
 80076b8:	08007b2b 	.word	0x08007b2b
 80076bc:	08007b2b 	.word	0x08007b2b
 80076c0:	08007b2b 	.word	0x08007b2b
 80076c4:	08007b2b 	.word	0x08007b2b
 80076c8:	08007b2b 	.word	0x08007b2b
 80076cc:	08007b03 	.word	0x08007b03
 80076d0:	08007b0d 	.word	0x08007b0d
 80076d4:	08007b17 	.word	0x08007b17
 80076d8:	08007b21 	.word	0x08007b21
 80076dc:	08007b2b 	.word	0x08007b2b
 80076e0:	08007b2b 	.word	0x08007b2b
 80076e4:	08007b2b 	.word	0x08007b2b
 80076e8:	08007b2b 	.word	0x08007b2b
 80076ec:	08007b2b 	.word	0x08007b2b
 80076f0:	08007b2b 	.word	0x08007b2b
		{
			case SerialMessage::SET_TEMP:
				OldTemp = statusParam->temperatureSetted;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	657b      	str	r3, [r7, #84]	; 0x54
				statusParam->temperatureSetted = externalCommand->getValueSetted();
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007700:	4618      	mov	r0, r3
 8007702:	f7fe fbeb 	bl	8005edc <_ZN13SerialMessage14getValueSettedEv>
 8007706:	4602      	mov	r2, r0
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800770c:	4610      	mov	r0, r2
 800770e:	f7f9 f9fb 	bl	8000b08 <__aeabi_ui2f>
 8007712:	4603      	mov	r3, r0
 8007714:	6063      	str	r3, [r4, #4]
				for(int i = 0; i < NTemps; i++)
 8007716:	2300      	movs	r3, #0
 8007718:	66bb      	str	r3, [r7, #104]	; 0x68
 800771a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800771c:	2b0c      	cmp	r3, #12
 800771e:	dc17      	bgt.n	8007750 <_ZN10SmartDryer22serialComunicationCtrlEv+0x3f8>
				{
					if((uint8_t)statusParam->temperatureSetted == paramTemperatures[i])
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	4618      	mov	r0, r3
 8007728:	f7f9 fb96 	bl	8000e58 <__aeabi_f2uiz>
 800772c:	4603      	mov	r3, r0
 800772e:	b2da      	uxtb	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8007736:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007738:	440b      	add	r3, r1
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	429a      	cmp	r2, r3
 800773e:	d103      	bne.n	8007748 <_ZN10SmartDryer22serialComunicationCtrlEv+0x3f0>
					{
						TempFound = true;
 8007740:	2301      	movs	r3, #1
 8007742:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
 8007746:	e003      	b.n	8007750 <_ZN10SmartDryer22serialComunicationCtrlEv+0x3f8>
				for(int i = 0; i < NTemps; i++)
 8007748:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800774a:	3301      	adds	r3, #1
 800774c:	66bb      	str	r3, [r7, #104]	; 0x68
 800774e:	e7e4      	b.n	800771a <_ZN10SmartDryer22serialComunicationCtrlEv+0x3c2>
					}
				}
				if(!TempFound)
 8007750:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007754:	f083 0301 	eor.w	r3, r3, #1
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b00      	cmp	r3, #0
 800775c:	f000 81e7 	beq.w	8007b2e <_ZN10SmartDryer22serialComunicationCtrlEv+0x7d6>
				{
					statusParam->temperatureSetted = OldTemp;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007764:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007766:	605a      	str	r2, [r3, #4]
				}
				break;
 8007768:	e1e1      	b.n	8007b2e <_ZN10SmartDryer22serialComunicationCtrlEv+0x7d6>
			case SerialMessage::SET_START_MINUTE_PROG_1:
				clock->getTimeDate(ProgramToSet.startTime);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	685a      	ldr	r2, [r3, #4]
 800776e:	f107 030c 	add.w	r3, r7, #12
 8007772:	3302      	adds	r3, #2
 8007774:	4619      	mov	r1, r3
 8007776:	4610      	mov	r0, r2
 8007778:	f7fb ffdc 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.minute = externalCommand->getValueSetted();
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007780:	4618      	mov	r0, r3
 8007782:	f7fe fbab 	bl	8005edc <_ZN13SerialMessage14getValueSettedEv>
 8007786:	4603      	mov	r3, r0
 8007788:	b2db      	uxtb	r3, r3
 800778a:	73fb      	strb	r3, [r7, #15]
				WichProgram = DRYER_PROGRAM_1;
 800778c:	2300      	movs	r3, #0
 800778e:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007792:	2301      	movs	r3, #1
 8007794:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007798:	e1d0      	b.n	8007b3c <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_START_HOUR_PROG_1:
				clock->getTimeDate(ProgramToSet.startTime);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	685a      	ldr	r2, [r3, #4]
 800779e:	f107 030c 	add.w	r3, r7, #12
 80077a2:	3302      	adds	r3, #2
 80077a4:	4619      	mov	r1, r3
 80077a6:	4610      	mov	r0, r2
 80077a8:	f7fb ffc4 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.hour = externalCommand->getValueSetted();
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7fe fb93 	bl	8005edc <_ZN13SerialMessage14getValueSettedEv>
 80077b6:	4603      	mov	r3, r0
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	743b      	strb	r3, [r7, #16]
				WichProgram = DRYER_PROGRAM_1;
 80077bc:	2300      	movs	r3, #0
 80077be:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 80077c2:	2301      	movs	r3, #1
 80077c4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 80077c8:	e1b8      	b.n	8007b3c <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_MINUTE_PROG_1:
				clock->getTimeDate(ProgramToSet.endTime);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	685a      	ldr	r2, [r3, #4]
 80077ce:	f107 030c 	add.w	r3, r7, #12
 80077d2:	330a      	adds	r3, #10
 80077d4:	4619      	mov	r1, r3
 80077d6:	4610      	mov	r0, r2
 80077d8:	f7fb ffac 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.minute = externalCommand->getValueSetted();
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7fe fb7b 	bl	8005edc <_ZN13SerialMessage14getValueSettedEv>
 80077e6:	4603      	mov	r3, r0
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	75fb      	strb	r3, [r7, #23]
				WichProgram = DRYER_PROGRAM_1;
 80077ec:	2300      	movs	r3, #0
 80077ee:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 80077f2:	2301      	movs	r3, #1
 80077f4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 80077f8:	e1a0      	b.n	8007b3c <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_HOUR_PROG_1:
				clock->getTimeDate(ProgramToSet.endTime);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	685a      	ldr	r2, [r3, #4]
 80077fe:	f107 030c 	add.w	r3, r7, #12
 8007802:	330a      	adds	r3, #10
 8007804:	4619      	mov	r1, r3
 8007806:	4610      	mov	r0, r2
 8007808:	f7fb ff94 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.hour = externalCommand->getValueSetted();
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007810:	4618      	mov	r0, r3
 8007812:	f7fe fb63 	bl	8005edc <_ZN13SerialMessage14getValueSettedEv>
 8007816:	4603      	mov	r3, r0
 8007818:	b2db      	uxtb	r3, r3
 800781a:	763b      	strb	r3, [r7, #24]
				WichProgram = DRYER_PROGRAM_1;
 800781c:	2300      	movs	r3, #0
 800781e:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007822:	2301      	movs	r3, #1
 8007824:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007828:	e188      	b.n	8007b3c <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_TEMP_PROG_1:
				OldTemp = dryerPrograms[DRYER_PROGRAM_1].tempSetted;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800782e:	657b      	str	r3, [r7, #84]	; 0x54
				statusParam->temperatureSetted = externalCommand->getValueSetted();
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007834:	4618      	mov	r0, r3
 8007836:	f7fe fb51 	bl	8005edc <_ZN13SerialMessage14getValueSettedEv>
 800783a:	4602      	mov	r2, r0
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8007840:	4610      	mov	r0, r2
 8007842:	f7f9 f961 	bl	8000b08 <__aeabi_ui2f>
 8007846:	4603      	mov	r3, r0
 8007848:	6063      	str	r3, [r4, #4]
				for(int i = 0; i < NTemps; i++)
 800784a:	2300      	movs	r3, #0
 800784c:	667b      	str	r3, [r7, #100]	; 0x64
 800784e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007850:	2b0c      	cmp	r3, #12
 8007852:	dc17      	bgt.n	8007884 <_ZN10SmartDryer22serialComunicationCtrlEv+0x52c>
				{
					if((uint8_t)statusParam->temperatureSetted == paramTemperatures[i])
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	4618      	mov	r0, r3
 800785c:	f7f9 fafc 	bl	8000e58 <__aeabi_f2uiz>
 8007860:	4603      	mov	r3, r0
 8007862:	b2da      	uxtb	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 800786a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800786c:	440b      	add	r3, r1
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	429a      	cmp	r2, r3
 8007872:	d103      	bne.n	800787c <_ZN10SmartDryer22serialComunicationCtrlEv+0x524>
					{
						TempFound = true;
 8007874:	2301      	movs	r3, #1
 8007876:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
 800787a:	e003      	b.n	8007884 <_ZN10SmartDryer22serialComunicationCtrlEv+0x52c>
				for(int i = 0; i < NTemps; i++)
 800787c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800787e:	3301      	adds	r3, #1
 8007880:	667b      	str	r3, [r7, #100]	; 0x64
 8007882:	e7e4      	b.n	800784e <_ZN10SmartDryer22serialComunicationCtrlEv+0x4f6>
					}
				}
				if(!TempFound)
 8007884:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007888:	f083 0301 	eor.w	r3, r3, #1
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b00      	cmp	r3, #0
 8007890:	f000 814f 	beq.w	8007b32 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7da>
				{
					dryerPrograms[DRYER_PROGRAM_1].tempSetted = OldTemp;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007898:	65da      	str	r2, [r3, #92]	; 0x5c
				}
				break;
 800789a:	e14a      	b.n	8007b32 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7da>
			case SerialMessage::SET_START_MINUTE_PROG_2:
				clock->getTimeDate(ProgramToSet.startTime);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	685a      	ldr	r2, [r3, #4]
 80078a0:	f107 030c 	add.w	r3, r7, #12
 80078a4:	3302      	adds	r3, #2
 80078a6:	4619      	mov	r1, r3
 80078a8:	4610      	mov	r0, r2
 80078aa:	f7fb ff43 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.minute = externalCommand->getValueSetted();
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fe fb12 	bl	8005edc <_ZN13SerialMessage14getValueSettedEv>
 80078b8:	4603      	mov	r3, r0
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	73fb      	strb	r3, [r7, #15]
				WichProgram = DRYER_PROGRAM_2;
 80078be:	2301      	movs	r3, #1
 80078c0:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 80078c4:	2301      	movs	r3, #1
 80078c6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 80078ca:	e137      	b.n	8007b3c <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_START_HOUR_PROG_2:
				clock->getTimeDate(ProgramToSet.startTime);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	685a      	ldr	r2, [r3, #4]
 80078d0:	f107 030c 	add.w	r3, r7, #12
 80078d4:	3302      	adds	r3, #2
 80078d6:	4619      	mov	r1, r3
 80078d8:	4610      	mov	r0, r2
 80078da:	f7fb ff2b 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.hour = externalCommand->getValueSetted();
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7fe fafa 	bl	8005edc <_ZN13SerialMessage14getValueSettedEv>
 80078e8:	4603      	mov	r3, r0
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	743b      	strb	r3, [r7, #16]
				WichProgram = DRYER_PROGRAM_2;
 80078ee:	2301      	movs	r3, #1
 80078f0:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 80078f4:	2301      	movs	r3, #1
 80078f6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 80078fa:	e11f      	b.n	8007b3c <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_MINUTE_PROG_2:
				clock->getTimeDate(ProgramToSet.endTime);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685a      	ldr	r2, [r3, #4]
 8007900:	f107 030c 	add.w	r3, r7, #12
 8007904:	330a      	adds	r3, #10
 8007906:	4619      	mov	r1, r3
 8007908:	4610      	mov	r0, r2
 800790a:	f7fb ff13 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.minute = externalCommand->getValueSetted();
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007912:	4618      	mov	r0, r3
 8007914:	f7fe fae2 	bl	8005edc <_ZN13SerialMessage14getValueSettedEv>
 8007918:	4603      	mov	r3, r0
 800791a:	b2db      	uxtb	r3, r3
 800791c:	75fb      	strb	r3, [r7, #23]
				WichProgram = DRYER_PROGRAM_2;
 800791e:	2301      	movs	r3, #1
 8007920:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007924:	2301      	movs	r3, #1
 8007926:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 800792a:	e107      	b.n	8007b3c <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_HOUR_PROG_2:
				clock->getTimeDate(ProgramToSet.endTime);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	685a      	ldr	r2, [r3, #4]
 8007930:	f107 030c 	add.w	r3, r7, #12
 8007934:	330a      	adds	r3, #10
 8007936:	4619      	mov	r1, r3
 8007938:	4610      	mov	r0, r2
 800793a:	f7fb fefb 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.hour = externalCommand->getValueSetted();
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007942:	4618      	mov	r0, r3
 8007944:	f7fe faca 	bl	8005edc <_ZN13SerialMessage14getValueSettedEv>
 8007948:	4603      	mov	r3, r0
 800794a:	b2db      	uxtb	r3, r3
 800794c:	763b      	strb	r3, [r7, #24]
				WichProgram = DRYER_PROGRAM_2;
 800794e:	2301      	movs	r3, #1
 8007950:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007954:	2301      	movs	r3, #1
 8007956:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 800795a:	e0ef      	b.n	8007b3c <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_TEMP_PROG_2:
				OldTemp = dryerPrograms[DRYER_PROGRAM_2].tempSetted;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007960:	657b      	str	r3, [r7, #84]	; 0x54
				statusParam->temperatureSetted = externalCommand->getValueSetted();
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007966:	4618      	mov	r0, r3
 8007968:	f7fe fab8 	bl	8005edc <_ZN13SerialMessage14getValueSettedEv>
 800796c:	4602      	mov	r2, r0
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8007972:	4610      	mov	r0, r2
 8007974:	f7f9 f8c8 	bl	8000b08 <__aeabi_ui2f>
 8007978:	4603      	mov	r3, r0
 800797a:	6063      	str	r3, [r4, #4]
				for(int i = 0; i < NTemps; i++)
 800797c:	2300      	movs	r3, #0
 800797e:	663b      	str	r3, [r7, #96]	; 0x60
 8007980:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007982:	2b0c      	cmp	r3, #12
 8007984:	dc17      	bgt.n	80079b6 <_ZN10SmartDryer22serialComunicationCtrlEv+0x65e>
				{
					if((uint8_t)statusParam->temperatureSetted == paramTemperatures[i])
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	4618      	mov	r0, r3
 800798e:	f7f9 fa63 	bl	8000e58 <__aeabi_f2uiz>
 8007992:	4603      	mov	r3, r0
 8007994:	b2da      	uxtb	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 800799c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800799e:	440b      	add	r3, r1
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d103      	bne.n	80079ae <_ZN10SmartDryer22serialComunicationCtrlEv+0x656>
					{
						TempFound = true;
 80079a6:	2301      	movs	r3, #1
 80079a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
 80079ac:	e003      	b.n	80079b6 <_ZN10SmartDryer22serialComunicationCtrlEv+0x65e>
				for(int i = 0; i < NTemps; i++)
 80079ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079b0:	3301      	adds	r3, #1
 80079b2:	663b      	str	r3, [r7, #96]	; 0x60
 80079b4:	e7e4      	b.n	8007980 <_ZN10SmartDryer22serialComunicationCtrlEv+0x628>
					}
				}
				if(!TempFound)
 80079b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80079ba:	f083 0301 	eor.w	r3, r3, #1
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f000 80b8 	beq.w	8007b36 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7de>
				{
					dryerPrograms[DRYER_PROGRAM_2].tempSetted = OldTemp;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80079ca:	675a      	str	r2, [r3, #116]	; 0x74
				}
				break;
 80079cc:	e0b3      	b.n	8007b36 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7de>
			case SerialMessage::SET_START_MINUTE_PROG_3:
				clock->getTimeDate(ProgramToSet.startTime);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	685a      	ldr	r2, [r3, #4]
 80079d2:	f107 030c 	add.w	r3, r7, #12
 80079d6:	3302      	adds	r3, #2
 80079d8:	4619      	mov	r1, r3
 80079da:	4610      	mov	r0, r2
 80079dc:	f7fb feaa 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.minute = externalCommand->getValueSetted();
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7fe fa79 	bl	8005edc <_ZN13SerialMessage14getValueSettedEv>
 80079ea:	4603      	mov	r3, r0
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	73fb      	strb	r3, [r7, #15]
				WichProgram = DRYER_PROGRAM_3;
 80079f0:	2302      	movs	r3, #2
 80079f2:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 80079f6:	2301      	movs	r3, #1
 80079f8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 80079fc:	e09e      	b.n	8007b3c <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_START_HOUR_PROG_3:
				clock->getTimeDate(ProgramToSet.startTime);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	685a      	ldr	r2, [r3, #4]
 8007a02:	f107 030c 	add.w	r3, r7, #12
 8007a06:	3302      	adds	r3, #2
 8007a08:	4619      	mov	r1, r3
 8007a0a:	4610      	mov	r0, r2
 8007a0c:	f7fb fe92 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.hour = externalCommand->getValueSetted();
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7fe fa61 	bl	8005edc <_ZN13SerialMessage14getValueSettedEv>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	743b      	strb	r3, [r7, #16]
				WichProgram = DRYER_PROGRAM_3;
 8007a20:	2302      	movs	r3, #2
 8007a22:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007a26:	2301      	movs	r3, #1
 8007a28:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007a2c:	e086      	b.n	8007b3c <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_MINUTE_PROG_3:
				clock->getTimeDate(ProgramToSet.endTime);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	685a      	ldr	r2, [r3, #4]
 8007a32:	f107 030c 	add.w	r3, r7, #12
 8007a36:	330a      	adds	r3, #10
 8007a38:	4619      	mov	r1, r3
 8007a3a:	4610      	mov	r0, r2
 8007a3c:	f7fb fe7a 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.minute = externalCommand->getValueSetted();
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7fe fa49 	bl	8005edc <_ZN13SerialMessage14getValueSettedEv>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	75fb      	strb	r3, [r7, #23]
				WichProgram = DRYER_PROGRAM_3;
 8007a50:	2302      	movs	r3, #2
 8007a52:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007a56:	2301      	movs	r3, #1
 8007a58:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007a5c:	e06e      	b.n	8007b3c <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_HOUR_PROG_3:
				clock->getTimeDate(ProgramToSet.endTime);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	685a      	ldr	r2, [r3, #4]
 8007a62:	f107 030c 	add.w	r3, r7, #12
 8007a66:	330a      	adds	r3, #10
 8007a68:	4619      	mov	r1, r3
 8007a6a:	4610      	mov	r0, r2
 8007a6c:	f7fb fe62 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.hour = externalCommand->getValueSetted();
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7fe fa31 	bl	8005edc <_ZN13SerialMessage14getValueSettedEv>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	763b      	strb	r3, [r7, #24]
				WichProgram = DRYER_PROGRAM_3;
 8007a80:	2302      	movs	r3, #2
 8007a82:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007a86:	2301      	movs	r3, #1
 8007a88:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007a8c:	e056      	b.n	8007b3c <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_TEMP_PROG_3:
				OldTemp = dryerPrograms[DRYER_PROGRAM_3].tempSetted;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a94:	657b      	str	r3, [r7, #84]	; 0x54
				statusParam->temperatureSetted = externalCommand->getValueSetted();
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7fe fa1e 	bl	8005edc <_ZN13SerialMessage14getValueSettedEv>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8007aa6:	4610      	mov	r0, r2
 8007aa8:	f7f9 f82e 	bl	8000b08 <__aeabi_ui2f>
 8007aac:	4603      	mov	r3, r0
 8007aae:	6063      	str	r3, [r4, #4]
				for(int i = 0; i < NTemps; i++)
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ab6:	2b0c      	cmp	r3, #12
 8007ab8:	dc17      	bgt.n	8007aea <_ZN10SmartDryer22serialComunicationCtrlEv+0x792>
				{
					if((uint8_t)statusParam->temperatureSetted == paramTemperatures[i])
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f7f9 f9c9 	bl	8000e58 <__aeabi_f2uiz>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	b2da      	uxtb	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8007ad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ad2:	440b      	add	r3, r1
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d103      	bne.n	8007ae2 <_ZN10SmartDryer22serialComunicationCtrlEv+0x78a>
					{
						TempFound = true;
 8007ada:	2301      	movs	r3, #1
 8007adc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
 8007ae0:	e003      	b.n	8007aea <_ZN10SmartDryer22serialComunicationCtrlEv+0x792>
				for(int i = 0; i < NTemps; i++)
 8007ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ae8:	e7e4      	b.n	8007ab4 <_ZN10SmartDryer22serialComunicationCtrlEv+0x75c>
					}
				}
				if(!TempFound)
 8007aea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007aee:	f083 0301 	eor.w	r3, r3, #1
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d020      	beq.n	8007b3a <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e2>
				{
					dryerPrograms[DRYER_PROGRAM_3].tempSetted = OldTemp;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007afc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				}
				break;
 8007b00:	e01b      	b.n	8007b3a <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e2>


			case SerialMessage::DRYER_ON:
				statusParam->dryerOn = true;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b06:	2201      	movs	r2, #1
 8007b08:	701a      	strb	r2, [r3, #0]
				break;
 8007b0a:	e017      	b.n	8007b3c <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::DRYER_OFF:
				statusParam->dryerOn = false;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b10:	2200      	movs	r2, #0
 8007b12:	701a      	strb	r2, [r3, #0]
				break;
 8007b14:	e012      	b.n	8007b3c <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::FAN_ON:
				statusParam->fanOn = true;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	709a      	strb	r2, [r3, #2]
				break;
 8007b1e:	e00d      	b.n	8007b3c <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::FAN_OFF:
				statusParam->fanOn = false;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b24:	2200      	movs	r2, #0
 8007b26:	709a      	strb	r2, [r3, #2]
				break;
 8007b28:	e008      	b.n	8007b3c <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
				break;
			case SerialMessage::STOP_PROG_3:
				break;

			default:
				break;
 8007b2a:	bf00      	nop
 8007b2c:	e038      	b.n	8007ba0 <_ZN10SmartDryer22serialComunicationCtrlEv+0x848>
				break;
 8007b2e:	bf00      	nop
 8007b30:	e036      	b.n	8007ba0 <_ZN10SmartDryer22serialComunicationCtrlEv+0x848>
				break;
 8007b32:	bf00      	nop
 8007b34:	e034      	b.n	8007ba0 <_ZN10SmartDryer22serialComunicationCtrlEv+0x848>
				break;
 8007b36:	bf00      	nop
 8007b38:	e032      	b.n	8007ba0 <_ZN10SmartDryer22serialComunicationCtrlEv+0x848>
				break;
 8007b3a:	bf00      	nop
		}
 8007b3c:	e030      	b.n	8007ba0 <_ZN10SmartDryer22serialComunicationCtrlEv+0x848>
	}
	else if(Command == SerialMessage::INVALID_MESSAGE)
 8007b3e:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8007b42:	f113 0f02 	cmn.w	r3, #2
 8007b46:	d127      	bne.n	8007b98 <_ZN10SmartDryer22serialComunicationCtrlEv+0x840>
	{
		externalCommand->sendMessage("Comando invalido, ricevuto: " + externalCommand->getCommandReceived());
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b50:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007b54:	4611      	mov	r1, r2
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fe f9d2 	bl	8005f00 <_ZN13SerialMessage18getCommandReceivedB5cxx11Ev>
 8007b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b60:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007b64:	4925      	ldr	r1, [pc, #148]	; (8007bfc <_ZN10SmartDryer22serialComunicationCtrlEv+0x8a4>)
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7fc f9e0 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8007b6c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8007b70:	2300      	movs	r3, #0
 8007b72:	2201      	movs	r2, #1
 8007b74:	4620      	mov	r0, r4
 8007b76:	f7fd fdf5 	bl	8005764 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm>
 8007b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f009 fb15 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007b84:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f009 fb10 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		statusParam->serialCommandReceived = true;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b92:	2201      	movs	r2, #1
 8007b94:	729a      	strb	r2, [r3, #10]
 8007b96:	e003      	b.n	8007ba0 <_ZN10SmartDryer22serialComunicationCtrlEv+0x848>
	}
	else
	{
		statusParam->serialCommandReceived = false;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	729a      	strb	r2, [r3, #10]
	}
	if(SetProgramTime)
 8007ba0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d024      	beq.n	8007bf2 <_ZN10SmartDryer22serialComunicationCtrlEv+0x89a>
	{
		checkSettedProgramTime(WichProgram, ProgramToSet);
 8007ba8:	f897 506d 	ldrb.w	r5, [r7, #109]	; 0x6d
 8007bac:	466c      	mov	r4, sp
 8007bae:	f107 0314 	add.w	r3, r7, #20
 8007bb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007bb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007bb8:	f107 030c 	add.w	r3, r7, #12
 8007bbc:	cb0c      	ldmia	r3, {r2, r3}
 8007bbe:	4629      	mov	r1, r5
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f7ff fa97 	bl	80070f4 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE>
		dryerPrograms[WichProgram].programSetted = true;
 8007bc6:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 8007bca:	6879      	ldr	r1, [r7, #4]
 8007bcc:	4613      	mov	r3, r2
 8007bce:	005b      	lsls	r3, r3, #1
 8007bd0:	4413      	add	r3, r2
 8007bd2:	00db      	lsls	r3, r3, #3
 8007bd4:	440b      	add	r3, r1
 8007bd6:	3348      	adds	r3, #72	; 0x48
 8007bd8:	2201      	movs	r2, #1
 8007bda:	701a      	strb	r2, [r3, #0]
		if(eepromEnabled)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d005      	beq.n	8007bf2 <_ZN10SmartDryer22serialComunicationCtrlEv+0x89a>
		{
			saveDryerProgram(WichProgram);
 8007be6:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8007bea:	4619      	mov	r1, r3
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f7fe ffbd 	bl	8006b6c <_ZN10SmartDryer16saveDryerProgramEh>
		}
	}
}
 8007bf2:	bf00      	nop
 8007bf4:	3770      	adds	r7, #112	; 0x70
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bdb0      	pop	{r4, r5, r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	08012404 	.word	0x08012404

08007c00 <_ZN10SmartDryer7navMenuEv>:



void SmartDryer::navMenu()
{
 8007c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c04:	b0a6      	sub	sp, #152	; 0x98
 8007c06:	af08      	add	r7, sp, #32
 8007c08:	6078      	str	r0, [r7, #4]
	bool ExitNavMenu = false;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	MENU_STRUCTURE *ActualMenu = mainMenu;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007c16:	673b      	str	r3, [r7, #112]	; 0x70
	uint8_t MenuSel = MAIN_MENU;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	showHelpMessageTimer->restart();
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7fb fbb7 	bl	8003396 <_ZN11ChronoTimer7restartEv>
	String Time = "", Date = "";
 8007c28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f009 f98d 	bl	8010f4c <_ZNSaIcEC1Ev>
 8007c32:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007c36:	f107 0320 	add.w	r3, r7, #32
 8007c3a:	49be      	ldr	r1, [pc, #760]	; (8007f34 <_ZN10SmartDryer7navMenuEv+0x334>)
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f009 fc4d 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007c42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007c46:	4618      	mov	r0, r3
 8007c48:	f009 f981 	bl	8010f4e <_ZNSaIcED1Ev>
 8007c4c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007c50:	4618      	mov	r0, r3
 8007c52:	f009 f97b 	bl	8010f4c <_ZNSaIcEC1Ev>
 8007c56:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007c5a:	f107 0308 	add.w	r3, r7, #8
 8007c5e:	49b5      	ldr	r1, [pc, #724]	; (8007f34 <_ZN10SmartDryer7navMenuEv+0x334>)
 8007c60:	4618      	mov	r0, r3
 8007c62:	f009 fc3b 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007c66:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f009 f96f 	bl	8010f4e <_ZNSaIcED1Ev>

	while(!ExitNavMenu)
 8007c70:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f040 82b5 	bne.w	80081e4 <_ZN10SmartDryer7navMenuEv+0x5e4>
	{
		uint8_t WichKey = DryerKey::NO_KEY;
 8007c7a:	2308      	movs	r3, #8
 8007c7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		display->clearFrameBuffer();
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7fc fdf6 	bl	8004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 8007c8a:	f107 0208 	add.w	r2, r7, #8
 8007c8e:	f107 0320 	add.w	r3, r7, #32
 8007c92:	4619      	mov	r1, r3
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f7fe fe72 	bl	800697e <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString(ActualMenu->menuTitle, NHDST7565_LCD::CENTER_POS, MENU_TITLE_YPOS, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681c      	ldr	r4, [r3, #0]
 8007c9e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007ca0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007ca4:	4611      	mov	r1, r2
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f009 fbe5 	bl	8011476 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007cb4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8007cb8:	9300      	str	r3, [sp, #0]
 8007cba:	2307      	movs	r3, #7
 8007cbc:	2283      	movs	r2, #131	; 0x83
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f7fc fe1d 	bl	80048fe <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8007cc4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f009 fa70 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		ActualMenu->maxMenuLines = display->drawMenuList(ActualMenu->XPos, ActualMenu->YPos, ActualMenu->topItemPos,
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	603b      	str	r3, [r7, #0]
 8007cd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cd6:	f893 c01c 	ldrb.w	ip, [r3, #28]
 8007cda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cdc:	f893 e01d 	ldrb.w	lr, [r3, #29]
 8007ce0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ce2:	f893 8024 	ldrb.w	r8, [r3, #36]	; 0x24
 8007ce6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ce8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007cec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007cee:	6992      	ldr	r2, [r2, #24]
 8007cf0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007cf2:	f891 1027 	ldrb.w	r1, [r1, #39]	; 0x27
 8007cf6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8007cf8:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
 8007cfc:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8007cfe:	f894 4035 	ldrb.w	r4, [r4, #53]	; 0x35
 8007d02:	6f3d      	ldr	r5, [r7, #112]	; 0x70
 8007d04:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 8007d06:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 8007d08:	6a36      	ldr	r6, [r6, #32]
 8007d0a:	9606      	str	r6, [sp, #24]
 8007d0c:	9505      	str	r5, [sp, #20]
 8007d0e:	9404      	str	r4, [sp, #16]
 8007d10:	9003      	str	r0, [sp, #12]
 8007d12:	9102      	str	r1, [sp, #8]
 8007d14:	9201      	str	r2, [sp, #4]
 8007d16:	9300      	str	r3, [sp, #0]
 8007d18:	4643      	mov	r3, r8
 8007d1a:	4672      	mov	r2, lr
 8007d1c:	4661      	mov	r1, ip
 8007d1e:	6838      	ldr	r0, [r7, #0]
 8007d20:	f7fc fe30 	bl	8004984 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh>
 8007d24:	4603      	mov	r3, r0
 8007d26:	461a      	mov	r2, r3
 8007d28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d2a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				ActualMenu->itemSelected, ActualMenu->menuVoices, ActualMenu->maxMenuItems,
				ActualMenu->withChebox, ActualMenu->menuSelected, ActualMenu->itemsChecked, ActualMenu->menuFont);
		if(statusParam->serialDeviceAttached)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d32:	7a5b      	ldrb	r3, [r3, #9]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d008      	beq.n	8007d4a <_ZN10SmartDryer7navMenuEv+0x14a>
		{
			display->drawBox(50, 0, 6, 6);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6818      	ldr	r0, [r3, #0]
 8007d3c:	2306      	movs	r3, #6
 8007d3e:	9300      	str	r3, [sp, #0]
 8007d40:	2306      	movs	r3, #6
 8007d42:	2200      	movs	r2, #0
 8007d44:	2132      	movs	r1, #50	; 0x32
 8007d46:	f7fc fdbe 	bl	80048c6 <_ZN13NHDST7565_LCD7drawBoxEhhhh>
//			{
//				showHelpMessageTimer->restart();
//			}
//		}

		display->sendFrameBuffer();
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fc fd9e 	bl	8004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		WichKey = keyboard->checkKey();
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7fd fba3 	bl	80054a4 <_ZN8DryerKey8checkKeyEv>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		switch(WichKey)
 8007d64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d68:	2b07      	cmp	r3, #7
 8007d6a:	f200 81c5 	bhi.w	80080f8 <_ZN10SmartDryer7navMenuEv+0x4f8>
 8007d6e:	a201      	add	r2, pc, #4	; (adr r2, 8007d74 <_ZN10SmartDryer7navMenuEv+0x174>)
 8007d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d74:	08007d95 	.word	0x08007d95
 8007d78:	08007dc3 	.word	0x08007dc3
 8007d7c:	08007df3 	.word	0x08007df3
 8007d80:	08008009 	.word	0x08008009
 8007d84:	08007d95 	.word	0x08007d95
 8007d88:	08007dc3 	.word	0x08007dc3
 8007d8c:	080080b3 	.word	0x080080b3
 8007d90:	080080f9 	.word	0x080080f9
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				if(ActualMenu->itemSelected > 0)
 8007d94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d96:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d008      	beq.n	8007db0 <_ZN10SmartDryer7navMenuEv+0x1b0>
					ActualMenu->itemSelected--;
 8007d9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007da0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007da4:	3b01      	subs	r3, #1
 8007da6:	b2da      	uxtb	r2, r3
 8007da8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007daa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				else
					ActualMenu->itemSelected = ActualMenu->maxMenuItems - 1;
				break;
 8007dae:	e1a6      	b.n	80080fe <_ZN10SmartDryer7navMenuEv+0x4fe>
					ActualMenu->itemSelected = ActualMenu->maxMenuItems - 1;
 8007db0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007db2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007db6:	3b01      	subs	r3, #1
 8007db8:	b2da      	uxtb	r2, r3
 8007dba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007dbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				break;
 8007dc0:	e19d      	b.n	80080fe <_ZN10SmartDryer7navMenuEv+0x4fe>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				if(ActualMenu->itemSelected < ActualMenu->maxMenuItems - 1)
 8007dc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007dc4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007dc8:	461a      	mov	r2, r3
 8007dca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007dcc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	da08      	bge.n	8007de8 <_ZN10SmartDryer7navMenuEv+0x1e8>
					ActualMenu->itemSelected++;
 8007dd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007dd8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007ddc:	3301      	adds	r3, #1
 8007dde:	b2da      	uxtb	r2, r3
 8007de0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007de2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				else
					ActualMenu->itemSelected = 0;
				break;
 8007de6:	e18a      	b.n	80080fe <_ZN10SmartDryer7navMenuEv+0x4fe>
					ActualMenu->itemSelected = 0;
 8007de8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				break;
 8007df0:	e185      	b.n	80080fe <_ZN10SmartDryer7navMenuEv+0x4fe>
			case DryerKey::LEFT_KEY:
				switch(MenuSel)
 8007df2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007df6:	2b07      	cmp	r3, #7
 8007df8:	f000 80dc 	beq.w	8007fb4 <_ZN10SmartDryer7navMenuEv+0x3b4>
 8007dfc:	2b08      	cmp	r3, #8
 8007dfe:	f000 80e5 	beq.w	8007fcc <_ZN10SmartDryer7navMenuEv+0x3cc>
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d000      	beq.n	8007e08 <_ZN10SmartDryer7navMenuEv+0x208>
							screen = ActualMenu->itemSelected + START_PROGRAM_1;
							ExitNavMenu = true;
						}
						break;
					default:
						break;
 8007e06:	e0fe      	b.n	8008006 <_ZN10SmartDryer7navMenuEv+0x406>
						switch(ActualMenu->itemSelected + 1)
 8007e08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e0a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007e0e:	3301      	adds	r3, #1
 8007e10:	3b01      	subs	r3, #1
 8007e12:	2b08      	cmp	r3, #8
 8007e14:	d85c      	bhi.n	8007ed0 <_ZN10SmartDryer7navMenuEv+0x2d0>
 8007e16:	a201      	add	r2, pc, #4	; (adr r2, 8007e1c <_ZN10SmartDryer7navMenuEv+0x21c>)
 8007e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1c:	08007e41 	.word	0x08007e41
 8007e20:	08007e51 	.word	0x08007e51
 8007e24:	08007e61 	.word	0x08007e61
 8007e28:	08007e71 	.word	0x08007e71
 8007e2c:	08007e81 	.word	0x08007e81
 8007e30:	08007e91 	.word	0x08007e91
 8007e34:	08007ea1 	.word	0x08007ea1
 8007e38:	08007eb1 	.word	0x08007eb1
 8007e3c:	08007ec1 	.word	0x08007ec1
								MenuSel = THERMO_CTRL;
 8007e40:	2301      	movs	r3, #1
 8007e42:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = thermoMenuCtrl;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e4c:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8007e4e:	e040      	b.n	8007ed2 <_ZN10SmartDryer7navMenuEv+0x2d2>
								MenuSel = FAN_CTRL;
 8007e50:	2302      	movs	r3, #2
 8007e52:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = fanMenuCtrl;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007e5c:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8007e5e:	e038      	b.n	8007ed2 <_ZN10SmartDryer7navMenuEv+0x2d2>
								MenuSel = TEMP_CTRL;
 8007e60:	2303      	movs	r3, #3
 8007e62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = tempMenuCtrl;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007e6c:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8007e6e:	e030      	b.n	8007ed2 <_ZN10SmartDryer7navMenuEv+0x2d2>
								MenuSel = START_DRYER_CTRL;
 8007e70:	2304      	movs	r3, #4
 8007e72:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = startDryerMenu;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007e7c:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8007e7e:	e028      	b.n	8007ed2 <_ZN10SmartDryer7navMenuEv+0x2d2>
								screen = CHANGE_TIME;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
								ExitNavMenu = true;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
								break;
 8007e8e:	e020      	b.n	8007ed2 <_ZN10SmartDryer7navMenuEv+0x2d2>
								screen = CHANGE_DATE;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2202      	movs	r2, #2
 8007e94:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
								ExitNavMenu = true;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
								break;
 8007e9e:	e018      	b.n	8007ed2 <_ZN10SmartDryer7navMenuEv+0x2d2>
								MenuSel = CHANGE_PROGRAMS_LIST;
 8007ea0:	2307      	movs	r3, #7
 8007ea2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = changeProgramsMenu;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007eac:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8007eae:	e010      	b.n	8007ed2 <_ZN10SmartDryer7navMenuEv+0x2d2>
								MenuSel = START_PROGRAMS_LIST;
 8007eb0:	2308      	movs	r3, #8
 8007eb2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
								ActualMenu = startProgramsMenu;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007ebc:	673b      	str	r3, [r7, #112]	; 0x70
								break;
 8007ebe:	e008      	b.n	8007ed2 <_ZN10SmartDryer7navMenuEv+0x2d2>
								screen = SHOW_INFO;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2203      	movs	r2, #3
 8007ec4:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
								ExitNavMenu = true;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
								break;
 8007ece:	e000      	b.n	8007ed2 <_ZN10SmartDryer7navMenuEv+0x2d2>
								break;
 8007ed0:	bf00      	nop
						if(ActualMenu->withChebox)
 8007ed2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ed4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f000 8091 	beq.w	8008000 <_ZN10SmartDryer7navMenuEv+0x400>
							for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8007ede:	2300      	movs	r3, #0
 8007ee0:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ee2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ee4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007ee8:	461a      	mov	r2, r3
 8007eea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007eec:	4293      	cmp	r3, r2
 8007eee:	da09      	bge.n	8007f04 <_ZN10SmartDryer7navMenuEv+0x304>
								ActualMenu->itemsChecked[i] = false;
 8007ef0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ef4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ef6:	4413      	add	r3, r2
 8007ef8:	2200      	movs	r2, #0
 8007efa:	701a      	strb	r2, [r3, #0]
							for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8007efc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007efe:	3301      	adds	r3, #1
 8007f00:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f02:	e7ee      	b.n	8007ee2 <_ZN10SmartDryer7navMenuEv+0x2e2>
							switch(ActualMenu->paramType)
 8007f04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d002      	beq.n	8007f14 <_ZN10SmartDryer7navMenuEv+0x314>
 8007f0e:	2b04      	cmp	r3, #4
 8007f10:	d01c      	beq.n	8007f4c <_ZN10SmartDryer7navMenuEv+0x34c>
									break;
 8007f12:	e04e      	b.n	8007fb2 <_ZN10SmartDryer7navMenuEv+0x3b2>
									if(*(bool *)ActualMenu->paramAssociated)
 8007f14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00c      	beq.n	8007f38 <_ZN10SmartDryer7navMenuEv+0x338>
										ActualMenu->itemsChecked[0] = false;
 8007f1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f22:	2200      	movs	r2, #0
 8007f24:	701a      	strb	r2, [r3, #0]
										ActualMenu->itemsChecked[1] = true;
 8007f26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	701a      	strb	r2, [r3, #0]
									break;
 8007f30:	e03f      	b.n	8007fb2 <_ZN10SmartDryer7navMenuEv+0x3b2>
 8007f32:	bf00      	nop
 8007f34:	08012424 	.word	0x08012424
										ActualMenu->itemsChecked[0] = true;
 8007f38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	701a      	strb	r2, [r3, #0]
										ActualMenu->itemsChecked[1] = false;
 8007f40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f44:	3301      	adds	r3, #1
 8007f46:	2200      	movs	r2, #0
 8007f48:	701a      	strb	r2, [r3, #0]
									break;
 8007f4a:	e032      	b.n	8007fb2 <_ZN10SmartDryer7navMenuEv+0x3b2>
									switch(MenuSel)
 8007f4c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007f50:	2b03      	cmp	r3, #3
 8007f52:	d000      	beq.n	8007f56 <_ZN10SmartDryer7navMenuEv+0x356>
											break;
 8007f54:	e02c      	b.n	8007fb0 <_ZN10SmartDryer7navMenuEv+0x3b0>
											for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8007f56:	2300      	movs	r3, #0
 8007f58:	667b      	str	r3, [r7, #100]	; 0x64
 8007f5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f5c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007f60:	461a      	mov	r2, r3
 8007f62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f64:	4293      	cmp	r3, r2
 8007f66:	da22      	bge.n	8007fae <_ZN10SmartDryer7navMenuEv+0x3ae>
												uint32_t TempSetted = (uint32_t)*(float *)ActualMenu->paramAssociated;
 8007f68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7f8 ff72 	bl	8000e58 <__aeabi_f2uiz>
 8007f74:	4603      	mov	r3, r0
 8007f76:	65bb      	str	r3, [r7, #88]	; 0x58
												if(TempSetted == (uint32_t)paramTemperatures[i])
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8007f7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f80:	4413      	add	r3, r2
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	461a      	mov	r2, r3
 8007f86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d106      	bne.n	8007f9a <_ZN10SmartDryer7navMenuEv+0x39a>
													ActualMenu->itemsChecked[i] = true;
 8007f8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f92:	4413      	add	r3, r2
 8007f94:	2201      	movs	r2, #1
 8007f96:	701a      	strb	r2, [r3, #0]
 8007f98:	e005      	b.n	8007fa6 <_ZN10SmartDryer7navMenuEv+0x3a6>
													ActualMenu->itemsChecked[i] = false;
 8007f9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fa0:	4413      	add	r3, r2
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	701a      	strb	r2, [r3, #0]
											for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8007fa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fa8:	3301      	adds	r3, #1
 8007faa:	667b      	str	r3, [r7, #100]	; 0x64
 8007fac:	e7d5      	b.n	8007f5a <_ZN10SmartDryer7navMenuEv+0x35a>
											break;
 8007fae:	bf00      	nop
									break;
 8007fb0:	bf00      	nop
						break; // case MAIN_MENU
 8007fb2:	e025      	b.n	8008000 <_ZN10SmartDryer7navMenuEv+0x400>
						screen = ActualMenu->itemSelected + CHANGE_PROGRAM_1;
 8007fb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fb6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007fba:	3304      	adds	r3, #4
 8007fbc:	b2da      	uxtb	r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
						ExitNavMenu = true;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						break;
 8007fca:	e01c      	b.n	8008006 <_ZN10SmartDryer7navMenuEv+0x406>
						if(dryerPrograms[ ActualMenu->itemSelected].programSetted)
 8007fcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	005b      	lsls	r3, r3, #1
 8007fda:	440b      	add	r3, r1
 8007fdc:	00db      	lsls	r3, r3, #3
 8007fde:	4413      	add	r3, r2
 8007fe0:	3348      	adds	r3, #72	; 0x48
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00d      	beq.n	8008004 <_ZN10SmartDryer7navMenuEv+0x404>
							screen = ActualMenu->itemSelected + START_PROGRAM_1;
 8007fe8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007fee:	3307      	adds	r3, #7
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
							ExitNavMenu = true;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						break;
 8007ffe:	e001      	b.n	8008004 <_ZN10SmartDryer7navMenuEv+0x404>
						break; // case MAIN_MENU
 8008000:	bf00      	nop
 8008002:	e07c      	b.n	80080fe <_ZN10SmartDryer7navMenuEv+0x4fe>
						break;
 8008004:	bf00      	nop
				}
			break;// case LEFT_KEY
 8008006:	e07a      	b.n	80080fe <_ZN10SmartDryer7navMenuEv+0x4fe>
			case DryerKey::OK_KEY:
				if(ActualMenu->withChebox)
 8008008:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800800a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800800e:	2b00      	cmp	r3, #0
 8008010:	d074      	beq.n	80080fc <_ZN10SmartDryer7navMenuEv+0x4fc>
				{
					for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8008012:	2300      	movs	r3, #0
 8008014:	663b      	str	r3, [r7, #96]	; 0x60
 8008016:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008018:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800801c:	461a      	mov	r2, r3
 800801e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008020:	4293      	cmp	r3, r2
 8008022:	da09      	bge.n	8008038 <_ZN10SmartDryer7navMenuEv+0x438>
						ActualMenu->itemsChecked[i] = false;
 8008024:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008028:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800802a:	4413      	add	r3, r2
 800802c:	2200      	movs	r2, #0
 800802e:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8008030:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008032:	3301      	adds	r3, #1
 8008034:	663b      	str	r3, [r7, #96]	; 0x60
 8008036:	e7ee      	b.n	8008016 <_ZN10SmartDryer7navMenuEv+0x416>
					ActualMenu->itemsChecked[ActualMenu->itemSelected] = true;
 8008038:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800803a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800803e:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8008042:	4413      	add	r3, r2
 8008044:	2201      	movs	r2, #1
 8008046:	701a      	strb	r2, [r3, #0]
					switch(ActualMenu->paramType)
 8008048:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800804a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800804e:	2b01      	cmp	r3, #1
 8008050:	d002      	beq.n	8008058 <_ZN10SmartDryer7navMenuEv+0x458>
 8008052:	2b04      	cmp	r3, #4
 8008054:	d00f      	beq.n	8008076 <_ZN10SmartDryer7navMenuEv+0x476>
								default:
									break;
							}
							break;
						default:
							break;
 8008056:	e024      	b.n	80080a2 <_ZN10SmartDryer7navMenuEv+0x4a2>
							if(ActualMenu->itemSelected == 0)
 8008058:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800805a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800805e:	2b00      	cmp	r3, #0
 8008060:	d104      	bne.n	800806c <_ZN10SmartDryer7navMenuEv+0x46c>
								*(bool *)ActualMenu->paramAssociated = false;
 8008062:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008066:	2200      	movs	r2, #0
 8008068:	701a      	strb	r2, [r3, #0]
							break;
 800806a:	e01a      	b.n	80080a2 <_ZN10SmartDryer7navMenuEv+0x4a2>
								*(bool *)ActualMenu->paramAssociated = true;
 800806c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800806e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008070:	2201      	movs	r2, #1
 8008072:	701a      	strb	r2, [r3, #0]
							break;
 8008074:	e015      	b.n	80080a2 <_ZN10SmartDryer7navMenuEv+0x4a2>
							switch(MenuSel)
 8008076:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800807a:	2b03      	cmp	r3, #3
 800807c:	d000      	beq.n	8008080 <_ZN10SmartDryer7navMenuEv+0x480>
									break;
 800807e:	e00f      	b.n	80080a0 <_ZN10SmartDryer7navMenuEv+0x4a0>
									*(float *)ActualMenu->paramAssociated = (float)paramTemperatures[ActualMenu->itemSelected];
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008086:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008088:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800808c:	4413      	add	r3, r2
 800808e:	781a      	ldrb	r2, [r3, #0]
 8008090:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008092:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8008094:	4610      	mov	r0, r2
 8008096:	f7f8 fd37 	bl	8000b08 <__aeabi_ui2f>
 800809a:	4603      	mov	r3, r0
 800809c:	6023      	str	r3, [r4, #0]
									break;
 800809e:	bf00      	nop
							break;
 80080a0:	bf00      	nop
					}
					MenuSel = MAIN_MENU;
 80080a2:	2300      	movs	r3, #0
 80080a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					ActualMenu = mainMenu;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80080ae:	673b      	str	r3, [r7, #112]	; 0x70
				}
				break;
 80080b0:	e024      	b.n	80080fc <_ZN10SmartDryer7navMenuEv+0x4fc>
			case DryerKey::LONG_LEFT_KEY:
				switch(MenuSel)
 80080b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80080b6:	3b01      	subs	r3, #1
 80080b8:	2b07      	cmp	r3, #7
 80080ba:	d81b      	bhi.n	80080f4 <_ZN10SmartDryer7navMenuEv+0x4f4>
 80080bc:	a201      	add	r2, pc, #4	; (adr r2, 80080c4 <_ZN10SmartDryer7navMenuEv+0x4c4>)
 80080be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c2:	bf00      	nop
 80080c4:	080080e5 	.word	0x080080e5
 80080c8:	080080e5 	.word	0x080080e5
 80080cc:	080080e5 	.word	0x080080e5
 80080d0:	080080e5 	.word	0x080080e5
 80080d4:	080080f5 	.word	0x080080f5
 80080d8:	080080f5 	.word	0x080080f5
 80080dc:	080080e5 	.word	0x080080e5
 80080e0:	080080e5 	.word	0x080080e5
					case FAN_CTRL:
					case TEMP_CTRL:
					case START_DRYER_CTRL:
					case CHANGE_PROGRAMS_LIST:
					case START_PROGRAMS_LIST:
						MenuSel = MAIN_MENU;
 80080e4:	2300      	movs	r3, #0
 80080e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						ActualMenu = mainMenu;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80080f0:	673b      	str	r3, [r7, #112]	; 0x70
						break;
 80080f2:	e000      	b.n	80080f6 <_ZN10SmartDryer7navMenuEv+0x4f6>
					default:
						break;
 80080f4:	bf00      	nop
				}
				break;
 80080f6:	e002      	b.n	80080fe <_ZN10SmartDryer7navMenuEv+0x4fe>
			case DryerKey::LONG_OK_KEY:
				break;
			default:
				break;
 80080f8:	bf00      	nop
 80080fa:	e000      	b.n	80080fe <_ZN10SmartDryer7navMenuEv+0x4fe>
				break;
 80080fc:	bf00      	nop
		}
		if(WichKey != DryerKey::NO_KEY && WichKey != DryerKey::LEFT_KEY)
 80080fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008102:	2b08      	cmp	r3, #8
 8008104:	d04d      	beq.n	80081a2 <_ZN10SmartDryer7navMenuEv+0x5a2>
 8008106:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800810a:	2b02      	cmp	r3, #2
 800810c:	d049      	beq.n	80081a2 <_ZN10SmartDryer7navMenuEv+0x5a2>
		{
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 800810e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008110:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008114:	461a      	mov	r2, r3
 8008116:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008118:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800811c:	3b02      	subs	r3, #2
 800811e:	429a      	cmp	r2, r3
 8008120:	dd3a      	ble.n	8008198 <_ZN10SmartDryer7navMenuEv+0x598>
			{
				if(ActualMenu->itemSelected - (ActualMenu->maxMenuLines - 2) < ActualMenu->maxMenuItems - 1)
 8008122:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008124:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008128:	461a      	mov	r2, r3
 800812a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800812c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008130:	3b02      	subs	r3, #2
 8008132:	1ad2      	subs	r2, r2, r3
 8008134:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008136:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800813a:	3b01      	subs	r3, #1
 800813c:	429a      	cmp	r2, r3
 800813e:	da0d      	bge.n	800815c <_ZN10SmartDryer7navMenuEv+0x55c>
					ActualMenu->topItemPos = ActualMenu->itemSelected - (ActualMenu->maxMenuLines - 2);
 8008140:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008142:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8008146:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008148:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	b2db      	uxtb	r3, r3
 8008150:	3302      	adds	r3, #2
 8008152:	b2da      	uxtb	r2, r3
 8008154:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008156:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800815a:	e003      	b.n	8008164 <_ZN10SmartDryer7navMenuEv+0x564>
				else
					ActualMenu->topItemPos = 0;
 800815c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800815e:	2200      	movs	r2, #0
 8008160:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				if(ActualMenu->itemSelected >= ActualMenu->maxMenuItems - ActualMenu->maxMenuLines)
 8008164:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008166:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800816a:	461a      	mov	r2, r3
 800816c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800816e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8008172:	4619      	mov	r1, r3
 8008174:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008176:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800817a:	1acb      	subs	r3, r1, r3
 800817c:	429a      	cmp	r2, r3
 800817e:	db1a      	blt.n	80081b6 <_ZN10SmartDryer7navMenuEv+0x5b6>
				{
					ActualMenu->topItemPos = ActualMenu->maxMenuItems - ActualMenu->maxMenuLines;
 8008180:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008182:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8008186:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008188:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800818c:	1ad3      	subs	r3, r2, r3
 800818e:	b2da      	uxtb	r2, r3
 8008190:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008192:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 8008196:	e00e      	b.n	80081b6 <_ZN10SmartDryer7navMenuEv+0x5b6>
				}
			}
			else
				ActualMenu->topItemPos = 0;
 8008198:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800819a:	2200      	movs	r2, #0
 800819c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 80081a0:	e009      	b.n	80081b6 <_ZN10SmartDryer7navMenuEv+0x5b6>

		}
		else if(WichKey != DryerKey::NO_KEY)
 80081a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081a6:	2b08      	cmp	r3, #8
 80081a8:	d006      	beq.n	80081b8 <_ZN10SmartDryer7navMenuEv+0x5b8>
		{
			showHelpMessageTimer->restart();
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7fb f8f1 	bl	8003396 <_ZN11ChronoTimer7restartEv>
 80081b4:	e000      	b.n	80081b8 <_ZN10SmartDryer7navMenuEv+0x5b8>
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 80081b6:	bf00      	nop
		}
		peripheralsControl();
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f7fe fbcb 	bl	8006954 <_ZN10SmartDryer18peripheralsControlEv>
		statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80081c6:	4610      	mov	r0, r2
 80081c8:	f7fd fcc8 	bl	8005b5c <_ZN13SerialMessage17isDeviceConnectedEv>
 80081cc:	4603      	mov	r3, r0
 80081ce:	7263      	strb	r3, [r4, #9]
		if(statusParam->serialDeviceAttached)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081d4:	7a5b      	ldrb	r3, [r3, #9]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	f43f ad4a 	beq.w	8007c70 <_ZN10SmartDryer7navMenuEv+0x70>
		{
			serialComunicationCtrl();
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f7ff f8bb 	bl	8007358 <_ZN10SmartDryer22serialComunicationCtrlEv>
	while(!ExitNavMenu)
 80081e2:	e545      	b.n	8007c70 <_ZN10SmartDryer7navMenuEv+0x70>
	String Time = "", Date = "";
 80081e4:	f107 0308 	add.w	r3, r7, #8
 80081e8:	4618      	mov	r0, r3
 80081ea:	f008 ffe0 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80081ee:	f107 0320 	add.w	r3, r7, #32
 80081f2:	4618      	mov	r0, r3
 80081f4:	f008 ffdb 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}

}
 80081f8:	bf00      	nop
 80081fa:	3778      	adds	r7, #120	; 0x78
 80081fc:	46bd      	mov	sp, r7
 80081fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008202:	bf00      	nop

08008204 <_ZN10SmartDryer4testEv>:


void SmartDryer::test()
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]

}
 800820c:	bf00      	nop
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	bc80      	pop	{r7}
 8008214:	4770      	bx	lr
	...

08008218 <_ZN10SmartDryer5setupEv>:

void SmartDryer::setup()
{
 8008218:	b590      	push	{r4, r7, lr}
 800821a:	b0d1      	sub	sp, #324	; 0x144
 800821c:	af00      	add	r7, sp, #0
 800821e:	1d3b      	adds	r3, r7, #4
 8008220:	6018      	str	r0, [r3, #0]
	uint32_t FirstBootVal = 0;
 8008222:	f107 0308 	add.w	r3, r7, #8
 8008226:	2200      	movs	r2, #0
 8008228:	601a      	str	r2, [r3, #0]
	display->setupLcd();
 800822a:	1d3b      	adds	r3, r7, #4
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4618      	mov	r0, r3
 8008232:	f7fc fa4b 	bl	80046cc <_ZN13NHDST7565_LCD8setupLcdEv>
	clock->setup();
 8008236:	1d3b      	adds	r3, r7, #4
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	4618      	mov	r0, r3
 800823e:	f7fb f95b 	bl	80034f8 <_ZN10DS1307_RTC5setupEv>
	rtcRunning = clock->isRunning();
 8008242:	1d3b      	adds	r3, r7, #4
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	4618      	mov	r0, r3
 800824a:	f7fb f96f 	bl	800352c <_ZN10DS1307_RTC9isRunningEv>
 800824e:	4603      	mov	r3, r0
 8008250:	461a      	mov	r2, r3
 8008252:	1d3b      	adds	r3, r7, #4
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40


	paramTemperatures = new uint8_t[NTemps];
 800825a:	200d      	movs	r0, #13
 800825c:	f008 fe58 	bl	8010f10 <_Znaj>
 8008260:	4603      	mov	r3, r0
 8008262:	461a      	mov	r2, r3
 8008264:	1d3b      	adds	r3, r7, #4
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	for(int i = 0; i < NTemps; i++)
 800826c:	2300      	movs	r3, #0
 800826e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8008272:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008276:	2b0c      	cmp	r3, #12
 8008278:	dc16      	bgt.n	80082a8 <_ZN10SmartDryer5setupEv+0x90>
	{
		paramTemperatures[i] = 30 + (i * 5);
 800827a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800827e:	b2db      	uxtb	r3, r3
 8008280:	461a      	mov	r2, r3
 8008282:	0092      	lsls	r2, r2, #2
 8008284:	4413      	add	r3, r2
 8008286:	b2da      	uxtb	r2, r3
 8008288:	1d3b      	adds	r3, r7, #4
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8008290:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008294:	440b      	add	r3, r1
 8008296:	321e      	adds	r2, #30
 8008298:	b2d2      	uxtb	r2, r2
 800829a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NTemps; i++)
 800829c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80082a0:	3301      	adds	r3, #1
 80082a2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80082a6:	e7e4      	b.n	8008272 <_ZN10SmartDryer5setupEv+0x5a>
	}

	physicalReleCtrl();
 80082a8:	1d3b      	adds	r3, r7, #4
 80082aa:	6818      	ldr	r0, [r3, #0]
 80082ac:	f7fe fb14 	bl	80068d8 <_ZN10SmartDryer16physicalReleCtrlEv>
	ledControl();
 80082b0:	1d3b      	adds	r3, r7, #4
 80082b2:	6818      	ldr	r0, [r3, #0]
 80082b4:	f7fe f96a 	bl	800658c <_ZN10SmartDryer10ledControlEv>


	mainMenuHelpMsgs.push_back("Accende o spegne la resistenza");
 80082b8:	1d3b      	adds	r3, r7, #4
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80082c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082c4:	4618      	mov	r0, r3
 80082c6:	f008 fe41 	bl	8010f4c <_ZNSaIcEC1Ev>
 80082ca:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80082ce:	f107 030c 	add.w	r3, r7, #12
 80082d2:	49af      	ldr	r1, [pc, #700]	; (8008590 <_ZN10SmartDryer5setupEv+0x378>)
 80082d4:	4618      	mov	r0, r3
 80082d6:	f009 f901 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80082da:	f107 030c 	add.w	r3, r7, #12
 80082de:	4619      	mov	r1, r3
 80082e0:	4620      	mov	r0, r4
 80082e2:	f002 fcc4 	bl	800ac6e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 80082e6:	f107 030c 	add.w	r3, r7, #12
 80082ea:	4618      	mov	r0, r3
 80082ec:	f008 ff5f 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80082f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082f4:	4618      	mov	r0, r3
 80082f6:	f008 fe2a 	bl	8010f4e <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Accende o spegne la ventola");
 80082fa:	1d3b      	adds	r3, r7, #4
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8008302:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008306:	4618      	mov	r0, r3
 8008308:	f008 fe20 	bl	8010f4c <_ZNSaIcEC1Ev>
 800830c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008310:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008314:	499f      	ldr	r1, [pc, #636]	; (8008594 <_ZN10SmartDryer5setupEv+0x37c>)
 8008316:	4618      	mov	r0, r3
 8008318:	f009 f8e0 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800831c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008320:	4619      	mov	r1, r3
 8008322:	4620      	mov	r0, r4
 8008324:	f002 fca3 	bl	800ac6e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8008328:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800832c:	4618      	mov	r0, r3
 800832e:	f008 ff3e 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008332:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008336:	4618      	mov	r0, r3
 8008338:	f008 fe09 	bl	8010f4e <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Imposta la temperatura di servizio");
 800833c:	1d3b      	adds	r3, r7, #4
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8008344:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008348:	4618      	mov	r0, r3
 800834a:	f008 fdff 	bl	8010f4c <_ZNSaIcEC1Ev>
 800834e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8008352:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008356:	4990      	ldr	r1, [pc, #576]	; (8008598 <_ZN10SmartDryer5setupEv+0x380>)
 8008358:	4618      	mov	r0, r3
 800835a:	f009 f8bf 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800835e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008362:	4619      	mov	r1, r3
 8008364:	4620      	mov	r0, r4
 8008366:	f002 fc82 	bl	800ac6e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 800836a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800836e:	4618      	mov	r0, r3
 8008370:	f008 ff1d 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008374:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008378:	4618      	mov	r0, r3
 800837a:	f008 fde8 	bl	8010f4e <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Avvia il dryer manualmente");
 800837e:	1d3b      	adds	r3, r7, #4
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8008386:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800838a:	4618      	mov	r0, r3
 800838c:	f008 fdde 	bl	8010f4c <_ZNSaIcEC1Ev>
 8008390:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8008394:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008398:	4980      	ldr	r1, [pc, #512]	; (800859c <_ZN10SmartDryer5setupEv+0x384>)
 800839a:	4618      	mov	r0, r3
 800839c:	f009 f89e 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80083a0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80083a4:	4619      	mov	r1, r3
 80083a6:	4620      	mov	r0, r4
 80083a8:	f002 fc61 	bl	800ac6e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 80083ac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80083b0:	4618      	mov	r0, r3
 80083b2:	f008 fefc 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80083b6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80083ba:	4618      	mov	r0, r3
 80083bc:	f008 fdc7 	bl	8010f4e <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Modifica l'ora di sistema");
 80083c0:	1d3b      	adds	r3, r7, #4
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80083c8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80083cc:	4618      	mov	r0, r3
 80083ce:	f008 fdbd 	bl	8010f4c <_ZNSaIcEC1Ev>
 80083d2:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80083d6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80083da:	4971      	ldr	r1, [pc, #452]	; (80085a0 <_ZN10SmartDryer5setupEv+0x388>)
 80083dc:	4618      	mov	r0, r3
 80083de:	f009 f87d 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80083e2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80083e6:	4619      	mov	r1, r3
 80083e8:	4620      	mov	r0, r4
 80083ea:	f002 fc40 	bl	800ac6e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 80083ee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80083f2:	4618      	mov	r0, r3
 80083f4:	f008 fedb 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80083f8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80083fc:	4618      	mov	r0, r3
 80083fe:	f008 fda6 	bl	8010f4e <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Modifica la data di sistema");
 8008402:	1d3b      	adds	r3, r7, #4
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800840a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800840e:	4618      	mov	r0, r3
 8008410:	f008 fd9c 	bl	8010f4c <_ZNSaIcEC1Ev>
 8008414:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008418:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800841c:	4961      	ldr	r1, [pc, #388]	; (80085a4 <_ZN10SmartDryer5setupEv+0x38c>)
 800841e:	4618      	mov	r0, r3
 8008420:	f009 f85c 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008424:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008428:	4619      	mov	r1, r3
 800842a:	4620      	mov	r0, r4
 800842c:	f002 fc1f 	bl	800ac6e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8008430:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008434:	4618      	mov	r0, r3
 8008436:	f008 feba 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800843a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800843e:	4618      	mov	r0, r3
 8008440:	f008 fd85 	bl	8010f4e <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Imposta i programmi");
 8008444:	1d3b      	adds	r3, r7, #4
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800844c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008450:	4618      	mov	r0, r3
 8008452:	f008 fd7b 	bl	8010f4c <_ZNSaIcEC1Ev>
 8008456:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800845a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800845e:	4952      	ldr	r1, [pc, #328]	; (80085a8 <_ZN10SmartDryer5setupEv+0x390>)
 8008460:	4618      	mov	r0, r3
 8008462:	f009 f83b 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008466:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800846a:	4619      	mov	r1, r3
 800846c:	4620      	mov	r0, r4
 800846e:	f002 fbfe 	bl	800ac6e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8008472:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8008476:	4618      	mov	r0, r3
 8008478:	f008 fe99 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800847c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008480:	4618      	mov	r0, r3
 8008482:	f008 fd64 	bl	8010f4e <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Seleziona il programma da avviare");
 8008486:	1d3b      	adds	r3, r7, #4
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800848e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8008492:	4618      	mov	r0, r3
 8008494:	f008 fd5a 	bl	8010f4c <_ZNSaIcEC1Ev>
 8008498:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800849c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80084a0:	4942      	ldr	r1, [pc, #264]	; (80085ac <_ZN10SmartDryer5setupEv+0x394>)
 80084a2:	4618      	mov	r0, r3
 80084a4:	f009 f81a 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80084a8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80084ac:	4619      	mov	r1, r3
 80084ae:	4620      	mov	r0, r4
 80084b0:	f002 fbdd 	bl	800ac6e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 80084b4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80084b8:	4618      	mov	r0, r3
 80084ba:	f008 fe78 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80084be:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80084c2:	4618      	mov	r0, r3
 80084c4:	f008 fd43 	bl	8010f4e <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Mostra info sistema");
 80084c8:	1d3b      	adds	r3, r7, #4
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80084d0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80084d4:	4618      	mov	r0, r3
 80084d6:	f008 fd39 	bl	8010f4c <_ZNSaIcEC1Ev>
 80084da:	f507 7282 	add.w	r2, r7, #260	; 0x104
 80084de:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80084e2:	4933      	ldr	r1, [pc, #204]	; (80085b0 <_ZN10SmartDryer5setupEv+0x398>)
 80084e4:	4618      	mov	r0, r3
 80084e6:	f008 fff9 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80084ea:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80084ee:	4619      	mov	r1, r3
 80084f0:	4620      	mov	r0, r4
 80084f2:	f002 fbbc 	bl	800ac6e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 80084f6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80084fa:	4618      	mov	r0, r3
 80084fc:	f008 fe57 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008500:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8008504:	4618      	mov	r0, r3
 8008506:	f008 fd22 	bl	8010f4e <_ZNSaIcED1Ev>
	if(mainMenuHelpMsgs.size() < MAX_MENU_ITEMS)
 800850a:	1d3b      	adds	r3, r7, #4
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	33a0      	adds	r3, #160	; 0xa0
 8008510:	4618      	mov	r0, r3
 8008512:	f002 fbbd 	bl	800ac90 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8008516:	4603      	mov	r3, r0
 8008518:	2b09      	cmp	r3, #9
 800851a:	bf94      	ite	ls
 800851c:	2301      	movls	r3, #1
 800851e:	2300      	movhi	r3, #0
 8008520:	b2db      	uxtb	r3, r3
 8008522:	2b00      	cmp	r3, #0
 8008524:	d048      	beq.n	80085b8 <_ZN10SmartDryer5setupEv+0x3a0>
	{
		mainMenuHelpMsgs.clear();
 8008526:	1d3b      	adds	r3, r7, #4
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	33a0      	adds	r3, #160	; 0xa0
 800852c:	4618      	mov	r0, r3
 800852e:	f002 fbc5 	bl	800acbc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5clearEv>
		for(int i = 0; i < MAX_MENU_ITEMS; i++)
 8008532:	2300      	movs	r3, #0
 8008534:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8008538:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800853c:	2b09      	cmp	r3, #9
 800853e:	dc3b      	bgt.n	80085b8 <_ZN10SmartDryer5setupEv+0x3a0>
		{
			mainMenuHelpMsgs.push_back("");
 8008540:	1d3b      	adds	r3, r7, #4
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8008548:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800854c:	4618      	mov	r0, r3
 800854e:	f008 fcfd 	bl	8010f4c <_ZNSaIcEC1Ev>
 8008552:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8008556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800855a:	4916      	ldr	r1, [pc, #88]	; (80085b4 <_ZN10SmartDryer5setupEv+0x39c>)
 800855c:	4618      	mov	r0, r3
 800855e:	f008 ffbd 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008566:	4619      	mov	r1, r3
 8008568:	4620      	mov	r0, r4
 800856a:	f002 fb80 	bl	800ac6e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 800856e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008572:	4618      	mov	r0, r3
 8008574:	f008 fe1b 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008578:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800857c:	4618      	mov	r0, r3
 800857e:	f008 fce6 	bl	8010f4e <_ZNSaIcED1Ev>
		for(int i = 0; i < MAX_MENU_ITEMS; i++)
 8008582:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008586:	3301      	adds	r3, #1
 8008588:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800858c:	e7d4      	b.n	8008538 <_ZN10SmartDryer5setupEv+0x320>
 800858e:	bf00      	nop
 8008590:	08012428 	.word	0x08012428
 8008594:	08012448 	.word	0x08012448
 8008598:	08012464 	.word	0x08012464
 800859c:	08012488 	.word	0x08012488
 80085a0:	080124a4 	.word	0x080124a4
 80085a4:	080124c0 	.word	0x080124c0
 80085a8:	080124dc 	.word	0x080124dc
 80085ac:	080124f0 	.word	0x080124f0
 80085b0:	08012514 	.word	0x08012514
 80085b4:	08012424 	.word	0x08012424
		}
	}


	mainMenu->menuTitle = "Menu principale";
 80085b8:	1d3b      	adds	r3, r7, #4
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80085c0:	49cc      	ldr	r1, [pc, #816]	; (80088f4 <_ZN10SmartDryer5setupEv+0x6dc>)
 80085c2:	4618      	mov	r0, r3
 80085c4:	f008 fed7 	bl	8011376 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	mainMenu->menuVoices = mainMenuVoices;
 80085c8:	1d3b      	adds	r3, r7, #4
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80085d0:	4ac9      	ldr	r2, [pc, #804]	; (80088f8 <_ZN10SmartDryer5setupEv+0x6e0>)
 80085d2:	619a      	str	r2, [r3, #24]
	mainMenu->XPos = MENU_LEFT_LIST_XPOS;
 80085d4:	1d3b      	adds	r3, r7, #4
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80085dc:	2205      	movs	r2, #5
 80085de:	771a      	strb	r2, [r3, #28]
	mainMenu->YPos = MENU_LIST_YPOS;
 80085e0:	1d3b      	adds	r3, r7, #4
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80085e8:	2214      	movs	r2, #20
 80085ea:	775a      	strb	r2, [r3, #29]
	mainMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 80085ec:	1d3b      	adds	r3, r7, #4
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	1d3b      	adds	r3, r7, #4
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80085fa:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 80085fe:	621a      	str	r2, [r3, #32]
	mainMenu->topItemPos = 0;
 8008600:	1d3b      	adds	r3, r7, #4
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008608:	2200      	movs	r2, #0
 800860a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	mainMenu->itemSelected = 0;
 800860e:	1d3b      	adds	r3, r7, #4
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008616:	2200      	movs	r2, #0
 8008618:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	mainMenu->maxMenuLines = 0;
 800861c:	1d3b      	adds	r3, r7, #4
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008624:	2200      	movs	r2, #0
 8008626:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	mainMenu->maxMenuItems = sizeof(mainMenuVoices)/sizeof(mainMenuVoices[0]);
 800862a:	1d3b      	adds	r3, r7, #4
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008632:	2209      	movs	r2, #9
 8008634:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	mainMenu->withChebox = false;
 8008638:	1d3b      	adds	r3, r7, #4
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008640:	2200      	movs	r2, #0
 8008642:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	mainMenu->itemsChecked = NULL;
 8008646:	1d3b      	adds	r3, r7, #4
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800864e:	2200      	movs	r2, #0
 8008650:	62da      	str	r2, [r3, #44]	; 0x2c
	mainMenu->paramAssociated = NULL;
 8008652:	1d3b      	adds	r3, r7, #4
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800865a:	2200      	movs	r2, #0
 800865c:	631a      	str	r2, [r3, #48]	; 0x30
	mainMenu->paramType = NO_TYPE;
 800865e:	1d3b      	adds	r3, r7, #4
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008666:	2200      	movs	r2, #0
 8008668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	mainMenu->menuSelected = true;
 800866c:	1d3b      	adds	r3, r7, #4
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008674:	2201      	movs	r2, #1
 8008676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	thermoMenuCtrl->menuTitle = "Ctrl. thermo";
 800867a:	1d3b      	adds	r3, r7, #4
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008682:	499e      	ldr	r1, [pc, #632]	; (80088fc <_ZN10SmartDryer5setupEv+0x6e4>)
 8008684:	4618      	mov	r0, r3
 8008686:	f008 fe76 	bl	8011376 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	thermoMenuCtrl->menuVoices = OnOff;
 800868a:	1d3b      	adds	r3, r7, #4
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008692:	4a9b      	ldr	r2, [pc, #620]	; (8008900 <_ZN10SmartDryer5setupEv+0x6e8>)
 8008694:	619a      	str	r2, [r3, #24]
	thermoMenuCtrl->XPos = MENU_RIGHT_LIST_XPOS;
 8008696:	1d3b      	adds	r3, r7, #4
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800869e:	223c      	movs	r2, #60	; 0x3c
 80086a0:	771a      	strb	r2, [r3, #28]
	thermoMenuCtrl->YPos = MENU_LIST_YPOS;
 80086a2:	1d3b      	adds	r3, r7, #4
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80086aa:	2214      	movs	r2, #20
 80086ac:	775a      	strb	r2, [r3, #29]
	thermoMenuCtrl->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 80086ae:	1d3b      	adds	r3, r7, #4
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	1d3b      	adds	r3, r7, #4
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80086bc:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 80086c0:	621a      	str	r2, [r3, #32]
	thermoMenuCtrl->topItemPos = 0;
 80086c2:	1d3b      	adds	r3, r7, #4
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80086ca:	2200      	movs	r2, #0
 80086cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	thermoMenuCtrl->itemSelected = 0;
 80086d0:	1d3b      	adds	r3, r7, #4
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	thermoMenuCtrl->maxMenuLines = 0;
 80086de:	1d3b      	adds	r3, r7, #4
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	thermoMenuCtrl->maxMenuItems = sizeof(OnOff)/sizeof(OnOff[0]);
 80086ec:	1d3b      	adds	r3, r7, #4
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80086f4:	2202      	movs	r2, #2
 80086f6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	thermoMenuCtrl->withChebox = true;
 80086fa:	1d3b      	adds	r3, r7, #4
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008702:	2201      	movs	r2, #1
 8008704:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	thermoMenuCtrl->itemsChecked = new bool(thermoMenuCtrl->maxMenuItems);
 8008708:	2001      	movs	r0, #1
 800870a:	f008 fc03 	bl	8010f14 <_Znwj>
 800870e:	4603      	mov	r3, r0
 8008710:	1d3a      	adds	r2, r7, #4
 8008712:	6812      	ldr	r2, [r2, #0]
 8008714:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8008718:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800871c:	2a00      	cmp	r2, #0
 800871e:	bf14      	ite	ne
 8008720:	2201      	movne	r2, #1
 8008722:	2200      	moveq	r2, #0
 8008724:	b2d2      	uxtb	r2, r2
 8008726:	701a      	strb	r2, [r3, #0]
 8008728:	1d3a      	adds	r2, r7, #4
 800872a:	6812      	ldr	r2, [r2, #0]
 800872c:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8008730:	62d3      	str	r3, [r2, #44]	; 0x2c
	thermoMenuCtrl->paramAssociated = (bool *)&statusParam->thermoOn;
 8008732:	1d3b      	adds	r3, r7, #4
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008738:	1d3b      	adds	r3, r7, #4
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008740:	3201      	adds	r2, #1
 8008742:	631a      	str	r2, [r3, #48]	; 0x30
	thermoMenuCtrl->paramType = PARAM_BOOL_TYPE;
 8008744:	1d3b      	adds	r3, r7, #4
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800874c:	2201      	movs	r2, #1
 800874e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	thermoMenuCtrl->menuSelected = true;
 8008752:	1d3b      	adds	r3, r7, #4
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800875a:	2201      	movs	r2, #1
 800875c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	fanMenuCtrl->menuTitle = "Ctrl. ventola";
 8008760:	1d3b      	adds	r3, r7, #4
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008768:	4966      	ldr	r1, [pc, #408]	; (8008904 <_ZN10SmartDryer5setupEv+0x6ec>)
 800876a:	4618      	mov	r0, r3
 800876c:	f008 fe03 	bl	8011376 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	fanMenuCtrl->menuVoices = OnOff;
 8008770:	1d3b      	adds	r3, r7, #4
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008778:	4a61      	ldr	r2, [pc, #388]	; (8008900 <_ZN10SmartDryer5setupEv+0x6e8>)
 800877a:	619a      	str	r2, [r3, #24]
	fanMenuCtrl->XPos = MENU_RIGHT_LIST_XPOS;
 800877c:	1d3b      	adds	r3, r7, #4
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008784:	223c      	movs	r2, #60	; 0x3c
 8008786:	771a      	strb	r2, [r3, #28]
	fanMenuCtrl->YPos = MENU_LIST_YPOS;
 8008788:	1d3b      	adds	r3, r7, #4
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008790:	2214      	movs	r2, #20
 8008792:	775a      	strb	r2, [r3, #29]
	fanMenuCtrl->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 8008794:	1d3b      	adds	r3, r7, #4
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	1d3b      	adds	r3, r7, #4
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80087a2:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 80087a6:	621a      	str	r2, [r3, #32]
	fanMenuCtrl->topItemPos = 0;
 80087a8:	1d3b      	adds	r3, r7, #4
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80087b0:	2200      	movs	r2, #0
 80087b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	fanMenuCtrl->itemSelected = 0;
 80087b6:	1d3b      	adds	r3, r7, #4
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	fanMenuCtrl->maxMenuLines = 0;
 80087c4:	1d3b      	adds	r3, r7, #4
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	fanMenuCtrl->maxMenuItems = sizeof(OnOff)/sizeof(OnOff[0]);
 80087d2:	1d3b      	adds	r3, r7, #4
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80087da:	2202      	movs	r2, #2
 80087dc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	fanMenuCtrl->withChebox = true;
 80087e0:	1d3b      	adds	r3, r7, #4
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80087e8:	2201      	movs	r2, #1
 80087ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	fanMenuCtrl->itemsChecked = new bool(fanMenuCtrl->maxMenuItems);
 80087ee:	2001      	movs	r0, #1
 80087f0:	f008 fb90 	bl	8010f14 <_Znwj>
 80087f4:	4603      	mov	r3, r0
 80087f6:	1d3a      	adds	r2, r7, #4
 80087f8:	6812      	ldr	r2, [r2, #0]
 80087fa:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 80087fe:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8008802:	2a00      	cmp	r2, #0
 8008804:	bf14      	ite	ne
 8008806:	2201      	movne	r2, #1
 8008808:	2200      	moveq	r2, #0
 800880a:	b2d2      	uxtb	r2, r2
 800880c:	701a      	strb	r2, [r3, #0]
 800880e:	1d3a      	adds	r2, r7, #4
 8008810:	6812      	ldr	r2, [r2, #0]
 8008812:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 8008816:	62d3      	str	r3, [r2, #44]	; 0x2c
	fanMenuCtrl->paramAssociated = (bool *)&statusParam->fanOn;
 8008818:	1d3b      	adds	r3, r7, #4
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800881e:	1d3b      	adds	r3, r7, #4
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008826:	3202      	adds	r2, #2
 8008828:	631a      	str	r2, [r3, #48]	; 0x30
	fanMenuCtrl->paramType = PARAM_BOOL_TYPE;
 800882a:	1d3b      	adds	r3, r7, #4
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008832:	2201      	movs	r2, #1
 8008834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	fanMenuCtrl->menuSelected = true;
 8008838:	1d3b      	adds	r3, r7, #4
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008840:	2201      	movs	r2, #1
 8008842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	startDryerMenu->menuTitle = "Avvia dryer";
 8008846:	1d3b      	adds	r3, r7, #4
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800884e:	492e      	ldr	r1, [pc, #184]	; (8008908 <_ZN10SmartDryer5setupEv+0x6f0>)
 8008850:	4618      	mov	r0, r3
 8008852:	f008 fd90 	bl	8011376 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	startDryerMenu->menuVoices = OnOff;
 8008856:	1d3b      	adds	r3, r7, #4
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800885e:	4a28      	ldr	r2, [pc, #160]	; (8008900 <_ZN10SmartDryer5setupEv+0x6e8>)
 8008860:	619a      	str	r2, [r3, #24]
	startDryerMenu->XPos = MENU_RIGHT_LIST_XPOS;
 8008862:	1d3b      	adds	r3, r7, #4
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800886a:	223c      	movs	r2, #60	; 0x3c
 800886c:	771a      	strb	r2, [r3, #28]
	startDryerMenu->YPos = MENU_LIST_YPOS;
 800886e:	1d3b      	adds	r3, r7, #4
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008876:	2214      	movs	r2, #20
 8008878:	775a      	strb	r2, [r3, #29]
	startDryerMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 800887a:	1d3b      	adds	r3, r7, #4
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	1d3b      	adds	r3, r7, #4
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008888:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 800888c:	621a      	str	r2, [r3, #32]
	startDryerMenu->topItemPos = 0;
 800888e:	1d3b      	adds	r3, r7, #4
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008896:	2200      	movs	r2, #0
 8008898:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	startDryerMenu->itemSelected = 0;
 800889c:	1d3b      	adds	r3, r7, #4
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	startDryerMenu->maxMenuLines = 0;
 80088aa:	1d3b      	adds	r3, r7, #4
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	startDryerMenu->maxMenuItems = sizeof(OnOff)/sizeof(OnOff[0]);
 80088b8:	1d3b      	adds	r3, r7, #4
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80088c0:	2202      	movs	r2, #2
 80088c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	startDryerMenu->withChebox = true;
 80088c6:	1d3b      	adds	r3, r7, #4
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	startDryerMenu->itemsChecked = new bool(startDryerMenu->maxMenuItems);
 80088d4:	2001      	movs	r0, #1
 80088d6:	f008 fb1d 	bl	8010f14 <_Znwj>
 80088da:	4603      	mov	r3, r0
 80088dc:	1d3a      	adds	r2, r7, #4
 80088de:	6812      	ldr	r2, [r2, #0]
 80088e0:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 80088e4:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 80088e8:	2a00      	cmp	r2, #0
 80088ea:	bf14      	ite	ne
 80088ec:	2201      	movne	r2, #1
 80088ee:	2200      	moveq	r2, #0
 80088f0:	e00c      	b.n	800890c <_ZN10SmartDryer5setupEv+0x6f4>
 80088f2:	bf00      	nop
 80088f4:	08012528 	.word	0x08012528
 80088f8:	20000030 	.word	0x20000030
 80088fc:	08012538 	.word	0x08012538
 8008900:	20000054 	.word	0x20000054
 8008904:	08012548 	.word	0x08012548
 8008908:	08012344 	.word	0x08012344
 800890c:	b2d2      	uxtb	r2, r2
 800890e:	701a      	strb	r2, [r3, #0]
 8008910:	1d3a      	adds	r2, r7, #4
 8008912:	6812      	ldr	r2, [r2, #0]
 8008914:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 8008918:	62d3      	str	r3, [r2, #44]	; 0x2c
	startDryerMenu->paramAssociated = (bool *)&statusParam->dryerOn;
 800891a:	1d3b      	adds	r3, r7, #4
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008920:	1d3b      	adds	r3, r7, #4
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008928:	631a      	str	r2, [r3, #48]	; 0x30
	startDryerMenu->paramType = PARAM_BOOL_TYPE;
 800892a:	1d3b      	adds	r3, r7, #4
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008932:	2201      	movs	r2, #1
 8008934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	startDryerMenu->menuSelected = true;
 8008938:	1d3b      	adds	r3, r7, #4
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008940:	2201      	movs	r2, #1
 8008942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	tempMenuCtrl->menuTitle = "Imposta temp.";
 8008946:	1d3b      	adds	r3, r7, #4
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800894e:	49cc      	ldr	r1, [pc, #816]	; (8008c80 <_ZN10SmartDryer5setupEv+0xa68>)
 8008950:	4618      	mov	r0, r3
 8008952:	f008 fd10 	bl	8011376 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	tempMenuCtrl->menuVoices = Temps;
 8008956:	1d3b      	adds	r3, r7, #4
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800895e:	4ac9      	ldr	r2, [pc, #804]	; (8008c84 <_ZN10SmartDryer5setupEv+0xa6c>)
 8008960:	619a      	str	r2, [r3, #24]
	tempMenuCtrl->XPos = MENU_RIGHT_LIST_XPOS;
 8008962:	1d3b      	adds	r3, r7, #4
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800896a:	223c      	movs	r2, #60	; 0x3c
 800896c:	771a      	strb	r2, [r3, #28]
	tempMenuCtrl->YPos = MENU_LIST_YPOS;
 800896e:	1d3b      	adds	r3, r7, #4
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008976:	2214      	movs	r2, #20
 8008978:	775a      	strb	r2, [r3, #29]
	tempMenuCtrl->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 800897a:	1d3b      	adds	r3, r7, #4
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	1d3b      	adds	r3, r7, #4
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008988:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 800898c:	621a      	str	r2, [r3, #32]
	tempMenuCtrl->topItemPos = 0;
 800898e:	1d3b      	adds	r3, r7, #4
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008996:	2200      	movs	r2, #0
 8008998:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	tempMenuCtrl->itemSelected = 0;
 800899c:	1d3b      	adds	r3, r7, #4
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80089a4:	2200      	movs	r2, #0
 80089a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	tempMenuCtrl->maxMenuLines = 0;
 80089aa:	1d3b      	adds	r3, r7, #4
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	tempMenuCtrl->maxMenuItems = sizeof(Temps)/sizeof(Temps[0]);;
 80089b8:	1d3b      	adds	r3, r7, #4
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80089c0:	220d      	movs	r2, #13
 80089c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	tempMenuCtrl->withChebox = true;
 80089c6:	1d3b      	adds	r3, r7, #4
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	tempMenuCtrl->itemsChecked = new bool(tempMenuCtrl->maxMenuItems);
 80089d4:	2001      	movs	r0, #1
 80089d6:	f008 fa9d 	bl	8010f14 <_Znwj>
 80089da:	4603      	mov	r3, r0
 80089dc:	1d3a      	adds	r2, r7, #4
 80089de:	6812      	ldr	r2, [r2, #0]
 80089e0:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 80089e4:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 80089e8:	2a00      	cmp	r2, #0
 80089ea:	bf14      	ite	ne
 80089ec:	2201      	movne	r2, #1
 80089ee:	2200      	moveq	r2, #0
 80089f0:	b2d2      	uxtb	r2, r2
 80089f2:	701a      	strb	r2, [r3, #0]
 80089f4:	1d3a      	adds	r2, r7, #4
 80089f6:	6812      	ldr	r2, [r2, #0]
 80089f8:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 80089fc:	62d3      	str	r3, [r2, #44]	; 0x2c
	tempMenuCtrl->paramAssociated = (float *)&statusParam->temperatureSetted;
 80089fe:	1d3b      	adds	r3, r7, #4
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a04:	1d3b      	adds	r3, r7, #4
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008a0c:	3204      	adds	r2, #4
 8008a0e:	631a      	str	r2, [r3, #48]	; 0x30
	tempMenuCtrl->paramType = PARAM_FLOAT_TYPE;
 8008a10:	1d3b      	adds	r3, r7, #4
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008a18:	2204      	movs	r2, #4
 8008a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	tempMenuCtrl->menuSelected = true;
 8008a1e:	1d3b      	adds	r3, r7, #4
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	changeProgramsMenu->menuTitle = "Modifica programma";
 8008a2c:	1d3b      	adds	r3, r7, #4
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008a34:	4994      	ldr	r1, [pc, #592]	; (8008c88 <_ZN10SmartDryer5setupEv+0xa70>)
 8008a36:	4618      	mov	r0, r3
 8008a38:	f008 fc9d 	bl	8011376 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	changeProgramsMenu->menuVoices = programsMenuVoices;
 8008a3c:	1d3b      	adds	r3, r7, #4
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008a44:	4a91      	ldr	r2, [pc, #580]	; (8008c8c <_ZN10SmartDryer5setupEv+0xa74>)
 8008a46:	619a      	str	r2, [r3, #24]
	changeProgramsMenu->XPos = MENU_LEFT_LIST_XPOS;
 8008a48:	1d3b      	adds	r3, r7, #4
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008a50:	2205      	movs	r2, #5
 8008a52:	771a      	strb	r2, [r3, #28]
	changeProgramsMenu->YPos = MENU_LIST_YPOS;
 8008a54:	1d3b      	adds	r3, r7, #4
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008a5c:	2214      	movs	r2, #20
 8008a5e:	775a      	strb	r2, [r3, #29]
	changeProgramsMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 8008a60:	1d3b      	adds	r3, r7, #4
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	1d3b      	adds	r3, r7, #4
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008a6e:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8008a72:	621a      	str	r2, [r3, #32]
	changeProgramsMenu->topItemPos = 0;
 8008a74:	1d3b      	adds	r3, r7, #4
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	changeProgramsMenu->itemSelected = 0;
 8008a82:	1d3b      	adds	r3, r7, #4
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	changeProgramsMenu->maxMenuLines = 0;
 8008a90:	1d3b      	adds	r3, r7, #4
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	changeProgramsMenu->maxMenuItems = sizeof(programsMenuVoices)/sizeof(programsMenuVoices[0]);
 8008a9e:	1d3b      	adds	r3, r7, #4
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008aa6:	2203      	movs	r2, #3
 8008aa8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	changeProgramsMenu->withChebox = false;
 8008aac:	1d3b      	adds	r3, r7, #4
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	changeProgramsMenu->itemsChecked = NULL;
 8008aba:	1d3b      	adds	r3, r7, #4
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	62da      	str	r2, [r3, #44]	; 0x2c
	changeProgramsMenu->paramAssociated = NULL;
 8008ac6:	1d3b      	adds	r3, r7, #4
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008ace:	2200      	movs	r2, #0
 8008ad0:	631a      	str	r2, [r3, #48]	; 0x30
	changeProgramsMenu->paramType = NO_TYPE;
 8008ad2:	1d3b      	adds	r3, r7, #4
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008ada:	2200      	movs	r2, #0
 8008adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	changeProgramsMenu->menuSelected = true;
 8008ae0:	1d3b      	adds	r3, r7, #4
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008ae8:	2201      	movs	r2, #1
 8008aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	startProgramsMenu->menuTitle = "Avvia programma";
 8008aee:	1d3b      	adds	r3, r7, #4
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008af6:	4966      	ldr	r1, [pc, #408]	; (8008c90 <_ZN10SmartDryer5setupEv+0xa78>)
 8008af8:	4618      	mov	r0, r3
 8008afa:	f008 fc3c 	bl	8011376 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	startProgramsMenu->menuVoices = programsMenuVoices;
 8008afe:	1d3b      	adds	r3, r7, #4
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008b06:	4a61      	ldr	r2, [pc, #388]	; (8008c8c <_ZN10SmartDryer5setupEv+0xa74>)
 8008b08:	619a      	str	r2, [r3, #24]
	startProgramsMenu->XPos = MENU_LEFT_LIST_XPOS;
 8008b0a:	1d3b      	adds	r3, r7, #4
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008b12:	2205      	movs	r2, #5
 8008b14:	771a      	strb	r2, [r3, #28]
	startProgramsMenu->YPos = MENU_LIST_YPOS;
 8008b16:	1d3b      	adds	r3, r7, #4
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008b1e:	2214      	movs	r2, #20
 8008b20:	775a      	strb	r2, [r3, #29]
	startProgramsMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 8008b22:	1d3b      	adds	r3, r7, #4
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	1d3b      	adds	r3, r7, #4
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008b30:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8008b34:	621a      	str	r2, [r3, #32]
	startProgramsMenu->topItemPos = 0;
 8008b36:	1d3b      	adds	r3, r7, #4
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	startProgramsMenu->itemSelected = 0;
 8008b44:	1d3b      	adds	r3, r7, #4
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	startProgramsMenu->maxMenuLines = 0;
 8008b52:	1d3b      	adds	r3, r7, #4
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	startProgramsMenu->maxMenuItems = sizeof(programsMenuVoices)/sizeof(programsMenuVoices[0]);
 8008b60:	1d3b      	adds	r3, r7, #4
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008b68:	2203      	movs	r2, #3
 8008b6a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	startProgramsMenu->withChebox = false;
 8008b6e:	1d3b      	adds	r3, r7, #4
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008b76:	2200      	movs	r2, #0
 8008b78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	startProgramsMenu->itemsChecked = NULL;
 8008b7c:	1d3b      	adds	r3, r7, #4
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008b84:	2200      	movs	r2, #0
 8008b86:	62da      	str	r2, [r3, #44]	; 0x2c
	startProgramsMenu->paramAssociated = NULL;
 8008b88:	1d3b      	adds	r3, r7, #4
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008b90:	2200      	movs	r2, #0
 8008b92:	631a      	str	r2, [r3, #48]	; 0x30
	startProgramsMenu->paramType = NO_TYPE;
 8008b94:	1d3b      	adds	r3, r7, #4
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	startProgramsMenu->menuSelected = true;
 8008ba2:	1d3b      	adds	r3, r7, #4
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	if(eepromEnabled)
 8008bb0:	1d3b      	adds	r3, r7, #4
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f000 80d5 	beq.w	8008d68 <_ZN10SmartDryer5setupEv+0xb50>
	{
		if(resetMemory)
 8008bbe:	1d3b      	adds	r3, r7, #4
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d010      	beq.n	8008bec <_ZN10SmartDryer5setupEv+0x9d4>
		{
			FirstBootVal = 500;
 8008bca:	f107 0308 	add.w	r3, r7, #8
 8008bce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008bd2:	601a      	str	r2, [r3, #0]
			memory->writeToMemory(FIRST_BOOT, FirstBootVal, MEM_TRANSFER);
 8008bd4:	1d3b      	adds	r3, r7, #4
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	6998      	ldr	r0, [r3, #24]
 8008bda:	f107 0308 	add.w	r3, r7, #8
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	2301      	movs	r3, #1
 8008be2:	2100      	movs	r1, #0
 8008be4:	f7fc fb4f 	bl	8005286 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
			ResetSystem;
 8008be8:	f003 ff9e 	bl	800cb28 <HAL_NVIC_SystemReset>
		}
		if(!memory->memoryEmpty())
 8008bec:	1d3b      	adds	r3, r7, #4
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	699b      	ldr	r3, [r3, #24]
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7fc fb0f 	bl	8005216 <_ZN12STM32_EEPROM11memoryEmptyEv>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	f083 0301 	eor.w	r3, r3, #1
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d073      	beq.n	8008cec <_ZN10SmartDryer5setupEv+0xad4>
		{
			memory->loadMemory(FIRST_BOOT, &FirstBootVal);
 8008c04:	1d3b      	adds	r3, r7, #4
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	699b      	ldr	r3, [r3, #24]
 8008c0a:	f107 0208 	add.w	r2, r7, #8
 8008c0e:	2100      	movs	r1, #0
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7fc fb56 	bl	80052c2 <_ZN12STM32_EEPROM10loadMemoryEtPm>
			if(FirstBootVal == 200)
 8008c16:	f107 0308 	add.w	r3, r7, #8
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2bc8      	cmp	r3, #200	; 0xc8
 8008c1e:	d115      	bne.n	8008c4c <_ZN10SmartDryer5setupEv+0xa34>
			{
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008c20:	2300      	movs	r3, #0
 8008c22:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8008c26:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	f300 809c 	bgt.w	8008d68 <_ZN10SmartDryer5setupEv+0xb50>
				{
					loadDryerProgram(i);
 8008c30:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008c34:	b2da      	uxtb	r2, r3
 8008c36:	1d3b      	adds	r3, r7, #4
 8008c38:	4611      	mov	r1, r2
 8008c3a:	6818      	ldr	r0, [r3, #0]
 8008c3c:	f7fe f905 	bl	8006e4a <_ZN10SmartDryer16loadDryerProgramEh>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008c40:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008c44:	3301      	adds	r3, #1
 8008c46:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8008c4a:	e7ec      	b.n	8008c26 <_ZN10SmartDryer5setupEv+0xa0e>
				}
			}
			else
			{
				FirstBootVal = 200;
 8008c4c:	f107 0308 	add.w	r3, r7, #8
 8008c50:	22c8      	movs	r2, #200	; 0xc8
 8008c52:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008c54:	2300      	movs	r3, #0
 8008c56:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8008c5a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008c5e:	2b02      	cmp	r3, #2
 8008c60:	dc18      	bgt.n	8008c94 <_ZN10SmartDryer5setupEv+0xa7c>
				{
					writeDefaultsDryerProgram(i);
 8008c62:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008c66:	b2da      	uxtb	r2, r3
 8008c68:	1d3b      	adds	r3, r7, #4
 8008c6a:	4611      	mov	r1, r2
 8008c6c:	6818      	ldr	r0, [r3, #0]
 8008c6e:	f7fd fee1 	bl	8006a34 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008c72:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008c76:	3301      	adds	r3, #1
 8008c78:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8008c7c:	e7ed      	b.n	8008c5a <_ZN10SmartDryer5setupEv+0xa42>
 8008c7e:	bf00      	nop
 8008c80:	08012334 	.word	0x08012334
 8008c84:	2000005c 	.word	0x2000005c
 8008c88:	08012558 	.word	0x08012558
 8008c8c:	20000090 	.word	0x20000090
 8008c90:	08012380 	.word	0x08012380
				}
				memory->eraseMemory();
 8008c94:	1d3b      	adds	r3, r7, #4
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7fc faaa 	bl	80051f4 <_ZN12STM32_EEPROM11eraseMemoryEv>
				memory->writeToMemory(FIRST_BOOT, FirstBootVal, NO_MEM_TRANSFER);
 8008ca0:	1d3b      	adds	r3, r7, #4
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	6998      	ldr	r0, [r3, #24]
 8008ca6:	f107 0308 	add.w	r3, r7, #8
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	2300      	movs	r3, #0
 8008cae:	2100      	movs	r1, #0
 8008cb0:	f7fc fae9 	bl	8005286 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008cba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	dc11      	bgt.n	8008ce6 <_ZN10SmartDryer5setupEv+0xace>
				{
					saveDryerProgram(i);
 8008cc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cc6:	b2da      	uxtb	r2, r3
 8008cc8:	1d3b      	adds	r3, r7, #4
 8008cca:	4611      	mov	r1, r2
 8008ccc:	6818      	ldr	r0, [r3, #0]
 8008cce:	f7fd ff4d 	bl	8006b6c <_ZN10SmartDryer16saveDryerProgramEh>
					HAL_Delay(500);
 8008cd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008cd6:	f003 fa59 	bl	800c18c <HAL_Delay>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008cda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cde:	3301      	adds	r3, #1
 8008ce0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008ce4:	e7e9      	b.n	8008cba <_ZN10SmartDryer5setupEv+0xaa2>
				}
				ResetSystem;
 8008ce6:	f003 ff1f 	bl	800cb28 <HAL_NVIC_SystemReset>
			}
			ResetSystem;
		}
	}

}
 8008cea:	e03d      	b.n	8008d68 <_ZN10SmartDryer5setupEv+0xb50>
			FirstBootVal = 200;
 8008cec:	f107 0308 	add.w	r3, r7, #8
 8008cf0:	22c8      	movs	r2, #200	; 0xc8
 8008cf2:	601a      	str	r2, [r3, #0]
			memory->writeToMemory(FIRST_BOOT, FirstBootVal, NO_MEM_TRANSFER);
 8008cf4:	1d3b      	adds	r3, r7, #4
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	6998      	ldr	r0, [r3, #24]
 8008cfa:	f107 0308 	add.w	r3, r7, #8
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	2300      	movs	r3, #0
 8008d02:	2100      	movs	r1, #0
 8008d04:	f7fc fabf 	bl	8005286 <_ZN12STM32_EEPROM13writeToMemoryEtmb>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008d08:	2300      	movs	r3, #0
 8008d0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008d0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	dc0d      	bgt.n	8008d32 <_ZN10SmartDryer5setupEv+0xb1a>
				writeDefaultsDryerProgram(i);
 8008d16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d1a:	b2da      	uxtb	r2, r3
 8008d1c:	1d3b      	adds	r3, r7, #4
 8008d1e:	4611      	mov	r1, r2
 8008d20:	6818      	ldr	r0, [r3, #0]
 8008d22:	f7fd fe87 	bl	8006a34 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008d26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008d30:	e7ed      	b.n	8008d0e <_ZN10SmartDryer5setupEv+0xaf6>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008d32:	2300      	movs	r3, #0
 8008d34:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008d38:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	dc11      	bgt.n	8008d64 <_ZN10SmartDryer5setupEv+0xb4c>
				saveDryerProgram(i);
 8008d40:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008d44:	b2da      	uxtb	r2, r3
 8008d46:	1d3b      	adds	r3, r7, #4
 8008d48:	4611      	mov	r1, r2
 8008d4a:	6818      	ldr	r0, [r3, #0]
 8008d4c:	f7fd ff0e 	bl	8006b6c <_ZN10SmartDryer16saveDryerProgramEh>
				HAL_Delay(500);
 8008d50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008d54:	f003 fa1a 	bl	800c18c <HAL_Delay>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008d58:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008d62:	e7e9      	b.n	8008d38 <_ZN10SmartDryer5setupEv+0xb20>
			ResetSystem;
 8008d64:	f003 fee0 	bl	800cb28 <HAL_NVIC_SystemReset>
}
 8008d68:	bf00      	nop
 8008d6a:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd90      	pop	{r4, r7, pc}
 8008d72:	bf00      	nop

08008d74 <_ZN10SmartDryer10changeTimeEv>:


void SmartDryer::changeTime()
{
 8008d74:	b590      	push	{r4, r7, lr}
 8008d76:	b0bd      	sub	sp, #244	; 0xf4
 8008d78:	af02      	add	r7, sp, #8
 8008d7a:	6078      	str	r0, [r7, #4]
	bool ExitChangeTime = false;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
	uint8_t Hour = 0, Minute = 0;
 8008d82:	2300      	movs	r3, #0
 8008d84:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
 8008d88:	2300      	movs	r3, #0
 8008d8a:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
	bool IsHours = true;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
	String Title = "", Number = "";
 8008d94:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f008 f8d7 	bl	8010f4c <_ZNSaIcEC1Ev>
 8008d9e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8008da2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008da6:	49d4      	ldr	r1, [pc, #848]	; (80090f8 <_ZN10SmartDryer10changeTimeEv+0x384>)
 8008da8:	4618      	mov	r0, r3
 8008daa:	f008 fb97 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008dae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008db2:	4618      	mov	r0, r3
 8008db4:	f008 f8cb 	bl	8010f4e <_ZNSaIcED1Ev>
 8008db8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f008 f8c5 	bl	8010f4c <_ZNSaIcEC1Ev>
 8008dc2:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8008dc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008dca:	49cb      	ldr	r1, [pc, #812]	; (80090f8 <_ZN10SmartDryer10changeTimeEv+0x384>)
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f008 fb85 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008dd2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f008 f8b9 	bl	8010f4e <_ZNSaIcED1Ev>
	String Time = "", Date = "";
 8008ddc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008de0:	4618      	mov	r0, r3
 8008de2:	f008 f8b3 	bl	8010f4c <_ZNSaIcEC1Ev>
 8008de6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8008dea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008dee:	49c2      	ldr	r1, [pc, #776]	; (80090f8 <_ZN10SmartDryer10changeTimeEv+0x384>)
 8008df0:	4618      	mov	r0, r3
 8008df2:	f008 fb73 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008df6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f008 f8a7 	bl	8010f4e <_ZNSaIcED1Ev>
 8008e00:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008e04:	4618      	mov	r0, r3
 8008e06:	f008 f8a1 	bl	8010f4c <_ZNSaIcEC1Ev>
 8008e0a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8008e0e:	f107 0310 	add.w	r3, r7, #16
 8008e12:	49b9      	ldr	r1, [pc, #740]	; (80090f8 <_ZN10SmartDryer10changeTimeEv+0x384>)
 8008e14:	4618      	mov	r0, r3
 8008e16:	f008 fb61 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008e1a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f008 f895 	bl	8010f4e <_ZNSaIcED1Ev>
	while(!ExitChangeTime)
 8008e24:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f040 814d 	bne.w	80090c8 <_ZN10SmartDryer10changeTimeEv+0x354>
	{
		display->clearFrameBuffer();
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7fb fd1f 	bl	8004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 8008e38:	f107 0210 	add.w	r2, r7, #16
 8008e3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008e40:	4619      	mov	r1, r3
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f7fd fd9b 	bl	800697e <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		if(IsHours)
 8008e48:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d01b      	beq.n	8008e88 <_ZN10SmartDryer10changeTimeEv+0x114>
		{
			Title = "Imposta ora";
 8008e50:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008e54:	49a9      	ldr	r1, [pc, #676]	; (80090fc <_ZN10SmartDryer10changeTimeEv+0x388>)
 8008e56:	4618      	mov	r0, r3
 8008e58:	f008 fa8d 	bl	8011376 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Hour);
 8008e5c:	f897 20e6 	ldrb.w	r2, [r7, #230]	; 0xe6
 8008e60:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008e64:	4611      	mov	r1, r2
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7fa fad6 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8008e6c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8008e70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008e74:	4611      	mov	r1, r2
 8008e76:	4618      	mov	r0, r3
 8008e78:	f008 f9a5 	bl	80111c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008e7c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008e80:	4618      	mov	r0, r3
 8008e82:	f008 f994 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008e86:	e01a      	b.n	8008ebe <_ZN10SmartDryer10changeTimeEv+0x14a>
		}
		else
		{
			Title = "Imposta minuto";
 8008e88:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008e8c:	499c      	ldr	r1, [pc, #624]	; (8009100 <_ZN10SmartDryer10changeTimeEv+0x38c>)
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f008 fa71 	bl	8011376 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Minute);
 8008e94:	f897 20e5 	ldrb.w	r2, [r7, #229]	; 0xe5
 8008e98:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008e9c:	4611      	mov	r1, r2
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7fa faba 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8008ea4:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8008ea8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008eac:	4611      	mov	r1, r2
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f008 f989 	bl	80111c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8008eb4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f008 f978 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
		display->drawString(Title, NHDST7565_LCD::CENTER_POS, 5, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681c      	ldr	r4, [r3, #0]
 8008ec2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008ec6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8008eca:	4611      	mov	r1, r2
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f008 fad2 	bl	8011476 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008eda:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8008ede:	9300      	str	r3, [sp, #0]
 8008ee0:	2305      	movs	r3, #5
 8008ee2:	2283      	movs	r2, #131	; 0x83
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	f7fb fd0a 	bl	80048fe <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8008eea:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f008 f95d 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(Number, NHDST7565_LCD::CENTER_POS, 30, display->displayFonts[NHDST7565_LCD::W_9_H_17_B]);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681c      	ldr	r4, [r3, #0]
 8008ef8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008efc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8008f00:	4611      	mov	r1, r2
 8008f02:	4618      	mov	r0, r3
 8008f04:	f008 fab7 	bl	8011476 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008f10:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8008f14:	9300      	str	r3, [sp, #0]
 8008f16:	231e      	movs	r3, #30
 8008f18:	2283      	movs	r2, #131	; 0x83
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	f7fb fcef 	bl	80048fe <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8008f20:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8008f24:	4618      	mov	r0, r3
 8008f26:	f008 f942 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawSymbol(60, 30, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x0070); // triangolo alto
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6818      	ldr	r0, [r3, #0]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008f36:	2370      	movs	r3, #112	; 0x70
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	221e      	movs	r2, #30
 8008f3e:	213c      	movs	r1, #60	; 0x3c
 8008f40:	f7fb ff8c 	bl	8004e5c <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->drawSymbol(60, 55, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x006D); // triangolo basso
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6818      	ldr	r0, [r3, #0]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008f50:	236d      	movs	r3, #109	; 0x6d
 8008f52:	9300      	str	r3, [sp, #0]
 8008f54:	4613      	mov	r3, r2
 8008f56:	2237      	movs	r2, #55	; 0x37
 8008f58:	213c      	movs	r1, #60	; 0x3c
 8008f5a:	f7fb ff7f 	bl	8004e5c <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->sendFrameBuffer();
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7fb fc94 	bl	8004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 8008f68:	2308      	movs	r3, #8
 8008f6a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
		WichKey = keyboard->checkKey();
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	4618      	mov	r0, r3
 8008f74:	f7fc fa96 	bl	80054a4 <_ZN8DryerKey8checkKeyEv>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
		switch(WichKey)
 8008f7e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008f82:	2b07      	cmp	r3, #7
 8008f84:	f200 8087 	bhi.w	8009096 <_ZN10SmartDryer10changeTimeEv+0x322>
 8008f88:	a201      	add	r2, pc, #4	; (adr r2, 8008f90 <_ZN10SmartDryer10changeTimeEv+0x21c>)
 8008f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f8e:	bf00      	nop
 8008f90:	08008fb1 	.word	0x08008fb1
 8008f94:	08008ff1 	.word	0x08008ff1
 8008f98:	08009097 	.word	0x08009097
 8008f9c:	08009031 	.word	0x08009031
 8008fa0:	08008fb1 	.word	0x08008fb1
 8008fa4:	08008ff1 	.word	0x08008ff1
 8008fa8:	0800908f 	.word	0x0800908f
 8008fac:	08009079 	.word	0x08009079
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				if(IsHours)
 8008fb0:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d00d      	beq.n	8008fd4 <_ZN10SmartDryer10changeTimeEv+0x260>
				{
					if(Hour > 0)
 8008fb8:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d005      	beq.n	8008fcc <_ZN10SmartDryer10changeTimeEv+0x258>
						Hour--;
 8008fc0:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8008fc4:	3b01      	subs	r3, #1
 8008fc6:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
					if(Minute > 0)
						Minute--;
					else
						Minute = 59;
				}
				break;
 8008fca:	e067      	b.n	800909c <_ZN10SmartDryer10changeTimeEv+0x328>
						Hour = 23;
 8008fcc:	2317      	movs	r3, #23
 8008fce:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
				break;
 8008fd2:	e063      	b.n	800909c <_ZN10SmartDryer10changeTimeEv+0x328>
					if(Minute > 0)
 8008fd4:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d005      	beq.n	8008fe8 <_ZN10SmartDryer10changeTimeEv+0x274>
						Minute--;
 8008fdc:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 8008fe6:	e059      	b.n	800909c <_ZN10SmartDryer10changeTimeEv+0x328>
						Minute = 59;
 8008fe8:	233b      	movs	r3, #59	; 0x3b
 8008fea:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 8008fee:	e055      	b.n	800909c <_ZN10SmartDryer10changeTimeEv+0x328>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				if(IsHours)
 8008ff0:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d00d      	beq.n	8009014 <_ZN10SmartDryer10changeTimeEv+0x2a0>
				{
					if(Hour < 23)
 8008ff8:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8008ffc:	2b16      	cmp	r3, #22
 8008ffe:	d805      	bhi.n	800900c <_ZN10SmartDryer10changeTimeEv+0x298>
						Hour++;
 8009000:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8009004:	3301      	adds	r3, #1
 8009006:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
					if(Minute < 59)
						Minute++;
					else
						Minute = 0;
				}
				break;
 800900a:	e047      	b.n	800909c <_ZN10SmartDryer10changeTimeEv+0x328>
						Hour = 0;
 800900c:	2300      	movs	r3, #0
 800900e:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
				break;
 8009012:	e043      	b.n	800909c <_ZN10SmartDryer10changeTimeEv+0x328>
					if(Minute < 59)
 8009014:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8009018:	2b3a      	cmp	r3, #58	; 0x3a
 800901a:	d805      	bhi.n	8009028 <_ZN10SmartDryer10changeTimeEv+0x2b4>
						Minute++;
 800901c:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8009020:	3301      	adds	r3, #1
 8009022:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 8009026:	e039      	b.n	800909c <_ZN10SmartDryer10changeTimeEv+0x328>
						Minute = 0;
 8009028:	2300      	movs	r3, #0
 800902a:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 800902e:	e035      	b.n	800909c <_ZN10SmartDryer10changeTimeEv+0x328>
			case DryerKey::OK_KEY:
				if(IsHours)
 8009030:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8009034:	2b00      	cmp	r3, #0
 8009036:	d003      	beq.n	8009040 <_ZN10SmartDryer10changeTimeEv+0x2cc>
				{
					IsHours = false;
 8009038:	2300      	movs	r3, #0
 800903a:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
					NewTime.minute = Minute;
					NewTime.second = 0;
					clock->adjustTimeDate(NewTime);
					ExitChangeTime = true;
				}
				break;
 800903e:	e02d      	b.n	800909c <_ZN10SmartDryer10changeTimeEv+0x328>
					clock->getTimeDate(NewTime);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	f107 0208 	add.w	r2, r7, #8
 8009048:	4611      	mov	r1, r2
 800904a:	4618      	mov	r0, r3
 800904c:	f7fa fb72 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
					NewTime.hour = Hour;
 8009050:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8009054:	72bb      	strb	r3, [r7, #10]
					NewTime.minute = Minute;
 8009056:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 800905a:	727b      	strb	r3, [r7, #9]
					NewTime.second = 0;
 800905c:	2300      	movs	r3, #0
 800905e:	723b      	strb	r3, [r7, #8]
					clock->adjustTimeDate(NewTime);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6858      	ldr	r0, [r3, #4]
 8009064:	f107 0308 	add.w	r3, r7, #8
 8009068:	e893 0006 	ldmia.w	r3, {r1, r2}
 800906c:	f7fa fab8 	bl	80035e0 <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>
					ExitChangeTime = true;
 8009070:	2301      	movs	r3, #1
 8009072:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				break;
 8009076:	e011      	b.n	800909c <_ZN10SmartDryer10changeTimeEv+0x328>
			case DryerKey::LONG_OK_KEY:
				if(!IsHours)
 8009078:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 800907c:	f083 0301 	eor.w	r3, r3, #1
 8009080:	b2db      	uxtb	r3, r3
 8009082:	2b00      	cmp	r3, #0
 8009084:	d009      	beq.n	800909a <_ZN10SmartDryer10changeTimeEv+0x326>
				{
					IsHours = true;
 8009086:	2301      	movs	r3, #1
 8009088:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
				}
				break;
 800908c:	e005      	b.n	800909a <_ZN10SmartDryer10changeTimeEv+0x326>
			case DryerKey::LONG_LEFT_KEY:
				ExitChangeTime = true;
 800908e:	2301      	movs	r3, #1
 8009090:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				break;
 8009094:	e002      	b.n	800909c <_ZN10SmartDryer10changeTimeEv+0x328>
			default:
				break;
 8009096:	bf00      	nop
 8009098:	e000      	b.n	800909c <_ZN10SmartDryer10changeTimeEv+0x328>
				break;
 800909a:	bf00      	nop
		}
		peripheralsControl();
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f7fd fc59 	bl	8006954 <_ZN10SmartDryer18peripheralsControlEv>
		statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80090aa:	4610      	mov	r0, r2
 80090ac:	f7fc fd56 	bl	8005b5c <_ZN13SerialMessage17isDeviceConnectedEv>
 80090b0:	4603      	mov	r3, r0
 80090b2:	7263      	strb	r3, [r4, #9]
		if(statusParam->serialDeviceAttached)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090b8:	7a5b      	ldrb	r3, [r3, #9]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	f43f aeb2 	beq.w	8008e24 <_ZN10SmartDryer10changeTimeEv+0xb0>
		{
			serialComunicationCtrl();
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f7fe f949 	bl	8007358 <_ZN10SmartDryer22serialComunicationCtrlEv>
	while(!ExitChangeTime)
 80090c6:	e6ad      	b.n	8008e24 <_ZN10SmartDryer10changeTimeEv+0xb0>
	String Time = "", Date = "";
 80090c8:	f107 0310 	add.w	r3, r7, #16
 80090cc:	4618      	mov	r0, r3
 80090ce:	f008 f86e 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80090d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80090d6:	4618      	mov	r0, r3
 80090d8:	f008 f869 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Title = "", Number = "";
 80090dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80090e0:	4618      	mov	r0, r3
 80090e2:	f008 f864 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80090e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80090ea:	4618      	mov	r0, r3
 80090ec:	f008 f85f 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
}
 80090f0:	bf00      	nop
 80090f2:	37ec      	adds	r7, #236	; 0xec
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd90      	pop	{r4, r7, pc}
 80090f8:	08012424 	.word	0x08012424
 80090fc:	08012350 	.word	0x08012350
 8009100:	0801256c 	.word	0x0801256c

08009104 <_ZN10SmartDryer10changeDateEv>:

void SmartDryer::changeDate()
{
 8009104:	b590      	push	{r4, r7, lr}
 8009106:	b0c5      	sub	sp, #276	; 0x114
 8009108:	af02      	add	r7, sp, #8
 800910a:	1d3b      	adds	r3, r7, #4
 800910c:	6018      	str	r0, [r3, #0]
	bool ExitChangeDate = false;
 800910e:	2300      	movs	r3, #0
 8009110:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	uint8_t Day = 1, Month = 1, Year = 20;
 8009114:	2301      	movs	r3, #1
 8009116:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 800911a:	2301      	movs	r3, #1
 800911c:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
 8009120:	2314      	movs	r3, #20
 8009122:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
	uint8_t WichDateVar = 0;
 8009126:	2300      	movs	r3, #0
 8009128:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
	String Title = "", Number = "";
 800912c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009130:	4618      	mov	r0, r3
 8009132:	f007 ff0b 	bl	8010f4c <_ZNSaIcEC1Ev>
 8009136:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800913a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800913e:	49db      	ldr	r1, [pc, #876]	; (80094ac <_ZN10SmartDryer10changeDateEv+0x3a8>)
 8009140:	4618      	mov	r0, r3
 8009142:	f008 f9cb 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009146:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800914a:	4618      	mov	r0, r3
 800914c:	f007 feff 	bl	8010f4e <_ZNSaIcED1Ev>
 8009150:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8009154:	4618      	mov	r0, r3
 8009156:	f007 fef9 	bl	8010f4c <_ZNSaIcEC1Ev>
 800915a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800915e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009162:	49d2      	ldr	r1, [pc, #840]	; (80094ac <_ZN10SmartDryer10changeDateEv+0x3a8>)
 8009164:	4618      	mov	r0, r3
 8009166:	f008 f9b9 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800916a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800916e:	4618      	mov	r0, r3
 8009170:	f007 feed 	bl	8010f4e <_ZNSaIcED1Ev>
	String Time = "", Date = "";
 8009174:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8009178:	4618      	mov	r0, r3
 800917a:	f007 fee7 	bl	8010f4c <_ZNSaIcEC1Ev>
 800917e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8009182:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009186:	49c9      	ldr	r1, [pc, #804]	; (80094ac <_ZN10SmartDryer10changeDateEv+0x3a8>)
 8009188:	4618      	mov	r0, r3
 800918a:	f008 f9a7 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800918e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8009192:	4618      	mov	r0, r3
 8009194:	f007 fedb 	bl	8010f4e <_ZNSaIcED1Ev>
 8009198:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800919c:	4618      	mov	r0, r3
 800919e:	f007 fed5 	bl	8010f4c <_ZNSaIcEC1Ev>
 80091a2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80091a6:	f107 0314 	add.w	r3, r7, #20
 80091aa:	49c0      	ldr	r1, [pc, #768]	; (80094ac <_ZN10SmartDryer10changeDateEv+0x3a8>)
 80091ac:	4618      	mov	r0, r3
 80091ae:	f008 f995 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80091b2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80091b6:	4618      	mov	r0, r3
 80091b8:	f007 fec9 	bl	8010f4e <_ZNSaIcED1Ev>
	while(!ExitChangeDate)
 80091bc:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f040 81ce 	bne.w	8009562 <_ZN10SmartDryer10changeDateEv+0x45e>
	{
		display->clearFrameBuffer();
 80091c6:	1d3b      	adds	r3, r7, #4
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7fb fb52 	bl	8004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 80091d2:	f107 0214 	add.w	r2, r7, #20
 80091d6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80091da:	1d3b      	adds	r3, r7, #4
 80091dc:	6818      	ldr	r0, [r3, #0]
 80091de:	f7fd fbce 	bl	800697e <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		if(WichDateVar == 0)
 80091e2:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d12b      	bne.n	8009242 <_ZN10SmartDryer10changeDateEv+0x13e>
		{
			Title = "Imposta mese";
 80091ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80091ee:	49b0      	ldr	r1, [pc, #704]	; (80094b0 <_ZN10SmartDryer10changeDateEv+0x3ac>)
 80091f0:	4618      	mov	r0, r3
 80091f2:	f008 f8c0 	bl	8011376 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = String(monthNames[Month - 1]);
 80091f6:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80091fa:	3b01      	subs	r3, #1
 80091fc:	4aad      	ldr	r2, [pc, #692]	; (80094b4 <_ZN10SmartDryer10changeDateEv+0x3b0>)
 80091fe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009202:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009206:	4618      	mov	r0, r3
 8009208:	f007 fea0 	bl	8010f4c <_ZNSaIcEC1Ev>
 800920c:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8009210:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8009214:	4621      	mov	r1, r4
 8009216:	4618      	mov	r0, r3
 8009218:	f008 f960 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800921c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8009220:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009224:	4611      	mov	r1, r2
 8009226:	4618      	mov	r0, r3
 8009228:	f007 ffcd 	bl	80111c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800922c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8009230:	4618      	mov	r0, r3
 8009232:	f007 ffbc 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009236:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800923a:	4618      	mov	r0, r3
 800923c:	f007 fe87 	bl	8010f4e <_ZNSaIcED1Ev>
 8009240:	e03a      	b.n	80092b8 <_ZN10SmartDryer10changeDateEv+0x1b4>
		}
		else if(WichDateVar == 1)
 8009242:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8009246:	2b01      	cmp	r3, #1
 8009248:	d11b      	bne.n	8009282 <_ZN10SmartDryer10changeDateEv+0x17e>
		{
			Title = "Imposta giorno";
 800924a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800924e:	499a      	ldr	r1, [pc, #616]	; (80094b8 <_ZN10SmartDryer10changeDateEv+0x3b4>)
 8009250:	4618      	mov	r0, r3
 8009252:	f008 f890 	bl	8011376 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Day);
 8009256:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 800925a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800925e:	4611      	mov	r1, r2
 8009260:	4618      	mov	r0, r3
 8009262:	f7fa f8d9 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8009266:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800926a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800926e:	4611      	mov	r1, r2
 8009270:	4618      	mov	r0, r3
 8009272:	f007 ffa8 	bl	80111c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009276:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800927a:	4618      	mov	r0, r3
 800927c:	f007 ff97 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009280:	e01a      	b.n	80092b8 <_ZN10SmartDryer10changeDateEv+0x1b4>
		}
		else
		{
			Title = "Imposta anno";
 8009282:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009286:	498d      	ldr	r1, [pc, #564]	; (80094bc <_ZN10SmartDryer10changeDateEv+0x3b8>)
 8009288:	4618      	mov	r0, r3
 800928a:	f008 f874 	bl	8011376 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Year);
 800928e:	f897 2104 	ldrb.w	r2, [r7, #260]	; 0x104
 8009292:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8009296:	4611      	mov	r1, r2
 8009298:	4618      	mov	r0, r3
 800929a:	f7fa f8bd 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 800929e:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80092a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80092a6:	4611      	mov	r1, r2
 80092a8:	4618      	mov	r0, r3
 80092aa:	f007 ff8c 	bl	80111c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80092ae:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80092b2:	4618      	mov	r0, r3
 80092b4:	f007 ff7b 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
		display->drawString(Title, NHDST7565_LCD::CENTER_POS, 5, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 80092b8:	1d3b      	adds	r3, r7, #4
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681c      	ldr	r4, [r3, #0]
 80092be:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80092c2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80092c6:	4611      	mov	r1, r2
 80092c8:	4618      	mov	r0, r3
 80092ca:	f008 f8d4 	bl	8011476 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80092ce:	1d3b      	adds	r3, r7, #4
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80092d8:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80092dc:	9300      	str	r3, [sp, #0]
 80092de:	2305      	movs	r3, #5
 80092e0:	2283      	movs	r2, #131	; 0x83
 80092e2:	4620      	mov	r0, r4
 80092e4:	f7fb fb0b 	bl	80048fe <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80092e8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80092ec:	4618      	mov	r0, r3
 80092ee:	f007 ff5e 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(Number, NHDST7565_LCD::CENTER_POS, 30, display->displayFonts[NHDST7565_LCD::W_9_H_17_B]);
 80092f2:	1d3b      	adds	r3, r7, #4
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	681c      	ldr	r4, [r3, #0]
 80092f8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80092fc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8009300:	4611      	mov	r1, r2
 8009302:	4618      	mov	r0, r3
 8009304:	f008 f8b7 	bl	8011476 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009308:	1d3b      	adds	r3, r7, #4
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009312:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	231e      	movs	r3, #30
 800931a:	2283      	movs	r2, #131	; 0x83
 800931c:	4620      	mov	r0, r4
 800931e:	f7fb faee 	bl	80048fe <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009322:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8009326:	4618      	mov	r0, r3
 8009328:	f007 ff41 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawSymbol(60, 30, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x0070); // triangolo alto
 800932c:	1d3b      	adds	r3, r7, #4
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	6818      	ldr	r0, [r3, #0]
 8009332:	1d3b      	adds	r3, r7, #4
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800933c:	2370      	movs	r3, #112	; 0x70
 800933e:	9300      	str	r3, [sp, #0]
 8009340:	4613      	mov	r3, r2
 8009342:	221e      	movs	r2, #30
 8009344:	213c      	movs	r1, #60	; 0x3c
 8009346:	f7fb fd89 	bl	8004e5c <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->drawSymbol(60, 55, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x006D); // triangolo basso
 800934a:	1d3b      	adds	r3, r7, #4
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	6818      	ldr	r0, [r3, #0]
 8009350:	1d3b      	adds	r3, r7, #4
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800935a:	236d      	movs	r3, #109	; 0x6d
 800935c:	9300      	str	r3, [sp, #0]
 800935e:	4613      	mov	r3, r2
 8009360:	2237      	movs	r2, #55	; 0x37
 8009362:	213c      	movs	r1, #60	; 0x3c
 8009364:	f7fb fd7a 	bl	8004e5c <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->sendFrameBuffer();
 8009368:	1d3b      	adds	r3, r7, #4
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4618      	mov	r0, r3
 8009370:	f7fb fa8e 	bl	8004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 8009374:	2308      	movs	r3, #8
 8009376:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		WichKey = keyboard->checkKey();
 800937a:	1d3b      	adds	r3, r7, #4
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	4618      	mov	r0, r3
 8009382:	f7fc f88f 	bl	80054a4 <_ZN8DryerKey8checkKeyEv>
 8009386:	4603      	mov	r3, r0
 8009388:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		switch(WichKey)
 800938c:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8009390:	2b07      	cmp	r3, #7
 8009392:	f200 80c8 	bhi.w	8009526 <_ZN10SmartDryer10changeDateEv+0x422>
 8009396:	a201      	add	r2, pc, #4	; (adr r2, 800939c <_ZN10SmartDryer10changeDateEv+0x298>)
 8009398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800939c:	080093bd 	.word	0x080093bd
 80093a0:	08009429 	.word	0x08009429
 80093a4:	08009527 	.word	0x08009527
 80093a8:	08009497 	.word	0x08009497
 80093ac:	080093bd 	.word	0x080093bd
 80093b0:	08009429 	.word	0x08009429
 80093b4:	0800951f 	.word	0x0800951f
 80093b8:	0800950b 	.word	0x0800950b
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				if(WichDateVar == 1)
 80093bc:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d111      	bne.n	80093e8 <_ZN10SmartDryer10changeDateEv+0x2e4>
				{
					if(Day > 1)
 80093c4:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d905      	bls.n	80093d8 <_ZN10SmartDryer10changeDateEv+0x2d4>
						Day--;
 80093cc:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80093d0:	3b01      	subs	r3, #1
 80093d2:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
					if(Year > 20)
						Year--;
					else
						Year = 99;
				}
				break;
 80093d6:	e0a9      	b.n	800952c <_ZN10SmartDryer10changeDateEv+0x428>
						Day = daysInMonth[Month - 1];
 80093d8:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80093dc:	3b01      	subs	r3, #1
 80093de:	4a38      	ldr	r2, [pc, #224]	; (80094c0 <_ZN10SmartDryer10changeDateEv+0x3bc>)
 80093e0:	5cd3      	ldrb	r3, [r2, r3]
 80093e2:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
				break;
 80093e6:	e0a1      	b.n	800952c <_ZN10SmartDryer10changeDateEv+0x428>
				else if(WichDateVar == 0)
 80093e8:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d10d      	bne.n	800940c <_ZN10SmartDryer10changeDateEv+0x308>
					if(Month > 1)
 80093f0:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d905      	bls.n	8009404 <_ZN10SmartDryer10changeDateEv+0x300>
						Month--;
 80093f8:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80093fc:	3b01      	subs	r3, #1
 80093fe:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 8009402:	e093      	b.n	800952c <_ZN10SmartDryer10changeDateEv+0x428>
						Month = 12;
 8009404:	230c      	movs	r3, #12
 8009406:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 800940a:	e08f      	b.n	800952c <_ZN10SmartDryer10changeDateEv+0x428>
					if(Year > 20)
 800940c:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8009410:	2b14      	cmp	r3, #20
 8009412:	d905      	bls.n	8009420 <_ZN10SmartDryer10changeDateEv+0x31c>
						Year--;
 8009414:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8009418:	3b01      	subs	r3, #1
 800941a:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 800941e:	e085      	b.n	800952c <_ZN10SmartDryer10changeDateEv+0x428>
						Year = 99;
 8009420:	2363      	movs	r3, #99	; 0x63
 8009422:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 8009426:	e081      	b.n	800952c <_ZN10SmartDryer10changeDateEv+0x428>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				if(WichDateVar == 1)
 8009428:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 800942c:	2b01      	cmp	r3, #1
 800942e:	d112      	bne.n	8009456 <_ZN10SmartDryer10changeDateEv+0x352>
				{
					if(Day < daysInMonth[Month - 1])
 8009430:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8009434:	3b01      	subs	r3, #1
 8009436:	4a22      	ldr	r2, [pc, #136]	; (80094c0 <_ZN10SmartDryer10changeDateEv+0x3bc>)
 8009438:	5cd3      	ldrb	r3, [r2, r3]
 800943a:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 800943e:	429a      	cmp	r2, r3
 8009440:	d205      	bcs.n	800944e <_ZN10SmartDryer10changeDateEv+0x34a>
						Day++;
 8009442:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8009446:	3301      	adds	r3, #1
 8009448:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
					if(Year < 99)
						Year++;
					else
						Year = 20;
				}
				break;
 800944c:	e06e      	b.n	800952c <_ZN10SmartDryer10changeDateEv+0x428>
						Day = 1;
 800944e:	2301      	movs	r3, #1
 8009450:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
				break;
 8009454:	e06a      	b.n	800952c <_ZN10SmartDryer10changeDateEv+0x428>
				else if(WichDateVar == 0)
 8009456:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 800945a:	2b00      	cmp	r3, #0
 800945c:	d10d      	bne.n	800947a <_ZN10SmartDryer10changeDateEv+0x376>
					if(Month < 12)
 800945e:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8009462:	2b0b      	cmp	r3, #11
 8009464:	d805      	bhi.n	8009472 <_ZN10SmartDryer10changeDateEv+0x36e>
						Month++;
 8009466:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 800946a:	3301      	adds	r3, #1
 800946c:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 8009470:	e05c      	b.n	800952c <_ZN10SmartDryer10changeDateEv+0x428>
						Month = 1;
 8009472:	2301      	movs	r3, #1
 8009474:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 8009478:	e058      	b.n	800952c <_ZN10SmartDryer10changeDateEv+0x428>
					if(Year < 99)
 800947a:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 800947e:	2b62      	cmp	r3, #98	; 0x62
 8009480:	d805      	bhi.n	800948e <_ZN10SmartDryer10changeDateEv+0x38a>
						Year++;
 8009482:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8009486:	3301      	adds	r3, #1
 8009488:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 800948c:	e04e      	b.n	800952c <_ZN10SmartDryer10changeDateEv+0x428>
						Year = 20;
 800948e:	2314      	movs	r3, #20
 8009490:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 8009494:	e04a      	b.n	800952c <_ZN10SmartDryer10changeDateEv+0x428>
			case DryerKey::OK_KEY:
				if(WichDateVar < 2)
 8009496:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 800949a:	2b01      	cmp	r3, #1
 800949c:	d812      	bhi.n	80094c4 <_ZN10SmartDryer10changeDateEv+0x3c0>
				{
					WichDateVar++;
 800949e:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80094a2:	3301      	adds	r3, #1
 80094a4:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
					NewDate.month = Month;
					NewDate.year = Year + 2000;
					clock->adjustTimeDate(NewDate);
					ExitChangeDate = true;
				}
				break;
 80094a8:	e040      	b.n	800952c <_ZN10SmartDryer10changeDateEv+0x428>
 80094aa:	bf00      	nop
 80094ac:	08012424 	.word	0x08012424
 80094b0:	0801257c 	.word	0x0801257c
 80094b4:	20000000 	.word	0x20000000
 80094b8:	0801258c 	.word	0x0801258c
 80094bc:	0801259c 	.word	0x0801259c
 80094c0:	080154a4 	.word	0x080154a4
					clock->getTimeDate(NewDate);
 80094c4:	1d3b      	adds	r3, r7, #4
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	f107 020c 	add.w	r2, r7, #12
 80094ce:	4611      	mov	r1, r2
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7fa f92f 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
					NewDate.day = Day;
 80094d6:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80094da:	73fb      	strb	r3, [r7, #15]
					NewDate.month = Month;
 80094dc:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80094e0:	743b      	strb	r3, [r7, #16]
					NewDate.year = Year + 2000;
 80094e2:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	827b      	strh	r3, [r7, #18]
					clock->adjustTimeDate(NewDate);
 80094f0:	1d3b      	adds	r3, r7, #4
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	6858      	ldr	r0, [r3, #4]
 80094f6:	f107 030c 	add.w	r3, r7, #12
 80094fa:	e893 0006 	ldmia.w	r3, {r1, r2}
 80094fe:	f7fa f86f 	bl	80035e0 <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>
					ExitChangeDate = true;
 8009502:	2301      	movs	r3, #1
 8009504:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				break;
 8009508:	e010      	b.n	800952c <_ZN10SmartDryer10changeDateEv+0x428>
			case DryerKey::LONG_OK_KEY:
				if(WichDateVar > 0)
 800950a:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 800950e:	2b00      	cmp	r3, #0
 8009510:	d00b      	beq.n	800952a <_ZN10SmartDryer10changeDateEv+0x426>
				{
					WichDateVar--;
 8009512:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8009516:	3b01      	subs	r3, #1
 8009518:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
				}
				break;
 800951c:	e005      	b.n	800952a <_ZN10SmartDryer10changeDateEv+0x426>
			case DryerKey::LONG_LEFT_KEY:
				ExitChangeDate = true;
 800951e:	2301      	movs	r3, #1
 8009520:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				break;
 8009524:	e002      	b.n	800952c <_ZN10SmartDryer10changeDateEv+0x428>
			default:
				break;
 8009526:	bf00      	nop
 8009528:	e000      	b.n	800952c <_ZN10SmartDryer10changeDateEv+0x428>
				break;
 800952a:	bf00      	nop
		}
		peripheralsControl();
 800952c:	1d3b      	adds	r3, r7, #4
 800952e:	6818      	ldr	r0, [r3, #0]
 8009530:	f7fd fa10 	bl	8006954 <_ZN10SmartDryer18peripheralsControlEv>
		statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 8009534:	1d3b      	adds	r3, r7, #4
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800953a:	1d3b      	adds	r3, r7, #4
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8009540:	4610      	mov	r0, r2
 8009542:	f7fc fb0b 	bl	8005b5c <_ZN13SerialMessage17isDeviceConnectedEv>
 8009546:	4603      	mov	r3, r0
 8009548:	7263      	strb	r3, [r4, #9]
		if(statusParam->serialDeviceAttached)
 800954a:	1d3b      	adds	r3, r7, #4
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009550:	7a5b      	ldrb	r3, [r3, #9]
 8009552:	2b00      	cmp	r3, #0
 8009554:	f43f ae32 	beq.w	80091bc <_ZN10SmartDryer10changeDateEv+0xb8>
		{
			serialComunicationCtrl();
 8009558:	1d3b      	adds	r3, r7, #4
 800955a:	6818      	ldr	r0, [r3, #0]
 800955c:	f7fd fefc 	bl	8007358 <_ZN10SmartDryer22serialComunicationCtrlEv>
	while(!ExitChangeDate)
 8009560:	e62c      	b.n	80091bc <_ZN10SmartDryer10changeDateEv+0xb8>
	String Time = "", Date = "";
 8009562:	f107 0314 	add.w	r3, r7, #20
 8009566:	4618      	mov	r0, r3
 8009568:	f007 fe21 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800956c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009570:	4618      	mov	r0, r3
 8009572:	f007 fe1c 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Title = "", Number = "";
 8009576:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800957a:	4618      	mov	r0, r3
 800957c:	f007 fe17 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009580:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009584:	4618      	mov	r0, r3
 8009586:	f007 fe12 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
}
 800958a:	bf00      	nop
 800958c:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8009590:	46bd      	mov	sp, r7
 8009592:	bd90      	pop	{r4, r7, pc}

08009594 <_ZN10SmartDryer8showInfoEv>:

void SmartDryer::showInfo()
{
 8009594:	b590      	push	{r4, r7, lr}
 8009596:	b0cd      	sub	sp, #308	; 0x134
 8009598:	af02      	add	r7, sp, #8
 800959a:	1d3b      	adds	r3, r7, #4
 800959c:	6018      	str	r0, [r3, #0]
	bool ExitShowInfo = false;
 800959e:	2300      	movs	r3, #0
 80095a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	String Time = "", Date = "";
 80095a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80095a8:	4618      	mov	r0, r3
 80095aa:	f007 fccf 	bl	8010f4c <_ZNSaIcEC1Ev>
 80095ae:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80095b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80095b6:	49a6      	ldr	r1, [pc, #664]	; (8009850 <_ZN10SmartDryer8showInfoEv+0x2bc>)
 80095b8:	4618      	mov	r0, r3
 80095ba:	f007 ff8f 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80095be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80095c2:	4618      	mov	r0, r3
 80095c4:	f007 fcc3 	bl	8010f4e <_ZNSaIcED1Ev>
 80095c8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80095cc:	4618      	mov	r0, r3
 80095ce:	f007 fcbd 	bl	8010f4c <_ZNSaIcEC1Ev>
 80095d2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80095d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80095da:	499d      	ldr	r1, [pc, #628]	; (8009850 <_ZN10SmartDryer8showInfoEv+0x2bc>)
 80095dc:	4618      	mov	r0, r3
 80095de:	f007 ff7d 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80095e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80095e6:	4618      	mov	r0, r3
 80095e8:	f007 fcb1 	bl	8010f4e <_ZNSaIcED1Ev>
	while(!ExitShowInfo)
 80095ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	f040 811d 	bne.w	8009830 <_ZN10SmartDryer8showInfoEv+0x29c>
	{
		String TempReaded = floatString(chamberTemperature.readedValueFL, 1) + "C";
 80095f6:	1d3b      	adds	r3, r7, #4
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80095fe:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8009602:	1d39      	adds	r1, r7, #4
 8009604:	2301      	movs	r3, #1
 8009606:	6809      	ldr	r1, [r1, #0]
 8009608:	f7fc fee0 	bl	80063cc <_ZN10SmartDryer11floatStringB5cxx11Efh>
 800960c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009610:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8009614:	4a8f      	ldr	r2, [pc, #572]	; (8009854 <_ZN10SmartDryer8showInfoEv+0x2c0>)
 8009616:	4618      	mov	r0, r3
 8009618:	f7fa fcca 	bl	8003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800961c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009620:	4618      	mov	r0, r3
 8009622:	f007 fdc4 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		String HumidityReaded = floatString(chamberHumity.readedValueFL, 1) + "%";
 8009626:	1d3b      	adds	r3, r7, #4
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800962e:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8009632:	1d39      	adds	r1, r7, #4
 8009634:	2301      	movs	r3, #1
 8009636:	6809      	ldr	r1, [r1, #0]
 8009638:	f7fc fec8 	bl	80063cc <_ZN10SmartDryer11floatStringB5cxx11Efh>
 800963c:	f107 030c 	add.w	r3, r7, #12
 8009640:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8009644:	4a84      	ldr	r2, [pc, #528]	; (8009858 <_ZN10SmartDryer8showInfoEv+0x2c4>)
 8009646:	4618      	mov	r0, r3
 8009648:	f7fa fcb2 	bl	8003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800964c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009650:	4618      	mov	r0, r3
 8009652:	f007 fdac 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->clearFrameBuffer();
 8009656:	1d3b      	adds	r3, r7, #4
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4618      	mov	r0, r3
 800965e:	f7fb f90a 	bl	8004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 8009662:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8009666:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800966a:	1d3b      	adds	r3, r7, #4
 800966c:	6818      	ldr	r0, [r3, #0]
 800966e:	f7fd f986 	bl	800697e <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString("Condizioni camera", NHDST7565_LCD::CENTER_POS, 8, display->displayFonts[NHDST7565_LCD::W_5_H_8]);
 8009672:	1d3b      	adds	r3, r7, #4
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	681c      	ldr	r4, [r3, #0]
 8009678:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800967c:	4618      	mov	r0, r3
 800967e:	f007 fc65 	bl	8010f4c <_ZNSaIcEC1Ev>
 8009682:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8009686:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800968a:	4974      	ldr	r1, [pc, #464]	; (800985c <_ZN10SmartDryer8showInfoEv+0x2c8>)
 800968c:	4618      	mov	r0, r3
 800968e:	f007 ff25 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009692:	1d3b      	adds	r3, r7, #4
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800969c:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80096a0:	9300      	str	r3, [sp, #0]
 80096a2:	2308      	movs	r3, #8
 80096a4:	2283      	movs	r2, #131	; 0x83
 80096a6:	4620      	mov	r0, r4
 80096a8:	f7fb f929 	bl	80048fe <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80096ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80096b0:	4618      	mov	r0, r3
 80096b2:	f007 fd7c 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80096b6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80096ba:	4618      	mov	r0, r3
 80096bc:	f007 fc47 	bl	8010f4e <_ZNSaIcED1Ev>
		display->drawString(TempReaded + "    " + HumidityReaded, NHDST7565_LCD::CENTER_POS, 20, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 80096c0:	1d3b      	adds	r3, r7, #4
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681c      	ldr	r4, [r3, #0]
 80096c6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80096ca:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80096ce:	4a64      	ldr	r2, [pc, #400]	; (8009860 <_ZN10SmartDryer8showInfoEv+0x2cc>)
 80096d0:	4618      	mov	r0, r3
 80096d2:	f7fa fc43 	bl	8003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 80096d6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80096da:	f107 020c 	add.w	r2, r7, #12
 80096de:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7fa fc4d 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 80096e8:	1d3b      	adds	r3, r7, #4
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80096f2:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 80096f6:	9300      	str	r3, [sp, #0]
 80096f8:	2314      	movs	r3, #20
 80096fa:	2283      	movs	r2, #131	; 0x83
 80096fc:	4620      	mov	r0, r4
 80096fe:	f7fb f8fe 	bl	80048fe <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009702:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8009706:	4618      	mov	r0, r3
 8009708:	f007 fd51 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800970c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8009710:	4618      	mov	r0, r3
 8009712:	f007 fd4c 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString("Versione SW", NHDST7565_LCD::CENTER_POS, 40, display->displayFonts[NHDST7565_LCD::W_5_H_8]);
 8009716:	1d3b      	adds	r3, r7, #4
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	681c      	ldr	r4, [r3, #0]
 800971c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009720:	4618      	mov	r0, r3
 8009722:	f007 fc13 	bl	8010f4c <_ZNSaIcEC1Ev>
 8009726:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800972a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800972e:	494d      	ldr	r1, [pc, #308]	; (8009864 <_ZN10SmartDryer8showInfoEv+0x2d0>)
 8009730:	4618      	mov	r0, r3
 8009732:	f007 fed3 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009736:	1d3b      	adds	r3, r7, #4
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009740:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8009744:	9300      	str	r3, [sp, #0]
 8009746:	2328      	movs	r3, #40	; 0x28
 8009748:	2283      	movs	r2, #131	; 0x83
 800974a:	4620      	mov	r0, r4
 800974c:	f7fb f8d7 	bl	80048fe <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009750:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8009754:	4618      	mov	r0, r3
 8009756:	f007 fd2a 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800975a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800975e:	4618      	mov	r0, r3
 8009760:	f007 fbf5 	bl	8010f4e <_ZNSaIcED1Ev>
		display->drawString(String(SW_VERSION), NHDST7565_LCD::CENTER_POS, 50, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8009764:	1d3b      	adds	r3, r7, #4
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681c      	ldr	r4, [r3, #0]
 800976a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800976e:	4618      	mov	r0, r3
 8009770:	f007 fbec 	bl	8010f4c <_ZNSaIcEC1Ev>
 8009774:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8009778:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800977c:	493a      	ldr	r1, [pc, #232]	; (8009868 <_ZN10SmartDryer8showInfoEv+0x2d4>)
 800977e:	4618      	mov	r0, r3
 8009780:	f007 feac 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009784:	1d3b      	adds	r3, r7, #4
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800978e:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8009792:	9300      	str	r3, [sp, #0]
 8009794:	2332      	movs	r3, #50	; 0x32
 8009796:	2283      	movs	r2, #131	; 0x83
 8009798:	4620      	mov	r0, r4
 800979a:	f7fb f8b0 	bl	80048fe <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800979e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80097a2:	4618      	mov	r0, r3
 80097a4:	f007 fd03 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80097a8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80097ac:	4618      	mov	r0, r3
 80097ae:	f007 fbce 	bl	8010f4e <_ZNSaIcED1Ev>
		display->sendFrameBuffer();
 80097b2:	1d3b      	adds	r3, r7, #4
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7fb f869 	bl	8004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 80097be:	2308      	movs	r3, #8
 80097c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
		WichKey = keyboard->checkKey();
 80097c4:	1d3b      	adds	r3, r7, #4
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7fb fe6a 	bl	80054a4 <_ZN8DryerKey8checkKeyEv>
 80097d0:	4603      	mov	r3, r0
 80097d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
		switch(WichKey)
 80097d6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80097da:	2b06      	cmp	r3, #6
 80097dc:	d000      	beq.n	80097e0 <_ZN10SmartDryer8showInfoEv+0x24c>
		{
			case DryerKey::LONG_LEFT_KEY:
				ExitShowInfo = true;
				break;
			default:
				break;
 80097de:	e003      	b.n	80097e8 <_ZN10SmartDryer8showInfoEv+0x254>
				ExitShowInfo = true;
 80097e0:	2301      	movs	r3, #1
 80097e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
				break;
 80097e6:	bf00      	nop
		}
		peripheralsControl();
 80097e8:	1d3b      	adds	r3, r7, #4
 80097ea:	6818      	ldr	r0, [r3, #0]
 80097ec:	f7fd f8b2 	bl	8006954 <_ZN10SmartDryer18peripheralsControlEv>
		statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 80097f0:	1d3b      	adds	r3, r7, #4
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097f6:	1d3b      	adds	r3, r7, #4
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80097fc:	4610      	mov	r0, r2
 80097fe:	f7fc f9ad 	bl	8005b5c <_ZN13SerialMessage17isDeviceConnectedEv>
 8009802:	4603      	mov	r3, r0
 8009804:	7263      	strb	r3, [r4, #9]
		if(statusParam->serialDeviceAttached)
 8009806:	1d3b      	adds	r3, r7, #4
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800980c:	7a5b      	ldrb	r3, [r3, #9]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d003      	beq.n	800981a <_ZN10SmartDryer8showInfoEv+0x286>
		{
			serialComunicationCtrl();
 8009812:	1d3b      	adds	r3, r7, #4
 8009814:	6818      	ldr	r0, [r3, #0]
 8009816:	f7fd fd9f 	bl	8007358 <_ZN10SmartDryer22serialComunicationCtrlEv>
		String HumidityReaded = floatString(chamberHumity.readedValueFL, 1) + "%";
 800981a:	f107 030c 	add.w	r3, r7, #12
 800981e:	4618      	mov	r0, r3
 8009820:	f007 fcc5 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		String TempReaded = floatString(chamberTemperature.readedValueFL, 1) + "C";
 8009824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009828:	4618      	mov	r0, r3
 800982a:	f007 fcc0 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	while(!ExitShowInfo)
 800982e:	e6dd      	b.n	80095ec <_ZN10SmartDryer8showInfoEv+0x58>
	String Time = "", Date = "";
 8009830:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009834:	4618      	mov	r0, r3
 8009836:	f007 fcba 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800983a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800983e:	4618      	mov	r0, r3
 8009840:	f007 fcb5 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
}
 8009844:	bf00      	nop
 8009846:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 800984a:	46bd      	mov	sp, r7
 800984c:	bd90      	pop	{r4, r7, pc}
 800984e:	bf00      	nop
 8009850:	08012424 	.word	0x08012424
 8009854:	080125ac 	.word	0x080125ac
 8009858:	080125b0 	.word	0x080125b0
 800985c:	080125b4 	.word	0x080125b4
 8009860:	080125c8 	.word	0x080125c8
 8009864:	080125d0 	.word	0x080125d0
 8009868:	080125dc 	.word	0x080125dc

0800986c <_ZN10SmartDryer13changeProgramEh>:

void SmartDryer::changeProgram(uint8_t WichProgram)
{
 800986c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800986e:	b0ef      	sub	sp, #444	; 0x1bc
 8009870:	af04      	add	r7, sp, #16
 8009872:	1d3b      	adds	r3, r7, #4
 8009874:	6018      	str	r0, [r3, #0]
 8009876:	460a      	mov	r2, r1
 8009878:	1cfb      	adds	r3, r7, #3
 800987a:	701a      	strb	r2, [r3, #0]
	bool ExitChangeProgram = false;
 800987c:	2300      	movs	r3, #0
 800987e:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
	uint8_t WichSetting = 0;
 8009882:	2300      	movs	r3, #0
 8009884:	f887 31a6 	strb.w	r3, [r7, #422]	; 0x1a6
	const uint8_t MAX_SETTINGS = 5;
 8009888:	2305      	movs	r3, #5
 800988a:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
	PROGRAM_STRUCURE NewProgram = dryerPrograms[WichProgram];
 800988e:	1cfb      	adds	r3, r7, #3
 8009890:	781a      	ldrb	r2, [r3, #0]
 8009892:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8009896:	1d3b      	adds	r3, r7, #4
 8009898:	6819      	ldr	r1, [r3, #0]
 800989a:	4613      	mov	r3, r2
 800989c:	005b      	lsls	r3, r3, #1
 800989e:	4413      	add	r3, r2
 80098a0:	00db      	lsls	r3, r3, #3
 80098a2:	440b      	add	r3, r1
 80098a4:	3348      	adds	r3, #72	; 0x48
 80098a6:	4604      	mov	r4, r0
 80098a8:	461d      	mov	r5, r3
 80098aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80098ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80098ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80098b2:	e884 0003 	stmia.w	r4, {r0, r1}
//	uint8_t StartHour = dryerPrograms[WichProgram].startTime.hour, StartMinute = dryerPrograms[WichProgram].startTime.minute;
//	uint8_t EndHour = dryerPrograms[WichProgram].endTime.hour, EndMinute = dryerPrograms[WichProgram].endTime.minute;
	uint32_t TemperatureSetted = (uint32_t)dryerPrograms[WichProgram].tempSetted;
 80098b6:	1cfb      	adds	r3, r7, #3
 80098b8:	781a      	ldrb	r2, [r3, #0]
 80098ba:	1d3b      	adds	r3, r7, #4
 80098bc:	6819      	ldr	r1, [r3, #0]
 80098be:	4613      	mov	r3, r2
 80098c0:	005b      	lsls	r3, r3, #1
 80098c2:	4413      	add	r3, r2
 80098c4:	00db      	lsls	r3, r3, #3
 80098c6:	440b      	add	r3, r1
 80098c8:	335c      	adds	r3, #92	; 0x5c
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7f7 fac3 	bl	8000e58 <__aeabi_f2uiz>
 80098d2:	4603      	mov	r3, r0
 80098d4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	String Time = "", Date = "";
 80098d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80098dc:	4618      	mov	r0, r3
 80098de:	f007 fb35 	bl	8010f4c <_ZNSaIcEC1Ev>
 80098e2:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80098e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80098ea:	498f      	ldr	r1, [pc, #572]	; (8009b28 <_ZN10SmartDryer13changeProgramEh+0x2bc>)
 80098ec:	4618      	mov	r0, r3
 80098ee:	f007 fdf5 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80098f2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80098f6:	4618      	mov	r0, r3
 80098f8:	f007 fb29 	bl	8010f4e <_ZNSaIcED1Ev>
 80098fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009900:	4618      	mov	r0, r3
 8009902:	f007 fb23 	bl	8010f4c <_ZNSaIcEC1Ev>
 8009906:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800990a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800990e:	4986      	ldr	r1, [pc, #536]	; (8009b28 <_ZN10SmartDryer13changeProgramEh+0x2bc>)
 8009910:	4618      	mov	r0, r3
 8009912:	f007 fde3 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009916:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800991a:	4618      	mov	r0, r3
 800991c:	f007 fb17 	bl	8010f4e <_ZNSaIcED1Ev>
	String Title = "", SubTitle = "", Number = "";
 8009920:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009924:	4618      	mov	r0, r3
 8009926:	f007 fb11 	bl	8010f4c <_ZNSaIcEC1Ev>
 800992a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800992e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009932:	497d      	ldr	r1, [pc, #500]	; (8009b28 <_ZN10SmartDryer13changeProgramEh+0x2bc>)
 8009934:	4618      	mov	r0, r3
 8009936:	f007 fdd1 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800993a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800993e:	4618      	mov	r0, r3
 8009940:	f007 fb05 	bl	8010f4e <_ZNSaIcED1Ev>
 8009944:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009948:	4618      	mov	r0, r3
 800994a:	f007 faff 	bl	8010f4c <_ZNSaIcEC1Ev>
 800994e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8009952:	f107 0320 	add.w	r3, r7, #32
 8009956:	4974      	ldr	r1, [pc, #464]	; (8009b28 <_ZN10SmartDryer13changeProgramEh+0x2bc>)
 8009958:	4618      	mov	r0, r3
 800995a:	f007 fdbf 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800995e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009962:	4618      	mov	r0, r3
 8009964:	f007 faf3 	bl	8010f4e <_ZNSaIcED1Ev>
 8009968:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800996c:	4618      	mov	r0, r3
 800996e:	f007 faed 	bl	8010f4c <_ZNSaIcEC1Ev>
 8009972:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8009976:	f107 0308 	add.w	r3, r7, #8
 800997a:	496b      	ldr	r1, [pc, #428]	; (8009b28 <_ZN10SmartDryer13changeProgramEh+0x2bc>)
 800997c:	4618      	mov	r0, r3
 800997e:	f007 fdad 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009982:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8009986:	4618      	mov	r0, r3
 8009988:	f007 fae1 	bl	8010f4e <_ZNSaIcED1Ev>
	while(!ExitChangeProgram)
 800998c:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8009990:	2b00      	cmp	r3, #0
 8009992:	f040 82d6 	bne.w	8009f42 <_ZN10SmartDryer13changeProgramEh+0x6d6>
	{
		Title = "Programma " + std::to_string(WichProgram + 1);
 8009996:	1cfb      	adds	r3, r7, #3
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	1c5a      	adds	r2, r3, #1
 800999c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80099a0:	4611      	mov	r1, r2
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7f9 fd38 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 80099a8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80099ac:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80099b0:	495e      	ldr	r1, [pc, #376]	; (8009b2c <_ZN10SmartDryer13changeProgramEh+0x2c0>)
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7fa faba 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 80099b8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80099bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80099c0:	4611      	mov	r1, r2
 80099c2:	4618      	mov	r0, r3
 80099c4:	f007 fbff 	bl	80111c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80099c8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80099cc:	4618      	mov	r0, r3
 80099ce:	f007 fbee 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80099d2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80099d6:	4618      	mov	r0, r3
 80099d8:	f007 fbe9 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		switch(WichSetting)
 80099dc:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 80099e0:	2b04      	cmp	r3, #4
 80099e2:	f200 80af 	bhi.w	8009b44 <_ZN10SmartDryer13changeProgramEh+0x2d8>
 80099e6:	a201      	add	r2, pc, #4	; (adr r2, 80099ec <_ZN10SmartDryer13changeProgramEh+0x180>)
 80099e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ec:	08009a01 	.word	0x08009a01
 80099f0:	08009a3d 	.word	0x08009a3d
 80099f4:	08009a79 	.word	0x08009a79
 80099f8:	08009ab5 	.word	0x08009ab5
 80099fc:	08009af1 	.word	0x08009af1
		{
			case 0:
				SubTitle = "Ora di inizio";
 8009a00:	f107 0320 	add.w	r3, r7, #32
 8009a04:	494a      	ldr	r1, [pc, #296]	; (8009b30 <_ZN10SmartDryer13changeProgramEh+0x2c4>)
 8009a06:	4618      	mov	r0, r3
 8009a08:	f007 fcb5 	bl	8011376 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(NewProgram.startTime.hour);
 8009a0c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009a10:	791b      	ldrb	r3, [r3, #4]
 8009a12:	461a      	mov	r2, r3
 8009a14:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8009a18:	4611      	mov	r1, r2
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7f9 fcfc 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8009a20:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8009a24:	f107 0308 	add.w	r3, r7, #8
 8009a28:	4611      	mov	r1, r2
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f007 fbcb 	bl	80111c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009a30:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8009a34:	4618      	mov	r0, r3
 8009a36:	f007 fbba 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 8009a3a:	e084      	b.n	8009b46 <_ZN10SmartDryer13changeProgramEh+0x2da>
			case 1:
				SubTitle = "Minuto di inizio";
 8009a3c:	f107 0320 	add.w	r3, r7, #32
 8009a40:	493c      	ldr	r1, [pc, #240]	; (8009b34 <_ZN10SmartDryer13changeProgramEh+0x2c8>)
 8009a42:	4618      	mov	r0, r3
 8009a44:	f007 fc97 	bl	8011376 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(NewProgram.startTime.minute);
 8009a48:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009a4c:	78db      	ldrb	r3, [r3, #3]
 8009a4e:	461a      	mov	r2, r3
 8009a50:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8009a54:	4611      	mov	r1, r2
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7f9 fcde 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8009a5c:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8009a60:	f107 0308 	add.w	r3, r7, #8
 8009a64:	4611      	mov	r1, r2
 8009a66:	4618      	mov	r0, r3
 8009a68:	f007 fbad 	bl	80111c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009a6c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8009a70:	4618      	mov	r0, r3
 8009a72:	f007 fb9c 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 8009a76:	e066      	b.n	8009b46 <_ZN10SmartDryer13changeProgramEh+0x2da>
			case 2:
				SubTitle = "Ora di fine";
 8009a78:	f107 0320 	add.w	r3, r7, #32
 8009a7c:	492e      	ldr	r1, [pc, #184]	; (8009b38 <_ZN10SmartDryer13changeProgramEh+0x2cc>)
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f007 fc79 	bl	8011376 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(NewProgram.endTime.hour);
 8009a84:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009a88:	7b1b      	ldrb	r3, [r3, #12]
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8009a90:	4611      	mov	r1, r2
 8009a92:	4618      	mov	r0, r3
 8009a94:	f7f9 fcc0 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8009a98:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8009a9c:	f107 0308 	add.w	r3, r7, #8
 8009aa0:	4611      	mov	r1, r2
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f007 fb8f 	bl	80111c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009aa8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8009aac:	4618      	mov	r0, r3
 8009aae:	f007 fb7e 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 8009ab2:	e048      	b.n	8009b46 <_ZN10SmartDryer13changeProgramEh+0x2da>
			case 3:
				SubTitle = "Minuto di fine";
 8009ab4:	f107 0320 	add.w	r3, r7, #32
 8009ab8:	4920      	ldr	r1, [pc, #128]	; (8009b3c <_ZN10SmartDryer13changeProgramEh+0x2d0>)
 8009aba:	4618      	mov	r0, r3
 8009abc:	f007 fc5b 	bl	8011376 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(NewProgram.endTime.minute);
 8009ac0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009ac4:	7adb      	ldrb	r3, [r3, #11]
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8009acc:	4611      	mov	r1, r2
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7f9 fca2 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 8009ad4:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8009ad8:	f107 0308 	add.w	r3, r7, #8
 8009adc:	4611      	mov	r1, r2
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f007 fb71 	bl	80111c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009ae4:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f007 fb60 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 8009aee:	e02a      	b.n	8009b46 <_ZN10SmartDryer13changeProgramEh+0x2da>
			case 4:
				SubTitle = "Temperatura";
 8009af0:	f107 0320 	add.w	r3, r7, #32
 8009af4:	4912      	ldr	r1, [pc, #72]	; (8009b40 <_ZN10SmartDryer13changeProgramEh+0x2d4>)
 8009af6:	4618      	mov	r0, r3
 8009af8:	f007 fc3d 	bl	8011376 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(TemperatureSetted);
 8009afc:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8009b00:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8009b04:	4618      	mov	r0, r3
 8009b06:	f7fc fa9d 	bl	8006044 <_ZNSt7__cxx119to_stringEm>
 8009b0a:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8009b0e:	f107 0308 	add.w	r3, r7, #8
 8009b12:	4611      	mov	r1, r2
 8009b14:	4618      	mov	r0, r3
 8009b16:	f007 fb56 	bl	80111c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009b1a:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f007 fb45 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 8009b24:	e00f      	b.n	8009b46 <_ZN10SmartDryer13changeProgramEh+0x2da>
 8009b26:	bf00      	nop
 8009b28:	08012424 	.word	0x08012424
 8009b2c:	080125e4 	.word	0x080125e4
 8009b30:	080125f0 	.word	0x080125f0
 8009b34:	08012600 	.word	0x08012600
 8009b38:	08012614 	.word	0x08012614
 8009b3c:	08012620 	.word	0x08012620
 8009b40:	08012630 	.word	0x08012630
			default:
				break;
 8009b44:	bf00      	nop
		}
		display->clearFrameBuffer();
 8009b46:	1d3b      	adds	r3, r7, #4
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f7fa fe92 	bl	8004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 8009b52:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009b56:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8009b5a:	1d3b      	adds	r3, r7, #4
 8009b5c:	6818      	ldr	r0, [r3, #0]
 8009b5e:	f7fc ff0e 	bl	800697e <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString(Title, NHDST7565_LCD::CENTER_POS, 7, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8009b62:	1d3b      	adds	r3, r7, #4
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	681c      	ldr	r4, [r3, #0]
 8009b68:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009b6c:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8009b70:	4611      	mov	r1, r2
 8009b72:	4618      	mov	r0, r3
 8009b74:	f007 fc7f 	bl	8011476 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009b78:	1d3b      	adds	r3, r7, #4
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009b82:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8009b86:	9300      	str	r3, [sp, #0]
 8009b88:	2307      	movs	r3, #7
 8009b8a:	2283      	movs	r2, #131	; 0x83
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	f7fa feb6 	bl	80048fe <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009b92:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8009b96:	4618      	mov	r0, r3
 8009b98:	f007 fb09 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(SubTitle, NHDST7565_LCD::CENTER_POS, 22, display->displayFonts[NHDST7565_LCD::W_6_H_10]);
 8009b9c:	1d3b      	adds	r3, r7, #4
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	681c      	ldr	r4, [r3, #0]
 8009ba2:	f107 0220 	add.w	r2, r7, #32
 8009ba6:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8009baa:	4611      	mov	r1, r2
 8009bac:	4618      	mov	r0, r3
 8009bae:	f007 fc62 	bl	8011476 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009bb2:	1d3b      	adds	r3, r7, #4
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009bbc:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8009bc0:	9300      	str	r3, [sp, #0]
 8009bc2:	2316      	movs	r3, #22
 8009bc4:	2283      	movs	r2, #131	; 0x83
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	f7fa fe99 	bl	80048fe <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009bcc:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f007 faec 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(Number, NHDST7565_LCD::CENTER_POS, 41, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8009bd6:	1d3b      	adds	r3, r7, #4
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	681c      	ldr	r4, [r3, #0]
 8009bdc:	f107 0208 	add.w	r2, r7, #8
 8009be0:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8009be4:	4611      	mov	r1, r2
 8009be6:	4618      	mov	r0, r3
 8009be8:	f007 fc45 	bl	8011476 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009bec:	1d3b      	adds	r3, r7, #4
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009bf6:	f507 71c2 	add.w	r1, r7, #388	; 0x184
 8009bfa:	9300      	str	r3, [sp, #0]
 8009bfc:	2329      	movs	r3, #41	; 0x29
 8009bfe:	2283      	movs	r2, #131	; 0x83
 8009c00:	4620      	mov	r0, r4
 8009c02:	f7fa fe7c 	bl	80048fe <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009c06:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f007 facf 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawSymbol(60, 40, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x0070); // triangolo alto
 8009c10:	1d3b      	adds	r3, r7, #4
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	6818      	ldr	r0, [r3, #0]
 8009c16:	1d3b      	adds	r3, r7, #4
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8009c20:	2370      	movs	r3, #112	; 0x70
 8009c22:	9300      	str	r3, [sp, #0]
 8009c24:	4613      	mov	r3, r2
 8009c26:	2228      	movs	r2, #40	; 0x28
 8009c28:	213c      	movs	r1, #60	; 0x3c
 8009c2a:	f7fb f917 	bl	8004e5c <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->drawSymbol(60, 60, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x006D); // triangolo basso
 8009c2e:	1d3b      	adds	r3, r7, #4
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	6818      	ldr	r0, [r3, #0]
 8009c34:	1d3b      	adds	r3, r7, #4
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8009c3e:	236d      	movs	r3, #109	; 0x6d
 8009c40:	9300      	str	r3, [sp, #0]
 8009c42:	4613      	mov	r3, r2
 8009c44:	223c      	movs	r2, #60	; 0x3c
 8009c46:	213c      	movs	r1, #60	; 0x3c
 8009c48:	f7fb f908 	bl	8004e5c <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->sendFrameBuffer();
 8009c4c:	1d3b      	adds	r3, r7, #4
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7fa fe1c 	bl	8004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 8009c58:	2308      	movs	r3, #8
 8009c5a:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
		WichKey = keyboard->checkKey();
 8009c5e:	1d3b      	adds	r3, r7, #4
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	4618      	mov	r0, r3
 8009c66:	f7fb fc1d 	bl	80054a4 <_ZN8DryerKey8checkKeyEv>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
		switch(WichKey)
 8009c70:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 8009c74:	2b07      	cmp	r3, #7
 8009c76:	f200 8146 	bhi.w	8009f06 <_ZN10SmartDryer13changeProgramEh+0x69a>
 8009c7a:	a201      	add	r2, pc, #4	; (adr r2, 8009c80 <_ZN10SmartDryer13changeProgramEh+0x414>)
 8009c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c80:	08009ca1 	.word	0x08009ca1
 8009c84:	08009d7d 	.word	0x08009d7d
 8009c88:	08009eeb 	.word	0x08009eeb
 8009c8c:	08009e59 	.word	0x08009e59
 8009c90:	08009ca1 	.word	0x08009ca1
 8009c94:	08009d7d 	.word	0x08009d7d
 8009c98:	08009eff 	.word	0x08009eff
 8009c9c:	08009f07 	.word	0x08009f07
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				switch(WichSetting)
 8009ca0:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8009ca4:	2b04      	cmp	r3, #4
 8009ca6:	d867      	bhi.n	8009d78 <_ZN10SmartDryer13changeProgramEh+0x50c>
 8009ca8:	a201      	add	r2, pc, #4	; (adr r2, 8009cb0 <_ZN10SmartDryer13changeProgramEh+0x444>)
 8009caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cae:	bf00      	nop
 8009cb0:	08009cc5 	.word	0x08009cc5
 8009cb4:	08009ceb 	.word	0x08009ceb
 8009cb8:	08009d11 	.word	0x08009d11
 8009cbc:	08009d37 	.word	0x08009d37
 8009cc0:	08009d5d 	.word	0x08009d5d
				{
					case 0:
						if(NewProgram.startTime.hour > 0)
 8009cc4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009cc8:	791b      	ldrb	r3, [r3, #4]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d008      	beq.n	8009ce0 <_ZN10SmartDryer13changeProgramEh+0x474>
							NewProgram.startTime.hour--;
 8009cce:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009cd2:	791b      	ldrb	r3, [r3, #4]
 8009cd4:	3b01      	subs	r3, #1
 8009cd6:	b2da      	uxtb	r2, r3
 8009cd8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009cdc:	711a      	strb	r2, [r3, #4]
						else
							NewProgram.startTime.hour = 23;
						break;
 8009cde:	e04c      	b.n	8009d7a <_ZN10SmartDryer13changeProgramEh+0x50e>
							NewProgram.startTime.hour = 23;
 8009ce0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009ce4:	2217      	movs	r2, #23
 8009ce6:	711a      	strb	r2, [r3, #4]
						break;
 8009ce8:	e047      	b.n	8009d7a <_ZN10SmartDryer13changeProgramEh+0x50e>
					case 1:
						if(NewProgram.startTime.minute > 0)
 8009cea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009cee:	78db      	ldrb	r3, [r3, #3]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d008      	beq.n	8009d06 <_ZN10SmartDryer13changeProgramEh+0x49a>
							NewProgram.startTime.minute -= 10;
 8009cf4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009cf8:	78db      	ldrb	r3, [r3, #3]
 8009cfa:	3b0a      	subs	r3, #10
 8009cfc:	b2da      	uxtb	r2, r3
 8009cfe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009d02:	70da      	strb	r2, [r3, #3]
						else
							NewProgram.startTime.minute = 50;
						break;
 8009d04:	e039      	b.n	8009d7a <_ZN10SmartDryer13changeProgramEh+0x50e>
							NewProgram.startTime.minute = 50;
 8009d06:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009d0a:	2232      	movs	r2, #50	; 0x32
 8009d0c:	70da      	strb	r2, [r3, #3]
						break;
 8009d0e:	e034      	b.n	8009d7a <_ZN10SmartDryer13changeProgramEh+0x50e>
					case 2:
						if(NewProgram.endTime.hour > 0)
 8009d10:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009d14:	7b1b      	ldrb	r3, [r3, #12]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d008      	beq.n	8009d2c <_ZN10SmartDryer13changeProgramEh+0x4c0>
							NewProgram.endTime.hour--;
 8009d1a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009d1e:	7b1b      	ldrb	r3, [r3, #12]
 8009d20:	3b01      	subs	r3, #1
 8009d22:	b2da      	uxtb	r2, r3
 8009d24:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009d28:	731a      	strb	r2, [r3, #12]
						else
							NewProgram.endTime.hour = 23;
						break;
 8009d2a:	e026      	b.n	8009d7a <_ZN10SmartDryer13changeProgramEh+0x50e>
							NewProgram.endTime.hour = 23;
 8009d2c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009d30:	2217      	movs	r2, #23
 8009d32:	731a      	strb	r2, [r3, #12]
						break;
 8009d34:	e021      	b.n	8009d7a <_ZN10SmartDryer13changeProgramEh+0x50e>
					case 3:
						if(NewProgram.endTime.minute > 0)
 8009d36:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009d3a:	7adb      	ldrb	r3, [r3, #11]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d008      	beq.n	8009d52 <_ZN10SmartDryer13changeProgramEh+0x4e6>
							NewProgram.endTime.minute -= 10;
 8009d40:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009d44:	7adb      	ldrb	r3, [r3, #11]
 8009d46:	3b0a      	subs	r3, #10
 8009d48:	b2da      	uxtb	r2, r3
 8009d4a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009d4e:	72da      	strb	r2, [r3, #11]
						else
							NewProgram.endTime.minute = 50;
						break;
 8009d50:	e013      	b.n	8009d7a <_ZN10SmartDryer13changeProgramEh+0x50e>
							NewProgram.endTime.minute = 50;
 8009d52:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009d56:	2232      	movs	r2, #50	; 0x32
 8009d58:	72da      	strb	r2, [r3, #11]
						break;
 8009d5a:	e00e      	b.n	8009d7a <_ZN10SmartDryer13changeProgramEh+0x50e>
					case 4:
						if(TemperatureSetted > 30)
 8009d5c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8009d60:	2b1e      	cmp	r3, #30
 8009d62:	d905      	bls.n	8009d70 <_ZN10SmartDryer13changeProgramEh+0x504>
							TemperatureSetted -= 5;
 8009d64:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8009d68:	3b05      	subs	r3, #5
 8009d6a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
						else
							TemperatureSetted = 90;
						break;
 8009d6e:	e004      	b.n	8009d7a <_ZN10SmartDryer13changeProgramEh+0x50e>
							TemperatureSetted = 90;
 8009d70:	235a      	movs	r3, #90	; 0x5a
 8009d72:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
						break;
 8009d76:	e000      	b.n	8009d7a <_ZN10SmartDryer13changeProgramEh+0x50e>
					default:
						break;
 8009d78:	bf00      	nop
				}
				break;
 8009d7a:	e0c7      	b.n	8009f0c <_ZN10SmartDryer13changeProgramEh+0x6a0>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				switch(WichSetting)
 8009d7c:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8009d80:	2b04      	cmp	r3, #4
 8009d82:	d867      	bhi.n	8009e54 <_ZN10SmartDryer13changeProgramEh+0x5e8>
 8009d84:	a201      	add	r2, pc, #4	; (adr r2, 8009d8c <_ZN10SmartDryer13changeProgramEh+0x520>)
 8009d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d8a:	bf00      	nop
 8009d8c:	08009da1 	.word	0x08009da1
 8009d90:	08009dc7 	.word	0x08009dc7
 8009d94:	08009ded 	.word	0x08009ded
 8009d98:	08009e13 	.word	0x08009e13
 8009d9c:	08009e39 	.word	0x08009e39
				{
					case 0:
						if(NewProgram.startTime.hour < 23)
 8009da0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009da4:	791b      	ldrb	r3, [r3, #4]
 8009da6:	2b16      	cmp	r3, #22
 8009da8:	d808      	bhi.n	8009dbc <_ZN10SmartDryer13changeProgramEh+0x550>
							NewProgram.startTime.hour++;
 8009daa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009dae:	791b      	ldrb	r3, [r3, #4]
 8009db0:	3301      	adds	r3, #1
 8009db2:	b2da      	uxtb	r2, r3
 8009db4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009db8:	711a      	strb	r2, [r3, #4]
						else
							NewProgram.startTime.hour = 0;
						break;
 8009dba:	e04c      	b.n	8009e56 <_ZN10SmartDryer13changeProgramEh+0x5ea>
							NewProgram.startTime.hour = 0;
 8009dbc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	711a      	strb	r2, [r3, #4]
						break;
 8009dc4:	e047      	b.n	8009e56 <_ZN10SmartDryer13changeProgramEh+0x5ea>
					case 1:
						if(NewProgram.startTime.minute < 50)
 8009dc6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009dca:	78db      	ldrb	r3, [r3, #3]
 8009dcc:	2b31      	cmp	r3, #49	; 0x31
 8009dce:	d808      	bhi.n	8009de2 <_ZN10SmartDryer13changeProgramEh+0x576>
							NewProgram.startTime.minute += 10;
 8009dd0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009dd4:	78db      	ldrb	r3, [r3, #3]
 8009dd6:	330a      	adds	r3, #10
 8009dd8:	b2da      	uxtb	r2, r3
 8009dda:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009dde:	70da      	strb	r2, [r3, #3]
						else
							NewProgram.startTime.minute = 0;
						break;
 8009de0:	e039      	b.n	8009e56 <_ZN10SmartDryer13changeProgramEh+0x5ea>
							NewProgram.startTime.minute = 0;
 8009de2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009de6:	2200      	movs	r2, #0
 8009de8:	70da      	strb	r2, [r3, #3]
						break;
 8009dea:	e034      	b.n	8009e56 <_ZN10SmartDryer13changeProgramEh+0x5ea>
					case 2:
						if(NewProgram.endTime.hour < 23)
 8009dec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009df0:	7b1b      	ldrb	r3, [r3, #12]
 8009df2:	2b16      	cmp	r3, #22
 8009df4:	d808      	bhi.n	8009e08 <_ZN10SmartDryer13changeProgramEh+0x59c>
							NewProgram.endTime.hour++;
 8009df6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009dfa:	7b1b      	ldrb	r3, [r3, #12]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	b2da      	uxtb	r2, r3
 8009e00:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009e04:	731a      	strb	r2, [r3, #12]
						else
							NewProgram.endTime.hour = 0;
						break;
 8009e06:	e026      	b.n	8009e56 <_ZN10SmartDryer13changeProgramEh+0x5ea>
							NewProgram.endTime.hour = 0;
 8009e08:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	731a      	strb	r2, [r3, #12]
						break;
 8009e10:	e021      	b.n	8009e56 <_ZN10SmartDryer13changeProgramEh+0x5ea>
					case 3:
						if(NewProgram.endTime.minute < 50)
 8009e12:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009e16:	7adb      	ldrb	r3, [r3, #11]
 8009e18:	2b31      	cmp	r3, #49	; 0x31
 8009e1a:	d808      	bhi.n	8009e2e <_ZN10SmartDryer13changeProgramEh+0x5c2>
							NewProgram.endTime.minute += 10;
 8009e1c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009e20:	7adb      	ldrb	r3, [r3, #11]
 8009e22:	330a      	adds	r3, #10
 8009e24:	b2da      	uxtb	r2, r3
 8009e26:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009e2a:	72da      	strb	r2, [r3, #11]
						else
							NewProgram.endTime.minute = 0;
						break;
 8009e2c:	e013      	b.n	8009e56 <_ZN10SmartDryer13changeProgramEh+0x5ea>
							NewProgram.endTime.minute = 0;
 8009e2e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009e32:	2200      	movs	r2, #0
 8009e34:	72da      	strb	r2, [r3, #11]
						break;
 8009e36:	e00e      	b.n	8009e56 <_ZN10SmartDryer13changeProgramEh+0x5ea>
					case 4:
						if(TemperatureSetted < 90)
 8009e38:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8009e3c:	2b59      	cmp	r3, #89	; 0x59
 8009e3e:	d805      	bhi.n	8009e4c <_ZN10SmartDryer13changeProgramEh+0x5e0>
							TemperatureSetted += 5;
 8009e40:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8009e44:	3305      	adds	r3, #5
 8009e46:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
						else
							TemperatureSetted = 30;
						break;
 8009e4a:	e004      	b.n	8009e56 <_ZN10SmartDryer13changeProgramEh+0x5ea>
							TemperatureSetted = 30;
 8009e4c:	231e      	movs	r3, #30
 8009e4e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
						break;
 8009e52:	e000      	b.n	8009e56 <_ZN10SmartDryer13changeProgramEh+0x5ea>
					default:
						break;
 8009e54:	bf00      	nop
				}
				break;
 8009e56:	e059      	b.n	8009f0c <_ZN10SmartDryer13changeProgramEh+0x6a0>
			case DryerKey::OK_KEY:
				if(WichSetting < MAX_SETTINGS - 1)
 8009e58:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8009e5c:	2b03      	cmp	r3, #3
 8009e5e:	d805      	bhi.n	8009e6c <_ZN10SmartDryer13changeProgramEh+0x600>
					WichSetting++;
 8009e60:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8009e64:	3301      	adds	r3, #1
 8009e66:	f887 31a6 	strb.w	r3, [r7, #422]	; 0x1a6
					{
						saveDryerProgram(WichProgram);
					}
					ExitChangeProgram = true;
				}
				break;
 8009e6a:	e04f      	b.n	8009f0c <_ZN10SmartDryer13changeProgramEh+0x6a0>
					checkSettedProgramTime(WichProgram, NewProgram);
 8009e6c:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8009e70:	1cfb      	adds	r3, r7, #3
 8009e72:	f893 c000 	ldrb.w	ip, [r3]
 8009e76:	1d3d      	adds	r5, r7, #4
 8009e78:	466e      	mov	r6, sp
 8009e7a:	f104 0308 	add.w	r3, r4, #8
 8009e7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009e80:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8009e84:	e894 000c 	ldmia.w	r4, {r2, r3}
 8009e88:	4661      	mov	r1, ip
 8009e8a:	6828      	ldr	r0, [r5, #0]
 8009e8c:	f7fd f932 	bl	80070f4 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE>
					dryerPrograms[WichProgram].tempSetted = (float)TemperatureSetted;
 8009e90:	1cfb      	adds	r3, r7, #3
 8009e92:	781c      	ldrb	r4, [r3, #0]
 8009e94:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 8009e98:	f7f6 fe36 	bl	8000b08 <__aeabi_ui2f>
 8009e9c:	4601      	mov	r1, r0
 8009e9e:	1d3b      	adds	r3, r7, #4
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	4623      	mov	r3, r4
 8009ea4:	005b      	lsls	r3, r3, #1
 8009ea6:	4423      	add	r3, r4
 8009ea8:	00db      	lsls	r3, r3, #3
 8009eaa:	4413      	add	r3, r2
 8009eac:	335c      	adds	r3, #92	; 0x5c
 8009eae:	6019      	str	r1, [r3, #0]
					dryerPrograms[WichProgram].programSetted = true;
 8009eb0:	1cfb      	adds	r3, r7, #3
 8009eb2:	781a      	ldrb	r2, [r3, #0]
 8009eb4:	1d3b      	adds	r3, r7, #4
 8009eb6:	6819      	ldr	r1, [r3, #0]
 8009eb8:	4613      	mov	r3, r2
 8009eba:	005b      	lsls	r3, r3, #1
 8009ebc:	4413      	add	r3, r2
 8009ebe:	00db      	lsls	r3, r3, #3
 8009ec0:	440b      	add	r3, r1
 8009ec2:	3348      	adds	r3, #72	; 0x48
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	701a      	strb	r2, [r3, #0]
					if(eepromEnabled)
 8009ec8:	1d3b      	adds	r3, r7, #4
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d006      	beq.n	8009ee2 <_ZN10SmartDryer13changeProgramEh+0x676>
						saveDryerProgram(WichProgram);
 8009ed4:	1cfb      	adds	r3, r7, #3
 8009ed6:	781a      	ldrb	r2, [r3, #0]
 8009ed8:	1d3b      	adds	r3, r7, #4
 8009eda:	4611      	mov	r1, r2
 8009edc:	6818      	ldr	r0, [r3, #0]
 8009ede:	f7fc fe45 	bl	8006b6c <_ZN10SmartDryer16saveDryerProgramEh>
					ExitChangeProgram = true;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
				break;
 8009ee8:	e010      	b.n	8009f0c <_ZN10SmartDryer13changeProgramEh+0x6a0>
			case DryerKey::LEFT_KEY:
				if(WichSetting > 0)
 8009eea:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d00b      	beq.n	8009f0a <_ZN10SmartDryer13changeProgramEh+0x69e>
					WichSetting--;
 8009ef2:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8009ef6:	3b01      	subs	r3, #1
 8009ef8:	f887 31a6 	strb.w	r3, [r7, #422]	; 0x1a6
				break;
 8009efc:	e005      	b.n	8009f0a <_ZN10SmartDryer13changeProgramEh+0x69e>
			case DryerKey::LONG_OK_KEY:

				break;
			case DryerKey::LONG_LEFT_KEY:
				ExitChangeProgram = true;
 8009efe:	2301      	movs	r3, #1
 8009f00:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
				break;
 8009f04:	e002      	b.n	8009f0c <_ZN10SmartDryer13changeProgramEh+0x6a0>
			default:
				break;
 8009f06:	bf00      	nop
 8009f08:	e000      	b.n	8009f0c <_ZN10SmartDryer13changeProgramEh+0x6a0>
				break;
 8009f0a:	bf00      	nop
		}
		peripheralsControl();
 8009f0c:	1d3b      	adds	r3, r7, #4
 8009f0e:	6818      	ldr	r0, [r3, #0]
 8009f10:	f7fc fd20 	bl	8006954 <_ZN10SmartDryer18peripheralsControlEv>
		statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 8009f14:	1d3b      	adds	r3, r7, #4
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f1a:	1d3b      	adds	r3, r7, #4
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8009f20:	4610      	mov	r0, r2
 8009f22:	f7fb fe1b 	bl	8005b5c <_ZN13SerialMessage17isDeviceConnectedEv>
 8009f26:	4603      	mov	r3, r0
 8009f28:	7263      	strb	r3, [r4, #9]
		if(statusParam->serialDeviceAttached)
 8009f2a:	1d3b      	adds	r3, r7, #4
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f30:	7a5b      	ldrb	r3, [r3, #9]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	f43f ad2a 	beq.w	800998c <_ZN10SmartDryer13changeProgramEh+0x120>
		{
			serialComunicationCtrl();
 8009f38:	1d3b      	adds	r3, r7, #4
 8009f3a:	6818      	ldr	r0, [r3, #0]
 8009f3c:	f7fd fa0c 	bl	8007358 <_ZN10SmartDryer22serialComunicationCtrlEv>
	while(!ExitChangeProgram)
 8009f40:	e524      	b.n	800998c <_ZN10SmartDryer13changeProgramEh+0x120>
	String Title = "", SubTitle = "", Number = "";
 8009f42:	f107 0308 	add.w	r3, r7, #8
 8009f46:	4618      	mov	r0, r3
 8009f48:	f007 f931 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009f4c:	f107 0320 	add.w	r3, r7, #32
 8009f50:	4618      	mov	r0, r3
 8009f52:	f007 f92c 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009f56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f007 f927 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Time = "", Date = "";
 8009f60:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009f64:	4618      	mov	r0, r3
 8009f66:	f007 f922 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009f6a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f007 f91d 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
}
 8009f74:	bf00      	nop
 8009f76:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f7e:	bf00      	nop

08009f80 <_ZN10SmartDryer12startProgramEh>:

void SmartDryer::startProgram(uint8_t WichProgram)
{
 8009f80:	b590      	push	{r4, r7, lr}
 8009f82:	f5ad 7d5d 	sub.w	sp, sp, #884	; 0x374
 8009f86:	af02      	add	r7, sp, #8
 8009f88:	1d3b      	adds	r3, r7, #4
 8009f8a:	6018      	str	r0, [r3, #0]
 8009f8c:	460a      	mov	r2, r1
 8009f8e:	1cfb      	adds	r3, r7, #3
 8009f90:	701a      	strb	r2, [r3, #0]
	bool ExitStartProgram = false;
 8009f92:	2300      	movs	r3, #0
 8009f94:	f887 3367 	strb.w	r3, [r7, #871]	; 0x367
	bool ProgramEnd = false;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	f887 3366 	strb.w	r3, [r7, #870]	; 0x366
	String Time = "", Date = "";
 8009f9e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f006 ffd2 	bl	8010f4c <_ZNSaIcEC1Ev>
 8009fa8:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8009fac:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8009fb0:	49cb      	ldr	r1, [pc, #812]	; (800a2e0 <_ZN10SmartDryer12startProgramEh+0x360>)
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f007 fa92 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009fb8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f006 ffc6 	bl	8010f4e <_ZNSaIcED1Ev>
 8009fc2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f006 ffc0 	bl	8010f4c <_ZNSaIcEC1Ev>
 8009fcc:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8009fd0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009fd4:	49c2      	ldr	r1, [pc, #776]	; (800a2e0 <_ZN10SmartDryer12startProgramEh+0x360>)
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f007 fa80 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009fdc:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f006 ffb4 	bl	8010f4e <_ZNSaIcED1Ev>
	String StartHour = "", StartMinute = "", EndHour = "", EndMinute = "";
 8009fe6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8009fea:	4618      	mov	r0, r3
 8009fec:	f006 ffae 	bl	8010f4c <_ZNSaIcEC1Ev>
 8009ff0:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8009ff4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009ff8:	49b9      	ldr	r1, [pc, #740]	; (800a2e0 <_ZN10SmartDryer12startProgramEh+0x360>)
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f007 fa6e 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a000:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800a004:	4618      	mov	r0, r3
 800a006:	f006 ffa2 	bl	8010f4e <_ZNSaIcED1Ev>
 800a00a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800a00e:	4618      	mov	r0, r3
 800a010:	f006 ff9c 	bl	8010f4c <_ZNSaIcEC1Ev>
 800a014:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800a018:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a01c:	49b0      	ldr	r1, [pc, #704]	; (800a2e0 <_ZN10SmartDryer12startProgramEh+0x360>)
 800a01e:	4618      	mov	r0, r3
 800a020:	f007 fa5c 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a024:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800a028:	4618      	mov	r0, r3
 800a02a:	f006 ff90 	bl	8010f4e <_ZNSaIcED1Ev>
 800a02e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800a032:	4618      	mov	r0, r3
 800a034:	f006 ff8a 	bl	8010f4c <_ZNSaIcEC1Ev>
 800a038:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800a03c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a040:	49a7      	ldr	r1, [pc, #668]	; (800a2e0 <_ZN10SmartDryer12startProgramEh+0x360>)
 800a042:	4618      	mov	r0, r3
 800a044:	f007 fa4a 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a048:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800a04c:	4618      	mov	r0, r3
 800a04e:	f006 ff7e 	bl	8010f4e <_ZNSaIcED1Ev>
 800a052:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800a056:	4618      	mov	r0, r3
 800a058:	f006 ff78 	bl	8010f4c <_ZNSaIcEC1Ev>
 800a05c:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800a060:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a064:	499e      	ldr	r1, [pc, #632]	; (800a2e0 <_ZN10SmartDryer12startProgramEh+0x360>)
 800a066:	4618      	mov	r0, r3
 800a068:	f007 fa38 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a06c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800a070:	4618      	mov	r0, r3
 800a072:	f006 ff6c 	bl	8010f4e <_ZNSaIcED1Ev>
	String TempRead = "0C", TempSet = "0";
 800a076:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800a07a:	4618      	mov	r0, r3
 800a07c:	f006 ff66 	bl	8010f4c <_ZNSaIcEC1Ev>
 800a080:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 800a084:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a088:	4996      	ldr	r1, [pc, #600]	; (800a2e4 <_ZN10SmartDryer12startProgramEh+0x364>)
 800a08a:	4618      	mov	r0, r3
 800a08c:	f007 fa26 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a090:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800a094:	4618      	mov	r0, r3
 800a096:	f006 ff5a 	bl	8010f4e <_ZNSaIcED1Ev>
 800a09a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f006 ff54 	bl	8010f4c <_ZNSaIcEC1Ev>
 800a0a4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a0a8:	f107 0314 	add.w	r3, r7, #20
 800a0ac:	498e      	ldr	r1, [pc, #568]	; (800a2e8 <_ZN10SmartDryer12startProgramEh+0x368>)
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f007 fa14 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a0b4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f006 ff48 	bl	8010f4e <_ZNSaIcED1Ev>
	DS1307_RTC::TIME_DATE_T ActualTime;
	StartHour = dryerPrograms[WichProgram].startTime.hour > 9 ? std::to_string(dryerPrograms[WichProgram].startTime.hour) : "0" + std::to_string(dryerPrograms[WichProgram].startTime.hour);
 800a0be:	1cfb      	adds	r3, r7, #3
 800a0c0:	781a      	ldrb	r2, [r3, #0]
 800a0c2:	1d3b      	adds	r3, r7, #4
 800a0c4:	6819      	ldr	r1, [r3, #0]
 800a0c6:	4613      	mov	r3, r2
 800a0c8:	005b      	lsls	r3, r3, #1
 800a0ca:	4413      	add	r3, r2
 800a0cc:	00db      	lsls	r3, r3, #3
 800a0ce:	440b      	add	r3, r1
 800a0d0:	334c      	adds	r3, #76	; 0x4c
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	2400      	movs	r4, #0
 800a0d6:	2b09      	cmp	r3, #9
 800a0d8:	d912      	bls.n	800a100 <_ZN10SmartDryer12startProgramEh+0x180>
 800a0da:	1cfb      	adds	r3, r7, #3
 800a0dc:	781a      	ldrb	r2, [r3, #0]
 800a0de:	1d3b      	adds	r3, r7, #4
 800a0e0:	6819      	ldr	r1, [r3, #0]
 800a0e2:	4613      	mov	r3, r2
 800a0e4:	005b      	lsls	r3, r3, #1
 800a0e6:	4413      	add	r3, r2
 800a0e8:	00db      	lsls	r3, r3, #3
 800a0ea:	440b      	add	r3, r1
 800a0ec:	334c      	adds	r3, #76	; 0x4c
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800a0f6:	4611      	mov	r1, r2
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f7f9 f98d 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 800a0fe:	e01a      	b.n	800a136 <_ZN10SmartDryer12startProgramEh+0x1b6>
 800a100:	1cfb      	adds	r3, r7, #3
 800a102:	781a      	ldrb	r2, [r3, #0]
 800a104:	1d3b      	adds	r3, r7, #4
 800a106:	6819      	ldr	r1, [r3, #0]
 800a108:	4613      	mov	r3, r2
 800a10a:	005b      	lsls	r3, r3, #1
 800a10c:	4413      	add	r3, r2
 800a10e:	00db      	lsls	r3, r3, #3
 800a110:	440b      	add	r3, r1
 800a112:	334c      	adds	r3, #76	; 0x4c
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	461a      	mov	r2, r3
 800a118:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800a11c:	4611      	mov	r1, r2
 800a11e:	4618      	mov	r0, r3
 800a120:	f7f9 f97a 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 800a124:	2401      	movs	r4, #1
 800a126:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800a12a:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800a12e:	496e      	ldr	r1, [pc, #440]	; (800a2e8 <_ZN10SmartDryer12startProgramEh+0x368>)
 800a130:	4618      	mov	r0, r3
 800a132:	f7f9 fefb 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800a136:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 800a13a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a13e:	4611      	mov	r1, r2
 800a140:	4618      	mov	r0, r3
 800a142:	f007 f840 	bl	80111c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a146:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800a14a:	4618      	mov	r0, r3
 800a14c:	f007 f82f 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a150:	2c00      	cmp	r4, #0
 800a152:	d004      	beq.n	800a15e <_ZN10SmartDryer12startProgramEh+0x1de>
 800a154:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800a158:	4618      	mov	r0, r3
 800a15a:	f007 f828 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	StartMinute = dryerPrograms[WichProgram].startTime.minute > 9 ? std::to_string(dryerPrograms[WichProgram].startTime.minute) : "0" + std::to_string(dryerPrograms[WichProgram].startTime.minute);
 800a15e:	1cfb      	adds	r3, r7, #3
 800a160:	781a      	ldrb	r2, [r3, #0]
 800a162:	1d3b      	adds	r3, r7, #4
 800a164:	6819      	ldr	r1, [r3, #0]
 800a166:	4613      	mov	r3, r2
 800a168:	005b      	lsls	r3, r3, #1
 800a16a:	4413      	add	r3, r2
 800a16c:	00db      	lsls	r3, r3, #3
 800a16e:	440b      	add	r3, r1
 800a170:	334b      	adds	r3, #75	; 0x4b
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	2400      	movs	r4, #0
 800a176:	2b09      	cmp	r3, #9
 800a178:	d912      	bls.n	800a1a0 <_ZN10SmartDryer12startProgramEh+0x220>
 800a17a:	1cfb      	adds	r3, r7, #3
 800a17c:	781a      	ldrb	r2, [r3, #0]
 800a17e:	1d3b      	adds	r3, r7, #4
 800a180:	6819      	ldr	r1, [r3, #0]
 800a182:	4613      	mov	r3, r2
 800a184:	005b      	lsls	r3, r3, #1
 800a186:	4413      	add	r3, r2
 800a188:	00db      	lsls	r3, r3, #3
 800a18a:	440b      	add	r3, r1
 800a18c:	334b      	adds	r3, #75	; 0x4b
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	461a      	mov	r2, r3
 800a192:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800a196:	4611      	mov	r1, r2
 800a198:	4618      	mov	r0, r3
 800a19a:	f7f9 f93d 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 800a19e:	e01a      	b.n	800a1d6 <_ZN10SmartDryer12startProgramEh+0x256>
 800a1a0:	1cfb      	adds	r3, r7, #3
 800a1a2:	781a      	ldrb	r2, [r3, #0]
 800a1a4:	1d3b      	adds	r3, r7, #4
 800a1a6:	6819      	ldr	r1, [r3, #0]
 800a1a8:	4613      	mov	r3, r2
 800a1aa:	005b      	lsls	r3, r3, #1
 800a1ac:	4413      	add	r3, r2
 800a1ae:	00db      	lsls	r3, r3, #3
 800a1b0:	440b      	add	r3, r1
 800a1b2:	334b      	adds	r3, #75	; 0x4b
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800a1bc:	4611      	mov	r1, r2
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7f9 f92a 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 800a1c4:	2401      	movs	r4, #1
 800a1c6:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800a1ca:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 800a1ce:	4946      	ldr	r1, [pc, #280]	; (800a2e8 <_ZN10SmartDryer12startProgramEh+0x368>)
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f7f9 feab 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800a1d6:	f507 7292 	add.w	r2, r7, #292	; 0x124
 800a1da:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a1de:	4611      	mov	r1, r2
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f006 fff0 	bl	80111c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a1e6:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f006 ffdf 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a1f0:	2c00      	cmp	r4, #0
 800a1f2:	d004      	beq.n	800a1fe <_ZN10SmartDryer12startProgramEh+0x27e>
 800a1f4:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f006 ffd8 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	EndHour = dryerPrograms[WichProgram].endTime.hour > 9 ? std::to_string(dryerPrograms[WichProgram].endTime.hour) : "0" + std::to_string(dryerPrograms[WichProgram].endTime.hour);
 800a1fe:	1cfb      	adds	r3, r7, #3
 800a200:	781a      	ldrb	r2, [r3, #0]
 800a202:	1d3b      	adds	r3, r7, #4
 800a204:	6819      	ldr	r1, [r3, #0]
 800a206:	4613      	mov	r3, r2
 800a208:	005b      	lsls	r3, r3, #1
 800a20a:	4413      	add	r3, r2
 800a20c:	00db      	lsls	r3, r3, #3
 800a20e:	440b      	add	r3, r1
 800a210:	3354      	adds	r3, #84	; 0x54
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	2400      	movs	r4, #0
 800a216:	2b09      	cmp	r3, #9
 800a218:	d912      	bls.n	800a240 <_ZN10SmartDryer12startProgramEh+0x2c0>
 800a21a:	1cfb      	adds	r3, r7, #3
 800a21c:	781a      	ldrb	r2, [r3, #0]
 800a21e:	1d3b      	adds	r3, r7, #4
 800a220:	6819      	ldr	r1, [r3, #0]
 800a222:	4613      	mov	r3, r2
 800a224:	005b      	lsls	r3, r3, #1
 800a226:	4413      	add	r3, r2
 800a228:	00db      	lsls	r3, r3, #3
 800a22a:	440b      	add	r3, r1
 800a22c:	3354      	adds	r3, #84	; 0x54
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	461a      	mov	r2, r3
 800a232:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800a236:	4611      	mov	r1, r2
 800a238:	4618      	mov	r0, r3
 800a23a:	f7f9 f8ed 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 800a23e:	e01a      	b.n	800a276 <_ZN10SmartDryer12startProgramEh+0x2f6>
 800a240:	1cfb      	adds	r3, r7, #3
 800a242:	781a      	ldrb	r2, [r3, #0]
 800a244:	1d3b      	adds	r3, r7, #4
 800a246:	6819      	ldr	r1, [r3, #0]
 800a248:	4613      	mov	r3, r2
 800a24a:	005b      	lsls	r3, r3, #1
 800a24c:	4413      	add	r3, r2
 800a24e:	00db      	lsls	r3, r3, #3
 800a250:	440b      	add	r3, r1
 800a252:	3354      	adds	r3, #84	; 0x54
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	461a      	mov	r2, r3
 800a258:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800a25c:	4611      	mov	r1, r2
 800a25e:	4618      	mov	r0, r3
 800a260:	f7f9 f8da 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 800a264:	2401      	movs	r4, #1
 800a266:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800a26a:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 800a26e:	491e      	ldr	r1, [pc, #120]	; (800a2e8 <_ZN10SmartDryer12startProgramEh+0x368>)
 800a270:	4618      	mov	r0, r3
 800a272:	f7f9 fe5b 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800a276:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 800a27a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a27e:	4611      	mov	r1, r2
 800a280:	4618      	mov	r0, r3
 800a282:	f006 ffa0 	bl	80111c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a286:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800a28a:	4618      	mov	r0, r3
 800a28c:	f006 ff8f 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a290:	2c00      	cmp	r4, #0
 800a292:	d004      	beq.n	800a29e <_ZN10SmartDryer12startProgramEh+0x31e>
 800a294:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800a298:	4618      	mov	r0, r3
 800a29a:	f006 ff88 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	EndMinute = dryerPrograms[WichProgram].endTime.minute > 9 ? std::to_string(dryerPrograms[WichProgram].endTime.minute) : "0" + std::to_string(dryerPrograms[WichProgram].endTime.minute);
 800a29e:	1cfb      	adds	r3, r7, #3
 800a2a0:	781a      	ldrb	r2, [r3, #0]
 800a2a2:	1d3b      	adds	r3, r7, #4
 800a2a4:	6819      	ldr	r1, [r3, #0]
 800a2a6:	4613      	mov	r3, r2
 800a2a8:	005b      	lsls	r3, r3, #1
 800a2aa:	4413      	add	r3, r2
 800a2ac:	00db      	lsls	r3, r3, #3
 800a2ae:	440b      	add	r3, r1
 800a2b0:	3353      	adds	r3, #83	; 0x53
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	2400      	movs	r4, #0
 800a2b6:	2b09      	cmp	r3, #9
 800a2b8:	d918      	bls.n	800a2ec <_ZN10SmartDryer12startProgramEh+0x36c>
 800a2ba:	1cfb      	adds	r3, r7, #3
 800a2bc:	781a      	ldrb	r2, [r3, #0]
 800a2be:	1d3b      	adds	r3, r7, #4
 800a2c0:	6819      	ldr	r1, [r3, #0]
 800a2c2:	4613      	mov	r3, r2
 800a2c4:	005b      	lsls	r3, r3, #1
 800a2c6:	4413      	add	r3, r2
 800a2c8:	00db      	lsls	r3, r3, #3
 800a2ca:	440b      	add	r3, r1
 800a2cc:	3353      	adds	r3, #83	; 0x53
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800a2d6:	4611      	mov	r1, r2
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7f9 f89d 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 800a2de:	e020      	b.n	800a322 <_ZN10SmartDryer12startProgramEh+0x3a2>
 800a2e0:	08012424 	.word	0x08012424
 800a2e4:	0801263c 	.word	0x0801263c
 800a2e8:	08012640 	.word	0x08012640
 800a2ec:	1cfb      	adds	r3, r7, #3
 800a2ee:	781a      	ldrb	r2, [r3, #0]
 800a2f0:	1d3b      	adds	r3, r7, #4
 800a2f2:	6819      	ldr	r1, [r3, #0]
 800a2f4:	4613      	mov	r3, r2
 800a2f6:	005b      	lsls	r3, r3, #1
 800a2f8:	4413      	add	r3, r2
 800a2fa:	00db      	lsls	r3, r3, #3
 800a2fc:	440b      	add	r3, r1
 800a2fe:	3353      	adds	r3, #83	; 0x53
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	461a      	mov	r2, r3
 800a304:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800a308:	4611      	mov	r1, r2
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7f9 f884 	bl	8003418 <_ZNSt7__cxx119to_stringEi>
 800a310:	2401      	movs	r4, #1
 800a312:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800a316:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 800a31a:	49de      	ldr	r1, [pc, #888]	; (800a694 <_ZN10SmartDryer12startProgramEh+0x714>)
 800a31c:	4618      	mov	r0, r3
 800a31e:	f7f9 fe05 	bl	8003f2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800a322:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 800a326:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a32a:	4611      	mov	r1, r2
 800a32c:	4618      	mov	r0, r3
 800a32e:	f006 ff4a 	bl	80111c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a332:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800a336:	4618      	mov	r0, r3
 800a338:	f006 ff39 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a33c:	2c00      	cmp	r4, #0
 800a33e:	d004      	beq.n	800a34a <_ZN10SmartDryer12startProgramEh+0x3ca>
 800a340:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800a344:	4618      	mov	r0, r3
 800a346:	f006 ff32 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	TempSet = floatString(dryerPrograms[WichProgram].tempSetted, 1) + "C";
 800a34a:	1cfb      	adds	r3, r7, #3
 800a34c:	781a      	ldrb	r2, [r3, #0]
 800a34e:	1d3b      	adds	r3, r7, #4
 800a350:	6819      	ldr	r1, [r3, #0]
 800a352:	4613      	mov	r3, r2
 800a354:	005b      	lsls	r3, r3, #1
 800a356:	4413      	add	r3, r2
 800a358:	00db      	lsls	r3, r3, #3
 800a35a:	440b      	add	r3, r1
 800a35c:	335c      	adds	r3, #92	; 0x5c
 800a35e:	681a      	ldr	r2, [r3, #0]
 800a360:	f507 70e6 	add.w	r0, r7, #460	; 0x1cc
 800a364:	1d39      	adds	r1, r7, #4
 800a366:	2301      	movs	r3, #1
 800a368:	6809      	ldr	r1, [r1, #0]
 800a36a:	f7fc f82f 	bl	80063cc <_ZN10SmartDryer11floatStringB5cxx11Efh>
 800a36e:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800a372:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 800a376:	4ac8      	ldr	r2, [pc, #800]	; (800a698 <_ZN10SmartDryer12startProgramEh+0x718>)
 800a378:	4618      	mov	r0, r3
 800a37a:	f7f9 fe19 	bl	8003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800a37e:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 800a382:	f107 0314 	add.w	r3, r7, #20
 800a386:	4611      	mov	r1, r2
 800a388:	4618      	mov	r0, r3
 800a38a:	f006 ff1c 	bl	80111c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a38e:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800a392:	4618      	mov	r0, r3
 800a394:	f006 ff0b 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a398:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800a39c:	4618      	mov	r0, r3
 800a39e:	f006 ff06 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	while(!ExitStartProgram)
 800a3a2:	f897 3367 	ldrb.w	r3, [r7, #871]	; 0x367
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	f040 83a6 	bne.w	800aaf8 <_ZN10SmartDryer12startProgramEh+0xb78>
	{
		if(programStartedTimer->isFinished(true, 500))
 800a3ac:	1d3b      	adds	r3, r7, #4
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3b2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a3b6:	2101      	movs	r1, #1
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f7f8 fffa 	bl	80033b2 <_ZN11ChronoTimer10isFinishedEbm>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d008      	beq.n	800a3d6 <_ZN10SmartDryer12startProgramEh+0x456>
		{
			clock->getTimeDate(ActualTime);
 800a3c4:	1d3b      	adds	r3, r7, #4
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	f107 020c 	add.w	r2, r7, #12
 800a3ce:	4611      	mov	r1, r2
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7f9 f9af 	bl	8003734 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
		}
		TempRead = floatString(chamberTemperature.readedValueFL, 1) + "C";
 800a3d6:	1d3b      	adds	r3, r7, #4
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800a3de:	f507 70fe 	add.w	r0, r7, #508	; 0x1fc
 800a3e2:	1d39      	adds	r1, r7, #4
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	6809      	ldr	r1, [r1, #0]
 800a3e8:	f7fb fff0 	bl	80063cc <_ZN10SmartDryer11floatStringB5cxx11Efh>
 800a3ec:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800a3f0:	f507 71fe 	add.w	r1, r7, #508	; 0x1fc
 800a3f4:	4aa8      	ldr	r2, [pc, #672]	; (800a698 <_ZN10SmartDryer12startProgramEh+0x718>)
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7f9 fdda 	bl	8003fb0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800a3fc:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
 800a400:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a404:	4611      	mov	r1, r2
 800a406:	4618      	mov	r0, r3
 800a408:	f006 fedd 	bl	80111c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a40c:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800a410:	4618      	mov	r0, r3
 800a412:	f006 fecc 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a416:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800a41a:	4618      	mov	r0, r3
 800a41c:	f006 fec7 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->clearFrameBuffer();
 800a420:	1d3b      	adds	r3, r7, #4
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4618      	mov	r0, r3
 800a428:	f7fa fa25 	bl	8004876 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 800a42c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800a430:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 800a434:	1d3b      	adds	r3, r7, #4
 800a436:	6818      	ldr	r0, [r3, #0]
 800a438:	f7fc faa1 	bl	800697e <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString("Temp. letta", NHDST7565_LCD::LEFT_POS, 10, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 800a43c:	1d3b      	adds	r3, r7, #4
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	681c      	ldr	r4, [r3, #0]
 800a442:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 800a446:	4618      	mov	r0, r3
 800a448:	f006 fd80 	bl	8010f4c <_ZNSaIcEC1Ev>
 800a44c:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 800a450:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800a454:	4991      	ldr	r1, [pc, #580]	; (800a69c <_ZN10SmartDryer12startProgramEh+0x71c>)
 800a456:	4618      	mov	r0, r3
 800a458:	f007 f840 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a45c:	1d3b      	adds	r3, r7, #4
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a466:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800a46a:	9300      	str	r3, [sp, #0]
 800a46c:	230a      	movs	r3, #10
 800a46e:	2282      	movs	r2, #130	; 0x82
 800a470:	4620      	mov	r0, r4
 800a472:	f7fa fa44 	bl	80048fe <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a476:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800a47a:	4618      	mov	r0, r3
 800a47c:	f006 fe97 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a480:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 800a484:	4618      	mov	r0, r3
 800a486:	f006 fd62 	bl	8010f4e <_ZNSaIcED1Ev>
		display->drawString("Temp. target", NHDST7565_LCD::RIGHT_POS, 10, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 800a48a:	1d3b      	adds	r3, r7, #4
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	681c      	ldr	r4, [r3, #0]
 800a490:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800a494:	4618      	mov	r0, r3
 800a496:	f006 fd59 	bl	8010f4c <_ZNSaIcEC1Ev>
 800a49a:	f507 7212 	add.w	r2, r7, #584	; 0x248
 800a49e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800a4a2:	497f      	ldr	r1, [pc, #508]	; (800a6a0 <_ZN10SmartDryer12startProgramEh+0x720>)
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f007 f819 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a4aa:	1d3b      	adds	r3, r7, #4
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a4b4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800a4b8:	9300      	str	r3, [sp, #0]
 800a4ba:	230a      	movs	r3, #10
 800a4bc:	2284      	movs	r2, #132	; 0x84
 800a4be:	4620      	mov	r0, r4
 800a4c0:	f7fa fa1d 	bl	80048fe <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a4c4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f006 fe70 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a4ce:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f006 fd3b 	bl	8010f4e <_ZNSaIcED1Ev>
		display->drawString(TempRead, NHDST7565_LCD::LEFT_POS, 20, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800a4d8:	1d3b      	adds	r3, r7, #4
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	681c      	ldr	r4, [r3, #0]
 800a4de:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800a4e2:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800a4e6:	4611      	mov	r1, r2
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f006 ffc4 	bl	8011476 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800a4ee:	1d3b      	adds	r3, r7, #4
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a4f8:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 800a4fc:	9300      	str	r3, [sp, #0]
 800a4fe:	2314      	movs	r3, #20
 800a500:	2282      	movs	r2, #130	; 0x82
 800a502:	4620      	mov	r0, r4
 800a504:	f7fa f9fb 	bl	80048fe <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a508:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800a50c:	4618      	mov	r0, r3
 800a50e:	f006 fe4e 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(TempSet, NHDST7565_LCD::RIGHT_POS, 20, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800a512:	1d3b      	adds	r3, r7, #4
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	681c      	ldr	r4, [r3, #0]
 800a518:	f107 0214 	add.w	r2, r7, #20
 800a51c:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800a520:	4611      	mov	r1, r2
 800a522:	4618      	mov	r0, r3
 800a524:	f006 ffa7 	bl	8011476 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800a528:	1d3b      	adds	r3, r7, #4
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a532:	f507 7119 	add.w	r1, r7, #612	; 0x264
 800a536:	9300      	str	r3, [sp, #0]
 800a538:	2314      	movs	r3, #20
 800a53a:	2284      	movs	r2, #132	; 0x84
 800a53c:	4620      	mov	r0, r4
 800a53e:	f7fa f9de 	bl	80048fe <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a542:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800a546:	4618      	mov	r0, r3
 800a548:	f006 fe31 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString("Inizio programma", NHDST7565_LCD::LEFT_POS, 40, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 800a54c:	1d3b      	adds	r3, r7, #4
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	681c      	ldr	r4, [r3, #0]
 800a552:	f507 7325 	add.w	r3, r7, #660	; 0x294
 800a556:	4618      	mov	r0, r3
 800a558:	f006 fcf8 	bl	8010f4c <_ZNSaIcEC1Ev>
 800a55c:	f507 7225 	add.w	r2, r7, #660	; 0x294
 800a560:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800a564:	494f      	ldr	r1, [pc, #316]	; (800a6a4 <_ZN10SmartDryer12startProgramEh+0x724>)
 800a566:	4618      	mov	r0, r3
 800a568:	f006 ffb8 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a56c:	1d3b      	adds	r3, r7, #4
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a576:	f507 711f 	add.w	r1, r7, #636	; 0x27c
 800a57a:	9300      	str	r3, [sp, #0]
 800a57c:	2328      	movs	r3, #40	; 0x28
 800a57e:	2282      	movs	r2, #130	; 0x82
 800a580:	4620      	mov	r0, r4
 800a582:	f7fa f9bc 	bl	80048fe <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a586:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800a58a:	4618      	mov	r0, r3
 800a58c:	f006 fe0f 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a590:	f507 7325 	add.w	r3, r7, #660	; 0x294
 800a594:	4618      	mov	r0, r3
 800a596:	f006 fcda 	bl	8010f4e <_ZNSaIcED1Ev>
		display->drawString("Fine programma", NHDST7565_LCD::RIGHT_POS, 40, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 800a59a:	1d3b      	adds	r3, r7, #4
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	681c      	ldr	r4, [r3, #0]
 800a5a0:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f006 fcd1 	bl	8010f4c <_ZNSaIcEC1Ev>
 800a5aa:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 800a5ae:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800a5b2:	493d      	ldr	r1, [pc, #244]	; (800a6a8 <_ZN10SmartDryer12startProgramEh+0x728>)
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f006 ff91 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a5ba:	1d3b      	adds	r3, r7, #4
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a5c4:	f507 7126 	add.w	r1, r7, #664	; 0x298
 800a5c8:	9300      	str	r3, [sp, #0]
 800a5ca:	2328      	movs	r3, #40	; 0x28
 800a5cc:	2284      	movs	r2, #132	; 0x84
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	f7fa f995 	bl	80048fe <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a5d4:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f006 fde8 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a5de:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f006 fcb3 	bl	8010f4e <_ZNSaIcED1Ev>
		display->drawString(StartHour + ":" + StartMinute, NHDST7565_LCD::LEFT_POS, 50, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800a5e8:	1d3b      	adds	r3, r7, #4
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	681c      	ldr	r4, [r3, #0]
 800a5ee:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 800a5f2:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800a5f6:	4a2d      	ldr	r2, [pc, #180]	; (800a6ac <_ZN10SmartDryer12startProgramEh+0x72c>)
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7f9 fcaf 	bl	8003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 800a5fe:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800a602:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800a606:	f507 7133 	add.w	r1, r7, #716	; 0x2cc
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7f9 fcb9 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 800a610:	1d3b      	adds	r3, r7, #4
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a61a:	f507 712d 	add.w	r1, r7, #692	; 0x2b4
 800a61e:	9300      	str	r3, [sp, #0]
 800a620:	2332      	movs	r3, #50	; 0x32
 800a622:	2282      	movs	r2, #130	; 0x82
 800a624:	4620      	mov	r0, r4
 800a626:	f7fa f96a 	bl	80048fe <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a62a:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800a62e:	4618      	mov	r0, r3
 800a630:	f006 fdbd 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a634:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 800a638:	4618      	mov	r0, r3
 800a63a:	f006 fdb8 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(EndHour + ":" + EndMinute, NHDST7565_LCD::RIGHT_POS, 50, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800a63e:	1d3b      	adds	r3, r7, #4
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	681c      	ldr	r4, [r3, #0]
 800a644:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 800a648:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800a64c:	4a17      	ldr	r2, [pc, #92]	; (800a6ac <_ZN10SmartDryer12startProgramEh+0x72c>)
 800a64e:	4618      	mov	r0, r3
 800a650:	f7f9 fc84 	bl	8003f5c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 800a654:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 800a658:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800a65c:	f507 713f 	add.w	r1, r7, #764	; 0x2fc
 800a660:	4618      	mov	r0, r3
 800a662:	f7f9 fc8e 	bl	8003f82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 800a666:	1d3b      	adds	r3, r7, #4
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a670:	f507 7139 	add.w	r1, r7, #740	; 0x2e4
 800a674:	9300      	str	r3, [sp, #0]
 800a676:	2332      	movs	r3, #50	; 0x32
 800a678:	2284      	movs	r2, #132	; 0x84
 800a67a:	4620      	mov	r0, r4
 800a67c:	f7fa f93f 	bl	80048fe <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a680:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 800a684:	4618      	mov	r0, r3
 800a686:	f006 fd92 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a68a:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 800a68e:	4618      	mov	r0, r3
 800a690:	e00e      	b.n	800a6b0 <_ZN10SmartDryer12startProgramEh+0x730>
 800a692:	bf00      	nop
 800a694:	08012640 	.word	0x08012640
 800a698:	080125ac 	.word	0x080125ac
 800a69c:	08012644 	.word	0x08012644
 800a6a0:	08012650 	.word	0x08012650
 800a6a4:	08012660 	.word	0x08012660
 800a6a8:	08012674 	.word	0x08012674
 800a6ac:	08012684 	.word	0x08012684
 800a6b0:	f006 fd7d 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->sendFrameBuffer();
 800a6b4:	1d3b      	adds	r3, r7, #4
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f7fa f8e8 	bl	8004890 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 800a6c0:	2308      	movs	r3, #8
 800a6c2:	f887 3365 	strb.w	r3, [r7, #869]	; 0x365
		WichKey = keyboard->checkKey();
 800a6c6:	1d3b      	adds	r3, r7, #4
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	689b      	ldr	r3, [r3, #8]
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f7fa fee9 	bl	80054a4 <_ZN8DryerKey8checkKeyEv>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	f887 3365 	strb.w	r3, [r7, #869]	; 0x365
		switch(WichKey)
 800a6d8:	f897 3365 	ldrb.w	r3, [r7, #869]	; 0x365
 800a6dc:	2b03      	cmp	r3, #3
 800a6de:	d055      	beq.n	800a78c <_ZN10SmartDryer12startProgramEh+0x80c>
 800a6e0:	2b06      	cmp	r3, #6
 800a6e2:	d000      	beq.n	800a6e6 <_ZN10SmartDryer12startProgramEh+0x766>
					saveDryerProgram(WichProgram);
				}
				ExitStartProgram = true;
				break;
			default:
				break;
 800a6e4:	e053      	b.n	800a78e <_ZN10SmartDryer12startProgramEh+0x80e>
				statusParam->dryerOn = false;
 800a6e6:	1d3b      	adds	r3, r7, #4
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	701a      	strb	r2, [r3, #0]
				statusParam->programStarted = false;
 800a6f0:	1d3b      	adds	r3, r7, #4
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	721a      	strb	r2, [r3, #8]
				ledStatus = PROGRAM_END;
 800a6fa:	1d3b      	adds	r3, r7, #4
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 800a702:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
				display->drawFullScreenPopUp("Programma terminato", 2000);
 800a706:	1d3b      	adds	r3, r7, #4
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	681c      	ldr	r4, [r3, #0]
 800a70c:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 800a710:	4618      	mov	r0, r3
 800a712:	f006 fc1b 	bl	8010f4c <_ZNSaIcEC1Ev>
 800a716:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 800a71a:	f507 7345 	add.w	r3, r7, #788	; 0x314
 800a71e:	4993      	ldr	r1, [pc, #588]	; (800a96c <_ZN10SmartDryer12startProgramEh+0x9ec>)
 800a720:	4618      	mov	r0, r3
 800a722:	f006 fedb 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a726:	f507 7345 	add.w	r3, r7, #788	; 0x314
 800a72a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a72e:	4619      	mov	r1, r3
 800a730:	4620      	mov	r0, r4
 800a732:	f7fa fc0d 	bl	8004f50 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 800a736:	f507 7345 	add.w	r3, r7, #788	; 0x314
 800a73a:	4618      	mov	r0, r3
 800a73c:	f006 fd37 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a740:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 800a744:	4618      	mov	r0, r3
 800a746:	f006 fc02 	bl	8010f4e <_ZNSaIcED1Ev>
				programStartedTimer->stopTimer();
 800a74a:	1d3b      	adds	r3, r7, #4
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a750:	4618      	mov	r0, r3
 800a752:	f7f8 fe0a 	bl	800336a <_ZN11ChronoTimer9stopTimerEv>
				ProgramEnd = true;
 800a756:	2301      	movs	r3, #1
 800a758:	f887 3366 	strb.w	r3, [r7, #870]	; 0x366
				if(eepromEnabled)
 800a75c:	1d3b      	adds	r3, r7, #4
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800a764:	2b00      	cmp	r3, #0
 800a766:	d00d      	beq.n	800a784 <_ZN10SmartDryer12startProgramEh+0x804>
					writeDefaultsDryerProgram(WichProgram);
 800a768:	1cfb      	adds	r3, r7, #3
 800a76a:	781a      	ldrb	r2, [r3, #0]
 800a76c:	1d3b      	adds	r3, r7, #4
 800a76e:	4611      	mov	r1, r2
 800a770:	6818      	ldr	r0, [r3, #0]
 800a772:	f7fc f95f 	bl	8006a34 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>
					saveDryerProgram(WichProgram);
 800a776:	1cfb      	adds	r3, r7, #3
 800a778:	781a      	ldrb	r2, [r3, #0]
 800a77a:	1d3b      	adds	r3, r7, #4
 800a77c:	4611      	mov	r1, r2
 800a77e:	6818      	ldr	r0, [r3, #0]
 800a780:	f7fc f9f4 	bl	8006b6c <_ZN10SmartDryer16saveDryerProgramEh>
				ExitStartProgram = true;
 800a784:	2301      	movs	r3, #1
 800a786:	f887 3367 	strb.w	r3, [r7, #871]	; 0x367
				break;
 800a78a:	e000      	b.n	800a78e <_ZN10SmartDryer12startProgramEh+0x80e>
				break;
 800a78c:	bf00      	nop
		}

		if(!statusParam->programStarted && !ProgramEnd)
 800a78e:	1d3b      	adds	r3, r7, #4
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a794:	7a1b      	ldrb	r3, [r3, #8]
 800a796:	f083 0301 	eor.w	r3, r3, #1
 800a79a:	b2db      	uxtb	r3, r3
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	f000 80e9 	beq.w	800a974 <_ZN10SmartDryer12startProgramEh+0x9f4>
 800a7a2:	f897 3366 	ldrb.w	r3, [r7, #870]	; 0x366
 800a7a6:	f083 0301 	eor.w	r3, r3, #1
 800a7aa:	b2db      	uxtb	r3, r3
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	f000 80e1 	beq.w	800a974 <_ZN10SmartDryer12startProgramEh+0x9f4>
		{
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour &&
 800a7b2:	f107 030c 	add.w	r3, r7, #12
 800a7b6:	7899      	ldrb	r1, [r3, #2]
 800a7b8:	1cfb      	adds	r3, r7, #3
 800a7ba:	781a      	ldrb	r2, [r3, #0]
 800a7bc:	1d3b      	adds	r3, r7, #4
 800a7be:	6818      	ldr	r0, [r3, #0]
 800a7c0:	4613      	mov	r3, r2
 800a7c2:	005b      	lsls	r3, r3, #1
 800a7c4:	4413      	add	r3, r2
 800a7c6:	00db      	lsls	r3, r3, #3
 800a7c8:	4403      	add	r3, r0
 800a7ca:	334c      	adds	r3, #76	; 0x4c
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	4299      	cmp	r1, r3
 800a7d0:	f0c0 8176 	bcc.w	800aac0 <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.minute >= dryerPrograms[WichProgram].startTime.minute &&
 800a7d4:	f107 030c 	add.w	r3, r7, #12
 800a7d8:	7859      	ldrb	r1, [r3, #1]
 800a7da:	1cfb      	adds	r3, r7, #3
 800a7dc:	781a      	ldrb	r2, [r3, #0]
 800a7de:	1d3b      	adds	r3, r7, #4
 800a7e0:	6818      	ldr	r0, [r3, #0]
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	005b      	lsls	r3, r3, #1
 800a7e6:	4413      	add	r3, r2
 800a7e8:	00db      	lsls	r3, r3, #3
 800a7ea:	4403      	add	r3, r0
 800a7ec:	334b      	adds	r3, #75	; 0x4b
 800a7ee:	781b      	ldrb	r3, [r3, #0]
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour &&
 800a7f0:	4299      	cmp	r1, r3
 800a7f2:	f0c0 8165 	bcc.w	800aac0 <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.day >= dryerPrograms[WichProgram].startTime.day &&
 800a7f6:	f107 030c 	add.w	r3, r7, #12
 800a7fa:	78d9      	ldrb	r1, [r3, #3]
 800a7fc:	1cfb      	adds	r3, r7, #3
 800a7fe:	781a      	ldrb	r2, [r3, #0]
 800a800:	1d3b      	adds	r3, r7, #4
 800a802:	6818      	ldr	r0, [r3, #0]
 800a804:	4613      	mov	r3, r2
 800a806:	005b      	lsls	r3, r3, #1
 800a808:	4413      	add	r3, r2
 800a80a:	00db      	lsls	r3, r3, #3
 800a80c:	4403      	add	r3, r0
 800a80e:	334d      	adds	r3, #77	; 0x4d
 800a810:	781b      	ldrb	r3, [r3, #0]
					ActualTime.minute >= dryerPrograms[WichProgram].startTime.minute &&
 800a812:	4299      	cmp	r1, r3
 800a814:	f0c0 8154 	bcc.w	800aac0 <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.month >= dryerPrograms[WichProgram].startTime.month &&
 800a818:	f107 030c 	add.w	r3, r7, #12
 800a81c:	7919      	ldrb	r1, [r3, #4]
 800a81e:	1cfb      	adds	r3, r7, #3
 800a820:	781a      	ldrb	r2, [r3, #0]
 800a822:	1d3b      	adds	r3, r7, #4
 800a824:	6818      	ldr	r0, [r3, #0]
 800a826:	4613      	mov	r3, r2
 800a828:	005b      	lsls	r3, r3, #1
 800a82a:	4413      	add	r3, r2
 800a82c:	00db      	lsls	r3, r3, #3
 800a82e:	4403      	add	r3, r0
 800a830:	334e      	adds	r3, #78	; 0x4e
 800a832:	781b      	ldrb	r3, [r3, #0]
					ActualTime.day >= dryerPrograms[WichProgram].startTime.day &&
 800a834:	4299      	cmp	r1, r3
 800a836:	f0c0 8143 	bcc.w	800aac0 <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.year >= dryerPrograms[WichProgram].startTime.year &&
 800a83a:	f107 030c 	add.w	r3, r7, #12
 800a83e:	88d9      	ldrh	r1, [r3, #6]
 800a840:	1cfb      	adds	r3, r7, #3
 800a842:	781a      	ldrb	r2, [r3, #0]
 800a844:	1d3b      	adds	r3, r7, #4
 800a846:	6818      	ldr	r0, [r3, #0]
 800a848:	4613      	mov	r3, r2
 800a84a:	005b      	lsls	r3, r3, #1
 800a84c:	4413      	add	r3, r2
 800a84e:	00db      	lsls	r3, r3, #3
 800a850:	4403      	add	r3, r0
 800a852:	3350      	adds	r3, #80	; 0x50
 800a854:	881b      	ldrh	r3, [r3, #0]
					ActualTime.month >= dryerPrograms[WichProgram].startTime.month &&
 800a856:	4299      	cmp	r1, r3
 800a858:	f0c0 8132 	bcc.w	800aac0 <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.day <= dryerPrograms[WichProgram].endTime.day &&
 800a85c:	f107 030c 	add.w	r3, r7, #12
 800a860:	78d9      	ldrb	r1, [r3, #3]
 800a862:	1cfb      	adds	r3, r7, #3
 800a864:	781a      	ldrb	r2, [r3, #0]
 800a866:	1d3b      	adds	r3, r7, #4
 800a868:	6818      	ldr	r0, [r3, #0]
 800a86a:	4613      	mov	r3, r2
 800a86c:	005b      	lsls	r3, r3, #1
 800a86e:	4413      	add	r3, r2
 800a870:	00db      	lsls	r3, r3, #3
 800a872:	4403      	add	r3, r0
 800a874:	3355      	adds	r3, #85	; 0x55
 800a876:	781b      	ldrb	r3, [r3, #0]
					ActualTime.year >= dryerPrograms[WichProgram].startTime.year &&
 800a878:	4299      	cmp	r1, r3
 800a87a:	f200 8121 	bhi.w	800aac0 <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.hour <= dryerPrograms[WichProgram].endTime.hour &&
 800a87e:	f107 030c 	add.w	r3, r7, #12
 800a882:	7899      	ldrb	r1, [r3, #2]
 800a884:	1cfb      	adds	r3, r7, #3
 800a886:	781a      	ldrb	r2, [r3, #0]
 800a888:	1d3b      	adds	r3, r7, #4
 800a88a:	6818      	ldr	r0, [r3, #0]
 800a88c:	4613      	mov	r3, r2
 800a88e:	005b      	lsls	r3, r3, #1
 800a890:	4413      	add	r3, r2
 800a892:	00db      	lsls	r3, r3, #3
 800a894:	4403      	add	r3, r0
 800a896:	3354      	adds	r3, #84	; 0x54
 800a898:	781b      	ldrb	r3, [r3, #0]
					ActualTime.day <= dryerPrograms[WichProgram].endTime.day &&
 800a89a:	4299      	cmp	r1, r3
 800a89c:	f200 8110 	bhi.w	800aac0 <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.minute <= dryerPrograms[WichProgram].endTime.minute &&
 800a8a0:	f107 030c 	add.w	r3, r7, #12
 800a8a4:	7859      	ldrb	r1, [r3, #1]
 800a8a6:	1cfb      	adds	r3, r7, #3
 800a8a8:	781a      	ldrb	r2, [r3, #0]
 800a8aa:	1d3b      	adds	r3, r7, #4
 800a8ac:	6818      	ldr	r0, [r3, #0]
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	005b      	lsls	r3, r3, #1
 800a8b2:	4413      	add	r3, r2
 800a8b4:	00db      	lsls	r3, r3, #3
 800a8b6:	4403      	add	r3, r0
 800a8b8:	3353      	adds	r3, #83	; 0x53
 800a8ba:	781b      	ldrb	r3, [r3, #0]
					ActualTime.hour <= dryerPrograms[WichProgram].endTime.hour &&
 800a8bc:	4299      	cmp	r1, r3
 800a8be:	f200 80ff 	bhi.w	800aac0 <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.month <= dryerPrograms[WichProgram].endTime.month &&
 800a8c2:	f107 030c 	add.w	r3, r7, #12
 800a8c6:	7919      	ldrb	r1, [r3, #4]
 800a8c8:	1cfb      	adds	r3, r7, #3
 800a8ca:	781a      	ldrb	r2, [r3, #0]
 800a8cc:	1d3b      	adds	r3, r7, #4
 800a8ce:	6818      	ldr	r0, [r3, #0]
 800a8d0:	4613      	mov	r3, r2
 800a8d2:	005b      	lsls	r3, r3, #1
 800a8d4:	4413      	add	r3, r2
 800a8d6:	00db      	lsls	r3, r3, #3
 800a8d8:	4403      	add	r3, r0
 800a8da:	3356      	adds	r3, #86	; 0x56
 800a8dc:	781b      	ldrb	r3, [r3, #0]
					ActualTime.minute <= dryerPrograms[WichProgram].endTime.minute &&
 800a8de:	4299      	cmp	r1, r3
 800a8e0:	f200 80ee 	bhi.w	800aac0 <_ZN10SmartDryer12startProgramEh+0xb40>
					ActualTime.year <= dryerPrograms[WichProgram].endTime.year)
 800a8e4:	f107 030c 	add.w	r3, r7, #12
 800a8e8:	88d9      	ldrh	r1, [r3, #6]
 800a8ea:	1cfb      	adds	r3, r7, #3
 800a8ec:	781a      	ldrb	r2, [r3, #0]
 800a8ee:	1d3b      	adds	r3, r7, #4
 800a8f0:	6818      	ldr	r0, [r3, #0]
 800a8f2:	4613      	mov	r3, r2
 800a8f4:	005b      	lsls	r3, r3, #1
 800a8f6:	4413      	add	r3, r2
 800a8f8:	00db      	lsls	r3, r3, #3
 800a8fa:	4403      	add	r3, r0
 800a8fc:	3358      	adds	r3, #88	; 0x58
 800a8fe:	881b      	ldrh	r3, [r3, #0]
					ActualTime.month <= dryerPrograms[WichProgram].endTime.month &&
 800a900:	4299      	cmp	r1, r3
 800a902:	f200 80dd 	bhi.w	800aac0 <_ZN10SmartDryer12startProgramEh+0xb40>
			{
				statusParam->programStarted = true;
 800a906:	1d3b      	adds	r3, r7, #4
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a90c:	2201      	movs	r2, #1
 800a90e:	721a      	strb	r2, [r3, #8]
				statusParam->dryerOn = true;
 800a910:	1d3b      	adds	r3, r7, #4
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a916:	2201      	movs	r2, #1
 800a918:	701a      	strb	r2, [r3, #0]
				ledStatus = PROGRAM_INIT;
 800a91a:	1d3b      	adds	r3, r7, #4
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f240 12f5 	movw	r2, #501	; 0x1f5
 800a922:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
				display->drawFullScreenPopUp("Programma iniziato", 2000);
 800a926:	1d3b      	adds	r3, r7, #4
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	681c      	ldr	r4, [r3, #0]
 800a92c:	f507 7352 	add.w	r3, r7, #840	; 0x348
 800a930:	4618      	mov	r0, r3
 800a932:	f006 fb0b 	bl	8010f4c <_ZNSaIcEC1Ev>
 800a936:	f507 7252 	add.w	r2, r7, #840	; 0x348
 800a93a:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800a93e:	490c      	ldr	r1, [pc, #48]	; (800a970 <_ZN10SmartDryer12startProgramEh+0x9f0>)
 800a940:	4618      	mov	r0, r3
 800a942:	f006 fdcb 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a946:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800a94a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a94e:	4619      	mov	r1, r3
 800a950:	4620      	mov	r0, r4
 800a952:	f7fa fafd 	bl	8004f50 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 800a956:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800a95a:	4618      	mov	r0, r3
 800a95c:	f006 fc27 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a960:	f507 7352 	add.w	r3, r7, #840	; 0x348
 800a964:	4618      	mov	r0, r3
 800a966:	f006 faf2 	bl	8010f4e <_ZNSaIcED1Ev>
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour &&
 800a96a:	e0a9      	b.n	800aac0 <_ZN10SmartDryer12startProgramEh+0xb40>
 800a96c:	08012688 	.word	0x08012688
 800a970:	0801269c 	.word	0x0801269c
//				ExitStartProgram = true;
//			}
		}
		else
		{
			if(!ProgramEnd)
 800a974:	f897 3366 	ldrb.w	r3, [r7, #870]	; 0x366
 800a978:	f083 0301 	eor.w	r3, r3, #1
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	2b00      	cmp	r3, #0
 800a980:	f000 809f 	beq.w	800aac2 <_ZN10SmartDryer12startProgramEh+0xb42>
			{
				if(ActualTime.hour == dryerPrograms[WichProgram].endTime.hour &&
 800a984:	f107 030c 	add.w	r3, r7, #12
 800a988:	7899      	ldrb	r1, [r3, #2]
 800a98a:	1cfb      	adds	r3, r7, #3
 800a98c:	781a      	ldrb	r2, [r3, #0]
 800a98e:	1d3b      	adds	r3, r7, #4
 800a990:	6818      	ldr	r0, [r3, #0]
 800a992:	4613      	mov	r3, r2
 800a994:	005b      	lsls	r3, r3, #1
 800a996:	4413      	add	r3, r2
 800a998:	00db      	lsls	r3, r3, #3
 800a99a:	4403      	add	r3, r0
 800a99c:	3354      	adds	r3, #84	; 0x54
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	4299      	cmp	r1, r3
 800a9a2:	f040 808e 	bne.w	800aac2 <_ZN10SmartDryer12startProgramEh+0xb42>
						ActualTime.minute == dryerPrograms[WichProgram].endTime.minute &&
 800a9a6:	f107 030c 	add.w	r3, r7, #12
 800a9aa:	7859      	ldrb	r1, [r3, #1]
 800a9ac:	1cfb      	adds	r3, r7, #3
 800a9ae:	781a      	ldrb	r2, [r3, #0]
 800a9b0:	1d3b      	adds	r3, r7, #4
 800a9b2:	6818      	ldr	r0, [r3, #0]
 800a9b4:	4613      	mov	r3, r2
 800a9b6:	005b      	lsls	r3, r3, #1
 800a9b8:	4413      	add	r3, r2
 800a9ba:	00db      	lsls	r3, r3, #3
 800a9bc:	4403      	add	r3, r0
 800a9be:	3353      	adds	r3, #83	; 0x53
 800a9c0:	781b      	ldrb	r3, [r3, #0]
				if(ActualTime.hour == dryerPrograms[WichProgram].endTime.hour &&
 800a9c2:	4299      	cmp	r1, r3
 800a9c4:	d17d      	bne.n	800aac2 <_ZN10SmartDryer12startProgramEh+0xb42>
						ActualTime.day == dryerPrograms[WichProgram].endTime.day &&
 800a9c6:	f107 030c 	add.w	r3, r7, #12
 800a9ca:	78d9      	ldrb	r1, [r3, #3]
 800a9cc:	1cfb      	adds	r3, r7, #3
 800a9ce:	781a      	ldrb	r2, [r3, #0]
 800a9d0:	1d3b      	adds	r3, r7, #4
 800a9d2:	6818      	ldr	r0, [r3, #0]
 800a9d4:	4613      	mov	r3, r2
 800a9d6:	005b      	lsls	r3, r3, #1
 800a9d8:	4413      	add	r3, r2
 800a9da:	00db      	lsls	r3, r3, #3
 800a9dc:	4403      	add	r3, r0
 800a9de:	3355      	adds	r3, #85	; 0x55
 800a9e0:	781b      	ldrb	r3, [r3, #0]
						ActualTime.minute == dryerPrograms[WichProgram].endTime.minute &&
 800a9e2:	4299      	cmp	r1, r3
 800a9e4:	d16d      	bne.n	800aac2 <_ZN10SmartDryer12startProgramEh+0xb42>
						ActualTime.month == dryerPrograms[WichProgram].endTime.month &&
 800a9e6:	f107 030c 	add.w	r3, r7, #12
 800a9ea:	7919      	ldrb	r1, [r3, #4]
 800a9ec:	1cfb      	adds	r3, r7, #3
 800a9ee:	781a      	ldrb	r2, [r3, #0]
 800a9f0:	1d3b      	adds	r3, r7, #4
 800a9f2:	6818      	ldr	r0, [r3, #0]
 800a9f4:	4613      	mov	r3, r2
 800a9f6:	005b      	lsls	r3, r3, #1
 800a9f8:	4413      	add	r3, r2
 800a9fa:	00db      	lsls	r3, r3, #3
 800a9fc:	4403      	add	r3, r0
 800a9fe:	3356      	adds	r3, #86	; 0x56
 800aa00:	781b      	ldrb	r3, [r3, #0]
						ActualTime.day == dryerPrograms[WichProgram].endTime.day &&
 800aa02:	4299      	cmp	r1, r3
 800aa04:	d15d      	bne.n	800aac2 <_ZN10SmartDryer12startProgramEh+0xb42>
						ActualTime.year == dryerPrograms[WichProgram].endTime.year)
 800aa06:	f107 030c 	add.w	r3, r7, #12
 800aa0a:	88d9      	ldrh	r1, [r3, #6]
 800aa0c:	1cfb      	adds	r3, r7, #3
 800aa0e:	781a      	ldrb	r2, [r3, #0]
 800aa10:	1d3b      	adds	r3, r7, #4
 800aa12:	6818      	ldr	r0, [r3, #0]
 800aa14:	4613      	mov	r3, r2
 800aa16:	005b      	lsls	r3, r3, #1
 800aa18:	4413      	add	r3, r2
 800aa1a:	00db      	lsls	r3, r3, #3
 800aa1c:	4403      	add	r3, r0
 800aa1e:	3358      	adds	r3, #88	; 0x58
 800aa20:	881b      	ldrh	r3, [r3, #0]
						ActualTime.month == dryerPrograms[WichProgram].endTime.month &&
 800aa22:	4299      	cmp	r1, r3
 800aa24:	d14d      	bne.n	800aac2 <_ZN10SmartDryer12startProgramEh+0xb42>
				{
					statusParam->programStarted = false;
 800aa26:	1d3b      	adds	r3, r7, #4
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	721a      	strb	r2, [r3, #8]
					statusParam->dryerOn = false;
 800aa30:	1d3b      	adds	r3, r7, #4
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa36:	2200      	movs	r2, #0
 800aa38:	701a      	strb	r2, [r3, #0]
					ledStatus = PROGRAM_END;
 800aa3a:	1d3b      	adds	r3, r7, #4
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 800aa42:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
					ProgramEnd = true;
 800aa46:	2301      	movs	r3, #1
 800aa48:	f887 3366 	strb.w	r3, [r7, #870]	; 0x366
					display->drawFullScreenPopUp("Programma terminato", 2000);
 800aa4c:	1d3b      	adds	r3, r7, #4
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	681c      	ldr	r4, [r3, #0]
 800aa52:	f507 7359 	add.w	r3, r7, #868	; 0x364
 800aa56:	4618      	mov	r0, r3
 800aa58:	f006 fa78 	bl	8010f4c <_ZNSaIcEC1Ev>
 800aa5c:	f507 7259 	add.w	r2, r7, #868	; 0x364
 800aa60:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 800aa64:	493b      	ldr	r1, [pc, #236]	; (800ab54 <_ZN10SmartDryer12startProgramEh+0xbd4>)
 800aa66:	4618      	mov	r0, r3
 800aa68:	f006 fd38 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800aa6c:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 800aa70:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800aa74:	4619      	mov	r1, r3
 800aa76:	4620      	mov	r0, r4
 800aa78:	f7fa fa6a 	bl	8004f50 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 800aa7c:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 800aa80:	4618      	mov	r0, r3
 800aa82:	f006 fb94 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800aa86:	f507 7359 	add.w	r3, r7, #868	; 0x364
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f006 fa5f 	bl	8010f4e <_ZNSaIcED1Ev>
					if(eepromEnabled)
 800aa90:	1d3b      	adds	r3, r7, #4
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d00d      	beq.n	800aab8 <_ZN10SmartDryer12startProgramEh+0xb38>
					{
						writeDefaultsDryerProgram(WichProgram);
 800aa9c:	1cfb      	adds	r3, r7, #3
 800aa9e:	781a      	ldrb	r2, [r3, #0]
 800aaa0:	1d3b      	adds	r3, r7, #4
 800aaa2:	4611      	mov	r1, r2
 800aaa4:	6818      	ldr	r0, [r3, #0]
 800aaa6:	f7fb ffc5 	bl	8006a34 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>
						saveDryerProgram(WichProgram);
 800aaaa:	1cfb      	adds	r3, r7, #3
 800aaac:	781a      	ldrb	r2, [r3, #0]
 800aaae:	1d3b      	adds	r3, r7, #4
 800aab0:	4611      	mov	r1, r2
 800aab2:	6818      	ldr	r0, [r3, #0]
 800aab4:	f7fc f85a 	bl	8006b6c <_ZN10SmartDryer16saveDryerProgramEh>
					}
					ExitStartProgram = true;
 800aab8:	2301      	movs	r3, #1
 800aaba:	f887 3367 	strb.w	r3, [r7, #871]	; 0x367
 800aabe:	e000      	b.n	800aac2 <_ZN10SmartDryer12startProgramEh+0xb42>
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour &&
 800aac0:	bf00      	nop
				}
			}
		}
		peripheralsControl();
 800aac2:	1d3b      	adds	r3, r7, #4
 800aac4:	6818      	ldr	r0, [r3, #0]
 800aac6:	f7fb ff45 	bl	8006954 <_ZN10SmartDryer18peripheralsControlEv>
		statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 800aaca:	1d3b      	adds	r3, r7, #4
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aad0:	1d3b      	adds	r3, r7, #4
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800aad6:	4610      	mov	r0, r2
 800aad8:	f7fb f840 	bl	8005b5c <_ZN13SerialMessage17isDeviceConnectedEv>
 800aadc:	4603      	mov	r3, r0
 800aade:	7263      	strb	r3, [r4, #9]
		if(statusParam->serialDeviceAttached)
 800aae0:	1d3b      	adds	r3, r7, #4
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aae6:	7a5b      	ldrb	r3, [r3, #9]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	f43f ac5a 	beq.w	800a3a2 <_ZN10SmartDryer12startProgramEh+0x422>
		{
			serialComunicationCtrl();
 800aaee:	1d3b      	adds	r3, r7, #4
 800aaf0:	6818      	ldr	r0, [r3, #0]
 800aaf2:	f7fc fc31 	bl	8007358 <_ZN10SmartDryer22serialComunicationCtrlEv>
	while(!ExitStartProgram)
 800aaf6:	e454      	b.n	800a3a2 <_ZN10SmartDryer12startProgramEh+0x422>
	String TempRead = "0C", TempSet = "0";
 800aaf8:	f107 0314 	add.w	r3, r7, #20
 800aafc:	4618      	mov	r0, r3
 800aafe:	f006 fb56 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ab02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ab06:	4618      	mov	r0, r3
 800ab08:	f006 fb51 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String StartHour = "", StartMinute = "", EndHour = "", EndMinute = "";
 800ab0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ab10:	4618      	mov	r0, r3
 800ab12:	f006 fb4c 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ab16:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f006 fb47 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ab20:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800ab24:	4618      	mov	r0, r3
 800ab26:	f006 fb42 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ab2a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f006 fb3d 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Time = "", Date = "";
 800ab34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f006 fb38 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ab3e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800ab42:	4618      	mov	r0, r3
 800ab44:	f006 fb33 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
}
 800ab48:	bf00      	nop
 800ab4a:	f507 775b 	add.w	r7, r7, #876	; 0x36c
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd90      	pop	{r4, r7, pc}
 800ab52:	bf00      	nop
 800ab54:	08012688 	.word	0x08012688

0800ab58 <_ZN10SmartDryer3runEv>:

void SmartDryer::run()
{
 800ab58:	b590      	push	{r4, r7, lr}
 800ab5a:	b08b      	sub	sp, #44	; 0x2c
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
	display->drawFullScreenPopUp("Smart Dryer", 1000);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681c      	ldr	r4, [r3, #0]
 800ab64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f006 f9ef 	bl	8010f4c <_ZNSaIcEC1Ev>
 800ab6e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ab72:	f107 030c 	add.w	r3, r7, #12
 800ab76:	4936      	ldr	r1, [pc, #216]	; (800ac50 <_ZN10SmartDryer3runEv+0xf8>)
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f006 fcaf 	bl	80114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800ab7e:	f107 030c 	add.w	r3, r7, #12
 800ab82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ab86:	4619      	mov	r1, r3
 800ab88:	4620      	mov	r0, r4
 800ab8a:	f7fa f9e1 	bl	8004f50 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 800ab8e:	f107 030c 	add.w	r3, r7, #12
 800ab92:	4618      	mov	r0, r3
 800ab94:	f006 fb0b 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ab98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f006 f9d6 	bl	8010f4e <_ZNSaIcED1Ev>
	while(1)
	{
		switch(screen)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800aba8:	2b09      	cmp	r3, #9
 800abaa:	d84f      	bhi.n	800ac4c <_ZN10SmartDryer3runEv+0xf4>
 800abac:	a201      	add	r2, pc, #4	; (adr r2, 800abb4 <_ZN10SmartDryer3runEv+0x5c>)
 800abae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abb2:	bf00      	nop
 800abb4:	0800abdd 	.word	0x0800abdd
 800abb8:	0800abe5 	.word	0x0800abe5
 800abbc:	0800abf5 	.word	0x0800abf5
 800abc0:	0800ac05 	.word	0x0800ac05
 800abc4:	0800ac15 	.word	0x0800ac15
 800abc8:	0800ac15 	.word	0x0800ac15
 800abcc:	0800ac15 	.word	0x0800ac15
 800abd0:	0800ac31 	.word	0x0800ac31
 800abd4:	0800ac31 	.word	0x0800ac31
 800abd8:	0800ac31 	.word	0x0800ac31
		{
			case NAV_MENU:
				navMenu();
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f7fd f80f 	bl	8007c00 <_ZN10SmartDryer7navMenuEv>
				break;
 800abe2:	e034      	b.n	800ac4e <_ZN10SmartDryer3runEv+0xf6>
			case CHANGE_TIME:
				changeTime();
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f7fe f8c5 	bl	8008d74 <_ZN10SmartDryer10changeTimeEv>
				screen = NAV_MENU;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2200      	movs	r2, #0
 800abee:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				break;
 800abf2:	e02c      	b.n	800ac4e <_ZN10SmartDryer3runEv+0xf6>
			case CHANGE_DATE:
				changeDate();
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f7fe fa85 	bl	8009104 <_ZN10SmartDryer10changeDateEv>
				screen = NAV_MENU;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2200      	movs	r2, #0
 800abfe:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				break;
 800ac02:	e024      	b.n	800ac4e <_ZN10SmartDryer3runEv+0xf6>
			case SHOW_INFO:
				showInfo();
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f7fe fcc5 	bl	8009594 <_ZN10SmartDryer8showInfoEv>
				screen = NAV_MENU;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				break;
 800ac12:	e01c      	b.n	800ac4e <_ZN10SmartDryer3runEv+0xf6>
			case CHANGE_PROGRAM_1:
			case CHANGE_PROGRAM_2:
			case CHANGE_PROGRAM_3:
				//TODO aggiungere altri possibili programmi in cascata
				changeProgram(screen - CHANGE_PROGRAM_1);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800ac1a:	3b04      	subs	r3, #4
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	4619      	mov	r1, r3
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f7fe fe23 	bl	800986c <_ZN10SmartDryer13changeProgramEh>
				screen = NAV_MENU;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				break;
 800ac2e:	e00e      	b.n	800ac4e <_ZN10SmartDryer3runEv+0xf6>
			case START_PROGRAM_1:
			case START_PROGRAM_2:
			case START_PROGRAM_3:
				//TODO aggiungere altri possibili programmi in cascata
				startProgram(screen - START_PROGRAM_1);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800ac36:	3b07      	subs	r3, #7
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f7ff f99f 	bl	8009f80 <_ZN10SmartDryer12startProgramEh>
				screen = NAV_MENU;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2200      	movs	r2, #0
 800ac46:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				break;
 800ac4a:	e000      	b.n	800ac4e <_ZN10SmartDryer3runEv+0xf6>
			default:
				break;
 800ac4c:	bf00      	nop
		switch(screen)
 800ac4e:	e7a8      	b.n	800aba2 <_ZN10SmartDryer3runEv+0x4a>
 800ac50:	080126b0 	.word	0x080126b0

0800ac54 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f000 f83a 	bl	800acd8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	4618      	mov	r0, r3
 800ac68:	3708      	adds	r7, #8
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}

0800ac6e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b082      	sub	sp, #8
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
 800ac76:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800ac78:	6838      	ldr	r0, [r7, #0]
 800ac7a:	f7f9 f9cb 	bl	8004014 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	4619      	mov	r1, r3
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f000 f857 	bl	800ad36 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_>
 800ac88:	bf00      	nop
 800ac8a:	3708      	adds	r7, #8
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	1ad3      	subs	r3, r2, r3
 800aca4:	10db      	asrs	r3, r3, #3
 800aca6:	4a04      	ldr	r2, [pc, #16]	; (800acb8 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv+0x28>)
 800aca8:	fb02 f303 	mul.w	r3, r2, r3
 800acac:	4618      	mov	r0, r3
 800acae:	370c      	adds	r7, #12
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bc80      	pop	{r7}
 800acb4:	4770      	bx	lr
 800acb6:	bf00      	nop
 800acb8:	aaaaaaab 	.word	0xaaaaaaab

0800acbc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b082      	sub	sp, #8
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4619      	mov	r1, r3
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 f862 	bl	800ad94 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endEPS5_>
 800acd0:	bf00      	nop
 800acd2:	3708      	adds	r7, #8
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      _Vector_base()
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	4618      	mov	r0, r3
 800ace4:	f000 f86e 	bl	800adc4 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	4618      	mov	r0, r3
 800acec:	3708      	adds	r7, #8
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800acf2:	b480      	push	{r7}
 800acf4:	b083      	sub	sp, #12
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	4618      	mov	r0, r3
 800acfe:	370c      	adds	r7, #12
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bc80      	pop	{r7}
 800ad04:	4770      	bx	lr

0800ad06 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800ad06:	b580      	push	{r7, lr}
 800ad08:	b084      	sub	sp, #16
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	60f8      	str	r0, [r7, #12]
 800ad0e:	60b9      	str	r1, [r7, #8]
 800ad10:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800ad12:	68b9      	ldr	r1, [r7, #8]
 800ad14:	68f8      	ldr	r0, [r7, #12]
 800ad16:	f000 f87d 	bl	800ae14 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
    }
 800ad1a:	bf00      	nop
 800ad1c:	3710      	adds	r7, #16
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ad22:	b480      	push	{r7}
 800ad24:	b083      	sub	sp, #12
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	370c      	adds	r7, #12
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bc80      	pop	{r7}
 800ad34:	4770      	bx	lr

0800ad36 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 800ad36:	b5b0      	push	{r4, r5, r7, lr}
 800ad38:	b082      	sub	sp, #8
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	6078      	str	r0, [r7, #4]
 800ad3e:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	685a      	ldr	r2, [r3, #4]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d012      	beq.n	800ad72 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_+0x3c>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800ad4c:	687c      	ldr	r4, [r7, #4]
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	685d      	ldr	r5, [r3, #4]
 800ad52:	6838      	ldr	r0, [r7, #0]
 800ad54:	f7ff ffe5 	bl	800ad22 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	4629      	mov	r1, r5
 800ad5e:	4620      	mov	r0, r4
 800ad60:	f000 f865 	bl	800ae2e <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	f103 0218 	add.w	r2, r3, #24
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 800ad70:	e00c      	b.n	800ad8c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 f86e 	bl	800ae54 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 800ad78:	4604      	mov	r4, r0
 800ad7a:	6838      	ldr	r0, [r7, #0]
 800ad7c:	f7ff ffd1 	bl	800ad22 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800ad80:	4603      	mov	r3, r0
 800ad82:	461a      	mov	r2, r3
 800ad84:	4621      	mov	r1, r4
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 f876 	bl	800ae78 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
      }
 800ad8c:	bf00      	nop
 800ad8e:	3708      	adds	r7, #8
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bdb0      	pop	{r4, r5, r7, pc}

0800ad94 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endEPS5_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800ad94:	b590      	push	{r4, r7, lr}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	685c      	ldr	r4, [r3, #4]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7ff ffa4 	bl	800acf2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800adaa:	4603      	mov	r3, r0
 800adac:	461a      	mov	r2, r3
 800adae:	4621      	mov	r1, r4
 800adb0:	6838      	ldr	r0, [r7, #0]
 800adb2:	f7ff ffa8 	bl	800ad06 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	683a      	ldr	r2, [r7, #0]
 800adba:	605a      	str	r2, [r3, #4]
      }
 800adbc:	bf00      	nop
 800adbe:	370c      	adds	r7, #12
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd90      	pop	{r4, r7, pc}

0800adc4 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl()
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b082      	sub	sp, #8
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 f8eb 	bl	800afa8 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2200      	movs	r2, #0
 800add6:	601a      	str	r2, [r3, #0]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2200      	movs	r2, #0
 800addc:	605a      	str	r2, [r3, #4]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2200      	movs	r2, #0
 800ade2:	609a      	str	r2, [r3, #8]
	{ }
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	4618      	mov	r0, r3
 800ade8:	3708      	adds	r7, #8
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}

0800adee <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>:
      _M_deallocate(pointer __p, size_t __n)
 800adee:	b580      	push	{r7, lr}
 800adf0:	b084      	sub	sp, #16
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	60f8      	str	r0, [r7, #12]
 800adf6:	60b9      	str	r1, [r7, #8]
 800adf8:	607a      	str	r2, [r7, #4]
	if (__p)
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d005      	beq.n	800ae0c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	68b9      	ldr	r1, [r7, #8]
 800ae06:	4618      	mov	r0, r3
 800ae08:	f000 f8da 	bl	800afc0 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>
      }
 800ae0c:	bf00      	nop
 800ae0e:	3710      	adds	r7, #16
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b082      	sub	sp, #8
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800ae1e:	6839      	ldr	r1, [r7, #0]
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f000 f8e6 	bl	800aff2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
    }
 800ae26:	bf00      	nop
 800ae28:	3708      	adds	r7, #8
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}

0800ae2e <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800ae2e:	b580      	push	{r7, lr}
 800ae30:	b084      	sub	sp, #16
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	60f8      	str	r0, [r7, #12]
 800ae36:	60b9      	str	r1, [r7, #8]
 800ae38:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f7ff ff71 	bl	800ad22 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800ae40:	4603      	mov	r3, r0
 800ae42:	461a      	mov	r2, r3
 800ae44:	68b9      	ldr	r1, [r7, #8]
 800ae46:	68f8      	ldr	r0, [r7, #12]
 800ae48:	f000 f8eb 	bl	800b022 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_>
 800ae4c:	bf00      	nop
 800ae4e:	3710      	adds	r7, #16
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	1d1a      	adds	r2, r3, #4
 800ae60:	f107 030c 	add.w	r3, r7, #12
 800ae64:	4611      	mov	r1, r2
 800ae66:	4618      	mov	r0, r3
 800ae68:	f000 f8f5 	bl	800b056 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3710      	adds	r7, #16
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
	...

0800ae78 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800ae78:	b5b0      	push	{r4, r5, r7, lr}
 800ae7a:	b08a      	sub	sp, #40	; 0x28
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	60f8      	str	r0, [r7, #12]
 800ae80:	60b9      	str	r1, [r7, #8]
 800ae82:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 800ae84:	4a46      	ldr	r2, [pc, #280]	; (800afa0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x128>)
 800ae86:	2101      	movs	r1, #1
 800ae88:	68f8      	ldr	r0, [r7, #12]
 800ae8a:	f000 f8f3 	bl	800b074 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>
 800ae8e:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 800ae90:	68f8      	ldr	r0, [r7, #12]
 800ae92:	f000 f937 	bl	800b104 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 800ae96:	4603      	mov	r3, r0
 800ae98:	617b      	str	r3, [r7, #20]
 800ae9a:	f107 0214 	add.w	r2, r7, #20
 800ae9e:	f107 0308 	add.w	r3, r7, #8
 800aea2:	4611      	mov	r1, r2
 800aea4:	4618      	mov	r0, r3
 800aea6:	f000 f93d 	bl	800b124 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f000 f952 	bl	800b15c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>
 800aeb8:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800aeba:	69fb      	ldr	r3, [r7, #28]
 800aebc:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800aebe:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800aec0:	6a3a      	ldr	r2, [r7, #32]
 800aec2:	4613      	mov	r3, r2
 800aec4:	005b      	lsls	r3, r3, #1
 800aec6:	4413      	add	r3, r2
 800aec8:	00db      	lsls	r3, r3, #3
 800aeca:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	189d      	adds	r5, r3, r2
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f7ff ff26 	bl	800ad22 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800aed6:	4603      	mov	r3, r0
 800aed8:	461a      	mov	r2, r3
 800aeda:	4629      	mov	r1, r5
 800aedc:	4620      	mov	r0, r4
 800aede:	f7ff ffa6 	bl	800ae2e <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800aee2:	2300      	movs	r3, #0
 800aee4:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681c      	ldr	r4, [r3, #0]
 800aeea:	f107 0308 	add.w	r3, r7, #8
 800aeee:	4618      	mov	r0, r3
 800aef0:	f000 f948 	bl	800b184 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800aef4:	4603      	mov	r3, r0
 800aef6:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7ff fef9 	bl	800acf2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800af00:	4603      	mov	r3, r0
	  __new_finish
 800af02:	69fa      	ldr	r2, [r7, #28]
 800af04:	4629      	mov	r1, r5
 800af06:	4620      	mov	r0, r4
 800af08:	f000 f946 	bl	800b198 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 800af0c:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 800af0e:	69bb      	ldr	r3, [r7, #24]
 800af10:	3318      	adds	r3, #24
 800af12:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 800af14:	f107 0308 	add.w	r3, r7, #8
 800af18:	4618      	mov	r0, r3
 800af1a:	f000 f933 	bl	800b184 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800af1e:	4603      	mov	r3, r0
 800af20:	681c      	ldr	r4, [r3, #0]
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	4618      	mov	r0, r3
 800af2a:	f7ff fee2 	bl	800acf2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800af2e:	4603      	mov	r3, r0
	  __new_finish
 800af30:	69ba      	ldr	r2, [r7, #24]
 800af32:	4629      	mov	r1, r5
 800af34:	4620      	mov	r0, r4
 800af36:	f000 f92f 	bl	800b198 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 800af3a:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681c      	ldr	r4, [r3, #0]
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	4618      	mov	r0, r3
 800af48:	f7ff fed3 	bl	800acf2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800af4c:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800af4e:	461a      	mov	r2, r3
 800af50:	4629      	mov	r1, r5
 800af52:	4620      	mov	r0, r4
 800af54:	f7ff fed7 	bl	800ad06 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 800af58:	68f8      	ldr	r0, [r7, #12]
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 800af62:	461a      	mov	r2, r3
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	1ad3      	subs	r3, r2, r3
 800af6a:	10db      	asrs	r3, r3, #3
 800af6c:	4a0d      	ldr	r2, [pc, #52]	; (800afa4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x12c>)
 800af6e:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(this->_M_impl._M_start,
 800af72:	461a      	mov	r2, r3
 800af74:	f7ff ff3b 	bl	800adee <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      this->_M_impl._M_start = __new_start;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	69fa      	ldr	r2, [r7, #28]
 800af7c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	69ba      	ldr	r2, [r7, #24]
 800af82:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800af84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af86:	4613      	mov	r3, r2
 800af88:	005b      	lsls	r3, r3, #1
 800af8a:	4413      	add	r3, r2
 800af8c:	00db      	lsls	r3, r3, #3
 800af8e:	461a      	mov	r2, r3
 800af90:	69fb      	ldr	r3, [r7, #28]
 800af92:	441a      	add	r2, r3
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	609a      	str	r2, [r3, #8]
    }
 800af98:	bf00      	nop
 800af9a:	3728      	adds	r7, #40	; 0x28
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bdb0      	pop	{r4, r5, r7, pc}
 800afa0:	080126bc 	.word	0x080126bc
 800afa4:	aaaaaaab 	.word	0xaaaaaaab

0800afa8 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 f90a 	bl	800b1ca <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	4618      	mov	r0, r3
 800afba:	3708      	adds	r7, #8
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	68b9      	ldr	r1, [r7, #8]
 800afd0:	68f8      	ldr	r0, [r7, #12]
 800afd2:	f000 f904 	bl	800b1de <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>
 800afd6:	bf00      	nop
 800afd8:	3710      	adds	r7, #16
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}

0800afde <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800afde:	b480      	push	{r7}
 800afe0:	b083      	sub	sp, #12
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	4618      	mov	r0, r3
 800afea:	370c      	adds	r7, #12
 800afec:	46bd      	mov	sp, r7
 800afee:	bc80      	pop	{r7}
 800aff0:	4770      	bx	lr

0800aff2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 800aff2:	b580      	push	{r7, lr}
 800aff4:	b082      	sub	sp, #8
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	6078      	str	r0, [r7, #4]
 800affa:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	429a      	cmp	r2, r3
 800b002:	d00a      	beq.n	800b01a <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f7ff ffea 	bl	800afde <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800b00a:	4603      	mov	r3, r0
 800b00c:	4618      	mov	r0, r3
 800b00e:	f000 f8f3 	bl	800b1f8 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	3318      	adds	r3, #24
 800b016:	607b      	str	r3, [r7, #4]
 800b018:	e7f0      	b.n	800affc <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0xa>
	}
 800b01a:	bf00      	nop
 800b01c:	3708      	adds	r7, #8
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}

0800b022 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800b022:	b590      	push	{r4, r7, lr}
 800b024:	b085      	sub	sp, #20
 800b026:	af00      	add	r7, sp, #0
 800b028:	60f8      	str	r0, [r7, #12]
 800b02a:	60b9      	str	r1, [r7, #8]
 800b02c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f7ff fe77 	bl	800ad22 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b034:	4604      	mov	r4, r0
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	4619      	mov	r1, r3
 800b03a:	2018      	movs	r0, #24
 800b03c:	f7fa fff7 	bl	800602e <_ZnwjPv>
 800b040:	4603      	mov	r3, r0
 800b042:	2b00      	cmp	r3, #0
 800b044:	d003      	beq.n	800b04e <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_+0x2c>
 800b046:	4621      	mov	r1, r4
 800b048:	4618      	mov	r0, r3
 800b04a:	f006 f896 	bl	801117a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800b04e:	bf00      	nop
 800b050:	3714      	adds	r7, #20
 800b052:	46bd      	mov	sp, r7
 800b054:	bd90      	pop	{r4, r7, pc}

0800b056 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800b056:	b480      	push	{r7}
 800b058:	b083      	sub	sp, #12
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
 800b05e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	601a      	str	r2, [r3, #0]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	4618      	mov	r0, r3
 800b06c:	370c      	adds	r7, #12
 800b06e:	46bd      	mov	sp, r7
 800b070:	bc80      	pop	{r7}
 800b072:	4770      	bx	lr

0800b074 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800b074:	b590      	push	{r4, r7, lr}
 800b076:	b087      	sub	sp, #28
 800b078:	af00      	add	r7, sp, #0
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800b080:	68f8      	ldr	r0, [r7, #12]
 800b082:	f000 f8c4 	bl	800b20e <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 800b086:	4604      	mov	r4, r0
 800b088:	68f8      	ldr	r0, [r7, #12]
 800b08a:	f7ff fe01 	bl	800ac90 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800b08e:	4603      	mov	r3, r0
 800b090:	1ae2      	subs	r2, r4, r3
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	429a      	cmp	r2, r3
 800b096:	bf34      	ite	cc
 800b098:	2301      	movcc	r3, #1
 800b09a:	2300      	movcs	r3, #0
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d003      	beq.n	800b0aa <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f005 ff5c 	bl	8010f62 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 800b0aa:	68f8      	ldr	r0, [r7, #12]
 800b0ac:	f7ff fdf0 	bl	800ac90 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800b0b0:	4604      	mov	r4, r0
 800b0b2:	68f8      	ldr	r0, [r7, #12]
 800b0b4:	f7ff fdec 	bl	800ac90 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	613b      	str	r3, [r7, #16]
 800b0bc:	f107 0208 	add.w	r2, r7, #8
 800b0c0:	f107 0310 	add.w	r3, r7, #16
 800b0c4:	4611      	mov	r1, r2
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f000 f8b2 	bl	800b230 <_ZSt3maxIjERKT_S2_S2_>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4423      	add	r3, r4
 800b0d2:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800b0d4:	68f8      	ldr	r0, [r7, #12]
 800b0d6:	f7ff fddb 	bl	800ac90 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800b0da:	4602      	mov	r2, r0
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d306      	bcc.n	800b0f0 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x7c>
 800b0e2:	68f8      	ldr	r0, [r7, #12]
 800b0e4:	f000 f893 	bl	800b20e <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d904      	bls.n	800b0fa <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x86>
 800b0f0:	68f8      	ldr	r0, [r7, #12]
 800b0f2:	f000 f88c 	bl	800b20e <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	e000      	b.n	800b0fc <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x88>
 800b0fa:	697b      	ldr	r3, [r7, #20]
      }
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	371c      	adds	r7, #28
 800b100:	46bd      	mov	sp, r7
 800b102:	bd90      	pop	{r4, r7, pc}

0800b104 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800b104:	b580      	push	{r7, lr}
 800b106:	b084      	sub	sp, #16
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	f107 030c 	add.w	r3, r7, #12
 800b112:	4611      	mov	r1, r2
 800b114:	4618      	mov	r0, r3
 800b116:	f7ff ff9e 	bl	800b056 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	4618      	mov	r0, r3
 800b11e:	3710      	adds	r7, #16
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800b124:	b590      	push	{r4, r7, lr}
 800b126:	b083      	sub	sp, #12
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 f828 	bl	800b184 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800b134:	4603      	mov	r3, r0
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	461c      	mov	r4, r3
 800b13a:	6838      	ldr	r0, [r7, #0]
 800b13c:	f000 f822 	bl	800b184 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800b140:	4603      	mov	r3, r0
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	1ae3      	subs	r3, r4, r3
 800b146:	10db      	asrs	r3, r3, #3
 800b148:	4a03      	ldr	r2, [pc, #12]	; (800b158 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_+0x34>)
 800b14a:	fb02 f303 	mul.w	r3, r2, r3
 800b14e:	4618      	mov	r0, r3
 800b150:	370c      	adds	r7, #12
 800b152:	46bd      	mov	sp, r7
 800b154:	bd90      	pop	{r4, r7, pc}
 800b156:	bf00      	nop
 800b158:	aaaaaaab 	.word	0xaaaaaaab

0800b15c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d006      	beq.n	800b17a <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x1e>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6839      	ldr	r1, [r7, #0]
 800b170:	4618      	mov	r0, r3
 800b172:	f000 f870 	bl	800b256 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>
 800b176:	4603      	mov	r3, r0
 800b178:	e000      	b.n	800b17c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x20>
 800b17a:	2300      	movs	r3, #0
      }
 800b17c:	4618      	mov	r0, r3
 800b17e:	3708      	adds	r7, #8
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	4618      	mov	r0, r3
 800b190:	370c      	adds	r7, #12
 800b192:	46bd      	mov	sp, r7
 800b194:	bc80      	pop	{r7}
 800b196:	4770      	bx	lr

0800b198 <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800b198:	b590      	push	{r4, r7, lr}
 800b19a:	b085      	sub	sp, #20
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	60b9      	str	r1, [r7, #8]
 800b1a2:	607a      	str	r2, [r7, #4]
 800b1a4:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800b1a6:	68f8      	ldr	r0, [r7, #12]
 800b1a8:	f000 f864 	bl	800b274 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 800b1ac:	4604      	mov	r4, r0
 800b1ae:	68b8      	ldr	r0, [r7, #8]
 800b1b0:	f000 f860 	bl	800b274 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 800b1b4:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	f000 f869 	bl	800b292 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>
 800b1c0:	4603      	mov	r3, r0
    }
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3714      	adds	r7, #20
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd90      	pop	{r4, r7, pc}

0800b1ca <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800b1ca:	b480      	push	{r7}
 800b1cc:	b083      	sub	sp, #12
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	6078      	str	r0, [r7, #4]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	370c      	adds	r7, #12
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bc80      	pop	{r7}
 800b1dc:	4770      	bx	lr

0800b1de <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>:
      deallocate(pointer __p, size_type)
 800b1de:	b580      	push	{r7, lr}
 800b1e0:	b084      	sub	sp, #16
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	60f8      	str	r0, [r7, #12]
 800b1e6:	60b9      	str	r1, [r7, #8]
 800b1e8:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800b1ea:	68b8      	ldr	r0, [r7, #8]
 800b1ec:	f005 feac 	bl	8010f48 <_ZdlPv>
      }
 800b1f0:	bf00      	nop
 800b1f2:	3710      	adds	r7, #16
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f005 ffd4 	bl	80111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b206:	bf00      	nop
 800b208:	3708      	adds	r7, #8
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}

0800b20e <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800b20e:	b580      	push	{r7, lr}
 800b210:	b082      	sub	sp, #8
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	4618      	mov	r0, r3
 800b21a:	f000 f857 	bl	800b2cc <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800b21e:	4603      	mov	r3, r0
 800b220:	4618      	mov	r0, r3
 800b222:	f000 f847 	bl	800b2b4 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>
 800b226:	4603      	mov	r3, r0
 800b228:	4618      	mov	r0, r3
 800b22a:	3708      	adds	r7, #8
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	429a      	cmp	r2, r3
 800b244:	d201      	bcs.n	800b24a <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	e000      	b.n	800b24c <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800b24a:	687b      	ldr	r3, [r7, #4]
    }
 800b24c:	4618      	mov	r0, r3
 800b24e:	370c      	adds	r7, #12
 800b250:	46bd      	mov	sp, r7
 800b252:	bc80      	pop	{r7}
 800b254:	4770      	bx	lr

0800b256 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800b256:	b580      	push	{r7, lr}
 800b258:	b082      	sub	sp, #8
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	6078      	str	r0, [r7, #4]
 800b25e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800b260:	2200      	movs	r2, #0
 800b262:	6839      	ldr	r1, [r7, #0]
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f000 f83b 	bl	800b2e0 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 800b26a:	4603      	mov	r3, r0
 800b26c:	4618      	mov	r0, r3
 800b26e:	3708      	adds	r7, #8
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}

0800b274 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800b274:	b580      	push	{r7, lr}
 800b276:	b084      	sub	sp, #16
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800b27c:	f107 030c 	add.w	r3, r7, #12
 800b280:	6879      	ldr	r1, [r7, #4]
 800b282:	4618      	mov	r0, r3
 800b284:	f000 f84d 	bl	800b322 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	4618      	mov	r0, r3
 800b28c:	3710      	adds	r7, #16
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}

0800b292 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800b292:	b580      	push	{r7, lr}
 800b294:	b084      	sub	sp, #16
 800b296:	af00      	add	r7, sp, #0
 800b298:	60f8      	str	r0, [r7, #12]
 800b29a:	60b9      	str	r1, [r7, #8]
 800b29c:	607a      	str	r2, [r7, #4]
 800b29e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	68b9      	ldr	r1, [r7, #8]
 800b2a4:	68f8      	ldr	r0, [r7, #12]
 800b2a6:	f000 f84a 	bl	800b33e <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3710      	adds	r7, #16
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f000 f851 	bl	800b364 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3708      	adds	r7, #8
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800b2cc:	b480      	push	{r7}
 800b2ce:	b083      	sub	sp, #12
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	370c      	adds	r7, #12
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bc80      	pop	{r7}
 800b2de:	4770      	bx	lr

0800b2e0 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	60b9      	str	r1, [r7, #8]
 800b2ea:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800b2ec:	68f8      	ldr	r0, [r7, #12]
 800b2ee:	f000 f839 	bl	800b364 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	bf8c      	ite	hi
 800b2fa:	2301      	movhi	r3, #1
 800b2fc:	2300      	movls	r3, #0
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	2b00      	cmp	r3, #0
 800b302:	d001      	beq.n	800b308 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800b304:	f005 fe24 	bl	8010f50 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800b308:	68ba      	ldr	r2, [r7, #8]
 800b30a:	4613      	mov	r3, r2
 800b30c:	005b      	lsls	r3, r3, #1
 800b30e:	4413      	add	r3, r2
 800b310:	00db      	lsls	r3, r3, #3
 800b312:	4618      	mov	r0, r3
 800b314:	f005 fdfe 	bl	8010f14 <_Znwj>
 800b318:	4603      	mov	r3, r0
      }
 800b31a:	4618      	mov	r0, r3
 800b31c:	3710      	adds	r7, #16
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}

0800b322 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>:
      move_iterator(iterator_type __i)
 800b322:	b480      	push	{r7}
 800b324:	b083      	sub	sp, #12
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
 800b32a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	683a      	ldr	r2, [r7, #0]
 800b330:	601a      	str	r2, [r3, #0]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	4618      	mov	r0, r3
 800b336:	370c      	adds	r7, #12
 800b338:	46bd      	mov	sp, r7
 800b33a:	bc80      	pop	{r7}
 800b33c:	4770      	bx	lr

0800b33e <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800b33e:	b580      	push	{r7, lr}
 800b340:	b086      	sub	sp, #24
 800b342:	af00      	add	r7, sp, #0
 800b344:	60f8      	str	r0, [r7, #12]
 800b346:	60b9      	str	r1, [r7, #8]
 800b348:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800b34a:	2301      	movs	r3, #1
 800b34c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800b34e:	687a      	ldr	r2, [r7, #4]
 800b350:	68b9      	ldr	r1, [r7, #8]
 800b352:	68f8      	ldr	r0, [r7, #12]
 800b354:	f000 f812 	bl	800b37c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>
 800b358:	4603      	mov	r3, r0
    }
 800b35a:	4618      	mov	r0, r3
 800b35c:	3718      	adds	r7, #24
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
	...

0800b364 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800b364:	b480      	push	{r7}
 800b366:	b083      	sub	sp, #12
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800b36c:	4b02      	ldr	r3, [pc, #8]	; (800b378 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv+0x14>)
 800b36e:	4618      	mov	r0, r3
 800b370:	370c      	adds	r7, #12
 800b372:	46bd      	mov	sp, r7
 800b374:	bc80      	pop	{r7}
 800b376:	4770      	bx	lr
 800b378:	0aaaaaaa 	.word	0x0aaaaaaa

0800b37c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800b37c:	b590      	push	{r4, r7, lr}
 800b37e:	b087      	sub	sp, #28
 800b380:	af00      	add	r7, sp, #0
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800b38c:	f107 0208 	add.w	r2, r7, #8
 800b390:	f107 030c 	add.w	r3, r7, #12
 800b394:	4611      	mov	r1, r2
 800b396:	4618      	mov	r0, r3
 800b398:	f000 f81f 	bl	800b3da <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 800b39c:	4603      	mov	r3, r0
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d016      	beq.n	800b3d0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 800b3a2:	6978      	ldr	r0, [r7, #20]
 800b3a4:	f7ff fe1b 	bl	800afde <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800b3a8:	4604      	mov	r4, r0
 800b3aa:	f107 030c 	add.w	r3, r7, #12
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f000 f834 	bl	800b41c <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	4620      	mov	r0, r4
 800b3ba:	f000 f83a 	bl	800b432 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800b3be:	f107 030c 	add.w	r3, r7, #12
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f000 f81a 	bl	800b3fc <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	3318      	adds	r3, #24
 800b3cc:	617b      	str	r3, [r7, #20]
 800b3ce:	e7dd      	b.n	800b38c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x10>
	      return __cur;
 800b3d0:	697b      	ldr	r3, [r7, #20]
	}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	371c      	adds	r7, #28
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd90      	pop	{r4, r7, pc}

0800b3da <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800b3da:	b580      	push	{r7, lr}
 800b3dc:	b082      	sub	sp, #8
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
 800b3e2:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800b3e4:	6839      	ldr	r1, [r7, #0]
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 f83c 	bl	800b464 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	f083 0301 	eor.w	r3, r3, #1
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3708      	adds	r7, #8
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++()
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
	++_M_current;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f103 0218 	add.w	r2, r3, #24
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	601a      	str	r2, [r3, #0]
	return *this;
 800b410:	687b      	ldr	r3, [r7, #4]
      }
 800b412:	4618      	mov	r0, r3
 800b414:	370c      	adds	r7, #12
 800b416:	46bd      	mov	sp, r7
 800b418:	bc80      	pop	{r7}
 800b41a:	4770      	bx	lr

0800b41c <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const
 800b41c:	b480      	push	{r7}
 800b41e:	b083      	sub	sp, #12
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4618      	mov	r0, r3
 800b42a:	370c      	adds	r7, #12
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bc80      	pop	{r7}
 800b430:	4770      	bx	lr

0800b432 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 800b432:	b590      	push	{r4, r7, lr}
 800b434:	b083      	sub	sp, #12
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
 800b43a:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 800b43c:	6838      	ldr	r0, [r7, #0]
 800b43e:	f7ff fc70 	bl	800ad22 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b442:	4604      	mov	r4, r0
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	4619      	mov	r1, r3
 800b448:	2018      	movs	r0, #24
 800b44a:	f7fa fdf0 	bl	800602e <_ZnwjPv>
 800b44e:	4603      	mov	r3, r0
 800b450:	2b00      	cmp	r3, #0
 800b452:	d003      	beq.n	800b45c <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_+0x2a>
 800b454:	4621      	mov	r1, r4
 800b456:	4618      	mov	r0, r3
 800b458:	f005 fe8f 	bl	801117a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800b45c:	bf00      	nop
 800b45e:	370c      	adds	r7, #12
 800b460:	46bd      	mov	sp, r7
 800b462:	bd90      	pop	{r4, r7, pc}

0800b464 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator==(const move_iterator<_Iterator>& __x,
 800b464:	b590      	push	{r4, r7, lr}
 800b466:	b083      	sub	sp, #12
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f000 f80e 	bl	800b490 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800b474:	4604      	mov	r4, r0
 800b476:	6838      	ldr	r0, [r7, #0]
 800b478:	f000 f80a 	bl	800b490 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800b47c:	4603      	mov	r3, r0
 800b47e:	429c      	cmp	r4, r3
 800b480:	bf0c      	ite	eq
 800b482:	2301      	moveq	r3, #1
 800b484:	2300      	movne	r3, #0
 800b486:	b2db      	uxtb	r3, r3
 800b488:	4618      	mov	r0, r3
 800b48a:	370c      	adds	r7, #12
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd90      	pop	{r4, r7, pc}

0800b490 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const
 800b490:	b480      	push	{r7}
 800b492:	b083      	sub	sp, #12
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4618      	mov	r0, r3
 800b49e:	370c      	adds	r7, #12
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bc80      	pop	{r7}
 800b4a4:	4770      	bx	lr
	...

0800b4a8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800b4ae:	1d3b      	adds	r3, r7, #4
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	601a      	str	r2, [r3, #0]
 800b4b4:	605a      	str	r2, [r3, #4]
 800b4b6:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 800b4b8:	4b18      	ldr	r3, [pc, #96]	; (800b51c <MX_ADC1_Init+0x74>)
 800b4ba:	4a19      	ldr	r2, [pc, #100]	; (800b520 <MX_ADC1_Init+0x78>)
 800b4bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b4be:	4b17      	ldr	r3, [pc, #92]	; (800b51c <MX_ADC1_Init+0x74>)
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800b4c4:	4b15      	ldr	r3, [pc, #84]	; (800b51c <MX_ADC1_Init+0x74>)
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800b4ca:	4b14      	ldr	r3, [pc, #80]	; (800b51c <MX_ADC1_Init+0x74>)
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b4d0:	4b12      	ldr	r3, [pc, #72]	; (800b51c <MX_ADC1_Init+0x74>)
 800b4d2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800b4d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b4d8:	4b10      	ldr	r3, [pc, #64]	; (800b51c <MX_ADC1_Init+0x74>)
 800b4da:	2200      	movs	r2, #0
 800b4dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800b4de:	4b0f      	ldr	r3, [pc, #60]	; (800b51c <MX_ADC1_Init+0x74>)
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800b4e4:	480d      	ldr	r0, [pc, #52]	; (800b51c <MX_ADC1_Init+0x74>)
 800b4e6:	f000 fe73 	bl	800c1d0 <HAL_ADC_Init>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d001      	beq.n	800b4f4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800b4f0:	f000 f9d4 	bl	800b89c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b500:	1d3b      	adds	r3, r7, #4
 800b502:	4619      	mov	r1, r3
 800b504:	4805      	ldr	r0, [pc, #20]	; (800b51c <MX_ADC1_Init+0x74>)
 800b506:	f000 ffcd 	bl	800c4a4 <HAL_ADC_ConfigChannel>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d001      	beq.n	800b514 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800b510:	f000 f9c4 	bl	800b89c <Error_Handler>
  }

}
 800b514:	bf00      	nop
 800b516:	3710      	adds	r7, #16
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	200006c4 	.word	0x200006c4
 800b520:	40012400 	.word	0x40012400

0800b524 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b088      	sub	sp, #32
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b52c:	f107 0310 	add.w	r3, r7, #16
 800b530:	2200      	movs	r2, #0
 800b532:	601a      	str	r2, [r3, #0]
 800b534:	605a      	str	r2, [r3, #4]
 800b536:	609a      	str	r2, [r3, #8]
 800b538:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4a14      	ldr	r2, [pc, #80]	; (800b590 <HAL_ADC_MspInit+0x6c>)
 800b540:	4293      	cmp	r3, r2
 800b542:	d121      	bne.n	800b588 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800b544:	4b13      	ldr	r3, [pc, #76]	; (800b594 <HAL_ADC_MspInit+0x70>)
 800b546:	699b      	ldr	r3, [r3, #24]
 800b548:	4a12      	ldr	r2, [pc, #72]	; (800b594 <HAL_ADC_MspInit+0x70>)
 800b54a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b54e:	6193      	str	r3, [r2, #24]
 800b550:	4b10      	ldr	r3, [pc, #64]	; (800b594 <HAL_ADC_MspInit+0x70>)
 800b552:	699b      	ldr	r3, [r3, #24]
 800b554:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b558:	60fb      	str	r3, [r7, #12]
 800b55a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b55c:	4b0d      	ldr	r3, [pc, #52]	; (800b594 <HAL_ADC_MspInit+0x70>)
 800b55e:	699b      	ldr	r3, [r3, #24]
 800b560:	4a0c      	ldr	r2, [pc, #48]	; (800b594 <HAL_ADC_MspInit+0x70>)
 800b562:	f043 0304 	orr.w	r3, r3, #4
 800b566:	6193      	str	r3, [r2, #24]
 800b568:	4b0a      	ldr	r3, [pc, #40]	; (800b594 <HAL_ADC_MspInit+0x70>)
 800b56a:	699b      	ldr	r3, [r3, #24]
 800b56c:	f003 0304 	and.w	r3, r3, #4
 800b570:	60bb      	str	r3, [r7, #8]
 800b572:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = CurrentSensor_Pin;
 800b574:	2301      	movs	r3, #1
 800b576:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b578:	2303      	movs	r3, #3
 800b57a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CurrentSensor_GPIO_Port, &GPIO_InitStruct);
 800b57c:	f107 0310 	add.w	r3, r7, #16
 800b580:	4619      	mov	r1, r3
 800b582:	4805      	ldr	r0, [pc, #20]	; (800b598 <HAL_ADC_MspInit+0x74>)
 800b584:	f001 fe2e 	bl	800d1e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800b588:	bf00      	nop
 800b58a:	3720      	adds	r7, #32
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	40012400 	.word	0x40012400
 800b594:	40021000 	.word	0x40021000
 800b598:	40010800 	.word	0x40010800

0800b59c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b086      	sub	sp, #24
 800b5a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b5a2:	f107 0308 	add.w	r3, r7, #8
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	601a      	str	r2, [r3, #0]
 800b5aa:	605a      	str	r2, [r3, #4]
 800b5ac:	609a      	str	r2, [r3, #8]
 800b5ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b5b0:	4b28      	ldr	r3, [pc, #160]	; (800b654 <MX_GPIO_Init+0xb8>)
 800b5b2:	699b      	ldr	r3, [r3, #24]
 800b5b4:	4a27      	ldr	r2, [pc, #156]	; (800b654 <MX_GPIO_Init+0xb8>)
 800b5b6:	f043 0304 	orr.w	r3, r3, #4
 800b5ba:	6193      	str	r3, [r2, #24]
 800b5bc:	4b25      	ldr	r3, [pc, #148]	; (800b654 <MX_GPIO_Init+0xb8>)
 800b5be:	699b      	ldr	r3, [r3, #24]
 800b5c0:	f003 0304 	and.w	r3, r3, #4
 800b5c4:	607b      	str	r3, [r7, #4]
 800b5c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b5c8:	4b22      	ldr	r3, [pc, #136]	; (800b654 <MX_GPIO_Init+0xb8>)
 800b5ca:	699b      	ldr	r3, [r3, #24]
 800b5cc:	4a21      	ldr	r2, [pc, #132]	; (800b654 <MX_GPIO_Init+0xb8>)
 800b5ce:	f043 0308 	orr.w	r3, r3, #8
 800b5d2:	6193      	str	r3, [r2, #24]
 800b5d4:	4b1f      	ldr	r3, [pc, #124]	; (800b654 <MX_GPIO_Init+0xb8>)
 800b5d6:	699b      	ldr	r3, [r3, #24]
 800b5d8:	f003 0308 	and.w	r3, r3, #8
 800b5dc:	603b      	str	r3, [r7, #0]
 800b5de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ThermoSensor_Pin|LcdCS_Pin, GPIO_PIN_SET);
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	210c      	movs	r1, #12
 800b5e4:	481c      	ldr	r0, [pc, #112]	; (800b658 <MX_GPIO_Init+0xbc>)
 800b5e6:	f002 f85d 	bl	800d6a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LcdA0_Pin|LcdReset_Pin|ThermoCtrl_Pin|FanCtrl_Pin
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	f641 6150 	movw	r1, #7760	; 0x1e50
 800b5f0:	4819      	ldr	r0, [pc, #100]	; (800b658 <MX_GPIO_Init+0xbc>)
 800b5f2:	f002 f857 	bl	800d6a4 <HAL_GPIO_WritePin>
                          |RedLed_Pin|GreenLed_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = ThermoSensor_Pin|LcdCS_Pin|LcdA0_Pin|LcdReset_Pin
 800b5f6:	f240 435c 	movw	r3, #1116	; 0x45c
 800b5fa:	60bb      	str	r3, [r7, #8]
                          |FanCtrl_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b600:	2300      	movs	r3, #0
 800b602:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b604:	2303      	movs	r3, #3
 800b606:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b608:	f107 0308 	add.w	r3, r7, #8
 800b60c:	4619      	mov	r1, r3
 800b60e:	4812      	ldr	r0, [pc, #72]	; (800b658 <MX_GPIO_Init+0xbc>)
 800b610:	f001 fde8 	bl	800d1e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = UpButton_Pin|DownButton_Pin|LeftButton_Pin|OkButton_Pin;
 800b614:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800b618:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b61a:	2300      	movs	r3, #0
 800b61c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b61e:	2301      	movs	r3, #1
 800b620:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b622:	f107 0308 	add.w	r3, r7, #8
 800b626:	4619      	mov	r1, r3
 800b628:	480c      	ldr	r0, [pc, #48]	; (800b65c <MX_GPIO_Init+0xc0>)
 800b62a:	f001 fddb 	bl	800d1e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ThermoCtrl_Pin|RedLed_Pin|GreenLed_Pin;
 800b62e:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 800b632:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b634:	2301      	movs	r3, #1
 800b636:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b638:	2300      	movs	r3, #0
 800b63a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b63c:	2302      	movs	r3, #2
 800b63e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b640:	f107 0308 	add.w	r3, r7, #8
 800b644:	4619      	mov	r1, r3
 800b646:	4804      	ldr	r0, [pc, #16]	; (800b658 <MX_GPIO_Init+0xbc>)
 800b648:	f001 fdcc 	bl	800d1e4 <HAL_GPIO_Init>

}
 800b64c:	bf00      	nop
 800b64e:	3718      	adds	r7, #24
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	40021000 	.word	0x40021000
 800b658:	40010800 	.word	0x40010800
 800b65c:	40010c00 	.word	0x40010c00

0800b660 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800b664:	4b12      	ldr	r3, [pc, #72]	; (800b6b0 <MX_I2C1_Init+0x50>)
 800b666:	4a13      	ldr	r2, [pc, #76]	; (800b6b4 <MX_I2C1_Init+0x54>)
 800b668:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800b66a:	4b11      	ldr	r3, [pc, #68]	; (800b6b0 <MX_I2C1_Init+0x50>)
 800b66c:	4a12      	ldr	r2, [pc, #72]	; (800b6b8 <MX_I2C1_Init+0x58>)
 800b66e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800b670:	4b0f      	ldr	r3, [pc, #60]	; (800b6b0 <MX_I2C1_Init+0x50>)
 800b672:	2200      	movs	r2, #0
 800b674:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800b676:	4b0e      	ldr	r3, [pc, #56]	; (800b6b0 <MX_I2C1_Init+0x50>)
 800b678:	2200      	movs	r2, #0
 800b67a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b67c:	4b0c      	ldr	r3, [pc, #48]	; (800b6b0 <MX_I2C1_Init+0x50>)
 800b67e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b682:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b684:	4b0a      	ldr	r3, [pc, #40]	; (800b6b0 <MX_I2C1_Init+0x50>)
 800b686:	2200      	movs	r2, #0
 800b688:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800b68a:	4b09      	ldr	r3, [pc, #36]	; (800b6b0 <MX_I2C1_Init+0x50>)
 800b68c:	2200      	movs	r2, #0
 800b68e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b690:	4b07      	ldr	r3, [pc, #28]	; (800b6b0 <MX_I2C1_Init+0x50>)
 800b692:	2200      	movs	r2, #0
 800b694:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b696:	4b06      	ldr	r3, [pc, #24]	; (800b6b0 <MX_I2C1_Init+0x50>)
 800b698:	2200      	movs	r2, #0
 800b69a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800b69c:	4804      	ldr	r0, [pc, #16]	; (800b6b0 <MX_I2C1_Init+0x50>)
 800b69e:	f002 f859 	bl	800d754 <HAL_I2C_Init>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d001      	beq.n	800b6ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800b6a8:	f000 f8f8 	bl	800b89c <Error_Handler>
  }

}
 800b6ac:	bf00      	nop
 800b6ae:	bd80      	pop	{r7, pc}
 800b6b0:	200006f4 	.word	0x200006f4
 800b6b4:	40005400 	.word	0x40005400
 800b6b8:	000186a0 	.word	0x000186a0

0800b6bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b08a      	sub	sp, #40	; 0x28
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6c4:	f107 0314 	add.w	r3, r7, #20
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	601a      	str	r2, [r3, #0]
 800b6cc:	605a      	str	r2, [r3, #4]
 800b6ce:	609a      	str	r2, [r3, #8]
 800b6d0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4a1d      	ldr	r2, [pc, #116]	; (800b74c <HAL_I2C_MspInit+0x90>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d132      	bne.n	800b742 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b6dc:	4b1c      	ldr	r3, [pc, #112]	; (800b750 <HAL_I2C_MspInit+0x94>)
 800b6de:	699b      	ldr	r3, [r3, #24]
 800b6e0:	4a1b      	ldr	r2, [pc, #108]	; (800b750 <HAL_I2C_MspInit+0x94>)
 800b6e2:	f043 0308 	orr.w	r3, r3, #8
 800b6e6:	6193      	str	r3, [r2, #24]
 800b6e8:	4b19      	ldr	r3, [pc, #100]	; (800b750 <HAL_I2C_MspInit+0x94>)
 800b6ea:	699b      	ldr	r3, [r3, #24]
 800b6ec:	f003 0308 	and.w	r3, r3, #8
 800b6f0:	613b      	str	r3, [r7, #16]
 800b6f2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 800b6f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b6f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b6fa:	2312      	movs	r3, #18
 800b6fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b6fe:	2303      	movs	r3, #3
 800b700:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b702:	f107 0314 	add.w	r3, r7, #20
 800b706:	4619      	mov	r1, r3
 800b708:	4812      	ldr	r0, [pc, #72]	; (800b754 <HAL_I2C_MspInit+0x98>)
 800b70a:	f001 fd6b 	bl	800d1e4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800b70e:	4b12      	ldr	r3, [pc, #72]	; (800b758 <HAL_I2C_MspInit+0x9c>)
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	627b      	str	r3, [r7, #36]	; 0x24
 800b714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b716:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800b71a:	627b      	str	r3, [r7, #36]	; 0x24
 800b71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b71e:	f043 0302 	orr.w	r3, r3, #2
 800b722:	627b      	str	r3, [r7, #36]	; 0x24
 800b724:	4a0c      	ldr	r2, [pc, #48]	; (800b758 <HAL_I2C_MspInit+0x9c>)
 800b726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b728:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b72a:	4b09      	ldr	r3, [pc, #36]	; (800b750 <HAL_I2C_MspInit+0x94>)
 800b72c:	69db      	ldr	r3, [r3, #28]
 800b72e:	4a08      	ldr	r2, [pc, #32]	; (800b750 <HAL_I2C_MspInit+0x94>)
 800b730:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b734:	61d3      	str	r3, [r2, #28]
 800b736:	4b06      	ldr	r3, [pc, #24]	; (800b750 <HAL_I2C_MspInit+0x94>)
 800b738:	69db      	ldr	r3, [r3, #28]
 800b73a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b73e:	60fb      	str	r3, [r7, #12]
 800b740:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800b742:	bf00      	nop
 800b744:	3728      	adds	r7, #40	; 0x28
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
 800b74a:	bf00      	nop
 800b74c:	40005400 	.word	0x40005400
 800b750:	40021000 	.word	0x40021000
 800b754:	40010c00 	.word	0x40010c00
 800b758:	40010000 	.word	0x40010000

0800b75c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800b75c:	b598      	push	{r3, r4, r7, lr}
 800b75e:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800b760:	f000 fcb2 	bl	800c0c8 <HAL_Init>


	/* Configure the system clock */
	SystemClock_Config();
 800b764:	f000 f836 	bl	800b7d4 <_Z18SystemClock_Configv>


	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800b768:	f7ff ff18 	bl	800b59c <MX_GPIO_Init>
	MX_ADC1_Init();
 800b76c:	f7ff fe9c 	bl	800b4a8 <MX_ADC1_Init>
	MX_I2C1_Init();
 800b770:	f7ff ff76 	bl	800b660 <MX_I2C1_Init>
	MX_SPI1_Init();
 800b774:	f000 f8a2 	bl	800b8bc <MX_SPI1_Init>
	MX_TIM2_Init();
 800b778:	f000 fb8c 	bl	800be94 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 800b77c:	f000 fbf2 	bl	800bf64 <MX_USART1_UART_Init>

	HAL_TIM_Base_Start(&htim2);
 800b780:	4812      	ldr	r0, [pc, #72]	; (800b7cc <main+0x70>)
 800b782:	f004 fa45 	bl	800fc10 <HAL_TIM_Base_Start>

	DryerApplication = new SmartDryer();
 800b786:	20cc      	movs	r0, #204	; 0xcc
 800b788:	f005 fbc4 	bl	8010f14 <_Znwj>
 800b78c:	4603      	mov	r3, r0
 800b78e:	461c      	mov	r4, r3
 800b790:	4620      	mov	r0, r4
 800b792:	f7fa fcab 	bl	80060ec <_ZN10SmartDryerC1Ev>
 800b796:	4b0e      	ldr	r3, [pc, #56]	; (800b7d0 <main+0x74>)
 800b798:	601c      	str	r4, [r3, #0]

	DryerApplication->setup();
 800b79a:	4b0d      	ldr	r3, [pc, #52]	; (800b7d0 <main+0x74>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7fc fd3a 	bl	8008218 <_ZN10SmartDryer5setupEv>

	if(DryerApplication->enableTest)
 800b7a4:	4b0a      	ldr	r3, [pc, #40]	; (800b7d0 <main+0x74>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d005      	beq.n	800b7bc <main+0x60>
	{
		DryerApplication->test();
 800b7b0:	4b07      	ldr	r3, [pc, #28]	; (800b7d0 <main+0x74>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f7fc fd25 	bl	8008204 <_ZN10SmartDryer4testEv>
 800b7ba:	e004      	b.n	800b7c6 <main+0x6a>
	}
	else
	{
		DryerApplication->run();
 800b7bc:	4b04      	ldr	r3, [pc, #16]	; (800b7d0 <main+0x74>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f7ff f9c9 	bl	800ab58 <_ZN10SmartDryer3runEv>
	}
}
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	bd98      	pop	{r3, r4, r7, pc}
 800b7cc:	200007a0 	.word	0x200007a0
 800b7d0:	200006b0 	.word	0x200006b0

0800b7d4 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b094      	sub	sp, #80	; 0x50
 800b7d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b7da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b7de:	2228      	movs	r2, #40	; 0x28
 800b7e0:	2100      	movs	r1, #0
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f005 ffc7 	bl	8011776 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b7e8:	f107 0314 	add.w	r3, r7, #20
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	601a      	str	r2, [r3, #0]
 800b7f0:	605a      	str	r2, [r3, #4]
 800b7f2:	609a      	str	r2, [r3, #8]
 800b7f4:	60da      	str	r2, [r3, #12]
 800b7f6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b7f8:	1d3b      	adds	r3, r7, #4
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	601a      	str	r2, [r3, #0]
 800b7fe:	605a      	str	r2, [r3, #4]
 800b800:	609a      	str	r2, [r3, #8]
 800b802:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800b804:	2302      	movs	r3, #2
 800b806:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b808:	2301      	movs	r3, #1
 800b80a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800b80c:	2310      	movs	r3, #16
 800b80e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b810:	2302      	movs	r3, #2
 800b812:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800b814:	2300      	movs	r3, #0
 800b816:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800b818:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b81c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b81e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b822:	4618      	mov	r0, r3
 800b824:	f002 ffd4 	bl	800e7d0 <HAL_RCC_OscConfig>
 800b828:	4603      	mov	r3, r0
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	bf14      	ite	ne
 800b82e:	2301      	movne	r3, #1
 800b830:	2300      	moveq	r3, #0
 800b832:	b2db      	uxtb	r3, r3
 800b834:	2b00      	cmp	r3, #0
 800b836:	d001      	beq.n	800b83c <_Z18SystemClock_Configv+0x68>
	{
		Error_Handler();
 800b838:	f000 f830 	bl	800b89c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b83c:	230f      	movs	r3, #15
 800b83e:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b840:	2302      	movs	r3, #2
 800b842:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b844:	2300      	movs	r3, #0
 800b846:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b848:	2300      	movs	r3, #0
 800b84a:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b84c:	2300      	movs	r3, #0
 800b84e:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800b850:	f107 0314 	add.w	r3, r7, #20
 800b854:	2100      	movs	r1, #0
 800b856:	4618      	mov	r0, r3
 800b858:	f003 fb2a 	bl	800eeb0 <HAL_RCC_ClockConfig>
 800b85c:	4603      	mov	r3, r0
 800b85e:	2b00      	cmp	r3, #0
 800b860:	bf14      	ite	ne
 800b862:	2301      	movne	r3, #1
 800b864:	2300      	moveq	r3, #0
 800b866:	b2db      	uxtb	r3, r3
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d001      	beq.n	800b870 <_Z18SystemClock_Configv+0x9c>
	{
		Error_Handler();
 800b86c:	f000 f816 	bl	800b89c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800b870:	2302      	movs	r3, #2
 800b872:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800b874:	2300      	movs	r3, #0
 800b876:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b878:	1d3b      	adds	r3, r7, #4
 800b87a:	4618      	mov	r0, r3
 800b87c:	f003 fd5a 	bl	800f334 <HAL_RCCEx_PeriphCLKConfig>
 800b880:	4603      	mov	r3, r0
 800b882:	2b00      	cmp	r3, #0
 800b884:	bf14      	ite	ne
 800b886:	2301      	movne	r3, #1
 800b888:	2300      	moveq	r3, #0
 800b88a:	b2db      	uxtb	r3, r3
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d001      	beq.n	800b894 <_Z18SystemClock_Configv+0xc0>
	{
		Error_Handler();
 800b890:	f000 f804 	bl	800b89c <Error_Handler>
	}
}
 800b894:	bf00      	nop
 800b896:	3750      	adds	r7, #80	; 0x50
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800b89c:	b480      	push	{r7}
 800b89e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800b8a0:	bf00      	nop
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bc80      	pop	{r7}
 800b8a6:	4770      	bx	lr

0800b8a8 <assert_failed>:
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b083      	sub	sp, #12
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 800b8b2:	bf00      	nop
 800b8b4:	370c      	adds	r7, #12
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bc80      	pop	{r7}
 800b8ba:	4770      	bx	lr

0800b8bc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800b8c0:	4b18      	ldr	r3, [pc, #96]	; (800b924 <MX_SPI1_Init+0x68>)
 800b8c2:	4a19      	ldr	r2, [pc, #100]	; (800b928 <MX_SPI1_Init+0x6c>)
 800b8c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800b8c6:	4b17      	ldr	r3, [pc, #92]	; (800b924 <MX_SPI1_Init+0x68>)
 800b8c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 800b8cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800b8ce:	4b15      	ldr	r3, [pc, #84]	; (800b924 <MX_SPI1_Init+0x68>)
 800b8d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b8d4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800b8d6:	4b13      	ldr	r3, [pc, #76]	; (800b924 <MX_SPI1_Init+0x68>)
 800b8d8:	2200      	movs	r2, #0
 800b8da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800b8dc:	4b11      	ldr	r3, [pc, #68]	; (800b924 <MX_SPI1_Init+0x68>)
 800b8de:	2200      	movs	r2, #0
 800b8e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b8e2:	4b10      	ldr	r3, [pc, #64]	; (800b924 <MX_SPI1_Init+0x68>)
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800b8e8:	4b0e      	ldr	r3, [pc, #56]	; (800b924 <MX_SPI1_Init+0x68>)
 800b8ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b8ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800b8f0:	4b0c      	ldr	r3, [pc, #48]	; (800b924 <MX_SPI1_Init+0x68>)
 800b8f2:	2228      	movs	r2, #40	; 0x28
 800b8f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b8f6:	4b0b      	ldr	r3, [pc, #44]	; (800b924 <MX_SPI1_Init+0x68>)
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800b8fc:	4b09      	ldr	r3, [pc, #36]	; (800b924 <MX_SPI1_Init+0x68>)
 800b8fe:	2200      	movs	r2, #0
 800b900:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b902:	4b08      	ldr	r3, [pc, #32]	; (800b924 <MX_SPI1_Init+0x68>)
 800b904:	2200      	movs	r2, #0
 800b906:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800b908:	4b06      	ldr	r3, [pc, #24]	; (800b924 <MX_SPI1_Init+0x68>)
 800b90a:	220a      	movs	r2, #10
 800b90c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800b90e:	4805      	ldr	r0, [pc, #20]	; (800b924 <MX_SPI1_Init+0x68>)
 800b910:	f003 fe1a 	bl	800f548 <HAL_SPI_Init>
 800b914:	4603      	mov	r3, r0
 800b916:	2b00      	cmp	r3, #0
 800b918:	d001      	beq.n	800b91e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800b91a:	f7ff ffbf 	bl	800b89c <Error_Handler>
  }

}
 800b91e:	bf00      	nop
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	20000748 	.word	0x20000748
 800b928:	40013000 	.word	0x40013000

0800b92c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b088      	sub	sp, #32
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b934:	f107 0310 	add.w	r3, r7, #16
 800b938:	2200      	movs	r2, #0
 800b93a:	601a      	str	r2, [r3, #0]
 800b93c:	605a      	str	r2, [r3, #4]
 800b93e:	609a      	str	r2, [r3, #8]
 800b940:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	4a15      	ldr	r2, [pc, #84]	; (800b99c <HAL_SPI_MspInit+0x70>)
 800b948:	4293      	cmp	r3, r2
 800b94a:	d123      	bne.n	800b994 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800b94c:	4b14      	ldr	r3, [pc, #80]	; (800b9a0 <HAL_SPI_MspInit+0x74>)
 800b94e:	699b      	ldr	r3, [r3, #24]
 800b950:	4a13      	ldr	r2, [pc, #76]	; (800b9a0 <HAL_SPI_MspInit+0x74>)
 800b952:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b956:	6193      	str	r3, [r2, #24]
 800b958:	4b11      	ldr	r3, [pc, #68]	; (800b9a0 <HAL_SPI_MspInit+0x74>)
 800b95a:	699b      	ldr	r3, [r3, #24]
 800b95c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b960:	60fb      	str	r3, [r7, #12]
 800b962:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b964:	4b0e      	ldr	r3, [pc, #56]	; (800b9a0 <HAL_SPI_MspInit+0x74>)
 800b966:	699b      	ldr	r3, [r3, #24]
 800b968:	4a0d      	ldr	r2, [pc, #52]	; (800b9a0 <HAL_SPI_MspInit+0x74>)
 800b96a:	f043 0304 	orr.w	r3, r3, #4
 800b96e:	6193      	str	r3, [r2, #24]
 800b970:	4b0b      	ldr	r3, [pc, #44]	; (800b9a0 <HAL_SPI_MspInit+0x74>)
 800b972:	699b      	ldr	r3, [r3, #24]
 800b974:	f003 0304 	and.w	r3, r3, #4
 800b978:	60bb      	str	r3, [r7, #8]
 800b97a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Sck_Pin|Mosi_Pin;
 800b97c:	23a0      	movs	r3, #160	; 0xa0
 800b97e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b980:	2302      	movs	r3, #2
 800b982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b984:	2303      	movs	r3, #3
 800b986:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b988:	f107 0310 	add.w	r3, r7, #16
 800b98c:	4619      	mov	r1, r3
 800b98e:	4805      	ldr	r0, [pc, #20]	; (800b9a4 <HAL_SPI_MspInit+0x78>)
 800b990:	f001 fc28 	bl	800d1e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800b994:	bf00      	nop
 800b996:	3720      	adds	r7, #32
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}
 800b99c:	40013000 	.word	0x40013000
 800b9a0:	40021000 	.word	0x40021000
 800b9a4:	40010800 	.word	0x40010800

0800b9a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b085      	sub	sp, #20
 800b9ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800b9ae:	4b15      	ldr	r3, [pc, #84]	; (800ba04 <HAL_MspInit+0x5c>)
 800b9b0:	699b      	ldr	r3, [r3, #24]
 800b9b2:	4a14      	ldr	r2, [pc, #80]	; (800ba04 <HAL_MspInit+0x5c>)
 800b9b4:	f043 0301 	orr.w	r3, r3, #1
 800b9b8:	6193      	str	r3, [r2, #24]
 800b9ba:	4b12      	ldr	r3, [pc, #72]	; (800ba04 <HAL_MspInit+0x5c>)
 800b9bc:	699b      	ldr	r3, [r3, #24]
 800b9be:	f003 0301 	and.w	r3, r3, #1
 800b9c2:	60bb      	str	r3, [r7, #8]
 800b9c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b9c6:	4b0f      	ldr	r3, [pc, #60]	; (800ba04 <HAL_MspInit+0x5c>)
 800b9c8:	69db      	ldr	r3, [r3, #28]
 800b9ca:	4a0e      	ldr	r2, [pc, #56]	; (800ba04 <HAL_MspInit+0x5c>)
 800b9cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9d0:	61d3      	str	r3, [r2, #28]
 800b9d2:	4b0c      	ldr	r3, [pc, #48]	; (800ba04 <HAL_MspInit+0x5c>)
 800b9d4:	69db      	ldr	r3, [r3, #28]
 800b9d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9da:	607b      	str	r3, [r7, #4]
 800b9dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800b9de:	4b0a      	ldr	r3, [pc, #40]	; (800ba08 <HAL_MspInit+0x60>)
 800b9e0:	685b      	ldr	r3, [r3, #4]
 800b9e2:	60fb      	str	r3, [r7, #12]
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800b9ea:	60fb      	str	r3, [r7, #12]
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b9f2:	60fb      	str	r3, [r7, #12]
 800b9f4:	4a04      	ldr	r2, [pc, #16]	; (800ba08 <HAL_MspInit+0x60>)
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b9fa:	bf00      	nop
 800b9fc:	3714      	adds	r7, #20
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bc80      	pop	{r7}
 800ba02:	4770      	bx	lr
 800ba04:	40021000 	.word	0x40021000
 800ba08:	40010000 	.word	0x40010000

0800ba0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ba10:	bf00      	nop
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bc80      	pop	{r7}
 800ba16:	4770      	bx	lr

0800ba18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 800ba1c:	f001 f884 	bl	800cb28 <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ba20:	e7fe      	b.n	800ba20 <HardFault_Handler+0x8>

0800ba22 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ba22:	b480      	push	{r7}
 800ba24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ba26:	e7fe      	b.n	800ba26 <MemManage_Handler+0x4>

0800ba28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ba2c:	e7fe      	b.n	800ba2c <BusFault_Handler+0x4>

0800ba2e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ba2e:	b480      	push	{r7}
 800ba30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ba32:	e7fe      	b.n	800ba32 <UsageFault_Handler+0x4>

0800ba34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ba34:	b480      	push	{r7}
 800ba36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ba38:	bf00      	nop
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bc80      	pop	{r7}
 800ba3e:	4770      	bx	lr

0800ba40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ba40:	b480      	push	{r7}
 800ba42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ba44:	bf00      	nop
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bc80      	pop	{r7}
 800ba4a:	4770      	bx	lr

0800ba4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ba50:	bf00      	nop
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bc80      	pop	{r7}
 800ba56:	4770      	bx	lr

0800ba58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ba5c:	f000 fb7a 	bl	800c154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ba60:	bf00      	nop
 800ba62:	bd80      	pop	{r7, pc}

0800ba64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800ba68:	4802      	ldr	r0, [pc, #8]	; (800ba74 <USART1_IRQHandler+0x10>)
 800ba6a:	f004 fecb 	bl	8010804 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800ba6e:	bf00      	nop
 800ba70:	bd80      	pop	{r7, pc}
 800ba72:	bf00      	nop
 800ba74:	200007e0 	.word	0x200007e0

0800ba78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	af00      	add	r7, sp, #0
	return 1;
 800ba7c:	2301      	movs	r3, #1
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bc80      	pop	{r7}
 800ba84:	4770      	bx	lr

0800ba86 <_kill>:

int _kill(int pid, int sig)
{
 800ba86:	b580      	push	{r7, lr}
 800ba88:	b082      	sub	sp, #8
 800ba8a:	af00      	add	r7, sp, #0
 800ba8c:	6078      	str	r0, [r7, #4]
 800ba8e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800ba90:	f005 fdf6 	bl	8011680 <__errno>
 800ba94:	4602      	mov	r2, r0
 800ba96:	2316      	movs	r3, #22
 800ba98:	6013      	str	r3, [r2, #0]
	return -1;
 800ba9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3708      	adds	r7, #8
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}

0800baa6 <_exit>:

void _exit (int status)
{
 800baa6:	b580      	push	{r7, lr}
 800baa8:	b082      	sub	sp, #8
 800baaa:	af00      	add	r7, sp, #0
 800baac:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800baae:	f04f 31ff 	mov.w	r1, #4294967295
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f7ff ffe7 	bl	800ba86 <_kill>
	while (1) {}		/* Make sure we hang here */
 800bab8:	e7fe      	b.n	800bab8 <_exit+0x12>
	...

0800babc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b086      	sub	sp, #24
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800bac4:	4a14      	ldr	r2, [pc, #80]	; (800bb18 <_sbrk+0x5c>)
 800bac6:	4b15      	ldr	r3, [pc, #84]	; (800bb1c <_sbrk+0x60>)
 800bac8:	1ad3      	subs	r3, r2, r3
 800baca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800bad0:	4b13      	ldr	r3, [pc, #76]	; (800bb20 <_sbrk+0x64>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d102      	bne.n	800bade <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800bad8:	4b11      	ldr	r3, [pc, #68]	; (800bb20 <_sbrk+0x64>)
 800bada:	4a12      	ldr	r2, [pc, #72]	; (800bb24 <_sbrk+0x68>)
 800badc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800bade:	4b10      	ldr	r3, [pc, #64]	; (800bb20 <_sbrk+0x64>)
 800bae0:	681a      	ldr	r2, [r3, #0]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	4413      	add	r3, r2
 800bae6:	693a      	ldr	r2, [r7, #16]
 800bae8:	429a      	cmp	r2, r3
 800baea:	d207      	bcs.n	800bafc <_sbrk+0x40>
  {
    errno = ENOMEM;
 800baec:	f005 fdc8 	bl	8011680 <__errno>
 800baf0:	4602      	mov	r2, r0
 800baf2:	230c      	movs	r3, #12
 800baf4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800baf6:	f04f 33ff 	mov.w	r3, #4294967295
 800bafa:	e009      	b.n	800bb10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800bafc:	4b08      	ldr	r3, [pc, #32]	; (800bb20 <_sbrk+0x64>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800bb02:	4b07      	ldr	r3, [pc, #28]	; (800bb20 <_sbrk+0x64>)
 800bb04:	681a      	ldr	r2, [r3, #0]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	4413      	add	r3, r2
 800bb0a:	4a05      	ldr	r2, [pc, #20]	; (800bb20 <_sbrk+0x64>)
 800bb0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3718      	adds	r7, #24
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}
 800bb18:	20005000 	.word	0x20005000
 800bb1c:	00000400 	.word	0x00000400
 800bb20:	200006b4 	.word	0x200006b4
 800bb24:	20000850 	.word	0x20000850

0800bb28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800bb2c:	4b15      	ldr	r3, [pc, #84]	; (800bb84 <SystemInit+0x5c>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	4a14      	ldr	r2, [pc, #80]	; (800bb84 <SystemInit+0x5c>)
 800bb32:	f043 0301 	orr.w	r3, r3, #1
 800bb36:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800bb38:	4b12      	ldr	r3, [pc, #72]	; (800bb84 <SystemInit+0x5c>)
 800bb3a:	685a      	ldr	r2, [r3, #4]
 800bb3c:	4911      	ldr	r1, [pc, #68]	; (800bb84 <SystemInit+0x5c>)
 800bb3e:	4b12      	ldr	r3, [pc, #72]	; (800bb88 <SystemInit+0x60>)
 800bb40:	4013      	ands	r3, r2
 800bb42:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800bb44:	4b0f      	ldr	r3, [pc, #60]	; (800bb84 <SystemInit+0x5c>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	4a0e      	ldr	r2, [pc, #56]	; (800bb84 <SystemInit+0x5c>)
 800bb4a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800bb4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb52:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800bb54:	4b0b      	ldr	r3, [pc, #44]	; (800bb84 <SystemInit+0x5c>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	4a0a      	ldr	r2, [pc, #40]	; (800bb84 <SystemInit+0x5c>)
 800bb5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bb5e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800bb60:	4b08      	ldr	r3, [pc, #32]	; (800bb84 <SystemInit+0x5c>)
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	4a07      	ldr	r2, [pc, #28]	; (800bb84 <SystemInit+0x5c>)
 800bb66:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800bb6a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800bb6c:	4b05      	ldr	r3, [pc, #20]	; (800bb84 <SystemInit+0x5c>)
 800bb6e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800bb72:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800bb74:	4b05      	ldr	r3, [pc, #20]	; (800bb8c <SystemInit+0x64>)
 800bb76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bb7a:	609a      	str	r2, [r3, #8]
#endif 
}
 800bb7c:	bf00      	nop
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bc80      	pop	{r7}
 800bb82:	4770      	bx	lr
 800bb84:	40021000 	.word	0x40021000
 800bb88:	f8ff0000 	.word	0xf8ff0000
 800bb8c:	e000ed00 	.word	0xe000ed00

0800bb90 <_ZN13THERMO_SENSOR12clearI2CBuffEv>:
// HOLD MASTER - SCL line is blocked (controlled by sensor) during measurement
// NO HOLD MASTER - allows other I2C communication tasks while sensor performing
// measurements.

void THERMO_SENSOR::clearI2CBuff()
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b082      	sub	sp, #8
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
	memset(i2cBuffer, 0x00, BUFFER_LEN);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2220      	movs	r2, #32
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f005 fde9 	bl	8011776 <memset>
	i2cBufferIndex = 0;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2200      	movs	r2, #0
 800bba8:	f883 2020 	strb.w	r2, [r3, #32]
}
 800bbac:	bf00      	nop
 800bbae:	3708      	adds	r7, #8
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}

0800bbb4 <_ZN13THERMO_SENSOR13readSensor_hmEh>:

uint16_t THERMO_SENSOR::readSensor_hm(uint8_t command)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b086      	sub	sp, #24
 800bbb8:	af02      	add	r7, sp, #8
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	70fb      	strb	r3, [r7, #3]
	uint8_t data[2];
	uint16_t result;
//	uint8_t n = 0;
	uint8_t d;

	if(command == TRIGGER_RH_MEASUREMENT_HM || command == TRIGGER_RH_MEASUREMENT_NHM)
 800bbc0:	78fb      	ldrb	r3, [r7, #3]
 800bbc2:	2be5      	cmp	r3, #229	; 0xe5
 800bbc4:	d002      	beq.n	800bbcc <_ZN13THERMO_SENSOR13readSensor_hmEh+0x18>
 800bbc6:	78fb      	ldrb	r3, [r7, #3]
 800bbc8:	2bf5      	cmp	r3, #245	; 0xf5
 800bbca:	d101      	bne.n	800bbd0 <_ZN13THERMO_SENSOR13readSensor_hmEh+0x1c>
		d = 30;
 800bbcc:	231e      	movs	r3, #30
 800bbce:	737b      	strb	r3, [r7, #13]
	if(command == TRIGGER_T_MEASUREMENT_HM || command == TRIGGER_T_MEASUREMENT_NHM)
 800bbd0:	78fb      	ldrb	r3, [r7, #3]
 800bbd2:	2be3      	cmp	r3, #227	; 0xe3
 800bbd4:	d002      	beq.n	800bbdc <_ZN13THERMO_SENSOR13readSensor_hmEh+0x28>
 800bbd6:	78fb      	ldrb	r3, [r7, #3]
 800bbd8:	2bf3      	cmp	r3, #243	; 0xf3
 800bbda:	d101      	bne.n	800bbe0 <_ZN13THERMO_SENSOR13readSensor_hmEh+0x2c>
		d = 85;
 800bbdc:	2355      	movs	r3, #85	; 0x55
 800bbde:	737b      	strb	r3, [r7, #13]

	clearI2CBuff();
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f7ff ffd5 	bl	800bb90 <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	i2cBuffer[0] = command;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	78fa      	ldrb	r2, [r7, #3]
 800bbea:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, I2CTEMPADDR, i2cBuffer, 1, 10);
 800bbec:	687a      	ldr	r2, [r7, #4]
 800bbee:	230a      	movs	r3, #10
 800bbf0:	9300      	str	r3, [sp, #0]
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	2180      	movs	r1, #128	; 0x80
 800bbf6:	482d      	ldr	r0, [pc, #180]	; (800bcac <_ZN13THERMO_SENSOR13readSensor_hmEh+0xf8>)
 800bbf8:	f001 ff66 	bl	800dac8 <HAL_I2C_Master_Transmit>
	HAL_Delay(d);
 800bbfc:	7b7b      	ldrb	r3, [r7, #13]
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f000 fac4 	bl	800c18c <HAL_Delay>
	clearI2CBuff();
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f7ff ffc3 	bl	800bb90 <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	HAL_I2C_Master_Receive(&hi2c1, I2CTEMPADDR, i2cBuffer, 3, 10);
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	230a      	movs	r3, #10
 800bc0e:	9300      	str	r3, [sp, #0]
 800bc10:	2303      	movs	r3, #3
 800bc12:	2180      	movs	r1, #128	; 0x80
 800bc14:	4825      	ldr	r0, [pc, #148]	; (800bcac <_ZN13THERMO_SENSOR13readSensor_hmEh+0xf8>)
 800bc16:	f002 f855 	bl	800dcc4 <HAL_I2C_Master_Receive>
	data[0] = i2cBuffer[i2cBufferIndex++]; 	// read data (MSB)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bc20:	1c5a      	adds	r2, r3, #1
 800bc22:	b2d1      	uxtb	r1, r2
 800bc24:	687a      	ldr	r2, [r7, #4]
 800bc26:	f882 1020 	strb.w	r1, [r2, #32]
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	5c9b      	ldrb	r3, [r3, r2]
 800bc30:	723b      	strb	r3, [r7, #8]
	data[1] = i2cBuffer[i2cBufferIndex++]; 	// read data (LSB)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bc38:	1c5a      	adds	r2, r3, #1
 800bc3a:	b2d1      	uxtb	r1, r2
 800bc3c:	687a      	ldr	r2, [r7, #4]
 800bc3e:	f882 1020 	strb.w	r1, [r2, #32]
 800bc42:	461a      	mov	r2, r3
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	5c9b      	ldrb	r3, [r3, r2]
 800bc48:	727b      	strb	r3, [r7, #9]
	checksum = i2cBuffer[i2cBufferIndex++];	// read checksum
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bc50:	1c5a      	adds	r2, r3, #1
 800bc52:	b2d1      	uxtb	r1, r2
 800bc54:	687a      	ldr	r2, [r7, #4]
 800bc56:	f882 1020 	strb.w	r1, [r2, #32]
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	5c9b      	ldrb	r3, [r3, r2]
 800bc60:	733b      	strb	r3, [r7, #12]
	result = (data[0] << 8);
 800bc62:	7a3b      	ldrb	r3, [r7, #8]
 800bc64:	b29b      	uxth	r3, r3
 800bc66:	021b      	lsls	r3, r3, #8
 800bc68:	81fb      	strh	r3, [r7, #14]
	result += data[1];
 800bc6a:	7a7b      	ldrb	r3, [r7, #9]
 800bc6c:	b29a      	uxth	r2, r3
 800bc6e:	89fb      	ldrh	r3, [r7, #14]
 800bc70:	4413      	add	r3, r2
 800bc72:	81fb      	strh	r3, [r7, #14]
	if(CRC_Checksum (data, 2, checksum))
 800bc74:	7b3b      	ldrb	r3, [r7, #12]
 800bc76:	f107 0108 	add.w	r1, r7, #8
 800bc7a:	2202      	movs	r2, #2
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f000 f87b 	bl	800bd78 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh>
 800bc82:	4603      	mov	r3, r0
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	bf14      	ite	ne
 800bc88:	2301      	movne	r3, #1
 800bc8a:	2300      	moveq	r3, #0
 800bc8c:	b2db      	uxtb	r3, r3
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d004      	beq.n	800bc9c <_ZN13THERMO_SENSOR13readSensor_hmEh+0xe8>
	{
		reset();
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f000 f8e0 	bl	800be58 <_ZN13THERMO_SENSOR5resetEv>
		result = 1;
 800bc98:	2301      	movs	r3, #1
 800bc9a:	81fb      	strh	r3, [r7, #14]
	}
	clearI2CBuff();
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f7ff ff77 	bl	800bb90 <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	return result; // @suppress("Return with parenthesis")
 800bca2:	89fb      	ldrh	r3, [r7, #14]
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3710      	adds	r7, #16
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	200006f4 	.word	0x200006f4

0800bcb0 <_ZN13THERMO_SENSOR6CalcRHEt>:

float THERMO_SENSOR::CalcRH(uint16_t rh)
{
 800bcb0:	b590      	push	{r4, r7, lr}
 800bcb2:	b083      	sub	sp, #12
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	460b      	mov	r3, r1
 800bcba:	807b      	strh	r3, [r7, #2]
	rh &= ~0x0003;	// clean last two bits
 800bcbc:	887b      	ldrh	r3, [r7, #2]
 800bcbe:	f023 0303 	bic.w	r3, r3, #3
 800bcc2:	807b      	strh	r3, [r7, #2]
  	return (-6.0 + 125.0/65536 * (float)rh); // return relative humidity
 800bcc4:	887b      	ldrh	r3, [r7, #2]
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f7f4 ff1e 	bl	8000b08 <__aeabi_ui2f>
 800bccc:	4603      	mov	r3, r0
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f7f4 fbaa 	bl	8000428 <__aeabi_f2d>
 800bcd4:	f04f 0200 	mov.w	r2, #0
 800bcd8:	4b0b      	ldr	r3, [pc, #44]	; (800bd08 <_ZN13THERMO_SENSOR6CalcRHEt+0x58>)
 800bcda:	f7f4 fbfd 	bl	80004d8 <__aeabi_dmul>
 800bcde:	4603      	mov	r3, r0
 800bce0:	460c      	mov	r4, r1
 800bce2:	4618      	mov	r0, r3
 800bce4:	4621      	mov	r1, r4
 800bce6:	f04f 0200 	mov.w	r2, #0
 800bcea:	4b08      	ldr	r3, [pc, #32]	; (800bd0c <_ZN13THERMO_SENSOR6CalcRHEt+0x5c>)
 800bcec:	f7f4 fa3c 	bl	8000168 <__aeabi_dsub>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	460c      	mov	r4, r1
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	4621      	mov	r1, r4
 800bcf8:	f7f4 fe00 	bl	80008fc <__aeabi_d2f>
 800bcfc:	4603      	mov	r3, r0
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	370c      	adds	r7, #12
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd90      	pop	{r4, r7, pc}
 800bd06:	bf00      	nop
 800bd08:	3f5f4000 	.word	0x3f5f4000
 800bd0c:	40180000 	.word	0x40180000

0800bd10 <_ZN13THERMO_SENSOR5CalcTEt>:

float THERMO_SENSOR::CalcT(uint16_t t)
{
 800bd10:	b590      	push	{r4, r7, lr}
 800bd12:	b083      	sub	sp, #12
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	460b      	mov	r3, r1
 800bd1a:	807b      	strh	r3, [r7, #2]
	t &= ~0x0003;	// clean last two bits
 800bd1c:	887b      	ldrh	r3, [r7, #2]
 800bd1e:	f023 0303 	bic.w	r3, r3, #3
 800bd22:	807b      	strh	r3, [r7, #2]
	return (-46.85 + 175.72/65536 * (float)t);
 800bd24:	887b      	ldrh	r3, [r7, #2]
 800bd26:	4618      	mov	r0, r3
 800bd28:	f7f4 feee 	bl	8000b08 <__aeabi_ui2f>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f7f4 fb7a 	bl	8000428 <__aeabi_f2d>
 800bd34:	a30c      	add	r3, pc, #48	; (adr r3, 800bd68 <_ZN13THERMO_SENSOR5CalcTEt+0x58>)
 800bd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd3a:	f7f4 fbcd 	bl	80004d8 <__aeabi_dmul>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	460c      	mov	r4, r1
 800bd42:	4618      	mov	r0, r3
 800bd44:	4621      	mov	r1, r4
 800bd46:	a30a      	add	r3, pc, #40	; (adr r3, 800bd70 <_ZN13THERMO_SENSOR5CalcTEt+0x60>)
 800bd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4c:	f7f4 fa0c 	bl	8000168 <__aeabi_dsub>
 800bd50:	4603      	mov	r3, r0
 800bd52:	460c      	mov	r4, r1
 800bd54:	4618      	mov	r0, r3
 800bd56:	4621      	mov	r1, r4
 800bd58:	f7f4 fdd0 	bl	80008fc <__aeabi_d2f>
 800bd5c:	4603      	mov	r3, r0
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	370c      	adds	r7, #12
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd90      	pop	{r4, r7, pc}
 800bd66:	bf00      	nop
 800bd68:	3d70a3d7 	.word	0x3d70a3d7
 800bd6c:	3f65f70a 	.word	0x3f65f70a
 800bd70:	cccccccd 	.word	0xcccccccd
 800bd74:	40476ccc 	.word	0x40476ccc

0800bd78 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh>:

uint8_t THERMO_SENSOR::CRC_Checksum(uint8_t data[], uint8_t no_of_bytes, uint8_t checksum)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b087      	sub	sp, #28
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	60b9      	str	r1, [r7, #8]
 800bd82:	4611      	mov	r1, r2
 800bd84:	461a      	mov	r2, r3
 800bd86:	460b      	mov	r3, r1
 800bd88:	71fb      	strb	r3, [r7, #7]
 800bd8a:	4613      	mov	r3, r2
 800bd8c:	71bb      	strb	r3, [r7, #6]
	uint8_t crc = 0;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	75fb      	strb	r3, [r7, #23]
  	uint8_t byteCtr;
  	uint8_t ret = 0;
 800bd92:	2300      	movs	r3, #0
 800bd94:	757b      	strb	r3, [r7, #21]

 	 //calculates 8-Bit checksum with given polynomial
  	for (byteCtr = 0; byteCtr < no_of_bytes; ++byteCtr)
 800bd96:	2300      	movs	r3, #0
 800bd98:	75bb      	strb	r3, [r7, #22]
 800bd9a:	7dba      	ldrb	r2, [r7, #22]
 800bd9c:	79fb      	ldrb	r3, [r7, #7]
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d222      	bcs.n	800bde8 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x70>
 	 {
		crc ^= (data[byteCtr]);
 800bda2:	7dbb      	ldrb	r3, [r7, #22]
 800bda4:	68ba      	ldr	r2, [r7, #8]
 800bda6:	4413      	add	r3, r2
 800bda8:	781a      	ldrb	r2, [r3, #0]
 800bdaa:	7dfb      	ldrb	r3, [r7, #23]
 800bdac:	4053      	eors	r3, r2
 800bdae:	75fb      	strb	r3, [r7, #23]
		for (uint8_t bit = 8; bit > 0; --bit)
 800bdb0:	2308      	movs	r3, #8
 800bdb2:	753b      	strb	r3, [r7, #20]
 800bdb4:	7d3b      	ldrb	r3, [r7, #20]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d012      	beq.n	800bde0 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x68>
		{
		   if (crc & 0x80)
 800bdba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	da07      	bge.n	800bdd2 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x5a>
			   crc = (crc << 1) ^ POLYNOMIAL;
 800bdc2:	7dfb      	ldrb	r3, [r7, #23]
 800bdc4:	005b      	lsls	r3, r3, #1
 800bdc6:	b25b      	sxtb	r3, r3
 800bdc8:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800bdcc:	b25b      	sxtb	r3, r3
 800bdce:	75fb      	strb	r3, [r7, #23]
 800bdd0:	e002      	b.n	800bdd8 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x60>
		   else
			   crc = (crc << 1);
 800bdd2:	7dfb      	ldrb	r3, [r7, #23]
 800bdd4:	005b      	lsls	r3, r3, #1
 800bdd6:	75fb      	strb	r3, [r7, #23]
		for (uint8_t bit = 8; bit > 0; --bit)
 800bdd8:	7d3b      	ldrb	r3, [r7, #20]
 800bdda:	3b01      	subs	r3, #1
 800bddc:	753b      	strb	r3, [r7, #20]
 800bdde:	e7e9      	b.n	800bdb4 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x3c>
  	for (byteCtr = 0; byteCtr < no_of_bytes; ++byteCtr)
 800bde0:	7dbb      	ldrb	r3, [r7, #22]
 800bde2:	3301      	adds	r3, #1
 800bde4:	75bb      	strb	r3, [r7, #22]
 800bde6:	e7d8      	b.n	800bd9a <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x22>
		}
 	 }
 	 if (crc != checksum)
 800bde8:	7dfa      	ldrb	r2, [r7, #23]
 800bdea:	79bb      	ldrb	r3, [r7, #6]
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d002      	beq.n	800bdf6 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x7e>
 		 ret = 1;
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	757b      	strb	r3, [r7, #21]
 800bdf4:	e001      	b.n	800bdfa <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x82>
 	 else
 		 ret = 0;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	757b      	strb	r3, [r7, #21]
 	 return ret;
 800bdfa:	7d7b      	ldrb	r3, [r7, #21]
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	371c      	adds	r7, #28
 800be00:	46bd      	mov	sp, r7
 800be02:	bc80      	pop	{r7}
 800be04:	4770      	bx	lr

0800be06 <_ZN13THERMO_SENSOR11getHumidityEv>:
	return SN; // @suppress("Return with parenthesis")

}

float THERMO_SENSOR::getHumidity(void)
{
 800be06:	b580      	push	{r7, lr}
 800be08:	b084      	sub	sp, #16
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	6078      	str	r0, [r7, #4]
	uint16_t result; 	// return variable

	result = readSensor_hm(TRIGGER_RH_MEASUREMENT_NHM);
 800be0e:	21f5      	movs	r1, #245	; 0xf5
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f7ff fecf 	bl	800bbb4 <_ZN13THERMO_SENSOR13readSensor_hmEh>
 800be16:	4603      	mov	r3, r0
 800be18:	81fb      	strh	r3, [r7, #14]

	return CalcRH(result);
 800be1a:	89fb      	ldrh	r3, [r7, #14]
 800be1c:	4619      	mov	r1, r3
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f7ff ff46 	bl	800bcb0 <_ZN13THERMO_SENSOR6CalcRHEt>
 800be24:	4603      	mov	r3, r0
}
 800be26:	4618      	mov	r0, r3
 800be28:	3710      	adds	r7, #16
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}

0800be2e <_ZN13THERMO_SENSOR14getTemperatureEv>:

float THERMO_SENSOR::getTemperature(void)
{
 800be2e:	b580      	push	{r7, lr}
 800be30:	b084      	sub	sp, #16
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
	uint16_t result; 	// return variable

	result = readSensor_hm(TRIGGER_T_MEASUREMENT_NHM);
 800be36:	21f3      	movs	r1, #243	; 0xf3
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f7ff febb 	bl	800bbb4 <_ZN13THERMO_SENSOR13readSensor_hmEh>
 800be3e:	4603      	mov	r3, r0
 800be40:	81fb      	strh	r3, [r7, #14]

	return CalcT(result);
 800be42:	89fb      	ldrh	r3, [r7, #14]
 800be44:	4619      	mov	r1, r3
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f7ff ff62 	bl	800bd10 <_ZN13THERMO_SENSOR5CalcTEt>
 800be4c:	4603      	mov	r3, r0
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3710      	adds	r7, #16
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}
	...

0800be58 <_ZN13THERMO_SENSOR5resetEv>:

void THERMO_SENSOR::reset()
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b084      	sub	sp, #16
 800be5c:	af02      	add	r7, sp, #8
 800be5e:	6078      	str	r0, [r7, #4]
	clearI2CBuff();
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f7ff fe95 	bl	800bb90 <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	i2cBuffer[0] = SOFT_RESET;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	22fe      	movs	r2, #254	; 0xfe
 800be6a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, I2CTEMPADDR, i2cBuffer, 1, 10);
 800be6c:	687a      	ldr	r2, [r7, #4]
 800be6e:	230a      	movs	r3, #10
 800be70:	9300      	str	r3, [sp, #0]
 800be72:	2301      	movs	r3, #1
 800be74:	2180      	movs	r1, #128	; 0x80
 800be76:	4806      	ldr	r0, [pc, #24]	; (800be90 <_ZN13THERMO_SENSOR5resetEv+0x38>)
 800be78:	f001 fe26 	bl	800dac8 <HAL_I2C_Master_Transmit>
	HAL_Delay(15);
 800be7c:	200f      	movs	r0, #15
 800be7e:	f000 f985 	bl	800c18c <HAL_Delay>
	clearI2CBuff();
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f7ff fe84 	bl	800bb90 <_ZN13THERMO_SENSOR12clearI2CBuffEv>
}
 800be88:	bf00      	nop
 800be8a:	3708      	adds	r7, #8
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}
 800be90:	200006f4 	.word	0x200006f4

0800be94 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b086      	sub	sp, #24
 800be98:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800be9a:	f107 0308 	add.w	r3, r7, #8
 800be9e:	2200      	movs	r2, #0
 800bea0:	601a      	str	r2, [r3, #0]
 800bea2:	605a      	str	r2, [r3, #4]
 800bea4:	609a      	str	r2, [r3, #8]
 800bea6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bea8:	463b      	mov	r3, r7
 800beaa:	2200      	movs	r2, #0
 800beac:	601a      	str	r2, [r3, #0]
 800beae:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800beb0:	4b1d      	ldr	r3, [pc, #116]	; (800bf28 <MX_TIM2_Init+0x94>)
 800beb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800beb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800beb8:	4b1b      	ldr	r3, [pc, #108]	; (800bf28 <MX_TIM2_Init+0x94>)
 800beba:	2200      	movs	r2, #0
 800bebc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bebe:	4b1a      	ldr	r3, [pc, #104]	; (800bf28 <MX_TIM2_Init+0x94>)
 800bec0:	2200      	movs	r2, #0
 800bec2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535 - 1;
 800bec4:	4b18      	ldr	r3, [pc, #96]	; (800bf28 <MX_TIM2_Init+0x94>)
 800bec6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800beca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800becc:	4b16      	ldr	r3, [pc, #88]	; (800bf28 <MX_TIM2_Init+0x94>)
 800bece:	2200      	movs	r2, #0
 800bed0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bed2:	4b15      	ldr	r3, [pc, #84]	; (800bf28 <MX_TIM2_Init+0x94>)
 800bed4:	2200      	movs	r2, #0
 800bed6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800bed8:	4813      	ldr	r0, [pc, #76]	; (800bf28 <MX_TIM2_Init+0x94>)
 800beda:	f003 fe13 	bl	800fb04 <HAL_TIM_Base_Init>
 800bede:	4603      	mov	r3, r0
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d001      	beq.n	800bee8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800bee4:	f7ff fcda 	bl	800b89c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800bee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800beec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800beee:	f107 0308 	add.w	r3, r7, #8
 800bef2:	4619      	mov	r1, r3
 800bef4:	480c      	ldr	r0, [pc, #48]	; (800bf28 <MX_TIM2_Init+0x94>)
 800bef6:	f003 fecf 	bl	800fc98 <HAL_TIM_ConfigClockSource>
 800befa:	4603      	mov	r3, r0
 800befc:	2b00      	cmp	r3, #0
 800befe:	d001      	beq.n	800bf04 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800bf00:	f7ff fccc 	bl	800b89c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bf04:	2300      	movs	r3, #0
 800bf06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800bf0c:	463b      	mov	r3, r7
 800bf0e:	4619      	mov	r1, r3
 800bf10:	4805      	ldr	r0, [pc, #20]	; (800bf28 <MX_TIM2_Init+0x94>)
 800bf12:	f004 fa4b 	bl	80103ac <HAL_TIMEx_MasterConfigSynchronization>
 800bf16:	4603      	mov	r3, r0
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d001      	beq.n	800bf20 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800bf1c:	f7ff fcbe 	bl	800b89c <Error_Handler>
  }

}
 800bf20:	bf00      	nop
 800bf22:	3718      	adds	r7, #24
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}
 800bf28:	200007a0 	.word	0x200007a0

0800bf2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b085      	sub	sp, #20
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf3c:	d10b      	bne.n	800bf56 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800bf3e:	4b08      	ldr	r3, [pc, #32]	; (800bf60 <HAL_TIM_Base_MspInit+0x34>)
 800bf40:	69db      	ldr	r3, [r3, #28]
 800bf42:	4a07      	ldr	r2, [pc, #28]	; (800bf60 <HAL_TIM_Base_MspInit+0x34>)
 800bf44:	f043 0301 	orr.w	r3, r3, #1
 800bf48:	61d3      	str	r3, [r2, #28]
 800bf4a:	4b05      	ldr	r3, [pc, #20]	; (800bf60 <HAL_TIM_Base_MspInit+0x34>)
 800bf4c:	69db      	ldr	r3, [r3, #28]
 800bf4e:	f003 0301 	and.w	r3, r3, #1
 800bf52:	60fb      	str	r3, [r7, #12]
 800bf54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800bf56:	bf00      	nop
 800bf58:	3714      	adds	r7, #20
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bc80      	pop	{r7}
 800bf5e:	4770      	bx	lr
 800bf60:	40021000 	.word	0x40021000

0800bf64 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800bf68:	4b11      	ldr	r3, [pc, #68]	; (800bfb0 <MX_USART1_UART_Init+0x4c>)
 800bf6a:	4a12      	ldr	r2, [pc, #72]	; (800bfb4 <MX_USART1_UART_Init+0x50>)
 800bf6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800bf6e:	4b10      	ldr	r3, [pc, #64]	; (800bfb0 <MX_USART1_UART_Init+0x4c>)
 800bf70:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800bf74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800bf76:	4b0e      	ldr	r3, [pc, #56]	; (800bfb0 <MX_USART1_UART_Init+0x4c>)
 800bf78:	2200      	movs	r2, #0
 800bf7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800bf7c:	4b0c      	ldr	r3, [pc, #48]	; (800bfb0 <MX_USART1_UART_Init+0x4c>)
 800bf7e:	2200      	movs	r2, #0
 800bf80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800bf82:	4b0b      	ldr	r3, [pc, #44]	; (800bfb0 <MX_USART1_UART_Init+0x4c>)
 800bf84:	2200      	movs	r2, #0
 800bf86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800bf88:	4b09      	ldr	r3, [pc, #36]	; (800bfb0 <MX_USART1_UART_Init+0x4c>)
 800bf8a:	220c      	movs	r2, #12
 800bf8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800bf8e:	4b08      	ldr	r3, [pc, #32]	; (800bfb0 <MX_USART1_UART_Init+0x4c>)
 800bf90:	2200      	movs	r2, #0
 800bf92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800bf94:	4b06      	ldr	r3, [pc, #24]	; (800bfb0 <MX_USART1_UART_Init+0x4c>)
 800bf96:	2200      	movs	r2, #0
 800bf98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800bf9a:	4805      	ldr	r0, [pc, #20]	; (800bfb0 <MX_USART1_UART_Init+0x4c>)
 800bf9c:	f004 fa9c 	bl	80104d8 <HAL_UART_Init>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d001      	beq.n	800bfaa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800bfa6:	f7ff fc79 	bl	800b89c <Error_Handler>
  }

}
 800bfaa:	bf00      	nop
 800bfac:	bd80      	pop	{r7, pc}
 800bfae:	bf00      	nop
 800bfb0:	200007e0 	.word	0x200007e0
 800bfb4:	40013800 	.word	0x40013800

0800bfb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b08a      	sub	sp, #40	; 0x28
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bfc0:	f107 0314 	add.w	r3, r7, #20
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	601a      	str	r2, [r3, #0]
 800bfc8:	605a      	str	r2, [r3, #4]
 800bfca:	609a      	str	r2, [r3, #8]
 800bfcc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	4a26      	ldr	r2, [pc, #152]	; (800c06c <HAL_UART_MspInit+0xb4>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d145      	bne.n	800c064 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800bfd8:	4b25      	ldr	r3, [pc, #148]	; (800c070 <HAL_UART_MspInit+0xb8>)
 800bfda:	699b      	ldr	r3, [r3, #24]
 800bfdc:	4a24      	ldr	r2, [pc, #144]	; (800c070 <HAL_UART_MspInit+0xb8>)
 800bfde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bfe2:	6193      	str	r3, [r2, #24]
 800bfe4:	4b22      	ldr	r3, [pc, #136]	; (800c070 <HAL_UART_MspInit+0xb8>)
 800bfe6:	699b      	ldr	r3, [r3, #24]
 800bfe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bfec:	613b      	str	r3, [r7, #16]
 800bfee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bff0:	4b1f      	ldr	r3, [pc, #124]	; (800c070 <HAL_UART_MspInit+0xb8>)
 800bff2:	699b      	ldr	r3, [r3, #24]
 800bff4:	4a1e      	ldr	r2, [pc, #120]	; (800c070 <HAL_UART_MspInit+0xb8>)
 800bff6:	f043 0308 	orr.w	r3, r3, #8
 800bffa:	6193      	str	r3, [r2, #24]
 800bffc:	4b1c      	ldr	r3, [pc, #112]	; (800c070 <HAL_UART_MspInit+0xb8>)
 800bffe:	699b      	ldr	r3, [r3, #24]
 800c000:	f003 0308 	and.w	r3, r3, #8
 800c004:	60fb      	str	r3, [r7, #12]
 800c006:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 800c008:	2340      	movs	r3, #64	; 0x40
 800c00a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c00c:	2302      	movs	r3, #2
 800c00e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c010:	2303      	movs	r3, #3
 800c012:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 800c014:	f107 0314 	add.w	r3, r7, #20
 800c018:	4619      	mov	r1, r3
 800c01a:	4816      	ldr	r0, [pc, #88]	; (800c074 <HAL_UART_MspInit+0xbc>)
 800c01c:	f001 f8e2 	bl	800d1e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 800c020:	2380      	movs	r3, #128	; 0x80
 800c022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c024:	2300      	movs	r3, #0
 800c026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c028:	2300      	movs	r3, #0
 800c02a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 800c02c:	f107 0314 	add.w	r3, r7, #20
 800c030:	4619      	mov	r1, r3
 800c032:	4810      	ldr	r0, [pc, #64]	; (800c074 <HAL_UART_MspInit+0xbc>)
 800c034:	f001 f8d6 	bl	800d1e4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800c038:	4b0f      	ldr	r3, [pc, #60]	; (800c078 <HAL_UART_MspInit+0xc0>)
 800c03a:	685b      	ldr	r3, [r3, #4]
 800c03c:	627b      	str	r3, [r7, #36]	; 0x24
 800c03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c040:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800c044:	627b      	str	r3, [r7, #36]	; 0x24
 800c046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c048:	f043 0304 	orr.w	r3, r3, #4
 800c04c:	627b      	str	r3, [r7, #36]	; 0x24
 800c04e:	4a0a      	ldr	r2, [pc, #40]	; (800c078 <HAL_UART_MspInit+0xc0>)
 800c050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c052:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800c054:	2200      	movs	r2, #0
 800c056:	2100      	movs	r1, #0
 800c058:	2025      	movs	r0, #37	; 0x25
 800c05a:	f000 fd21 	bl	800caa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800c05e:	2025      	movs	r0, #37	; 0x25
 800c060:	f000 fd4a 	bl	800caf8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800c064:	bf00      	nop
 800c066:	3728      	adds	r7, #40	; 0x28
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	40013800 	.word	0x40013800
 800c070:	40021000 	.word	0x40021000
 800c074:	40010c00 	.word	0x40010c00
 800c078:	40010000 	.word	0x40010000

0800c07c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800c07c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800c07e:	e003      	b.n	800c088 <LoopCopyDataInit>

0800c080 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800c080:	4b0b      	ldr	r3, [pc, #44]	; (800c0b0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800c082:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800c084:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800c086:	3104      	adds	r1, #4

0800c088 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800c088:	480a      	ldr	r0, [pc, #40]	; (800c0b4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800c08a:	4b0b      	ldr	r3, [pc, #44]	; (800c0b8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800c08c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800c08e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800c090:	d3f6      	bcc.n	800c080 <CopyDataInit>
  ldr r2, =_sbss
 800c092:	4a0a      	ldr	r2, [pc, #40]	; (800c0bc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800c094:	e002      	b.n	800c09c <LoopFillZerobss>

0800c096 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800c096:	2300      	movs	r3, #0
  str r3, [r2], #4
 800c098:	f842 3b04 	str.w	r3, [r2], #4

0800c09c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800c09c:	4b08      	ldr	r3, [pc, #32]	; (800c0c0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800c09e:	429a      	cmp	r2, r3
  bcc FillZerobss
 800c0a0:	d3f9      	bcc.n	800c096 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800c0a2:	f7ff fd41 	bl	800bb28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c0a6:	f005 faf1 	bl	801168c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800c0aa:	f7ff fb57 	bl	800b75c <main>
  bx lr
 800c0ae:	4770      	bx	lr
  ldr r3, =_sidata
 800c0b0:	080157a4 	.word	0x080157a4
  ldr r0, =_sdata
 800c0b4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800c0b8:	20000278 	.word	0x20000278
  ldr r2, =_sbss
 800c0bc:	20000278 	.word	0x20000278
  ldr r3, = _ebss
 800c0c0:	2000084c 	.word	0x2000084c

0800c0c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800c0c4:	e7fe      	b.n	800c0c4 <ADC1_2_IRQHandler>
	...

0800c0c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c0cc:	4b08      	ldr	r3, [pc, #32]	; (800c0f0 <HAL_Init+0x28>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	4a07      	ldr	r2, [pc, #28]	; (800c0f0 <HAL_Init+0x28>)
 800c0d2:	f043 0310 	orr.w	r3, r3, #16
 800c0d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c0d8:	2003      	movs	r0, #3
 800c0da:	f000 fcc1 	bl	800ca60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800c0de:	2000      	movs	r0, #0
 800c0e0:	f000 f808 	bl	800c0f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800c0e4:	f7ff fc60 	bl	800b9a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800c0e8:	2300      	movs	r3, #0
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	bd80      	pop	{r7, pc}
 800c0ee:	bf00      	nop
 800c0f0:	40022000 	.word	0x40022000

0800c0f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b082      	sub	sp, #8
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800c0fc:	4b12      	ldr	r3, [pc, #72]	; (800c148 <HAL_InitTick+0x54>)
 800c0fe:	681a      	ldr	r2, [r3, #0]
 800c100:	4b12      	ldr	r3, [pc, #72]	; (800c14c <HAL_InitTick+0x58>)
 800c102:	781b      	ldrb	r3, [r3, #0]
 800c104:	4619      	mov	r1, r3
 800c106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c10a:	fbb3 f3f1 	udiv	r3, r3, r1
 800c10e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c112:	4618      	mov	r0, r3
 800c114:	f000 fd0c 	bl	800cb30 <HAL_SYSTICK_Config>
 800c118:	4603      	mov	r3, r0
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d001      	beq.n	800c122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800c11e:	2301      	movs	r3, #1
 800c120:	e00e      	b.n	800c140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2b0f      	cmp	r3, #15
 800c126:	d80a      	bhi.n	800c13e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800c128:	2200      	movs	r2, #0
 800c12a:	6879      	ldr	r1, [r7, #4]
 800c12c:	f04f 30ff 	mov.w	r0, #4294967295
 800c130:	f000 fcb6 	bl	800caa0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800c134:	4a06      	ldr	r2, [pc, #24]	; (800c150 <HAL_InitTick+0x5c>)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800c13a:	2300      	movs	r3, #0
 800c13c:	e000      	b.n	800c140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800c13e:	2301      	movs	r3, #1
}
 800c140:	4618      	mov	r0, r3
 800c142:	3708      	adds	r7, #8
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}
 800c148:	2000009c 	.word	0x2000009c
 800c14c:	200000a4 	.word	0x200000a4
 800c150:	200000a0 	.word	0x200000a0

0800c154 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c154:	b480      	push	{r7}
 800c156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800c158:	4b05      	ldr	r3, [pc, #20]	; (800c170 <HAL_IncTick+0x1c>)
 800c15a:	781b      	ldrb	r3, [r3, #0]
 800c15c:	461a      	mov	r2, r3
 800c15e:	4b05      	ldr	r3, [pc, #20]	; (800c174 <HAL_IncTick+0x20>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4413      	add	r3, r2
 800c164:	4a03      	ldr	r2, [pc, #12]	; (800c174 <HAL_IncTick+0x20>)
 800c166:	6013      	str	r3, [r2, #0]
}
 800c168:	bf00      	nop
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bc80      	pop	{r7}
 800c16e:	4770      	bx	lr
 800c170:	200000a4 	.word	0x200000a4
 800c174:	20000820 	.word	0x20000820

0800c178 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c178:	b480      	push	{r7}
 800c17a:	af00      	add	r7, sp, #0
  return uwTick;
 800c17c:	4b02      	ldr	r3, [pc, #8]	; (800c188 <HAL_GetTick+0x10>)
 800c17e:	681b      	ldr	r3, [r3, #0]
}
 800c180:	4618      	mov	r0, r3
 800c182:	46bd      	mov	sp, r7
 800c184:	bc80      	pop	{r7}
 800c186:	4770      	bx	lr
 800c188:	20000820 	.word	0x20000820

0800c18c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b084      	sub	sp, #16
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c194:	f7ff fff0 	bl	800c178 <HAL_GetTick>
 800c198:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1a4:	d005      	beq.n	800c1b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800c1a6:	4b09      	ldr	r3, [pc, #36]	; (800c1cc <HAL_Delay+0x40>)
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	4413      	add	r3, r2
 800c1b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800c1b2:	bf00      	nop
 800c1b4:	f7ff ffe0 	bl	800c178 <HAL_GetTick>
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	1ad3      	subs	r3, r2, r3
 800c1be:	68fa      	ldr	r2, [r7, #12]
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	d8f7      	bhi.n	800c1b4 <HAL_Delay+0x28>
  {
  }
}
 800c1c4:	bf00      	nop
 800c1c6:	3710      	adds	r7, #16
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}
 800c1cc:	200000a4 	.word	0x200000a4

0800c1d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b086      	sub	sp, #24
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d101      	bne.n	800c1f2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	e153      	b.n	800c49a <HAL_ADC_Init+0x2ca>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	4a9f      	ldr	r2, [pc, #636]	; (800c474 <HAL_ADC_Init+0x2a4>)
 800c1f8:	4293      	cmp	r3, r2
 800c1fa:	d009      	beq.n	800c210 <HAL_ADC_Init+0x40>
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	4a9d      	ldr	r2, [pc, #628]	; (800c478 <HAL_ADC_Init+0x2a8>)
 800c202:	4293      	cmp	r3, r2
 800c204:	d004      	beq.n	800c210 <HAL_ADC_Init+0x40>
 800c206:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c20a:	489c      	ldr	r0, [pc, #624]	; (800c47c <HAL_ADC_Init+0x2ac>)
 800c20c:	f7ff fb4c 	bl	800b8a8 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	685b      	ldr	r3, [r3, #4]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d009      	beq.n	800c22c <HAL_ADC_Init+0x5c>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c220:	d004      	beq.n	800c22c <HAL_ADC_Init+0x5c>
 800c222:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800c226:	4895      	ldr	r0, [pc, #596]	; (800c47c <HAL_ADC_Init+0x2ac>)
 800c228:	f7ff fb3e 	bl	800b8a8 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	689b      	ldr	r3, [r3, #8]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d009      	beq.n	800c248 <HAL_ADC_Init+0x78>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	689b      	ldr	r3, [r3, #8]
 800c238:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c23c:	d004      	beq.n	800c248 <HAL_ADC_Init+0x78>
 800c23e:	f240 11b5 	movw	r1, #437	; 0x1b5
 800c242:	488e      	ldr	r0, [pc, #568]	; (800c47c <HAL_ADC_Init+0x2ac>)
 800c244:	f7ff fb30 	bl	800b8a8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	7b1b      	ldrb	r3, [r3, #12]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d008      	beq.n	800c262 <HAL_ADC_Init+0x92>
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	7b1b      	ldrb	r3, [r3, #12]
 800c254:	2b01      	cmp	r3, #1
 800c256:	d004      	beq.n	800c262 <HAL_ADC_Init+0x92>
 800c258:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 800c25c:	4887      	ldr	r0, [pc, #540]	; (800c47c <HAL_ADC_Init+0x2ac>)
 800c25e:	f7ff fb23 	bl	800b8a8 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	69db      	ldr	r3, [r3, #28]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d022      	beq.n	800c2b0 <HAL_ADC_Init+0xe0>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	69db      	ldr	r3, [r3, #28]
 800c26e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c272:	d01d      	beq.n	800c2b0 <HAL_ADC_Init+0xe0>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	69db      	ldr	r3, [r3, #28]
 800c278:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c27c:	d018      	beq.n	800c2b0 <HAL_ADC_Init+0xe0>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	69db      	ldr	r3, [r3, #28]
 800c282:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c286:	d013      	beq.n	800c2b0 <HAL_ADC_Init+0xe0>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	69db      	ldr	r3, [r3, #28]
 800c28c:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 800c290:	d00e      	beq.n	800c2b0 <HAL_ADC_Init+0xe0>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	69db      	ldr	r3, [r3, #28]
 800c296:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c29a:	d009      	beq.n	800c2b0 <HAL_ADC_Init+0xe0>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	69db      	ldr	r3, [r3, #28]
 800c2a0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800c2a4:	d004      	beq.n	800c2b0 <HAL_ADC_Init+0xe0>
 800c2a6:	f240 11b7 	movw	r1, #439	; 0x1b7
 800c2aa:	4874      	ldr	r0, [pc, #464]	; (800c47c <HAL_ADC_Init+0x2ac>)
 800c2ac:	f7ff fafc 	bl	800b8a8 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	689b      	ldr	r3, [r3, #8]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d02a      	beq.n	800c30e <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	691b      	ldr	r3, [r3, #16]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d003      	beq.n	800c2c8 <HAL_ADC_Init+0xf8>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	691b      	ldr	r3, [r3, #16]
 800c2c4:	2b10      	cmp	r3, #16
 800c2c6:	d904      	bls.n	800c2d2 <HAL_ADC_Init+0x102>
 800c2c8:	f240 11bb 	movw	r1, #443	; 0x1bb
 800c2cc:	486b      	ldr	r0, [pc, #428]	; (800c47c <HAL_ADC_Init+0x2ac>)
 800c2ce:	f7ff faeb 	bl	800b8a8 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	7d1b      	ldrb	r3, [r3, #20]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d008      	beq.n	800c2ec <HAL_ADC_Init+0x11c>
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	7d1b      	ldrb	r3, [r3, #20]
 800c2de:	2b01      	cmp	r3, #1
 800c2e0:	d004      	beq.n	800c2ec <HAL_ADC_Init+0x11c>
 800c2e2:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800c2e6:	4865      	ldr	r0, [pc, #404]	; (800c47c <HAL_ADC_Init+0x2ac>)
 800c2e8:	f7ff fade 	bl	800b8a8 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	7d1b      	ldrb	r3, [r3, #20]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d00c      	beq.n	800c30e <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	699b      	ldr	r3, [r3, #24]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d003      	beq.n	800c304 <HAL_ADC_Init+0x134>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	699b      	ldr	r3, [r3, #24]
 800c300:	2b08      	cmp	r3, #8
 800c302:	d904      	bls.n	800c30e <HAL_ADC_Init+0x13e>
 800c304:	f240 11bf 	movw	r1, #447	; 0x1bf
 800c308:	485c      	ldr	r0, [pc, #368]	; (800c47c <HAL_ADC_Init+0x2ac>)
 800c30a:	f7ff facd 	bl	800b8a8 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c312:	2b00      	cmp	r3, #0
 800c314:	d109      	bne.n	800c32a <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2200      	movs	r2, #0
 800c31a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2200      	movs	r2, #0
 800c320:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f7ff f8fd 	bl	800b524 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f000 fa7e 	bl	800c82c <ADC_ConversionStop_Disable>
 800c330:	4603      	mov	r3, r0
 800c332:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c338:	f003 0310 	and.w	r3, r3, #16
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	f040 80a3 	bne.w	800c488 <HAL_ADC_Init+0x2b8>
 800c342:	7dfb      	ldrb	r3, [r7, #23]
 800c344:	2b00      	cmp	r3, #0
 800c346:	f040 809f 	bne.w	800c488 <HAL_ADC_Init+0x2b8>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c34e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800c352:	f023 0302 	bic.w	r3, r3, #2
 800c356:	f043 0202 	orr.w	r2, r3, #2
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800c366:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	7b1b      	ldrb	r3, [r3, #12]
 800c36c:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800c36e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800c370:	68ba      	ldr	r2, [r7, #8]
 800c372:	4313      	orrs	r3, r2
 800c374:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	689b      	ldr	r3, [r3, #8]
 800c37a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c37e:	d003      	beq.n	800c388 <HAL_ADC_Init+0x1b8>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	689b      	ldr	r3, [r3, #8]
 800c384:	2b01      	cmp	r3, #1
 800c386:	d102      	bne.n	800c38e <HAL_ADC_Init+0x1be>
 800c388:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c38c:	e000      	b.n	800c390 <HAL_ADC_Init+0x1c0>
 800c38e:	2300      	movs	r3, #0
 800c390:	693a      	ldr	r2, [r7, #16]
 800c392:	4313      	orrs	r3, r2
 800c394:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	7d1b      	ldrb	r3, [r3, #20]
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	d119      	bne.n	800c3d2 <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	7b1b      	ldrb	r3, [r3, #12]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d109      	bne.n	800c3ba <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	699b      	ldr	r3, [r3, #24]
 800c3aa:	3b01      	subs	r3, #1
 800c3ac:	035a      	lsls	r2, r3, #13
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c3b6:	613b      	str	r3, [r7, #16]
 800c3b8:	e00b      	b.n	800c3d2 <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3be:	f043 0220 	orr.w	r2, r3, #32
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ca:	f043 0201 	orr.w	r2, r3, #1
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	685b      	ldr	r3, [r3, #4]
 800c3d8:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	693a      	ldr	r2, [r7, #16]
 800c3e2:	430a      	orrs	r2, r1
 800c3e4:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	689a      	ldr	r2, [r3, #8]
 800c3ec:	4b24      	ldr	r3, [pc, #144]	; (800c480 <HAL_ADC_Init+0x2b0>)
 800c3ee:	4013      	ands	r3, r2
 800c3f0:	687a      	ldr	r2, [r7, #4]
 800c3f2:	6812      	ldr	r2, [r2, #0]
 800c3f4:	68b9      	ldr	r1, [r7, #8]
 800c3f6:	430b      	orrs	r3, r1
 800c3f8:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	689b      	ldr	r3, [r3, #8]
 800c3fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c402:	d003      	beq.n	800c40c <HAL_ADC_Init+0x23c>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	689b      	ldr	r3, [r3, #8]
 800c408:	2b01      	cmp	r3, #1
 800c40a:	d104      	bne.n	800c416 <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	691b      	ldr	r3, [r3, #16]
 800c410:	3b01      	subs	r3, #1
 800c412:	051b      	lsls	r3, r3, #20
 800c414:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c41c:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	68fa      	ldr	r2, [r7, #12]
 800c426:	430a      	orrs	r2, r1
 800c428:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	689a      	ldr	r2, [r3, #8]
 800c430:	4b14      	ldr	r3, [pc, #80]	; (800c484 <HAL_ADC_Init+0x2b4>)
 800c432:	4013      	ands	r3, r2
 800c434:	68ba      	ldr	r2, [r7, #8]
 800c436:	429a      	cmp	r2, r3
 800c438:	d10b      	bne.n	800c452 <HAL_ADC_Init+0x282>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2200      	movs	r2, #0
 800c43e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c444:	f023 0303 	bic.w	r3, r3, #3
 800c448:	f043 0201 	orr.w	r2, r3, #1
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800c450:	e022      	b.n	800c498 <HAL_ADC_Init+0x2c8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c456:	f023 0312 	bic.w	r3, r3, #18
 800c45a:	f043 0210 	orr.w	r2, r3, #16
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c466:	f043 0201 	orr.w	r2, r3, #1
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800c46e:	2301      	movs	r3, #1
 800c470:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800c472:	e011      	b.n	800c498 <HAL_ADC_Init+0x2c8>
 800c474:	40012400 	.word	0x40012400
 800c478:	40012800 	.word	0x40012800
 800c47c:	08012704 	.word	0x08012704
 800c480:	ffe1f7fd 	.word	0xffe1f7fd
 800c484:	ff1f0efe 	.word	0xff1f0efe
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c48c:	f043 0210 	orr.w	r2, r3, #16
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800c494:	2301      	movs	r3, #1
 800c496:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800c498:	7dfb      	ldrb	r3, [r7, #23]
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3718      	adds	r7, #24
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop

0800c4a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	4a88      	ldr	r2, [pc, #544]	; (800c6dc <HAL_ADC_ConfigChannel+0x238>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d009      	beq.n	800c4d4 <HAL_ADC_ConfigChannel+0x30>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	4a86      	ldr	r2, [pc, #536]	; (800c6e0 <HAL_ADC_ConfigChannel+0x23c>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d004      	beq.n	800c4d4 <HAL_ADC_ConfigChannel+0x30>
 800c4ca:	f240 71ce 	movw	r1, #1998	; 0x7ce
 800c4ce:	4885      	ldr	r0, [pc, #532]	; (800c6e4 <HAL_ADC_ConfigChannel+0x240>)
 800c4d0:	f7ff f9ea 	bl	800b8a8 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d048      	beq.n	800c56e <HAL_ADC_ConfigChannel+0xca>
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	2b01      	cmp	r3, #1
 800c4e2:	d044      	beq.n	800c56e <HAL_ADC_ConfigChannel+0xca>
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	2b02      	cmp	r3, #2
 800c4ea:	d040      	beq.n	800c56e <HAL_ADC_ConfigChannel+0xca>
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	2b03      	cmp	r3, #3
 800c4f2:	d03c      	beq.n	800c56e <HAL_ADC_ConfigChannel+0xca>
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	2b04      	cmp	r3, #4
 800c4fa:	d038      	beq.n	800c56e <HAL_ADC_ConfigChannel+0xca>
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	2b05      	cmp	r3, #5
 800c502:	d034      	beq.n	800c56e <HAL_ADC_ConfigChannel+0xca>
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	2b06      	cmp	r3, #6
 800c50a:	d030      	beq.n	800c56e <HAL_ADC_ConfigChannel+0xca>
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	2b07      	cmp	r3, #7
 800c512:	d02c      	beq.n	800c56e <HAL_ADC_ConfigChannel+0xca>
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	2b08      	cmp	r3, #8
 800c51a:	d028      	beq.n	800c56e <HAL_ADC_ConfigChannel+0xca>
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	2b09      	cmp	r3, #9
 800c522:	d024      	beq.n	800c56e <HAL_ADC_ConfigChannel+0xca>
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	2b0a      	cmp	r3, #10
 800c52a:	d020      	beq.n	800c56e <HAL_ADC_ConfigChannel+0xca>
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	2b0b      	cmp	r3, #11
 800c532:	d01c      	beq.n	800c56e <HAL_ADC_ConfigChannel+0xca>
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	2b0c      	cmp	r3, #12
 800c53a:	d018      	beq.n	800c56e <HAL_ADC_ConfigChannel+0xca>
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	2b0d      	cmp	r3, #13
 800c542:	d014      	beq.n	800c56e <HAL_ADC_ConfigChannel+0xca>
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	2b0e      	cmp	r3, #14
 800c54a:	d010      	beq.n	800c56e <HAL_ADC_ConfigChannel+0xca>
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	2b0f      	cmp	r3, #15
 800c552:	d00c      	beq.n	800c56e <HAL_ADC_ConfigChannel+0xca>
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	2b10      	cmp	r3, #16
 800c55a:	d008      	beq.n	800c56e <HAL_ADC_ConfigChannel+0xca>
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	2b11      	cmp	r3, #17
 800c562:	d004      	beq.n	800c56e <HAL_ADC_ConfigChannel+0xca>
 800c564:	f240 71cf 	movw	r1, #1999	; 0x7cf
 800c568:	485e      	ldr	r0, [pc, #376]	; (800c6e4 <HAL_ADC_ConfigChannel+0x240>)
 800c56a:	f7ff f99d 	bl	800b8a8 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	685b      	ldr	r3, [r3, #4]
 800c572:	2b01      	cmp	r3, #1
 800c574:	d040      	beq.n	800c5f8 <HAL_ADC_ConfigChannel+0x154>
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	685b      	ldr	r3, [r3, #4]
 800c57a:	2b02      	cmp	r3, #2
 800c57c:	d03c      	beq.n	800c5f8 <HAL_ADC_ConfigChannel+0x154>
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	685b      	ldr	r3, [r3, #4]
 800c582:	2b03      	cmp	r3, #3
 800c584:	d038      	beq.n	800c5f8 <HAL_ADC_ConfigChannel+0x154>
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	685b      	ldr	r3, [r3, #4]
 800c58a:	2b04      	cmp	r3, #4
 800c58c:	d034      	beq.n	800c5f8 <HAL_ADC_ConfigChannel+0x154>
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	2b05      	cmp	r3, #5
 800c594:	d030      	beq.n	800c5f8 <HAL_ADC_ConfigChannel+0x154>
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	685b      	ldr	r3, [r3, #4]
 800c59a:	2b06      	cmp	r3, #6
 800c59c:	d02c      	beq.n	800c5f8 <HAL_ADC_ConfigChannel+0x154>
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	2b07      	cmp	r3, #7
 800c5a4:	d028      	beq.n	800c5f8 <HAL_ADC_ConfigChannel+0x154>
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	685b      	ldr	r3, [r3, #4]
 800c5aa:	2b08      	cmp	r3, #8
 800c5ac:	d024      	beq.n	800c5f8 <HAL_ADC_ConfigChannel+0x154>
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	685b      	ldr	r3, [r3, #4]
 800c5b2:	2b09      	cmp	r3, #9
 800c5b4:	d020      	beq.n	800c5f8 <HAL_ADC_ConfigChannel+0x154>
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	685b      	ldr	r3, [r3, #4]
 800c5ba:	2b0a      	cmp	r3, #10
 800c5bc:	d01c      	beq.n	800c5f8 <HAL_ADC_ConfigChannel+0x154>
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	685b      	ldr	r3, [r3, #4]
 800c5c2:	2b0b      	cmp	r3, #11
 800c5c4:	d018      	beq.n	800c5f8 <HAL_ADC_ConfigChannel+0x154>
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	685b      	ldr	r3, [r3, #4]
 800c5ca:	2b0c      	cmp	r3, #12
 800c5cc:	d014      	beq.n	800c5f8 <HAL_ADC_ConfigChannel+0x154>
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	2b0d      	cmp	r3, #13
 800c5d4:	d010      	beq.n	800c5f8 <HAL_ADC_ConfigChannel+0x154>
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	685b      	ldr	r3, [r3, #4]
 800c5da:	2b0e      	cmp	r3, #14
 800c5dc:	d00c      	beq.n	800c5f8 <HAL_ADC_ConfigChannel+0x154>
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	685b      	ldr	r3, [r3, #4]
 800c5e2:	2b0f      	cmp	r3, #15
 800c5e4:	d008      	beq.n	800c5f8 <HAL_ADC_ConfigChannel+0x154>
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	2b10      	cmp	r3, #16
 800c5ec:	d004      	beq.n	800c5f8 <HAL_ADC_ConfigChannel+0x154>
 800c5ee:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800c5f2:	483c      	ldr	r0, [pc, #240]	; (800c6e4 <HAL_ADC_ConfigChannel+0x240>)
 800c5f4:	f7ff f958 	bl	800b8a8 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	689b      	ldr	r3, [r3, #8]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d020      	beq.n	800c642 <HAL_ADC_ConfigChannel+0x19e>
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	689b      	ldr	r3, [r3, #8]
 800c604:	2b01      	cmp	r3, #1
 800c606:	d01c      	beq.n	800c642 <HAL_ADC_ConfigChannel+0x19e>
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	689b      	ldr	r3, [r3, #8]
 800c60c:	2b02      	cmp	r3, #2
 800c60e:	d018      	beq.n	800c642 <HAL_ADC_ConfigChannel+0x19e>
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	689b      	ldr	r3, [r3, #8]
 800c614:	2b03      	cmp	r3, #3
 800c616:	d014      	beq.n	800c642 <HAL_ADC_ConfigChannel+0x19e>
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	689b      	ldr	r3, [r3, #8]
 800c61c:	2b04      	cmp	r3, #4
 800c61e:	d010      	beq.n	800c642 <HAL_ADC_ConfigChannel+0x19e>
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	2b05      	cmp	r3, #5
 800c626:	d00c      	beq.n	800c642 <HAL_ADC_ConfigChannel+0x19e>
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	689b      	ldr	r3, [r3, #8]
 800c62c:	2b06      	cmp	r3, #6
 800c62e:	d008      	beq.n	800c642 <HAL_ADC_ConfigChannel+0x19e>
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	689b      	ldr	r3, [r3, #8]
 800c634:	2b07      	cmp	r3, #7
 800c636:	d004      	beq.n	800c642 <HAL_ADC_ConfigChannel+0x19e>
 800c638:	f240 71d1 	movw	r1, #2001	; 0x7d1
 800c63c:	4829      	ldr	r0, [pc, #164]	; (800c6e4 <HAL_ADC_ConfigChannel+0x240>)
 800c63e:	f7ff f933 	bl	800b8a8 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c648:	2b01      	cmp	r3, #1
 800c64a:	d101      	bne.n	800c650 <HAL_ADC_ConfigChannel+0x1ac>
 800c64c:	2302      	movs	r3, #2
 800c64e:	e0e2      	b.n	800c816 <HAL_ADC_ConfigChannel+0x372>
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2201      	movs	r2, #1
 800c654:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	2b06      	cmp	r3, #6
 800c65e:	d81c      	bhi.n	800c69a <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	685a      	ldr	r2, [r3, #4]
 800c66a:	4613      	mov	r3, r2
 800c66c:	009b      	lsls	r3, r3, #2
 800c66e:	4413      	add	r3, r2
 800c670:	3b05      	subs	r3, #5
 800c672:	221f      	movs	r2, #31
 800c674:	fa02 f303 	lsl.w	r3, r2, r3
 800c678:	43db      	mvns	r3, r3
 800c67a:	4019      	ands	r1, r3
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	6818      	ldr	r0, [r3, #0]
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	685a      	ldr	r2, [r3, #4]
 800c684:	4613      	mov	r3, r2
 800c686:	009b      	lsls	r3, r3, #2
 800c688:	4413      	add	r3, r2
 800c68a:	3b05      	subs	r3, #5
 800c68c:	fa00 f203 	lsl.w	r2, r0, r3
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	430a      	orrs	r2, r1
 800c696:	635a      	str	r2, [r3, #52]	; 0x34
 800c698:	e042      	b.n	800c720 <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	685b      	ldr	r3, [r3, #4]
 800c69e:	2b0c      	cmp	r3, #12
 800c6a0:	d822      	bhi.n	800c6e8 <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	685a      	ldr	r2, [r3, #4]
 800c6ac:	4613      	mov	r3, r2
 800c6ae:	009b      	lsls	r3, r3, #2
 800c6b0:	4413      	add	r3, r2
 800c6b2:	3b23      	subs	r3, #35	; 0x23
 800c6b4:	221f      	movs	r2, #31
 800c6b6:	fa02 f303 	lsl.w	r3, r2, r3
 800c6ba:	43db      	mvns	r3, r3
 800c6bc:	4019      	ands	r1, r3
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	6818      	ldr	r0, [r3, #0]
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	685a      	ldr	r2, [r3, #4]
 800c6c6:	4613      	mov	r3, r2
 800c6c8:	009b      	lsls	r3, r3, #2
 800c6ca:	4413      	add	r3, r2
 800c6cc:	3b23      	subs	r3, #35	; 0x23
 800c6ce:	fa00 f203 	lsl.w	r2, r0, r3
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	430a      	orrs	r2, r1
 800c6d8:	631a      	str	r2, [r3, #48]	; 0x30
 800c6da:	e021      	b.n	800c720 <HAL_ADC_ConfigChannel+0x27c>
 800c6dc:	40012400 	.word	0x40012400
 800c6e0:	40012800 	.word	0x40012800
 800c6e4:	08012704 	.word	0x08012704
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	685a      	ldr	r2, [r3, #4]
 800c6f2:	4613      	mov	r3, r2
 800c6f4:	009b      	lsls	r3, r3, #2
 800c6f6:	4413      	add	r3, r2
 800c6f8:	3b41      	subs	r3, #65	; 0x41
 800c6fa:	221f      	movs	r2, #31
 800c6fc:	fa02 f303 	lsl.w	r3, r2, r3
 800c700:	43db      	mvns	r3, r3
 800c702:	4019      	ands	r1, r3
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	6818      	ldr	r0, [r3, #0]
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	685a      	ldr	r2, [r3, #4]
 800c70c:	4613      	mov	r3, r2
 800c70e:	009b      	lsls	r3, r3, #2
 800c710:	4413      	add	r3, r2
 800c712:	3b41      	subs	r3, #65	; 0x41
 800c714:	fa00 f203 	lsl.w	r2, r0, r3
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	430a      	orrs	r2, r1
 800c71e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	2b09      	cmp	r3, #9
 800c726:	d91c      	bls.n	800c762 <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	68d9      	ldr	r1, [r3, #12]
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	681a      	ldr	r2, [r3, #0]
 800c732:	4613      	mov	r3, r2
 800c734:	005b      	lsls	r3, r3, #1
 800c736:	4413      	add	r3, r2
 800c738:	3b1e      	subs	r3, #30
 800c73a:	2207      	movs	r2, #7
 800c73c:	fa02 f303 	lsl.w	r3, r2, r3
 800c740:	43db      	mvns	r3, r3
 800c742:	4019      	ands	r1, r3
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	6898      	ldr	r0, [r3, #8]
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	681a      	ldr	r2, [r3, #0]
 800c74c:	4613      	mov	r3, r2
 800c74e:	005b      	lsls	r3, r3, #1
 800c750:	4413      	add	r3, r2
 800c752:	3b1e      	subs	r3, #30
 800c754:	fa00 f203 	lsl.w	r2, r0, r3
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	430a      	orrs	r2, r1
 800c75e:	60da      	str	r2, [r3, #12]
 800c760:	e019      	b.n	800c796 <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	6919      	ldr	r1, [r3, #16]
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	681a      	ldr	r2, [r3, #0]
 800c76c:	4613      	mov	r3, r2
 800c76e:	005b      	lsls	r3, r3, #1
 800c770:	4413      	add	r3, r2
 800c772:	2207      	movs	r2, #7
 800c774:	fa02 f303 	lsl.w	r3, r2, r3
 800c778:	43db      	mvns	r3, r3
 800c77a:	4019      	ands	r1, r3
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	6898      	ldr	r0, [r3, #8]
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	681a      	ldr	r2, [r3, #0]
 800c784:	4613      	mov	r3, r2
 800c786:	005b      	lsls	r3, r3, #1
 800c788:	4413      	add	r3, r2
 800c78a:	fa00 f203 	lsl.w	r2, r0, r3
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	430a      	orrs	r2, r1
 800c794:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	2b10      	cmp	r3, #16
 800c79c:	d003      	beq.n	800c7a6 <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800c7a2:	2b11      	cmp	r3, #17
 800c7a4:	d132      	bne.n	800c80c <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	4a1d      	ldr	r2, [pc, #116]	; (800c820 <HAL_ADC_ConfigChannel+0x37c>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d125      	bne.n	800c7fc <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	689b      	ldr	r3, [r3, #8]
 800c7b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d126      	bne.n	800c80c <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	689a      	ldr	r2, [r3, #8]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800c7cc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	2b10      	cmp	r3, #16
 800c7d4:	d11a      	bne.n	800c80c <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800c7d6:	4b13      	ldr	r3, [pc, #76]	; (800c824 <HAL_ADC_ConfigChannel+0x380>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	4a13      	ldr	r2, [pc, #76]	; (800c828 <HAL_ADC_ConfigChannel+0x384>)
 800c7dc:	fba2 2303 	umull	r2, r3, r2, r3
 800c7e0:	0c9a      	lsrs	r2, r3, #18
 800c7e2:	4613      	mov	r3, r2
 800c7e4:	009b      	lsls	r3, r3, #2
 800c7e6:	4413      	add	r3, r2
 800c7e8:	005b      	lsls	r3, r3, #1
 800c7ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800c7ec:	e002      	b.n	800c7f4 <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	3b01      	subs	r3, #1
 800c7f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d1f9      	bne.n	800c7ee <HAL_ADC_ConfigChannel+0x34a>
 800c7fa:	e007      	b.n	800c80c <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c800:	f043 0220 	orr.w	r2, r3, #32
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800c808:	2301      	movs	r3, #1
 800c80a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2200      	movs	r2, #0
 800c810:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800c814:	7bfb      	ldrb	r3, [r7, #15]
}
 800c816:	4618      	mov	r0, r3
 800c818:	3710      	adds	r7, #16
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}
 800c81e:	bf00      	nop
 800c820:	40012400 	.word	0x40012400
 800c824:	2000009c 	.word	0x2000009c
 800c828:	431bde83 	.word	0x431bde83

0800c82c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b084      	sub	sp, #16
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c834:	2300      	movs	r3, #0
 800c836:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	689b      	ldr	r3, [r3, #8]
 800c83e:	f003 0301 	and.w	r3, r3, #1
 800c842:	2b01      	cmp	r3, #1
 800c844:	d127      	bne.n	800c896 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	689a      	ldr	r2, [r3, #8]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f022 0201 	bic.w	r2, r2, #1
 800c854:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800c856:	f7ff fc8f 	bl	800c178 <HAL_GetTick>
 800c85a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800c85c:	e014      	b.n	800c888 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800c85e:	f7ff fc8b 	bl	800c178 <HAL_GetTick>
 800c862:	4602      	mov	r2, r0
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	1ad3      	subs	r3, r2, r3
 800c868:	2b02      	cmp	r3, #2
 800c86a:	d90d      	bls.n	800c888 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c870:	f043 0210 	orr.w	r2, r3, #16
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c87c:	f043 0201 	orr.w	r2, r3, #1
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800c884:	2301      	movs	r3, #1
 800c886:	e007      	b.n	800c898 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	689b      	ldr	r3, [r3, #8]
 800c88e:	f003 0301 	and.w	r3, r3, #1
 800c892:	2b01      	cmp	r3, #1
 800c894:	d0e3      	beq.n	800c85e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800c896:	2300      	movs	r3, #0
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3710      	adds	r7, #16
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}

0800c8a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b085      	sub	sp, #20
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f003 0307 	and.w	r3, r3, #7
 800c8ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c8b0:	4b0c      	ldr	r3, [pc, #48]	; (800c8e4 <__NVIC_SetPriorityGrouping+0x44>)
 800c8b2:	68db      	ldr	r3, [r3, #12]
 800c8b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c8b6:	68ba      	ldr	r2, [r7, #8]
 800c8b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c8bc:	4013      	ands	r3, r2
 800c8be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c8c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c8cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c8d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c8d2:	4a04      	ldr	r2, [pc, #16]	; (800c8e4 <__NVIC_SetPriorityGrouping+0x44>)
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	60d3      	str	r3, [r2, #12]
}
 800c8d8:	bf00      	nop
 800c8da:	3714      	adds	r7, #20
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bc80      	pop	{r7}
 800c8e0:	4770      	bx	lr
 800c8e2:	bf00      	nop
 800c8e4:	e000ed00 	.word	0xe000ed00

0800c8e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c8ec:	4b04      	ldr	r3, [pc, #16]	; (800c900 <__NVIC_GetPriorityGrouping+0x18>)
 800c8ee:	68db      	ldr	r3, [r3, #12]
 800c8f0:	0a1b      	lsrs	r3, r3, #8
 800c8f2:	f003 0307 	and.w	r3, r3, #7
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bc80      	pop	{r7}
 800c8fc:	4770      	bx	lr
 800c8fe:	bf00      	nop
 800c900:	e000ed00 	.word	0xe000ed00

0800c904 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c904:	b480      	push	{r7}
 800c906:	b083      	sub	sp, #12
 800c908:	af00      	add	r7, sp, #0
 800c90a:	4603      	mov	r3, r0
 800c90c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c90e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c912:	2b00      	cmp	r3, #0
 800c914:	db0b      	blt.n	800c92e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c916:	79fb      	ldrb	r3, [r7, #7]
 800c918:	f003 021f 	and.w	r2, r3, #31
 800c91c:	4906      	ldr	r1, [pc, #24]	; (800c938 <__NVIC_EnableIRQ+0x34>)
 800c91e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c922:	095b      	lsrs	r3, r3, #5
 800c924:	2001      	movs	r0, #1
 800c926:	fa00 f202 	lsl.w	r2, r0, r2
 800c92a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800c92e:	bf00      	nop
 800c930:	370c      	adds	r7, #12
 800c932:	46bd      	mov	sp, r7
 800c934:	bc80      	pop	{r7}
 800c936:	4770      	bx	lr
 800c938:	e000e100 	.word	0xe000e100

0800c93c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c93c:	b480      	push	{r7}
 800c93e:	b083      	sub	sp, #12
 800c940:	af00      	add	r7, sp, #0
 800c942:	4603      	mov	r3, r0
 800c944:	6039      	str	r1, [r7, #0]
 800c946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	db0a      	blt.n	800c966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	b2da      	uxtb	r2, r3
 800c954:	490c      	ldr	r1, [pc, #48]	; (800c988 <__NVIC_SetPriority+0x4c>)
 800c956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c95a:	0112      	lsls	r2, r2, #4
 800c95c:	b2d2      	uxtb	r2, r2
 800c95e:	440b      	add	r3, r1
 800c960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c964:	e00a      	b.n	800c97c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	b2da      	uxtb	r2, r3
 800c96a:	4908      	ldr	r1, [pc, #32]	; (800c98c <__NVIC_SetPriority+0x50>)
 800c96c:	79fb      	ldrb	r3, [r7, #7]
 800c96e:	f003 030f 	and.w	r3, r3, #15
 800c972:	3b04      	subs	r3, #4
 800c974:	0112      	lsls	r2, r2, #4
 800c976:	b2d2      	uxtb	r2, r2
 800c978:	440b      	add	r3, r1
 800c97a:	761a      	strb	r2, [r3, #24]
}
 800c97c:	bf00      	nop
 800c97e:	370c      	adds	r7, #12
 800c980:	46bd      	mov	sp, r7
 800c982:	bc80      	pop	{r7}
 800c984:	4770      	bx	lr
 800c986:	bf00      	nop
 800c988:	e000e100 	.word	0xe000e100
 800c98c:	e000ed00 	.word	0xe000ed00

0800c990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c990:	b480      	push	{r7}
 800c992:	b089      	sub	sp, #36	; 0x24
 800c994:	af00      	add	r7, sp, #0
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	60b9      	str	r1, [r7, #8]
 800c99a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	f003 0307 	and.w	r3, r3, #7
 800c9a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c9a4:	69fb      	ldr	r3, [r7, #28]
 800c9a6:	f1c3 0307 	rsb	r3, r3, #7
 800c9aa:	2b04      	cmp	r3, #4
 800c9ac:	bf28      	it	cs
 800c9ae:	2304      	movcs	r3, #4
 800c9b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c9b2:	69fb      	ldr	r3, [r7, #28]
 800c9b4:	3304      	adds	r3, #4
 800c9b6:	2b06      	cmp	r3, #6
 800c9b8:	d902      	bls.n	800c9c0 <NVIC_EncodePriority+0x30>
 800c9ba:	69fb      	ldr	r3, [r7, #28]
 800c9bc:	3b03      	subs	r3, #3
 800c9be:	e000      	b.n	800c9c2 <NVIC_EncodePriority+0x32>
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c9c4:	f04f 32ff 	mov.w	r2, #4294967295
 800c9c8:	69bb      	ldr	r3, [r7, #24]
 800c9ca:	fa02 f303 	lsl.w	r3, r2, r3
 800c9ce:	43da      	mvns	r2, r3
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	401a      	ands	r2, r3
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c9d8:	f04f 31ff 	mov.w	r1, #4294967295
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	fa01 f303 	lsl.w	r3, r1, r3
 800c9e2:	43d9      	mvns	r1, r3
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c9e8:	4313      	orrs	r3, r2
         );
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3724      	adds	r7, #36	; 0x24
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bc80      	pop	{r7}
 800c9f2:	4770      	bx	lr

0800c9f4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800c9f8:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800c9fc:	4b05      	ldr	r3, [pc, #20]	; (800ca14 <__NVIC_SystemReset+0x20>)
 800c9fe:	68db      	ldr	r3, [r3, #12]
 800ca00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800ca04:	4903      	ldr	r1, [pc, #12]	; (800ca14 <__NVIC_SystemReset+0x20>)
 800ca06:	4b04      	ldr	r3, [pc, #16]	; (800ca18 <__NVIC_SystemReset+0x24>)
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	60cb      	str	r3, [r1, #12]
 800ca0c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800ca10:	bf00      	nop
 800ca12:	e7fd      	b.n	800ca10 <__NVIC_SystemReset+0x1c>
 800ca14:	e000ed00 	.word	0xe000ed00
 800ca18:	05fa0004 	.word	0x05fa0004

0800ca1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b082      	sub	sp, #8
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	3b01      	subs	r3, #1
 800ca28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ca2c:	d301      	bcc.n	800ca32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ca2e:	2301      	movs	r3, #1
 800ca30:	e00f      	b.n	800ca52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ca32:	4a0a      	ldr	r2, [pc, #40]	; (800ca5c <SysTick_Config+0x40>)
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	3b01      	subs	r3, #1
 800ca38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ca3a:	210f      	movs	r1, #15
 800ca3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca40:	f7ff ff7c 	bl	800c93c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ca44:	4b05      	ldr	r3, [pc, #20]	; (800ca5c <SysTick_Config+0x40>)
 800ca46:	2200      	movs	r2, #0
 800ca48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ca4a:	4b04      	ldr	r3, [pc, #16]	; (800ca5c <SysTick_Config+0x40>)
 800ca4c:	2207      	movs	r2, #7
 800ca4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ca50:	2300      	movs	r3, #0
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	3708      	adds	r7, #8
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}
 800ca5a:	bf00      	nop
 800ca5c:	e000e010 	.word	0xe000e010

0800ca60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b082      	sub	sp, #8
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2b07      	cmp	r3, #7
 800ca6c:	d00f      	beq.n	800ca8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2b06      	cmp	r3, #6
 800ca72:	d00c      	beq.n	800ca8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2b05      	cmp	r3, #5
 800ca78:	d009      	beq.n	800ca8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2b04      	cmp	r3, #4
 800ca7e:	d006      	beq.n	800ca8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2b03      	cmp	r3, #3
 800ca84:	d003      	beq.n	800ca8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800ca86:	2192      	movs	r1, #146	; 0x92
 800ca88:	4804      	ldr	r0, [pc, #16]	; (800ca9c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800ca8a:	f7fe ff0d 	bl	800b8a8 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f7ff ff06 	bl	800c8a0 <__NVIC_SetPriorityGrouping>
}
 800ca94:	bf00      	nop
 800ca96:	3708      	adds	r7, #8
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}
 800ca9c:	0801273c 	.word	0x0801273c

0800caa0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b086      	sub	sp, #24
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	4603      	mov	r3, r0
 800caa8:	60b9      	str	r1, [r7, #8]
 800caaa:	607a      	str	r2, [r7, #4]
 800caac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800caae:	2300      	movs	r3, #0
 800cab0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2b0f      	cmp	r3, #15
 800cab6:	d903      	bls.n	800cac0 <HAL_NVIC_SetPriority+0x20>
 800cab8:	21aa      	movs	r1, #170	; 0xaa
 800caba:	480e      	ldr	r0, [pc, #56]	; (800caf4 <HAL_NVIC_SetPriority+0x54>)
 800cabc:	f7fe fef4 	bl	800b8a8 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	2b0f      	cmp	r3, #15
 800cac4:	d903      	bls.n	800cace <HAL_NVIC_SetPriority+0x2e>
 800cac6:	21ab      	movs	r1, #171	; 0xab
 800cac8:	480a      	ldr	r0, [pc, #40]	; (800caf4 <HAL_NVIC_SetPriority+0x54>)
 800caca:	f7fe feed 	bl	800b8a8 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800cace:	f7ff ff0b 	bl	800c8e8 <__NVIC_GetPriorityGrouping>
 800cad2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800cad4:	687a      	ldr	r2, [r7, #4]
 800cad6:	68b9      	ldr	r1, [r7, #8]
 800cad8:	6978      	ldr	r0, [r7, #20]
 800cada:	f7ff ff59 	bl	800c990 <NVIC_EncodePriority>
 800cade:	4602      	mov	r2, r0
 800cae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cae4:	4611      	mov	r1, r2
 800cae6:	4618      	mov	r0, r3
 800cae8:	f7ff ff28 	bl	800c93c <__NVIC_SetPriority>
}
 800caec:	bf00      	nop
 800caee:	3718      	adds	r7, #24
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}
 800caf4:	0801273c 	.word	0x0801273c

0800caf8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b082      	sub	sp, #8
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	4603      	mov	r3, r0
 800cb00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800cb02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	da03      	bge.n	800cb12 <HAL_NVIC_EnableIRQ+0x1a>
 800cb0a:	21be      	movs	r1, #190	; 0xbe
 800cb0c:	4805      	ldr	r0, [pc, #20]	; (800cb24 <HAL_NVIC_EnableIRQ+0x2c>)
 800cb0e:	f7fe fecb 	bl	800b8a8 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800cb12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7ff fef4 	bl	800c904 <__NVIC_EnableIRQ>
}
 800cb1c:	bf00      	nop
 800cb1e:	3708      	adds	r7, #8
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}
 800cb24:	0801273c 	.word	0x0801273c

0800cb28 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800cb2c:	f7ff ff62 	bl	800c9f4 <__NVIC_SystemReset>

0800cb30 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b082      	sub	sp, #8
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f7ff ff6f 	bl	800ca1c <SysTick_Config>
 800cb3e:	4603      	mov	r3, r0
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3708      	adds	r7, #8
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}

0800cb48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b084      	sub	sp, #16
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cb50:	2300      	movs	r3, #0
 800cb52:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800cb5a:	2b02      	cmp	r3, #2
 800cb5c:	d005      	beq.n	800cb6a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2204      	movs	r2, #4
 800cb62:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800cb64:	2301      	movs	r3, #1
 800cb66:	73fb      	strb	r3, [r7, #15]
 800cb68:	e051      	b.n	800cc0e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	681a      	ldr	r2, [r3, #0]
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f022 020e 	bic.w	r2, r2, #14
 800cb78:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	681a      	ldr	r2, [r3, #0]
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f022 0201 	bic.w	r2, r2, #1
 800cb88:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	4a22      	ldr	r2, [pc, #136]	; (800cc18 <HAL_DMA_Abort_IT+0xd0>)
 800cb90:	4293      	cmp	r3, r2
 800cb92:	d029      	beq.n	800cbe8 <HAL_DMA_Abort_IT+0xa0>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	4a20      	ldr	r2, [pc, #128]	; (800cc1c <HAL_DMA_Abort_IT+0xd4>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d022      	beq.n	800cbe4 <HAL_DMA_Abort_IT+0x9c>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	4a1f      	ldr	r2, [pc, #124]	; (800cc20 <HAL_DMA_Abort_IT+0xd8>)
 800cba4:	4293      	cmp	r3, r2
 800cba6:	d01a      	beq.n	800cbde <HAL_DMA_Abort_IT+0x96>
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	4a1d      	ldr	r2, [pc, #116]	; (800cc24 <HAL_DMA_Abort_IT+0xdc>)
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d012      	beq.n	800cbd8 <HAL_DMA_Abort_IT+0x90>
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	4a1c      	ldr	r2, [pc, #112]	; (800cc28 <HAL_DMA_Abort_IT+0xe0>)
 800cbb8:	4293      	cmp	r3, r2
 800cbba:	d00a      	beq.n	800cbd2 <HAL_DMA_Abort_IT+0x8a>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4a1a      	ldr	r2, [pc, #104]	; (800cc2c <HAL_DMA_Abort_IT+0xe4>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d102      	bne.n	800cbcc <HAL_DMA_Abort_IT+0x84>
 800cbc6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cbca:	e00e      	b.n	800cbea <HAL_DMA_Abort_IT+0xa2>
 800cbcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cbd0:	e00b      	b.n	800cbea <HAL_DMA_Abort_IT+0xa2>
 800cbd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800cbd6:	e008      	b.n	800cbea <HAL_DMA_Abort_IT+0xa2>
 800cbd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cbdc:	e005      	b.n	800cbea <HAL_DMA_Abort_IT+0xa2>
 800cbde:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cbe2:	e002      	b.n	800cbea <HAL_DMA_Abort_IT+0xa2>
 800cbe4:	2310      	movs	r3, #16
 800cbe6:	e000      	b.n	800cbea <HAL_DMA_Abort_IT+0xa2>
 800cbe8:	2301      	movs	r3, #1
 800cbea:	4a11      	ldr	r2, [pc, #68]	; (800cc30 <HAL_DMA_Abort_IT+0xe8>)
 800cbec:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2201      	movs	r2, #1
 800cbf2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d003      	beq.n	800cc0e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	4798      	blx	r3
    } 
  }
  return status;
 800cc0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	3710      	adds	r7, #16
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}
 800cc18:	40020008 	.word	0x40020008
 800cc1c:	4002001c 	.word	0x4002001c
 800cc20:	40020030 	.word	0x40020030
 800cc24:	40020044 	.word	0x40020044
 800cc28:	40020058 	.word	0x40020058
 800cc2c:	4002006c 	.word	0x4002006c
 800cc30:	40020000 	.word	0x40020000

0800cc34 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800cc34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc36:	b087      	sub	sp, #28
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	60f8      	str	r0, [r7, #12]
 800cc3c:	60b9      	str	r1, [r7, #8]
 800cc3e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cc42:	2301      	movs	r3, #1
 800cc44:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800cc46:	2300      	movs	r3, #0
 800cc48:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800cc4e:	4b49      	ldr	r3, [pc, #292]	; (800cd74 <HAL_FLASH_Program+0x140>)
 800cc50:	7e1b      	ldrb	r3, [r3, #24]
 800cc52:	2b01      	cmp	r3, #1
 800cc54:	d101      	bne.n	800cc5a <HAL_FLASH_Program+0x26>
 800cc56:	2302      	movs	r3, #2
 800cc58:	e088      	b.n	800cd6c <HAL_FLASH_Program+0x138>
 800cc5a:	4b46      	ldr	r3, [pc, #280]	; (800cd74 <HAL_FLASH_Program+0x140>)
 800cc5c:	2201      	movs	r2, #1
 800cc5e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	2b01      	cmp	r3, #1
 800cc64:	d009      	beq.n	800cc7a <HAL_FLASH_Program+0x46>
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	2b02      	cmp	r3, #2
 800cc6a:	d006      	beq.n	800cc7a <HAL_FLASH_Program+0x46>
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	2b03      	cmp	r3, #3
 800cc70:	d003      	beq.n	800cc7a <HAL_FLASH_Program+0x46>
 800cc72:	21b2      	movs	r1, #178	; 0xb2
 800cc74:	4840      	ldr	r0, [pc, #256]	; (800cd78 <HAL_FLASH_Program+0x144>)
 800cc76:	f7fe fe17 	bl	800b8a8 <assert_failed>
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc80:	d31e      	bcc.n	800ccc0 <HAL_FLASH_Program+0x8c>
 800cc82:	4b3e      	ldr	r3, [pc, #248]	; (800cd7c <HAL_FLASH_Program+0x148>)
 800cc84:	881b      	ldrh	r3, [r3, #0]
 800cc86:	2b80      	cmp	r3, #128	; 0x80
 800cc88:	d104      	bne.n	800cc94 <HAL_FLASH_Program+0x60>
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	4a3c      	ldr	r2, [pc, #240]	; (800cd80 <HAL_FLASH_Program+0x14c>)
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	d816      	bhi.n	800ccc0 <HAL_FLASH_Program+0x8c>
 800cc92:	e019      	b.n	800ccc8 <HAL_FLASH_Program+0x94>
 800cc94:	4b39      	ldr	r3, [pc, #228]	; (800cd7c <HAL_FLASH_Program+0x148>)
 800cc96:	881b      	ldrh	r3, [r3, #0]
 800cc98:	2b40      	cmp	r3, #64	; 0x40
 800cc9a:	d104      	bne.n	800cca6 <HAL_FLASH_Program+0x72>
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	4a39      	ldr	r2, [pc, #228]	; (800cd84 <HAL_FLASH_Program+0x150>)
 800cca0:	4293      	cmp	r3, r2
 800cca2:	d80d      	bhi.n	800ccc0 <HAL_FLASH_Program+0x8c>
 800cca4:	e010      	b.n	800ccc8 <HAL_FLASH_Program+0x94>
 800cca6:	4b35      	ldr	r3, [pc, #212]	; (800cd7c <HAL_FLASH_Program+0x148>)
 800cca8:	881b      	ldrh	r3, [r3, #0]
 800ccaa:	2b20      	cmp	r3, #32
 800ccac:	d104      	bne.n	800ccb8 <HAL_FLASH_Program+0x84>
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	4a35      	ldr	r2, [pc, #212]	; (800cd88 <HAL_FLASH_Program+0x154>)
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d804      	bhi.n	800ccc0 <HAL_FLASH_Program+0x8c>
 800ccb6:	e007      	b.n	800ccc8 <HAL_FLASH_Program+0x94>
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	4a34      	ldr	r2, [pc, #208]	; (800cd8c <HAL_FLASH_Program+0x158>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d903      	bls.n	800ccc8 <HAL_FLASH_Program+0x94>
 800ccc0:	21b3      	movs	r1, #179	; 0xb3
 800ccc2:	482d      	ldr	r0, [pc, #180]	; (800cd78 <HAL_FLASH_Program+0x144>)
 800ccc4:	f7fe fdf0 	bl	800b8a8 <assert_failed>
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ccc8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800cccc:	f000 f8b4 	bl	800ce38 <FLASH_WaitForLastOperation>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800ccd4:	7dfb      	ldrb	r3, [r7, #23]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d144      	bne.n	800cd64 <HAL_FLASH_Program+0x130>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	2b01      	cmp	r3, #1
 800ccde:	d102      	bne.n	800cce6 <HAL_FLASH_Program+0xb2>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800cce0:	2301      	movs	r3, #1
 800cce2:	757b      	strb	r3, [r7, #21]
 800cce4:	e007      	b.n	800ccf6 <HAL_FLASH_Program+0xc2>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	2b02      	cmp	r3, #2
 800ccea:	d102      	bne.n	800ccf2 <HAL_FLASH_Program+0xbe>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800ccec:	2302      	movs	r3, #2
 800ccee:	757b      	strb	r3, [r7, #21]
 800ccf0:	e001      	b.n	800ccf6 <HAL_FLASH_Program+0xc2>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800ccf2:	2304      	movs	r3, #4
 800ccf4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	75bb      	strb	r3, [r7, #22]
 800ccfa:	e02d      	b.n	800cd58 <HAL_FLASH_Program+0x124>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800ccfc:	7dbb      	ldrb	r3, [r7, #22]
 800ccfe:	005a      	lsls	r2, r3, #1
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	eb02 0c03 	add.w	ip, r2, r3
 800cd06:	7dbb      	ldrb	r3, [r7, #22]
 800cd08:	0119      	lsls	r1, r3, #4
 800cd0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd0e:	f1c1 0620 	rsb	r6, r1, #32
 800cd12:	f1a1 0020 	sub.w	r0, r1, #32
 800cd16:	fa22 f401 	lsr.w	r4, r2, r1
 800cd1a:	fa03 f606 	lsl.w	r6, r3, r6
 800cd1e:	4334      	orrs	r4, r6
 800cd20:	fa23 f000 	lsr.w	r0, r3, r0
 800cd24:	4304      	orrs	r4, r0
 800cd26:	fa23 f501 	lsr.w	r5, r3, r1
 800cd2a:	b2a3      	uxth	r3, r4
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	4660      	mov	r0, ip
 800cd30:	f000 f866 	bl	800ce00 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800cd34:	f24c 3050 	movw	r0, #50000	; 0xc350
 800cd38:	f000 f87e 	bl	800ce38 <FLASH_WaitForLastOperation>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800cd40:	4b13      	ldr	r3, [pc, #76]	; (800cd90 <HAL_FLASH_Program+0x15c>)
 800cd42:	691b      	ldr	r3, [r3, #16]
 800cd44:	4a12      	ldr	r2, [pc, #72]	; (800cd90 <HAL_FLASH_Program+0x15c>)
 800cd46:	f023 0301 	bic.w	r3, r3, #1
 800cd4a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800cd4c:	7dfb      	ldrb	r3, [r7, #23]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d107      	bne.n	800cd62 <HAL_FLASH_Program+0x12e>
    for (index = 0U; index < nbiterations; index++)
 800cd52:	7dbb      	ldrb	r3, [r7, #22]
 800cd54:	3301      	adds	r3, #1
 800cd56:	75bb      	strb	r3, [r7, #22]
 800cd58:	7dba      	ldrb	r2, [r7, #22]
 800cd5a:	7d7b      	ldrb	r3, [r7, #21]
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	d3cd      	bcc.n	800ccfc <HAL_FLASH_Program+0xc8>
 800cd60:	e000      	b.n	800cd64 <HAL_FLASH_Program+0x130>
      {
        break;
 800cd62:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800cd64:	4b03      	ldr	r3, [pc, #12]	; (800cd74 <HAL_FLASH_Program+0x140>)
 800cd66:	2200      	movs	r2, #0
 800cd68:	761a      	strb	r2, [r3, #24]

  return status;
 800cd6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	371c      	adds	r7, #28
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd74:	20000828 	.word	0x20000828
 800cd78:	08012778 	.word	0x08012778
 800cd7c:	1ffff7e0 	.word	0x1ffff7e0
 800cd80:	0801ffff 	.word	0x0801ffff
 800cd84:	0800ffff 	.word	0x0800ffff
 800cd88:	08007fff 	.word	0x08007fff
 800cd8c:	08003fff 	.word	0x08003fff
 800cd90:	40022000 	.word	0x40022000

0800cd94 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800cd94:	b480      	push	{r7}
 800cd96:	b083      	sub	sp, #12
 800cd98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800cd9e:	4b0d      	ldr	r3, [pc, #52]	; (800cdd4 <HAL_FLASH_Unlock+0x40>)
 800cda0:	691b      	ldr	r3, [r3, #16]
 800cda2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d00d      	beq.n	800cdc6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800cdaa:	4b0a      	ldr	r3, [pc, #40]	; (800cdd4 <HAL_FLASH_Unlock+0x40>)
 800cdac:	4a0a      	ldr	r2, [pc, #40]	; (800cdd8 <HAL_FLASH_Unlock+0x44>)
 800cdae:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800cdb0:	4b08      	ldr	r3, [pc, #32]	; (800cdd4 <HAL_FLASH_Unlock+0x40>)
 800cdb2:	4a0a      	ldr	r2, [pc, #40]	; (800cddc <HAL_FLASH_Unlock+0x48>)
 800cdb4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800cdb6:	4b07      	ldr	r3, [pc, #28]	; (800cdd4 <HAL_FLASH_Unlock+0x40>)
 800cdb8:	691b      	ldr	r3, [r3, #16]
 800cdba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d001      	beq.n	800cdc6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800cdc6:	79fb      	ldrb	r3, [r7, #7]
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	370c      	adds	r7, #12
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bc80      	pop	{r7}
 800cdd0:	4770      	bx	lr
 800cdd2:	bf00      	nop
 800cdd4:	40022000 	.word	0x40022000
 800cdd8:	45670123 	.word	0x45670123
 800cddc:	cdef89ab 	.word	0xcdef89ab

0800cde0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800cde0:	b480      	push	{r7}
 800cde2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800cde4:	4b05      	ldr	r3, [pc, #20]	; (800cdfc <HAL_FLASH_Lock+0x1c>)
 800cde6:	691b      	ldr	r3, [r3, #16]
 800cde8:	4a04      	ldr	r2, [pc, #16]	; (800cdfc <HAL_FLASH_Lock+0x1c>)
 800cdea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdee:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800cdf0:	2300      	movs	r3, #0
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bc80      	pop	{r7}
 800cdf8:	4770      	bx	lr
 800cdfa:	bf00      	nop
 800cdfc:	40022000 	.word	0x40022000

0800ce00 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800ce00:	b480      	push	{r7}
 800ce02:	b083      	sub	sp, #12
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	460b      	mov	r3, r1
 800ce0a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ce0c:	4b08      	ldr	r3, [pc, #32]	; (800ce30 <FLASH_Program_HalfWord+0x30>)
 800ce0e:	2200      	movs	r2, #0
 800ce10:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800ce12:	4b08      	ldr	r3, [pc, #32]	; (800ce34 <FLASH_Program_HalfWord+0x34>)
 800ce14:	691b      	ldr	r3, [r3, #16]
 800ce16:	4a07      	ldr	r2, [pc, #28]	; (800ce34 <FLASH_Program_HalfWord+0x34>)
 800ce18:	f043 0301 	orr.w	r3, r3, #1
 800ce1c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	887a      	ldrh	r2, [r7, #2]
 800ce22:	801a      	strh	r2, [r3, #0]
}
 800ce24:	bf00      	nop
 800ce26:	370c      	adds	r7, #12
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bc80      	pop	{r7}
 800ce2c:	4770      	bx	lr
 800ce2e:	bf00      	nop
 800ce30:	20000828 	.word	0x20000828
 800ce34:	40022000 	.word	0x40022000

0800ce38 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b084      	sub	sp, #16
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800ce40:	f7ff f99a 	bl	800c178 <HAL_GetTick>
 800ce44:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800ce46:	e010      	b.n	800ce6a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce4e:	d00c      	beq.n	800ce6a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d007      	beq.n	800ce66 <FLASH_WaitForLastOperation+0x2e>
 800ce56:	f7ff f98f 	bl	800c178 <HAL_GetTick>
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	1ad3      	subs	r3, r2, r3
 800ce60:	687a      	ldr	r2, [r7, #4]
 800ce62:	429a      	cmp	r2, r3
 800ce64:	d201      	bcs.n	800ce6a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800ce66:	2303      	movs	r3, #3
 800ce68:	e025      	b.n	800ceb6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800ce6a:	4b15      	ldr	r3, [pc, #84]	; (800cec0 <FLASH_WaitForLastOperation+0x88>)
 800ce6c:	68db      	ldr	r3, [r3, #12]
 800ce6e:	f003 0301 	and.w	r3, r3, #1
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d1e8      	bne.n	800ce48 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800ce76:	4b12      	ldr	r3, [pc, #72]	; (800cec0 <FLASH_WaitForLastOperation+0x88>)
 800ce78:	68db      	ldr	r3, [r3, #12]
 800ce7a:	f003 0320 	and.w	r3, r3, #32
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d002      	beq.n	800ce88 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ce82:	4b0f      	ldr	r3, [pc, #60]	; (800cec0 <FLASH_WaitForLastOperation+0x88>)
 800ce84:	2220      	movs	r2, #32
 800ce86:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800ce88:	4b0d      	ldr	r3, [pc, #52]	; (800cec0 <FLASH_WaitForLastOperation+0x88>)
 800ce8a:	68db      	ldr	r3, [r3, #12]
 800ce8c:	f003 0310 	and.w	r3, r3, #16
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d10b      	bne.n	800ceac <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800ce94:	4b0a      	ldr	r3, [pc, #40]	; (800cec0 <FLASH_WaitForLastOperation+0x88>)
 800ce96:	69db      	ldr	r3, [r3, #28]
 800ce98:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d105      	bne.n	800ceac <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800cea0:	4b07      	ldr	r3, [pc, #28]	; (800cec0 <FLASH_WaitForLastOperation+0x88>)
 800cea2:	68db      	ldr	r3, [r3, #12]
 800cea4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d003      	beq.n	800ceb4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800ceac:	f000 f80a 	bl	800cec4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	e000      	b.n	800ceb6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800ceb4:	2300      	movs	r3, #0
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3710      	adds	r7, #16
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
 800cebe:	bf00      	nop
 800cec0:	40022000 	.word	0x40022000

0800cec4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800cec4:	b480      	push	{r7}
 800cec6:	b083      	sub	sp, #12
 800cec8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800ceca:	2300      	movs	r3, #0
 800cecc:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800cece:	4b23      	ldr	r3, [pc, #140]	; (800cf5c <FLASH_SetErrorCode+0x98>)
 800ced0:	68db      	ldr	r3, [r3, #12]
 800ced2:	f003 0310 	and.w	r3, r3, #16
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d009      	beq.n	800ceee <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800ceda:	4b21      	ldr	r3, [pc, #132]	; (800cf60 <FLASH_SetErrorCode+0x9c>)
 800cedc:	69db      	ldr	r3, [r3, #28]
 800cede:	f043 0302 	orr.w	r3, r3, #2
 800cee2:	4a1f      	ldr	r2, [pc, #124]	; (800cf60 <FLASH_SetErrorCode+0x9c>)
 800cee4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f043 0310 	orr.w	r3, r3, #16
 800ceec:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800ceee:	4b1b      	ldr	r3, [pc, #108]	; (800cf5c <FLASH_SetErrorCode+0x98>)
 800cef0:	68db      	ldr	r3, [r3, #12]
 800cef2:	f003 0304 	and.w	r3, r3, #4
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d009      	beq.n	800cf0e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800cefa:	4b19      	ldr	r3, [pc, #100]	; (800cf60 <FLASH_SetErrorCode+0x9c>)
 800cefc:	69db      	ldr	r3, [r3, #28]
 800cefe:	f043 0301 	orr.w	r3, r3, #1
 800cf02:	4a17      	ldr	r2, [pc, #92]	; (800cf60 <FLASH_SetErrorCode+0x9c>)
 800cf04:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f043 0304 	orr.w	r3, r3, #4
 800cf0c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800cf0e:	4b13      	ldr	r3, [pc, #76]	; (800cf5c <FLASH_SetErrorCode+0x98>)
 800cf10:	69db      	ldr	r3, [r3, #28]
 800cf12:	f003 0301 	and.w	r3, r3, #1
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d00b      	beq.n	800cf32 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800cf1a:	4b11      	ldr	r3, [pc, #68]	; (800cf60 <FLASH_SetErrorCode+0x9c>)
 800cf1c:	69db      	ldr	r3, [r3, #28]
 800cf1e:	f043 0304 	orr.w	r3, r3, #4
 800cf22:	4a0f      	ldr	r2, [pc, #60]	; (800cf60 <FLASH_SetErrorCode+0x9c>)
 800cf24:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800cf26:	4b0d      	ldr	r3, [pc, #52]	; (800cf5c <FLASH_SetErrorCode+0x98>)
 800cf28:	69db      	ldr	r3, [r3, #28]
 800cf2a:	4a0c      	ldr	r2, [pc, #48]	; (800cf5c <FLASH_SetErrorCode+0x98>)
 800cf2c:	f023 0301 	bic.w	r3, r3, #1
 800cf30:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f240 1201 	movw	r2, #257	; 0x101
 800cf38:	4293      	cmp	r3, r2
 800cf3a:	d106      	bne.n	800cf4a <FLASH_SetErrorCode+0x86>
 800cf3c:	4b07      	ldr	r3, [pc, #28]	; (800cf5c <FLASH_SetErrorCode+0x98>)
 800cf3e:	69db      	ldr	r3, [r3, #28]
 800cf40:	4a06      	ldr	r2, [pc, #24]	; (800cf5c <FLASH_SetErrorCode+0x98>)
 800cf42:	f023 0301 	bic.w	r3, r3, #1
 800cf46:	61d3      	str	r3, [r2, #28]
}  
 800cf48:	e002      	b.n	800cf50 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800cf4a:	4a04      	ldr	r2, [pc, #16]	; (800cf5c <FLASH_SetErrorCode+0x98>)
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	60d3      	str	r3, [r2, #12]
}  
 800cf50:	bf00      	nop
 800cf52:	370c      	adds	r7, #12
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bc80      	pop	{r7}
 800cf58:	4770      	bx	lr
 800cf5a:	bf00      	nop
 800cf5c:	40022000 	.word	0x40022000
 800cf60:	20000828 	.word	0x20000828

0800cf64 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b084      	sub	sp, #16
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800cf72:	2300      	movs	r3, #0
 800cf74:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800cf76:	4b70      	ldr	r3, [pc, #448]	; (800d138 <HAL_FLASHEx_Erase+0x1d4>)
 800cf78:	7e1b      	ldrb	r3, [r3, #24]
 800cf7a:	2b01      	cmp	r3, #1
 800cf7c:	d101      	bne.n	800cf82 <HAL_FLASHEx_Erase+0x1e>
 800cf7e:	2302      	movs	r3, #2
 800cf80:	e0d5      	b.n	800d12e <HAL_FLASHEx_Erase+0x1ca>
 800cf82:	4b6d      	ldr	r3, [pc, #436]	; (800d138 <HAL_FLASHEx_Erase+0x1d4>)
 800cf84:	2201      	movs	r2, #1
 800cf86:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d007      	beq.n	800cfa0 <HAL_FLASHEx_Erase+0x3c>
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	2b02      	cmp	r3, #2
 800cf96:	d003      	beq.n	800cfa0 <HAL_FLASHEx_Erase+0x3c>
 800cf98:	21a8      	movs	r1, #168	; 0xa8
 800cf9a:	4868      	ldr	r0, [pc, #416]	; (800d13c <HAL_FLASHEx_Erase+0x1d8>)
 800cf9c:	f7fe fc84 	bl	800b8a8 <assert_failed>

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	2b02      	cmp	r3, #2
 800cfa6:	d117      	bne.n	800cfd8 <HAL_FLASHEx_Erase+0x74>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800cfa8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800cfac:	f7ff ff44 	bl	800ce38 <FLASH_WaitForLastOperation>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	f040 80b7 	bne.w	800d126 <HAL_FLASHEx_Erase+0x1c2>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800cfb8:	2001      	movs	r0, #1
 800cfba:	f000 f8cd 	bl	800d158 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cfbe:	f24c 3050 	movw	r0, #50000	; 0xc350
 800cfc2:	f7ff ff39 	bl	800ce38 <FLASH_WaitForLastOperation>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800cfca:	4b5d      	ldr	r3, [pc, #372]	; (800d140 <HAL_FLASHEx_Erase+0x1dc>)
 800cfcc:	691b      	ldr	r3, [r3, #16]
 800cfce:	4a5c      	ldr	r2, [pc, #368]	; (800d140 <HAL_FLASHEx_Erase+0x1dc>)
 800cfd0:	f023 0304 	bic.w	r3, r3, #4
 800cfd4:	6113      	str	r3, [r2, #16]
 800cfd6:	e0a6      	b.n	800d126 <HAL_FLASHEx_Erase+0x1c2>
  }
  else
  {
    /* Page Erase is requested */
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	689b      	ldr	r3, [r3, #8]
 800cfdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cfe0:	d322      	bcc.n	800d028 <HAL_FLASHEx_Erase+0xc4>
 800cfe2:	4b58      	ldr	r3, [pc, #352]	; (800d144 <HAL_FLASHEx_Erase+0x1e0>)
 800cfe4:	881b      	ldrh	r3, [r3, #0]
 800cfe6:	2b80      	cmp	r3, #128	; 0x80
 800cfe8:	d105      	bne.n	800cff6 <HAL_FLASHEx_Erase+0x92>
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	689b      	ldr	r3, [r3, #8]
 800cfee:	4a56      	ldr	r2, [pc, #344]	; (800d148 <HAL_FLASHEx_Erase+0x1e4>)
 800cff0:	4293      	cmp	r3, r2
 800cff2:	d819      	bhi.n	800d028 <HAL_FLASHEx_Erase+0xc4>
 800cff4:	e01c      	b.n	800d030 <HAL_FLASHEx_Erase+0xcc>
 800cff6:	4b53      	ldr	r3, [pc, #332]	; (800d144 <HAL_FLASHEx_Erase+0x1e0>)
 800cff8:	881b      	ldrh	r3, [r3, #0]
 800cffa:	2b40      	cmp	r3, #64	; 0x40
 800cffc:	d105      	bne.n	800d00a <HAL_FLASHEx_Erase+0xa6>
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	689b      	ldr	r3, [r3, #8]
 800d002:	4a52      	ldr	r2, [pc, #328]	; (800d14c <HAL_FLASHEx_Erase+0x1e8>)
 800d004:	4293      	cmp	r3, r2
 800d006:	d80f      	bhi.n	800d028 <HAL_FLASHEx_Erase+0xc4>
 800d008:	e012      	b.n	800d030 <HAL_FLASHEx_Erase+0xcc>
 800d00a:	4b4e      	ldr	r3, [pc, #312]	; (800d144 <HAL_FLASHEx_Erase+0x1e0>)
 800d00c:	881b      	ldrh	r3, [r3, #0]
 800d00e:	2b20      	cmp	r3, #32
 800d010:	d105      	bne.n	800d01e <HAL_FLASHEx_Erase+0xba>
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	689b      	ldr	r3, [r3, #8]
 800d016:	4a4e      	ldr	r2, [pc, #312]	; (800d150 <HAL_FLASHEx_Erase+0x1ec>)
 800d018:	4293      	cmp	r3, r2
 800d01a:	d805      	bhi.n	800d028 <HAL_FLASHEx_Erase+0xc4>
 800d01c:	e008      	b.n	800d030 <HAL_FLASHEx_Erase+0xcc>
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	689b      	ldr	r3, [r3, #8]
 800d022:	4a4c      	ldr	r2, [pc, #304]	; (800d154 <HAL_FLASHEx_Erase+0x1f0>)
 800d024:	4293      	cmp	r3, r2
 800d026:	d903      	bls.n	800d030 <HAL_FLASHEx_Erase+0xcc>
 800d028:	21e9      	movs	r1, #233	; 0xe9
 800d02a:	4844      	ldr	r0, [pc, #272]	; (800d13c <HAL_FLASHEx_Erase+0x1d8>)
 800d02c:	f7fe fc3c 	bl	800b8a8 <assert_failed>
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
 800d030:	4b44      	ldr	r3, [pc, #272]	; (800d144 <HAL_FLASHEx_Erase+0x1e0>)
 800d032:	881b      	ldrh	r3, [r3, #0]
 800d034:	2b80      	cmp	r3, #128	; 0x80
 800d036:	d10d      	bne.n	800d054 <HAL_FLASHEx_Erase+0xf0>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	689a      	ldr	r2, [r3, #8]
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	68db      	ldr	r3, [r3, #12]
 800d040:	029b      	lsls	r3, r3, #10
 800d042:	4413      	add	r3, r2
 800d044:	3b01      	subs	r3, #1
 800d046:	4a40      	ldr	r2, [pc, #256]	; (800d148 <HAL_FLASHEx_Erase+0x1e4>)
 800d048:	4293      	cmp	r3, r2
 800d04a:	bf94      	ite	ls
 800d04c:	2301      	movls	r3, #1
 800d04e:	2300      	movhi	r3, #0
 800d050:	b2db      	uxtb	r3, r3
 800d052:	e030      	b.n	800d0b6 <HAL_FLASHEx_Erase+0x152>
 800d054:	4b3b      	ldr	r3, [pc, #236]	; (800d144 <HAL_FLASHEx_Erase+0x1e0>)
 800d056:	881b      	ldrh	r3, [r3, #0]
 800d058:	2b40      	cmp	r3, #64	; 0x40
 800d05a:	d10d      	bne.n	800d078 <HAL_FLASHEx_Erase+0x114>
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	689a      	ldr	r2, [r3, #8]
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	68db      	ldr	r3, [r3, #12]
 800d064:	029b      	lsls	r3, r3, #10
 800d066:	4413      	add	r3, r2
 800d068:	3b01      	subs	r3, #1
 800d06a:	4a38      	ldr	r2, [pc, #224]	; (800d14c <HAL_FLASHEx_Erase+0x1e8>)
 800d06c:	4293      	cmp	r3, r2
 800d06e:	bf94      	ite	ls
 800d070:	2301      	movls	r3, #1
 800d072:	2300      	movhi	r3, #0
 800d074:	b2db      	uxtb	r3, r3
 800d076:	e01e      	b.n	800d0b6 <HAL_FLASHEx_Erase+0x152>
 800d078:	4b32      	ldr	r3, [pc, #200]	; (800d144 <HAL_FLASHEx_Erase+0x1e0>)
 800d07a:	881b      	ldrh	r3, [r3, #0]
 800d07c:	2b20      	cmp	r3, #32
 800d07e:	d10d      	bne.n	800d09c <HAL_FLASHEx_Erase+0x138>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	689a      	ldr	r2, [r3, #8]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	68db      	ldr	r3, [r3, #12]
 800d088:	029b      	lsls	r3, r3, #10
 800d08a:	4413      	add	r3, r2
 800d08c:	3b01      	subs	r3, #1
 800d08e:	4a30      	ldr	r2, [pc, #192]	; (800d150 <HAL_FLASHEx_Erase+0x1ec>)
 800d090:	4293      	cmp	r3, r2
 800d092:	bf94      	ite	ls
 800d094:	2301      	movls	r3, #1
 800d096:	2300      	movhi	r3, #0
 800d098:	b2db      	uxtb	r3, r3
 800d09a:	e00c      	b.n	800d0b6 <HAL_FLASHEx_Erase+0x152>
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	689a      	ldr	r2, [r3, #8]
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	68db      	ldr	r3, [r3, #12]
 800d0a4:	029b      	lsls	r3, r3, #10
 800d0a6:	4413      	add	r3, r2
 800d0a8:	3b01      	subs	r3, #1
 800d0aa:	4a2a      	ldr	r2, [pc, #168]	; (800d154 <HAL_FLASHEx_Erase+0x1f0>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	bf94      	ite	ls
 800d0b0:	2301      	movls	r3, #1
 800d0b2:	2300      	movhi	r3, #0
 800d0b4:	b2db      	uxtb	r3, r3
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d103      	bne.n	800d0c2 <HAL_FLASHEx_Erase+0x15e>
 800d0ba:	21ea      	movs	r1, #234	; 0xea
 800d0bc:	481f      	ldr	r0, [pc, #124]	; (800d13c <HAL_FLASHEx_Erase+0x1d8>)
 800d0be:	f7fe fbf3 	bl	800b8a8 <assert_failed>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800d0c2:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d0c6:	f7ff feb7 	bl	800ce38 <FLASH_WaitForLastOperation>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d12a      	bne.n	800d126 <HAL_FLASHEx_Erase+0x1c2>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	f04f 32ff 	mov.w	r2, #4294967295
 800d0d6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	689b      	ldr	r3, [r3, #8]
 800d0dc:	60bb      	str	r3, [r7, #8]
 800d0de:	e019      	b.n	800d114 <HAL_FLASHEx_Erase+0x1b0>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800d0e0:	68b8      	ldr	r0, [r7, #8]
 800d0e2:	f000 f85f 	bl	800d1a4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d0e6:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d0ea:	f7ff fea5 	bl	800ce38 <FLASH_WaitForLastOperation>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800d0f2:	4b13      	ldr	r3, [pc, #76]	; (800d140 <HAL_FLASHEx_Erase+0x1dc>)
 800d0f4:	691b      	ldr	r3, [r3, #16]
 800d0f6:	4a12      	ldr	r2, [pc, #72]	; (800d140 <HAL_FLASHEx_Erase+0x1dc>)
 800d0f8:	f023 0302 	bic.w	r3, r3, #2
 800d0fc:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800d0fe:	7bfb      	ldrb	r3, [r7, #15]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d003      	beq.n	800d10c <HAL_FLASHEx_Erase+0x1a8>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	68ba      	ldr	r2, [r7, #8]
 800d108:	601a      	str	r2, [r3, #0]
            break;
 800d10a:	e00c      	b.n	800d126 <HAL_FLASHEx_Erase+0x1c2>
            address += FLASH_PAGE_SIZE)
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d112:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	68db      	ldr	r3, [r3, #12]
 800d118:	029a      	lsls	r2, r3, #10
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	689b      	ldr	r3, [r3, #8]
 800d11e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800d120:	68ba      	ldr	r2, [r7, #8]
 800d122:	429a      	cmp	r2, r3
 800d124:	d3dc      	bcc.n	800d0e0 <HAL_FLASHEx_Erase+0x17c>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d126:	4b04      	ldr	r3, [pc, #16]	; (800d138 <HAL_FLASHEx_Erase+0x1d4>)
 800d128:	2200      	movs	r2, #0
 800d12a:	761a      	strb	r2, [r3, #24]

  return status;
 800d12c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3710      	adds	r7, #16
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
 800d136:	bf00      	nop
 800d138:	20000828 	.word	0x20000828
 800d13c:	080127b4 	.word	0x080127b4
 800d140:	40022000 	.word	0x40022000
 800d144:	1ffff7e0 	.word	0x1ffff7e0
 800d148:	0801ffff 	.word	0x0801ffff
 800d14c:	0800ffff 	.word	0x0800ffff
 800d150:	08007fff 	.word	0x08007fff
 800d154:	08003fff 	.word	0x08003fff

0800d158 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b082      	sub	sp, #8
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2b01      	cmp	r3, #1
 800d164:	d004      	beq.n	800d170 <FLASH_MassErase+0x18>
 800d166:	f240 2156 	movw	r1, #598	; 0x256
 800d16a:	480b      	ldr	r0, [pc, #44]	; (800d198 <FLASH_MassErase+0x40>)
 800d16c:	f7fe fb9c 	bl	800b8a8 <assert_failed>

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d170:	4b0a      	ldr	r3, [pc, #40]	; (800d19c <FLASH_MassErase+0x44>)
 800d172:	2200      	movs	r2, #0
 800d174:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800d176:	4b0a      	ldr	r3, [pc, #40]	; (800d1a0 <FLASH_MassErase+0x48>)
 800d178:	691b      	ldr	r3, [r3, #16]
 800d17a:	4a09      	ldr	r2, [pc, #36]	; (800d1a0 <FLASH_MassErase+0x48>)
 800d17c:	f043 0304 	orr.w	r3, r3, #4
 800d180:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800d182:	4b07      	ldr	r3, [pc, #28]	; (800d1a0 <FLASH_MassErase+0x48>)
 800d184:	691b      	ldr	r3, [r3, #16]
 800d186:	4a06      	ldr	r2, [pc, #24]	; (800d1a0 <FLASH_MassErase+0x48>)
 800d188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d18c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800d18e:	bf00      	nop
 800d190:	3708      	adds	r7, #8
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}
 800d196:	bf00      	nop
 800d198:	080127b4 	.word	0x080127b4
 800d19c:	20000828 	.word	0x20000828
 800d1a0:	40022000 	.word	0x40022000

0800d1a4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	b083      	sub	sp, #12
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d1ac:	4b0b      	ldr	r3, [pc, #44]	; (800d1dc <FLASH_PageErase+0x38>)
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800d1b2:	4b0b      	ldr	r3, [pc, #44]	; (800d1e0 <FLASH_PageErase+0x3c>)
 800d1b4:	691b      	ldr	r3, [r3, #16]
 800d1b6:	4a0a      	ldr	r2, [pc, #40]	; (800d1e0 <FLASH_PageErase+0x3c>)
 800d1b8:	f043 0302 	orr.w	r3, r3, #2
 800d1bc:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800d1be:	4a08      	ldr	r2, [pc, #32]	; (800d1e0 <FLASH_PageErase+0x3c>)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800d1c4:	4b06      	ldr	r3, [pc, #24]	; (800d1e0 <FLASH_PageErase+0x3c>)
 800d1c6:	691b      	ldr	r3, [r3, #16]
 800d1c8:	4a05      	ldr	r2, [pc, #20]	; (800d1e0 <FLASH_PageErase+0x3c>)
 800d1ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1ce:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800d1d0:	bf00      	nop
 800d1d2:	370c      	adds	r7, #12
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bc80      	pop	{r7}
 800d1d8:	4770      	bx	lr
 800d1da:	bf00      	nop
 800d1dc:	20000828 	.word	0x20000828
 800d1e0:	40022000 	.word	0x40022000

0800d1e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b08a      	sub	sp, #40	; 0x28
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
 800d1ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	4a9c      	ldr	r2, [pc, #624]	; (800d46c <HAL_GPIO_Init+0x288>)
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	d013      	beq.n	800d226 <HAL_GPIO_Init+0x42>
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	4a9b      	ldr	r2, [pc, #620]	; (800d470 <HAL_GPIO_Init+0x28c>)
 800d202:	4293      	cmp	r3, r2
 800d204:	d00f      	beq.n	800d226 <HAL_GPIO_Init+0x42>
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	4a9a      	ldr	r2, [pc, #616]	; (800d474 <HAL_GPIO_Init+0x290>)
 800d20a:	4293      	cmp	r3, r2
 800d20c:	d00b      	beq.n	800d226 <HAL_GPIO_Init+0x42>
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	4a99      	ldr	r2, [pc, #612]	; (800d478 <HAL_GPIO_Init+0x294>)
 800d212:	4293      	cmp	r3, r2
 800d214:	d007      	beq.n	800d226 <HAL_GPIO_Init+0x42>
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	4a98      	ldr	r2, [pc, #608]	; (800d47c <HAL_GPIO_Init+0x298>)
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d003      	beq.n	800d226 <HAL_GPIO_Init+0x42>
 800d21e:	21bd      	movs	r1, #189	; 0xbd
 800d220:	4897      	ldr	r0, [pc, #604]	; (800d480 <HAL_GPIO_Init+0x29c>)
 800d222:	f7fe fb41 	bl	800b8a8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	b29b      	uxth	r3, r3
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d005      	beq.n	800d23c <HAL_GPIO_Init+0x58>
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	0c1b      	lsrs	r3, r3, #16
 800d236:	041b      	lsls	r3, r3, #16
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d003      	beq.n	800d244 <HAL_GPIO_Init+0x60>
 800d23c:	21be      	movs	r1, #190	; 0xbe
 800d23e:	4890      	ldr	r0, [pc, #576]	; (800d480 <HAL_GPIO_Init+0x29c>)
 800d240:	f7fe fb32 	bl	800b8a8 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	685b      	ldr	r3, [r3, #4]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	f000 81eb 	beq.w	800d624 <HAL_GPIO_Init+0x440>
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	685b      	ldr	r3, [r3, #4]
 800d252:	2b01      	cmp	r3, #1
 800d254:	f000 81e6 	beq.w	800d624 <HAL_GPIO_Init+0x440>
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	685b      	ldr	r3, [r3, #4]
 800d25c:	2b11      	cmp	r3, #17
 800d25e:	f000 81e1 	beq.w	800d624 <HAL_GPIO_Init+0x440>
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	685b      	ldr	r3, [r3, #4]
 800d266:	2b02      	cmp	r3, #2
 800d268:	f000 81dc 	beq.w	800d624 <HAL_GPIO_Init+0x440>
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	2b12      	cmp	r3, #18
 800d272:	f000 81d7 	beq.w	800d624 <HAL_GPIO_Init+0x440>
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	685b      	ldr	r3, [r3, #4]
 800d27a:	4a82      	ldr	r2, [pc, #520]	; (800d484 <HAL_GPIO_Init+0x2a0>)
 800d27c:	4293      	cmp	r3, r2
 800d27e:	f000 81d1 	beq.w	800d624 <HAL_GPIO_Init+0x440>
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	685b      	ldr	r3, [r3, #4]
 800d286:	4a80      	ldr	r2, [pc, #512]	; (800d488 <HAL_GPIO_Init+0x2a4>)
 800d288:	4293      	cmp	r3, r2
 800d28a:	f000 81cb 	beq.w	800d624 <HAL_GPIO_Init+0x440>
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	4a7e      	ldr	r2, [pc, #504]	; (800d48c <HAL_GPIO_Init+0x2a8>)
 800d294:	4293      	cmp	r3, r2
 800d296:	f000 81c5 	beq.w	800d624 <HAL_GPIO_Init+0x440>
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	685b      	ldr	r3, [r3, #4]
 800d29e:	4a7c      	ldr	r2, [pc, #496]	; (800d490 <HAL_GPIO_Init+0x2ac>)
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	f000 81bf 	beq.w	800d624 <HAL_GPIO_Init+0x440>
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	685b      	ldr	r3, [r3, #4]
 800d2aa:	4a7a      	ldr	r2, [pc, #488]	; (800d494 <HAL_GPIO_Init+0x2b0>)
 800d2ac:	4293      	cmp	r3, r2
 800d2ae:	f000 81b9 	beq.w	800d624 <HAL_GPIO_Init+0x440>
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	685b      	ldr	r3, [r3, #4]
 800d2b6:	4a78      	ldr	r2, [pc, #480]	; (800d498 <HAL_GPIO_Init+0x2b4>)
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	f000 81b3 	beq.w	800d624 <HAL_GPIO_Init+0x440>
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	685b      	ldr	r3, [r3, #4]
 800d2c2:	2b03      	cmp	r3, #3
 800d2c4:	f000 81ae 	beq.w	800d624 <HAL_GPIO_Init+0x440>
 800d2c8:	21bf      	movs	r1, #191	; 0xbf
 800d2ca:	486d      	ldr	r0, [pc, #436]	; (800d480 <HAL_GPIO_Init+0x29c>)
 800d2cc:	f7fe faec 	bl	800b8a8 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800d2d0:	e1a8      	b.n	800d624 <HAL_GPIO_Init+0x440>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800d2d2:	2201      	movs	r2, #1
 800d2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d6:	fa02 f303 	lsl.w	r3, r2, r3
 800d2da:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	69fa      	ldr	r2, [r7, #28]
 800d2e2:	4013      	ands	r3, r2
 800d2e4:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800d2e6:	69ba      	ldr	r2, [r7, #24]
 800d2e8:	69fb      	ldr	r3, [r7, #28]
 800d2ea:	429a      	cmp	r2, r3
 800d2ec:	f040 8197 	bne.w	800d61e <HAL_GPIO_Init+0x43a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	4a5e      	ldr	r2, [pc, #376]	; (800d46c <HAL_GPIO_Init+0x288>)
 800d2f4:	4293      	cmp	r3, r2
 800d2f6:	d013      	beq.n	800d320 <HAL_GPIO_Init+0x13c>
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	4a5d      	ldr	r2, [pc, #372]	; (800d470 <HAL_GPIO_Init+0x28c>)
 800d2fc:	4293      	cmp	r3, r2
 800d2fe:	d00f      	beq.n	800d320 <HAL_GPIO_Init+0x13c>
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	4a5c      	ldr	r2, [pc, #368]	; (800d474 <HAL_GPIO_Init+0x290>)
 800d304:	4293      	cmp	r3, r2
 800d306:	d00b      	beq.n	800d320 <HAL_GPIO_Init+0x13c>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	4a5b      	ldr	r2, [pc, #364]	; (800d478 <HAL_GPIO_Init+0x294>)
 800d30c:	4293      	cmp	r3, r2
 800d30e:	d007      	beq.n	800d320 <HAL_GPIO_Init+0x13c>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	4a5a      	ldr	r2, [pc, #360]	; (800d47c <HAL_GPIO_Init+0x298>)
 800d314:	4293      	cmp	r3, r2
 800d316:	d003      	beq.n	800d320 <HAL_GPIO_Init+0x13c>
 800d318:	21cd      	movs	r1, #205	; 0xcd
 800d31a:	4859      	ldr	r0, [pc, #356]	; (800d480 <HAL_GPIO_Init+0x29c>)
 800d31c:	f7fe fac4 	bl	800b8a8 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	2b12      	cmp	r3, #18
 800d326:	d065      	beq.n	800d3f4 <HAL_GPIO_Init+0x210>
 800d328:	2b12      	cmp	r3, #18
 800d32a:	d80e      	bhi.n	800d34a <HAL_GPIO_Init+0x166>
 800d32c:	2b02      	cmp	r3, #2
 800d32e:	d04c      	beq.n	800d3ca <HAL_GPIO_Init+0x1e6>
 800d330:	2b02      	cmp	r3, #2
 800d332:	d804      	bhi.n	800d33e <HAL_GPIO_Init+0x15a>
 800d334:	2b00      	cmp	r3, #0
 800d336:	d072      	beq.n	800d41e <HAL_GPIO_Init+0x23a>
 800d338:	2b01      	cmp	r3, #1
 800d33a:	d01d      	beq.n	800d378 <HAL_GPIO_Init+0x194>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800d33c:	e0b1      	b.n	800d4a2 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800d33e:	2b03      	cmp	r3, #3
 800d340:	f000 80ac 	beq.w	800d49c <HAL_GPIO_Init+0x2b8>
 800d344:	2b11      	cmp	r3, #17
 800d346:	d02b      	beq.n	800d3a0 <HAL_GPIO_Init+0x1bc>
          break;
 800d348:	e0ab      	b.n	800d4a2 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800d34a:	4a4f      	ldr	r2, [pc, #316]	; (800d488 <HAL_GPIO_Init+0x2a4>)
 800d34c:	4293      	cmp	r3, r2
 800d34e:	d066      	beq.n	800d41e <HAL_GPIO_Init+0x23a>
 800d350:	4a4d      	ldr	r2, [pc, #308]	; (800d488 <HAL_GPIO_Init+0x2a4>)
 800d352:	4293      	cmp	r3, r2
 800d354:	d806      	bhi.n	800d364 <HAL_GPIO_Init+0x180>
 800d356:	4a4b      	ldr	r2, [pc, #300]	; (800d484 <HAL_GPIO_Init+0x2a0>)
 800d358:	4293      	cmp	r3, r2
 800d35a:	d060      	beq.n	800d41e <HAL_GPIO_Init+0x23a>
 800d35c:	4a4c      	ldr	r2, [pc, #304]	; (800d490 <HAL_GPIO_Init+0x2ac>)
 800d35e:	4293      	cmp	r3, r2
 800d360:	d05d      	beq.n	800d41e <HAL_GPIO_Init+0x23a>
          break;
 800d362:	e09e      	b.n	800d4a2 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800d364:	4a49      	ldr	r2, [pc, #292]	; (800d48c <HAL_GPIO_Init+0x2a8>)
 800d366:	4293      	cmp	r3, r2
 800d368:	d059      	beq.n	800d41e <HAL_GPIO_Init+0x23a>
 800d36a:	4a4b      	ldr	r2, [pc, #300]	; (800d498 <HAL_GPIO_Init+0x2b4>)
 800d36c:	4293      	cmp	r3, r2
 800d36e:	d056      	beq.n	800d41e <HAL_GPIO_Init+0x23a>
 800d370:	4a48      	ldr	r2, [pc, #288]	; (800d494 <HAL_GPIO_Init+0x2b0>)
 800d372:	4293      	cmp	r3, r2
 800d374:	d053      	beq.n	800d41e <HAL_GPIO_Init+0x23a>
          break;
 800d376:	e094      	b.n	800d4a2 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	68db      	ldr	r3, [r3, #12]
 800d37c:	2b02      	cmp	r3, #2
 800d37e:	d00b      	beq.n	800d398 <HAL_GPIO_Init+0x1b4>
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	68db      	ldr	r3, [r3, #12]
 800d384:	2b01      	cmp	r3, #1
 800d386:	d007      	beq.n	800d398 <HAL_GPIO_Init+0x1b4>
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	68db      	ldr	r3, [r3, #12]
 800d38c:	2b03      	cmp	r3, #3
 800d38e:	d003      	beq.n	800d398 <HAL_GPIO_Init+0x1b4>
 800d390:	21d5      	movs	r1, #213	; 0xd5
 800d392:	483b      	ldr	r0, [pc, #236]	; (800d480 <HAL_GPIO_Init+0x29c>)
 800d394:	f7fe fa88 	bl	800b8a8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	68db      	ldr	r3, [r3, #12]
 800d39c:	623b      	str	r3, [r7, #32]
          break;
 800d39e:	e080      	b.n	800d4a2 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	68db      	ldr	r3, [r3, #12]
 800d3a4:	2b02      	cmp	r3, #2
 800d3a6:	d00b      	beq.n	800d3c0 <HAL_GPIO_Init+0x1dc>
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	68db      	ldr	r3, [r3, #12]
 800d3ac:	2b01      	cmp	r3, #1
 800d3ae:	d007      	beq.n	800d3c0 <HAL_GPIO_Init+0x1dc>
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	68db      	ldr	r3, [r3, #12]
 800d3b4:	2b03      	cmp	r3, #3
 800d3b6:	d003      	beq.n	800d3c0 <HAL_GPIO_Init+0x1dc>
 800d3b8:	21dc      	movs	r1, #220	; 0xdc
 800d3ba:	4831      	ldr	r0, [pc, #196]	; (800d480 <HAL_GPIO_Init+0x29c>)
 800d3bc:	f7fe fa74 	bl	800b8a8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	68db      	ldr	r3, [r3, #12]
 800d3c4:	3304      	adds	r3, #4
 800d3c6:	623b      	str	r3, [r7, #32]
          break;
 800d3c8:	e06b      	b.n	800d4a2 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	68db      	ldr	r3, [r3, #12]
 800d3ce:	2b02      	cmp	r3, #2
 800d3d0:	d00b      	beq.n	800d3ea <HAL_GPIO_Init+0x206>
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	68db      	ldr	r3, [r3, #12]
 800d3d6:	2b01      	cmp	r3, #1
 800d3d8:	d007      	beq.n	800d3ea <HAL_GPIO_Init+0x206>
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	68db      	ldr	r3, [r3, #12]
 800d3de:	2b03      	cmp	r3, #3
 800d3e0:	d003      	beq.n	800d3ea <HAL_GPIO_Init+0x206>
 800d3e2:	21e3      	movs	r1, #227	; 0xe3
 800d3e4:	4826      	ldr	r0, [pc, #152]	; (800d480 <HAL_GPIO_Init+0x29c>)
 800d3e6:	f7fe fa5f 	bl	800b8a8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	68db      	ldr	r3, [r3, #12]
 800d3ee:	3308      	adds	r3, #8
 800d3f0:	623b      	str	r3, [r7, #32]
          break;
 800d3f2:	e056      	b.n	800d4a2 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	68db      	ldr	r3, [r3, #12]
 800d3f8:	2b02      	cmp	r3, #2
 800d3fa:	d00b      	beq.n	800d414 <HAL_GPIO_Init+0x230>
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	68db      	ldr	r3, [r3, #12]
 800d400:	2b01      	cmp	r3, #1
 800d402:	d007      	beq.n	800d414 <HAL_GPIO_Init+0x230>
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	68db      	ldr	r3, [r3, #12]
 800d408:	2b03      	cmp	r3, #3
 800d40a:	d003      	beq.n	800d414 <HAL_GPIO_Init+0x230>
 800d40c:	21ea      	movs	r1, #234	; 0xea
 800d40e:	481c      	ldr	r0, [pc, #112]	; (800d480 <HAL_GPIO_Init+0x29c>)
 800d410:	f7fe fa4a 	bl	800b8a8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	68db      	ldr	r3, [r3, #12]
 800d418:	330c      	adds	r3, #12
 800d41a:	623b      	str	r3, [r7, #32]
          break;
 800d41c:	e041      	b.n	800d4a2 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	689b      	ldr	r3, [r3, #8]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d00b      	beq.n	800d43e <HAL_GPIO_Init+0x25a>
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	689b      	ldr	r3, [r3, #8]
 800d42a:	2b01      	cmp	r3, #1
 800d42c:	d007      	beq.n	800d43e <HAL_GPIO_Init+0x25a>
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	689b      	ldr	r3, [r3, #8]
 800d432:	2b02      	cmp	r3, #2
 800d434:	d003      	beq.n	800d43e <HAL_GPIO_Init+0x25a>
 800d436:	21f7      	movs	r1, #247	; 0xf7
 800d438:	4811      	ldr	r0, [pc, #68]	; (800d480 <HAL_GPIO_Init+0x29c>)
 800d43a:	f7fe fa35 	bl	800b8a8 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	689b      	ldr	r3, [r3, #8]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d102      	bne.n	800d44c <HAL_GPIO_Init+0x268>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800d446:	2304      	movs	r3, #4
 800d448:	623b      	str	r3, [r7, #32]
          break;
 800d44a:	e02a      	b.n	800d4a2 <HAL_GPIO_Init+0x2be>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	689b      	ldr	r3, [r3, #8]
 800d450:	2b01      	cmp	r3, #1
 800d452:	d105      	bne.n	800d460 <HAL_GPIO_Init+0x27c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800d454:	2308      	movs	r3, #8
 800d456:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	69fa      	ldr	r2, [r7, #28]
 800d45c:	611a      	str	r2, [r3, #16]
          break;
 800d45e:	e020      	b.n	800d4a2 <HAL_GPIO_Init+0x2be>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800d460:	2308      	movs	r3, #8
 800d462:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	69fa      	ldr	r2, [r7, #28]
 800d468:	615a      	str	r2, [r3, #20]
          break;
 800d46a:	e01a      	b.n	800d4a2 <HAL_GPIO_Init+0x2be>
 800d46c:	40010800 	.word	0x40010800
 800d470:	40010c00 	.word	0x40010c00
 800d474:	40011000 	.word	0x40011000
 800d478:	40011400 	.word	0x40011400
 800d47c:	40011800 	.word	0x40011800
 800d480:	080127f4 	.word	0x080127f4
 800d484:	10110000 	.word	0x10110000
 800d488:	10210000 	.word	0x10210000
 800d48c:	10310000 	.word	0x10310000
 800d490:	10120000 	.word	0x10120000
 800d494:	10220000 	.word	0x10220000
 800d498:	10320000 	.word	0x10320000
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800d49c:	2300      	movs	r3, #0
 800d49e:	623b      	str	r3, [r7, #32]
          break;
 800d4a0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800d4a2:	69bb      	ldr	r3, [r7, #24]
 800d4a4:	2bff      	cmp	r3, #255	; 0xff
 800d4a6:	d801      	bhi.n	800d4ac <HAL_GPIO_Init+0x2c8>
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	e001      	b.n	800d4b0 <HAL_GPIO_Init+0x2cc>
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	3304      	adds	r3, #4
 800d4b0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800d4b2:	69bb      	ldr	r3, [r7, #24]
 800d4b4:	2bff      	cmp	r3, #255	; 0xff
 800d4b6:	d802      	bhi.n	800d4be <HAL_GPIO_Init+0x2da>
 800d4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ba:	009b      	lsls	r3, r3, #2
 800d4bc:	e002      	b.n	800d4c4 <HAL_GPIO_Init+0x2e0>
 800d4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c0:	3b08      	subs	r3, #8
 800d4c2:	009b      	lsls	r3, r3, #2
 800d4c4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	681a      	ldr	r2, [r3, #0]
 800d4ca:	210f      	movs	r1, #15
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	fa01 f303 	lsl.w	r3, r1, r3
 800d4d2:	43db      	mvns	r3, r3
 800d4d4:	401a      	ands	r2, r3
 800d4d6:	6a39      	ldr	r1, [r7, #32]
 800d4d8:	693b      	ldr	r3, [r7, #16]
 800d4da:	fa01 f303 	lsl.w	r3, r1, r3
 800d4de:	431a      	orrs	r2, r3
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	685b      	ldr	r3, [r3, #4]
 800d4e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	f000 8096 	beq.w	800d61e <HAL_GPIO_Init+0x43a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800d4f2:	4b52      	ldr	r3, [pc, #328]	; (800d63c <HAL_GPIO_Init+0x458>)
 800d4f4:	699b      	ldr	r3, [r3, #24]
 800d4f6:	4a51      	ldr	r2, [pc, #324]	; (800d63c <HAL_GPIO_Init+0x458>)
 800d4f8:	f043 0301 	orr.w	r3, r3, #1
 800d4fc:	6193      	str	r3, [r2, #24]
 800d4fe:	4b4f      	ldr	r3, [pc, #316]	; (800d63c <HAL_GPIO_Init+0x458>)
 800d500:	699b      	ldr	r3, [r3, #24]
 800d502:	f003 0301 	and.w	r3, r3, #1
 800d506:	60bb      	str	r3, [r7, #8]
 800d508:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800d50a:	4a4d      	ldr	r2, [pc, #308]	; (800d640 <HAL_GPIO_Init+0x45c>)
 800d50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d50e:	089b      	lsrs	r3, r3, #2
 800d510:	3302      	adds	r3, #2
 800d512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d516:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800d518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51a:	f003 0303 	and.w	r3, r3, #3
 800d51e:	009b      	lsls	r3, r3, #2
 800d520:	220f      	movs	r2, #15
 800d522:	fa02 f303 	lsl.w	r3, r2, r3
 800d526:	43db      	mvns	r3, r3
 800d528:	68fa      	ldr	r2, [r7, #12]
 800d52a:	4013      	ands	r3, r2
 800d52c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	4a44      	ldr	r2, [pc, #272]	; (800d644 <HAL_GPIO_Init+0x460>)
 800d532:	4293      	cmp	r3, r2
 800d534:	d013      	beq.n	800d55e <HAL_GPIO_Init+0x37a>
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	4a43      	ldr	r2, [pc, #268]	; (800d648 <HAL_GPIO_Init+0x464>)
 800d53a:	4293      	cmp	r3, r2
 800d53c:	d00d      	beq.n	800d55a <HAL_GPIO_Init+0x376>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	4a42      	ldr	r2, [pc, #264]	; (800d64c <HAL_GPIO_Init+0x468>)
 800d542:	4293      	cmp	r3, r2
 800d544:	d007      	beq.n	800d556 <HAL_GPIO_Init+0x372>
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	4a41      	ldr	r2, [pc, #260]	; (800d650 <HAL_GPIO_Init+0x46c>)
 800d54a:	4293      	cmp	r3, r2
 800d54c:	d101      	bne.n	800d552 <HAL_GPIO_Init+0x36e>
 800d54e:	2303      	movs	r3, #3
 800d550:	e006      	b.n	800d560 <HAL_GPIO_Init+0x37c>
 800d552:	2304      	movs	r3, #4
 800d554:	e004      	b.n	800d560 <HAL_GPIO_Init+0x37c>
 800d556:	2302      	movs	r3, #2
 800d558:	e002      	b.n	800d560 <HAL_GPIO_Init+0x37c>
 800d55a:	2301      	movs	r3, #1
 800d55c:	e000      	b.n	800d560 <HAL_GPIO_Init+0x37c>
 800d55e:	2300      	movs	r3, #0
 800d560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d562:	f002 0203 	and.w	r2, r2, #3
 800d566:	0092      	lsls	r2, r2, #2
 800d568:	4093      	lsls	r3, r2
 800d56a:	68fa      	ldr	r2, [r7, #12]
 800d56c:	4313      	orrs	r3, r2
 800d56e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800d570:	4933      	ldr	r1, [pc, #204]	; (800d640 <HAL_GPIO_Init+0x45c>)
 800d572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d574:	089b      	lsrs	r3, r3, #2
 800d576:	3302      	adds	r3, #2
 800d578:	68fa      	ldr	r2, [r7, #12]
 800d57a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	685b      	ldr	r3, [r3, #4]
 800d582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d586:	2b00      	cmp	r3, #0
 800d588:	d006      	beq.n	800d598 <HAL_GPIO_Init+0x3b4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800d58a:	4b32      	ldr	r3, [pc, #200]	; (800d654 <HAL_GPIO_Init+0x470>)
 800d58c:	681a      	ldr	r2, [r3, #0]
 800d58e:	4931      	ldr	r1, [pc, #196]	; (800d654 <HAL_GPIO_Init+0x470>)
 800d590:	69bb      	ldr	r3, [r7, #24]
 800d592:	4313      	orrs	r3, r2
 800d594:	600b      	str	r3, [r1, #0]
 800d596:	e006      	b.n	800d5a6 <HAL_GPIO_Init+0x3c2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800d598:	4b2e      	ldr	r3, [pc, #184]	; (800d654 <HAL_GPIO_Init+0x470>)
 800d59a:	681a      	ldr	r2, [r3, #0]
 800d59c:	69bb      	ldr	r3, [r7, #24]
 800d59e:	43db      	mvns	r3, r3
 800d5a0:	492c      	ldr	r1, [pc, #176]	; (800d654 <HAL_GPIO_Init+0x470>)
 800d5a2:	4013      	ands	r3, r2
 800d5a4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	685b      	ldr	r3, [r3, #4]
 800d5aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d006      	beq.n	800d5c0 <HAL_GPIO_Init+0x3dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800d5b2:	4b28      	ldr	r3, [pc, #160]	; (800d654 <HAL_GPIO_Init+0x470>)
 800d5b4:	685a      	ldr	r2, [r3, #4]
 800d5b6:	4927      	ldr	r1, [pc, #156]	; (800d654 <HAL_GPIO_Init+0x470>)
 800d5b8:	69bb      	ldr	r3, [r7, #24]
 800d5ba:	4313      	orrs	r3, r2
 800d5bc:	604b      	str	r3, [r1, #4]
 800d5be:	e006      	b.n	800d5ce <HAL_GPIO_Init+0x3ea>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800d5c0:	4b24      	ldr	r3, [pc, #144]	; (800d654 <HAL_GPIO_Init+0x470>)
 800d5c2:	685a      	ldr	r2, [r3, #4]
 800d5c4:	69bb      	ldr	r3, [r7, #24]
 800d5c6:	43db      	mvns	r3, r3
 800d5c8:	4922      	ldr	r1, [pc, #136]	; (800d654 <HAL_GPIO_Init+0x470>)
 800d5ca:	4013      	ands	r3, r2
 800d5cc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	685b      	ldr	r3, [r3, #4]
 800d5d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d006      	beq.n	800d5e8 <HAL_GPIO_Init+0x404>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800d5da:	4b1e      	ldr	r3, [pc, #120]	; (800d654 <HAL_GPIO_Init+0x470>)
 800d5dc:	689a      	ldr	r2, [r3, #8]
 800d5de:	491d      	ldr	r1, [pc, #116]	; (800d654 <HAL_GPIO_Init+0x470>)
 800d5e0:	69bb      	ldr	r3, [r7, #24]
 800d5e2:	4313      	orrs	r3, r2
 800d5e4:	608b      	str	r3, [r1, #8]
 800d5e6:	e006      	b.n	800d5f6 <HAL_GPIO_Init+0x412>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800d5e8:	4b1a      	ldr	r3, [pc, #104]	; (800d654 <HAL_GPIO_Init+0x470>)
 800d5ea:	689a      	ldr	r2, [r3, #8]
 800d5ec:	69bb      	ldr	r3, [r7, #24]
 800d5ee:	43db      	mvns	r3, r3
 800d5f0:	4918      	ldr	r1, [pc, #96]	; (800d654 <HAL_GPIO_Init+0x470>)
 800d5f2:	4013      	ands	r3, r2
 800d5f4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	685b      	ldr	r3, [r3, #4]
 800d5fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d006      	beq.n	800d610 <HAL_GPIO_Init+0x42c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800d602:	4b14      	ldr	r3, [pc, #80]	; (800d654 <HAL_GPIO_Init+0x470>)
 800d604:	68da      	ldr	r2, [r3, #12]
 800d606:	4913      	ldr	r1, [pc, #76]	; (800d654 <HAL_GPIO_Init+0x470>)
 800d608:	69bb      	ldr	r3, [r7, #24]
 800d60a:	4313      	orrs	r3, r2
 800d60c:	60cb      	str	r3, [r1, #12]
 800d60e:	e006      	b.n	800d61e <HAL_GPIO_Init+0x43a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800d610:	4b10      	ldr	r3, [pc, #64]	; (800d654 <HAL_GPIO_Init+0x470>)
 800d612:	68da      	ldr	r2, [r3, #12]
 800d614:	69bb      	ldr	r3, [r7, #24]
 800d616:	43db      	mvns	r3, r3
 800d618:	490e      	ldr	r1, [pc, #56]	; (800d654 <HAL_GPIO_Init+0x470>)
 800d61a:	4013      	ands	r3, r2
 800d61c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800d61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d620:	3301      	adds	r3, #1
 800d622:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	681a      	ldr	r2, [r3, #0]
 800d628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62a:	fa22 f303 	lsr.w	r3, r2, r3
 800d62e:	2b00      	cmp	r3, #0
 800d630:	f47f ae4f 	bne.w	800d2d2 <HAL_GPIO_Init+0xee>
  }
}
 800d634:	bf00      	nop
 800d636:	3728      	adds	r7, #40	; 0x28
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}
 800d63c:	40021000 	.word	0x40021000
 800d640:	40010000 	.word	0x40010000
 800d644:	40010800 	.word	0x40010800
 800d648:	40010c00 	.word	0x40010c00
 800d64c:	40011000 	.word	0x40011000
 800d650:	40011400 	.word	0x40011400
 800d654:	40010400 	.word	0x40010400

0800d658 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b084      	sub	sp, #16
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	460b      	mov	r3, r1
 800d662:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800d664:	887b      	ldrh	r3, [r7, #2]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d004      	beq.n	800d674 <HAL_GPIO_ReadPin+0x1c>
 800d66a:	887b      	ldrh	r3, [r7, #2]
 800d66c:	0c1b      	lsrs	r3, r3, #16
 800d66e:	041b      	lsls	r3, r3, #16
 800d670:	2b00      	cmp	r3, #0
 800d672:	d004      	beq.n	800d67e <HAL_GPIO_ReadPin+0x26>
 800d674:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800d678:	4809      	ldr	r0, [pc, #36]	; (800d6a0 <HAL_GPIO_ReadPin+0x48>)
 800d67a:	f7fe f915 	bl	800b8a8 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	689a      	ldr	r2, [r3, #8]
 800d682:	887b      	ldrh	r3, [r7, #2]
 800d684:	4013      	ands	r3, r2
 800d686:	2b00      	cmp	r3, #0
 800d688:	d002      	beq.n	800d690 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 800d68a:	2301      	movs	r3, #1
 800d68c:	73fb      	strb	r3, [r7, #15]
 800d68e:	e001      	b.n	800d694 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d690:	2300      	movs	r3, #0
 800d692:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d694:	7bfb      	ldrb	r3, [r7, #15]
}
 800d696:	4618      	mov	r0, r3
 800d698:	3710      	adds	r7, #16
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}
 800d69e:	bf00      	nop
 800d6a0:	080127f4 	.word	0x080127f4

0800d6a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b082      	sub	sp, #8
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
 800d6ac:	460b      	mov	r3, r1
 800d6ae:	807b      	strh	r3, [r7, #2]
 800d6b0:	4613      	mov	r3, r2
 800d6b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800d6b4:	887b      	ldrh	r3, [r7, #2]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d004      	beq.n	800d6c4 <HAL_GPIO_WritePin+0x20>
 800d6ba:	887b      	ldrh	r3, [r7, #2]
 800d6bc:	0c1b      	lsrs	r3, r3, #16
 800d6be:	041b      	lsls	r3, r3, #16
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d004      	beq.n	800d6ce <HAL_GPIO_WritePin+0x2a>
 800d6c4:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800d6c8:	480e      	ldr	r0, [pc, #56]	; (800d704 <HAL_GPIO_WritePin+0x60>)
 800d6ca:	f7fe f8ed 	bl	800b8a8 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800d6ce:	787b      	ldrb	r3, [r7, #1]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d007      	beq.n	800d6e4 <HAL_GPIO_WritePin+0x40>
 800d6d4:	787b      	ldrb	r3, [r7, #1]
 800d6d6:	2b01      	cmp	r3, #1
 800d6d8:	d004      	beq.n	800d6e4 <HAL_GPIO_WritePin+0x40>
 800d6da:	f240 11d5 	movw	r1, #469	; 0x1d5
 800d6de:	4809      	ldr	r0, [pc, #36]	; (800d704 <HAL_GPIO_WritePin+0x60>)
 800d6e0:	f7fe f8e2 	bl	800b8a8 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800d6e4:	787b      	ldrb	r3, [r7, #1]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d003      	beq.n	800d6f2 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d6ea:	887a      	ldrh	r2, [r7, #2]
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800d6f0:	e003      	b.n	800d6fa <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800d6f2:	887b      	ldrh	r3, [r7, #2]
 800d6f4:	041a      	lsls	r2, r3, #16
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	611a      	str	r2, [r3, #16]
}
 800d6fa:	bf00      	nop
 800d6fc:	3708      	adds	r7, #8
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}
 800d702:	bf00      	nop
 800d704:	080127f4 	.word	0x080127f4

0800d708 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b082      	sub	sp, #8
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	460b      	mov	r3, r1
 800d712:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800d714:	887b      	ldrh	r3, [r7, #2]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d004      	beq.n	800d724 <HAL_GPIO_TogglePin+0x1c>
 800d71a:	887b      	ldrh	r3, [r7, #2]
 800d71c:	0c1b      	lsrs	r3, r3, #16
 800d71e:	041b      	lsls	r3, r3, #16
 800d720:	2b00      	cmp	r3, #0
 800d722:	d004      	beq.n	800d72e <HAL_GPIO_TogglePin+0x26>
 800d724:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 800d728:	4809      	ldr	r0, [pc, #36]	; (800d750 <HAL_GPIO_TogglePin+0x48>)
 800d72a:	f7fe f8bd 	bl	800b8a8 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	68da      	ldr	r2, [r3, #12]
 800d732:	887b      	ldrh	r3, [r7, #2]
 800d734:	4013      	ands	r3, r2
 800d736:	2b00      	cmp	r3, #0
 800d738:	d003      	beq.n	800d742 <HAL_GPIO_TogglePin+0x3a>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800d73a:	887a      	ldrh	r2, [r7, #2]
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800d740:	e002      	b.n	800d748 <HAL_GPIO_TogglePin+0x40>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800d742:	887a      	ldrh	r2, [r7, #2]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	611a      	str	r2, [r3, #16]
}
 800d748:	bf00      	nop
 800d74a:	3708      	adds	r7, #8
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}
 800d750:	080127f4 	.word	0x080127f4

0800d754 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b084      	sub	sp, #16
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d101      	bne.n	800d766 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d762:	2301      	movs	r3, #1
 800d764:	e1ab      	b.n	800dabe <HAL_I2C_Init+0x36a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	4aa0      	ldr	r2, [pc, #640]	; (800d9ec <HAL_I2C_Init+0x298>)
 800d76c:	4293      	cmp	r3, r2
 800d76e:	d009      	beq.n	800d784 <HAL_I2C_Init+0x30>
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	4a9e      	ldr	r2, [pc, #632]	; (800d9f0 <HAL_I2C_Init+0x29c>)
 800d776:	4293      	cmp	r3, r2
 800d778:	d004      	beq.n	800d784 <HAL_I2C_Init+0x30>
 800d77a:	f240 11d1 	movw	r1, #465	; 0x1d1
 800d77e:	489d      	ldr	r0, [pc, #628]	; (800d9f4 <HAL_I2C_Init+0x2a0>)
 800d780:	f7fe f892 	bl	800b8a8 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d004      	beq.n	800d796 <HAL_I2C_Init+0x42>
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	685b      	ldr	r3, [r3, #4]
 800d790:	4a99      	ldr	r2, [pc, #612]	; (800d9f8 <HAL_I2C_Init+0x2a4>)
 800d792:	4293      	cmp	r3, r2
 800d794:	d904      	bls.n	800d7a0 <HAL_I2C_Init+0x4c>
 800d796:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800d79a:	4896      	ldr	r0, [pc, #600]	; (800d9f4 <HAL_I2C_Init+0x2a0>)
 800d79c:	f7fe f884 	bl	800b8a8 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	689b      	ldr	r3, [r3, #8]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d009      	beq.n	800d7bc <HAL_I2C_Init+0x68>
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	689b      	ldr	r3, [r3, #8]
 800d7ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d7b0:	d004      	beq.n	800d7bc <HAL_I2C_Init+0x68>
 800d7b2:	f240 11d3 	movw	r1, #467	; 0x1d3
 800d7b6:	488f      	ldr	r0, [pc, #572]	; (800d9f4 <HAL_I2C_Init+0x2a0>)
 800d7b8:	f7fe f876 	bl	800b8a8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	68db      	ldr	r3, [r3, #12]
 800d7c0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800d7c4:	f023 0303 	bic.w	r3, r3, #3
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d004      	beq.n	800d7d6 <HAL_I2C_Init+0x82>
 800d7cc:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800d7d0:	4888      	ldr	r0, [pc, #544]	; (800d9f4 <HAL_I2C_Init+0x2a0>)
 800d7d2:	f7fe f869 	bl	800b8a8 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	691b      	ldr	r3, [r3, #16]
 800d7da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d7de:	d009      	beq.n	800d7f4 <HAL_I2C_Init+0xa0>
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	691b      	ldr	r3, [r3, #16]
 800d7e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d7e8:	d004      	beq.n	800d7f4 <HAL_I2C_Init+0xa0>
 800d7ea:	f240 11d5 	movw	r1, #469	; 0x1d5
 800d7ee:	4881      	ldr	r0, [pc, #516]	; (800d9f4 <HAL_I2C_Init+0x2a0>)
 800d7f0:	f7fe f85a 	bl	800b8a8 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	695b      	ldr	r3, [r3, #20]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d008      	beq.n	800d80e <HAL_I2C_Init+0xba>
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	695b      	ldr	r3, [r3, #20]
 800d800:	2b01      	cmp	r3, #1
 800d802:	d004      	beq.n	800d80e <HAL_I2C_Init+0xba>
 800d804:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 800d808:	487a      	ldr	r0, [pc, #488]	; (800d9f4 <HAL_I2C_Init+0x2a0>)
 800d80a:	f7fe f84d 	bl	800b8a8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	699b      	ldr	r3, [r3, #24]
 800d812:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800d816:	2b00      	cmp	r3, #0
 800d818:	d004      	beq.n	800d824 <HAL_I2C_Init+0xd0>
 800d81a:	f240 11d7 	movw	r1, #471	; 0x1d7
 800d81e:	4875      	ldr	r0, [pc, #468]	; (800d9f4 <HAL_I2C_Init+0x2a0>)
 800d820:	f7fe f842 	bl	800b8a8 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	69db      	ldr	r3, [r3, #28]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d008      	beq.n	800d83e <HAL_I2C_Init+0xea>
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	69db      	ldr	r3, [r3, #28]
 800d830:	2b40      	cmp	r3, #64	; 0x40
 800d832:	d004      	beq.n	800d83e <HAL_I2C_Init+0xea>
 800d834:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800d838:	486e      	ldr	r0, [pc, #440]	; (800d9f4 <HAL_I2C_Init+0x2a0>)
 800d83a:	f7fe f835 	bl	800b8a8 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6a1b      	ldr	r3, [r3, #32]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d008      	beq.n	800d858 <HAL_I2C_Init+0x104>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6a1b      	ldr	r3, [r3, #32]
 800d84a:	2b80      	cmp	r3, #128	; 0x80
 800d84c:	d004      	beq.n	800d858 <HAL_I2C_Init+0x104>
 800d84e:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d852:	4868      	ldr	r0, [pc, #416]	; (800d9f4 <HAL_I2C_Init+0x2a0>)
 800d854:	f7fe f828 	bl	800b8a8 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d85e:	b2db      	uxtb	r3, r3
 800d860:	2b00      	cmp	r3, #0
 800d862:	d106      	bne.n	800d872 <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2200      	movs	r2, #0
 800d868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800d86c:	6878      	ldr	r0, [r7, #4]
 800d86e:	f7fd ff25 	bl	800b6bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2224      	movs	r2, #36	; 0x24
 800d876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	681a      	ldr	r2, [r3, #0]
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	f022 0201 	bic.w	r2, r2, #1
 800d888:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	681a      	ldr	r2, [r3, #0]
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d898:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	681a      	ldr	r2, [r3, #0]
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d8a8:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800d8aa:	f001 fcfd 	bl	800f2a8 <HAL_RCC_GetPCLK1Freq>
 800d8ae:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	685b      	ldr	r3, [r3, #4]
 800d8b4:	4a51      	ldr	r2, [pc, #324]	; (800d9fc <HAL_I2C_Init+0x2a8>)
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	d807      	bhi.n	800d8ca <HAL_I2C_Init+0x176>
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	4a50      	ldr	r2, [pc, #320]	; (800da00 <HAL_I2C_Init+0x2ac>)
 800d8be:	4293      	cmp	r3, r2
 800d8c0:	bf94      	ite	ls
 800d8c2:	2301      	movls	r3, #1
 800d8c4:	2300      	movhi	r3, #0
 800d8c6:	b2db      	uxtb	r3, r3
 800d8c8:	e006      	b.n	800d8d8 <HAL_I2C_Init+0x184>
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	4a4d      	ldr	r2, [pc, #308]	; (800da04 <HAL_I2C_Init+0x2b0>)
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	bf94      	ite	ls
 800d8d2:	2301      	movls	r3, #1
 800d8d4:	2300      	movhi	r3, #0
 800d8d6:	b2db      	uxtb	r3, r3
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d001      	beq.n	800d8e0 <HAL_I2C_Init+0x18c>
  {
    return HAL_ERROR;
 800d8dc:	2301      	movs	r3, #1
 800d8de:	e0ee      	b.n	800dabe <HAL_I2C_Init+0x36a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	4a49      	ldr	r2, [pc, #292]	; (800da08 <HAL_I2C_Init+0x2b4>)
 800d8e4:	fba2 2303 	umull	r2, r3, r2, r3
 800d8e8:	0c9b      	lsrs	r3, r3, #18
 800d8ea:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	685b      	ldr	r3, [r3, #4]
 800d8f2:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	68ba      	ldr	r2, [r7, #8]
 800d8fc:	430a      	orrs	r2, r1
 800d8fe:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	6a1b      	ldr	r3, [r3, #32]
 800d906:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	685b      	ldr	r3, [r3, #4]
 800d90e:	4a3b      	ldr	r2, [pc, #236]	; (800d9fc <HAL_I2C_Init+0x2a8>)
 800d910:	4293      	cmp	r3, r2
 800d912:	d802      	bhi.n	800d91a <HAL_I2C_Init+0x1c6>
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	3301      	adds	r3, #1
 800d918:	e009      	b.n	800d92e <HAL_I2C_Init+0x1da>
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d920:	fb02 f303 	mul.w	r3, r2, r3
 800d924:	4a39      	ldr	r2, [pc, #228]	; (800da0c <HAL_I2C_Init+0x2b8>)
 800d926:	fba2 2303 	umull	r2, r3, r2, r3
 800d92a:	099b      	lsrs	r3, r3, #6
 800d92c:	3301      	adds	r3, #1
 800d92e:	687a      	ldr	r2, [r7, #4]
 800d930:	6812      	ldr	r2, [r2, #0]
 800d932:	430b      	orrs	r3, r1
 800d934:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	69db      	ldr	r3, [r3, #28]
 800d93c:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800d940:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	685b      	ldr	r3, [r3, #4]
 800d948:	492c      	ldr	r1, [pc, #176]	; (800d9fc <HAL_I2C_Init+0x2a8>)
 800d94a:	428b      	cmp	r3, r1
 800d94c:	d80d      	bhi.n	800d96a <HAL_I2C_Init+0x216>
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	1e59      	subs	r1, r3, #1
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	685b      	ldr	r3, [r3, #4]
 800d956:	005b      	lsls	r3, r3, #1
 800d958:	fbb1 f3f3 	udiv	r3, r1, r3
 800d95c:	3301      	adds	r3, #1
 800d95e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d962:	2b04      	cmp	r3, #4
 800d964:	bf38      	it	cc
 800d966:	2304      	movcc	r3, #4
 800d968:	e062      	b.n	800da30 <HAL_I2C_Init+0x2dc>
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	689b      	ldr	r3, [r3, #8]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d111      	bne.n	800d996 <HAL_I2C_Init+0x242>
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	1e58      	subs	r0, r3, #1
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6859      	ldr	r1, [r3, #4]
 800d97a:	460b      	mov	r3, r1
 800d97c:	005b      	lsls	r3, r3, #1
 800d97e:	440b      	add	r3, r1
 800d980:	fbb0 f3f3 	udiv	r3, r0, r3
 800d984:	3301      	adds	r3, #1
 800d986:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	bf0c      	ite	eq
 800d98e:	2301      	moveq	r3, #1
 800d990:	2300      	movne	r3, #0
 800d992:	b2db      	uxtb	r3, r3
 800d994:	e012      	b.n	800d9bc <HAL_I2C_Init+0x268>
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	1e58      	subs	r0, r3, #1
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6859      	ldr	r1, [r3, #4]
 800d99e:	460b      	mov	r3, r1
 800d9a0:	009b      	lsls	r3, r3, #2
 800d9a2:	440b      	add	r3, r1
 800d9a4:	0099      	lsls	r1, r3, #2
 800d9a6:	440b      	add	r3, r1
 800d9a8:	fbb0 f3f3 	udiv	r3, r0, r3
 800d9ac:	3301      	adds	r3, #1
 800d9ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	bf0c      	ite	eq
 800d9b6:	2301      	moveq	r3, #1
 800d9b8:	2300      	movne	r3, #0
 800d9ba:	b2db      	uxtb	r3, r3
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d001      	beq.n	800d9c4 <HAL_I2C_Init+0x270>
 800d9c0:	2301      	movs	r3, #1
 800d9c2:	e035      	b.n	800da30 <HAL_I2C_Init+0x2dc>
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	689b      	ldr	r3, [r3, #8]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d121      	bne.n	800da10 <HAL_I2C_Init+0x2bc>
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	1e58      	subs	r0, r3, #1
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6859      	ldr	r1, [r3, #4]
 800d9d4:	460b      	mov	r3, r1
 800d9d6:	005b      	lsls	r3, r3, #1
 800d9d8:	440b      	add	r3, r1
 800d9da:	fbb0 f3f3 	udiv	r3, r0, r3
 800d9de:	3301      	adds	r3, #1
 800d9e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d9e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d9e8:	e022      	b.n	800da30 <HAL_I2C_Init+0x2dc>
 800d9ea:	bf00      	nop
 800d9ec:	40005400 	.word	0x40005400
 800d9f0:	40005800 	.word	0x40005800
 800d9f4:	08012830 	.word	0x08012830
 800d9f8:	00061a80 	.word	0x00061a80
 800d9fc:	000186a0 	.word	0x000186a0
 800da00:	001e847f 	.word	0x001e847f
 800da04:	003d08ff 	.word	0x003d08ff
 800da08:	431bde83 	.word	0x431bde83
 800da0c:	10624dd3 	.word	0x10624dd3
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	1e58      	subs	r0, r3, #1
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6859      	ldr	r1, [r3, #4]
 800da18:	460b      	mov	r3, r1
 800da1a:	009b      	lsls	r3, r3, #2
 800da1c:	440b      	add	r3, r1
 800da1e:	0099      	lsls	r1, r3, #2
 800da20:	440b      	add	r3, r1
 800da22:	fbb0 f3f3 	udiv	r3, r0, r3
 800da26:	3301      	adds	r3, #1
 800da28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800da2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800da30:	6879      	ldr	r1, [r7, #4]
 800da32:	6809      	ldr	r1, [r1, #0]
 800da34:	4313      	orrs	r3, r2
 800da36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	69da      	ldr	r2, [r3, #28]
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6a1b      	ldr	r3, [r3, #32]
 800da4a:	431a      	orrs	r2, r3
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	430a      	orrs	r2, r1
 800da52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	689b      	ldr	r3, [r3, #8]
 800da5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800da5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800da62:	687a      	ldr	r2, [r7, #4]
 800da64:	6911      	ldr	r1, [r2, #16]
 800da66:	687a      	ldr	r2, [r7, #4]
 800da68:	68d2      	ldr	r2, [r2, #12]
 800da6a:	4311      	orrs	r1, r2
 800da6c:	687a      	ldr	r2, [r7, #4]
 800da6e:	6812      	ldr	r2, [r2, #0]
 800da70:	430b      	orrs	r3, r1
 800da72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	68db      	ldr	r3, [r3, #12]
 800da7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	695a      	ldr	r2, [r3, #20]
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	699b      	ldr	r3, [r3, #24]
 800da86:	431a      	orrs	r2, r3
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	430a      	orrs	r2, r1
 800da8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	681a      	ldr	r2, [r3, #0]
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	f042 0201 	orr.w	r2, r2, #1
 800da9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2200      	movs	r2, #0
 800daa4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2220      	movs	r2, #32
 800daaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2200      	movs	r2, #0
 800dab2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2200      	movs	r2, #0
 800dab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800dabc:	2300      	movs	r3, #0
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3710      	adds	r7, #16
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
 800dac6:	bf00      	nop

0800dac8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b088      	sub	sp, #32
 800dacc:	af02      	add	r7, sp, #8
 800dace:	60f8      	str	r0, [r7, #12]
 800dad0:	607a      	str	r2, [r7, #4]
 800dad2:	461a      	mov	r2, r3
 800dad4:	460b      	mov	r3, r1
 800dad6:	817b      	strh	r3, [r7, #10]
 800dad8:	4613      	mov	r3, r2
 800dada:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800dadc:	f7fe fb4c 	bl	800c178 <HAL_GetTick>
 800dae0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dae8:	b2db      	uxtb	r3, r3
 800daea:	2b20      	cmp	r3, #32
 800daec:	f040 80e0 	bne.w	800dcb0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	9300      	str	r3, [sp, #0]
 800daf4:	2319      	movs	r3, #25
 800daf6:	2201      	movs	r2, #1
 800daf8:	4970      	ldr	r1, [pc, #448]	; (800dcbc <HAL_I2C_Master_Transmit+0x1f4>)
 800dafa:	68f8      	ldr	r0, [r7, #12]
 800dafc:	f000 fc8c 	bl	800e418 <I2C_WaitOnFlagUntilTimeout>
 800db00:	4603      	mov	r3, r0
 800db02:	2b00      	cmp	r3, #0
 800db04:	d001      	beq.n	800db0a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800db06:	2302      	movs	r3, #2
 800db08:	e0d3      	b.n	800dcb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db10:	2b01      	cmp	r3, #1
 800db12:	d101      	bne.n	800db18 <HAL_I2C_Master_Transmit+0x50>
 800db14:	2302      	movs	r3, #2
 800db16:	e0cc      	b.n	800dcb2 <HAL_I2C_Master_Transmit+0x1ea>
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	2201      	movs	r2, #1
 800db1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	f003 0301 	and.w	r3, r3, #1
 800db2a:	2b01      	cmp	r3, #1
 800db2c:	d007      	beq.n	800db3e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	681a      	ldr	r2, [r3, #0]
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	f042 0201 	orr.w	r2, r2, #1
 800db3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	681a      	ldr	r2, [r3, #0]
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800db4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	2221      	movs	r2, #33	; 0x21
 800db52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	2210      	movs	r2, #16
 800db5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	2200      	movs	r2, #0
 800db62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	687a      	ldr	r2, [r7, #4]
 800db68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	893a      	ldrh	r2, [r7, #8]
 800db6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db74:	b29a      	uxth	r2, r3
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	4a50      	ldr	r2, [pc, #320]	; (800dcc0 <HAL_I2C_Master_Transmit+0x1f8>)
 800db7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800db80:	8979      	ldrh	r1, [r7, #10]
 800db82:	697b      	ldr	r3, [r7, #20]
 800db84:	6a3a      	ldr	r2, [r7, #32]
 800db86:	68f8      	ldr	r0, [r7, #12]
 800db88:	f000 faf6 	bl	800e178 <I2C_MasterRequestWrite>
 800db8c:	4603      	mov	r3, r0
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d001      	beq.n	800db96 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800db92:	2301      	movs	r3, #1
 800db94:	e08d      	b.n	800dcb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800db96:	2300      	movs	r3, #0
 800db98:	613b      	str	r3, [r7, #16]
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	695b      	ldr	r3, [r3, #20]
 800dba0:	613b      	str	r3, [r7, #16]
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	699b      	ldr	r3, [r3, #24]
 800dba8:	613b      	str	r3, [r7, #16]
 800dbaa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800dbac:	e066      	b.n	800dc7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dbae:	697a      	ldr	r2, [r7, #20]
 800dbb0:	6a39      	ldr	r1, [r7, #32]
 800dbb2:	68f8      	ldr	r0, [r7, #12]
 800dbb4:	f000 fd06 	bl	800e5c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d00d      	beq.n	800dbda <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbc2:	2b04      	cmp	r3, #4
 800dbc4:	d107      	bne.n	800dbd6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	681a      	ldr	r2, [r3, #0]
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dbd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	e06b      	b.n	800dcb2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbde:	781a      	ldrb	r2, [r3, #0]
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbea:	1c5a      	adds	r2, r3, #1
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dbf4:	b29b      	uxth	r3, r3
 800dbf6:	3b01      	subs	r3, #1
 800dbf8:	b29a      	uxth	r2, r3
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc02:	3b01      	subs	r3, #1
 800dc04:	b29a      	uxth	r2, r3
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	695b      	ldr	r3, [r3, #20]
 800dc10:	f003 0304 	and.w	r3, r3, #4
 800dc14:	2b04      	cmp	r3, #4
 800dc16:	d11b      	bne.n	800dc50 <HAL_I2C_Master_Transmit+0x188>
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d017      	beq.n	800dc50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc24:	781a      	ldrb	r2, [r3, #0]
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc30:	1c5a      	adds	r2, r3, #1
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc3a:	b29b      	uxth	r3, r3
 800dc3c:	3b01      	subs	r3, #1
 800dc3e:	b29a      	uxth	r2, r3
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc48:	3b01      	subs	r3, #1
 800dc4a:	b29a      	uxth	r2, r3
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dc50:	697a      	ldr	r2, [r7, #20]
 800dc52:	6a39      	ldr	r1, [r7, #32]
 800dc54:	68f8      	ldr	r0, [r7, #12]
 800dc56:	f000 fcf6 	bl	800e646 <I2C_WaitOnBTFFlagUntilTimeout>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d00d      	beq.n	800dc7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc64:	2b04      	cmp	r3, #4
 800dc66:	d107      	bne.n	800dc78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	681a      	ldr	r2, [r3, #0]
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dc76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800dc78:	2301      	movs	r3, #1
 800dc7a:	e01a      	b.n	800dcb2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d194      	bne.n	800dbae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	681a      	ldr	r2, [r3, #0]
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dc92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	2220      	movs	r2, #32
 800dc98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	2200      	movs	r2, #0
 800dca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	2200      	movs	r2, #0
 800dca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800dcac:	2300      	movs	r3, #0
 800dcae:	e000      	b.n	800dcb2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800dcb0:	2302      	movs	r3, #2
  }
}
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	3718      	adds	r7, #24
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bd80      	pop	{r7, pc}
 800dcba:	bf00      	nop
 800dcbc:	00100002 	.word	0x00100002
 800dcc0:	ffff0000 	.word	0xffff0000

0800dcc4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b08c      	sub	sp, #48	; 0x30
 800dcc8:	af02      	add	r7, sp, #8
 800dcca:	60f8      	str	r0, [r7, #12]
 800dccc:	607a      	str	r2, [r7, #4]
 800dcce:	461a      	mov	r2, r3
 800dcd0:	460b      	mov	r3, r1
 800dcd2:	817b      	strh	r3, [r7, #10]
 800dcd4:	4613      	mov	r3, r2
 800dcd6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800dcd8:	2300      	movs	r3, #0
 800dcda:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800dcdc:	f7fe fa4c 	bl	800c178 <HAL_GetTick>
 800dce0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dce8:	b2db      	uxtb	r3, r3
 800dcea:	2b20      	cmp	r3, #32
 800dcec:	f040 8238 	bne.w	800e160 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800dcf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf2:	9300      	str	r3, [sp, #0]
 800dcf4:	2319      	movs	r3, #25
 800dcf6:	2201      	movs	r2, #1
 800dcf8:	497e      	ldr	r1, [pc, #504]	; (800def4 <HAL_I2C_Master_Receive+0x230>)
 800dcfa:	68f8      	ldr	r0, [r7, #12]
 800dcfc:	f000 fb8c 	bl	800e418 <I2C_WaitOnFlagUntilTimeout>
 800dd00:	4603      	mov	r3, r0
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d001      	beq.n	800dd0a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800dd06:	2302      	movs	r3, #2
 800dd08:	e22b      	b.n	800e162 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd10:	2b01      	cmp	r3, #1
 800dd12:	d101      	bne.n	800dd18 <HAL_I2C_Master_Receive+0x54>
 800dd14:	2302      	movs	r3, #2
 800dd16:	e224      	b.n	800e162 <HAL_I2C_Master_Receive+0x49e>
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	2201      	movs	r2, #1
 800dd1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	f003 0301 	and.w	r3, r3, #1
 800dd2a:	2b01      	cmp	r3, #1
 800dd2c:	d007      	beq.n	800dd3e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	681a      	ldr	r2, [r3, #0]
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	f042 0201 	orr.w	r2, r2, #1
 800dd3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	681a      	ldr	r2, [r3, #0]
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dd4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	2222      	movs	r2, #34	; 0x22
 800dd52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	2210      	movs	r2, #16
 800dd5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	2200      	movs	r2, #0
 800dd62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	687a      	ldr	r2, [r7, #4]
 800dd68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	893a      	ldrh	r2, [r7, #8]
 800dd6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd74:	b29a      	uxth	r2, r3
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	4a5e      	ldr	r2, [pc, #376]	; (800def8 <HAL_I2C_Master_Receive+0x234>)
 800dd7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800dd80:	8979      	ldrh	r1, [r7, #10]
 800dd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd86:	68f8      	ldr	r0, [r7, #12]
 800dd88:	f000 fa78 	bl	800e27c <I2C_MasterRequestRead>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d001      	beq.n	800dd96 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800dd92:	2301      	movs	r3, #1
 800dd94:	e1e5      	b.n	800e162 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d113      	bne.n	800ddc6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dd9e:	2300      	movs	r3, #0
 800dda0:	61fb      	str	r3, [r7, #28]
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	695b      	ldr	r3, [r3, #20]
 800dda8:	61fb      	str	r3, [r7, #28]
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	699b      	ldr	r3, [r3, #24]
 800ddb0:	61fb      	str	r3, [r7, #28]
 800ddb2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	681a      	ldr	r2, [r3, #0]
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ddc2:	601a      	str	r2, [r3, #0]
 800ddc4:	e1b9      	b.n	800e13a <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddca:	2b01      	cmp	r3, #1
 800ddcc:	d11d      	bne.n	800de0a <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	681a      	ldr	r2, [r3, #0]
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dddc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800ddde:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dde0:	2300      	movs	r3, #0
 800dde2:	61bb      	str	r3, [r7, #24]
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	695b      	ldr	r3, [r3, #20]
 800ddea:	61bb      	str	r3, [r7, #24]
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	699b      	ldr	r3, [r3, #24]
 800ddf2:	61bb      	str	r3, [r7, #24]
 800ddf4:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	681a      	ldr	r2, [r3, #0]
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800de04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800de06:	b662      	cpsie	i
 800de08:	e197      	b.n	800e13a <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de0e:	2b02      	cmp	r3, #2
 800de10:	d11d      	bne.n	800de4e <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	681a      	ldr	r2, [r3, #0]
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800de20:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800de22:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800de24:	2300      	movs	r3, #0
 800de26:	617b      	str	r3, [r7, #20]
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	695b      	ldr	r3, [r3, #20]
 800de2e:	617b      	str	r3, [r7, #20]
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	699b      	ldr	r3, [r3, #24]
 800de36:	617b      	str	r3, [r7, #20]
 800de38:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	681a      	ldr	r2, [r3, #0]
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800de48:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800de4a:	b662      	cpsie	i
 800de4c:	e175      	b.n	800e13a <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	681a      	ldr	r2, [r3, #0]
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800de5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800de5e:	2300      	movs	r3, #0
 800de60:	613b      	str	r3, [r7, #16]
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	695b      	ldr	r3, [r3, #20]
 800de68:	613b      	str	r3, [r7, #16]
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	699b      	ldr	r3, [r3, #24]
 800de70:	613b      	str	r3, [r7, #16]
 800de72:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800de74:	e161      	b.n	800e13a <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de7a:	2b03      	cmp	r3, #3
 800de7c:	f200 811a 	bhi.w	800e0b4 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de84:	2b01      	cmp	r3, #1
 800de86:	d123      	bne.n	800ded0 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800de88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800de8c:	68f8      	ldr	r0, [r7, #12]
 800de8e:	f000 fc1b 	bl	800e6c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800de92:	4603      	mov	r3, r0
 800de94:	2b00      	cmp	r3, #0
 800de96:	d001      	beq.n	800de9c <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 800de98:	2301      	movs	r3, #1
 800de9a:	e162      	b.n	800e162 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	691a      	ldr	r2, [r3, #16]
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dea6:	b2d2      	uxtb	r2, r2
 800dea8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deae:	1c5a      	adds	r2, r3, #1
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800deb8:	3b01      	subs	r3, #1
 800deba:	b29a      	uxth	r2, r3
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dec4:	b29b      	uxth	r3, r3
 800dec6:	3b01      	subs	r3, #1
 800dec8:	b29a      	uxth	r2, r3
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dece:	e134      	b.n	800e13a <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ded4:	2b02      	cmp	r3, #2
 800ded6:	d150      	bne.n	800df7a <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ded8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deda:	9300      	str	r3, [sp, #0]
 800dedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dede:	2200      	movs	r2, #0
 800dee0:	4906      	ldr	r1, [pc, #24]	; (800defc <HAL_I2C_Master_Receive+0x238>)
 800dee2:	68f8      	ldr	r0, [r7, #12]
 800dee4:	f000 fa98 	bl	800e418 <I2C_WaitOnFlagUntilTimeout>
 800dee8:	4603      	mov	r3, r0
 800deea:	2b00      	cmp	r3, #0
 800deec:	d008      	beq.n	800df00 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 800deee:	2301      	movs	r3, #1
 800def0:	e137      	b.n	800e162 <HAL_I2C_Master_Receive+0x49e>
 800def2:	bf00      	nop
 800def4:	00100002 	.word	0x00100002
 800def8:	ffff0000 	.word	0xffff0000
 800defc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800df00:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	681a      	ldr	r2, [r3, #0]
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800df10:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	691a      	ldr	r2, [r3, #16]
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df1c:	b2d2      	uxtb	r2, r2
 800df1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df24:	1c5a      	adds	r2, r3, #1
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df2e:	3b01      	subs	r3, #1
 800df30:	b29a      	uxth	r2, r3
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df3a:	b29b      	uxth	r3, r3
 800df3c:	3b01      	subs	r3, #1
 800df3e:	b29a      	uxth	r2, r3
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800df44:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	691a      	ldr	r2, [r3, #16]
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df50:	b2d2      	uxtb	r2, r2
 800df52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df58:	1c5a      	adds	r2, r3, #1
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df62:	3b01      	subs	r3, #1
 800df64:	b29a      	uxth	r2, r3
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df6e:	b29b      	uxth	r3, r3
 800df70:	3b01      	subs	r3, #1
 800df72:	b29a      	uxth	r2, r3
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	855a      	strh	r2, [r3, #42]	; 0x2a
 800df78:	e0df      	b.n	800e13a <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800df7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df7c:	9300      	str	r3, [sp, #0]
 800df7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df80:	2200      	movs	r2, #0
 800df82:	497a      	ldr	r1, [pc, #488]	; (800e16c <HAL_I2C_Master_Receive+0x4a8>)
 800df84:	68f8      	ldr	r0, [r7, #12]
 800df86:	f000 fa47 	bl	800e418 <I2C_WaitOnFlagUntilTimeout>
 800df8a:	4603      	mov	r3, r0
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d001      	beq.n	800df94 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 800df90:	2301      	movs	r3, #1
 800df92:	e0e6      	b.n	800e162 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	681a      	ldr	r2, [r3, #0]
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dfa2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800dfa4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	691a      	ldr	r2, [r3, #16]
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfb0:	b2d2      	uxtb	r2, r2
 800dfb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfb8:	1c5a      	adds	r2, r3, #1
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dfc2:	3b01      	subs	r3, #1
 800dfc4:	b29a      	uxth	r2, r3
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dfce:	b29b      	uxth	r3, r3
 800dfd0:	3b01      	subs	r3, #1
 800dfd2:	b29a      	uxth	r2, r3
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800dfd8:	4b65      	ldr	r3, [pc, #404]	; (800e170 <HAL_I2C_Master_Receive+0x4ac>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	08db      	lsrs	r3, r3, #3
 800dfde:	4a65      	ldr	r2, [pc, #404]	; (800e174 <HAL_I2C_Master_Receive+0x4b0>)
 800dfe0:	fba2 2303 	umull	r2, r3, r2, r3
 800dfe4:	0a1a      	lsrs	r2, r3, #8
 800dfe6:	4613      	mov	r3, r2
 800dfe8:	009b      	lsls	r3, r3, #2
 800dfea:	4413      	add	r3, r2
 800dfec:	00da      	lsls	r2, r3, #3
 800dfee:	1ad3      	subs	r3, r2, r3
 800dff0:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800dff2:	6a3b      	ldr	r3, [r7, #32]
 800dff4:	3b01      	subs	r3, #1
 800dff6:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800dff8:	6a3b      	ldr	r3, [r7, #32]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d117      	bne.n	800e02e <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	2200      	movs	r2, #0
 800e002:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	2220      	movs	r2, #32
 800e008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	2200      	movs	r2, #0
 800e010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e018:	f043 0220 	orr.w	r2, r3, #32
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800e020:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	2200      	movs	r2, #0
 800e026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800e02a:	2301      	movs	r3, #1
 800e02c:	e099      	b.n	800e162 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	695b      	ldr	r3, [r3, #20]
 800e034:	f003 0304 	and.w	r3, r3, #4
 800e038:	2b04      	cmp	r3, #4
 800e03a:	d1da      	bne.n	800dff2 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	681a      	ldr	r2, [r3, #0]
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e04a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	691a      	ldr	r2, [r3, #16]
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e056:	b2d2      	uxtb	r2, r2
 800e058:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e05e:	1c5a      	adds	r2, r3, #1
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e068:	3b01      	subs	r3, #1
 800e06a:	b29a      	uxth	r2, r3
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e074:	b29b      	uxth	r3, r3
 800e076:	3b01      	subs	r3, #1
 800e078:	b29a      	uxth	r2, r3
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e07e:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	691a      	ldr	r2, [r3, #16]
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e08a:	b2d2      	uxtb	r2, r2
 800e08c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e092:	1c5a      	adds	r2, r3, #1
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e09c:	3b01      	subs	r3, #1
 800e09e:	b29a      	uxth	r2, r3
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0a8:	b29b      	uxth	r3, r3
 800e0aa:	3b01      	subs	r3, #1
 800e0ac:	b29a      	uxth	r2, r3
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e0b2:	e042      	b.n	800e13a <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e0b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e0b8:	68f8      	ldr	r0, [r7, #12]
 800e0ba:	f000 fb05 	bl	800e6c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d001      	beq.n	800e0c8 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	e04c      	b.n	800e162 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	691a      	ldr	r2, [r3, #16]
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0d2:	b2d2      	uxtb	r2, r2
 800e0d4:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0da:	1c5a      	adds	r2, r3, #1
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0e4:	3b01      	subs	r3, #1
 800e0e6:	b29a      	uxth	r2, r3
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0f0:	b29b      	uxth	r3, r3
 800e0f2:	3b01      	subs	r3, #1
 800e0f4:	b29a      	uxth	r2, r3
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	695b      	ldr	r3, [r3, #20]
 800e100:	f003 0304 	and.w	r3, r3, #4
 800e104:	2b04      	cmp	r3, #4
 800e106:	d118      	bne.n	800e13a <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	691a      	ldr	r2, [r3, #16]
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e112:	b2d2      	uxtb	r2, r2
 800e114:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e11a:	1c5a      	adds	r2, r3, #1
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e124:	3b01      	subs	r3, #1
 800e126:	b29a      	uxth	r2, r3
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e130:	b29b      	uxth	r3, r3
 800e132:	3b01      	subs	r3, #1
 800e134:	b29a      	uxth	r2, r3
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e13e:	2b00      	cmp	r3, #0
 800e140:	f47f ae99 	bne.w	800de76 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	2220      	movs	r2, #32
 800e148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	2200      	movs	r2, #0
 800e150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2200      	movs	r2, #0
 800e158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800e15c:	2300      	movs	r3, #0
 800e15e:	e000      	b.n	800e162 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 800e160:	2302      	movs	r3, #2
  }
}
 800e162:	4618      	mov	r0, r3
 800e164:	3728      	adds	r7, #40	; 0x28
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}
 800e16a:	bf00      	nop
 800e16c:	00010004 	.word	0x00010004
 800e170:	2000009c 	.word	0x2000009c
 800e174:	14f8b589 	.word	0x14f8b589

0800e178 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b088      	sub	sp, #32
 800e17c:	af02      	add	r7, sp, #8
 800e17e:	60f8      	str	r0, [r7, #12]
 800e180:	607a      	str	r2, [r7, #4]
 800e182:	603b      	str	r3, [r7, #0]
 800e184:	460b      	mov	r3, r1
 800e186:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e18c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	2b08      	cmp	r3, #8
 800e192:	d006      	beq.n	800e1a2 <I2C_MasterRequestWrite+0x2a>
 800e194:	697b      	ldr	r3, [r7, #20]
 800e196:	2b01      	cmp	r3, #1
 800e198:	d003      	beq.n	800e1a2 <I2C_MasterRequestWrite+0x2a>
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e1a0:	d108      	bne.n	800e1b4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	681a      	ldr	r2, [r3, #0]
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e1b0:	601a      	str	r2, [r3, #0]
 800e1b2:	e00b      	b.n	800e1cc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1b8:	2b12      	cmp	r3, #18
 800e1ba:	d107      	bne.n	800e1cc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	681a      	ldr	r2, [r3, #0]
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e1ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	9300      	str	r3, [sp, #0]
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e1d8:	68f8      	ldr	r0, [r7, #12]
 800e1da:	f000 f91d 	bl	800e418 <I2C_WaitOnFlagUntilTimeout>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d00d      	beq.n	800e200 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e1f2:	d103      	bne.n	800e1fc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e1fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e1fc:	2303      	movs	r3, #3
 800e1fe:	e035      	b.n	800e26c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	691b      	ldr	r3, [r3, #16]
 800e204:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e208:	d108      	bne.n	800e21c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e20a:	897b      	ldrh	r3, [r7, #10]
 800e20c:	b2db      	uxtb	r3, r3
 800e20e:	461a      	mov	r2, r3
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e218:	611a      	str	r2, [r3, #16]
 800e21a:	e01b      	b.n	800e254 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e21c:	897b      	ldrh	r3, [r7, #10]
 800e21e:	11db      	asrs	r3, r3, #7
 800e220:	b2db      	uxtb	r3, r3
 800e222:	f003 0306 	and.w	r3, r3, #6
 800e226:	b2db      	uxtb	r3, r3
 800e228:	f063 030f 	orn	r3, r3, #15
 800e22c:	b2da      	uxtb	r2, r3
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	687a      	ldr	r2, [r7, #4]
 800e238:	490e      	ldr	r1, [pc, #56]	; (800e274 <I2C_MasterRequestWrite+0xfc>)
 800e23a:	68f8      	ldr	r0, [r7, #12]
 800e23c:	f000 f943 	bl	800e4c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e240:	4603      	mov	r3, r0
 800e242:	2b00      	cmp	r3, #0
 800e244:	d001      	beq.n	800e24a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800e246:	2301      	movs	r3, #1
 800e248:	e010      	b.n	800e26c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e24a:	897b      	ldrh	r3, [r7, #10]
 800e24c:	b2da      	uxtb	r2, r3
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	687a      	ldr	r2, [r7, #4]
 800e258:	4907      	ldr	r1, [pc, #28]	; (800e278 <I2C_MasterRequestWrite+0x100>)
 800e25a:	68f8      	ldr	r0, [r7, #12]
 800e25c:	f000 f933 	bl	800e4c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e260:	4603      	mov	r3, r0
 800e262:	2b00      	cmp	r3, #0
 800e264:	d001      	beq.n	800e26a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800e266:	2301      	movs	r3, #1
 800e268:	e000      	b.n	800e26c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800e26a:	2300      	movs	r3, #0
}
 800e26c:	4618      	mov	r0, r3
 800e26e:	3718      	adds	r7, #24
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}
 800e274:	00010008 	.word	0x00010008
 800e278:	00010002 	.word	0x00010002

0800e27c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b088      	sub	sp, #32
 800e280:	af02      	add	r7, sp, #8
 800e282:	60f8      	str	r0, [r7, #12]
 800e284:	607a      	str	r2, [r7, #4]
 800e286:	603b      	str	r3, [r7, #0]
 800e288:	460b      	mov	r3, r1
 800e28a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e290:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	681a      	ldr	r2, [r3, #0]
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e2a0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e2a2:	697b      	ldr	r3, [r7, #20]
 800e2a4:	2b08      	cmp	r3, #8
 800e2a6:	d006      	beq.n	800e2b6 <I2C_MasterRequestRead+0x3a>
 800e2a8:	697b      	ldr	r3, [r7, #20]
 800e2aa:	2b01      	cmp	r3, #1
 800e2ac:	d003      	beq.n	800e2b6 <I2C_MasterRequestRead+0x3a>
 800e2ae:	697b      	ldr	r3, [r7, #20]
 800e2b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e2b4:	d108      	bne.n	800e2c8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	681a      	ldr	r2, [r3, #0]
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e2c4:	601a      	str	r2, [r3, #0]
 800e2c6:	e00b      	b.n	800e2e0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2cc:	2b11      	cmp	r3, #17
 800e2ce:	d107      	bne.n	800e2e0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	681a      	ldr	r2, [r3, #0]
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e2de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	9300      	str	r3, [sp, #0]
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e2ec:	68f8      	ldr	r0, [r7, #12]
 800e2ee:	f000 f893 	bl	800e418 <I2C_WaitOnFlagUntilTimeout>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d00d      	beq.n	800e314 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e306:	d103      	bne.n	800e310 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e30e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e310:	2303      	movs	r3, #3
 800e312:	e079      	b.n	800e408 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	691b      	ldr	r3, [r3, #16]
 800e318:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e31c:	d108      	bne.n	800e330 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e31e:	897b      	ldrh	r3, [r7, #10]
 800e320:	b2db      	uxtb	r3, r3
 800e322:	f043 0301 	orr.w	r3, r3, #1
 800e326:	b2da      	uxtb	r2, r3
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	611a      	str	r2, [r3, #16]
 800e32e:	e05f      	b.n	800e3f0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e330:	897b      	ldrh	r3, [r7, #10]
 800e332:	11db      	asrs	r3, r3, #7
 800e334:	b2db      	uxtb	r3, r3
 800e336:	f003 0306 	and.w	r3, r3, #6
 800e33a:	b2db      	uxtb	r3, r3
 800e33c:	f063 030f 	orn	r3, r3, #15
 800e340:	b2da      	uxtb	r2, r3
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	687a      	ldr	r2, [r7, #4]
 800e34c:	4930      	ldr	r1, [pc, #192]	; (800e410 <I2C_MasterRequestRead+0x194>)
 800e34e:	68f8      	ldr	r0, [r7, #12]
 800e350:	f000 f8b9 	bl	800e4c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e354:	4603      	mov	r3, r0
 800e356:	2b00      	cmp	r3, #0
 800e358:	d001      	beq.n	800e35e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800e35a:	2301      	movs	r3, #1
 800e35c:	e054      	b.n	800e408 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e35e:	897b      	ldrh	r3, [r7, #10]
 800e360:	b2da      	uxtb	r2, r3
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	687a      	ldr	r2, [r7, #4]
 800e36c:	4929      	ldr	r1, [pc, #164]	; (800e414 <I2C_MasterRequestRead+0x198>)
 800e36e:	68f8      	ldr	r0, [r7, #12]
 800e370:	f000 f8a9 	bl	800e4c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e374:	4603      	mov	r3, r0
 800e376:	2b00      	cmp	r3, #0
 800e378:	d001      	beq.n	800e37e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800e37a:	2301      	movs	r3, #1
 800e37c:	e044      	b.n	800e408 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e37e:	2300      	movs	r3, #0
 800e380:	613b      	str	r3, [r7, #16]
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	695b      	ldr	r3, [r3, #20]
 800e388:	613b      	str	r3, [r7, #16]
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	699b      	ldr	r3, [r3, #24]
 800e390:	613b      	str	r3, [r7, #16]
 800e392:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	681a      	ldr	r2, [r3, #0]
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e3a2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	9300      	str	r3, [sp, #0]
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e3b0:	68f8      	ldr	r0, [r7, #12]
 800e3b2:	f000 f831 	bl	800e418 <I2C_WaitOnFlagUntilTimeout>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d00d      	beq.n	800e3d8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3ca:	d103      	bne.n	800e3d4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e3d2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800e3d4:	2303      	movs	r3, #3
 800e3d6:	e017      	b.n	800e408 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800e3d8:	897b      	ldrh	r3, [r7, #10]
 800e3da:	11db      	asrs	r3, r3, #7
 800e3dc:	b2db      	uxtb	r3, r3
 800e3de:	f003 0306 	and.w	r3, r3, #6
 800e3e2:	b2db      	uxtb	r3, r3
 800e3e4:	f063 030e 	orn	r3, r3, #14
 800e3e8:	b2da      	uxtb	r2, r3
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	687a      	ldr	r2, [r7, #4]
 800e3f4:	4907      	ldr	r1, [pc, #28]	; (800e414 <I2C_MasterRequestRead+0x198>)
 800e3f6:	68f8      	ldr	r0, [r7, #12]
 800e3f8:	f000 f865 	bl	800e4c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d001      	beq.n	800e406 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800e402:	2301      	movs	r3, #1
 800e404:	e000      	b.n	800e408 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800e406:	2300      	movs	r3, #0
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3718      	adds	r7, #24
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}
 800e410:	00010008 	.word	0x00010008
 800e414:	00010002 	.word	0x00010002

0800e418 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b084      	sub	sp, #16
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	60f8      	str	r0, [r7, #12]
 800e420:	60b9      	str	r1, [r7, #8]
 800e422:	603b      	str	r3, [r7, #0]
 800e424:	4613      	mov	r3, r2
 800e426:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e428:	e025      	b.n	800e476 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e430:	d021      	beq.n	800e476 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e432:	f7fd fea1 	bl	800c178 <HAL_GetTick>
 800e436:	4602      	mov	r2, r0
 800e438:	69bb      	ldr	r3, [r7, #24]
 800e43a:	1ad3      	subs	r3, r2, r3
 800e43c:	683a      	ldr	r2, [r7, #0]
 800e43e:	429a      	cmp	r2, r3
 800e440:	d302      	bcc.n	800e448 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d116      	bne.n	800e476 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	2200      	movs	r2, #0
 800e44c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	2220      	movs	r2, #32
 800e452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	2200      	movs	r2, #0
 800e45a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e462:	f043 0220 	orr.w	r2, r3, #32
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	2200      	movs	r2, #0
 800e46e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e472:	2301      	movs	r3, #1
 800e474:	e023      	b.n	800e4be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	0c1b      	lsrs	r3, r3, #16
 800e47a:	b2db      	uxtb	r3, r3
 800e47c:	2b01      	cmp	r3, #1
 800e47e:	d10d      	bne.n	800e49c <I2C_WaitOnFlagUntilTimeout+0x84>
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	695b      	ldr	r3, [r3, #20]
 800e486:	43da      	mvns	r2, r3
 800e488:	68bb      	ldr	r3, [r7, #8]
 800e48a:	4013      	ands	r3, r2
 800e48c:	b29b      	uxth	r3, r3
 800e48e:	2b00      	cmp	r3, #0
 800e490:	bf0c      	ite	eq
 800e492:	2301      	moveq	r3, #1
 800e494:	2300      	movne	r3, #0
 800e496:	b2db      	uxtb	r3, r3
 800e498:	461a      	mov	r2, r3
 800e49a:	e00c      	b.n	800e4b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	699b      	ldr	r3, [r3, #24]
 800e4a2:	43da      	mvns	r2, r3
 800e4a4:	68bb      	ldr	r3, [r7, #8]
 800e4a6:	4013      	ands	r3, r2
 800e4a8:	b29b      	uxth	r3, r3
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	bf0c      	ite	eq
 800e4ae:	2301      	moveq	r3, #1
 800e4b0:	2300      	movne	r3, #0
 800e4b2:	b2db      	uxtb	r3, r3
 800e4b4:	461a      	mov	r2, r3
 800e4b6:	79fb      	ldrb	r3, [r7, #7]
 800e4b8:	429a      	cmp	r2, r3
 800e4ba:	d0b6      	beq.n	800e42a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e4bc:	2300      	movs	r3, #0
}
 800e4be:	4618      	mov	r0, r3
 800e4c0:	3710      	adds	r7, #16
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}

0800e4c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800e4c6:	b580      	push	{r7, lr}
 800e4c8:	b084      	sub	sp, #16
 800e4ca:	af00      	add	r7, sp, #0
 800e4cc:	60f8      	str	r0, [r7, #12]
 800e4ce:	60b9      	str	r1, [r7, #8]
 800e4d0:	607a      	str	r2, [r7, #4]
 800e4d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e4d4:	e051      	b.n	800e57a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	695b      	ldr	r3, [r3, #20]
 800e4dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e4e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e4e4:	d123      	bne.n	800e52e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	681a      	ldr	r2, [r3, #0]
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e4f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e4fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	2200      	movs	r2, #0
 800e504:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	2220      	movs	r2, #32
 800e50a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	2200      	movs	r2, #0
 800e512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e51a:	f043 0204 	orr.w	r2, r3, #4
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	2200      	movs	r2, #0
 800e526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e52a:	2301      	movs	r3, #1
 800e52c:	e046      	b.n	800e5bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e534:	d021      	beq.n	800e57a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e536:	f7fd fe1f 	bl	800c178 <HAL_GetTick>
 800e53a:	4602      	mov	r2, r0
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	1ad3      	subs	r3, r2, r3
 800e540:	687a      	ldr	r2, [r7, #4]
 800e542:	429a      	cmp	r2, r3
 800e544:	d302      	bcc.n	800e54c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d116      	bne.n	800e57a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	2200      	movs	r2, #0
 800e550:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	2220      	movs	r2, #32
 800e556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	2200      	movs	r2, #0
 800e55e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e566:	f043 0220 	orr.w	r2, r3, #32
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	2200      	movs	r2, #0
 800e572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e576:	2301      	movs	r3, #1
 800e578:	e020      	b.n	800e5bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	0c1b      	lsrs	r3, r3, #16
 800e57e:	b2db      	uxtb	r3, r3
 800e580:	2b01      	cmp	r3, #1
 800e582:	d10c      	bne.n	800e59e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	695b      	ldr	r3, [r3, #20]
 800e58a:	43da      	mvns	r2, r3
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	4013      	ands	r3, r2
 800e590:	b29b      	uxth	r3, r3
 800e592:	2b00      	cmp	r3, #0
 800e594:	bf14      	ite	ne
 800e596:	2301      	movne	r3, #1
 800e598:	2300      	moveq	r3, #0
 800e59a:	b2db      	uxtb	r3, r3
 800e59c:	e00b      	b.n	800e5b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	699b      	ldr	r3, [r3, #24]
 800e5a4:	43da      	mvns	r2, r3
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	4013      	ands	r3, r2
 800e5aa:	b29b      	uxth	r3, r3
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	bf14      	ite	ne
 800e5b0:	2301      	movne	r3, #1
 800e5b2:	2300      	moveq	r3, #0
 800e5b4:	b2db      	uxtb	r3, r3
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d18d      	bne.n	800e4d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800e5ba:	2300      	movs	r3, #0
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	3710      	adds	r7, #16
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}

0800e5c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b084      	sub	sp, #16
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	60f8      	str	r0, [r7, #12]
 800e5cc:	60b9      	str	r1, [r7, #8]
 800e5ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e5d0:	e02d      	b.n	800e62e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e5d2:	68f8      	ldr	r0, [r7, #12]
 800e5d4:	f000 f8ce 	bl	800e774 <I2C_IsAcknowledgeFailed>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d001      	beq.n	800e5e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e5de:	2301      	movs	r3, #1
 800e5e0:	e02d      	b.n	800e63e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5e8:	d021      	beq.n	800e62e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e5ea:	f7fd fdc5 	bl	800c178 <HAL_GetTick>
 800e5ee:	4602      	mov	r2, r0
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	1ad3      	subs	r3, r2, r3
 800e5f4:	68ba      	ldr	r2, [r7, #8]
 800e5f6:	429a      	cmp	r2, r3
 800e5f8:	d302      	bcc.n	800e600 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800e5fa:	68bb      	ldr	r3, [r7, #8]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d116      	bne.n	800e62e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	2200      	movs	r2, #0
 800e604:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	2220      	movs	r2, #32
 800e60a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	2200      	movs	r2, #0
 800e612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e61a:	f043 0220 	orr.w	r2, r3, #32
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	2200      	movs	r2, #0
 800e626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e62a:	2301      	movs	r3, #1
 800e62c:	e007      	b.n	800e63e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	695b      	ldr	r3, [r3, #20]
 800e634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e638:	2b80      	cmp	r3, #128	; 0x80
 800e63a:	d1ca      	bne.n	800e5d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e63c:	2300      	movs	r3, #0
}
 800e63e:	4618      	mov	r0, r3
 800e640:	3710      	adds	r7, #16
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}

0800e646 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e646:	b580      	push	{r7, lr}
 800e648:	b084      	sub	sp, #16
 800e64a:	af00      	add	r7, sp, #0
 800e64c:	60f8      	str	r0, [r7, #12]
 800e64e:	60b9      	str	r1, [r7, #8]
 800e650:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e652:	e02d      	b.n	800e6b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e654:	68f8      	ldr	r0, [r7, #12]
 800e656:	f000 f88d 	bl	800e774 <I2C_IsAcknowledgeFailed>
 800e65a:	4603      	mov	r3, r0
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d001      	beq.n	800e664 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e660:	2301      	movs	r3, #1
 800e662:	e02d      	b.n	800e6c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e66a:	d021      	beq.n	800e6b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e66c:	f7fd fd84 	bl	800c178 <HAL_GetTick>
 800e670:	4602      	mov	r2, r0
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	1ad3      	subs	r3, r2, r3
 800e676:	68ba      	ldr	r2, [r7, #8]
 800e678:	429a      	cmp	r2, r3
 800e67a:	d302      	bcc.n	800e682 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d116      	bne.n	800e6b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	2200      	movs	r2, #0
 800e686:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	2220      	movs	r2, #32
 800e68c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	2200      	movs	r2, #0
 800e694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e69c:	f043 0220 	orr.w	r2, r3, #32
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	e007      	b.n	800e6c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	695b      	ldr	r3, [r3, #20]
 800e6b6:	f003 0304 	and.w	r3, r3, #4
 800e6ba:	2b04      	cmp	r3, #4
 800e6bc:	d1ca      	bne.n	800e654 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e6be:	2300      	movs	r3, #0
}
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	3710      	adds	r7, #16
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}

0800e6c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b084      	sub	sp, #16
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	60f8      	str	r0, [r7, #12]
 800e6d0:	60b9      	str	r1, [r7, #8]
 800e6d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e6d4:	e042      	b.n	800e75c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	695b      	ldr	r3, [r3, #20]
 800e6dc:	f003 0310 	and.w	r3, r3, #16
 800e6e0:	2b10      	cmp	r3, #16
 800e6e2:	d119      	bne.n	800e718 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	f06f 0210 	mvn.w	r2, #16
 800e6ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	2220      	movs	r2, #32
 800e6f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	2200      	movs	r2, #0
 800e700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	2200      	movs	r2, #0
 800e710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e714:	2301      	movs	r3, #1
 800e716:	e029      	b.n	800e76c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e718:	f7fd fd2e 	bl	800c178 <HAL_GetTick>
 800e71c:	4602      	mov	r2, r0
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	1ad3      	subs	r3, r2, r3
 800e722:	68ba      	ldr	r2, [r7, #8]
 800e724:	429a      	cmp	r2, r3
 800e726:	d302      	bcc.n	800e72e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d116      	bne.n	800e75c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	2200      	movs	r2, #0
 800e732:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	2220      	movs	r2, #32
 800e738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	2200      	movs	r2, #0
 800e740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e748:	f043 0220 	orr.w	r2, r3, #32
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	2200      	movs	r2, #0
 800e754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e758:	2301      	movs	r3, #1
 800e75a:	e007      	b.n	800e76c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	695b      	ldr	r3, [r3, #20]
 800e762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e766:	2b40      	cmp	r3, #64	; 0x40
 800e768:	d1b5      	bne.n	800e6d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800e76a:	2300      	movs	r3, #0
}
 800e76c:	4618      	mov	r0, r3
 800e76e:	3710      	adds	r7, #16
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}

0800e774 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800e774:	b480      	push	{r7}
 800e776:	b083      	sub	sp, #12
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	695b      	ldr	r3, [r3, #20]
 800e782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e78a:	d11b      	bne.n	800e7c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e794:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2200      	movs	r2, #0
 800e79a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2220      	movs	r2, #32
 800e7a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7b0:	f043 0204 	orr.w	r2, r3, #4
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800e7c0:	2301      	movs	r3, #1
 800e7c2:	e000      	b.n	800e7c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800e7c4:	2300      	movs	r3, #0
}
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	370c      	adds	r7, #12
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bc80      	pop	{r7}
 800e7ce:	4770      	bx	lr

0800e7d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b086      	sub	sp, #24
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d101      	bne.n	800e7e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e7de:	2301      	movs	r3, #1
 800e7e0:	e35c      	b.n	800ee9c <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d01c      	beq.n	800e824 <HAL_RCC_OscConfig+0x54>
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	f003 0301 	and.w	r3, r3, #1
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d116      	bne.n	800e824 <HAL_RCC_OscConfig+0x54>
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	f003 0302 	and.w	r3, r3, #2
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d110      	bne.n	800e824 <HAL_RCC_OscConfig+0x54>
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	f003 0308 	and.w	r3, r3, #8
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d10a      	bne.n	800e824 <HAL_RCC_OscConfig+0x54>
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	f003 0304 	and.w	r3, r3, #4
 800e816:	2b00      	cmp	r3, #0
 800e818:	d104      	bne.n	800e824 <HAL_RCC_OscConfig+0x54>
 800e81a:	f240 1167 	movw	r1, #359	; 0x167
 800e81e:	48a5      	ldr	r0, [pc, #660]	; (800eab4 <HAL_RCC_OscConfig+0x2e4>)
 800e820:	f7fd f842 	bl	800b8a8 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	f003 0301 	and.w	r3, r3, #1
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	f000 809a 	beq.w	800e966 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	685b      	ldr	r3, [r3, #4]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d00e      	beq.n	800e858 <HAL_RCC_OscConfig+0x88>
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	685b      	ldr	r3, [r3, #4]
 800e83e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e842:	d009      	beq.n	800e858 <HAL_RCC_OscConfig+0x88>
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	685b      	ldr	r3, [r3, #4]
 800e848:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e84c:	d004      	beq.n	800e858 <HAL_RCC_OscConfig+0x88>
 800e84e:	f240 116d 	movw	r1, #365	; 0x16d
 800e852:	4898      	ldr	r0, [pc, #608]	; (800eab4 <HAL_RCC_OscConfig+0x2e4>)
 800e854:	f7fd f828 	bl	800b8a8 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800e858:	4b97      	ldr	r3, [pc, #604]	; (800eab8 <HAL_RCC_OscConfig+0x2e8>)
 800e85a:	685b      	ldr	r3, [r3, #4]
 800e85c:	f003 030c 	and.w	r3, r3, #12
 800e860:	2b04      	cmp	r3, #4
 800e862:	d00c      	beq.n	800e87e <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800e864:	4b94      	ldr	r3, [pc, #592]	; (800eab8 <HAL_RCC_OscConfig+0x2e8>)
 800e866:	685b      	ldr	r3, [r3, #4]
 800e868:	f003 030c 	and.w	r3, r3, #12
 800e86c:	2b08      	cmp	r3, #8
 800e86e:	d112      	bne.n	800e896 <HAL_RCC_OscConfig+0xc6>
 800e870:	4b91      	ldr	r3, [pc, #580]	; (800eab8 <HAL_RCC_OscConfig+0x2e8>)
 800e872:	685b      	ldr	r3, [r3, #4]
 800e874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e87c:	d10b      	bne.n	800e896 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e87e:	4b8e      	ldr	r3, [pc, #568]	; (800eab8 <HAL_RCC_OscConfig+0x2e8>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e886:	2b00      	cmp	r3, #0
 800e888:	d06c      	beq.n	800e964 <HAL_RCC_OscConfig+0x194>
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	685b      	ldr	r3, [r3, #4]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d168      	bne.n	800e964 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800e892:	2301      	movs	r3, #1
 800e894:	e302      	b.n	800ee9c <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	685b      	ldr	r3, [r3, #4]
 800e89a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e89e:	d106      	bne.n	800e8ae <HAL_RCC_OscConfig+0xde>
 800e8a0:	4b85      	ldr	r3, [pc, #532]	; (800eab8 <HAL_RCC_OscConfig+0x2e8>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	4a84      	ldr	r2, [pc, #528]	; (800eab8 <HAL_RCC_OscConfig+0x2e8>)
 800e8a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e8aa:	6013      	str	r3, [r2, #0]
 800e8ac:	e02e      	b.n	800e90c <HAL_RCC_OscConfig+0x13c>
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	685b      	ldr	r3, [r3, #4]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d10c      	bne.n	800e8d0 <HAL_RCC_OscConfig+0x100>
 800e8b6:	4b80      	ldr	r3, [pc, #512]	; (800eab8 <HAL_RCC_OscConfig+0x2e8>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	4a7f      	ldr	r2, [pc, #508]	; (800eab8 <HAL_RCC_OscConfig+0x2e8>)
 800e8bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e8c0:	6013      	str	r3, [r2, #0]
 800e8c2:	4b7d      	ldr	r3, [pc, #500]	; (800eab8 <HAL_RCC_OscConfig+0x2e8>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	4a7c      	ldr	r2, [pc, #496]	; (800eab8 <HAL_RCC_OscConfig+0x2e8>)
 800e8c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e8cc:	6013      	str	r3, [r2, #0]
 800e8ce:	e01d      	b.n	800e90c <HAL_RCC_OscConfig+0x13c>
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	685b      	ldr	r3, [r3, #4]
 800e8d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e8d8:	d10c      	bne.n	800e8f4 <HAL_RCC_OscConfig+0x124>
 800e8da:	4b77      	ldr	r3, [pc, #476]	; (800eab8 <HAL_RCC_OscConfig+0x2e8>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	4a76      	ldr	r2, [pc, #472]	; (800eab8 <HAL_RCC_OscConfig+0x2e8>)
 800e8e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e8e4:	6013      	str	r3, [r2, #0]
 800e8e6:	4b74      	ldr	r3, [pc, #464]	; (800eab8 <HAL_RCC_OscConfig+0x2e8>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	4a73      	ldr	r2, [pc, #460]	; (800eab8 <HAL_RCC_OscConfig+0x2e8>)
 800e8ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e8f0:	6013      	str	r3, [r2, #0]
 800e8f2:	e00b      	b.n	800e90c <HAL_RCC_OscConfig+0x13c>
 800e8f4:	4b70      	ldr	r3, [pc, #448]	; (800eab8 <HAL_RCC_OscConfig+0x2e8>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	4a6f      	ldr	r2, [pc, #444]	; (800eab8 <HAL_RCC_OscConfig+0x2e8>)
 800e8fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e8fe:	6013      	str	r3, [r2, #0]
 800e900:	4b6d      	ldr	r3, [pc, #436]	; (800eab8 <HAL_RCC_OscConfig+0x2e8>)
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	4a6c      	ldr	r2, [pc, #432]	; (800eab8 <HAL_RCC_OscConfig+0x2e8>)
 800e906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e90a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	685b      	ldr	r3, [r3, #4]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d013      	beq.n	800e93c <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e914:	f7fd fc30 	bl	800c178 <HAL_GetTick>
 800e918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e91a:	e008      	b.n	800e92e <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e91c:	f7fd fc2c 	bl	800c178 <HAL_GetTick>
 800e920:	4602      	mov	r2, r0
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	1ad3      	subs	r3, r2, r3
 800e926:	2b64      	cmp	r3, #100	; 0x64
 800e928:	d901      	bls.n	800e92e <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 800e92a:	2303      	movs	r3, #3
 800e92c:	e2b6      	b.n	800ee9c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e92e:	4b62      	ldr	r3, [pc, #392]	; (800eab8 <HAL_RCC_OscConfig+0x2e8>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e936:	2b00      	cmp	r3, #0
 800e938:	d0f0      	beq.n	800e91c <HAL_RCC_OscConfig+0x14c>
 800e93a:	e014      	b.n	800e966 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e93c:	f7fd fc1c 	bl	800c178 <HAL_GetTick>
 800e940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e942:	e008      	b.n	800e956 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e944:	f7fd fc18 	bl	800c178 <HAL_GetTick>
 800e948:	4602      	mov	r2, r0
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	1ad3      	subs	r3, r2, r3
 800e94e:	2b64      	cmp	r3, #100	; 0x64
 800e950:	d901      	bls.n	800e956 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800e952:	2303      	movs	r3, #3
 800e954:	e2a2      	b.n	800ee9c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e956:	4b58      	ldr	r3, [pc, #352]	; (800eab8 <HAL_RCC_OscConfig+0x2e8>)
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d1f0      	bne.n	800e944 <HAL_RCC_OscConfig+0x174>
 800e962:	e000      	b.n	800e966 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	f003 0302 	and.w	r3, r3, #2
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d079      	beq.n	800ea66 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	691b      	ldr	r3, [r3, #16]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d008      	beq.n	800e98c <HAL_RCC_OscConfig+0x1bc>
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	691b      	ldr	r3, [r3, #16]
 800e97e:	2b01      	cmp	r3, #1
 800e980:	d004      	beq.n	800e98c <HAL_RCC_OscConfig+0x1bc>
 800e982:	f240 11a1 	movw	r1, #417	; 0x1a1
 800e986:	484b      	ldr	r0, [pc, #300]	; (800eab4 <HAL_RCC_OscConfig+0x2e4>)
 800e988:	f7fc ff8e 	bl	800b8a8 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	695b      	ldr	r3, [r3, #20]
 800e990:	2b1f      	cmp	r3, #31
 800e992:	d904      	bls.n	800e99e <HAL_RCC_OscConfig+0x1ce>
 800e994:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 800e998:	4846      	ldr	r0, [pc, #280]	; (800eab4 <HAL_RCC_OscConfig+0x2e4>)
 800e99a:	f7fc ff85 	bl	800b8a8 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800e99e:	4b46      	ldr	r3, [pc, #280]	; (800eab8 <HAL_RCC_OscConfig+0x2e8>)
 800e9a0:	685b      	ldr	r3, [r3, #4]
 800e9a2:	f003 030c 	and.w	r3, r3, #12
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d00b      	beq.n	800e9c2 <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800e9aa:	4b43      	ldr	r3, [pc, #268]	; (800eab8 <HAL_RCC_OscConfig+0x2e8>)
 800e9ac:	685b      	ldr	r3, [r3, #4]
 800e9ae:	f003 030c 	and.w	r3, r3, #12
 800e9b2:	2b08      	cmp	r3, #8
 800e9b4:	d11c      	bne.n	800e9f0 <HAL_RCC_OscConfig+0x220>
 800e9b6:	4b40      	ldr	r3, [pc, #256]	; (800eab8 <HAL_RCC_OscConfig+0x2e8>)
 800e9b8:	685b      	ldr	r3, [r3, #4]
 800e9ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d116      	bne.n	800e9f0 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e9c2:	4b3d      	ldr	r3, [pc, #244]	; (800eab8 <HAL_RCC_OscConfig+0x2e8>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	f003 0302 	and.w	r3, r3, #2
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d005      	beq.n	800e9da <HAL_RCC_OscConfig+0x20a>
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	691b      	ldr	r3, [r3, #16]
 800e9d2:	2b01      	cmp	r3, #1
 800e9d4:	d001      	beq.n	800e9da <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 800e9d6:	2301      	movs	r3, #1
 800e9d8:	e260      	b.n	800ee9c <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e9da:	4b37      	ldr	r3, [pc, #220]	; (800eab8 <HAL_RCC_OscConfig+0x2e8>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	695b      	ldr	r3, [r3, #20]
 800e9e6:	00db      	lsls	r3, r3, #3
 800e9e8:	4933      	ldr	r1, [pc, #204]	; (800eab8 <HAL_RCC_OscConfig+0x2e8>)
 800e9ea:	4313      	orrs	r3, r2
 800e9ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e9ee:	e03a      	b.n	800ea66 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	691b      	ldr	r3, [r3, #16]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d020      	beq.n	800ea3a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e9f8:	4b30      	ldr	r3, [pc, #192]	; (800eabc <HAL_RCC_OscConfig+0x2ec>)
 800e9fa:	2201      	movs	r2, #1
 800e9fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e9fe:	f7fd fbbb 	bl	800c178 <HAL_GetTick>
 800ea02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ea04:	e008      	b.n	800ea18 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ea06:	f7fd fbb7 	bl	800c178 <HAL_GetTick>
 800ea0a:	4602      	mov	r2, r0
 800ea0c:	693b      	ldr	r3, [r7, #16]
 800ea0e:	1ad3      	subs	r3, r2, r3
 800ea10:	2b02      	cmp	r3, #2
 800ea12:	d901      	bls.n	800ea18 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800ea14:	2303      	movs	r3, #3
 800ea16:	e241      	b.n	800ee9c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ea18:	4b27      	ldr	r3, [pc, #156]	; (800eab8 <HAL_RCC_OscConfig+0x2e8>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	f003 0302 	and.w	r3, r3, #2
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d0f0      	beq.n	800ea06 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ea24:	4b24      	ldr	r3, [pc, #144]	; (800eab8 <HAL_RCC_OscConfig+0x2e8>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	695b      	ldr	r3, [r3, #20]
 800ea30:	00db      	lsls	r3, r3, #3
 800ea32:	4921      	ldr	r1, [pc, #132]	; (800eab8 <HAL_RCC_OscConfig+0x2e8>)
 800ea34:	4313      	orrs	r3, r2
 800ea36:	600b      	str	r3, [r1, #0]
 800ea38:	e015      	b.n	800ea66 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ea3a:	4b20      	ldr	r3, [pc, #128]	; (800eabc <HAL_RCC_OscConfig+0x2ec>)
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ea40:	f7fd fb9a 	bl	800c178 <HAL_GetTick>
 800ea44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ea46:	e008      	b.n	800ea5a <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ea48:	f7fd fb96 	bl	800c178 <HAL_GetTick>
 800ea4c:	4602      	mov	r2, r0
 800ea4e:	693b      	ldr	r3, [r7, #16]
 800ea50:	1ad3      	subs	r3, r2, r3
 800ea52:	2b02      	cmp	r3, #2
 800ea54:	d901      	bls.n	800ea5a <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 800ea56:	2303      	movs	r3, #3
 800ea58:	e220      	b.n	800ee9c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ea5a:	4b17      	ldr	r3, [pc, #92]	; (800eab8 <HAL_RCC_OscConfig+0x2e8>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	f003 0302 	and.w	r3, r3, #2
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d1f0      	bne.n	800ea48 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	f003 0308 	and.w	r3, r3, #8
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d048      	beq.n	800eb04 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	699b      	ldr	r3, [r3, #24]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d008      	beq.n	800ea8c <HAL_RCC_OscConfig+0x2bc>
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	699b      	ldr	r3, [r3, #24]
 800ea7e:	2b01      	cmp	r3, #1
 800ea80:	d004      	beq.n	800ea8c <HAL_RCC_OscConfig+0x2bc>
 800ea82:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800ea86:	480b      	ldr	r0, [pc, #44]	; (800eab4 <HAL_RCC_OscConfig+0x2e4>)
 800ea88:	f7fc ff0e 	bl	800b8a8 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	699b      	ldr	r3, [r3, #24]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d021      	beq.n	800ead8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ea94:	4b0a      	ldr	r3, [pc, #40]	; (800eac0 <HAL_RCC_OscConfig+0x2f0>)
 800ea96:	2201      	movs	r2, #1
 800ea98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ea9a:	f7fd fb6d 	bl	800c178 <HAL_GetTick>
 800ea9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800eaa0:	e010      	b.n	800eac4 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800eaa2:	f7fd fb69 	bl	800c178 <HAL_GetTick>
 800eaa6:	4602      	mov	r2, r0
 800eaa8:	693b      	ldr	r3, [r7, #16]
 800eaaa:	1ad3      	subs	r3, r2, r3
 800eaac:	2b02      	cmp	r3, #2
 800eaae:	d909      	bls.n	800eac4 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 800eab0:	2303      	movs	r3, #3
 800eab2:	e1f3      	b.n	800ee9c <HAL_RCC_OscConfig+0x6cc>
 800eab4:	08012868 	.word	0x08012868
 800eab8:	40021000 	.word	0x40021000
 800eabc:	42420000 	.word	0x42420000
 800eac0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800eac4:	4b67      	ldr	r3, [pc, #412]	; (800ec64 <HAL_RCC_OscConfig+0x494>)
 800eac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eac8:	f003 0302 	and.w	r3, r3, #2
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d0e8      	beq.n	800eaa2 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800ead0:	2001      	movs	r0, #1
 800ead2:	f000 fc11 	bl	800f2f8 <RCC_Delay>
 800ead6:	e015      	b.n	800eb04 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ead8:	4b63      	ldr	r3, [pc, #396]	; (800ec68 <HAL_RCC_OscConfig+0x498>)
 800eada:	2200      	movs	r2, #0
 800eadc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800eade:	f7fd fb4b 	bl	800c178 <HAL_GetTick>
 800eae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800eae4:	e008      	b.n	800eaf8 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800eae6:	f7fd fb47 	bl	800c178 <HAL_GetTick>
 800eaea:	4602      	mov	r2, r0
 800eaec:	693b      	ldr	r3, [r7, #16]
 800eaee:	1ad3      	subs	r3, r2, r3
 800eaf0:	2b02      	cmp	r3, #2
 800eaf2:	d901      	bls.n	800eaf8 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 800eaf4:	2303      	movs	r3, #3
 800eaf6:	e1d1      	b.n	800ee9c <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800eaf8:	4b5a      	ldr	r3, [pc, #360]	; (800ec64 <HAL_RCC_OscConfig+0x494>)
 800eafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eafc:	f003 0302 	and.w	r3, r3, #2
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d1f0      	bne.n	800eae6 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	f003 0304 	and.w	r3, r3, #4
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	f000 80c0 	beq.w	800ec92 <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800eb12:	2300      	movs	r3, #0
 800eb14:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	68db      	ldr	r3, [r3, #12]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d00c      	beq.n	800eb38 <HAL_RCC_OscConfig+0x368>
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	68db      	ldr	r3, [r3, #12]
 800eb22:	2b01      	cmp	r3, #1
 800eb24:	d008      	beq.n	800eb38 <HAL_RCC_OscConfig+0x368>
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	68db      	ldr	r3, [r3, #12]
 800eb2a:	2b05      	cmp	r3, #5
 800eb2c:	d004      	beq.n	800eb38 <HAL_RCC_OscConfig+0x368>
 800eb2e:	f240 2111 	movw	r1, #529	; 0x211
 800eb32:	484e      	ldr	r0, [pc, #312]	; (800ec6c <HAL_RCC_OscConfig+0x49c>)
 800eb34:	f7fc feb8 	bl	800b8a8 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800eb38:	4b4a      	ldr	r3, [pc, #296]	; (800ec64 <HAL_RCC_OscConfig+0x494>)
 800eb3a:	69db      	ldr	r3, [r3, #28]
 800eb3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d10d      	bne.n	800eb60 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800eb44:	4b47      	ldr	r3, [pc, #284]	; (800ec64 <HAL_RCC_OscConfig+0x494>)
 800eb46:	69db      	ldr	r3, [r3, #28]
 800eb48:	4a46      	ldr	r2, [pc, #280]	; (800ec64 <HAL_RCC_OscConfig+0x494>)
 800eb4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eb4e:	61d3      	str	r3, [r2, #28]
 800eb50:	4b44      	ldr	r3, [pc, #272]	; (800ec64 <HAL_RCC_OscConfig+0x494>)
 800eb52:	69db      	ldr	r3, [r3, #28]
 800eb54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eb58:	60bb      	str	r3, [r7, #8]
 800eb5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800eb5c:	2301      	movs	r3, #1
 800eb5e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eb60:	4b43      	ldr	r3, [pc, #268]	; (800ec70 <HAL_RCC_OscConfig+0x4a0>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d118      	bne.n	800eb9e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800eb6c:	4b40      	ldr	r3, [pc, #256]	; (800ec70 <HAL_RCC_OscConfig+0x4a0>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	4a3f      	ldr	r2, [pc, #252]	; (800ec70 <HAL_RCC_OscConfig+0x4a0>)
 800eb72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eb76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800eb78:	f7fd fafe 	bl	800c178 <HAL_GetTick>
 800eb7c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eb7e:	e008      	b.n	800eb92 <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800eb80:	f7fd fafa 	bl	800c178 <HAL_GetTick>
 800eb84:	4602      	mov	r2, r0
 800eb86:	693b      	ldr	r3, [r7, #16]
 800eb88:	1ad3      	subs	r3, r2, r3
 800eb8a:	2b64      	cmp	r3, #100	; 0x64
 800eb8c:	d901      	bls.n	800eb92 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800eb8e:	2303      	movs	r3, #3
 800eb90:	e184      	b.n	800ee9c <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eb92:	4b37      	ldr	r3, [pc, #220]	; (800ec70 <HAL_RCC_OscConfig+0x4a0>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d0f0      	beq.n	800eb80 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	68db      	ldr	r3, [r3, #12]
 800eba2:	2b01      	cmp	r3, #1
 800eba4:	d106      	bne.n	800ebb4 <HAL_RCC_OscConfig+0x3e4>
 800eba6:	4b2f      	ldr	r3, [pc, #188]	; (800ec64 <HAL_RCC_OscConfig+0x494>)
 800eba8:	6a1b      	ldr	r3, [r3, #32]
 800ebaa:	4a2e      	ldr	r2, [pc, #184]	; (800ec64 <HAL_RCC_OscConfig+0x494>)
 800ebac:	f043 0301 	orr.w	r3, r3, #1
 800ebb0:	6213      	str	r3, [r2, #32]
 800ebb2:	e02d      	b.n	800ec10 <HAL_RCC_OscConfig+0x440>
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	68db      	ldr	r3, [r3, #12]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d10c      	bne.n	800ebd6 <HAL_RCC_OscConfig+0x406>
 800ebbc:	4b29      	ldr	r3, [pc, #164]	; (800ec64 <HAL_RCC_OscConfig+0x494>)
 800ebbe:	6a1b      	ldr	r3, [r3, #32]
 800ebc0:	4a28      	ldr	r2, [pc, #160]	; (800ec64 <HAL_RCC_OscConfig+0x494>)
 800ebc2:	f023 0301 	bic.w	r3, r3, #1
 800ebc6:	6213      	str	r3, [r2, #32]
 800ebc8:	4b26      	ldr	r3, [pc, #152]	; (800ec64 <HAL_RCC_OscConfig+0x494>)
 800ebca:	6a1b      	ldr	r3, [r3, #32]
 800ebcc:	4a25      	ldr	r2, [pc, #148]	; (800ec64 <HAL_RCC_OscConfig+0x494>)
 800ebce:	f023 0304 	bic.w	r3, r3, #4
 800ebd2:	6213      	str	r3, [r2, #32]
 800ebd4:	e01c      	b.n	800ec10 <HAL_RCC_OscConfig+0x440>
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	68db      	ldr	r3, [r3, #12]
 800ebda:	2b05      	cmp	r3, #5
 800ebdc:	d10c      	bne.n	800ebf8 <HAL_RCC_OscConfig+0x428>
 800ebde:	4b21      	ldr	r3, [pc, #132]	; (800ec64 <HAL_RCC_OscConfig+0x494>)
 800ebe0:	6a1b      	ldr	r3, [r3, #32]
 800ebe2:	4a20      	ldr	r2, [pc, #128]	; (800ec64 <HAL_RCC_OscConfig+0x494>)
 800ebe4:	f043 0304 	orr.w	r3, r3, #4
 800ebe8:	6213      	str	r3, [r2, #32]
 800ebea:	4b1e      	ldr	r3, [pc, #120]	; (800ec64 <HAL_RCC_OscConfig+0x494>)
 800ebec:	6a1b      	ldr	r3, [r3, #32]
 800ebee:	4a1d      	ldr	r2, [pc, #116]	; (800ec64 <HAL_RCC_OscConfig+0x494>)
 800ebf0:	f043 0301 	orr.w	r3, r3, #1
 800ebf4:	6213      	str	r3, [r2, #32]
 800ebf6:	e00b      	b.n	800ec10 <HAL_RCC_OscConfig+0x440>
 800ebf8:	4b1a      	ldr	r3, [pc, #104]	; (800ec64 <HAL_RCC_OscConfig+0x494>)
 800ebfa:	6a1b      	ldr	r3, [r3, #32]
 800ebfc:	4a19      	ldr	r2, [pc, #100]	; (800ec64 <HAL_RCC_OscConfig+0x494>)
 800ebfe:	f023 0301 	bic.w	r3, r3, #1
 800ec02:	6213      	str	r3, [r2, #32]
 800ec04:	4b17      	ldr	r3, [pc, #92]	; (800ec64 <HAL_RCC_OscConfig+0x494>)
 800ec06:	6a1b      	ldr	r3, [r3, #32]
 800ec08:	4a16      	ldr	r2, [pc, #88]	; (800ec64 <HAL_RCC_OscConfig+0x494>)
 800ec0a:	f023 0304 	bic.w	r3, r3, #4
 800ec0e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	68db      	ldr	r3, [r3, #12]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d015      	beq.n	800ec44 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ec18:	f7fd faae 	bl	800c178 <HAL_GetTick>
 800ec1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ec1e:	e00a      	b.n	800ec36 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ec20:	f7fd faaa 	bl	800c178 <HAL_GetTick>
 800ec24:	4602      	mov	r2, r0
 800ec26:	693b      	ldr	r3, [r7, #16]
 800ec28:	1ad3      	subs	r3, r2, r3
 800ec2a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec2e:	4293      	cmp	r3, r2
 800ec30:	d901      	bls.n	800ec36 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800ec32:	2303      	movs	r3, #3
 800ec34:	e132      	b.n	800ee9c <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ec36:	4b0b      	ldr	r3, [pc, #44]	; (800ec64 <HAL_RCC_OscConfig+0x494>)
 800ec38:	6a1b      	ldr	r3, [r3, #32]
 800ec3a:	f003 0302 	and.w	r3, r3, #2
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d0ee      	beq.n	800ec20 <HAL_RCC_OscConfig+0x450>
 800ec42:	e01d      	b.n	800ec80 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ec44:	f7fd fa98 	bl	800c178 <HAL_GetTick>
 800ec48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ec4a:	e013      	b.n	800ec74 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ec4c:	f7fd fa94 	bl	800c178 <HAL_GetTick>
 800ec50:	4602      	mov	r2, r0
 800ec52:	693b      	ldr	r3, [r7, #16]
 800ec54:	1ad3      	subs	r3, r2, r3
 800ec56:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec5a:	4293      	cmp	r3, r2
 800ec5c:	d90a      	bls.n	800ec74 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800ec5e:	2303      	movs	r3, #3
 800ec60:	e11c      	b.n	800ee9c <HAL_RCC_OscConfig+0x6cc>
 800ec62:	bf00      	nop
 800ec64:	40021000 	.word	0x40021000
 800ec68:	42420480 	.word	0x42420480
 800ec6c:	08012868 	.word	0x08012868
 800ec70:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ec74:	4b8b      	ldr	r3, [pc, #556]	; (800eea4 <HAL_RCC_OscConfig+0x6d4>)
 800ec76:	6a1b      	ldr	r3, [r3, #32]
 800ec78:	f003 0302 	and.w	r3, r3, #2
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d1e5      	bne.n	800ec4c <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ec80:	7dfb      	ldrb	r3, [r7, #23]
 800ec82:	2b01      	cmp	r3, #1
 800ec84:	d105      	bne.n	800ec92 <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ec86:	4b87      	ldr	r3, [pc, #540]	; (800eea4 <HAL_RCC_OscConfig+0x6d4>)
 800ec88:	69db      	ldr	r3, [r3, #28]
 800ec8a:	4a86      	ldr	r2, [pc, #536]	; (800eea4 <HAL_RCC_OscConfig+0x6d4>)
 800ec8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ec90:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	69db      	ldr	r3, [r3, #28]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d00c      	beq.n	800ecb4 <HAL_RCC_OscConfig+0x4e4>
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	69db      	ldr	r3, [r3, #28]
 800ec9e:	2b01      	cmp	r3, #1
 800eca0:	d008      	beq.n	800ecb4 <HAL_RCC_OscConfig+0x4e4>
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	69db      	ldr	r3, [r3, #28]
 800eca6:	2b02      	cmp	r3, #2
 800eca8:	d004      	beq.n	800ecb4 <HAL_RCC_OscConfig+0x4e4>
 800ecaa:	f240 21af 	movw	r1, #687	; 0x2af
 800ecae:	487e      	ldr	r0, [pc, #504]	; (800eea8 <HAL_RCC_OscConfig+0x6d8>)
 800ecb0:	f7fc fdfa 	bl	800b8a8 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	69db      	ldr	r3, [r3, #28]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	f000 80ee 	beq.w	800ee9a <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ecbe:	4b79      	ldr	r3, [pc, #484]	; (800eea4 <HAL_RCC_OscConfig+0x6d4>)
 800ecc0:	685b      	ldr	r3, [r3, #4]
 800ecc2:	f003 030c 	and.w	r3, r3, #12
 800ecc6:	2b08      	cmp	r3, #8
 800ecc8:	f000 80ce 	beq.w	800ee68 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	69db      	ldr	r3, [r3, #28]
 800ecd0:	2b02      	cmp	r3, #2
 800ecd2:	f040 80b2 	bne.w	800ee3a <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6a1b      	ldr	r3, [r3, #32]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d009      	beq.n	800ecf2 <HAL_RCC_OscConfig+0x522>
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	6a1b      	ldr	r3, [r3, #32]
 800ece2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ece6:	d004      	beq.n	800ecf2 <HAL_RCC_OscConfig+0x522>
 800ece8:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 800ecec:	486e      	ldr	r0, [pc, #440]	; (800eea8 <HAL_RCC_OscConfig+0x6d8>)
 800ecee:	f7fc fddb 	bl	800b8a8 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d04a      	beq.n	800ed90 <HAL_RCC_OscConfig+0x5c0>
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecfe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ed02:	d045      	beq.n	800ed90 <HAL_RCC_OscConfig+0x5c0>
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ed0c:	d040      	beq.n	800ed90 <HAL_RCC_OscConfig+0x5c0>
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed12:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ed16:	d03b      	beq.n	800ed90 <HAL_RCC_OscConfig+0x5c0>
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ed20:	d036      	beq.n	800ed90 <HAL_RCC_OscConfig+0x5c0>
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed26:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800ed2a:	d031      	beq.n	800ed90 <HAL_RCC_OscConfig+0x5c0>
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed30:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800ed34:	d02c      	beq.n	800ed90 <HAL_RCC_OscConfig+0x5c0>
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed3a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800ed3e:	d027      	beq.n	800ed90 <HAL_RCC_OscConfig+0x5c0>
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ed48:	d022      	beq.n	800ed90 <HAL_RCC_OscConfig+0x5c0>
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed4e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800ed52:	d01d      	beq.n	800ed90 <HAL_RCC_OscConfig+0x5c0>
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed58:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800ed5c:	d018      	beq.n	800ed90 <HAL_RCC_OscConfig+0x5c0>
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed62:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800ed66:	d013      	beq.n	800ed90 <HAL_RCC_OscConfig+0x5c0>
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ed70:	d00e      	beq.n	800ed90 <HAL_RCC_OscConfig+0x5c0>
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed76:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 800ed7a:	d009      	beq.n	800ed90 <HAL_RCC_OscConfig+0x5c0>
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed80:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800ed84:	d004      	beq.n	800ed90 <HAL_RCC_OscConfig+0x5c0>
 800ed86:	f240 21b9 	movw	r1, #697	; 0x2b9
 800ed8a:	4847      	ldr	r0, [pc, #284]	; (800eea8 <HAL_RCC_OscConfig+0x6d8>)
 800ed8c:	f7fc fd8c 	bl	800b8a8 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ed90:	4b46      	ldr	r3, [pc, #280]	; (800eeac <HAL_RCC_OscConfig+0x6dc>)
 800ed92:	2200      	movs	r2, #0
 800ed94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ed96:	f7fd f9ef 	bl	800c178 <HAL_GetTick>
 800ed9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ed9c:	e008      	b.n	800edb0 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ed9e:	f7fd f9eb 	bl	800c178 <HAL_GetTick>
 800eda2:	4602      	mov	r2, r0
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	1ad3      	subs	r3, r2, r3
 800eda8:	2b02      	cmp	r3, #2
 800edaa:	d901      	bls.n	800edb0 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800edac:	2303      	movs	r3, #3
 800edae:	e075      	b.n	800ee9c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800edb0:	4b3c      	ldr	r3, [pc, #240]	; (800eea4 <HAL_RCC_OscConfig+0x6d4>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d1f0      	bne.n	800ed9e <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	6a1b      	ldr	r3, [r3, #32]
 800edc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800edc4:	d116      	bne.n	800edf4 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	689b      	ldr	r3, [r3, #8]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d009      	beq.n	800ede2 <HAL_RCC_OscConfig+0x612>
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	689b      	ldr	r3, [r3, #8]
 800edd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800edd6:	d004      	beq.n	800ede2 <HAL_RCC_OscConfig+0x612>
 800edd8:	f240 21cf 	movw	r1, #719	; 0x2cf
 800eddc:	4832      	ldr	r0, [pc, #200]	; (800eea8 <HAL_RCC_OscConfig+0x6d8>)
 800edde:	f7fc fd63 	bl	800b8a8 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ede2:	4b30      	ldr	r3, [pc, #192]	; (800eea4 <HAL_RCC_OscConfig+0x6d4>)
 800ede4:	685b      	ldr	r3, [r3, #4]
 800ede6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	689b      	ldr	r3, [r3, #8]
 800edee:	492d      	ldr	r1, [pc, #180]	; (800eea4 <HAL_RCC_OscConfig+0x6d4>)
 800edf0:	4313      	orrs	r3, r2
 800edf2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800edf4:	4b2b      	ldr	r3, [pc, #172]	; (800eea4 <HAL_RCC_OscConfig+0x6d4>)
 800edf6:	685b      	ldr	r3, [r3, #4]
 800edf8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	6a19      	ldr	r1, [r3, #32]
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee04:	430b      	orrs	r3, r1
 800ee06:	4927      	ldr	r1, [pc, #156]	; (800eea4 <HAL_RCC_OscConfig+0x6d4>)
 800ee08:	4313      	orrs	r3, r2
 800ee0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ee0c:	4b27      	ldr	r3, [pc, #156]	; (800eeac <HAL_RCC_OscConfig+0x6dc>)
 800ee0e:	2201      	movs	r2, #1
 800ee10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ee12:	f7fd f9b1 	bl	800c178 <HAL_GetTick>
 800ee16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ee18:	e008      	b.n	800ee2c <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ee1a:	f7fd f9ad 	bl	800c178 <HAL_GetTick>
 800ee1e:	4602      	mov	r2, r0
 800ee20:	693b      	ldr	r3, [r7, #16]
 800ee22:	1ad3      	subs	r3, r2, r3
 800ee24:	2b02      	cmp	r3, #2
 800ee26:	d901      	bls.n	800ee2c <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 800ee28:	2303      	movs	r3, #3
 800ee2a:	e037      	b.n	800ee9c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ee2c:	4b1d      	ldr	r3, [pc, #116]	; (800eea4 <HAL_RCC_OscConfig+0x6d4>)
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d0f0      	beq.n	800ee1a <HAL_RCC_OscConfig+0x64a>
 800ee38:	e02f      	b.n	800ee9a <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ee3a:	4b1c      	ldr	r3, [pc, #112]	; (800eeac <HAL_RCC_OscConfig+0x6dc>)
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ee40:	f7fd f99a 	bl	800c178 <HAL_GetTick>
 800ee44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ee46:	e008      	b.n	800ee5a <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ee48:	f7fd f996 	bl	800c178 <HAL_GetTick>
 800ee4c:	4602      	mov	r2, r0
 800ee4e:	693b      	ldr	r3, [r7, #16]
 800ee50:	1ad3      	subs	r3, r2, r3
 800ee52:	2b02      	cmp	r3, #2
 800ee54:	d901      	bls.n	800ee5a <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 800ee56:	2303      	movs	r3, #3
 800ee58:	e020      	b.n	800ee9c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ee5a:	4b12      	ldr	r3, [pc, #72]	; (800eea4 <HAL_RCC_OscConfig+0x6d4>)
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d1f0      	bne.n	800ee48 <HAL_RCC_OscConfig+0x678>
 800ee66:	e018      	b.n	800ee9a <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	69db      	ldr	r3, [r3, #28]
 800ee6c:	2b01      	cmp	r3, #1
 800ee6e:	d101      	bne.n	800ee74 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 800ee70:	2301      	movs	r3, #1
 800ee72:	e013      	b.n	800ee9c <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ee74:	4b0b      	ldr	r3, [pc, #44]	; (800eea4 <HAL_RCC_OscConfig+0x6d4>)
 800ee76:	685b      	ldr	r3, [r3, #4]
 800ee78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	6a1b      	ldr	r3, [r3, #32]
 800ee84:	429a      	cmp	r2, r3
 800ee86:	d106      	bne.n	800ee96 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d001      	beq.n	800ee9a <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 800ee96:	2301      	movs	r3, #1
 800ee98:	e000      	b.n	800ee9c <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 800ee9a:	2300      	movs	r3, #0
}
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3718      	adds	r7, #24
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}
 800eea4:	40021000 	.word	0x40021000
 800eea8:	08012868 	.word	0x08012868
 800eeac:	42420060 	.word	0x42420060

0800eeb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b084      	sub	sp, #16
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
 800eeb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d101      	bne.n	800eec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800eec0:	2301      	movs	r3, #1
 800eec2:	e176      	b.n	800f1b2 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	f003 0301 	and.w	r3, r3, #1
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d116      	bne.n	800eefe <HAL_RCC_ClockConfig+0x4e>
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	f003 0302 	and.w	r3, r3, #2
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d110      	bne.n	800eefe <HAL_RCC_ClockConfig+0x4e>
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	f003 0304 	and.w	r3, r3, #4
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d10a      	bne.n	800eefe <HAL_RCC_ClockConfig+0x4e>
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	f003 0308 	and.w	r3, r3, #8
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d104      	bne.n	800eefe <HAL_RCC_ClockConfig+0x4e>
 800eef4:	f44f 714e 	mov.w	r1, #824	; 0x338
 800eef8:	4874      	ldr	r0, [pc, #464]	; (800f0cc <HAL_RCC_ClockConfig+0x21c>)
 800eefa:	f7fc fcd5 	bl	800b8a8 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d00a      	beq.n	800ef1a <HAL_RCC_ClockConfig+0x6a>
 800ef04:	683b      	ldr	r3, [r7, #0]
 800ef06:	2b01      	cmp	r3, #1
 800ef08:	d007      	beq.n	800ef1a <HAL_RCC_ClockConfig+0x6a>
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	2b02      	cmp	r3, #2
 800ef0e:	d004      	beq.n	800ef1a <HAL_RCC_ClockConfig+0x6a>
 800ef10:	f240 3139 	movw	r1, #825	; 0x339
 800ef14:	486d      	ldr	r0, [pc, #436]	; (800f0cc <HAL_RCC_ClockConfig+0x21c>)
 800ef16:	f7fc fcc7 	bl	800b8a8 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ef1a:	4b6d      	ldr	r3, [pc, #436]	; (800f0d0 <HAL_RCC_ClockConfig+0x220>)
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	f003 0307 	and.w	r3, r3, #7
 800ef22:	683a      	ldr	r2, [r7, #0]
 800ef24:	429a      	cmp	r2, r3
 800ef26:	d910      	bls.n	800ef4a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ef28:	4b69      	ldr	r3, [pc, #420]	; (800f0d0 <HAL_RCC_ClockConfig+0x220>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	f023 0207 	bic.w	r2, r3, #7
 800ef30:	4967      	ldr	r1, [pc, #412]	; (800f0d0 <HAL_RCC_ClockConfig+0x220>)
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	4313      	orrs	r3, r2
 800ef36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ef38:	4b65      	ldr	r3, [pc, #404]	; (800f0d0 <HAL_RCC_ClockConfig+0x220>)
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	f003 0307 	and.w	r3, r3, #7
 800ef40:	683a      	ldr	r2, [r7, #0]
 800ef42:	429a      	cmp	r2, r3
 800ef44:	d001      	beq.n	800ef4a <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 800ef46:	2301      	movs	r3, #1
 800ef48:	e133      	b.n	800f1b2 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	f003 0302 	and.w	r3, r3, #2
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d049      	beq.n	800efea <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	f003 0304 	and.w	r3, r3, #4
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d005      	beq.n	800ef6e <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ef62:	4b5c      	ldr	r3, [pc, #368]	; (800f0d4 <HAL_RCC_ClockConfig+0x224>)
 800ef64:	685b      	ldr	r3, [r3, #4]
 800ef66:	4a5b      	ldr	r2, [pc, #364]	; (800f0d4 <HAL_RCC_ClockConfig+0x224>)
 800ef68:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ef6c:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	f003 0308 	and.w	r3, r3, #8
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d005      	beq.n	800ef86 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ef7a:	4b56      	ldr	r3, [pc, #344]	; (800f0d4 <HAL_RCC_ClockConfig+0x224>)
 800ef7c:	685b      	ldr	r3, [r3, #4]
 800ef7e:	4a55      	ldr	r2, [pc, #340]	; (800f0d4 <HAL_RCC_ClockConfig+0x224>)
 800ef80:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ef84:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	689b      	ldr	r3, [r3, #8]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d024      	beq.n	800efd8 <HAL_RCC_ClockConfig+0x128>
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	689b      	ldr	r3, [r3, #8]
 800ef92:	2b80      	cmp	r3, #128	; 0x80
 800ef94:	d020      	beq.n	800efd8 <HAL_RCC_ClockConfig+0x128>
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	689b      	ldr	r3, [r3, #8]
 800ef9a:	2b90      	cmp	r3, #144	; 0x90
 800ef9c:	d01c      	beq.n	800efd8 <HAL_RCC_ClockConfig+0x128>
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	689b      	ldr	r3, [r3, #8]
 800efa2:	2ba0      	cmp	r3, #160	; 0xa0
 800efa4:	d018      	beq.n	800efd8 <HAL_RCC_ClockConfig+0x128>
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	689b      	ldr	r3, [r3, #8]
 800efaa:	2bb0      	cmp	r3, #176	; 0xb0
 800efac:	d014      	beq.n	800efd8 <HAL_RCC_ClockConfig+0x128>
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	689b      	ldr	r3, [r3, #8]
 800efb2:	2bc0      	cmp	r3, #192	; 0xc0
 800efb4:	d010      	beq.n	800efd8 <HAL_RCC_ClockConfig+0x128>
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	689b      	ldr	r3, [r3, #8]
 800efba:	2bd0      	cmp	r3, #208	; 0xd0
 800efbc:	d00c      	beq.n	800efd8 <HAL_RCC_ClockConfig+0x128>
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	689b      	ldr	r3, [r3, #8]
 800efc2:	2be0      	cmp	r3, #224	; 0xe0
 800efc4:	d008      	beq.n	800efd8 <HAL_RCC_ClockConfig+0x128>
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	689b      	ldr	r3, [r3, #8]
 800efca:	2bf0      	cmp	r3, #240	; 0xf0
 800efcc:	d004      	beq.n	800efd8 <HAL_RCC_ClockConfig+0x128>
 800efce:	f240 315f 	movw	r1, #863	; 0x35f
 800efd2:	483e      	ldr	r0, [pc, #248]	; (800f0cc <HAL_RCC_ClockConfig+0x21c>)
 800efd4:	f7fc fc68 	bl	800b8a8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800efd8:	4b3e      	ldr	r3, [pc, #248]	; (800f0d4 <HAL_RCC_ClockConfig+0x224>)
 800efda:	685b      	ldr	r3, [r3, #4]
 800efdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	689b      	ldr	r3, [r3, #8]
 800efe4:	493b      	ldr	r1, [pc, #236]	; (800f0d4 <HAL_RCC_ClockConfig+0x224>)
 800efe6:	4313      	orrs	r3, r2
 800efe8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	f003 0301 	and.w	r3, r3, #1
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d051      	beq.n	800f09a <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	685b      	ldr	r3, [r3, #4]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d00c      	beq.n	800f018 <HAL_RCC_ClockConfig+0x168>
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	685b      	ldr	r3, [r3, #4]
 800f002:	2b01      	cmp	r3, #1
 800f004:	d008      	beq.n	800f018 <HAL_RCC_ClockConfig+0x168>
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	685b      	ldr	r3, [r3, #4]
 800f00a:	2b02      	cmp	r3, #2
 800f00c:	d004      	beq.n	800f018 <HAL_RCC_ClockConfig+0x168>
 800f00e:	f240 3166 	movw	r1, #870	; 0x366
 800f012:	482e      	ldr	r0, [pc, #184]	; (800f0cc <HAL_RCC_ClockConfig+0x21c>)
 800f014:	f7fc fc48 	bl	800b8a8 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	685b      	ldr	r3, [r3, #4]
 800f01c:	2b01      	cmp	r3, #1
 800f01e:	d107      	bne.n	800f030 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f020:	4b2c      	ldr	r3, [pc, #176]	; (800f0d4 <HAL_RCC_ClockConfig+0x224>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d115      	bne.n	800f058 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800f02c:	2301      	movs	r3, #1
 800f02e:	e0c0      	b.n	800f1b2 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	685b      	ldr	r3, [r3, #4]
 800f034:	2b02      	cmp	r3, #2
 800f036:	d107      	bne.n	800f048 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f038:	4b26      	ldr	r3, [pc, #152]	; (800f0d4 <HAL_RCC_ClockConfig+0x224>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f040:	2b00      	cmp	r3, #0
 800f042:	d109      	bne.n	800f058 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800f044:	2301      	movs	r3, #1
 800f046:	e0b4      	b.n	800f1b2 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f048:	4b22      	ldr	r3, [pc, #136]	; (800f0d4 <HAL_RCC_ClockConfig+0x224>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	f003 0302 	and.w	r3, r3, #2
 800f050:	2b00      	cmp	r3, #0
 800f052:	d101      	bne.n	800f058 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800f054:	2301      	movs	r3, #1
 800f056:	e0ac      	b.n	800f1b2 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f058:	4b1e      	ldr	r3, [pc, #120]	; (800f0d4 <HAL_RCC_ClockConfig+0x224>)
 800f05a:	685b      	ldr	r3, [r3, #4]
 800f05c:	f023 0203 	bic.w	r2, r3, #3
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	685b      	ldr	r3, [r3, #4]
 800f064:	491b      	ldr	r1, [pc, #108]	; (800f0d4 <HAL_RCC_ClockConfig+0x224>)
 800f066:	4313      	orrs	r3, r2
 800f068:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f06a:	f7fd f885 	bl	800c178 <HAL_GetTick>
 800f06e:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f070:	e00a      	b.n	800f088 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f072:	f7fd f881 	bl	800c178 <HAL_GetTick>
 800f076:	4602      	mov	r2, r0
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	1ad3      	subs	r3, r2, r3
 800f07c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f080:	4293      	cmp	r3, r2
 800f082:	d901      	bls.n	800f088 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 800f084:	2303      	movs	r3, #3
 800f086:	e094      	b.n	800f1b2 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f088:	4b12      	ldr	r3, [pc, #72]	; (800f0d4 <HAL_RCC_ClockConfig+0x224>)
 800f08a:	685b      	ldr	r3, [r3, #4]
 800f08c:	f003 020c 	and.w	r2, r3, #12
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	685b      	ldr	r3, [r3, #4]
 800f094:	009b      	lsls	r3, r3, #2
 800f096:	429a      	cmp	r2, r3
 800f098:	d1eb      	bne.n	800f072 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800f09a:	4b0d      	ldr	r3, [pc, #52]	; (800f0d0 <HAL_RCC_ClockConfig+0x220>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	f003 0307 	and.w	r3, r3, #7
 800f0a2:	683a      	ldr	r2, [r7, #0]
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	d217      	bcs.n	800f0d8 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f0a8:	4b09      	ldr	r3, [pc, #36]	; (800f0d0 <HAL_RCC_ClockConfig+0x220>)
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	f023 0207 	bic.w	r2, r3, #7
 800f0b0:	4907      	ldr	r1, [pc, #28]	; (800f0d0 <HAL_RCC_ClockConfig+0x220>)
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	4313      	orrs	r3, r2
 800f0b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f0b8:	4b05      	ldr	r3, [pc, #20]	; (800f0d0 <HAL_RCC_ClockConfig+0x220>)
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	f003 0307 	and.w	r3, r3, #7
 800f0c0:	683a      	ldr	r2, [r7, #0]
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	d008      	beq.n	800f0d8 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 800f0c6:	2301      	movs	r3, #1
 800f0c8:	e073      	b.n	800f1b2 <HAL_RCC_ClockConfig+0x302>
 800f0ca:	bf00      	nop
 800f0cc:	08012868 	.word	0x08012868
 800f0d0:	40022000 	.word	0x40022000
 800f0d4:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	f003 0304 	and.w	r3, r3, #4
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d025      	beq.n	800f130 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	68db      	ldr	r3, [r3, #12]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d018      	beq.n	800f11e <HAL_RCC_ClockConfig+0x26e>
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	68db      	ldr	r3, [r3, #12]
 800f0f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f0f4:	d013      	beq.n	800f11e <HAL_RCC_ClockConfig+0x26e>
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	68db      	ldr	r3, [r3, #12]
 800f0fa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800f0fe:	d00e      	beq.n	800f11e <HAL_RCC_ClockConfig+0x26e>
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	68db      	ldr	r3, [r3, #12]
 800f104:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f108:	d009      	beq.n	800f11e <HAL_RCC_ClockConfig+0x26e>
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	68db      	ldr	r3, [r3, #12]
 800f10e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f112:	d004      	beq.n	800f11e <HAL_RCC_ClockConfig+0x26e>
 800f114:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 800f118:	4828      	ldr	r0, [pc, #160]	; (800f1bc <HAL_RCC_ClockConfig+0x30c>)
 800f11a:	f7fc fbc5 	bl	800b8a8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f11e:	4b28      	ldr	r3, [pc, #160]	; (800f1c0 <HAL_RCC_ClockConfig+0x310>)
 800f120:	685b      	ldr	r3, [r3, #4]
 800f122:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	68db      	ldr	r3, [r3, #12]
 800f12a:	4925      	ldr	r1, [pc, #148]	; (800f1c0 <HAL_RCC_ClockConfig+0x310>)
 800f12c:	4313      	orrs	r3, r2
 800f12e:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	f003 0308 	and.w	r3, r3, #8
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d026      	beq.n	800f18a <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	691b      	ldr	r3, [r3, #16]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d018      	beq.n	800f176 <HAL_RCC_ClockConfig+0x2c6>
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	691b      	ldr	r3, [r3, #16]
 800f148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f14c:	d013      	beq.n	800f176 <HAL_RCC_ClockConfig+0x2c6>
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	691b      	ldr	r3, [r3, #16]
 800f152:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800f156:	d00e      	beq.n	800f176 <HAL_RCC_ClockConfig+0x2c6>
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	691b      	ldr	r3, [r3, #16]
 800f15c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f160:	d009      	beq.n	800f176 <HAL_RCC_ClockConfig+0x2c6>
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	691b      	ldr	r3, [r3, #16]
 800f166:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f16a:	d004      	beq.n	800f176 <HAL_RCC_ClockConfig+0x2c6>
 800f16c:	f240 31ab 	movw	r1, #939	; 0x3ab
 800f170:	4812      	ldr	r0, [pc, #72]	; (800f1bc <HAL_RCC_ClockConfig+0x30c>)
 800f172:	f7fc fb99 	bl	800b8a8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800f176:	4b12      	ldr	r3, [pc, #72]	; (800f1c0 <HAL_RCC_ClockConfig+0x310>)
 800f178:	685b      	ldr	r3, [r3, #4]
 800f17a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	691b      	ldr	r3, [r3, #16]
 800f182:	00db      	lsls	r3, r3, #3
 800f184:	490e      	ldr	r1, [pc, #56]	; (800f1c0 <HAL_RCC_ClockConfig+0x310>)
 800f186:	4313      	orrs	r3, r2
 800f188:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800f18a:	f000 f821 	bl	800f1d0 <HAL_RCC_GetSysClockFreq>
 800f18e:	4601      	mov	r1, r0
 800f190:	4b0b      	ldr	r3, [pc, #44]	; (800f1c0 <HAL_RCC_ClockConfig+0x310>)
 800f192:	685b      	ldr	r3, [r3, #4]
 800f194:	091b      	lsrs	r3, r3, #4
 800f196:	f003 030f 	and.w	r3, r3, #15
 800f19a:	4a0a      	ldr	r2, [pc, #40]	; (800f1c4 <HAL_RCC_ClockConfig+0x314>)
 800f19c:	5cd3      	ldrb	r3, [r2, r3]
 800f19e:	fa21 f303 	lsr.w	r3, r1, r3
 800f1a2:	4a09      	ldr	r2, [pc, #36]	; (800f1c8 <HAL_RCC_ClockConfig+0x318>)
 800f1a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800f1a6:	4b09      	ldr	r3, [pc, #36]	; (800f1cc <HAL_RCC_ClockConfig+0x31c>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f7fc ffa2 	bl	800c0f4 <HAL_InitTick>

  return HAL_OK;
 800f1b0:	2300      	movs	r3, #0
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	3710      	adds	r7, #16
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	bd80      	pop	{r7, pc}
 800f1ba:	bf00      	nop
 800f1bc:	08012868 	.word	0x08012868
 800f1c0:	40021000 	.word	0x40021000
 800f1c4:	080154b0 	.word	0x080154b0
 800f1c8:	2000009c 	.word	0x2000009c
 800f1cc:	200000a0 	.word	0x200000a0

0800f1d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f1d0:	b490      	push	{r4, r7}
 800f1d2:	b08a      	sub	sp, #40	; 0x28
 800f1d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800f1d6:	4b2a      	ldr	r3, [pc, #168]	; (800f280 <HAL_RCC_GetSysClockFreq+0xb0>)
 800f1d8:	1d3c      	adds	r4, r7, #4
 800f1da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f1dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800f1e0:	4b28      	ldr	r3, [pc, #160]	; (800f284 <HAL_RCC_GetSysClockFreq+0xb4>)
 800f1e2:	881b      	ldrh	r3, [r3, #0]
 800f1e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	61fb      	str	r3, [r7, #28]
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	61bb      	str	r3, [r7, #24]
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	627b      	str	r3, [r7, #36]	; 0x24
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800f1fa:	4b23      	ldr	r3, [pc, #140]	; (800f288 <HAL_RCC_GetSysClockFreq+0xb8>)
 800f1fc:	685b      	ldr	r3, [r3, #4]
 800f1fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800f200:	69fb      	ldr	r3, [r7, #28]
 800f202:	f003 030c 	and.w	r3, r3, #12
 800f206:	2b04      	cmp	r3, #4
 800f208:	d002      	beq.n	800f210 <HAL_RCC_GetSysClockFreq+0x40>
 800f20a:	2b08      	cmp	r3, #8
 800f20c:	d003      	beq.n	800f216 <HAL_RCC_GetSysClockFreq+0x46>
 800f20e:	e02d      	b.n	800f26c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800f210:	4b1e      	ldr	r3, [pc, #120]	; (800f28c <HAL_RCC_GetSysClockFreq+0xbc>)
 800f212:	623b      	str	r3, [r7, #32]
      break;
 800f214:	e02d      	b.n	800f272 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800f216:	69fb      	ldr	r3, [r7, #28]
 800f218:	0c9b      	lsrs	r3, r3, #18
 800f21a:	f003 030f 	and.w	r3, r3, #15
 800f21e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f222:	4413      	add	r3, r2
 800f224:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800f228:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800f22a:	69fb      	ldr	r3, [r7, #28]
 800f22c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f230:	2b00      	cmp	r3, #0
 800f232:	d013      	beq.n	800f25c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800f234:	4b14      	ldr	r3, [pc, #80]	; (800f288 <HAL_RCC_GetSysClockFreq+0xb8>)
 800f236:	685b      	ldr	r3, [r3, #4]
 800f238:	0c5b      	lsrs	r3, r3, #17
 800f23a:	f003 0301 	and.w	r3, r3, #1
 800f23e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f242:	4413      	add	r3, r2
 800f244:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800f248:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800f24a:	697b      	ldr	r3, [r7, #20]
 800f24c:	4a0f      	ldr	r2, [pc, #60]	; (800f28c <HAL_RCC_GetSysClockFreq+0xbc>)
 800f24e:	fb02 f203 	mul.w	r2, r2, r3
 800f252:	69bb      	ldr	r3, [r7, #24]
 800f254:	fbb2 f3f3 	udiv	r3, r2, r3
 800f258:	627b      	str	r3, [r7, #36]	; 0x24
 800f25a:	e004      	b.n	800f266 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800f25c:	697b      	ldr	r3, [r7, #20]
 800f25e:	4a0c      	ldr	r2, [pc, #48]	; (800f290 <HAL_RCC_GetSysClockFreq+0xc0>)
 800f260:	fb02 f303 	mul.w	r3, r2, r3
 800f264:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800f266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f268:	623b      	str	r3, [r7, #32]
      break;
 800f26a:	e002      	b.n	800f272 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800f26c:	4b07      	ldr	r3, [pc, #28]	; (800f28c <HAL_RCC_GetSysClockFreq+0xbc>)
 800f26e:	623b      	str	r3, [r7, #32]
      break;
 800f270:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f272:	6a3b      	ldr	r3, [r7, #32]
}
 800f274:	4618      	mov	r0, r3
 800f276:	3728      	adds	r7, #40	; 0x28
 800f278:	46bd      	mov	sp, r7
 800f27a:	bc90      	pop	{r4, r7}
 800f27c:	4770      	bx	lr
 800f27e:	bf00      	nop
 800f280:	080128a0 	.word	0x080128a0
 800f284:	080128b0 	.word	0x080128b0
 800f288:	40021000 	.word	0x40021000
 800f28c:	007a1200 	.word	0x007a1200
 800f290:	003d0900 	.word	0x003d0900

0800f294 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f294:	b480      	push	{r7}
 800f296:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f298:	4b02      	ldr	r3, [pc, #8]	; (800f2a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800f29a:	681b      	ldr	r3, [r3, #0]
}
 800f29c:	4618      	mov	r0, r3
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bc80      	pop	{r7}
 800f2a2:	4770      	bx	lr
 800f2a4:	2000009c 	.word	0x2000009c

0800f2a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800f2ac:	f7ff fff2 	bl	800f294 <HAL_RCC_GetHCLKFreq>
 800f2b0:	4601      	mov	r1, r0
 800f2b2:	4b05      	ldr	r3, [pc, #20]	; (800f2c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f2b4:	685b      	ldr	r3, [r3, #4]
 800f2b6:	0a1b      	lsrs	r3, r3, #8
 800f2b8:	f003 0307 	and.w	r3, r3, #7
 800f2bc:	4a03      	ldr	r2, [pc, #12]	; (800f2cc <HAL_RCC_GetPCLK1Freq+0x24>)
 800f2be:	5cd3      	ldrb	r3, [r2, r3]
 800f2c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	bd80      	pop	{r7, pc}
 800f2c8:	40021000 	.word	0x40021000
 800f2cc:	080154c0 	.word	0x080154c0

0800f2d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800f2d4:	f7ff ffde 	bl	800f294 <HAL_RCC_GetHCLKFreq>
 800f2d8:	4601      	mov	r1, r0
 800f2da:	4b05      	ldr	r3, [pc, #20]	; (800f2f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f2dc:	685b      	ldr	r3, [r3, #4]
 800f2de:	0adb      	lsrs	r3, r3, #11
 800f2e0:	f003 0307 	and.w	r3, r3, #7
 800f2e4:	4a03      	ldr	r2, [pc, #12]	; (800f2f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f2e6:	5cd3      	ldrb	r3, [r2, r3]
 800f2e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	bd80      	pop	{r7, pc}
 800f2f0:	40021000 	.word	0x40021000
 800f2f4:	080154c0 	.word	0x080154c0

0800f2f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800f2f8:	b480      	push	{r7}
 800f2fa:	b085      	sub	sp, #20
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800f300:	4b0a      	ldr	r3, [pc, #40]	; (800f32c <RCC_Delay+0x34>)
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	4a0a      	ldr	r2, [pc, #40]	; (800f330 <RCC_Delay+0x38>)
 800f306:	fba2 2303 	umull	r2, r3, r2, r3
 800f30a:	0a5b      	lsrs	r3, r3, #9
 800f30c:	687a      	ldr	r2, [r7, #4]
 800f30e:	fb02 f303 	mul.w	r3, r2, r3
 800f312:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800f314:	bf00      	nop
  }
  while (Delay --);
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	1e5a      	subs	r2, r3, #1
 800f31a:	60fa      	str	r2, [r7, #12]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d1f9      	bne.n	800f314 <RCC_Delay+0x1c>
}
 800f320:	bf00      	nop
 800f322:	3714      	adds	r7, #20
 800f324:	46bd      	mov	sp, r7
 800f326:	bc80      	pop	{r7}
 800f328:	4770      	bx	lr
 800f32a:	bf00      	nop
 800f32c:	2000009c 	.word	0x2000009c
 800f330:	10624dd3 	.word	0x10624dd3

0800f334 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b086      	sub	sp, #24
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800f33c:	2300      	movs	r3, #0
 800f33e:	613b      	str	r3, [r7, #16]
 800f340:	2300      	movs	r3, #0
 800f342:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	f003 0301 	and.w	r3, r3, #1
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d10f      	bne.n	800f370 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	f003 0302 	and.w	r3, r3, #2
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d109      	bne.n	800f370 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	f003 0310 	and.w	r3, r3, #16
 800f364:	2b00      	cmp	r3, #0
 800f366:	d103      	bne.n	800f370 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800f368:	216c      	movs	r1, #108	; 0x6c
 800f36a:	4873      	ldr	r0, [pc, #460]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800f36c:	f7fc fa9c 	bl	800b8a8 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	f003 0301 	and.w	r3, r3, #1
 800f378:	2b00      	cmp	r3, #0
 800f37a:	f000 8095 	beq.w	800f4a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	685b      	ldr	r3, [r3, #4]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d012      	beq.n	800f3ac <HAL_RCCEx_PeriphCLKConfig+0x78>
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	685b      	ldr	r3, [r3, #4]
 800f38a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f38e:	d00d      	beq.n	800f3ac <HAL_RCCEx_PeriphCLKConfig+0x78>
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	685b      	ldr	r3, [r3, #4]
 800f394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f398:	d008      	beq.n	800f3ac <HAL_RCCEx_PeriphCLKConfig+0x78>
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	685b      	ldr	r3, [r3, #4]
 800f39e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f3a2:	d003      	beq.n	800f3ac <HAL_RCCEx_PeriphCLKConfig+0x78>
 800f3a4:	2172      	movs	r1, #114	; 0x72
 800f3a6:	4864      	ldr	r0, [pc, #400]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800f3a8:	f7fc fa7e 	bl	800b8a8 <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f3b0:	4b62      	ldr	r3, [pc, #392]	; (800f53c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f3b2:	69db      	ldr	r3, [r3, #28]
 800f3b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d10d      	bne.n	800f3d8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f3bc:	4b5f      	ldr	r3, [pc, #380]	; (800f53c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f3be:	69db      	ldr	r3, [r3, #28]
 800f3c0:	4a5e      	ldr	r2, [pc, #376]	; (800f53c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f3c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f3c6:	61d3      	str	r3, [r2, #28]
 800f3c8:	4b5c      	ldr	r3, [pc, #368]	; (800f53c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f3ca:	69db      	ldr	r3, [r3, #28]
 800f3cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f3d0:	60bb      	str	r3, [r7, #8]
 800f3d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f3d4:	2301      	movs	r3, #1
 800f3d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f3d8:	4b59      	ldr	r3, [pc, #356]	; (800f540 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d118      	bne.n	800f416 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f3e4:	4b56      	ldr	r3, [pc, #344]	; (800f540 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	4a55      	ldr	r2, [pc, #340]	; (800f540 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800f3ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f3ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f3f0:	f7fc fec2 	bl	800c178 <HAL_GetTick>
 800f3f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f3f6:	e008      	b.n	800f40a <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f3f8:	f7fc febe 	bl	800c178 <HAL_GetTick>
 800f3fc:	4602      	mov	r2, r0
 800f3fe:	693b      	ldr	r3, [r7, #16]
 800f400:	1ad3      	subs	r3, r2, r3
 800f402:	2b64      	cmp	r3, #100	; 0x64
 800f404:	d901      	bls.n	800f40a <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 800f406:	2303      	movs	r3, #3
 800f408:	e092      	b.n	800f530 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f40a:	4b4d      	ldr	r3, [pc, #308]	; (800f540 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f412:	2b00      	cmp	r3, #0
 800f414:	d0f0      	beq.n	800f3f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800f416:	4b49      	ldr	r3, [pc, #292]	; (800f53c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f418:	6a1b      	ldr	r3, [r3, #32]
 800f41a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f41e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d02e      	beq.n	800f484 <HAL_RCCEx_PeriphCLKConfig+0x150>
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	685b      	ldr	r3, [r3, #4]
 800f42a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f42e:	68fa      	ldr	r2, [r7, #12]
 800f430:	429a      	cmp	r2, r3
 800f432:	d027      	beq.n	800f484 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f434:	4b41      	ldr	r3, [pc, #260]	; (800f53c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f436:	6a1b      	ldr	r3, [r3, #32]
 800f438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f43c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800f43e:	4b41      	ldr	r3, [pc, #260]	; (800f544 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800f440:	2201      	movs	r2, #1
 800f442:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800f444:	4b3f      	ldr	r3, [pc, #252]	; (800f544 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800f446:	2200      	movs	r2, #0
 800f448:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800f44a:	4a3c      	ldr	r2, [pc, #240]	; (800f53c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	f003 0301 	and.w	r3, r3, #1
 800f456:	2b00      	cmp	r3, #0
 800f458:	d014      	beq.n	800f484 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f45a:	f7fc fe8d 	bl	800c178 <HAL_GetTick>
 800f45e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f460:	e00a      	b.n	800f478 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f462:	f7fc fe89 	bl	800c178 <HAL_GetTick>
 800f466:	4602      	mov	r2, r0
 800f468:	693b      	ldr	r3, [r7, #16]
 800f46a:	1ad3      	subs	r3, r2, r3
 800f46c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f470:	4293      	cmp	r3, r2
 800f472:	d901      	bls.n	800f478 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 800f474:	2303      	movs	r3, #3
 800f476:	e05b      	b.n	800f530 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f478:	4b30      	ldr	r3, [pc, #192]	; (800f53c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f47a:	6a1b      	ldr	r3, [r3, #32]
 800f47c:	f003 0302 	and.w	r3, r3, #2
 800f480:	2b00      	cmp	r3, #0
 800f482:	d0ee      	beq.n	800f462 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f484:	4b2d      	ldr	r3, [pc, #180]	; (800f53c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f486:	6a1b      	ldr	r3, [r3, #32]
 800f488:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	685b      	ldr	r3, [r3, #4]
 800f490:	492a      	ldr	r1, [pc, #168]	; (800f53c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f492:	4313      	orrs	r3, r2
 800f494:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800f496:	7dfb      	ldrb	r3, [r7, #23]
 800f498:	2b01      	cmp	r3, #1
 800f49a:	d105      	bne.n	800f4a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f49c:	4b27      	ldr	r3, [pc, #156]	; (800f53c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f49e:	69db      	ldr	r3, [r3, #28]
 800f4a0:	4a26      	ldr	r2, [pc, #152]	; (800f53c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f4a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f4a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	f003 0302 	and.w	r3, r3, #2
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d01f      	beq.n	800f4f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	689b      	ldr	r3, [r3, #8]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d012      	beq.n	800f4e2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	689b      	ldr	r3, [r3, #8]
 800f4c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f4c4:	d00d      	beq.n	800f4e2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	689b      	ldr	r3, [r3, #8]
 800f4ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f4ce:	d008      	beq.n	800f4e2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	689b      	ldr	r3, [r3, #8]
 800f4d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f4d8:	d003      	beq.n	800f4e2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800f4da:	21b9      	movs	r1, #185	; 0xb9
 800f4dc:	4816      	ldr	r0, [pc, #88]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800f4de:	f7fc f9e3 	bl	800b8a8 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f4e2:	4b16      	ldr	r3, [pc, #88]	; (800f53c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f4e4:	685b      	ldr	r3, [r3, #4]
 800f4e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	689b      	ldr	r3, [r3, #8]
 800f4ee:	4913      	ldr	r1, [pc, #76]	; (800f53c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f4f0:	4313      	orrs	r3, r2
 800f4f2:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	f003 0310 	and.w	r3, r3, #16
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d016      	beq.n	800f52e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	68db      	ldr	r3, [r3, #12]
 800f504:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f508:	d008      	beq.n	800f51c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	68db      	ldr	r3, [r3, #12]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d004      	beq.n	800f51c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800f512:	f240 1115 	movw	r1, #277	; 0x115
 800f516:	4808      	ldr	r0, [pc, #32]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800f518:	f7fc f9c6 	bl	800b8a8 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f51c:	4b07      	ldr	r3, [pc, #28]	; (800f53c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f51e:	685b      	ldr	r3, [r3, #4]
 800f520:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	68db      	ldr	r3, [r3, #12]
 800f528:	4904      	ldr	r1, [pc, #16]	; (800f53c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f52a:	4313      	orrs	r3, r2
 800f52c:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800f52e:	2300      	movs	r3, #0
}
 800f530:	4618      	mov	r0, r3
 800f532:	3718      	adds	r7, #24
 800f534:	46bd      	mov	sp, r7
 800f536:	bd80      	pop	{r7, pc}
 800f538:	080128b4 	.word	0x080128b4
 800f53c:	40021000 	.word	0x40021000
 800f540:	40007000 	.word	0x40007000
 800f544:	42420440 	.word	0x42420440

0800f548 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b082      	sub	sp, #8
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d101      	bne.n	800f55a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f556:	2301      	movs	r3, #1
 800f558:	e0fd      	b.n	800f756 <HAL_SPI_Init+0x20e>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	4a80      	ldr	r2, [pc, #512]	; (800f760 <HAL_SPI_Init+0x218>)
 800f560:	4293      	cmp	r3, r2
 800f562:	d009      	beq.n	800f578 <HAL_SPI_Init+0x30>
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	4a7e      	ldr	r2, [pc, #504]	; (800f764 <HAL_SPI_Init+0x21c>)
 800f56a:	4293      	cmp	r3, r2
 800f56c:	d004      	beq.n	800f578 <HAL_SPI_Init+0x30>
 800f56e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800f572:	487d      	ldr	r0, [pc, #500]	; (800f768 <HAL_SPI_Init+0x220>)
 800f574:	f7fc f998 	bl	800b8a8 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	685b      	ldr	r3, [r3, #4]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d009      	beq.n	800f594 <HAL_SPI_Init+0x4c>
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	685b      	ldr	r3, [r3, #4]
 800f584:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f588:	d004      	beq.n	800f594 <HAL_SPI_Init+0x4c>
 800f58a:	f240 1159 	movw	r1, #345	; 0x159
 800f58e:	4876      	ldr	r0, [pc, #472]	; (800f768 <HAL_SPI_Init+0x220>)
 800f590:	f7fc f98a 	bl	800b8a8 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	689b      	ldr	r3, [r3, #8]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d00e      	beq.n	800f5ba <HAL_SPI_Init+0x72>
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	689b      	ldr	r3, [r3, #8]
 800f5a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f5a4:	d009      	beq.n	800f5ba <HAL_SPI_Init+0x72>
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	689b      	ldr	r3, [r3, #8]
 800f5aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f5ae:	d004      	beq.n	800f5ba <HAL_SPI_Init+0x72>
 800f5b0:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 800f5b4:	486c      	ldr	r0, [pc, #432]	; (800f768 <HAL_SPI_Init+0x220>)
 800f5b6:	f7fc f977 	bl	800b8a8 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	68db      	ldr	r3, [r3, #12]
 800f5be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f5c2:	d008      	beq.n	800f5d6 <HAL_SPI_Init+0x8e>
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	68db      	ldr	r3, [r3, #12]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d004      	beq.n	800f5d6 <HAL_SPI_Init+0x8e>
 800f5cc:	f240 115b 	movw	r1, #347	; 0x15b
 800f5d0:	4865      	ldr	r0, [pc, #404]	; (800f768 <HAL_SPI_Init+0x220>)
 800f5d2:	f7fc f969 	bl	800b8a8 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	699b      	ldr	r3, [r3, #24]
 800f5da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f5de:	d00d      	beq.n	800f5fc <HAL_SPI_Init+0xb4>
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	699b      	ldr	r3, [r3, #24]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d009      	beq.n	800f5fc <HAL_SPI_Init+0xb4>
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	699b      	ldr	r3, [r3, #24]
 800f5ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f5f0:	d004      	beq.n	800f5fc <HAL_SPI_Init+0xb4>
 800f5f2:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800f5f6:	485c      	ldr	r0, [pc, #368]	; (800f768 <HAL_SPI_Init+0x220>)
 800f5f8:	f7fc f956 	bl	800b8a8 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	69db      	ldr	r3, [r3, #28]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d020      	beq.n	800f646 <HAL_SPI_Init+0xfe>
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	69db      	ldr	r3, [r3, #28]
 800f608:	2b08      	cmp	r3, #8
 800f60a:	d01c      	beq.n	800f646 <HAL_SPI_Init+0xfe>
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	69db      	ldr	r3, [r3, #28]
 800f610:	2b10      	cmp	r3, #16
 800f612:	d018      	beq.n	800f646 <HAL_SPI_Init+0xfe>
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	69db      	ldr	r3, [r3, #28]
 800f618:	2b18      	cmp	r3, #24
 800f61a:	d014      	beq.n	800f646 <HAL_SPI_Init+0xfe>
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	69db      	ldr	r3, [r3, #28]
 800f620:	2b20      	cmp	r3, #32
 800f622:	d010      	beq.n	800f646 <HAL_SPI_Init+0xfe>
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	69db      	ldr	r3, [r3, #28]
 800f628:	2b28      	cmp	r3, #40	; 0x28
 800f62a:	d00c      	beq.n	800f646 <HAL_SPI_Init+0xfe>
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	69db      	ldr	r3, [r3, #28]
 800f630:	2b30      	cmp	r3, #48	; 0x30
 800f632:	d008      	beq.n	800f646 <HAL_SPI_Init+0xfe>
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	69db      	ldr	r3, [r3, #28]
 800f638:	2b38      	cmp	r3, #56	; 0x38
 800f63a:	d004      	beq.n	800f646 <HAL_SPI_Init+0xfe>
 800f63c:	f240 115d 	movw	r1, #349	; 0x15d
 800f640:	4849      	ldr	r0, [pc, #292]	; (800f768 <HAL_SPI_Init+0x220>)
 800f642:	f7fc f931 	bl	800b8a8 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	6a1b      	ldr	r3, [r3, #32]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d008      	beq.n	800f660 <HAL_SPI_Init+0x118>
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	6a1b      	ldr	r3, [r3, #32]
 800f652:	2b80      	cmp	r3, #128	; 0x80
 800f654:	d004      	beq.n	800f660 <HAL_SPI_Init+0x118>
 800f656:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800f65a:	4843      	ldr	r0, [pc, #268]	; (800f768 <HAL_SPI_Init+0x220>)
 800f65c:	f7fc f924 	bl	800b8a8 <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f664:	2b00      	cmp	r3, #0
 800f666:	d004      	beq.n	800f672 <HAL_SPI_Init+0x12a>
 800f668:	f240 1161 	movw	r1, #353	; 0x161
 800f66c:	483e      	ldr	r0, [pc, #248]	; (800f768 <HAL_SPI_Init+0x220>)
 800f66e:	f7fc f91b 	bl	800b8a8 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f676:	2b00      	cmp	r3, #0
 800f678:	d119      	bne.n	800f6ae <HAL_SPI_Init+0x166>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	691b      	ldr	r3, [r3, #16]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d008      	beq.n	800f694 <HAL_SPI_Init+0x14c>
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	691b      	ldr	r3, [r3, #16]
 800f686:	2b02      	cmp	r3, #2
 800f688:	d004      	beq.n	800f694 <HAL_SPI_Init+0x14c>
 800f68a:	f44f 71b2 	mov.w	r1, #356	; 0x164
 800f68e:	4836      	ldr	r0, [pc, #216]	; (800f768 <HAL_SPI_Init+0x220>)
 800f690:	f7fc f90a 	bl	800b8a8 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	695b      	ldr	r3, [r3, #20]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d008      	beq.n	800f6ae <HAL_SPI_Init+0x166>
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	695b      	ldr	r3, [r3, #20]
 800f6a0:	2b01      	cmp	r3, #1
 800f6a2:	d004      	beq.n	800f6ae <HAL_SPI_Init+0x166>
 800f6a4:	f240 1165 	movw	r1, #357	; 0x165
 800f6a8:	482f      	ldr	r0, [pc, #188]	; (800f768 <HAL_SPI_Init+0x220>)
 800f6aa:	f7fc f8fd 	bl	800b8a8 <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f6ba:	b2db      	uxtb	r3, r3
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d106      	bne.n	800f6ce <HAL_SPI_Init+0x186>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f6c8:	6878      	ldr	r0, [r7, #4]
 800f6ca:	f7fc f92f 	bl	800b92c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	2202      	movs	r2, #2
 800f6d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	681a      	ldr	r2, [r3, #0]
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f6e4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	685a      	ldr	r2, [r3, #4]
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	689b      	ldr	r3, [r3, #8]
 800f6ee:	431a      	orrs	r2, r3
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	68db      	ldr	r3, [r3, #12]
 800f6f4:	431a      	orrs	r2, r3
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	691b      	ldr	r3, [r3, #16]
 800f6fa:	431a      	orrs	r2, r3
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	695b      	ldr	r3, [r3, #20]
 800f700:	431a      	orrs	r2, r3
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	699b      	ldr	r3, [r3, #24]
 800f706:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f70a:	431a      	orrs	r2, r3
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	69db      	ldr	r3, [r3, #28]
 800f710:	431a      	orrs	r2, r3
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	6a1b      	ldr	r3, [r3, #32]
 800f716:	ea42 0103 	orr.w	r1, r2, r3
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	430a      	orrs	r2, r1
 800f724:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	699b      	ldr	r3, [r3, #24]
 800f72a:	0c1a      	lsrs	r2, r3, #16
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	f002 0204 	and.w	r2, r2, #4
 800f734:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	69da      	ldr	r2, [r3, #28]
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f744:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	2200      	movs	r2, #0
 800f74a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2201      	movs	r2, #1
 800f750:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800f754:	2300      	movs	r3, #0
}
 800f756:	4618      	mov	r0, r3
 800f758:	3708      	adds	r7, #8
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}
 800f75e:	bf00      	nop
 800f760:	40013000 	.word	0x40013000
 800f764:	40003800 	.word	0x40003800
 800f768:	08012904 	.word	0x08012904

0800f76c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b088      	sub	sp, #32
 800f770:	af00      	add	r7, sp, #0
 800f772:	60f8      	str	r0, [r7, #12]
 800f774:	60b9      	str	r1, [r7, #8]
 800f776:	603b      	str	r3, [r7, #0]
 800f778:	4613      	mov	r3, r2
 800f77a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f77c:	2300      	movs	r3, #0
 800f77e:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	689b      	ldr	r3, [r3, #8]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d009      	beq.n	800f79c <HAL_SPI_Transmit+0x30>
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	689b      	ldr	r3, [r3, #8]
 800f78c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f790:	d004      	beq.n	800f79c <HAL_SPI_Transmit+0x30>
 800f792:	f240 310a 	movw	r1, #778	; 0x30a
 800f796:	4896      	ldr	r0, [pc, #600]	; (800f9f0 <HAL_SPI_Transmit+0x284>)
 800f798:	f7fc f886 	bl	800b8a8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f7a2:	2b01      	cmp	r3, #1
 800f7a4:	d101      	bne.n	800f7aa <HAL_SPI_Transmit+0x3e>
 800f7a6:	2302      	movs	r3, #2
 800f7a8:	e11e      	b.n	800f9e8 <HAL_SPI_Transmit+0x27c>
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	2201      	movs	r2, #1
 800f7ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f7b2:	f7fc fce1 	bl	800c178 <HAL_GetTick>
 800f7b6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800f7b8:	88fb      	ldrh	r3, [r7, #6]
 800f7ba:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f7c2:	b2db      	uxtb	r3, r3
 800f7c4:	2b01      	cmp	r3, #1
 800f7c6:	d002      	beq.n	800f7ce <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 800f7c8:	2302      	movs	r3, #2
 800f7ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f7cc:	e103      	b.n	800f9d6 <HAL_SPI_Transmit+0x26a>
  }

  if ((pData == NULL) || (Size == 0U))
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d002      	beq.n	800f7da <HAL_SPI_Transmit+0x6e>
 800f7d4:	88fb      	ldrh	r3, [r7, #6]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d102      	bne.n	800f7e0 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 800f7da:	2301      	movs	r3, #1
 800f7dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f7de:	e0fa      	b.n	800f9d6 <HAL_SPI_Transmit+0x26a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	2203      	movs	r2, #3
 800f7e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	68ba      	ldr	r2, [r7, #8]
 800f7f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	88fa      	ldrh	r2, [r7, #6]
 800f7f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	88fa      	ldrh	r2, [r7, #6]
 800f7fe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	2200      	movs	r2, #0
 800f804:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	2200      	movs	r2, #0
 800f80a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	2200      	movs	r2, #0
 800f810:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	2200      	movs	r2, #0
 800f816:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	2200      	movs	r2, #0
 800f81c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	689b      	ldr	r3, [r3, #8]
 800f822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f826:	d107      	bne.n	800f838 <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	681a      	ldr	r2, [r3, #0]
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f836:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f842:	2b40      	cmp	r3, #64	; 0x40
 800f844:	d007      	beq.n	800f856 <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	681a      	ldr	r2, [r3, #0]
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f854:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	68db      	ldr	r3, [r3, #12]
 800f85a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f85e:	d14b      	bne.n	800f8f8 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	685b      	ldr	r3, [r3, #4]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d002      	beq.n	800f86e <HAL_SPI_Transmit+0x102>
 800f868:	8afb      	ldrh	r3, [r7, #22]
 800f86a:	2b01      	cmp	r3, #1
 800f86c:	d13e      	bne.n	800f8ec <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f872:	881a      	ldrh	r2, [r3, #0]
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f87e:	1c9a      	adds	r2, r3, #2
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f888:	b29b      	uxth	r3, r3
 800f88a:	3b01      	subs	r3, #1
 800f88c:	b29a      	uxth	r2, r3
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800f892:	e02b      	b.n	800f8ec <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	689b      	ldr	r3, [r3, #8]
 800f89a:	f003 0302 	and.w	r3, r3, #2
 800f89e:	2b02      	cmp	r3, #2
 800f8a0:	d112      	bne.n	800f8c8 <HAL_SPI_Transmit+0x15c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8a6:	881a      	ldrh	r2, [r3, #0]
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8b2:	1c9a      	adds	r2, r3, #2
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f8bc:	b29b      	uxth	r3, r3
 800f8be:	3b01      	subs	r3, #1
 800f8c0:	b29a      	uxth	r2, r3
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	86da      	strh	r2, [r3, #54]	; 0x36
 800f8c6:	e011      	b.n	800f8ec <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f8c8:	f7fc fc56 	bl	800c178 <HAL_GetTick>
 800f8cc:	4602      	mov	r2, r0
 800f8ce:	69bb      	ldr	r3, [r7, #24]
 800f8d0:	1ad3      	subs	r3, r2, r3
 800f8d2:	683a      	ldr	r2, [r7, #0]
 800f8d4:	429a      	cmp	r2, r3
 800f8d6:	d803      	bhi.n	800f8e0 <HAL_SPI_Transmit+0x174>
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8de:	d102      	bne.n	800f8e6 <HAL_SPI_Transmit+0x17a>
 800f8e0:	683b      	ldr	r3, [r7, #0]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d102      	bne.n	800f8ec <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800f8e6:	2303      	movs	r3, #3
 800f8e8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f8ea:	e074      	b.n	800f9d6 <HAL_SPI_Transmit+0x26a>
    while (hspi->TxXferCount > 0U)
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f8f0:	b29b      	uxth	r3, r3
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d1ce      	bne.n	800f894 <HAL_SPI_Transmit+0x128>
 800f8f6:	e04c      	b.n	800f992 <HAL_SPI_Transmit+0x226>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	685b      	ldr	r3, [r3, #4]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d002      	beq.n	800f906 <HAL_SPI_Transmit+0x19a>
 800f900:	8afb      	ldrh	r3, [r7, #22]
 800f902:	2b01      	cmp	r3, #1
 800f904:	d140      	bne.n	800f988 <HAL_SPI_Transmit+0x21c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	330c      	adds	r3, #12
 800f910:	7812      	ldrb	r2, [r2, #0]
 800f912:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f918:	1c5a      	adds	r2, r3, #1
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f922:	b29b      	uxth	r3, r3
 800f924:	3b01      	subs	r3, #1
 800f926:	b29a      	uxth	r2, r3
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800f92c:	e02c      	b.n	800f988 <HAL_SPI_Transmit+0x21c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	689b      	ldr	r3, [r3, #8]
 800f934:	f003 0302 	and.w	r3, r3, #2
 800f938:	2b02      	cmp	r3, #2
 800f93a:	d113      	bne.n	800f964 <HAL_SPI_Transmit+0x1f8>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	330c      	adds	r3, #12
 800f946:	7812      	ldrb	r2, [r2, #0]
 800f948:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f94e:	1c5a      	adds	r2, r3, #1
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f958:	b29b      	uxth	r3, r3
 800f95a:	3b01      	subs	r3, #1
 800f95c:	b29a      	uxth	r2, r3
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	86da      	strh	r2, [r3, #54]	; 0x36
 800f962:	e011      	b.n	800f988 <HAL_SPI_Transmit+0x21c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f964:	f7fc fc08 	bl	800c178 <HAL_GetTick>
 800f968:	4602      	mov	r2, r0
 800f96a:	69bb      	ldr	r3, [r7, #24]
 800f96c:	1ad3      	subs	r3, r2, r3
 800f96e:	683a      	ldr	r2, [r7, #0]
 800f970:	429a      	cmp	r2, r3
 800f972:	d803      	bhi.n	800f97c <HAL_SPI_Transmit+0x210>
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f97a:	d102      	bne.n	800f982 <HAL_SPI_Transmit+0x216>
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d102      	bne.n	800f988 <HAL_SPI_Transmit+0x21c>
        {
          errorcode = HAL_TIMEOUT;
 800f982:	2303      	movs	r3, #3
 800f984:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f986:	e026      	b.n	800f9d6 <HAL_SPI_Transmit+0x26a>
    while (hspi->TxXferCount > 0U)
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f98c:	b29b      	uxth	r3, r3
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d1cd      	bne.n	800f92e <HAL_SPI_Transmit+0x1c2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f992:	69ba      	ldr	r2, [r7, #24]
 800f994:	6839      	ldr	r1, [r7, #0]
 800f996:	68f8      	ldr	r0, [r7, #12]
 800f998:	f000 f896 	bl	800fac8 <SPI_EndRxTxTransaction>
 800f99c:	4603      	mov	r3, r0
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d002      	beq.n	800f9a8 <HAL_SPI_Transmit+0x23c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	2220      	movs	r2, #32
 800f9a6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	689b      	ldr	r3, [r3, #8]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d10a      	bne.n	800f9c6 <HAL_SPI_Transmit+0x25a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	613b      	str	r3, [r7, #16]
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	68db      	ldr	r3, [r3, #12]
 800f9ba:	613b      	str	r3, [r7, #16]
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	689b      	ldr	r3, [r3, #8]
 800f9c2:	613b      	str	r3, [r7, #16]
 800f9c4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d002      	beq.n	800f9d4 <HAL_SPI_Transmit+0x268>
  {
    errorcode = HAL_ERROR;
 800f9ce:	2301      	movs	r3, #1
 800f9d0:	77fb      	strb	r3, [r7, #31]
 800f9d2:	e000      	b.n	800f9d6 <HAL_SPI_Transmit+0x26a>
  }

error:
 800f9d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	2201      	movs	r2, #1
 800f9da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800f9e6:	7ffb      	ldrb	r3, [r7, #31]
}
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	3720      	adds	r7, #32
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}
 800f9f0:	08012904 	.word	0x08012904

0800f9f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b084      	sub	sp, #16
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	60f8      	str	r0, [r7, #12]
 800f9fc:	60b9      	str	r1, [r7, #8]
 800f9fe:	603b      	str	r3, [r7, #0]
 800fa00:	4613      	mov	r3, r2
 800fa02:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fa04:	e04c      	b.n	800faa0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa0c:	d048      	beq.n	800faa0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800fa0e:	f7fc fbb3 	bl	800c178 <HAL_GetTick>
 800fa12:	4602      	mov	r2, r0
 800fa14:	69bb      	ldr	r3, [r7, #24]
 800fa16:	1ad3      	subs	r3, r2, r3
 800fa18:	683a      	ldr	r2, [r7, #0]
 800fa1a:	429a      	cmp	r2, r3
 800fa1c:	d902      	bls.n	800fa24 <SPI_WaitFlagStateUntilTimeout+0x30>
 800fa1e:	683b      	ldr	r3, [r7, #0]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d13d      	bne.n	800faa0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	685a      	ldr	r2, [r3, #4]
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800fa32:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	685b      	ldr	r3, [r3, #4]
 800fa38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fa3c:	d111      	bne.n	800fa62 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	689b      	ldr	r3, [r3, #8]
 800fa42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fa46:	d004      	beq.n	800fa52 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	689b      	ldr	r3, [r3, #8]
 800fa4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fa50:	d107      	bne.n	800fa62 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	681a      	ldr	r2, [r3, #0]
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fa60:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fa6a:	d10f      	bne.n	800fa8c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	681a      	ldr	r2, [r3, #0]
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fa7a:	601a      	str	r2, [r3, #0]
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	681a      	ldr	r2, [r3, #0]
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fa8a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	2201      	movs	r2, #1
 800fa90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	2200      	movs	r2, #0
 800fa98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800fa9c:	2303      	movs	r3, #3
 800fa9e:	e00f      	b.n	800fac0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	689a      	ldr	r2, [r3, #8]
 800faa6:	68bb      	ldr	r3, [r7, #8]
 800faa8:	4013      	ands	r3, r2
 800faaa:	68ba      	ldr	r2, [r7, #8]
 800faac:	429a      	cmp	r2, r3
 800faae:	bf0c      	ite	eq
 800fab0:	2301      	moveq	r3, #1
 800fab2:	2300      	movne	r3, #0
 800fab4:	b2db      	uxtb	r3, r3
 800fab6:	461a      	mov	r2, r3
 800fab8:	79fb      	ldrb	r3, [r7, #7]
 800faba:	429a      	cmp	r2, r3
 800fabc:	d1a3      	bne.n	800fa06 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800fabe:	2300      	movs	r3, #0
}
 800fac0:	4618      	mov	r0, r3
 800fac2:	3710      	adds	r7, #16
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd80      	pop	{r7, pc}

0800fac8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b086      	sub	sp, #24
 800facc:	af02      	add	r7, sp, #8
 800face:	60f8      	str	r0, [r7, #12]
 800fad0:	60b9      	str	r1, [r7, #8]
 800fad2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	9300      	str	r3, [sp, #0]
 800fad8:	68bb      	ldr	r3, [r7, #8]
 800fada:	2200      	movs	r2, #0
 800fadc:	2180      	movs	r1, #128	; 0x80
 800fade:	68f8      	ldr	r0, [r7, #12]
 800fae0:	f7ff ff88 	bl	800f9f4 <SPI_WaitFlagStateUntilTimeout>
 800fae4:	4603      	mov	r3, r0
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d007      	beq.n	800fafa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800faee:	f043 0220 	orr.w	r2, r3, #32
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800faf6:	2303      	movs	r3, #3
 800faf8:	e000      	b.n	800fafc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800fafa:	2300      	movs	r3, #0
}
 800fafc:	4618      	mov	r0, r3
 800fafe:	3710      	adds	r7, #16
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd80      	pop	{r7, pc}

0800fb04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b082      	sub	sp, #8
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d101      	bne.n	800fb16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fb12:	2301      	movs	r3, #1
 800fb14:	e06f      	b.n	800fbf6 <HAL_TIM_Base_Init+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	4a39      	ldr	r2, [pc, #228]	; (800fc00 <HAL_TIM_Base_Init+0xfc>)
 800fb1c:	4293      	cmp	r3, r2
 800fb1e:	d013      	beq.n	800fb48 <HAL_TIM_Base_Init+0x44>
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fb28:	d00e      	beq.n	800fb48 <HAL_TIM_Base_Init+0x44>
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	4a35      	ldr	r2, [pc, #212]	; (800fc04 <HAL_TIM_Base_Init+0x100>)
 800fb30:	4293      	cmp	r3, r2
 800fb32:	d009      	beq.n	800fb48 <HAL_TIM_Base_Init+0x44>
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	4a33      	ldr	r2, [pc, #204]	; (800fc08 <HAL_TIM_Base_Init+0x104>)
 800fb3a:	4293      	cmp	r3, r2
 800fb3c:	d004      	beq.n	800fb48 <HAL_TIM_Base_Init+0x44>
 800fb3e:	f44f 7189 	mov.w	r1, #274	; 0x112
 800fb42:	4832      	ldr	r0, [pc, #200]	; (800fc0c <HAL_TIM_Base_Init+0x108>)
 800fb44:	f7fb feb0 	bl	800b8a8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	689b      	ldr	r3, [r3, #8]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d014      	beq.n	800fb7a <HAL_TIM_Base_Init+0x76>
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	689b      	ldr	r3, [r3, #8]
 800fb54:	2b10      	cmp	r3, #16
 800fb56:	d010      	beq.n	800fb7a <HAL_TIM_Base_Init+0x76>
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	689b      	ldr	r3, [r3, #8]
 800fb5c:	2b20      	cmp	r3, #32
 800fb5e:	d00c      	beq.n	800fb7a <HAL_TIM_Base_Init+0x76>
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	689b      	ldr	r3, [r3, #8]
 800fb64:	2b40      	cmp	r3, #64	; 0x40
 800fb66:	d008      	beq.n	800fb7a <HAL_TIM_Base_Init+0x76>
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	689b      	ldr	r3, [r3, #8]
 800fb6c:	2b60      	cmp	r3, #96	; 0x60
 800fb6e:	d004      	beq.n	800fb7a <HAL_TIM_Base_Init+0x76>
 800fb70:	f240 1113 	movw	r1, #275	; 0x113
 800fb74:	4825      	ldr	r0, [pc, #148]	; (800fc0c <HAL_TIM_Base_Init+0x108>)
 800fb76:	f7fb fe97 	bl	800b8a8 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	691b      	ldr	r3, [r3, #16]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d00e      	beq.n	800fba0 <HAL_TIM_Base_Init+0x9c>
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	691b      	ldr	r3, [r3, #16]
 800fb86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fb8a:	d009      	beq.n	800fba0 <HAL_TIM_Base_Init+0x9c>
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	691b      	ldr	r3, [r3, #16]
 800fb90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fb94:	d004      	beq.n	800fba0 <HAL_TIM_Base_Init+0x9c>
 800fb96:	f44f 718a 	mov.w	r1, #276	; 0x114
 800fb9a:	481c      	ldr	r0, [pc, #112]	; (800fc0c <HAL_TIM_Base_Init+0x108>)
 800fb9c:	f7fb fe84 	bl	800b8a8 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	699b      	ldr	r3, [r3, #24]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d008      	beq.n	800fbba <HAL_TIM_Base_Init+0xb6>
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	699b      	ldr	r3, [r3, #24]
 800fbac:	2b80      	cmp	r3, #128	; 0x80
 800fbae:	d004      	beq.n	800fbba <HAL_TIM_Base_Init+0xb6>
 800fbb0:	f240 1115 	movw	r1, #277	; 0x115
 800fbb4:	4815      	ldr	r0, [pc, #84]	; (800fc0c <HAL_TIM_Base_Init+0x108>)
 800fbb6:	f7fb fe77 	bl	800b8a8 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fbc0:	b2db      	uxtb	r3, r3
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d106      	bne.n	800fbd4 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	2200      	movs	r2, #0
 800fbca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fbce:	6878      	ldr	r0, [r7, #4]
 800fbd0:	f7fc f9ac 	bl	800bf2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	2202      	movs	r2, #2
 800fbd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681a      	ldr	r2, [r3, #0]
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	3304      	adds	r3, #4
 800fbe4:	4619      	mov	r1, r3
 800fbe6:	4610      	mov	r0, r2
 800fbe8:	f000 fae8 	bl	80101bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2201      	movs	r2, #1
 800fbf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fbf4:	2300      	movs	r3, #0
}
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	3708      	adds	r7, #8
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	bd80      	pop	{r7, pc}
 800fbfe:	bf00      	nop
 800fc00:	40012c00 	.word	0x40012c00
 800fc04:	40000400 	.word	0x40000400
 800fc08:	40000800 	.word	0x40000800
 800fc0c:	0801293c 	.word	0x0801293c

0800fc10 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b084      	sub	sp, #16
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	4a1a      	ldr	r2, [pc, #104]	; (800fc88 <HAL_TIM_Base_Start+0x78>)
 800fc1e:	4293      	cmp	r3, r2
 800fc20:	d013      	beq.n	800fc4a <HAL_TIM_Base_Start+0x3a>
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc2a:	d00e      	beq.n	800fc4a <HAL_TIM_Base_Start+0x3a>
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	4a16      	ldr	r2, [pc, #88]	; (800fc8c <HAL_TIM_Base_Start+0x7c>)
 800fc32:	4293      	cmp	r3, r2
 800fc34:	d009      	beq.n	800fc4a <HAL_TIM_Base_Start+0x3a>
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	4a15      	ldr	r2, [pc, #84]	; (800fc90 <HAL_TIM_Base_Start+0x80>)
 800fc3c:	4293      	cmp	r3, r2
 800fc3e:	d004      	beq.n	800fc4a <HAL_TIM_Base_Start+0x3a>
 800fc40:	f240 1185 	movw	r1, #389	; 0x185
 800fc44:	4813      	ldr	r0, [pc, #76]	; (800fc94 <HAL_TIM_Base_Start+0x84>)
 800fc46:	f7fb fe2f 	bl	800b8a8 <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	2202      	movs	r2, #2
 800fc4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	689b      	ldr	r3, [r3, #8]
 800fc58:	f003 0307 	and.w	r3, r3, #7
 800fc5c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	2b06      	cmp	r3, #6
 800fc62:	d007      	beq.n	800fc74 <HAL_TIM_Base_Start+0x64>
  {
    __HAL_TIM_ENABLE(htim);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	681a      	ldr	r2, [r3, #0]
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	f042 0201 	orr.w	r2, r2, #1
 800fc72:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2201      	movs	r2, #1
 800fc78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800fc7c:	2300      	movs	r3, #0
}
 800fc7e:	4618      	mov	r0, r3
 800fc80:	3710      	adds	r7, #16
 800fc82:	46bd      	mov	sp, r7
 800fc84:	bd80      	pop	{r7, pc}
 800fc86:	bf00      	nop
 800fc88:	40012c00 	.word	0x40012c00
 800fc8c:	40000400 	.word	0x40000400
 800fc90:	40000800 	.word	0x40000800
 800fc94:	0801293c 	.word	0x0801293c

0800fc98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b084      	sub	sp, #16
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
 800fca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fca8:	2b01      	cmp	r3, #1
 800fcaa:	d101      	bne.n	800fcb0 <HAL_TIM_ConfigClockSource+0x18>
 800fcac:	2302      	movs	r3, #2
 800fcae:	e279      	b.n	80101a4 <HAL_TIM_ConfigClockSource+0x50c>
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2201      	movs	r2, #1
 800fcb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	2202      	movs	r2, #2
 800fcbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fcc8:	d029      	beq.n	800fd1e <HAL_TIM_ConfigClockSource+0x86>
 800fcca:	683b      	ldr	r3, [r7, #0]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fcd2:	d024      	beq.n	800fd1e <HAL_TIM_ConfigClockSource+0x86>
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d020      	beq.n	800fd1e <HAL_TIM_ConfigClockSource+0x86>
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	2b10      	cmp	r3, #16
 800fce2:	d01c      	beq.n	800fd1e <HAL_TIM_ConfigClockSource+0x86>
 800fce4:	683b      	ldr	r3, [r7, #0]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	2b20      	cmp	r3, #32
 800fcea:	d018      	beq.n	800fd1e <HAL_TIM_ConfigClockSource+0x86>
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	2b30      	cmp	r3, #48	; 0x30
 800fcf2:	d014      	beq.n	800fd1e <HAL_TIM_ConfigClockSource+0x86>
 800fcf4:	683b      	ldr	r3, [r7, #0]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	2b40      	cmp	r3, #64	; 0x40
 800fcfa:	d010      	beq.n	800fd1e <HAL_TIM_ConfigClockSource+0x86>
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	2b50      	cmp	r3, #80	; 0x50
 800fd02:	d00c      	beq.n	800fd1e <HAL_TIM_ConfigClockSource+0x86>
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	2b60      	cmp	r3, #96	; 0x60
 800fd0a:	d008      	beq.n	800fd1e <HAL_TIM_ConfigClockSource+0x86>
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	2b70      	cmp	r3, #112	; 0x70
 800fd12:	d004      	beq.n	800fd1e <HAL_TIM_ConfigClockSource+0x86>
 800fd14:	f241 118a 	movw	r1, #4490	; 0x118a
 800fd18:	4896      	ldr	r0, [pc, #600]	; (800ff74 <HAL_TIM_ConfigClockSource+0x2dc>)
 800fd1a:	f7fb fdc5 	bl	800b8a8 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	689b      	ldr	r3, [r3, #8]
 800fd24:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800fd2c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fd34:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	68fa      	ldr	r2, [r7, #12]
 800fd3c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fd3e:	683b      	ldr	r3, [r7, #0]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	2b40      	cmp	r3, #64	; 0x40
 800fd44:	f000 81b6 	beq.w	80100b4 <HAL_TIM_ConfigClockSource+0x41c>
 800fd48:	2b40      	cmp	r3, #64	; 0x40
 800fd4a:	d80f      	bhi.n	800fd6c <HAL_TIM_ConfigClockSource+0xd4>
 800fd4c:	2b10      	cmp	r3, #16
 800fd4e:	f000 81fd 	beq.w	801014c <HAL_TIM_ConfigClockSource+0x4b4>
 800fd52:	2b10      	cmp	r3, #16
 800fd54:	d803      	bhi.n	800fd5e <HAL_TIM_ConfigClockSource+0xc6>
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	f000 81f8 	beq.w	801014c <HAL_TIM_ConfigClockSource+0x4b4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800fd5c:	e219      	b.n	8010192 <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 800fd5e:	2b20      	cmp	r3, #32
 800fd60:	f000 81f4 	beq.w	801014c <HAL_TIM_ConfigClockSource+0x4b4>
 800fd64:	2b30      	cmp	r3, #48	; 0x30
 800fd66:	f000 81f1 	beq.w	801014c <HAL_TIM_ConfigClockSource+0x4b4>
      break;
 800fd6a:	e212      	b.n	8010192 <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 800fd6c:	2b70      	cmp	r3, #112	; 0x70
 800fd6e:	d02e      	beq.n	800fdce <HAL_TIM_ConfigClockSource+0x136>
 800fd70:	2b70      	cmp	r3, #112	; 0x70
 800fd72:	d806      	bhi.n	800fd82 <HAL_TIM_ConfigClockSource+0xea>
 800fd74:	2b50      	cmp	r3, #80	; 0x50
 800fd76:	f000 8105 	beq.w	800ff84 <HAL_TIM_ConfigClockSource+0x2ec>
 800fd7a:	2b60      	cmp	r3, #96	; 0x60
 800fd7c:	f000 814e 	beq.w	801001c <HAL_TIM_ConfigClockSource+0x384>
      break;
 800fd80:	e207      	b.n	8010192 <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 800fd82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fd86:	d004      	beq.n	800fd92 <HAL_TIM_ConfigClockSource+0xfa>
 800fd88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fd8c:	f000 808a 	beq.w	800fea4 <HAL_TIM_ConfigClockSource+0x20c>
      break;
 800fd90:	e1ff      	b.n	8010192 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	4a78      	ldr	r2, [pc, #480]	; (800ff78 <HAL_TIM_ConfigClockSource+0x2e0>)
 800fd98:	4293      	cmp	r3, r2
 800fd9a:	f000 81f9 	beq.w	8010190 <HAL_TIM_ConfigClockSource+0x4f8>
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fda6:	f000 81f3 	beq.w	8010190 <HAL_TIM_ConfigClockSource+0x4f8>
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	4a73      	ldr	r2, [pc, #460]	; (800ff7c <HAL_TIM_ConfigClockSource+0x2e4>)
 800fdb0:	4293      	cmp	r3, r2
 800fdb2:	f000 81ed 	beq.w	8010190 <HAL_TIM_ConfigClockSource+0x4f8>
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	4a71      	ldr	r2, [pc, #452]	; (800ff80 <HAL_TIM_ConfigClockSource+0x2e8>)
 800fdbc:	4293      	cmp	r3, r2
 800fdbe:	f000 81e7 	beq.w	8010190 <HAL_TIM_ConfigClockSource+0x4f8>
 800fdc2:	f241 1196 	movw	r1, #4502	; 0x1196
 800fdc6:	486b      	ldr	r0, [pc, #428]	; (800ff74 <HAL_TIM_ConfigClockSource+0x2dc>)
 800fdc8:	f7fb fd6e 	bl	800b8a8 <assert_failed>
      break;
 800fdcc:	e1e0      	b.n	8010190 <HAL_TIM_ConfigClockSource+0x4f8>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	4a69      	ldr	r2, [pc, #420]	; (800ff78 <HAL_TIM_ConfigClockSource+0x2e0>)
 800fdd4:	4293      	cmp	r3, r2
 800fdd6:	d013      	beq.n	800fe00 <HAL_TIM_ConfigClockSource+0x168>
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fde0:	d00e      	beq.n	800fe00 <HAL_TIM_ConfigClockSource+0x168>
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	4a65      	ldr	r2, [pc, #404]	; (800ff7c <HAL_TIM_ConfigClockSource+0x2e4>)
 800fde8:	4293      	cmp	r3, r2
 800fdea:	d009      	beq.n	800fe00 <HAL_TIM_ConfigClockSource+0x168>
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	4a63      	ldr	r2, [pc, #396]	; (800ff80 <HAL_TIM_ConfigClockSource+0x2e8>)
 800fdf2:	4293      	cmp	r3, r2
 800fdf4:	d004      	beq.n	800fe00 <HAL_TIM_ConfigClockSource+0x168>
 800fdf6:	f241 119d 	movw	r1, #4509	; 0x119d
 800fdfa:	485e      	ldr	r0, [pc, #376]	; (800ff74 <HAL_TIM_ConfigClockSource+0x2dc>)
 800fdfc:	f7fb fd54 	bl	800b8a8 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	689b      	ldr	r3, [r3, #8]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d013      	beq.n	800fe30 <HAL_TIM_ConfigClockSource+0x198>
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	689b      	ldr	r3, [r3, #8]
 800fe0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe10:	d00e      	beq.n	800fe30 <HAL_TIM_ConfigClockSource+0x198>
 800fe12:	683b      	ldr	r3, [r7, #0]
 800fe14:	689b      	ldr	r3, [r3, #8]
 800fe16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fe1a:	d009      	beq.n	800fe30 <HAL_TIM_ConfigClockSource+0x198>
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	689b      	ldr	r3, [r3, #8]
 800fe20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800fe24:	d004      	beq.n	800fe30 <HAL_TIM_ConfigClockSource+0x198>
 800fe26:	f44f 518d 	mov.w	r1, #4512	; 0x11a0
 800fe2a:	4852      	ldr	r0, [pc, #328]	; (800ff74 <HAL_TIM_ConfigClockSource+0x2dc>)
 800fe2c:	f7fb fd3c 	bl	800b8a8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800fe30:	683b      	ldr	r3, [r7, #0]
 800fe32:	685b      	ldr	r3, [r3, #4]
 800fe34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fe38:	d014      	beq.n	800fe64 <HAL_TIM_ConfigClockSource+0x1cc>
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	685b      	ldr	r3, [r3, #4]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d010      	beq.n	800fe64 <HAL_TIM_ConfigClockSource+0x1cc>
 800fe42:	683b      	ldr	r3, [r7, #0]
 800fe44:	685b      	ldr	r3, [r3, #4]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d00c      	beq.n	800fe64 <HAL_TIM_ConfigClockSource+0x1cc>
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	685b      	ldr	r3, [r3, #4]
 800fe4e:	2b02      	cmp	r3, #2
 800fe50:	d008      	beq.n	800fe64 <HAL_TIM_ConfigClockSource+0x1cc>
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	685b      	ldr	r3, [r3, #4]
 800fe56:	2b0a      	cmp	r3, #10
 800fe58:	d004      	beq.n	800fe64 <HAL_TIM_ConfigClockSource+0x1cc>
 800fe5a:	f241 11a1 	movw	r1, #4513	; 0x11a1
 800fe5e:	4845      	ldr	r0, [pc, #276]	; (800ff74 <HAL_TIM_ConfigClockSource+0x2dc>)
 800fe60:	f7fb fd22 	bl	800b8a8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800fe64:	683b      	ldr	r3, [r7, #0]
 800fe66:	68db      	ldr	r3, [r3, #12]
 800fe68:	2b0f      	cmp	r3, #15
 800fe6a:	d904      	bls.n	800fe76 <HAL_TIM_ConfigClockSource+0x1de>
 800fe6c:	f241 11a2 	movw	r1, #4514	; 0x11a2
 800fe70:	4840      	ldr	r0, [pc, #256]	; (800ff74 <HAL_TIM_ConfigClockSource+0x2dc>)
 800fe72:	f7fb fd19 	bl	800b8a8 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	6818      	ldr	r0, [r3, #0]
 800fe7a:	683b      	ldr	r3, [r7, #0]
 800fe7c:	6899      	ldr	r1, [r3, #8]
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	685a      	ldr	r2, [r3, #4]
 800fe82:	683b      	ldr	r3, [r7, #0]
 800fe84:	68db      	ldr	r3, [r3, #12]
 800fe86:	f000 fa72 	bl	801036e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	689b      	ldr	r3, [r3, #8]
 800fe90:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800fe98:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	68fa      	ldr	r2, [r7, #12]
 800fea0:	609a      	str	r2, [r3, #8]
      break;
 800fea2:	e176      	b.n	8010192 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	4a33      	ldr	r2, [pc, #204]	; (800ff78 <HAL_TIM_ConfigClockSource+0x2e0>)
 800feaa:	4293      	cmp	r3, r2
 800feac:	d013      	beq.n	800fed6 <HAL_TIM_ConfigClockSource+0x23e>
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800feb6:	d00e      	beq.n	800fed6 <HAL_TIM_ConfigClockSource+0x23e>
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	4a2f      	ldr	r2, [pc, #188]	; (800ff7c <HAL_TIM_ConfigClockSource+0x2e4>)
 800febe:	4293      	cmp	r3, r2
 800fec0:	d009      	beq.n	800fed6 <HAL_TIM_ConfigClockSource+0x23e>
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	4a2e      	ldr	r2, [pc, #184]	; (800ff80 <HAL_TIM_ConfigClockSource+0x2e8>)
 800fec8:	4293      	cmp	r3, r2
 800feca:	d004      	beq.n	800fed6 <HAL_TIM_ConfigClockSource+0x23e>
 800fecc:	f241 11b5 	movw	r1, #4533	; 0x11b5
 800fed0:	4828      	ldr	r0, [pc, #160]	; (800ff74 <HAL_TIM_ConfigClockSource+0x2dc>)
 800fed2:	f7fb fce9 	bl	800b8a8 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800fed6:	683b      	ldr	r3, [r7, #0]
 800fed8:	689b      	ldr	r3, [r3, #8]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d013      	beq.n	800ff06 <HAL_TIM_ConfigClockSource+0x26e>
 800fede:	683b      	ldr	r3, [r7, #0]
 800fee0:	689b      	ldr	r3, [r3, #8]
 800fee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fee6:	d00e      	beq.n	800ff06 <HAL_TIM_ConfigClockSource+0x26e>
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	689b      	ldr	r3, [r3, #8]
 800feec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fef0:	d009      	beq.n	800ff06 <HAL_TIM_ConfigClockSource+0x26e>
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	689b      	ldr	r3, [r3, #8]
 800fef6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800fefa:	d004      	beq.n	800ff06 <HAL_TIM_ConfigClockSource+0x26e>
 800fefc:	f241 11b8 	movw	r1, #4536	; 0x11b8
 800ff00:	481c      	ldr	r0, [pc, #112]	; (800ff74 <HAL_TIM_ConfigClockSource+0x2dc>)
 800ff02:	f7fb fcd1 	bl	800b8a8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	685b      	ldr	r3, [r3, #4]
 800ff0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ff0e:	d014      	beq.n	800ff3a <HAL_TIM_ConfigClockSource+0x2a2>
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	685b      	ldr	r3, [r3, #4]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d010      	beq.n	800ff3a <HAL_TIM_ConfigClockSource+0x2a2>
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	685b      	ldr	r3, [r3, #4]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d00c      	beq.n	800ff3a <HAL_TIM_ConfigClockSource+0x2a2>
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	685b      	ldr	r3, [r3, #4]
 800ff24:	2b02      	cmp	r3, #2
 800ff26:	d008      	beq.n	800ff3a <HAL_TIM_ConfigClockSource+0x2a2>
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	685b      	ldr	r3, [r3, #4]
 800ff2c:	2b0a      	cmp	r3, #10
 800ff2e:	d004      	beq.n	800ff3a <HAL_TIM_ConfigClockSource+0x2a2>
 800ff30:	f241 11b9 	movw	r1, #4537	; 0x11b9
 800ff34:	480f      	ldr	r0, [pc, #60]	; (800ff74 <HAL_TIM_ConfigClockSource+0x2dc>)
 800ff36:	f7fb fcb7 	bl	800b8a8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	68db      	ldr	r3, [r3, #12]
 800ff3e:	2b0f      	cmp	r3, #15
 800ff40:	d904      	bls.n	800ff4c <HAL_TIM_ConfigClockSource+0x2b4>
 800ff42:	f241 11ba 	movw	r1, #4538	; 0x11ba
 800ff46:	480b      	ldr	r0, [pc, #44]	; (800ff74 <HAL_TIM_ConfigClockSource+0x2dc>)
 800ff48:	f7fb fcae 	bl	800b8a8 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	6818      	ldr	r0, [r3, #0]
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	6899      	ldr	r1, [r3, #8]
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	685a      	ldr	r2, [r3, #4]
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	68db      	ldr	r3, [r3, #12]
 800ff5c:	f000 fa07 	bl	801036e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	689a      	ldr	r2, [r3, #8]
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ff6e:	609a      	str	r2, [r3, #8]
      break;
 800ff70:	e10f      	b.n	8010192 <HAL_TIM_ConfigClockSource+0x4fa>
 800ff72:	bf00      	nop
 800ff74:	0801293c 	.word	0x0801293c
 800ff78:	40012c00 	.word	0x40012c00
 800ff7c:	40000400 	.word	0x40000400
 800ff80:	40000800 	.word	0x40000800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	4a88      	ldr	r2, [pc, #544]	; (80101ac <HAL_TIM_ConfigClockSource+0x514>)
 800ff8a:	4293      	cmp	r3, r2
 800ff8c:	d013      	beq.n	800ffb6 <HAL_TIM_ConfigClockSource+0x31e>
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff96:	d00e      	beq.n	800ffb6 <HAL_TIM_ConfigClockSource+0x31e>
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	4a84      	ldr	r2, [pc, #528]	; (80101b0 <HAL_TIM_ConfigClockSource+0x518>)
 800ff9e:	4293      	cmp	r3, r2
 800ffa0:	d009      	beq.n	800ffb6 <HAL_TIM_ConfigClockSource+0x31e>
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	4a83      	ldr	r2, [pc, #524]	; (80101b4 <HAL_TIM_ConfigClockSource+0x51c>)
 800ffa8:	4293      	cmp	r3, r2
 800ffaa:	d004      	beq.n	800ffb6 <HAL_TIM_ConfigClockSource+0x31e>
 800ffac:	f241 11c9 	movw	r1, #4553	; 0x11c9
 800ffb0:	4881      	ldr	r0, [pc, #516]	; (80101b8 <HAL_TIM_ConfigClockSource+0x520>)
 800ffb2:	f7fb fc79 	bl	800b8a8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	685b      	ldr	r3, [r3, #4]
 800ffba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ffbe:	d014      	beq.n	800ffea <HAL_TIM_ConfigClockSource+0x352>
 800ffc0:	683b      	ldr	r3, [r7, #0]
 800ffc2:	685b      	ldr	r3, [r3, #4]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d010      	beq.n	800ffea <HAL_TIM_ConfigClockSource+0x352>
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	685b      	ldr	r3, [r3, #4]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d00c      	beq.n	800ffea <HAL_TIM_ConfigClockSource+0x352>
 800ffd0:	683b      	ldr	r3, [r7, #0]
 800ffd2:	685b      	ldr	r3, [r3, #4]
 800ffd4:	2b02      	cmp	r3, #2
 800ffd6:	d008      	beq.n	800ffea <HAL_TIM_ConfigClockSource+0x352>
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	685b      	ldr	r3, [r3, #4]
 800ffdc:	2b0a      	cmp	r3, #10
 800ffde:	d004      	beq.n	800ffea <HAL_TIM_ConfigClockSource+0x352>
 800ffe0:	f241 11cc 	movw	r1, #4556	; 0x11cc
 800ffe4:	4874      	ldr	r0, [pc, #464]	; (80101b8 <HAL_TIM_ConfigClockSource+0x520>)
 800ffe6:	f7fb fc5f 	bl	800b8a8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ffea:	683b      	ldr	r3, [r7, #0]
 800ffec:	68db      	ldr	r3, [r3, #12]
 800ffee:	2b0f      	cmp	r3, #15
 800fff0:	d904      	bls.n	800fffc <HAL_TIM_ConfigClockSource+0x364>
 800fff2:	f241 11cd 	movw	r1, #4557	; 0x11cd
 800fff6:	4870      	ldr	r0, [pc, #448]	; (80101b8 <HAL_TIM_ConfigClockSource+0x520>)
 800fff8:	f7fb fc56 	bl	800b8a8 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	6818      	ldr	r0, [r3, #0]
 8010000:	683b      	ldr	r3, [r7, #0]
 8010002:	6859      	ldr	r1, [r3, #4]
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	68db      	ldr	r3, [r3, #12]
 8010008:	461a      	mov	r2, r3
 801000a:	f000 f939 	bl	8010280 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	2150      	movs	r1, #80	; 0x50
 8010014:	4618      	mov	r0, r3
 8010016:	f000 f990 	bl	801033a <TIM_ITRx_SetConfig>
      break;
 801001a:	e0ba      	b.n	8010192 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	4a62      	ldr	r2, [pc, #392]	; (80101ac <HAL_TIM_ConfigClockSource+0x514>)
 8010022:	4293      	cmp	r3, r2
 8010024:	d013      	beq.n	801004e <HAL_TIM_ConfigClockSource+0x3b6>
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801002e:	d00e      	beq.n	801004e <HAL_TIM_ConfigClockSource+0x3b6>
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	4a5e      	ldr	r2, [pc, #376]	; (80101b0 <HAL_TIM_ConfigClockSource+0x518>)
 8010036:	4293      	cmp	r3, r2
 8010038:	d009      	beq.n	801004e <HAL_TIM_ConfigClockSource+0x3b6>
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	4a5d      	ldr	r2, [pc, #372]	; (80101b4 <HAL_TIM_ConfigClockSource+0x51c>)
 8010040:	4293      	cmp	r3, r2
 8010042:	d004      	beq.n	801004e <HAL_TIM_ConfigClockSource+0x3b6>
 8010044:	f241 11d9 	movw	r1, #4569	; 0x11d9
 8010048:	485b      	ldr	r0, [pc, #364]	; (80101b8 <HAL_TIM_ConfigClockSource+0x520>)
 801004a:	f7fb fc2d 	bl	800b8a8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 801004e:	683b      	ldr	r3, [r7, #0]
 8010050:	685b      	ldr	r3, [r3, #4]
 8010052:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010056:	d014      	beq.n	8010082 <HAL_TIM_ConfigClockSource+0x3ea>
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	685b      	ldr	r3, [r3, #4]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d010      	beq.n	8010082 <HAL_TIM_ConfigClockSource+0x3ea>
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	685b      	ldr	r3, [r3, #4]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d00c      	beq.n	8010082 <HAL_TIM_ConfigClockSource+0x3ea>
 8010068:	683b      	ldr	r3, [r7, #0]
 801006a:	685b      	ldr	r3, [r3, #4]
 801006c:	2b02      	cmp	r3, #2
 801006e:	d008      	beq.n	8010082 <HAL_TIM_ConfigClockSource+0x3ea>
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	685b      	ldr	r3, [r3, #4]
 8010074:	2b0a      	cmp	r3, #10
 8010076:	d004      	beq.n	8010082 <HAL_TIM_ConfigClockSource+0x3ea>
 8010078:	f241 11dc 	movw	r1, #4572	; 0x11dc
 801007c:	484e      	ldr	r0, [pc, #312]	; (80101b8 <HAL_TIM_ConfigClockSource+0x520>)
 801007e:	f7fb fc13 	bl	800b8a8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010082:	683b      	ldr	r3, [r7, #0]
 8010084:	68db      	ldr	r3, [r3, #12]
 8010086:	2b0f      	cmp	r3, #15
 8010088:	d904      	bls.n	8010094 <HAL_TIM_ConfigClockSource+0x3fc>
 801008a:	f241 11dd 	movw	r1, #4573	; 0x11dd
 801008e:	484a      	ldr	r0, [pc, #296]	; (80101b8 <HAL_TIM_ConfigClockSource+0x520>)
 8010090:	f7fb fc0a 	bl	800b8a8 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	6818      	ldr	r0, [r3, #0]
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	6859      	ldr	r1, [r3, #4]
 801009c:	683b      	ldr	r3, [r7, #0]
 801009e:	68db      	ldr	r3, [r3, #12]
 80100a0:	461a      	mov	r2, r3
 80100a2:	f000 f91b 	bl	80102dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	2160      	movs	r1, #96	; 0x60
 80100ac:	4618      	mov	r0, r3
 80100ae:	f000 f944 	bl	801033a <TIM_ITRx_SetConfig>
      break;
 80100b2:	e06e      	b.n	8010192 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	4a3c      	ldr	r2, [pc, #240]	; (80101ac <HAL_TIM_ConfigClockSource+0x514>)
 80100ba:	4293      	cmp	r3, r2
 80100bc:	d013      	beq.n	80100e6 <HAL_TIM_ConfigClockSource+0x44e>
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80100c6:	d00e      	beq.n	80100e6 <HAL_TIM_ConfigClockSource+0x44e>
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	4a38      	ldr	r2, [pc, #224]	; (80101b0 <HAL_TIM_ConfigClockSource+0x518>)
 80100ce:	4293      	cmp	r3, r2
 80100d0:	d009      	beq.n	80100e6 <HAL_TIM_ConfigClockSource+0x44e>
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	4a37      	ldr	r2, [pc, #220]	; (80101b4 <HAL_TIM_ConfigClockSource+0x51c>)
 80100d8:	4293      	cmp	r3, r2
 80100da:	d004      	beq.n	80100e6 <HAL_TIM_ConfigClockSource+0x44e>
 80100dc:	f241 11e9 	movw	r1, #4585	; 0x11e9
 80100e0:	4835      	ldr	r0, [pc, #212]	; (80101b8 <HAL_TIM_ConfigClockSource+0x520>)
 80100e2:	f7fb fbe1 	bl	800b8a8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	685b      	ldr	r3, [r3, #4]
 80100ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80100ee:	d014      	beq.n	801011a <HAL_TIM_ConfigClockSource+0x482>
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	685b      	ldr	r3, [r3, #4]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d010      	beq.n	801011a <HAL_TIM_ConfigClockSource+0x482>
 80100f8:	683b      	ldr	r3, [r7, #0]
 80100fa:	685b      	ldr	r3, [r3, #4]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d00c      	beq.n	801011a <HAL_TIM_ConfigClockSource+0x482>
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	685b      	ldr	r3, [r3, #4]
 8010104:	2b02      	cmp	r3, #2
 8010106:	d008      	beq.n	801011a <HAL_TIM_ConfigClockSource+0x482>
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	685b      	ldr	r3, [r3, #4]
 801010c:	2b0a      	cmp	r3, #10
 801010e:	d004      	beq.n	801011a <HAL_TIM_ConfigClockSource+0x482>
 8010110:	f241 11ec 	movw	r1, #4588	; 0x11ec
 8010114:	4828      	ldr	r0, [pc, #160]	; (80101b8 <HAL_TIM_ConfigClockSource+0x520>)
 8010116:	f7fb fbc7 	bl	800b8a8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	68db      	ldr	r3, [r3, #12]
 801011e:	2b0f      	cmp	r3, #15
 8010120:	d904      	bls.n	801012c <HAL_TIM_ConfigClockSource+0x494>
 8010122:	f241 11ed 	movw	r1, #4589	; 0x11ed
 8010126:	4824      	ldr	r0, [pc, #144]	; (80101b8 <HAL_TIM_ConfigClockSource+0x520>)
 8010128:	f7fb fbbe 	bl	800b8a8 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	6818      	ldr	r0, [r3, #0]
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	6859      	ldr	r1, [r3, #4]
 8010134:	683b      	ldr	r3, [r7, #0]
 8010136:	68db      	ldr	r3, [r3, #12]
 8010138:	461a      	mov	r2, r3
 801013a:	f000 f8a1 	bl	8010280 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	2140      	movs	r1, #64	; 0x40
 8010144:	4618      	mov	r0, r3
 8010146:	f000 f8f8 	bl	801033a <TIM_ITRx_SetConfig>
      break;
 801014a:	e022      	b.n	8010192 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	4a16      	ldr	r2, [pc, #88]	; (80101ac <HAL_TIM_ConfigClockSource+0x514>)
 8010152:	4293      	cmp	r3, r2
 8010154:	d013      	beq.n	801017e <HAL_TIM_ConfigClockSource+0x4e6>
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801015e:	d00e      	beq.n	801017e <HAL_TIM_ConfigClockSource+0x4e6>
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	4a12      	ldr	r2, [pc, #72]	; (80101b0 <HAL_TIM_ConfigClockSource+0x518>)
 8010166:	4293      	cmp	r3, r2
 8010168:	d009      	beq.n	801017e <HAL_TIM_ConfigClockSource+0x4e6>
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	4a11      	ldr	r2, [pc, #68]	; (80101b4 <HAL_TIM_ConfigClockSource+0x51c>)
 8010170:	4293      	cmp	r3, r2
 8010172:	d004      	beq.n	801017e <HAL_TIM_ConfigClockSource+0x4e6>
 8010174:	f241 11fc 	movw	r1, #4604	; 0x11fc
 8010178:	480f      	ldr	r0, [pc, #60]	; (80101b8 <HAL_TIM_ConfigClockSource+0x520>)
 801017a:	f7fb fb95 	bl	800b8a8 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	681a      	ldr	r2, [r3, #0]
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	4619      	mov	r1, r3
 8010188:	4610      	mov	r0, r2
 801018a:	f000 f8d6 	bl	801033a <TIM_ITRx_SetConfig>
      break;
 801018e:	e000      	b.n	8010192 <HAL_TIM_ConfigClockSource+0x4fa>
      break;
 8010190:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	2201      	movs	r2, #1
 8010196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	2200      	movs	r2, #0
 801019e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80101a2:	2300      	movs	r3, #0
}
 80101a4:	4618      	mov	r0, r3
 80101a6:	3710      	adds	r7, #16
 80101a8:	46bd      	mov	sp, r7
 80101aa:	bd80      	pop	{r7, pc}
 80101ac:	40012c00 	.word	0x40012c00
 80101b0:	40000400 	.word	0x40000400
 80101b4:	40000800 	.word	0x40000800
 80101b8:	0801293c 	.word	0x0801293c

080101bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80101bc:	b480      	push	{r7}
 80101be:	b085      	sub	sp, #20
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
 80101c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	4a29      	ldr	r2, [pc, #164]	; (8010274 <TIM_Base_SetConfig+0xb8>)
 80101d0:	4293      	cmp	r3, r2
 80101d2:	d00b      	beq.n	80101ec <TIM_Base_SetConfig+0x30>
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80101da:	d007      	beq.n	80101ec <TIM_Base_SetConfig+0x30>
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	4a26      	ldr	r2, [pc, #152]	; (8010278 <TIM_Base_SetConfig+0xbc>)
 80101e0:	4293      	cmp	r3, r2
 80101e2:	d003      	beq.n	80101ec <TIM_Base_SetConfig+0x30>
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	4a25      	ldr	r2, [pc, #148]	; (801027c <TIM_Base_SetConfig+0xc0>)
 80101e8:	4293      	cmp	r3, r2
 80101ea:	d108      	bne.n	80101fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80101f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	685b      	ldr	r3, [r3, #4]
 80101f8:	68fa      	ldr	r2, [r7, #12]
 80101fa:	4313      	orrs	r3, r2
 80101fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	4a1c      	ldr	r2, [pc, #112]	; (8010274 <TIM_Base_SetConfig+0xb8>)
 8010202:	4293      	cmp	r3, r2
 8010204:	d00b      	beq.n	801021e <TIM_Base_SetConfig+0x62>
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801020c:	d007      	beq.n	801021e <TIM_Base_SetConfig+0x62>
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	4a19      	ldr	r2, [pc, #100]	; (8010278 <TIM_Base_SetConfig+0xbc>)
 8010212:	4293      	cmp	r3, r2
 8010214:	d003      	beq.n	801021e <TIM_Base_SetConfig+0x62>
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	4a18      	ldr	r2, [pc, #96]	; (801027c <TIM_Base_SetConfig+0xc0>)
 801021a:	4293      	cmp	r3, r2
 801021c:	d108      	bne.n	8010230 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	68db      	ldr	r3, [r3, #12]
 801022a:	68fa      	ldr	r2, [r7, #12]
 801022c:	4313      	orrs	r3, r2
 801022e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010236:	683b      	ldr	r3, [r7, #0]
 8010238:	695b      	ldr	r3, [r3, #20]
 801023a:	4313      	orrs	r3, r2
 801023c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	68fa      	ldr	r2, [r7, #12]
 8010242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010244:	683b      	ldr	r3, [r7, #0]
 8010246:	689a      	ldr	r2, [r3, #8]
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801024c:	683b      	ldr	r3, [r7, #0]
 801024e:	681a      	ldr	r2, [r3, #0]
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	4a07      	ldr	r2, [pc, #28]	; (8010274 <TIM_Base_SetConfig+0xb8>)
 8010258:	4293      	cmp	r3, r2
 801025a:	d103      	bne.n	8010264 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801025c:	683b      	ldr	r3, [r7, #0]
 801025e:	691a      	ldr	r2, [r3, #16]
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	2201      	movs	r2, #1
 8010268:	615a      	str	r2, [r3, #20]
}
 801026a:	bf00      	nop
 801026c:	3714      	adds	r7, #20
 801026e:	46bd      	mov	sp, r7
 8010270:	bc80      	pop	{r7}
 8010272:	4770      	bx	lr
 8010274:	40012c00 	.word	0x40012c00
 8010278:	40000400 	.word	0x40000400
 801027c:	40000800 	.word	0x40000800

08010280 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010280:	b480      	push	{r7}
 8010282:	b087      	sub	sp, #28
 8010284:	af00      	add	r7, sp, #0
 8010286:	60f8      	str	r0, [r7, #12]
 8010288:	60b9      	str	r1, [r7, #8]
 801028a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	6a1b      	ldr	r3, [r3, #32]
 8010290:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	6a1b      	ldr	r3, [r3, #32]
 8010296:	f023 0201 	bic.w	r2, r3, #1
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	699b      	ldr	r3, [r3, #24]
 80102a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80102a4:	693b      	ldr	r3, [r7, #16]
 80102a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80102aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	011b      	lsls	r3, r3, #4
 80102b0:	693a      	ldr	r2, [r7, #16]
 80102b2:	4313      	orrs	r3, r2
 80102b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80102b6:	697b      	ldr	r3, [r7, #20]
 80102b8:	f023 030a 	bic.w	r3, r3, #10
 80102bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80102be:	697a      	ldr	r2, [r7, #20]
 80102c0:	68bb      	ldr	r3, [r7, #8]
 80102c2:	4313      	orrs	r3, r2
 80102c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	693a      	ldr	r2, [r7, #16]
 80102ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	697a      	ldr	r2, [r7, #20]
 80102d0:	621a      	str	r2, [r3, #32]
}
 80102d2:	bf00      	nop
 80102d4:	371c      	adds	r7, #28
 80102d6:	46bd      	mov	sp, r7
 80102d8:	bc80      	pop	{r7}
 80102da:	4770      	bx	lr

080102dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80102dc:	b480      	push	{r7}
 80102de:	b087      	sub	sp, #28
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	60f8      	str	r0, [r7, #12]
 80102e4:	60b9      	str	r1, [r7, #8]
 80102e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	6a1b      	ldr	r3, [r3, #32]
 80102ec:	f023 0210 	bic.w	r2, r3, #16
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	699b      	ldr	r3, [r3, #24]
 80102f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	6a1b      	ldr	r3, [r3, #32]
 80102fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010300:	697b      	ldr	r3, [r7, #20]
 8010302:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010306:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	031b      	lsls	r3, r3, #12
 801030c:	697a      	ldr	r2, [r7, #20]
 801030e:	4313      	orrs	r3, r2
 8010310:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010312:	693b      	ldr	r3, [r7, #16]
 8010314:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010318:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801031a:	68bb      	ldr	r3, [r7, #8]
 801031c:	011b      	lsls	r3, r3, #4
 801031e:	693a      	ldr	r2, [r7, #16]
 8010320:	4313      	orrs	r3, r2
 8010322:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	697a      	ldr	r2, [r7, #20]
 8010328:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	693a      	ldr	r2, [r7, #16]
 801032e:	621a      	str	r2, [r3, #32]
}
 8010330:	bf00      	nop
 8010332:	371c      	adds	r7, #28
 8010334:	46bd      	mov	sp, r7
 8010336:	bc80      	pop	{r7}
 8010338:	4770      	bx	lr

0801033a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801033a:	b480      	push	{r7}
 801033c:	b085      	sub	sp, #20
 801033e:	af00      	add	r7, sp, #0
 8010340:	6078      	str	r0, [r7, #4]
 8010342:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	689b      	ldr	r3, [r3, #8]
 8010348:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010350:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010352:	683a      	ldr	r2, [r7, #0]
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	4313      	orrs	r3, r2
 8010358:	f043 0307 	orr.w	r3, r3, #7
 801035c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	68fa      	ldr	r2, [r7, #12]
 8010362:	609a      	str	r2, [r3, #8]
}
 8010364:	bf00      	nop
 8010366:	3714      	adds	r7, #20
 8010368:	46bd      	mov	sp, r7
 801036a:	bc80      	pop	{r7}
 801036c:	4770      	bx	lr

0801036e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801036e:	b480      	push	{r7}
 8010370:	b087      	sub	sp, #28
 8010372:	af00      	add	r7, sp, #0
 8010374:	60f8      	str	r0, [r7, #12]
 8010376:	60b9      	str	r1, [r7, #8]
 8010378:	607a      	str	r2, [r7, #4]
 801037a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	689b      	ldr	r3, [r3, #8]
 8010380:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010382:	697b      	ldr	r3, [r7, #20]
 8010384:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010388:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801038a:	683b      	ldr	r3, [r7, #0]
 801038c:	021a      	lsls	r2, r3, #8
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	431a      	orrs	r2, r3
 8010392:	68bb      	ldr	r3, [r7, #8]
 8010394:	4313      	orrs	r3, r2
 8010396:	697a      	ldr	r2, [r7, #20]
 8010398:	4313      	orrs	r3, r2
 801039a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	697a      	ldr	r2, [r7, #20]
 80103a0:	609a      	str	r2, [r3, #8]
}
 80103a2:	bf00      	nop
 80103a4:	371c      	adds	r7, #28
 80103a6:	46bd      	mov	sp, r7
 80103a8:	bc80      	pop	{r7}
 80103aa:	4770      	bx	lr

080103ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b084      	sub	sp, #16
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
 80103b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	4a43      	ldr	r2, [pc, #268]	; (80104c8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80103bc:	4293      	cmp	r3, r2
 80103be:	d013      	beq.n	80103e8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80103c8:	d00e      	beq.n	80103e8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	4a3f      	ldr	r2, [pc, #252]	; (80104cc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80103d0:	4293      	cmp	r3, r2
 80103d2:	d009      	beq.n	80103e8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	4a3d      	ldr	r2, [pc, #244]	; (80104d0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80103da:	4293      	cmp	r3, r2
 80103dc:	d004      	beq.n	80103e8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80103de:	f240 6164 	movw	r1, #1636	; 0x664
 80103e2:	483c      	ldr	r0, [pc, #240]	; (80104d4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80103e4:	f7fb fa60 	bl	800b8a8 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d020      	beq.n	8010432 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80103f0:	683b      	ldr	r3, [r7, #0]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	2b10      	cmp	r3, #16
 80103f6:	d01c      	beq.n	8010432 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80103f8:	683b      	ldr	r3, [r7, #0]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	2b20      	cmp	r3, #32
 80103fe:	d018      	beq.n	8010432 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010400:	683b      	ldr	r3, [r7, #0]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	2b30      	cmp	r3, #48	; 0x30
 8010406:	d014      	beq.n	8010432 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	2b40      	cmp	r3, #64	; 0x40
 801040e:	d010      	beq.n	8010432 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010410:	683b      	ldr	r3, [r7, #0]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	2b50      	cmp	r3, #80	; 0x50
 8010416:	d00c      	beq.n	8010432 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010418:	683b      	ldr	r3, [r7, #0]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	2b60      	cmp	r3, #96	; 0x60
 801041e:	d008      	beq.n	8010432 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010420:	683b      	ldr	r3, [r7, #0]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	2b70      	cmp	r3, #112	; 0x70
 8010426:	d004      	beq.n	8010432 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010428:	f240 6165 	movw	r1, #1637	; 0x665
 801042c:	4829      	ldr	r0, [pc, #164]	; (80104d4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 801042e:	f7fb fa3b 	bl	800b8a8 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8010432:	683b      	ldr	r3, [r7, #0]
 8010434:	685b      	ldr	r3, [r3, #4]
 8010436:	2b80      	cmp	r3, #128	; 0x80
 8010438:	d008      	beq.n	801044c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 801043a:	683b      	ldr	r3, [r7, #0]
 801043c:	685b      	ldr	r3, [r3, #4]
 801043e:	2b00      	cmp	r3, #0
 8010440:	d004      	beq.n	801044c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8010442:	f240 6166 	movw	r1, #1638	; 0x666
 8010446:	4823      	ldr	r0, [pc, #140]	; (80104d4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8010448:	f7fb fa2e 	bl	800b8a8 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010452:	2b01      	cmp	r3, #1
 8010454:	d101      	bne.n	801045a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8010456:	2302      	movs	r3, #2
 8010458:	e032      	b.n	80104c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	2201      	movs	r2, #1
 801045e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	2202      	movs	r2, #2
 8010466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	685b      	ldr	r3, [r3, #4]
 8010470:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	689b      	ldr	r3, [r3, #8]
 8010478:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010480:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010482:	683b      	ldr	r3, [r7, #0]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	68fa      	ldr	r2, [r7, #12]
 8010488:	4313      	orrs	r3, r2
 801048a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 801048c:	68bb      	ldr	r3, [r7, #8]
 801048e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010492:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010494:	683b      	ldr	r3, [r7, #0]
 8010496:	685b      	ldr	r3, [r3, #4]
 8010498:	68ba      	ldr	r2, [r7, #8]
 801049a:	4313      	orrs	r3, r2
 801049c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	68fa      	ldr	r2, [r7, #12]
 80104a4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	68ba      	ldr	r2, [r7, #8]
 80104ac:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	2201      	movs	r2, #1
 80104b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	2200      	movs	r2, #0
 80104ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80104be:	2300      	movs	r3, #0
}
 80104c0:	4618      	mov	r0, r3
 80104c2:	3710      	adds	r7, #16
 80104c4:	46bd      	mov	sp, r7
 80104c6:	bd80      	pop	{r7, pc}
 80104c8:	40012c00 	.word	0x40012c00
 80104cc:	40000400 	.word	0x40000400
 80104d0:	40000800 	.word	0x40000800
 80104d4:	08012974 	.word	0x08012974

080104d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b082      	sub	sp, #8
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d101      	bne.n	80104ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80104e6:	2301      	movs	r3, #1
 80104e8:	e092      	b.n	8010610 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	699b      	ldr	r3, [r3, #24]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d02c      	beq.n	801054c <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	4a48      	ldr	r2, [pc, #288]	; (8010618 <HAL_UART_Init+0x140>)
 80104f8:	4293      	cmp	r3, r2
 80104fa:	d00e      	beq.n	801051a <HAL_UART_Init+0x42>
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	4a46      	ldr	r2, [pc, #280]	; (801061c <HAL_UART_Init+0x144>)
 8010502:	4293      	cmp	r3, r2
 8010504:	d009      	beq.n	801051a <HAL_UART_Init+0x42>
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	4a45      	ldr	r2, [pc, #276]	; (8010620 <HAL_UART_Init+0x148>)
 801050c:	4293      	cmp	r3, r2
 801050e:	d004      	beq.n	801051a <HAL_UART_Init+0x42>
 8010510:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8010514:	4843      	ldr	r0, [pc, #268]	; (8010624 <HAL_UART_Init+0x14c>)
 8010516:	f7fb f9c7 	bl	800b8a8 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	699b      	ldr	r3, [r3, #24]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d028      	beq.n	8010574 <HAL_UART_Init+0x9c>
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	699b      	ldr	r3, [r3, #24]
 8010526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801052a:	d023      	beq.n	8010574 <HAL_UART_Init+0x9c>
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	699b      	ldr	r3, [r3, #24]
 8010530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010534:	d01e      	beq.n	8010574 <HAL_UART_Init+0x9c>
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	699b      	ldr	r3, [r3, #24]
 801053a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801053e:	d019      	beq.n	8010574 <HAL_UART_Init+0x9c>
 8010540:	f240 1147 	movw	r1, #327	; 0x147
 8010544:	4837      	ldr	r0, [pc, #220]	; (8010624 <HAL_UART_Init+0x14c>)
 8010546:	f7fb f9af 	bl	800b8a8 <assert_failed>
 801054a:	e013      	b.n	8010574 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	4a31      	ldr	r2, [pc, #196]	; (8010618 <HAL_UART_Init+0x140>)
 8010552:	4293      	cmp	r3, r2
 8010554:	d00e      	beq.n	8010574 <HAL_UART_Init+0x9c>
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	4a30      	ldr	r2, [pc, #192]	; (801061c <HAL_UART_Init+0x144>)
 801055c:	4293      	cmp	r3, r2
 801055e:	d009      	beq.n	8010574 <HAL_UART_Init+0x9c>
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	4a2e      	ldr	r2, [pc, #184]	; (8010620 <HAL_UART_Init+0x148>)
 8010566:	4293      	cmp	r3, r2
 8010568:	d004      	beq.n	8010574 <HAL_UART_Init+0x9c>
 801056a:	f240 114b 	movw	r1, #331	; 0x14b
 801056e:	482d      	ldr	r0, [pc, #180]	; (8010624 <HAL_UART_Init+0x14c>)
 8010570:	f7fb f99a 	bl	800b8a8 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	689b      	ldr	r3, [r3, #8]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d009      	beq.n	8010590 <HAL_UART_Init+0xb8>
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	689b      	ldr	r3, [r3, #8]
 8010580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010584:	d004      	beq.n	8010590 <HAL_UART_Init+0xb8>
 8010586:	f240 114d 	movw	r1, #333	; 0x14d
 801058a:	4826      	ldr	r0, [pc, #152]	; (8010624 <HAL_UART_Init+0x14c>)
 801058c:	f7fb f98c 	bl	800b8a8 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010596:	b2db      	uxtb	r3, r3
 8010598:	2b00      	cmp	r3, #0
 801059a:	d106      	bne.n	80105aa <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	2200      	movs	r2, #0
 80105a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80105a4:	6878      	ldr	r0, [r7, #4]
 80105a6:	f7fb fd07 	bl	800bfb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	2224      	movs	r2, #36	; 0x24
 80105ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	68da      	ldr	r2, [r3, #12]
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80105c0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80105c2:	6878      	ldr	r0, [r7, #4]
 80105c4:	f000 fb8c 	bl	8010ce0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	691a      	ldr	r2, [r3, #16]
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80105d6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	695a      	ldr	r2, [r3, #20]
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80105e6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	68da      	ldr	r2, [r3, #12]
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80105f6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	2200      	movs	r2, #0
 80105fc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	2220      	movs	r2, #32
 8010602:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	2220      	movs	r2, #32
 801060a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 801060e:	2300      	movs	r3, #0
}
 8010610:	4618      	mov	r0, r3
 8010612:	3708      	adds	r7, #8
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}
 8010618:	40013800 	.word	0x40013800
 801061c:	40004400 	.word	0x40004400
 8010620:	40004800 	.word	0x40004800
 8010624:	080129b0 	.word	0x080129b0

08010628 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b088      	sub	sp, #32
 801062c:	af02      	add	r7, sp, #8
 801062e:	60f8      	str	r0, [r7, #12]
 8010630:	60b9      	str	r1, [r7, #8]
 8010632:	603b      	str	r3, [r7, #0]
 8010634:	4613      	mov	r3, r2
 8010636:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8010638:	2300      	movs	r3, #0
 801063a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010642:	b2db      	uxtb	r3, r3
 8010644:	2b20      	cmp	r3, #32
 8010646:	f040 8083 	bne.w	8010750 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 801064a:	68bb      	ldr	r3, [r7, #8]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d002      	beq.n	8010656 <HAL_UART_Transmit+0x2e>
 8010650:	88fb      	ldrh	r3, [r7, #6]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d101      	bne.n	801065a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8010656:	2301      	movs	r3, #1
 8010658:	e07b      	b.n	8010752 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010660:	2b01      	cmp	r3, #1
 8010662:	d101      	bne.n	8010668 <HAL_UART_Transmit+0x40>
 8010664:	2302      	movs	r3, #2
 8010666:	e074      	b.n	8010752 <HAL_UART_Transmit+0x12a>
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	2201      	movs	r2, #1
 801066c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	2200      	movs	r2, #0
 8010674:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	2221      	movs	r2, #33	; 0x21
 801067a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 801067e:	f7fb fd7b 	bl	800c178 <HAL_GetTick>
 8010682:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	88fa      	ldrh	r2, [r7, #6]
 8010688:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	88fa      	ldrh	r2, [r7, #6]
 801068e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8010690:	e042      	b.n	8010718 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010696:	b29b      	uxth	r3, r3
 8010698:	3b01      	subs	r3, #1
 801069a:	b29a      	uxth	r2, r3
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	689b      	ldr	r3, [r3, #8]
 80106a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80106a8:	d122      	bne.n	80106f0 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80106aa:	683b      	ldr	r3, [r7, #0]
 80106ac:	9300      	str	r3, [sp, #0]
 80106ae:	697b      	ldr	r3, [r7, #20]
 80106b0:	2200      	movs	r2, #0
 80106b2:	2180      	movs	r1, #128	; 0x80
 80106b4:	68f8      	ldr	r0, [r7, #12]
 80106b6:	f000 f9aa 	bl	8010a0e <UART_WaitOnFlagUntilTimeout>
 80106ba:	4603      	mov	r3, r0
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d001      	beq.n	80106c4 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80106c0:	2303      	movs	r3, #3
 80106c2:	e046      	b.n	8010752 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80106c4:	68bb      	ldr	r3, [r7, #8]
 80106c6:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80106c8:	693b      	ldr	r3, [r7, #16]
 80106ca:	881b      	ldrh	r3, [r3, #0]
 80106cc:	461a      	mov	r2, r3
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80106d6:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	691b      	ldr	r3, [r3, #16]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d103      	bne.n	80106e8 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80106e0:	68bb      	ldr	r3, [r7, #8]
 80106e2:	3302      	adds	r3, #2
 80106e4:	60bb      	str	r3, [r7, #8]
 80106e6:	e017      	b.n	8010718 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80106e8:	68bb      	ldr	r3, [r7, #8]
 80106ea:	3301      	adds	r3, #1
 80106ec:	60bb      	str	r3, [r7, #8]
 80106ee:	e013      	b.n	8010718 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80106f0:	683b      	ldr	r3, [r7, #0]
 80106f2:	9300      	str	r3, [sp, #0]
 80106f4:	697b      	ldr	r3, [r7, #20]
 80106f6:	2200      	movs	r2, #0
 80106f8:	2180      	movs	r1, #128	; 0x80
 80106fa:	68f8      	ldr	r0, [r7, #12]
 80106fc:	f000 f987 	bl	8010a0e <UART_WaitOnFlagUntilTimeout>
 8010700:	4603      	mov	r3, r0
 8010702:	2b00      	cmp	r3, #0
 8010704:	d001      	beq.n	801070a <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8010706:	2303      	movs	r3, #3
 8010708:	e023      	b.n	8010752 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 801070a:	68bb      	ldr	r3, [r7, #8]
 801070c:	1c5a      	adds	r2, r3, #1
 801070e:	60ba      	str	r2, [r7, #8]
 8010710:	781a      	ldrb	r2, [r3, #0]
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801071c:	b29b      	uxth	r3, r3
 801071e:	2b00      	cmp	r3, #0
 8010720:	d1b7      	bne.n	8010692 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010722:	683b      	ldr	r3, [r7, #0]
 8010724:	9300      	str	r3, [sp, #0]
 8010726:	697b      	ldr	r3, [r7, #20]
 8010728:	2200      	movs	r2, #0
 801072a:	2140      	movs	r1, #64	; 0x40
 801072c:	68f8      	ldr	r0, [r7, #12]
 801072e:	f000 f96e 	bl	8010a0e <UART_WaitOnFlagUntilTimeout>
 8010732:	4603      	mov	r3, r0
 8010734:	2b00      	cmp	r3, #0
 8010736:	d001      	beq.n	801073c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8010738:	2303      	movs	r3, #3
 801073a:	e00a      	b.n	8010752 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	2220      	movs	r2, #32
 8010740:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	2200      	movs	r2, #0
 8010748:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 801074c:	2300      	movs	r3, #0
 801074e:	e000      	b.n	8010752 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8010750:	2302      	movs	r3, #2
  }
}
 8010752:	4618      	mov	r0, r3
 8010754:	3718      	adds	r7, #24
 8010756:	46bd      	mov	sp, r7
 8010758:	bd80      	pop	{r7, pc}

0801075a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801075a:	b480      	push	{r7}
 801075c:	b085      	sub	sp, #20
 801075e:	af00      	add	r7, sp, #0
 8010760:	60f8      	str	r0, [r7, #12]
 8010762:	60b9      	str	r1, [r7, #8]
 8010764:	4613      	mov	r3, r2
 8010766:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801076e:	b2db      	uxtb	r3, r3
 8010770:	2b20      	cmp	r3, #32
 8010772:	d140      	bne.n	80107f6 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8010774:	68bb      	ldr	r3, [r7, #8]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d002      	beq.n	8010780 <HAL_UART_Receive_IT+0x26>
 801077a:	88fb      	ldrh	r3, [r7, #6]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d101      	bne.n	8010784 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8010780:	2301      	movs	r3, #1
 8010782:	e039      	b.n	80107f8 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801078a:	2b01      	cmp	r3, #1
 801078c:	d101      	bne.n	8010792 <HAL_UART_Receive_IT+0x38>
 801078e:	2302      	movs	r3, #2
 8010790:	e032      	b.n	80107f8 <HAL_UART_Receive_IT+0x9e>
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	2201      	movs	r2, #1
 8010796:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	68ba      	ldr	r2, [r7, #8]
 801079e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	88fa      	ldrh	r2, [r7, #6]
 80107a4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	88fa      	ldrh	r2, [r7, #6]
 80107aa:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	2200      	movs	r2, #0
 80107b0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	2222      	movs	r2, #34	; 0x22
 80107b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	2200      	movs	r2, #0
 80107be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	68da      	ldr	r2, [r3, #12]
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80107d0:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	695a      	ldr	r2, [r3, #20]
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	f042 0201 	orr.w	r2, r2, #1
 80107e0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	68da      	ldr	r2, [r3, #12]
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	f042 0220 	orr.w	r2, r2, #32
 80107f0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80107f2:	2300      	movs	r3, #0
 80107f4:	e000      	b.n	80107f8 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80107f6:	2302      	movs	r3, #2
  }
}
 80107f8:	4618      	mov	r0, r3
 80107fa:	3714      	adds	r7, #20
 80107fc:	46bd      	mov	sp, r7
 80107fe:	bc80      	pop	{r7}
 8010800:	4770      	bx	lr
	...

08010804 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010804:	b580      	push	{r7, lr}
 8010806:	b088      	sub	sp, #32
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	68db      	ldr	r3, [r3, #12]
 801081a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	695b      	ldr	r3, [r3, #20]
 8010822:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8010824:	2300      	movs	r3, #0
 8010826:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8010828:	2300      	movs	r3, #0
 801082a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801082c:	69fb      	ldr	r3, [r7, #28]
 801082e:	f003 030f 	and.w	r3, r3, #15
 8010832:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8010834:	693b      	ldr	r3, [r7, #16]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d10d      	bne.n	8010856 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801083a:	69fb      	ldr	r3, [r7, #28]
 801083c:	f003 0320 	and.w	r3, r3, #32
 8010840:	2b00      	cmp	r3, #0
 8010842:	d008      	beq.n	8010856 <HAL_UART_IRQHandler+0x52>
 8010844:	69bb      	ldr	r3, [r7, #24]
 8010846:	f003 0320 	and.w	r3, r3, #32
 801084a:	2b00      	cmp	r3, #0
 801084c:	d003      	beq.n	8010856 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 801084e:	6878      	ldr	r0, [r7, #4]
 8010850:	f000 f9c5 	bl	8010bde <UART_Receive_IT>
      return;
 8010854:	e0cc      	b.n	80109f0 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8010856:	693b      	ldr	r3, [r7, #16]
 8010858:	2b00      	cmp	r3, #0
 801085a:	f000 80ab 	beq.w	80109b4 <HAL_UART_IRQHandler+0x1b0>
 801085e:	697b      	ldr	r3, [r7, #20]
 8010860:	f003 0301 	and.w	r3, r3, #1
 8010864:	2b00      	cmp	r3, #0
 8010866:	d105      	bne.n	8010874 <HAL_UART_IRQHandler+0x70>
 8010868:	69bb      	ldr	r3, [r7, #24]
 801086a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 801086e:	2b00      	cmp	r3, #0
 8010870:	f000 80a0 	beq.w	80109b4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8010874:	69fb      	ldr	r3, [r7, #28]
 8010876:	f003 0301 	and.w	r3, r3, #1
 801087a:	2b00      	cmp	r3, #0
 801087c:	d00a      	beq.n	8010894 <HAL_UART_IRQHandler+0x90>
 801087e:	69bb      	ldr	r3, [r7, #24]
 8010880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010884:	2b00      	cmp	r3, #0
 8010886:	d005      	beq.n	8010894 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801088c:	f043 0201 	orr.w	r2, r3, #1
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010894:	69fb      	ldr	r3, [r7, #28]
 8010896:	f003 0304 	and.w	r3, r3, #4
 801089a:	2b00      	cmp	r3, #0
 801089c:	d00a      	beq.n	80108b4 <HAL_UART_IRQHandler+0xb0>
 801089e:	697b      	ldr	r3, [r7, #20]
 80108a0:	f003 0301 	and.w	r3, r3, #1
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d005      	beq.n	80108b4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108ac:	f043 0202 	orr.w	r2, r3, #2
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80108b4:	69fb      	ldr	r3, [r7, #28]
 80108b6:	f003 0302 	and.w	r3, r3, #2
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d00a      	beq.n	80108d4 <HAL_UART_IRQHandler+0xd0>
 80108be:	697b      	ldr	r3, [r7, #20]
 80108c0:	f003 0301 	and.w	r3, r3, #1
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d005      	beq.n	80108d4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108cc:	f043 0204 	orr.w	r2, r3, #4
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80108d4:	69fb      	ldr	r3, [r7, #28]
 80108d6:	f003 0308 	and.w	r3, r3, #8
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d00a      	beq.n	80108f4 <HAL_UART_IRQHandler+0xf0>
 80108de:	697b      	ldr	r3, [r7, #20]
 80108e0:	f003 0301 	and.w	r3, r3, #1
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d005      	beq.n	80108f4 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108ec:	f043 0208 	orr.w	r2, r3, #8
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d078      	beq.n	80109ee <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80108fc:	69fb      	ldr	r3, [r7, #28]
 80108fe:	f003 0320 	and.w	r3, r3, #32
 8010902:	2b00      	cmp	r3, #0
 8010904:	d007      	beq.n	8010916 <HAL_UART_IRQHandler+0x112>
 8010906:	69bb      	ldr	r3, [r7, #24]
 8010908:	f003 0320 	and.w	r3, r3, #32
 801090c:	2b00      	cmp	r3, #0
 801090e:	d002      	beq.n	8010916 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8010910:	6878      	ldr	r0, [r7, #4]
 8010912:	f000 f964 	bl	8010bde <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	695b      	ldr	r3, [r3, #20]
 801091c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010920:	2b00      	cmp	r3, #0
 8010922:	bf14      	ite	ne
 8010924:	2301      	movne	r3, #1
 8010926:	2300      	moveq	r3, #0
 8010928:	b2db      	uxtb	r3, r3
 801092a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010930:	f003 0308 	and.w	r3, r3, #8
 8010934:	2b00      	cmp	r3, #0
 8010936:	d102      	bne.n	801093e <HAL_UART_IRQHandler+0x13a>
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d031      	beq.n	80109a2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801093e:	6878      	ldr	r0, [r7, #4]
 8010940:	f000 f8af 	bl	8010aa2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	695b      	ldr	r3, [r3, #20]
 801094a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801094e:	2b00      	cmp	r3, #0
 8010950:	d023      	beq.n	801099a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	695a      	ldr	r2, [r3, #20]
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010960:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010966:	2b00      	cmp	r3, #0
 8010968:	d013      	beq.n	8010992 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801096e:	4a22      	ldr	r2, [pc, #136]	; (80109f8 <HAL_UART_IRQHandler+0x1f4>)
 8010970:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010976:	4618      	mov	r0, r3
 8010978:	f7fc f8e6 	bl	800cb48 <HAL_DMA_Abort_IT>
 801097c:	4603      	mov	r3, r0
 801097e:	2b00      	cmp	r3, #0
 8010980:	d016      	beq.n	80109b0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010988:	687a      	ldr	r2, [r7, #4]
 801098a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801098c:	4610      	mov	r0, r2
 801098e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010990:	e00e      	b.n	80109b0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010992:	6878      	ldr	r0, [r7, #4]
 8010994:	f7f4 fe3e 	bl	8005614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010998:	e00a      	b.n	80109b0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801099a:	6878      	ldr	r0, [r7, #4]
 801099c:	f7f4 fe3a 	bl	8005614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109a0:	e006      	b.n	80109b0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80109a2:	6878      	ldr	r0, [r7, #4]
 80109a4:	f7f4 fe36 	bl	8005614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	2200      	movs	r2, #0
 80109ac:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80109ae:	e01e      	b.n	80109ee <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109b0:	bf00      	nop
    return;
 80109b2:	e01c      	b.n	80109ee <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80109b4:	69fb      	ldr	r3, [r7, #28]
 80109b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d008      	beq.n	80109d0 <HAL_UART_IRQHandler+0x1cc>
 80109be:	69bb      	ldr	r3, [r7, #24]
 80109c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d003      	beq.n	80109d0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80109c8:	6878      	ldr	r0, [r7, #4]
 80109ca:	f000 f89b 	bl	8010b04 <UART_Transmit_IT>
    return;
 80109ce:	e00f      	b.n	80109f0 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80109d0:	69fb      	ldr	r3, [r7, #28]
 80109d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d00a      	beq.n	80109f0 <HAL_UART_IRQHandler+0x1ec>
 80109da:	69bb      	ldr	r3, [r7, #24]
 80109dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d005      	beq.n	80109f0 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80109e4:	6878      	ldr	r0, [r7, #4]
 80109e6:	f000 f8e2 	bl	8010bae <UART_EndTransmit_IT>
    return;
 80109ea:	bf00      	nop
 80109ec:	e000      	b.n	80109f0 <HAL_UART_IRQHandler+0x1ec>
    return;
 80109ee:	bf00      	nop
  }
}
 80109f0:	3720      	adds	r7, #32
 80109f2:	46bd      	mov	sp, r7
 80109f4:	bd80      	pop	{r7, pc}
 80109f6:	bf00      	nop
 80109f8:	08010add 	.word	0x08010add

080109fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80109fc:	b480      	push	{r7}
 80109fe:	b083      	sub	sp, #12
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8010a04:	bf00      	nop
 8010a06:	370c      	adds	r7, #12
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	bc80      	pop	{r7}
 8010a0c:	4770      	bx	lr

08010a0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8010a0e:	b580      	push	{r7, lr}
 8010a10:	b084      	sub	sp, #16
 8010a12:	af00      	add	r7, sp, #0
 8010a14:	60f8      	str	r0, [r7, #12]
 8010a16:	60b9      	str	r1, [r7, #8]
 8010a18:	603b      	str	r3, [r7, #0]
 8010a1a:	4613      	mov	r3, r2
 8010a1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010a1e:	e02c      	b.n	8010a7a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010a20:	69bb      	ldr	r3, [r7, #24]
 8010a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a26:	d028      	beq.n	8010a7a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8010a28:	69bb      	ldr	r3, [r7, #24]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d007      	beq.n	8010a3e <UART_WaitOnFlagUntilTimeout+0x30>
 8010a2e:	f7fb fba3 	bl	800c178 <HAL_GetTick>
 8010a32:	4602      	mov	r2, r0
 8010a34:	683b      	ldr	r3, [r7, #0]
 8010a36:	1ad3      	subs	r3, r2, r3
 8010a38:	69ba      	ldr	r2, [r7, #24]
 8010a3a:	429a      	cmp	r2, r3
 8010a3c:	d21d      	bcs.n	8010a7a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	68da      	ldr	r2, [r3, #12]
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010a4c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	695a      	ldr	r2, [r3, #20]
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	f022 0201 	bic.w	r2, r2, #1
 8010a5c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	2220      	movs	r2, #32
 8010a62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	2220      	movs	r2, #32
 8010a6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	2200      	movs	r2, #0
 8010a72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8010a76:	2303      	movs	r3, #3
 8010a78:	e00f      	b.n	8010a9a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	681a      	ldr	r2, [r3, #0]
 8010a80:	68bb      	ldr	r3, [r7, #8]
 8010a82:	4013      	ands	r3, r2
 8010a84:	68ba      	ldr	r2, [r7, #8]
 8010a86:	429a      	cmp	r2, r3
 8010a88:	bf0c      	ite	eq
 8010a8a:	2301      	moveq	r3, #1
 8010a8c:	2300      	movne	r3, #0
 8010a8e:	b2db      	uxtb	r3, r3
 8010a90:	461a      	mov	r2, r3
 8010a92:	79fb      	ldrb	r3, [r7, #7]
 8010a94:	429a      	cmp	r2, r3
 8010a96:	d0c3      	beq.n	8010a20 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010a98:	2300      	movs	r3, #0
}
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	3710      	adds	r7, #16
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	bd80      	pop	{r7, pc}

08010aa2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010aa2:	b480      	push	{r7}
 8010aa4:	b083      	sub	sp, #12
 8010aa6:	af00      	add	r7, sp, #0
 8010aa8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	68da      	ldr	r2, [r3, #12]
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010ab8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	695a      	ldr	r2, [r3, #20]
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	f022 0201 	bic.w	r2, r2, #1
 8010ac8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	2220      	movs	r2, #32
 8010ace:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8010ad2:	bf00      	nop
 8010ad4:	370c      	adds	r7, #12
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	bc80      	pop	{r7}
 8010ada:	4770      	bx	lr

08010adc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b084      	sub	sp, #16
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ae8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	2200      	movs	r2, #0
 8010aee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	2200      	movs	r2, #0
 8010af4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010af6:	68f8      	ldr	r0, [r7, #12]
 8010af8:	f7f4 fd8c 	bl	8005614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010afc:	bf00      	nop
 8010afe:	3710      	adds	r7, #16
 8010b00:	46bd      	mov	sp, r7
 8010b02:	bd80      	pop	{r7, pc}

08010b04 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010b04:	b480      	push	{r7}
 8010b06:	b085      	sub	sp, #20
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010b12:	b2db      	uxtb	r3, r3
 8010b14:	2b21      	cmp	r3, #33	; 0x21
 8010b16:	d144      	bne.n	8010ba2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	689b      	ldr	r3, [r3, #8]
 8010b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010b20:	d11a      	bne.n	8010b58 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	6a1b      	ldr	r3, [r3, #32]
 8010b26:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	881b      	ldrh	r3, [r3, #0]
 8010b2c:	461a      	mov	r2, r3
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010b36:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	691b      	ldr	r3, [r3, #16]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d105      	bne.n	8010b4c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	6a1b      	ldr	r3, [r3, #32]
 8010b44:	1c9a      	adds	r2, r3, #2
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	621a      	str	r2, [r3, #32]
 8010b4a:	e00e      	b.n	8010b6a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	6a1b      	ldr	r3, [r3, #32]
 8010b50:	1c5a      	adds	r2, r3, #1
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	621a      	str	r2, [r3, #32]
 8010b56:	e008      	b.n	8010b6a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	6a1b      	ldr	r3, [r3, #32]
 8010b5c:	1c59      	adds	r1, r3, #1
 8010b5e:	687a      	ldr	r2, [r7, #4]
 8010b60:	6211      	str	r1, [r2, #32]
 8010b62:	781a      	ldrb	r2, [r3, #0]
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010b6e:	b29b      	uxth	r3, r3
 8010b70:	3b01      	subs	r3, #1
 8010b72:	b29b      	uxth	r3, r3
 8010b74:	687a      	ldr	r2, [r7, #4]
 8010b76:	4619      	mov	r1, r3
 8010b78:	84d1      	strh	r1, [r2, #38]	; 0x26
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d10f      	bne.n	8010b9e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	68da      	ldr	r2, [r3, #12]
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010b8c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	68da      	ldr	r2, [r3, #12]
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010b9c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	e000      	b.n	8010ba4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8010ba2:	2302      	movs	r3, #2
  }
}
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	3714      	adds	r7, #20
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bc80      	pop	{r7}
 8010bac:	4770      	bx	lr

08010bae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010bae:	b580      	push	{r7, lr}
 8010bb0:	b082      	sub	sp, #8
 8010bb2:	af00      	add	r7, sp, #0
 8010bb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	68da      	ldr	r2, [r3, #12]
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010bc4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	2220      	movs	r2, #32
 8010bca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010bce:	6878      	ldr	r0, [r7, #4]
 8010bd0:	f7ff ff14 	bl	80109fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8010bd4:	2300      	movs	r3, #0
}
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	3708      	adds	r7, #8
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bd80      	pop	{r7, pc}

08010bde <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8010bde:	b580      	push	{r7, lr}
 8010be0:	b084      	sub	sp, #16
 8010be2:	af00      	add	r7, sp, #0
 8010be4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010bec:	b2db      	uxtb	r3, r3
 8010bee:	2b22      	cmp	r3, #34	; 0x22
 8010bf0:	d171      	bne.n	8010cd6 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	689b      	ldr	r3, [r3, #8]
 8010bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010bfa:	d123      	bne.n	8010c44 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c00:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	691b      	ldr	r3, [r3, #16]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d10e      	bne.n	8010c28 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	685b      	ldr	r3, [r3, #4]
 8010c10:	b29b      	uxth	r3, r3
 8010c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c16:	b29a      	uxth	r2, r3
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c20:	1c9a      	adds	r2, r3, #2
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	629a      	str	r2, [r3, #40]	; 0x28
 8010c26:	e029      	b.n	8010c7c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	685b      	ldr	r3, [r3, #4]
 8010c2e:	b29b      	uxth	r3, r3
 8010c30:	b2db      	uxtb	r3, r3
 8010c32:	b29a      	uxth	r2, r3
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c3c:	1c5a      	adds	r2, r3, #1
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	629a      	str	r2, [r3, #40]	; 0x28
 8010c42:	e01b      	b.n	8010c7c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	691b      	ldr	r3, [r3, #16]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d10a      	bne.n	8010c62 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	6858      	ldr	r0, [r3, #4]
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c56:	1c59      	adds	r1, r3, #1
 8010c58:	687a      	ldr	r2, [r7, #4]
 8010c5a:	6291      	str	r1, [r2, #40]	; 0x28
 8010c5c:	b2c2      	uxtb	r2, r0
 8010c5e:	701a      	strb	r2, [r3, #0]
 8010c60:	e00c      	b.n	8010c7c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	685b      	ldr	r3, [r3, #4]
 8010c68:	b2da      	uxtb	r2, r3
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c6e:	1c58      	adds	r0, r3, #1
 8010c70:	6879      	ldr	r1, [r7, #4]
 8010c72:	6288      	str	r0, [r1, #40]	; 0x28
 8010c74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010c78:	b2d2      	uxtb	r2, r2
 8010c7a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010c80:	b29b      	uxth	r3, r3
 8010c82:	3b01      	subs	r3, #1
 8010c84:	b29b      	uxth	r3, r3
 8010c86:	687a      	ldr	r2, [r7, #4]
 8010c88:	4619      	mov	r1, r3
 8010c8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d120      	bne.n	8010cd2 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	68da      	ldr	r2, [r3, #12]
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	f022 0220 	bic.w	r2, r2, #32
 8010c9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	68da      	ldr	r2, [r3, #12]
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010cae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	695a      	ldr	r2, [r3, #20]
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	f022 0201 	bic.w	r2, r2, #1
 8010cbe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	2220      	movs	r2, #32
 8010cc4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8010cc8:	6878      	ldr	r0, [r7, #4]
 8010cca:	f7f4 fc81 	bl	80055d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8010cce:	2300      	movs	r3, #0
 8010cd0:	e002      	b.n	8010cd8 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	e000      	b.n	8010cd8 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8010cd6:	2302      	movs	r3, #2
  }
}
 8010cd8:	4618      	mov	r0, r3
 8010cda:	3710      	adds	r7, #16
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd80      	pop	{r7, pc}

08010ce0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b084      	sub	sp, #16
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	685b      	ldr	r3, [r3, #4]
 8010cec:	4a84      	ldr	r2, [pc, #528]	; (8010f00 <UART_SetConfig+0x220>)
 8010cee:	4293      	cmp	r3, r2
 8010cf0:	d904      	bls.n	8010cfc <UART_SetConfig+0x1c>
 8010cf2:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8010cf6:	4883      	ldr	r0, [pc, #524]	; (8010f04 <UART_SetConfig+0x224>)
 8010cf8:	f7fa fdd6 	bl	800b8a8 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	68db      	ldr	r3, [r3, #12]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d009      	beq.n	8010d18 <UART_SetConfig+0x38>
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	68db      	ldr	r3, [r3, #12]
 8010d08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010d0c:	d004      	beq.n	8010d18 <UART_SetConfig+0x38>
 8010d0e:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8010d12:	487c      	ldr	r0, [pc, #496]	; (8010f04 <UART_SetConfig+0x224>)
 8010d14:	f7fa fdc8 	bl	800b8a8 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	691b      	ldr	r3, [r3, #16]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d00e      	beq.n	8010d3e <UART_SetConfig+0x5e>
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	691b      	ldr	r3, [r3, #16]
 8010d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010d28:	d009      	beq.n	8010d3e <UART_SetConfig+0x5e>
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	691b      	ldr	r3, [r3, #16]
 8010d2e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010d32:	d004      	beq.n	8010d3e <UART_SetConfig+0x5e>
 8010d34:	f640 31ff 	movw	r1, #3071	; 0xbff
 8010d38:	4872      	ldr	r0, [pc, #456]	; (8010f04 <UART_SetConfig+0x224>)
 8010d3a:	f7fa fdb5 	bl	800b8a8 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	695a      	ldr	r2, [r3, #20]
 8010d42:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8010d46:	4013      	ands	r3, r2
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d103      	bne.n	8010d54 <UART_SetConfig+0x74>
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	695b      	ldr	r3, [r3, #20]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d104      	bne.n	8010d5e <UART_SetConfig+0x7e>
 8010d54:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8010d58:	486a      	ldr	r0, [pc, #424]	; (8010f04 <UART_SetConfig+0x224>)
 8010d5a:	f7fa fda5 	bl	800b8a8 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	691b      	ldr	r3, [r3, #16]
 8010d64:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	68da      	ldr	r2, [r3, #12]
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	430a      	orrs	r2, r1
 8010d72:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	689a      	ldr	r2, [r3, #8]
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	691b      	ldr	r3, [r3, #16]
 8010d7c:	431a      	orrs	r2, r3
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	695b      	ldr	r3, [r3, #20]
 8010d82:	4313      	orrs	r3, r2
 8010d84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	68db      	ldr	r3, [r3, #12]
 8010d8c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8010d90:	f023 030c 	bic.w	r3, r3, #12
 8010d94:	687a      	ldr	r2, [r7, #4]
 8010d96:	6812      	ldr	r2, [r2, #0]
 8010d98:	68f9      	ldr	r1, [r7, #12]
 8010d9a:	430b      	orrs	r3, r1
 8010d9c:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	695b      	ldr	r3, [r3, #20]
 8010da4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	699a      	ldr	r2, [r3, #24]
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	430a      	orrs	r2, r1
 8010db2:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	4a53      	ldr	r2, [pc, #332]	; (8010f08 <UART_SetConfig+0x228>)
 8010dba:	4293      	cmp	r3, r2
 8010dbc:	d14e      	bne.n	8010e5c <UART_SetConfig+0x17c>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8010dbe:	f7fe fa87 	bl	800f2d0 <HAL_RCC_GetPCLK2Freq>
 8010dc2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010dc4:	68ba      	ldr	r2, [r7, #8]
 8010dc6:	4613      	mov	r3, r2
 8010dc8:	009b      	lsls	r3, r3, #2
 8010dca:	4413      	add	r3, r2
 8010dcc:	009a      	lsls	r2, r3, #2
 8010dce:	441a      	add	r2, r3
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	685b      	ldr	r3, [r3, #4]
 8010dd4:	009b      	lsls	r3, r3, #2
 8010dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8010dda:	4a4c      	ldr	r2, [pc, #304]	; (8010f0c <UART_SetConfig+0x22c>)
 8010ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8010de0:	095b      	lsrs	r3, r3, #5
 8010de2:	0119      	lsls	r1, r3, #4
 8010de4:	68ba      	ldr	r2, [r7, #8]
 8010de6:	4613      	mov	r3, r2
 8010de8:	009b      	lsls	r3, r3, #2
 8010dea:	4413      	add	r3, r2
 8010dec:	009a      	lsls	r2, r3, #2
 8010dee:	441a      	add	r2, r3
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	685b      	ldr	r3, [r3, #4]
 8010df4:	009b      	lsls	r3, r3, #2
 8010df6:	fbb2 f2f3 	udiv	r2, r2, r3
 8010dfa:	4b44      	ldr	r3, [pc, #272]	; (8010f0c <UART_SetConfig+0x22c>)
 8010dfc:	fba3 0302 	umull	r0, r3, r3, r2
 8010e00:	095b      	lsrs	r3, r3, #5
 8010e02:	2064      	movs	r0, #100	; 0x64
 8010e04:	fb00 f303 	mul.w	r3, r0, r3
 8010e08:	1ad3      	subs	r3, r2, r3
 8010e0a:	011b      	lsls	r3, r3, #4
 8010e0c:	3332      	adds	r3, #50	; 0x32
 8010e0e:	4a3f      	ldr	r2, [pc, #252]	; (8010f0c <UART_SetConfig+0x22c>)
 8010e10:	fba2 2303 	umull	r2, r3, r2, r3
 8010e14:	095b      	lsrs	r3, r3, #5
 8010e16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010e1a:	4419      	add	r1, r3
 8010e1c:	68ba      	ldr	r2, [r7, #8]
 8010e1e:	4613      	mov	r3, r2
 8010e20:	009b      	lsls	r3, r3, #2
 8010e22:	4413      	add	r3, r2
 8010e24:	009a      	lsls	r2, r3, #2
 8010e26:	441a      	add	r2, r3
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	685b      	ldr	r3, [r3, #4]
 8010e2c:	009b      	lsls	r3, r3, #2
 8010e2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8010e32:	4b36      	ldr	r3, [pc, #216]	; (8010f0c <UART_SetConfig+0x22c>)
 8010e34:	fba3 0302 	umull	r0, r3, r3, r2
 8010e38:	095b      	lsrs	r3, r3, #5
 8010e3a:	2064      	movs	r0, #100	; 0x64
 8010e3c:	fb00 f303 	mul.w	r3, r0, r3
 8010e40:	1ad3      	subs	r3, r2, r3
 8010e42:	011b      	lsls	r3, r3, #4
 8010e44:	3332      	adds	r3, #50	; 0x32
 8010e46:	4a31      	ldr	r2, [pc, #196]	; (8010f0c <UART_SetConfig+0x22c>)
 8010e48:	fba2 2303 	umull	r2, r3, r2, r3
 8010e4c:	095b      	lsrs	r3, r3, #5
 8010e4e:	f003 020f 	and.w	r2, r3, #15
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	440a      	add	r2, r1
 8010e58:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8010e5a:	e04d      	b.n	8010ef8 <UART_SetConfig+0x218>
    pclk = HAL_RCC_GetPCLK1Freq();
 8010e5c:	f7fe fa24 	bl	800f2a8 <HAL_RCC_GetPCLK1Freq>
 8010e60:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010e62:	68ba      	ldr	r2, [r7, #8]
 8010e64:	4613      	mov	r3, r2
 8010e66:	009b      	lsls	r3, r3, #2
 8010e68:	4413      	add	r3, r2
 8010e6a:	009a      	lsls	r2, r3, #2
 8010e6c:	441a      	add	r2, r3
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	685b      	ldr	r3, [r3, #4]
 8010e72:	009b      	lsls	r3, r3, #2
 8010e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e78:	4a24      	ldr	r2, [pc, #144]	; (8010f0c <UART_SetConfig+0x22c>)
 8010e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8010e7e:	095b      	lsrs	r3, r3, #5
 8010e80:	0119      	lsls	r1, r3, #4
 8010e82:	68ba      	ldr	r2, [r7, #8]
 8010e84:	4613      	mov	r3, r2
 8010e86:	009b      	lsls	r3, r3, #2
 8010e88:	4413      	add	r3, r2
 8010e8a:	009a      	lsls	r2, r3, #2
 8010e8c:	441a      	add	r2, r3
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	685b      	ldr	r3, [r3, #4]
 8010e92:	009b      	lsls	r3, r3, #2
 8010e94:	fbb2 f2f3 	udiv	r2, r2, r3
 8010e98:	4b1c      	ldr	r3, [pc, #112]	; (8010f0c <UART_SetConfig+0x22c>)
 8010e9a:	fba3 0302 	umull	r0, r3, r3, r2
 8010e9e:	095b      	lsrs	r3, r3, #5
 8010ea0:	2064      	movs	r0, #100	; 0x64
 8010ea2:	fb00 f303 	mul.w	r3, r0, r3
 8010ea6:	1ad3      	subs	r3, r2, r3
 8010ea8:	011b      	lsls	r3, r3, #4
 8010eaa:	3332      	adds	r3, #50	; 0x32
 8010eac:	4a17      	ldr	r2, [pc, #92]	; (8010f0c <UART_SetConfig+0x22c>)
 8010eae:	fba2 2303 	umull	r2, r3, r2, r3
 8010eb2:	095b      	lsrs	r3, r3, #5
 8010eb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010eb8:	4419      	add	r1, r3
 8010eba:	68ba      	ldr	r2, [r7, #8]
 8010ebc:	4613      	mov	r3, r2
 8010ebe:	009b      	lsls	r3, r3, #2
 8010ec0:	4413      	add	r3, r2
 8010ec2:	009a      	lsls	r2, r3, #2
 8010ec4:	441a      	add	r2, r3
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	685b      	ldr	r3, [r3, #4]
 8010eca:	009b      	lsls	r3, r3, #2
 8010ecc:	fbb2 f2f3 	udiv	r2, r2, r3
 8010ed0:	4b0e      	ldr	r3, [pc, #56]	; (8010f0c <UART_SetConfig+0x22c>)
 8010ed2:	fba3 0302 	umull	r0, r3, r3, r2
 8010ed6:	095b      	lsrs	r3, r3, #5
 8010ed8:	2064      	movs	r0, #100	; 0x64
 8010eda:	fb00 f303 	mul.w	r3, r0, r3
 8010ede:	1ad3      	subs	r3, r2, r3
 8010ee0:	011b      	lsls	r3, r3, #4
 8010ee2:	3332      	adds	r3, #50	; 0x32
 8010ee4:	4a09      	ldr	r2, [pc, #36]	; (8010f0c <UART_SetConfig+0x22c>)
 8010ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8010eea:	095b      	lsrs	r3, r3, #5
 8010eec:	f003 020f 	and.w	r2, r3, #15
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	440a      	add	r2, r1
 8010ef6:	609a      	str	r2, [r3, #8]
}
 8010ef8:	bf00      	nop
 8010efa:	3710      	adds	r7, #16
 8010efc:	46bd      	mov	sp, r7
 8010efe:	bd80      	pop	{r7, pc}
 8010f00:	0044aa20 	.word	0x0044aa20
 8010f04:	080129b0 	.word	0x080129b0
 8010f08:	40013800 	.word	0x40013800
 8010f0c:	51eb851f 	.word	0x51eb851f

08010f10 <_Znaj>:
 8010f10:	f000 b800 	b.w	8010f14 <_Znwj>

08010f14 <_Znwj>:
 8010f14:	b510      	push	{r4, lr}
 8010f16:	2800      	cmp	r0, #0
 8010f18:	bf14      	ite	ne
 8010f1a:	4604      	movne	r4, r0
 8010f1c:	2401      	moveq	r4, #1
 8010f1e:	4620      	mov	r0, r4
 8010f20:	f000 fbd8 	bl	80116d4 <malloc>
 8010f24:	b930      	cbnz	r0, 8010f34 <_Znwj+0x20>
 8010f26:	f000 f807 	bl	8010f38 <_ZSt15get_new_handlerv>
 8010f2a:	b908      	cbnz	r0, 8010f30 <_Znwj+0x1c>
 8010f2c:	f000 fba0 	bl	8011670 <abort>
 8010f30:	4780      	blx	r0
 8010f32:	e7f4      	b.n	8010f1e <_Znwj+0xa>
 8010f34:	bd10      	pop	{r4, pc}
	...

08010f38 <_ZSt15get_new_handlerv>:
 8010f38:	4b02      	ldr	r3, [pc, #8]	; (8010f44 <_ZSt15get_new_handlerv+0xc>)
 8010f3a:	6818      	ldr	r0, [r3, #0]
 8010f3c:	f3bf 8f5b 	dmb	ish
 8010f40:	4770      	bx	lr
 8010f42:	bf00      	nop
 8010f44:	200006b8 	.word	0x200006b8

08010f48 <_ZdlPv>:
 8010f48:	f000 bbcc 	b.w	80116e4 <free>

08010f4c <_ZNSaIcEC1Ev>:
 8010f4c:	4770      	bx	lr

08010f4e <_ZNSaIcED1Ev>:
 8010f4e:	4770      	bx	lr

08010f50 <_ZSt17__throw_bad_allocv>:
 8010f50:	b508      	push	{r3, lr}
 8010f52:	f000 fb8d 	bl	8011670 <abort>

08010f56 <_ZSt19__throw_logic_errorPKc>:
 8010f56:	b508      	push	{r3, lr}
 8010f58:	f000 fb8a 	bl	8011670 <abort>

08010f5c <_ZSt24__throw_invalid_argumentPKc>:
 8010f5c:	b508      	push	{r3, lr}
 8010f5e:	f000 fb87 	bl	8011670 <abort>

08010f62 <_ZSt20__throw_length_errorPKc>:
 8010f62:	b508      	push	{r3, lr}
 8010f64:	f000 fb84 	bl	8011670 <abort>

08010f68 <_ZSt20__throw_out_of_rangePKc>:
 8010f68:	b508      	push	{r3, lr}
 8010f6a:	f000 fb81 	bl	8011670 <abort>

08010f6e <_ZSt24__throw_out_of_range_fmtPKcz>:
 8010f6e:	b40f      	push	{r0, r1, r2, r3}
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b082      	sub	sp, #8
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	f107 0410 	add.w	r4, r7, #16
 8010f7a:	f854 5b04 	ldr.w	r5, [r4], #4
 8010f7e:	4628      	mov	r0, r5
 8010f80:	f7ef f8e6 	bl	8000150 <strlen>
 8010f84:	f200 230e 	addw	r3, r0, #526	; 0x20e
 8010f88:	f023 0307 	bic.w	r3, r3, #7
 8010f8c:	ebad 0d03 	sub.w	sp, sp, r3
 8010f90:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8010f94:	4623      	mov	r3, r4
 8010f96:	462a      	mov	r2, r5
 8010f98:	4668      	mov	r0, sp
 8010f9a:	607c      	str	r4, [r7, #4]
 8010f9c:	f000 fb02 	bl	80115a4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8010fa0:	f000 fb66 	bl	8011670 <abort>

08010fa4 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 8010fa4:	b10a      	cbz	r2, 8010faa <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 8010fa6:	f000 bbb3 	b.w	8011710 <memcmp>
 8010faa:	4610      	mov	r0, r2
 8010fac:	4770      	bx	lr

08010fae <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8010fae:	b10a      	cbz	r2, 8010fb4 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8010fb0:	f000 bbbd 	b.w	801172e <memcpy>
 8010fb4:	4770      	bx	lr

08010fb6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 8010fb6:	6001      	str	r1, [r0, #0]
 8010fb8:	4770      	bx	lr

08010fba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 8010fba:	6800      	ldr	r0, [r0, #0]
 8010fbc:	4770      	bx	lr

08010fbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 8010fbe:	3008      	adds	r0, #8
 8010fc0:	4770      	bx	lr

08010fc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8010fc2:	6081      	str	r1, [r0, #8]
 8010fc4:	4770      	bx	lr

08010fc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	6803      	ldr	r3, [r0, #0]
 8010fca:	6041      	str	r1, [r0, #4]
 8010fcc:	545a      	strb	r2, [r3, r1]
 8010fce:	4770      	bx	lr

08010fd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8010fd0:	b508      	push	{r3, lr}
 8010fd2:	680b      	ldr	r3, [r1, #0]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	da02      	bge.n	8010fde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8010fd8:	4809      	ldr	r0, [pc, #36]	; (8011000 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 8010fda:	f7ff ffc2 	bl	8010f62 <_ZSt20__throw_length_errorPKc>
 8010fde:	4293      	cmp	r3, r2
 8010fe0:	d908      	bls.n	8010ff4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8010fe2:	0052      	lsls	r2, r2, #1
 8010fe4:	4293      	cmp	r3, r2
 8010fe6:	d205      	bcs.n	8010ff4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8010fe8:	2a00      	cmp	r2, #0
 8010fea:	bfb6      	itet	lt
 8010fec:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8010ff0:	600a      	strge	r2, [r1, #0]
 8010ff2:	600b      	strlt	r3, [r1, #0]
 8010ff4:	6808      	ldr	r0, [r1, #0]
 8010ff6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010ffa:	3001      	adds	r0, #1
 8010ffc:	f7ff bf8a 	b.w	8010f14 <_Znwj>
 8011000:	0801556d 	.word	0x0801556d

08011004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8011004:	4603      	mov	r3, r0
 8011006:	f853 0b08 	ldr.w	r0, [r3], #8
 801100a:	4298      	cmp	r0, r3
 801100c:	d001      	beq.n	8011012 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 801100e:	f7ff bf9b 	b.w	8010f48 <_ZdlPv>
 8011012:	4770      	bx	lr

08011014 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8011014:	b510      	push	{r4, lr}
 8011016:	6843      	ldr	r3, [r0, #4]
 8011018:	4614      	mov	r4, r2
 801101a:	4299      	cmp	r1, r3
 801101c:	d904      	bls.n	8011028 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x14>
 801101e:	460a      	mov	r2, r1
 8011020:	4802      	ldr	r0, [pc, #8]	; (801102c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 8011022:	4621      	mov	r1, r4
 8011024:	f7ff ffa3 	bl	8010f6e <_ZSt24__throw_out_of_range_fmtPKcz>
 8011028:	4608      	mov	r0, r1
 801102a:	bd10      	pop	{r4, pc}
 801102c:	080154c8 	.word	0x080154c8

08011030 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8011030:	b508      	push	{r3, lr}
 8011032:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8011036:	6840      	ldr	r0, [r0, #4]
 8011038:	3901      	subs	r1, #1
 801103a:	1a09      	subs	r1, r1, r0
 801103c:	4291      	cmp	r1, r2
 801103e:	d202      	bcs.n	8011046 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8011040:	4618      	mov	r0, r3
 8011042:	f7ff ff8e 	bl	8010f62 <_ZSt20__throw_length_errorPKc>
 8011046:	bd08      	pop	{r3, pc}

08011048 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8011048:	6803      	ldr	r3, [r0, #0]
 801104a:	428b      	cmp	r3, r1
 801104c:	d806      	bhi.n	801105c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 801104e:	6840      	ldr	r0, [r0, #4]
 8011050:	4418      	add	r0, r3
 8011052:	4281      	cmp	r1, r0
 8011054:	bf94      	ite	ls
 8011056:	2000      	movls	r0, #0
 8011058:	2001      	movhi	r0, #1
 801105a:	4770      	bx	lr
 801105c:	2001      	movs	r0, #1
 801105e:	4770      	bx	lr

08011060 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8011060:	2a01      	cmp	r2, #1
 8011062:	b510      	push	{r4, lr}
 8011064:	d102      	bne.n	801106c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8011066:	780a      	ldrb	r2, [r1, #0]
 8011068:	7002      	strb	r2, [r0, #0]
 801106a:	bd10      	pop	{r4, pc}
 801106c:	f7ff ff9f 	bl	8010fae <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8011070:	e7fb      	b.n	801106a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08011072 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8011072:	2a01      	cmp	r2, #1
 8011074:	b430      	push	{r4, r5}
 8011076:	d103      	bne.n	8011080 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8011078:	780b      	ldrb	r3, [r1, #0]
 801107a:	7003      	strb	r3, [r0, #0]
 801107c:	bc30      	pop	{r4, r5}
 801107e:	4770      	bx	lr
 8011080:	2a00      	cmp	r2, #0
 8011082:	d0fb      	beq.n	801107c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8011084:	bc30      	pop	{r4, r5}
 8011086:	f000 bb5d 	b.w	8011744 <memmove>

0801108a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 801108a:	b508      	push	{r3, lr}
 801108c:	1a52      	subs	r2, r2, r1
 801108e:	f7ff ffe7 	bl	8011060 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011092:	bd08      	pop	{r3, pc}

08011094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8011094:	b508      	push	{r3, lr}
 8011096:	1a52      	subs	r2, r2, r1
 8011098:	f7ff ffe2 	bl	8011060 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801109c:	bd08      	pop	{r3, pc}

0801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 801109e:	4288      	cmp	r0, r1
 80110a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80110a2:	4604      	mov	r4, r0
 80110a4:	460e      	mov	r6, r1
 80110a6:	d020      	beq.n	80110ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4c>
 80110a8:	6802      	ldr	r2, [r0, #0]
 80110aa:	f100 0308 	add.w	r3, r0, #8
 80110ae:	429a      	cmp	r2, r3
 80110b0:	bf08      	it	eq
 80110b2:	220f      	moveq	r2, #15
 80110b4:	684d      	ldr	r5, [r1, #4]
 80110b6:	bf18      	it	ne
 80110b8:	6882      	ldrne	r2, [r0, #8]
 80110ba:	42aa      	cmp	r2, r5
 80110bc:	d20b      	bcs.n	80110d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x38>
 80110be:	a902      	add	r1, sp, #8
 80110c0:	f841 5d04 	str.w	r5, [r1, #-4]!
 80110c4:	f7ff ff84 	bl	8010fd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80110c8:	4607      	mov	r7, r0
 80110ca:	4620      	mov	r0, r4
 80110cc:	f7ff ff9a 	bl	8011004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80110d0:	9b01      	ldr	r3, [sp, #4]
 80110d2:	6027      	str	r7, [r4, #0]
 80110d4:	60a3      	str	r3, [r4, #8]
 80110d6:	b125      	cbz	r5, 80110e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x44>
 80110d8:	462a      	mov	r2, r5
 80110da:	6831      	ldr	r1, [r6, #0]
 80110dc:	6820      	ldr	r0, [r4, #0]
 80110de:	f7ff ffbf 	bl	8011060 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80110e2:	2200      	movs	r2, #0
 80110e4:	6823      	ldr	r3, [r4, #0]
 80110e6:	6065      	str	r5, [r4, #4]
 80110e8:	555a      	strb	r2, [r3, r5]
 80110ea:	b003      	add	sp, #12
 80110ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080110ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80110ee:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80110f2:	4616      	mov	r6, r2
 80110f4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80110f8:	6842      	ldr	r2, [r0, #4]
 80110fa:	469a      	mov	sl, r3
 80110fc:	eba8 0306 	sub.w	r3, r8, r6
 8011100:	1a57      	subs	r7, r2, r1
 8011102:	4413      	add	r3, r2
 8011104:	6802      	ldr	r2, [r0, #0]
 8011106:	9301      	str	r3, [sp, #4]
 8011108:	f100 0308 	add.w	r3, r0, #8
 801110c:	429a      	cmp	r2, r3
 801110e:	460d      	mov	r5, r1
 8011110:	bf14      	ite	ne
 8011112:	6882      	ldrne	r2, [r0, #8]
 8011114:	220f      	moveq	r2, #15
 8011116:	a901      	add	r1, sp, #4
 8011118:	4604      	mov	r4, r0
 801111a:	f7ff ff59 	bl	8010fd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801111e:	1bbf      	subs	r7, r7, r6
 8011120:	4681      	mov	r9, r0
 8011122:	b11d      	cbz	r5, 801112c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8011124:	462a      	mov	r2, r5
 8011126:	6821      	ldr	r1, [r4, #0]
 8011128:	f7ff ff9a 	bl	8011060 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801112c:	f1ba 0f00 	cmp.w	sl, #0
 8011130:	d008      	beq.n	8011144 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 8011132:	f1b8 0f00 	cmp.w	r8, #0
 8011136:	d005      	beq.n	8011144 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 8011138:	4642      	mov	r2, r8
 801113a:	4651      	mov	r1, sl
 801113c:	eb09 0005 	add.w	r0, r9, r5
 8011140:	f7ff ff8e 	bl	8011060 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011144:	b147      	cbz	r7, 8011158 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 8011146:	6821      	ldr	r1, [r4, #0]
 8011148:	442e      	add	r6, r5
 801114a:	eb05 0008 	add.w	r0, r5, r8
 801114e:	463a      	mov	r2, r7
 8011150:	4431      	add	r1, r6
 8011152:	4448      	add	r0, r9
 8011154:	f7ff ff84 	bl	8011060 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011158:	4620      	mov	r0, r4
 801115a:	f7ff ff53 	bl	8011004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801115e:	9b01      	ldr	r3, [sp, #4]
 8011160:	f8c4 9000 	str.w	r9, [r4]
 8011164:	60a3      	str	r3, [r4, #8]
 8011166:	b002      	add	sp, #8
 8011168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801116c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 801116c:	f100 0208 	add.w	r2, r0, #8
 8011170:	6002      	str	r2, [r0, #0]
 8011172:	2200      	movs	r2, #0
 8011174:	6042      	str	r2, [r0, #4]
 8011176:	7202      	strb	r2, [r0, #8]
 8011178:	4770      	bx	lr

0801117a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 801117a:	b570      	push	{r4, r5, r6, lr}
 801117c:	4604      	mov	r4, r0
 801117e:	460e      	mov	r6, r1
 8011180:	3008      	adds	r0, #8
 8011182:	6020      	str	r0, [r4, #0]
 8011184:	f856 3b08 	ldr.w	r3, [r6], #8
 8011188:	460d      	mov	r5, r1
 801118a:	429e      	cmp	r6, r3
 801118c:	d10b      	bne.n	80111a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 801118e:	2210      	movs	r2, #16
 8011190:	4631      	mov	r1, r6
 8011192:	f7ff ff0c 	bl	8010fae <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8011196:	686b      	ldr	r3, [r5, #4]
 8011198:	4620      	mov	r0, r4
 801119a:	6063      	str	r3, [r4, #4]
 801119c:	2300      	movs	r3, #0
 801119e:	602e      	str	r6, [r5, #0]
 80111a0:	606b      	str	r3, [r5, #4]
 80111a2:	722b      	strb	r3, [r5, #8]
 80111a4:	bd70      	pop	{r4, r5, r6, pc}
 80111a6:	6023      	str	r3, [r4, #0]
 80111a8:	688b      	ldr	r3, [r1, #8]
 80111aa:	60a3      	str	r3, [r4, #8]
 80111ac:	e7f3      	b.n	8011196 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

080111ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80111ae:	b510      	push	{r4, lr}
 80111b0:	4604      	mov	r4, r0
 80111b2:	f7ff ff27 	bl	8011004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80111b6:	4620      	mov	r0, r4
 80111b8:	bd10      	pop	{r4, pc}

080111ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 80111ba:	b510      	push	{r4, lr}
 80111bc:	4604      	mov	r4, r0
 80111be:	f7ff ff6e 	bl	801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 80111c2:	4620      	mov	r0, r4
 80111c4:	bd10      	pop	{r4, pc}

080111c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 80111c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111c8:	460b      	mov	r3, r1
 80111ca:	4606      	mov	r6, r0
 80111cc:	f853 7b08 	ldr.w	r7, [r3], #8
 80111d0:	4605      	mov	r5, r0
 80111d2:	42bb      	cmp	r3, r7
 80111d4:	460c      	mov	r4, r1
 80111d6:	f856 2b08 	ldr.w	r2, [r6], #8
 80111da:	d016      	beq.n	801120a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x44>
 80111dc:	4296      	cmp	r6, r2
 80111de:	bf08      	it	eq
 80111e0:	2200      	moveq	r2, #0
 80111e2:	6007      	str	r7, [r0, #0]
 80111e4:	6849      	ldr	r1, [r1, #4]
 80111e6:	bf18      	it	ne
 80111e8:	f8d0 c008 	ldrne.w	ip, [r0, #8]
 80111ec:	6041      	str	r1, [r0, #4]
 80111ee:	68a1      	ldr	r1, [r4, #8]
 80111f0:	6081      	str	r1, [r0, #8]
 80111f2:	b142      	cbz	r2, 8011206 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 80111f4:	6022      	str	r2, [r4, #0]
 80111f6:	f8c4 c008 	str.w	ip, [r4, #8]
 80111fa:	2300      	movs	r3, #0
 80111fc:	6822      	ldr	r2, [r4, #0]
 80111fe:	6063      	str	r3, [r4, #4]
 8011200:	7013      	strb	r3, [r2, #0]
 8011202:	4628      	mov	r0, r5
 8011204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011206:	6023      	str	r3, [r4, #0]
 8011208:	e7f7      	b.n	80111fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>
 801120a:	f7ff ff48 	bl	801109e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 801120e:	e7f4      	b.n	80111fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>

08011210 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8011210:	6840      	ldr	r0, [r0, #4]
 8011212:	4770      	bx	lr

08011214 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 8011214:	6840      	ldr	r0, [r0, #4]
 8011216:	4770      	bx	lr

08011218 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
 8011218:	6840      	ldr	r0, [r0, #4]
 801121a:	fab0 f080 	clz	r0, r0
 801121e:	0940      	lsrs	r0, r0, #5
 8011220:	4770      	bx	lr

08011222 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8011222:	6800      	ldr	r0, [r0, #0]
 8011224:	4408      	add	r0, r1
 8011226:	4770      	bx	lr

08011228 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 8011228:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801122a:	6802      	ldr	r2, [r0, #0]
 801122c:	f100 0308 	add.w	r3, r0, #8
 8011230:	429a      	cmp	r2, r3
 8011232:	bf08      	it	eq
 8011234:	230f      	moveq	r3, #15
 8011236:	6846      	ldr	r6, [r0, #4]
 8011238:	bf18      	it	ne
 801123a:	6883      	ldrne	r3, [r0, #8]
 801123c:	1c75      	adds	r5, r6, #1
 801123e:	429d      	cmp	r5, r3
 8011240:	4604      	mov	r4, r0
 8011242:	460f      	mov	r7, r1
 8011244:	d906      	bls.n	8011254 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2c>
 8011246:	2301      	movs	r3, #1
 8011248:	9300      	str	r3, [sp, #0]
 801124a:	2300      	movs	r3, #0
 801124c:	4631      	mov	r1, r6
 801124e:	461a      	mov	r2, r3
 8011250:	f7ff ff4d 	bl	80110ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8011254:	2200      	movs	r2, #0
 8011256:	6823      	ldr	r3, [r4, #0]
 8011258:	559f      	strb	r7, [r3, r6]
 801125a:	6823      	ldr	r3, [r4, #0]
 801125c:	6065      	str	r5, [r4, #4]
 801125e:	555a      	strb	r2, [r3, r5]
 8011260:	b003      	add	sp, #12
 8011262:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8011264:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011268:	4614      	mov	r4, r2
 801126a:	4681      	mov	r9, r0
 801126c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801126e:	460f      	mov	r7, r1
 8011270:	462a      	mov	r2, r5
 8011272:	4698      	mov	r8, r3
 8011274:	4621      	mov	r1, r4
 8011276:	4b37      	ldr	r3, [pc, #220]	; (8011354 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf0>)
 8011278:	f7ff feda 	bl	8011030 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 801127c:	464a      	mov	r2, r9
 801127e:	f852 6b08 	ldr.w	r6, [r2], #8
 8011282:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8011286:	4296      	cmp	r6, r2
 8011288:	bf08      	it	eq
 801128a:	220f      	moveq	r2, #15
 801128c:	eba5 0b04 	sub.w	fp, r5, r4
 8011290:	bf18      	it	ne
 8011292:	f8d9 2008 	ldrne.w	r2, [r9, #8]
 8011296:	eb03 0a0b 	add.w	sl, r3, fp
 801129a:	4552      	cmp	r2, sl
 801129c:	d34e      	bcc.n	801133c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 801129e:	443e      	add	r6, r7
 80112a0:	4641      	mov	r1, r8
 80112a2:	1bdf      	subs	r7, r3, r7
 80112a4:	4648      	mov	r0, r9
 80112a6:	1b3f      	subs	r7, r7, r4
 80112a8:	f7ff fece 	bl	8011048 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 80112ac:	b170      	cbz	r0, 80112cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 80112ae:	b137      	cbz	r7, 80112be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 80112b0:	42ac      	cmp	r4, r5
 80112b2:	d004      	beq.n	80112be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 80112b4:	463a      	mov	r2, r7
 80112b6:	1931      	adds	r1, r6, r4
 80112b8:	1970      	adds	r0, r6, r5
 80112ba:	f7ff feda 	bl	8011072 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80112be:	b30d      	cbz	r5, 8011304 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80112c0:	462a      	mov	r2, r5
 80112c2:	4641      	mov	r1, r8
 80112c4:	4630      	mov	r0, r6
 80112c6:	f7ff fecb 	bl	8011060 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80112ca:	e01b      	b.n	8011304 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80112cc:	b135      	cbz	r5, 80112dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x78>
 80112ce:	42ac      	cmp	r4, r5
 80112d0:	d33c      	bcc.n	801134c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xe8>
 80112d2:	462a      	mov	r2, r5
 80112d4:	4641      	mov	r1, r8
 80112d6:	4630      	mov	r0, r6
 80112d8:	f7ff fecb 	bl	8011072 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80112dc:	b197      	cbz	r7, 8011304 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80112de:	42ac      	cmp	r4, r5
 80112e0:	d010      	beq.n	8011304 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80112e2:	463a      	mov	r2, r7
 80112e4:	1931      	adds	r1, r6, r4
 80112e6:	1970      	adds	r0, r6, r5
 80112e8:	f7ff fec3 	bl	8011072 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80112ec:	42ac      	cmp	r4, r5
 80112ee:	d209      	bcs.n	8011304 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80112f0:	4434      	add	r4, r6
 80112f2:	eb08 0305 	add.w	r3, r8, r5
 80112f6:	429c      	cmp	r4, r3
 80112f8:	d30f      	bcc.n	801131a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 80112fa:	462a      	mov	r2, r5
 80112fc:	4641      	mov	r1, r8
 80112fe:	4630      	mov	r0, r6
 8011300:	f7ff feb7 	bl	8011072 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8011304:	2200      	movs	r2, #0
 8011306:	4648      	mov	r0, r9
 8011308:	f8d9 3000 	ldr.w	r3, [r9]
 801130c:	f8c9 a004 	str.w	sl, [r9, #4]
 8011310:	f803 200a 	strb.w	r2, [r3, sl]
 8011314:	b003      	add	sp, #12
 8011316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801131a:	4544      	cmp	r4, r8
 801131c:	d803      	bhi.n	8011326 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc2>
 801131e:	462a      	mov	r2, r5
 8011320:	eb08 010b 	add.w	r1, r8, fp
 8011324:	e7ce      	b.n	80112c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8011326:	eba4 0408 	sub.w	r4, r4, r8
 801132a:	4622      	mov	r2, r4
 801132c:	4641      	mov	r1, r8
 801132e:	4630      	mov	r0, r6
 8011330:	f7ff fe9f 	bl	8011072 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8011334:	1b2a      	subs	r2, r5, r4
 8011336:	1971      	adds	r1, r6, r5
 8011338:	1930      	adds	r0, r6, r4
 801133a:	e7c4      	b.n	80112c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x62>
 801133c:	9500      	str	r5, [sp, #0]
 801133e:	4643      	mov	r3, r8
 8011340:	4622      	mov	r2, r4
 8011342:	4639      	mov	r1, r7
 8011344:	4648      	mov	r0, r9
 8011346:	f7ff fed2 	bl	80110ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 801134a:	e7db      	b.n	8011304 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 801134c:	2f00      	cmp	r7, #0
 801134e:	d0cf      	beq.n	80112f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x8c>
 8011350:	e7c7      	b.n	80112e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 8011352:	bf00      	nop
 8011354:	080154ff 	.word	0x080154ff

08011358 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 8011358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801135a:	4604      	mov	r4, r0
 801135c:	4608      	mov	r0, r1
 801135e:	460d      	mov	r5, r1
 8011360:	f7ee fef6 	bl	8000150 <strlen>
 8011364:	462b      	mov	r3, r5
 8011366:	9000      	str	r0, [sp, #0]
 8011368:	6862      	ldr	r2, [r4, #4]
 801136a:	2100      	movs	r1, #0
 801136c:	4620      	mov	r0, r4
 801136e:	f7ff ff79 	bl	8011264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8011372:	b003      	add	sp, #12
 8011374:	bd30      	pop	{r4, r5, pc}

08011376 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 8011376:	b508      	push	{r3, lr}
 8011378:	f7ff ffee 	bl	8011358 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 801137c:	bd08      	pop	{r3, pc}
	...

08011380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 8011380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011382:	4604      	mov	r4, r0
 8011384:	460f      	mov	r7, r1
 8011386:	4615      	mov	r5, r2
 8011388:	4a08      	ldr	r2, [pc, #32]	; (80113ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 801138a:	461e      	mov	r6, r3
 801138c:	f7ff fe42 	bl	8011014 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8011390:	6862      	ldr	r2, [r4, #4]
 8011392:	9b08      	ldr	r3, [sp, #32]
 8011394:	1bd2      	subs	r2, r2, r7
 8011396:	42aa      	cmp	r2, r5
 8011398:	9300      	str	r3, [sp, #0]
 801139a:	4601      	mov	r1, r0
 801139c:	4633      	mov	r3, r6
 801139e:	bf28      	it	cs
 80113a0:	462a      	movcs	r2, r5
 80113a2:	4620      	mov	r0, r4
 80113a4:	f7ff ff5e 	bl	8011264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 80113a8:	b003      	add	sp, #12
 80113aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113ac:	08015557 	.word	0x08015557

080113b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 80113b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80113b2:	4605      	mov	r5, r0
 80113b4:	4610      	mov	r0, r2
 80113b6:	4614      	mov	r4, r2
 80113b8:	460e      	mov	r6, r1
 80113ba:	f7ee fec9 	bl	8000150 <strlen>
 80113be:	4623      	mov	r3, r4
 80113c0:	9000      	str	r0, [sp, #0]
 80113c2:	2200      	movs	r2, #0
 80113c4:	4631      	mov	r1, r6
 80113c6:	4628      	mov	r0, r5
 80113c8:	f7ff ffda 	bl	8011380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 80113cc:	b002      	add	sp, #8
 80113ce:	bd70      	pop	{r4, r5, r6, pc}

080113d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 80113d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80113d2:	4604      	mov	r4, r0
 80113d4:	4626      	mov	r6, r4
 80113d6:	f856 3b08 	ldr.w	r3, [r6], #8
 80113da:	6840      	ldr	r0, [r0, #4]
 80113dc:	42b3      	cmp	r3, r6
 80113de:	bf0c      	ite	eq
 80113e0:	260f      	moveq	r6, #15
 80113e2:	68a6      	ldrne	r6, [r4, #8]
 80113e4:	1885      	adds	r5, r0, r2
 80113e6:	42b5      	cmp	r5, r6
 80113e8:	d80a      	bhi.n	8011400 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x30>
 80113ea:	b112      	cbz	r2, 80113f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>
 80113ec:	4418      	add	r0, r3
 80113ee:	f7ff fe37 	bl	8011060 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80113f2:	2200      	movs	r2, #0
 80113f4:	4620      	mov	r0, r4
 80113f6:	6823      	ldr	r3, [r4, #0]
 80113f8:	6065      	str	r5, [r4, #4]
 80113fa:	555a      	strb	r2, [r3, r5]
 80113fc:	b002      	add	sp, #8
 80113fe:	bd70      	pop	{r4, r5, r6, pc}
 8011400:	9200      	str	r2, [sp, #0]
 8011402:	460b      	mov	r3, r1
 8011404:	2200      	movs	r2, #0
 8011406:	4601      	mov	r1, r0
 8011408:	4620      	mov	r0, r4
 801140a:	f7ff fe70 	bl	80110ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 801140e:	e7f0      	b.n	80113f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>

08011410 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 8011410:	b508      	push	{r3, lr}
 8011412:	e9d1 1200 	ldrd	r1, r2, [r1]
 8011416:	f7ff ffdb 	bl	80113d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 801141a:	bd08      	pop	{r3, pc}

0801141c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 801141c:	b570      	push	{r4, r5, r6, lr}
 801141e:	4604      	mov	r4, r0
 8011420:	4608      	mov	r0, r1
 8011422:	460d      	mov	r5, r1
 8011424:	f7ee fe94 	bl	8000150 <strlen>
 8011428:	4606      	mov	r6, r0
 801142a:	4602      	mov	r2, r0
 801142c:	4b05      	ldr	r3, [pc, #20]	; (8011444 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 801142e:	4620      	mov	r0, r4
 8011430:	2100      	movs	r1, #0
 8011432:	f7ff fdfd 	bl	8011030 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8011436:	4632      	mov	r2, r6
 8011438:	4629      	mov	r1, r5
 801143a:	4620      	mov	r0, r4
 801143c:	f7ff ffc8 	bl	80113d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8011440:	bd70      	pop	{r4, r5, r6, pc}
 8011442:	bf00      	nop
 8011444:	08015542 	.word	0x08015542

08011448 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8011448:	6800      	ldr	r0, [r0, #0]
 801144a:	4770      	bx	lr

0801144c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 801144c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801144e:	4606      	mov	r6, r0
 8011450:	6845      	ldr	r5, [r0, #4]
 8011452:	4608      	mov	r0, r1
 8011454:	460f      	mov	r7, r1
 8011456:	f7ee fe7b 	bl	8000150 <strlen>
 801145a:	4285      	cmp	r5, r0
 801145c:	4604      	mov	r4, r0
 801145e:	462a      	mov	r2, r5
 8011460:	4639      	mov	r1, r7
 8011462:	bf28      	it	cs
 8011464:	4602      	movcs	r2, r0
 8011466:	6830      	ldr	r0, [r6, #0]
 8011468:	f7ff fd9c 	bl	8010fa4 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 801146c:	b900      	cbnz	r0, 8011470 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 801146e:	1b28      	subs	r0, r5, r4
 8011470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011472 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8011472:	6001      	str	r1, [r0, #0]
 8011474:	4770      	bx	lr

08011476 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8011476:	b510      	push	{r4, lr}
 8011478:	4604      	mov	r4, r0
 801147a:	f100 0208 	add.w	r2, r0, #8
 801147e:	6002      	str	r2, [r0, #0]
 8011480:	e9d1 1200 	ldrd	r1, r2, [r1]
 8011484:	f04f 0300 	mov.w	r3, #0
 8011488:	440a      	add	r2, r1
 801148a:	f7f2 fded 	bl	8004068 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 801148e:	4620      	mov	r0, r4
 8011490:	bd10      	pop	{r4, pc}
	...

08011494 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8011494:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011496:	4604      	mov	r4, r0
 8011498:	4616      	mov	r6, r2
 801149a:	460d      	mov	r5, r1
 801149c:	b919      	cbnz	r1, 80114a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 801149e:	b112      	cbz	r2, 80114a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80114a0:	480d      	ldr	r0, [pc, #52]	; (80114d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 80114a2:	f7ff fd58 	bl	8010f56 <_ZSt19__throw_logic_errorPKc>
 80114a6:	1b73      	subs	r3, r6, r5
 80114a8:	2b0f      	cmp	r3, #15
 80114aa:	9301      	str	r3, [sp, #4]
 80114ac:	d907      	bls.n	80114be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 80114ae:	2200      	movs	r2, #0
 80114b0:	a901      	add	r1, sp, #4
 80114b2:	4620      	mov	r0, r4
 80114b4:	f7ff fd8c 	bl	8010fd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80114b8:	9b01      	ldr	r3, [sp, #4]
 80114ba:	6020      	str	r0, [r4, #0]
 80114bc:	60a3      	str	r3, [r4, #8]
 80114be:	4632      	mov	r2, r6
 80114c0:	4629      	mov	r1, r5
 80114c2:	6820      	ldr	r0, [r4, #0]
 80114c4:	f7ff fde6 	bl	8011094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80114c8:	2100      	movs	r1, #0
 80114ca:	9b01      	ldr	r3, [sp, #4]
 80114cc:	6822      	ldr	r2, [r4, #0]
 80114ce:	6063      	str	r3, [r4, #4]
 80114d0:	54d1      	strb	r1, [r2, r3]
 80114d2:	b002      	add	sp, #8
 80114d4:	bd70      	pop	{r4, r5, r6, pc}
 80114d6:	bf00      	nop
 80114d8:	08015518 	.word	0x08015518

080114dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 80114dc:	b538      	push	{r3, r4, r5, lr}
 80114de:	f100 0308 	add.w	r3, r0, #8
 80114e2:	4604      	mov	r4, r0
 80114e4:	6003      	str	r3, [r0, #0]
 80114e6:	460d      	mov	r5, r1
 80114e8:	b159      	cbz	r1, 8011502 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 80114ea:	4608      	mov	r0, r1
 80114ec:	f7ee fe30 	bl	8000150 <strlen>
 80114f0:	182a      	adds	r2, r5, r0
 80114f2:	4620      	mov	r0, r4
 80114f4:	f04f 0300 	mov.w	r3, #0
 80114f8:	4629      	mov	r1, r5
 80114fa:	f7ff ffcb 	bl	8011494 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80114fe:	4620      	mov	r0, r4
 8011500:	bd38      	pop	{r3, r4, r5, pc}
 8011502:	f04f 32ff 	mov.w	r2, #4294967295
 8011506:	e7f4      	b.n	80114f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08011508 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8011508:	b580      	push	{r7, lr}
 801150a:	b09c      	sub	sp, #112	; 0x70
 801150c:	af00      	add	r7, sp, #0
 801150e:	1a0e      	subs	r6, r1, r0
 8011510:	4680      	mov	r8, r0
 8011512:	2269      	movs	r2, #105	; 0x69
 8011514:	490e      	ldr	r1, [pc, #56]	; (8011550 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8011516:	1d38      	adds	r0, r7, #4
 8011518:	f000 f909 	bl	801172e <memcpy>
 801151c:	f106 0377 	add.w	r3, r6, #119	; 0x77
 8011520:	f023 0307 	bic.w	r3, r3, #7
 8011524:	ebad 0d03 	sub.w	sp, sp, r3
 8011528:	466c      	mov	r4, sp
 801152a:	2268      	movs	r2, #104	; 0x68
 801152c:	1d39      	adds	r1, r7, #4
 801152e:	4620      	mov	r0, r4
 8011530:	f000 f8fd 	bl	801172e <memcpy>
 8011534:	4632      	mov	r2, r6
 8011536:	4641      	mov	r1, r8
 8011538:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801153c:	f000 f8f7 	bl	801172e <memcpy>
 8011540:	2300      	movs	r3, #0
 8011542:	1c75      	adds	r5, r6, #1
 8011544:	4425      	add	r5, r4
 8011546:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 801154a:	4620      	mov	r0, r4
 801154c:	f7ff fd03 	bl	8010f56 <_ZSt19__throw_logic_errorPKc>
 8011550:	08015590 	.word	0x08015590

08011554 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8011554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011556:	af00      	add	r7, sp, #0
 8011558:	b086      	sub	sp, #24
 801155a:	466d      	mov	r5, sp
 801155c:	f105 040c 	add.w	r4, r5, #12
 8011560:	4623      	mov	r3, r4
 8011562:	f04f 0c0a 	mov.w	ip, #10
 8011566:	f8df e038 	ldr.w	lr, [pc, #56]	; 80115a0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 801156a:	fbb2 f6fc 	udiv	r6, r2, ip
 801156e:	fb0c 2216 	mls	r2, ip, r6, r2
 8011572:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8011576:	f803 2d01 	strb.w	r2, [r3, #-1]!
 801157a:	4632      	mov	r2, r6
 801157c:	2e00      	cmp	r6, #0
 801157e:	d1f4      	bne.n	801156a <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 8011580:	1ae4      	subs	r4, r4, r3
 8011582:	428c      	cmp	r4, r1
 8011584:	d808      	bhi.n	8011598 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 8011586:	f1c4 010c 	rsb	r1, r4, #12
 801158a:	4622      	mov	r2, r4
 801158c:	4429      	add	r1, r5
 801158e:	f000 f8ce 	bl	801172e <memcpy>
 8011592:	4620      	mov	r0, r4
 8011594:	46bd      	mov	sp, r7
 8011596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011598:	f04f 34ff 	mov.w	r4, #4294967295
 801159c:	e7f9      	b.n	8011592 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 801159e:	bf00      	nop
 80115a0:	08015585 	.word	0x08015585

080115a4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 80115a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115a8:	4606      	mov	r6, r0
 80115aa:	4615      	mov	r5, r2
 80115ac:	4604      	mov	r4, r0
 80115ae:	3901      	subs	r1, #1
 80115b0:	1847      	adds	r7, r0, r1
 80115b2:	782a      	ldrb	r2, [r5, #0]
 80115b4:	b39a      	cbz	r2, 801161e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 80115b6:	42bc      	cmp	r4, r7
 80115b8:	d22d      	bcs.n	8011616 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 80115ba:	2a25      	cmp	r2, #37	; 0x25
 80115bc:	d107      	bne.n	80115ce <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 80115be:	786a      	ldrb	r2, [r5, #1]
 80115c0:	2a73      	cmp	r2, #115	; 0x73
 80115c2:	d00a      	beq.n	80115da <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 80115c4:	2a7a      	cmp	r2, #122	; 0x7a
 80115c6:	d013      	beq.n	80115f0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 80115c8:	2a25      	cmp	r2, #37	; 0x25
 80115ca:	d100      	bne.n	80115ce <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 80115cc:	3501      	adds	r5, #1
 80115ce:	782a      	ldrb	r2, [r5, #0]
 80115d0:	3401      	adds	r4, #1
 80115d2:	f804 2c01 	strb.w	r2, [r4, #-1]
 80115d6:	3501      	adds	r5, #1
 80115d8:	e7eb      	b.n	80115b2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80115da:	1d19      	adds	r1, r3, #4
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	3b01      	subs	r3, #1
 80115e0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80115e4:	b1a2      	cbz	r2, 8011610 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6c>
 80115e6:	42bc      	cmp	r4, r7
 80115e8:	d015      	beq.n	8011616 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 80115ea:	f804 2b01 	strb.w	r2, [r4], #1
 80115ee:	e7f7      	b.n	80115e0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 80115f0:	78aa      	ldrb	r2, [r5, #2]
 80115f2:	2a75      	cmp	r2, #117	; 0x75
 80115f4:	d1eb      	bne.n	80115ce <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 80115f6:	681a      	ldr	r2, [r3, #0]
 80115f8:	1b39      	subs	r1, r7, r4
 80115fa:	4620      	mov	r0, r4
 80115fc:	f103 0804 	add.w	r8, r3, #4
 8011600:	f7ff ffa8 	bl	8011554 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8011604:	2800      	cmp	r0, #0
 8011606:	dd06      	ble.n	8011616 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 8011608:	4404      	add	r4, r0
 801160a:	3503      	adds	r5, #3
 801160c:	4643      	mov	r3, r8
 801160e:	e7d0      	b.n	80115b2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8011610:	3502      	adds	r5, #2
 8011612:	460b      	mov	r3, r1
 8011614:	e7cd      	b.n	80115b2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8011616:	4621      	mov	r1, r4
 8011618:	4630      	mov	r0, r6
 801161a:	f7ff ff75 	bl	8011508 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 801161e:	7022      	strb	r2, [r4, #0]
 8011620:	1ba0      	subs	r0, r4, r6
 8011622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08011628 <roundf>:
 8011628:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801162c:	3b7f      	subs	r3, #127	; 0x7f
 801162e:	2b16      	cmp	r3, #22
 8011630:	b510      	push	{r4, lr}
 8011632:	4601      	mov	r1, r0
 8011634:	dc14      	bgt.n	8011660 <roundf+0x38>
 8011636:	2b00      	cmp	r3, #0
 8011638:	da07      	bge.n	801164a <roundf+0x22>
 801163a:	3301      	adds	r3, #1
 801163c:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 8011640:	d101      	bne.n	8011646 <roundf+0x1e>
 8011642:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 8011646:	4608      	mov	r0, r1
 8011648:	bd10      	pop	{r4, pc}
 801164a:	4a08      	ldr	r2, [pc, #32]	; (801166c <roundf+0x44>)
 801164c:	411a      	asrs	r2, r3
 801164e:	4210      	tst	r0, r2
 8011650:	d0f9      	beq.n	8011646 <roundf+0x1e>
 8011652:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011656:	4119      	asrs	r1, r3
 8011658:	4401      	add	r1, r0
 801165a:	ea21 0102 	bic.w	r1, r1, r2
 801165e:	e7f2      	b.n	8011646 <roundf+0x1e>
 8011660:	2b80      	cmp	r3, #128	; 0x80
 8011662:	d1f0      	bne.n	8011646 <roundf+0x1e>
 8011664:	f7ef f9a0 	bl	80009a8 <__addsf3>
 8011668:	4601      	mov	r1, r0
 801166a:	e7ec      	b.n	8011646 <roundf+0x1e>
 801166c:	007fffff 	.word	0x007fffff

08011670 <abort>:
 8011670:	b508      	push	{r3, lr}
 8011672:	2006      	movs	r0, #6
 8011674:	f000 f966 	bl	8011944 <raise>
 8011678:	2001      	movs	r0, #1
 801167a:	f7fa fa14 	bl	800baa6 <_exit>
	...

08011680 <__errno>:
 8011680:	4b01      	ldr	r3, [pc, #4]	; (8011688 <__errno+0x8>)
 8011682:	6818      	ldr	r0, [r3, #0]
 8011684:	4770      	bx	lr
 8011686:	bf00      	nop
 8011688:	200000a8 	.word	0x200000a8

0801168c <__libc_init_array>:
 801168c:	b570      	push	{r4, r5, r6, lr}
 801168e:	2500      	movs	r5, #0
 8011690:	4e0c      	ldr	r6, [pc, #48]	; (80116c4 <__libc_init_array+0x38>)
 8011692:	4c0d      	ldr	r4, [pc, #52]	; (80116c8 <__libc_init_array+0x3c>)
 8011694:	1ba4      	subs	r4, r4, r6
 8011696:	10a4      	asrs	r4, r4, #2
 8011698:	42a5      	cmp	r5, r4
 801169a:	d109      	bne.n	80116b0 <__libc_init_array+0x24>
 801169c:	f000 fd9a 	bl	80121d4 <_init>
 80116a0:	2500      	movs	r5, #0
 80116a2:	4e0a      	ldr	r6, [pc, #40]	; (80116cc <__libc_init_array+0x40>)
 80116a4:	4c0a      	ldr	r4, [pc, #40]	; (80116d0 <__libc_init_array+0x44>)
 80116a6:	1ba4      	subs	r4, r4, r6
 80116a8:	10a4      	asrs	r4, r4, #2
 80116aa:	42a5      	cmp	r5, r4
 80116ac:	d105      	bne.n	80116ba <__libc_init_array+0x2e>
 80116ae:	bd70      	pop	{r4, r5, r6, pc}
 80116b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80116b4:	4798      	blx	r3
 80116b6:	3501      	adds	r5, #1
 80116b8:	e7ee      	b.n	8011698 <__libc_init_array+0xc>
 80116ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80116be:	4798      	blx	r3
 80116c0:	3501      	adds	r5, #1
 80116c2:	e7f2      	b.n	80116aa <__libc_init_array+0x1e>
 80116c4:	0801579c 	.word	0x0801579c
 80116c8:	0801579c 	.word	0x0801579c
 80116cc:	0801579c 	.word	0x0801579c
 80116d0:	080157a0 	.word	0x080157a0

080116d4 <malloc>:
 80116d4:	4b02      	ldr	r3, [pc, #8]	; (80116e0 <malloc+0xc>)
 80116d6:	4601      	mov	r1, r0
 80116d8:	6818      	ldr	r0, [r3, #0]
 80116da:	f000 b8a1 	b.w	8011820 <_malloc_r>
 80116de:	bf00      	nop
 80116e0:	200000a8 	.word	0x200000a8

080116e4 <free>:
 80116e4:	4b02      	ldr	r3, [pc, #8]	; (80116f0 <free+0xc>)
 80116e6:	4601      	mov	r1, r0
 80116e8:	6818      	ldr	r0, [r3, #0]
 80116ea:	f000 b84d 	b.w	8011788 <_free_r>
 80116ee:	bf00      	nop
 80116f0:	200000a8 	.word	0x200000a8

080116f4 <memchr>:
 80116f4:	b510      	push	{r4, lr}
 80116f6:	b2c9      	uxtb	r1, r1
 80116f8:	4402      	add	r2, r0
 80116fa:	4290      	cmp	r0, r2
 80116fc:	4603      	mov	r3, r0
 80116fe:	d101      	bne.n	8011704 <memchr+0x10>
 8011700:	2300      	movs	r3, #0
 8011702:	e003      	b.n	801170c <memchr+0x18>
 8011704:	781c      	ldrb	r4, [r3, #0]
 8011706:	3001      	adds	r0, #1
 8011708:	428c      	cmp	r4, r1
 801170a:	d1f6      	bne.n	80116fa <memchr+0x6>
 801170c:	4618      	mov	r0, r3
 801170e:	bd10      	pop	{r4, pc}

08011710 <memcmp>:
 8011710:	b530      	push	{r4, r5, lr}
 8011712:	2400      	movs	r4, #0
 8011714:	42a2      	cmp	r2, r4
 8011716:	d101      	bne.n	801171c <memcmp+0xc>
 8011718:	2000      	movs	r0, #0
 801171a:	e007      	b.n	801172c <memcmp+0x1c>
 801171c:	5d03      	ldrb	r3, [r0, r4]
 801171e:	3401      	adds	r4, #1
 8011720:	190d      	adds	r5, r1, r4
 8011722:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8011726:	42ab      	cmp	r3, r5
 8011728:	d0f4      	beq.n	8011714 <memcmp+0x4>
 801172a:	1b58      	subs	r0, r3, r5
 801172c:	bd30      	pop	{r4, r5, pc}

0801172e <memcpy>:
 801172e:	b510      	push	{r4, lr}
 8011730:	1e43      	subs	r3, r0, #1
 8011732:	440a      	add	r2, r1
 8011734:	4291      	cmp	r1, r2
 8011736:	d100      	bne.n	801173a <memcpy+0xc>
 8011738:	bd10      	pop	{r4, pc}
 801173a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801173e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011742:	e7f7      	b.n	8011734 <memcpy+0x6>

08011744 <memmove>:
 8011744:	4288      	cmp	r0, r1
 8011746:	b510      	push	{r4, lr}
 8011748:	eb01 0302 	add.w	r3, r1, r2
 801174c:	d807      	bhi.n	801175e <memmove+0x1a>
 801174e:	1e42      	subs	r2, r0, #1
 8011750:	4299      	cmp	r1, r3
 8011752:	d00a      	beq.n	801176a <memmove+0x26>
 8011754:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011758:	f802 4f01 	strb.w	r4, [r2, #1]!
 801175c:	e7f8      	b.n	8011750 <memmove+0xc>
 801175e:	4283      	cmp	r3, r0
 8011760:	d9f5      	bls.n	801174e <memmove+0xa>
 8011762:	1881      	adds	r1, r0, r2
 8011764:	1ad2      	subs	r2, r2, r3
 8011766:	42d3      	cmn	r3, r2
 8011768:	d100      	bne.n	801176c <memmove+0x28>
 801176a:	bd10      	pop	{r4, pc}
 801176c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011770:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011774:	e7f7      	b.n	8011766 <memmove+0x22>

08011776 <memset>:
 8011776:	4603      	mov	r3, r0
 8011778:	4402      	add	r2, r0
 801177a:	4293      	cmp	r3, r2
 801177c:	d100      	bne.n	8011780 <memset+0xa>
 801177e:	4770      	bx	lr
 8011780:	f803 1b01 	strb.w	r1, [r3], #1
 8011784:	e7f9      	b.n	801177a <memset+0x4>
	...

08011788 <_free_r>:
 8011788:	b538      	push	{r3, r4, r5, lr}
 801178a:	4605      	mov	r5, r0
 801178c:	2900      	cmp	r1, #0
 801178e:	d043      	beq.n	8011818 <_free_r+0x90>
 8011790:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011794:	1f0c      	subs	r4, r1, #4
 8011796:	2b00      	cmp	r3, #0
 8011798:	bfb8      	it	lt
 801179a:	18e4      	addlt	r4, r4, r3
 801179c:	f000 fa01 	bl	8011ba2 <__malloc_lock>
 80117a0:	4a1e      	ldr	r2, [pc, #120]	; (801181c <_free_r+0x94>)
 80117a2:	6813      	ldr	r3, [r2, #0]
 80117a4:	4610      	mov	r0, r2
 80117a6:	b933      	cbnz	r3, 80117b6 <_free_r+0x2e>
 80117a8:	6063      	str	r3, [r4, #4]
 80117aa:	6014      	str	r4, [r2, #0]
 80117ac:	4628      	mov	r0, r5
 80117ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80117b2:	f000 b9f7 	b.w	8011ba4 <__malloc_unlock>
 80117b6:	42a3      	cmp	r3, r4
 80117b8:	d90b      	bls.n	80117d2 <_free_r+0x4a>
 80117ba:	6821      	ldr	r1, [r4, #0]
 80117bc:	1862      	adds	r2, r4, r1
 80117be:	4293      	cmp	r3, r2
 80117c0:	bf01      	itttt	eq
 80117c2:	681a      	ldreq	r2, [r3, #0]
 80117c4:	685b      	ldreq	r3, [r3, #4]
 80117c6:	1852      	addeq	r2, r2, r1
 80117c8:	6022      	streq	r2, [r4, #0]
 80117ca:	6063      	str	r3, [r4, #4]
 80117cc:	6004      	str	r4, [r0, #0]
 80117ce:	e7ed      	b.n	80117ac <_free_r+0x24>
 80117d0:	4613      	mov	r3, r2
 80117d2:	685a      	ldr	r2, [r3, #4]
 80117d4:	b10a      	cbz	r2, 80117da <_free_r+0x52>
 80117d6:	42a2      	cmp	r2, r4
 80117d8:	d9fa      	bls.n	80117d0 <_free_r+0x48>
 80117da:	6819      	ldr	r1, [r3, #0]
 80117dc:	1858      	adds	r0, r3, r1
 80117de:	42a0      	cmp	r0, r4
 80117e0:	d10b      	bne.n	80117fa <_free_r+0x72>
 80117e2:	6820      	ldr	r0, [r4, #0]
 80117e4:	4401      	add	r1, r0
 80117e6:	1858      	adds	r0, r3, r1
 80117e8:	4282      	cmp	r2, r0
 80117ea:	6019      	str	r1, [r3, #0]
 80117ec:	d1de      	bne.n	80117ac <_free_r+0x24>
 80117ee:	6810      	ldr	r0, [r2, #0]
 80117f0:	6852      	ldr	r2, [r2, #4]
 80117f2:	4401      	add	r1, r0
 80117f4:	6019      	str	r1, [r3, #0]
 80117f6:	605a      	str	r2, [r3, #4]
 80117f8:	e7d8      	b.n	80117ac <_free_r+0x24>
 80117fa:	d902      	bls.n	8011802 <_free_r+0x7a>
 80117fc:	230c      	movs	r3, #12
 80117fe:	602b      	str	r3, [r5, #0]
 8011800:	e7d4      	b.n	80117ac <_free_r+0x24>
 8011802:	6820      	ldr	r0, [r4, #0]
 8011804:	1821      	adds	r1, r4, r0
 8011806:	428a      	cmp	r2, r1
 8011808:	bf01      	itttt	eq
 801180a:	6811      	ldreq	r1, [r2, #0]
 801180c:	6852      	ldreq	r2, [r2, #4]
 801180e:	1809      	addeq	r1, r1, r0
 8011810:	6021      	streq	r1, [r4, #0]
 8011812:	6062      	str	r2, [r4, #4]
 8011814:	605c      	str	r4, [r3, #4]
 8011816:	e7c9      	b.n	80117ac <_free_r+0x24>
 8011818:	bd38      	pop	{r3, r4, r5, pc}
 801181a:	bf00      	nop
 801181c:	200006bc 	.word	0x200006bc

08011820 <_malloc_r>:
 8011820:	b570      	push	{r4, r5, r6, lr}
 8011822:	1ccd      	adds	r5, r1, #3
 8011824:	f025 0503 	bic.w	r5, r5, #3
 8011828:	3508      	adds	r5, #8
 801182a:	2d0c      	cmp	r5, #12
 801182c:	bf38      	it	cc
 801182e:	250c      	movcc	r5, #12
 8011830:	2d00      	cmp	r5, #0
 8011832:	4606      	mov	r6, r0
 8011834:	db01      	blt.n	801183a <_malloc_r+0x1a>
 8011836:	42a9      	cmp	r1, r5
 8011838:	d903      	bls.n	8011842 <_malloc_r+0x22>
 801183a:	230c      	movs	r3, #12
 801183c:	6033      	str	r3, [r6, #0]
 801183e:	2000      	movs	r0, #0
 8011840:	bd70      	pop	{r4, r5, r6, pc}
 8011842:	f000 f9ae 	bl	8011ba2 <__malloc_lock>
 8011846:	4a21      	ldr	r2, [pc, #132]	; (80118cc <_malloc_r+0xac>)
 8011848:	6814      	ldr	r4, [r2, #0]
 801184a:	4621      	mov	r1, r4
 801184c:	b991      	cbnz	r1, 8011874 <_malloc_r+0x54>
 801184e:	4c20      	ldr	r4, [pc, #128]	; (80118d0 <_malloc_r+0xb0>)
 8011850:	6823      	ldr	r3, [r4, #0]
 8011852:	b91b      	cbnz	r3, 801185c <_malloc_r+0x3c>
 8011854:	4630      	mov	r0, r6
 8011856:	f000 f83d 	bl	80118d4 <_sbrk_r>
 801185a:	6020      	str	r0, [r4, #0]
 801185c:	4629      	mov	r1, r5
 801185e:	4630      	mov	r0, r6
 8011860:	f000 f838 	bl	80118d4 <_sbrk_r>
 8011864:	1c43      	adds	r3, r0, #1
 8011866:	d124      	bne.n	80118b2 <_malloc_r+0x92>
 8011868:	230c      	movs	r3, #12
 801186a:	4630      	mov	r0, r6
 801186c:	6033      	str	r3, [r6, #0]
 801186e:	f000 f999 	bl	8011ba4 <__malloc_unlock>
 8011872:	e7e4      	b.n	801183e <_malloc_r+0x1e>
 8011874:	680b      	ldr	r3, [r1, #0]
 8011876:	1b5b      	subs	r3, r3, r5
 8011878:	d418      	bmi.n	80118ac <_malloc_r+0x8c>
 801187a:	2b0b      	cmp	r3, #11
 801187c:	d90f      	bls.n	801189e <_malloc_r+0x7e>
 801187e:	600b      	str	r3, [r1, #0]
 8011880:	18cc      	adds	r4, r1, r3
 8011882:	50cd      	str	r5, [r1, r3]
 8011884:	4630      	mov	r0, r6
 8011886:	f000 f98d 	bl	8011ba4 <__malloc_unlock>
 801188a:	f104 000b 	add.w	r0, r4, #11
 801188e:	1d23      	adds	r3, r4, #4
 8011890:	f020 0007 	bic.w	r0, r0, #7
 8011894:	1ac3      	subs	r3, r0, r3
 8011896:	d0d3      	beq.n	8011840 <_malloc_r+0x20>
 8011898:	425a      	negs	r2, r3
 801189a:	50e2      	str	r2, [r4, r3]
 801189c:	e7d0      	b.n	8011840 <_malloc_r+0x20>
 801189e:	684b      	ldr	r3, [r1, #4]
 80118a0:	428c      	cmp	r4, r1
 80118a2:	bf16      	itet	ne
 80118a4:	6063      	strne	r3, [r4, #4]
 80118a6:	6013      	streq	r3, [r2, #0]
 80118a8:	460c      	movne	r4, r1
 80118aa:	e7eb      	b.n	8011884 <_malloc_r+0x64>
 80118ac:	460c      	mov	r4, r1
 80118ae:	6849      	ldr	r1, [r1, #4]
 80118b0:	e7cc      	b.n	801184c <_malloc_r+0x2c>
 80118b2:	1cc4      	adds	r4, r0, #3
 80118b4:	f024 0403 	bic.w	r4, r4, #3
 80118b8:	42a0      	cmp	r0, r4
 80118ba:	d005      	beq.n	80118c8 <_malloc_r+0xa8>
 80118bc:	1a21      	subs	r1, r4, r0
 80118be:	4630      	mov	r0, r6
 80118c0:	f000 f808 	bl	80118d4 <_sbrk_r>
 80118c4:	3001      	adds	r0, #1
 80118c6:	d0cf      	beq.n	8011868 <_malloc_r+0x48>
 80118c8:	6025      	str	r5, [r4, #0]
 80118ca:	e7db      	b.n	8011884 <_malloc_r+0x64>
 80118cc:	200006bc 	.word	0x200006bc
 80118d0:	200006c0 	.word	0x200006c0

080118d4 <_sbrk_r>:
 80118d4:	b538      	push	{r3, r4, r5, lr}
 80118d6:	2300      	movs	r3, #0
 80118d8:	4c05      	ldr	r4, [pc, #20]	; (80118f0 <_sbrk_r+0x1c>)
 80118da:	4605      	mov	r5, r0
 80118dc:	4608      	mov	r0, r1
 80118de:	6023      	str	r3, [r4, #0]
 80118e0:	f7fa f8ec 	bl	800babc <_sbrk>
 80118e4:	1c43      	adds	r3, r0, #1
 80118e6:	d102      	bne.n	80118ee <_sbrk_r+0x1a>
 80118e8:	6823      	ldr	r3, [r4, #0]
 80118ea:	b103      	cbz	r3, 80118ee <_sbrk_r+0x1a>
 80118ec:	602b      	str	r3, [r5, #0]
 80118ee:	bd38      	pop	{r3, r4, r5, pc}
 80118f0:	20000848 	.word	0x20000848

080118f4 <_raise_r>:
 80118f4:	291f      	cmp	r1, #31
 80118f6:	b538      	push	{r3, r4, r5, lr}
 80118f8:	4604      	mov	r4, r0
 80118fa:	460d      	mov	r5, r1
 80118fc:	d904      	bls.n	8011908 <_raise_r+0x14>
 80118fe:	2316      	movs	r3, #22
 8011900:	6003      	str	r3, [r0, #0]
 8011902:	f04f 30ff 	mov.w	r0, #4294967295
 8011906:	bd38      	pop	{r3, r4, r5, pc}
 8011908:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801190a:	b112      	cbz	r2, 8011912 <_raise_r+0x1e>
 801190c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011910:	b94b      	cbnz	r3, 8011926 <_raise_r+0x32>
 8011912:	4620      	mov	r0, r4
 8011914:	f000 f830 	bl	8011978 <_getpid_r>
 8011918:	462a      	mov	r2, r5
 801191a:	4601      	mov	r1, r0
 801191c:	4620      	mov	r0, r4
 801191e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011922:	f000 b817 	b.w	8011954 <_kill_r>
 8011926:	2b01      	cmp	r3, #1
 8011928:	d00a      	beq.n	8011940 <_raise_r+0x4c>
 801192a:	1c59      	adds	r1, r3, #1
 801192c:	d103      	bne.n	8011936 <_raise_r+0x42>
 801192e:	2316      	movs	r3, #22
 8011930:	6003      	str	r3, [r0, #0]
 8011932:	2001      	movs	r0, #1
 8011934:	e7e7      	b.n	8011906 <_raise_r+0x12>
 8011936:	2400      	movs	r4, #0
 8011938:	4628      	mov	r0, r5
 801193a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801193e:	4798      	blx	r3
 8011940:	2000      	movs	r0, #0
 8011942:	e7e0      	b.n	8011906 <_raise_r+0x12>

08011944 <raise>:
 8011944:	4b02      	ldr	r3, [pc, #8]	; (8011950 <raise+0xc>)
 8011946:	4601      	mov	r1, r0
 8011948:	6818      	ldr	r0, [r3, #0]
 801194a:	f7ff bfd3 	b.w	80118f4 <_raise_r>
 801194e:	bf00      	nop
 8011950:	200000a8 	.word	0x200000a8

08011954 <_kill_r>:
 8011954:	b538      	push	{r3, r4, r5, lr}
 8011956:	2300      	movs	r3, #0
 8011958:	4c06      	ldr	r4, [pc, #24]	; (8011974 <_kill_r+0x20>)
 801195a:	4605      	mov	r5, r0
 801195c:	4608      	mov	r0, r1
 801195e:	4611      	mov	r1, r2
 8011960:	6023      	str	r3, [r4, #0]
 8011962:	f7fa f890 	bl	800ba86 <_kill>
 8011966:	1c43      	adds	r3, r0, #1
 8011968:	d102      	bne.n	8011970 <_kill_r+0x1c>
 801196a:	6823      	ldr	r3, [r4, #0]
 801196c:	b103      	cbz	r3, 8011970 <_kill_r+0x1c>
 801196e:	602b      	str	r3, [r5, #0]
 8011970:	bd38      	pop	{r3, r4, r5, pc}
 8011972:	bf00      	nop
 8011974:	20000848 	.word	0x20000848

08011978 <_getpid_r>:
 8011978:	f7fa b87e 	b.w	800ba78 <_getpid>

0801197c <sniprintf>:
 801197c:	b40c      	push	{r2, r3}
 801197e:	b530      	push	{r4, r5, lr}
 8011980:	4b17      	ldr	r3, [pc, #92]	; (80119e0 <sniprintf+0x64>)
 8011982:	1e0c      	subs	r4, r1, #0
 8011984:	b09d      	sub	sp, #116	; 0x74
 8011986:	681d      	ldr	r5, [r3, #0]
 8011988:	da08      	bge.n	801199c <sniprintf+0x20>
 801198a:	238b      	movs	r3, #139	; 0x8b
 801198c:	f04f 30ff 	mov.w	r0, #4294967295
 8011990:	602b      	str	r3, [r5, #0]
 8011992:	b01d      	add	sp, #116	; 0x74
 8011994:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011998:	b002      	add	sp, #8
 801199a:	4770      	bx	lr
 801199c:	f44f 7302 	mov.w	r3, #520	; 0x208
 80119a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80119a4:	bf0c      	ite	eq
 80119a6:	4623      	moveq	r3, r4
 80119a8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80119ac:	9304      	str	r3, [sp, #16]
 80119ae:	9307      	str	r3, [sp, #28]
 80119b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80119b4:	9002      	str	r0, [sp, #8]
 80119b6:	9006      	str	r0, [sp, #24]
 80119b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80119bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80119be:	ab21      	add	r3, sp, #132	; 0x84
 80119c0:	a902      	add	r1, sp, #8
 80119c2:	4628      	mov	r0, r5
 80119c4:	9301      	str	r3, [sp, #4]
 80119c6:	f000 f949 	bl	8011c5c <_svfiprintf_r>
 80119ca:	1c43      	adds	r3, r0, #1
 80119cc:	bfbc      	itt	lt
 80119ce:	238b      	movlt	r3, #139	; 0x8b
 80119d0:	602b      	strlt	r3, [r5, #0]
 80119d2:	2c00      	cmp	r4, #0
 80119d4:	d0dd      	beq.n	8011992 <sniprintf+0x16>
 80119d6:	2200      	movs	r2, #0
 80119d8:	9b02      	ldr	r3, [sp, #8]
 80119da:	701a      	strb	r2, [r3, #0]
 80119dc:	e7d9      	b.n	8011992 <sniprintf+0x16>
 80119de:	bf00      	nop
 80119e0:	200000a8 	.word	0x200000a8

080119e4 <_strtoul_l.isra.0>:
 80119e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119e8:	4680      	mov	r8, r0
 80119ea:	4689      	mov	r9, r1
 80119ec:	4692      	mov	sl, r2
 80119ee:	461e      	mov	r6, r3
 80119f0:	460f      	mov	r7, r1
 80119f2:	463d      	mov	r5, r7
 80119f4:	9808      	ldr	r0, [sp, #32]
 80119f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80119fa:	f000 f8bd 	bl	8011b78 <__locale_ctype_ptr_l>
 80119fe:	4420      	add	r0, r4
 8011a00:	7843      	ldrb	r3, [r0, #1]
 8011a02:	f013 0308 	ands.w	r3, r3, #8
 8011a06:	d130      	bne.n	8011a6a <_strtoul_l.isra.0+0x86>
 8011a08:	2c2d      	cmp	r4, #45	; 0x2d
 8011a0a:	d130      	bne.n	8011a6e <_strtoul_l.isra.0+0x8a>
 8011a0c:	2101      	movs	r1, #1
 8011a0e:	787c      	ldrb	r4, [r7, #1]
 8011a10:	1cbd      	adds	r5, r7, #2
 8011a12:	2e00      	cmp	r6, #0
 8011a14:	d05c      	beq.n	8011ad0 <_strtoul_l.isra.0+0xec>
 8011a16:	2e10      	cmp	r6, #16
 8011a18:	d109      	bne.n	8011a2e <_strtoul_l.isra.0+0x4a>
 8011a1a:	2c30      	cmp	r4, #48	; 0x30
 8011a1c:	d107      	bne.n	8011a2e <_strtoul_l.isra.0+0x4a>
 8011a1e:	782b      	ldrb	r3, [r5, #0]
 8011a20:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011a24:	2b58      	cmp	r3, #88	; 0x58
 8011a26:	d14e      	bne.n	8011ac6 <_strtoul_l.isra.0+0xe2>
 8011a28:	2610      	movs	r6, #16
 8011a2a:	786c      	ldrb	r4, [r5, #1]
 8011a2c:	3502      	adds	r5, #2
 8011a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8011a32:	fbb2 f2f6 	udiv	r2, r2, r6
 8011a36:	2300      	movs	r3, #0
 8011a38:	fb06 fc02 	mul.w	ip, r6, r2
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	ea6f 0c0c 	mvn.w	ip, ip
 8011a42:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8011a46:	2f09      	cmp	r7, #9
 8011a48:	d817      	bhi.n	8011a7a <_strtoul_l.isra.0+0x96>
 8011a4a:	463c      	mov	r4, r7
 8011a4c:	42a6      	cmp	r6, r4
 8011a4e:	dd23      	ble.n	8011a98 <_strtoul_l.isra.0+0xb4>
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	db1e      	blt.n	8011a92 <_strtoul_l.isra.0+0xae>
 8011a54:	4282      	cmp	r2, r0
 8011a56:	d31c      	bcc.n	8011a92 <_strtoul_l.isra.0+0xae>
 8011a58:	d101      	bne.n	8011a5e <_strtoul_l.isra.0+0x7a>
 8011a5a:	45a4      	cmp	ip, r4
 8011a5c:	db19      	blt.n	8011a92 <_strtoul_l.isra.0+0xae>
 8011a5e:	2301      	movs	r3, #1
 8011a60:	fb00 4006 	mla	r0, r0, r6, r4
 8011a64:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011a68:	e7eb      	b.n	8011a42 <_strtoul_l.isra.0+0x5e>
 8011a6a:	462f      	mov	r7, r5
 8011a6c:	e7c1      	b.n	80119f2 <_strtoul_l.isra.0+0xe>
 8011a6e:	2c2b      	cmp	r4, #43	; 0x2b
 8011a70:	bf04      	itt	eq
 8011a72:	1cbd      	addeq	r5, r7, #2
 8011a74:	787c      	ldrbeq	r4, [r7, #1]
 8011a76:	4619      	mov	r1, r3
 8011a78:	e7cb      	b.n	8011a12 <_strtoul_l.isra.0+0x2e>
 8011a7a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8011a7e:	2f19      	cmp	r7, #25
 8011a80:	d801      	bhi.n	8011a86 <_strtoul_l.isra.0+0xa2>
 8011a82:	3c37      	subs	r4, #55	; 0x37
 8011a84:	e7e2      	b.n	8011a4c <_strtoul_l.isra.0+0x68>
 8011a86:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8011a8a:	2f19      	cmp	r7, #25
 8011a8c:	d804      	bhi.n	8011a98 <_strtoul_l.isra.0+0xb4>
 8011a8e:	3c57      	subs	r4, #87	; 0x57
 8011a90:	e7dc      	b.n	8011a4c <_strtoul_l.isra.0+0x68>
 8011a92:	f04f 33ff 	mov.w	r3, #4294967295
 8011a96:	e7e5      	b.n	8011a64 <_strtoul_l.isra.0+0x80>
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	da09      	bge.n	8011ab0 <_strtoul_l.isra.0+0xcc>
 8011a9c:	2322      	movs	r3, #34	; 0x22
 8011a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8011aa2:	f8c8 3000 	str.w	r3, [r8]
 8011aa6:	f1ba 0f00 	cmp.w	sl, #0
 8011aaa:	d107      	bne.n	8011abc <_strtoul_l.isra.0+0xd8>
 8011aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ab0:	b101      	cbz	r1, 8011ab4 <_strtoul_l.isra.0+0xd0>
 8011ab2:	4240      	negs	r0, r0
 8011ab4:	f1ba 0f00 	cmp.w	sl, #0
 8011ab8:	d0f8      	beq.n	8011aac <_strtoul_l.isra.0+0xc8>
 8011aba:	b10b      	cbz	r3, 8011ac0 <_strtoul_l.isra.0+0xdc>
 8011abc:	f105 39ff 	add.w	r9, r5, #4294967295
 8011ac0:	f8ca 9000 	str.w	r9, [sl]
 8011ac4:	e7f2      	b.n	8011aac <_strtoul_l.isra.0+0xc8>
 8011ac6:	2430      	movs	r4, #48	; 0x30
 8011ac8:	2e00      	cmp	r6, #0
 8011aca:	d1b0      	bne.n	8011a2e <_strtoul_l.isra.0+0x4a>
 8011acc:	2608      	movs	r6, #8
 8011ace:	e7ae      	b.n	8011a2e <_strtoul_l.isra.0+0x4a>
 8011ad0:	2c30      	cmp	r4, #48	; 0x30
 8011ad2:	d0a4      	beq.n	8011a1e <_strtoul_l.isra.0+0x3a>
 8011ad4:	260a      	movs	r6, #10
 8011ad6:	e7aa      	b.n	8011a2e <_strtoul_l.isra.0+0x4a>

08011ad8 <strtoul>:
 8011ad8:	4b08      	ldr	r3, [pc, #32]	; (8011afc <strtoul+0x24>)
 8011ada:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011adc:	681c      	ldr	r4, [r3, #0]
 8011ade:	4d08      	ldr	r5, [pc, #32]	; (8011b00 <strtoul+0x28>)
 8011ae0:	6a23      	ldr	r3, [r4, #32]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	bf08      	it	eq
 8011ae6:	462b      	moveq	r3, r5
 8011ae8:	9300      	str	r3, [sp, #0]
 8011aea:	4613      	mov	r3, r2
 8011aec:	460a      	mov	r2, r1
 8011aee:	4601      	mov	r1, r0
 8011af0:	4620      	mov	r0, r4
 8011af2:	f7ff ff77 	bl	80119e4 <_strtoul_l.isra.0>
 8011af6:	b003      	add	sp, #12
 8011af8:	bd30      	pop	{r4, r5, pc}
 8011afa:	bf00      	nop
 8011afc:	200000a8 	.word	0x200000a8
 8011b00:	2000010c 	.word	0x2000010c

08011b04 <_vsniprintf_r>:
 8011b04:	b530      	push	{r4, r5, lr}
 8011b06:	1e14      	subs	r4, r2, #0
 8011b08:	4605      	mov	r5, r0
 8011b0a:	b09b      	sub	sp, #108	; 0x6c
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	da05      	bge.n	8011b1c <_vsniprintf_r+0x18>
 8011b10:	238b      	movs	r3, #139	; 0x8b
 8011b12:	f04f 30ff 	mov.w	r0, #4294967295
 8011b16:	602b      	str	r3, [r5, #0]
 8011b18:	b01b      	add	sp, #108	; 0x6c
 8011b1a:	bd30      	pop	{r4, r5, pc}
 8011b1c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011b20:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011b24:	bf0c      	ite	eq
 8011b26:	4623      	moveq	r3, r4
 8011b28:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011b2c:	9302      	str	r3, [sp, #8]
 8011b2e:	9305      	str	r3, [sp, #20]
 8011b30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011b34:	9100      	str	r1, [sp, #0]
 8011b36:	9104      	str	r1, [sp, #16]
 8011b38:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011b3c:	4602      	mov	r2, r0
 8011b3e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011b40:	4669      	mov	r1, sp
 8011b42:	4628      	mov	r0, r5
 8011b44:	f000 f88a 	bl	8011c5c <_svfiprintf_r>
 8011b48:	1c43      	adds	r3, r0, #1
 8011b4a:	bfbc      	itt	lt
 8011b4c:	238b      	movlt	r3, #139	; 0x8b
 8011b4e:	602b      	strlt	r3, [r5, #0]
 8011b50:	2c00      	cmp	r4, #0
 8011b52:	d0e1      	beq.n	8011b18 <_vsniprintf_r+0x14>
 8011b54:	2200      	movs	r2, #0
 8011b56:	9b00      	ldr	r3, [sp, #0]
 8011b58:	701a      	strb	r2, [r3, #0]
 8011b5a:	e7dd      	b.n	8011b18 <_vsniprintf_r+0x14>

08011b5c <vsniprintf>:
 8011b5c:	b507      	push	{r0, r1, r2, lr}
 8011b5e:	9300      	str	r3, [sp, #0]
 8011b60:	4613      	mov	r3, r2
 8011b62:	460a      	mov	r2, r1
 8011b64:	4601      	mov	r1, r0
 8011b66:	4803      	ldr	r0, [pc, #12]	; (8011b74 <vsniprintf+0x18>)
 8011b68:	6800      	ldr	r0, [r0, #0]
 8011b6a:	f7ff ffcb 	bl	8011b04 <_vsniprintf_r>
 8011b6e:	b003      	add	sp, #12
 8011b70:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b74:	200000a8 	.word	0x200000a8

08011b78 <__locale_ctype_ptr_l>:
 8011b78:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8011b7c:	4770      	bx	lr

08011b7e <__ascii_mbtowc>:
 8011b7e:	b082      	sub	sp, #8
 8011b80:	b901      	cbnz	r1, 8011b84 <__ascii_mbtowc+0x6>
 8011b82:	a901      	add	r1, sp, #4
 8011b84:	b142      	cbz	r2, 8011b98 <__ascii_mbtowc+0x1a>
 8011b86:	b14b      	cbz	r3, 8011b9c <__ascii_mbtowc+0x1e>
 8011b88:	7813      	ldrb	r3, [r2, #0]
 8011b8a:	600b      	str	r3, [r1, #0]
 8011b8c:	7812      	ldrb	r2, [r2, #0]
 8011b8e:	1c10      	adds	r0, r2, #0
 8011b90:	bf18      	it	ne
 8011b92:	2001      	movne	r0, #1
 8011b94:	b002      	add	sp, #8
 8011b96:	4770      	bx	lr
 8011b98:	4610      	mov	r0, r2
 8011b9a:	e7fb      	b.n	8011b94 <__ascii_mbtowc+0x16>
 8011b9c:	f06f 0001 	mvn.w	r0, #1
 8011ba0:	e7f8      	b.n	8011b94 <__ascii_mbtowc+0x16>

08011ba2 <__malloc_lock>:
 8011ba2:	4770      	bx	lr

08011ba4 <__malloc_unlock>:
 8011ba4:	4770      	bx	lr

08011ba6 <__ssputs_r>:
 8011ba6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011baa:	688e      	ldr	r6, [r1, #8]
 8011bac:	4682      	mov	sl, r0
 8011bae:	429e      	cmp	r6, r3
 8011bb0:	460c      	mov	r4, r1
 8011bb2:	4690      	mov	r8, r2
 8011bb4:	4699      	mov	r9, r3
 8011bb6:	d837      	bhi.n	8011c28 <__ssputs_r+0x82>
 8011bb8:	898a      	ldrh	r2, [r1, #12]
 8011bba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011bbe:	d031      	beq.n	8011c24 <__ssputs_r+0x7e>
 8011bc0:	2302      	movs	r3, #2
 8011bc2:	6825      	ldr	r5, [r4, #0]
 8011bc4:	6909      	ldr	r1, [r1, #16]
 8011bc6:	1a6f      	subs	r7, r5, r1
 8011bc8:	6965      	ldr	r5, [r4, #20]
 8011bca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011bce:	fb95 f5f3 	sdiv	r5, r5, r3
 8011bd2:	f109 0301 	add.w	r3, r9, #1
 8011bd6:	443b      	add	r3, r7
 8011bd8:	429d      	cmp	r5, r3
 8011bda:	bf38      	it	cc
 8011bdc:	461d      	movcc	r5, r3
 8011bde:	0553      	lsls	r3, r2, #21
 8011be0:	d530      	bpl.n	8011c44 <__ssputs_r+0x9e>
 8011be2:	4629      	mov	r1, r5
 8011be4:	f7ff fe1c 	bl	8011820 <_malloc_r>
 8011be8:	4606      	mov	r6, r0
 8011bea:	b950      	cbnz	r0, 8011c02 <__ssputs_r+0x5c>
 8011bec:	230c      	movs	r3, #12
 8011bee:	f04f 30ff 	mov.w	r0, #4294967295
 8011bf2:	f8ca 3000 	str.w	r3, [sl]
 8011bf6:	89a3      	ldrh	r3, [r4, #12]
 8011bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011bfc:	81a3      	strh	r3, [r4, #12]
 8011bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c02:	463a      	mov	r2, r7
 8011c04:	6921      	ldr	r1, [r4, #16]
 8011c06:	f7ff fd92 	bl	801172e <memcpy>
 8011c0a:	89a3      	ldrh	r3, [r4, #12]
 8011c0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c14:	81a3      	strh	r3, [r4, #12]
 8011c16:	6126      	str	r6, [r4, #16]
 8011c18:	443e      	add	r6, r7
 8011c1a:	6026      	str	r6, [r4, #0]
 8011c1c:	464e      	mov	r6, r9
 8011c1e:	6165      	str	r5, [r4, #20]
 8011c20:	1bed      	subs	r5, r5, r7
 8011c22:	60a5      	str	r5, [r4, #8]
 8011c24:	454e      	cmp	r6, r9
 8011c26:	d900      	bls.n	8011c2a <__ssputs_r+0x84>
 8011c28:	464e      	mov	r6, r9
 8011c2a:	4632      	mov	r2, r6
 8011c2c:	4641      	mov	r1, r8
 8011c2e:	6820      	ldr	r0, [r4, #0]
 8011c30:	f7ff fd88 	bl	8011744 <memmove>
 8011c34:	68a3      	ldr	r3, [r4, #8]
 8011c36:	2000      	movs	r0, #0
 8011c38:	1b9b      	subs	r3, r3, r6
 8011c3a:	60a3      	str	r3, [r4, #8]
 8011c3c:	6823      	ldr	r3, [r4, #0]
 8011c3e:	441e      	add	r6, r3
 8011c40:	6026      	str	r6, [r4, #0]
 8011c42:	e7dc      	b.n	8011bfe <__ssputs_r+0x58>
 8011c44:	462a      	mov	r2, r5
 8011c46:	f000 fa96 	bl	8012176 <_realloc_r>
 8011c4a:	4606      	mov	r6, r0
 8011c4c:	2800      	cmp	r0, #0
 8011c4e:	d1e2      	bne.n	8011c16 <__ssputs_r+0x70>
 8011c50:	6921      	ldr	r1, [r4, #16]
 8011c52:	4650      	mov	r0, sl
 8011c54:	f7ff fd98 	bl	8011788 <_free_r>
 8011c58:	e7c8      	b.n	8011bec <__ssputs_r+0x46>
	...

08011c5c <_svfiprintf_r>:
 8011c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c60:	461d      	mov	r5, r3
 8011c62:	898b      	ldrh	r3, [r1, #12]
 8011c64:	b09d      	sub	sp, #116	; 0x74
 8011c66:	061f      	lsls	r7, r3, #24
 8011c68:	4680      	mov	r8, r0
 8011c6a:	460c      	mov	r4, r1
 8011c6c:	4616      	mov	r6, r2
 8011c6e:	d50f      	bpl.n	8011c90 <_svfiprintf_r+0x34>
 8011c70:	690b      	ldr	r3, [r1, #16]
 8011c72:	b96b      	cbnz	r3, 8011c90 <_svfiprintf_r+0x34>
 8011c74:	2140      	movs	r1, #64	; 0x40
 8011c76:	f7ff fdd3 	bl	8011820 <_malloc_r>
 8011c7a:	6020      	str	r0, [r4, #0]
 8011c7c:	6120      	str	r0, [r4, #16]
 8011c7e:	b928      	cbnz	r0, 8011c8c <_svfiprintf_r+0x30>
 8011c80:	230c      	movs	r3, #12
 8011c82:	f8c8 3000 	str.w	r3, [r8]
 8011c86:	f04f 30ff 	mov.w	r0, #4294967295
 8011c8a:	e0c8      	b.n	8011e1e <_svfiprintf_r+0x1c2>
 8011c8c:	2340      	movs	r3, #64	; 0x40
 8011c8e:	6163      	str	r3, [r4, #20]
 8011c90:	2300      	movs	r3, #0
 8011c92:	9309      	str	r3, [sp, #36]	; 0x24
 8011c94:	2320      	movs	r3, #32
 8011c96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011c9a:	2330      	movs	r3, #48	; 0x30
 8011c9c:	f04f 0b01 	mov.w	fp, #1
 8011ca0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011ca4:	9503      	str	r5, [sp, #12]
 8011ca6:	4637      	mov	r7, r6
 8011ca8:	463d      	mov	r5, r7
 8011caa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011cae:	b10b      	cbz	r3, 8011cb4 <_svfiprintf_r+0x58>
 8011cb0:	2b25      	cmp	r3, #37	; 0x25
 8011cb2:	d13e      	bne.n	8011d32 <_svfiprintf_r+0xd6>
 8011cb4:	ebb7 0a06 	subs.w	sl, r7, r6
 8011cb8:	d00b      	beq.n	8011cd2 <_svfiprintf_r+0x76>
 8011cba:	4653      	mov	r3, sl
 8011cbc:	4632      	mov	r2, r6
 8011cbe:	4621      	mov	r1, r4
 8011cc0:	4640      	mov	r0, r8
 8011cc2:	f7ff ff70 	bl	8011ba6 <__ssputs_r>
 8011cc6:	3001      	adds	r0, #1
 8011cc8:	f000 80a4 	beq.w	8011e14 <_svfiprintf_r+0x1b8>
 8011ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cce:	4453      	add	r3, sl
 8011cd0:	9309      	str	r3, [sp, #36]	; 0x24
 8011cd2:	783b      	ldrb	r3, [r7, #0]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	f000 809d 	beq.w	8011e14 <_svfiprintf_r+0x1b8>
 8011cda:	2300      	movs	r3, #0
 8011cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8011ce0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ce4:	9304      	str	r3, [sp, #16]
 8011ce6:	9307      	str	r3, [sp, #28]
 8011ce8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011cec:	931a      	str	r3, [sp, #104]	; 0x68
 8011cee:	462f      	mov	r7, r5
 8011cf0:	2205      	movs	r2, #5
 8011cf2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8011cf6:	4850      	ldr	r0, [pc, #320]	; (8011e38 <_svfiprintf_r+0x1dc>)
 8011cf8:	f7ff fcfc 	bl	80116f4 <memchr>
 8011cfc:	9b04      	ldr	r3, [sp, #16]
 8011cfe:	b9d0      	cbnz	r0, 8011d36 <_svfiprintf_r+0xda>
 8011d00:	06d9      	lsls	r1, r3, #27
 8011d02:	bf44      	itt	mi
 8011d04:	2220      	movmi	r2, #32
 8011d06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011d0a:	071a      	lsls	r2, r3, #28
 8011d0c:	bf44      	itt	mi
 8011d0e:	222b      	movmi	r2, #43	; 0x2b
 8011d10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011d14:	782a      	ldrb	r2, [r5, #0]
 8011d16:	2a2a      	cmp	r2, #42	; 0x2a
 8011d18:	d015      	beq.n	8011d46 <_svfiprintf_r+0xea>
 8011d1a:	462f      	mov	r7, r5
 8011d1c:	2000      	movs	r0, #0
 8011d1e:	250a      	movs	r5, #10
 8011d20:	9a07      	ldr	r2, [sp, #28]
 8011d22:	4639      	mov	r1, r7
 8011d24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d28:	3b30      	subs	r3, #48	; 0x30
 8011d2a:	2b09      	cmp	r3, #9
 8011d2c:	d94d      	bls.n	8011dca <_svfiprintf_r+0x16e>
 8011d2e:	b1b8      	cbz	r0, 8011d60 <_svfiprintf_r+0x104>
 8011d30:	e00f      	b.n	8011d52 <_svfiprintf_r+0xf6>
 8011d32:	462f      	mov	r7, r5
 8011d34:	e7b8      	b.n	8011ca8 <_svfiprintf_r+0x4c>
 8011d36:	4a40      	ldr	r2, [pc, #256]	; (8011e38 <_svfiprintf_r+0x1dc>)
 8011d38:	463d      	mov	r5, r7
 8011d3a:	1a80      	subs	r0, r0, r2
 8011d3c:	fa0b f000 	lsl.w	r0, fp, r0
 8011d40:	4318      	orrs	r0, r3
 8011d42:	9004      	str	r0, [sp, #16]
 8011d44:	e7d3      	b.n	8011cee <_svfiprintf_r+0x92>
 8011d46:	9a03      	ldr	r2, [sp, #12]
 8011d48:	1d11      	adds	r1, r2, #4
 8011d4a:	6812      	ldr	r2, [r2, #0]
 8011d4c:	9103      	str	r1, [sp, #12]
 8011d4e:	2a00      	cmp	r2, #0
 8011d50:	db01      	blt.n	8011d56 <_svfiprintf_r+0xfa>
 8011d52:	9207      	str	r2, [sp, #28]
 8011d54:	e004      	b.n	8011d60 <_svfiprintf_r+0x104>
 8011d56:	4252      	negs	r2, r2
 8011d58:	f043 0302 	orr.w	r3, r3, #2
 8011d5c:	9207      	str	r2, [sp, #28]
 8011d5e:	9304      	str	r3, [sp, #16]
 8011d60:	783b      	ldrb	r3, [r7, #0]
 8011d62:	2b2e      	cmp	r3, #46	; 0x2e
 8011d64:	d10c      	bne.n	8011d80 <_svfiprintf_r+0x124>
 8011d66:	787b      	ldrb	r3, [r7, #1]
 8011d68:	2b2a      	cmp	r3, #42	; 0x2a
 8011d6a:	d133      	bne.n	8011dd4 <_svfiprintf_r+0x178>
 8011d6c:	9b03      	ldr	r3, [sp, #12]
 8011d6e:	3702      	adds	r7, #2
 8011d70:	1d1a      	adds	r2, r3, #4
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	9203      	str	r2, [sp, #12]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	bfb8      	it	lt
 8011d7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8011d7e:	9305      	str	r3, [sp, #20]
 8011d80:	4d2e      	ldr	r5, [pc, #184]	; (8011e3c <_svfiprintf_r+0x1e0>)
 8011d82:	2203      	movs	r2, #3
 8011d84:	7839      	ldrb	r1, [r7, #0]
 8011d86:	4628      	mov	r0, r5
 8011d88:	f7ff fcb4 	bl	80116f4 <memchr>
 8011d8c:	b138      	cbz	r0, 8011d9e <_svfiprintf_r+0x142>
 8011d8e:	2340      	movs	r3, #64	; 0x40
 8011d90:	1b40      	subs	r0, r0, r5
 8011d92:	fa03 f000 	lsl.w	r0, r3, r0
 8011d96:	9b04      	ldr	r3, [sp, #16]
 8011d98:	3701      	adds	r7, #1
 8011d9a:	4303      	orrs	r3, r0
 8011d9c:	9304      	str	r3, [sp, #16]
 8011d9e:	7839      	ldrb	r1, [r7, #0]
 8011da0:	2206      	movs	r2, #6
 8011da2:	4827      	ldr	r0, [pc, #156]	; (8011e40 <_svfiprintf_r+0x1e4>)
 8011da4:	1c7e      	adds	r6, r7, #1
 8011da6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011daa:	f7ff fca3 	bl	80116f4 <memchr>
 8011dae:	2800      	cmp	r0, #0
 8011db0:	d038      	beq.n	8011e24 <_svfiprintf_r+0x1c8>
 8011db2:	4b24      	ldr	r3, [pc, #144]	; (8011e44 <_svfiprintf_r+0x1e8>)
 8011db4:	bb13      	cbnz	r3, 8011dfc <_svfiprintf_r+0x1a0>
 8011db6:	9b03      	ldr	r3, [sp, #12]
 8011db8:	3307      	adds	r3, #7
 8011dba:	f023 0307 	bic.w	r3, r3, #7
 8011dbe:	3308      	adds	r3, #8
 8011dc0:	9303      	str	r3, [sp, #12]
 8011dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011dc4:	444b      	add	r3, r9
 8011dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8011dc8:	e76d      	b.n	8011ca6 <_svfiprintf_r+0x4a>
 8011dca:	fb05 3202 	mla	r2, r5, r2, r3
 8011dce:	2001      	movs	r0, #1
 8011dd0:	460f      	mov	r7, r1
 8011dd2:	e7a6      	b.n	8011d22 <_svfiprintf_r+0xc6>
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	250a      	movs	r5, #10
 8011dd8:	4619      	mov	r1, r3
 8011dda:	3701      	adds	r7, #1
 8011ddc:	9305      	str	r3, [sp, #20]
 8011dde:	4638      	mov	r0, r7
 8011de0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011de4:	3a30      	subs	r2, #48	; 0x30
 8011de6:	2a09      	cmp	r2, #9
 8011de8:	d903      	bls.n	8011df2 <_svfiprintf_r+0x196>
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d0c8      	beq.n	8011d80 <_svfiprintf_r+0x124>
 8011dee:	9105      	str	r1, [sp, #20]
 8011df0:	e7c6      	b.n	8011d80 <_svfiprintf_r+0x124>
 8011df2:	fb05 2101 	mla	r1, r5, r1, r2
 8011df6:	2301      	movs	r3, #1
 8011df8:	4607      	mov	r7, r0
 8011dfa:	e7f0      	b.n	8011dde <_svfiprintf_r+0x182>
 8011dfc:	ab03      	add	r3, sp, #12
 8011dfe:	9300      	str	r3, [sp, #0]
 8011e00:	4622      	mov	r2, r4
 8011e02:	4b11      	ldr	r3, [pc, #68]	; (8011e48 <_svfiprintf_r+0x1ec>)
 8011e04:	a904      	add	r1, sp, #16
 8011e06:	4640      	mov	r0, r8
 8011e08:	f3af 8000 	nop.w
 8011e0c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011e10:	4681      	mov	r9, r0
 8011e12:	d1d6      	bne.n	8011dc2 <_svfiprintf_r+0x166>
 8011e14:	89a3      	ldrh	r3, [r4, #12]
 8011e16:	065b      	lsls	r3, r3, #25
 8011e18:	f53f af35 	bmi.w	8011c86 <_svfiprintf_r+0x2a>
 8011e1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011e1e:	b01d      	add	sp, #116	; 0x74
 8011e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e24:	ab03      	add	r3, sp, #12
 8011e26:	9300      	str	r3, [sp, #0]
 8011e28:	4622      	mov	r2, r4
 8011e2a:	4b07      	ldr	r3, [pc, #28]	; (8011e48 <_svfiprintf_r+0x1ec>)
 8011e2c:	a904      	add	r1, sp, #16
 8011e2e:	4640      	mov	r0, r8
 8011e30:	f000 f882 	bl	8011f38 <_printf_i>
 8011e34:	e7ea      	b.n	8011e0c <_svfiprintf_r+0x1b0>
 8011e36:	bf00      	nop
 8011e38:	08015666 	.word	0x08015666
 8011e3c:	0801566c 	.word	0x0801566c
 8011e40:	08015670 	.word	0x08015670
 8011e44:	00000000 	.word	0x00000000
 8011e48:	08011ba7 	.word	0x08011ba7

08011e4c <_printf_common>:
 8011e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e50:	4691      	mov	r9, r2
 8011e52:	461f      	mov	r7, r3
 8011e54:	688a      	ldr	r2, [r1, #8]
 8011e56:	690b      	ldr	r3, [r1, #16]
 8011e58:	4606      	mov	r6, r0
 8011e5a:	4293      	cmp	r3, r2
 8011e5c:	bfb8      	it	lt
 8011e5e:	4613      	movlt	r3, r2
 8011e60:	f8c9 3000 	str.w	r3, [r9]
 8011e64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011e68:	460c      	mov	r4, r1
 8011e6a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011e6e:	b112      	cbz	r2, 8011e76 <_printf_common+0x2a>
 8011e70:	3301      	adds	r3, #1
 8011e72:	f8c9 3000 	str.w	r3, [r9]
 8011e76:	6823      	ldr	r3, [r4, #0]
 8011e78:	0699      	lsls	r1, r3, #26
 8011e7a:	bf42      	ittt	mi
 8011e7c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011e80:	3302      	addmi	r3, #2
 8011e82:	f8c9 3000 	strmi.w	r3, [r9]
 8011e86:	6825      	ldr	r5, [r4, #0]
 8011e88:	f015 0506 	ands.w	r5, r5, #6
 8011e8c:	d107      	bne.n	8011e9e <_printf_common+0x52>
 8011e8e:	f104 0a19 	add.w	sl, r4, #25
 8011e92:	68e3      	ldr	r3, [r4, #12]
 8011e94:	f8d9 2000 	ldr.w	r2, [r9]
 8011e98:	1a9b      	subs	r3, r3, r2
 8011e9a:	42ab      	cmp	r3, r5
 8011e9c:	dc29      	bgt.n	8011ef2 <_printf_common+0xa6>
 8011e9e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011ea2:	6822      	ldr	r2, [r4, #0]
 8011ea4:	3300      	adds	r3, #0
 8011ea6:	bf18      	it	ne
 8011ea8:	2301      	movne	r3, #1
 8011eaa:	0692      	lsls	r2, r2, #26
 8011eac:	d42e      	bmi.n	8011f0c <_printf_common+0xc0>
 8011eae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011eb2:	4639      	mov	r1, r7
 8011eb4:	4630      	mov	r0, r6
 8011eb6:	47c0      	blx	r8
 8011eb8:	3001      	adds	r0, #1
 8011eba:	d021      	beq.n	8011f00 <_printf_common+0xb4>
 8011ebc:	6823      	ldr	r3, [r4, #0]
 8011ebe:	68e5      	ldr	r5, [r4, #12]
 8011ec0:	f003 0306 	and.w	r3, r3, #6
 8011ec4:	2b04      	cmp	r3, #4
 8011ec6:	bf18      	it	ne
 8011ec8:	2500      	movne	r5, #0
 8011eca:	f8d9 2000 	ldr.w	r2, [r9]
 8011ece:	f04f 0900 	mov.w	r9, #0
 8011ed2:	bf08      	it	eq
 8011ed4:	1aad      	subeq	r5, r5, r2
 8011ed6:	68a3      	ldr	r3, [r4, #8]
 8011ed8:	6922      	ldr	r2, [r4, #16]
 8011eda:	bf08      	it	eq
 8011edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011ee0:	4293      	cmp	r3, r2
 8011ee2:	bfc4      	itt	gt
 8011ee4:	1a9b      	subgt	r3, r3, r2
 8011ee6:	18ed      	addgt	r5, r5, r3
 8011ee8:	341a      	adds	r4, #26
 8011eea:	454d      	cmp	r5, r9
 8011eec:	d11a      	bne.n	8011f24 <_printf_common+0xd8>
 8011eee:	2000      	movs	r0, #0
 8011ef0:	e008      	b.n	8011f04 <_printf_common+0xb8>
 8011ef2:	2301      	movs	r3, #1
 8011ef4:	4652      	mov	r2, sl
 8011ef6:	4639      	mov	r1, r7
 8011ef8:	4630      	mov	r0, r6
 8011efa:	47c0      	blx	r8
 8011efc:	3001      	adds	r0, #1
 8011efe:	d103      	bne.n	8011f08 <_printf_common+0xbc>
 8011f00:	f04f 30ff 	mov.w	r0, #4294967295
 8011f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f08:	3501      	adds	r5, #1
 8011f0a:	e7c2      	b.n	8011e92 <_printf_common+0x46>
 8011f0c:	2030      	movs	r0, #48	; 0x30
 8011f0e:	18e1      	adds	r1, r4, r3
 8011f10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011f14:	1c5a      	adds	r2, r3, #1
 8011f16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011f1a:	4422      	add	r2, r4
 8011f1c:	3302      	adds	r3, #2
 8011f1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011f22:	e7c4      	b.n	8011eae <_printf_common+0x62>
 8011f24:	2301      	movs	r3, #1
 8011f26:	4622      	mov	r2, r4
 8011f28:	4639      	mov	r1, r7
 8011f2a:	4630      	mov	r0, r6
 8011f2c:	47c0      	blx	r8
 8011f2e:	3001      	adds	r0, #1
 8011f30:	d0e6      	beq.n	8011f00 <_printf_common+0xb4>
 8011f32:	f109 0901 	add.w	r9, r9, #1
 8011f36:	e7d8      	b.n	8011eea <_printf_common+0x9e>

08011f38 <_printf_i>:
 8011f38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011f3c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011f40:	460c      	mov	r4, r1
 8011f42:	7e09      	ldrb	r1, [r1, #24]
 8011f44:	b085      	sub	sp, #20
 8011f46:	296e      	cmp	r1, #110	; 0x6e
 8011f48:	4617      	mov	r7, r2
 8011f4a:	4606      	mov	r6, r0
 8011f4c:	4698      	mov	r8, r3
 8011f4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011f50:	f000 80b3 	beq.w	80120ba <_printf_i+0x182>
 8011f54:	d822      	bhi.n	8011f9c <_printf_i+0x64>
 8011f56:	2963      	cmp	r1, #99	; 0x63
 8011f58:	d036      	beq.n	8011fc8 <_printf_i+0x90>
 8011f5a:	d80a      	bhi.n	8011f72 <_printf_i+0x3a>
 8011f5c:	2900      	cmp	r1, #0
 8011f5e:	f000 80b9 	beq.w	80120d4 <_printf_i+0x19c>
 8011f62:	2958      	cmp	r1, #88	; 0x58
 8011f64:	f000 8083 	beq.w	801206e <_printf_i+0x136>
 8011f68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011f6c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011f70:	e032      	b.n	8011fd8 <_printf_i+0xa0>
 8011f72:	2964      	cmp	r1, #100	; 0x64
 8011f74:	d001      	beq.n	8011f7a <_printf_i+0x42>
 8011f76:	2969      	cmp	r1, #105	; 0x69
 8011f78:	d1f6      	bne.n	8011f68 <_printf_i+0x30>
 8011f7a:	6820      	ldr	r0, [r4, #0]
 8011f7c:	6813      	ldr	r3, [r2, #0]
 8011f7e:	0605      	lsls	r5, r0, #24
 8011f80:	f103 0104 	add.w	r1, r3, #4
 8011f84:	d52a      	bpl.n	8011fdc <_printf_i+0xa4>
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	6011      	str	r1, [r2, #0]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	da03      	bge.n	8011f96 <_printf_i+0x5e>
 8011f8e:	222d      	movs	r2, #45	; 0x2d
 8011f90:	425b      	negs	r3, r3
 8011f92:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011f96:	486f      	ldr	r0, [pc, #444]	; (8012154 <_printf_i+0x21c>)
 8011f98:	220a      	movs	r2, #10
 8011f9a:	e039      	b.n	8012010 <_printf_i+0xd8>
 8011f9c:	2973      	cmp	r1, #115	; 0x73
 8011f9e:	f000 809d 	beq.w	80120dc <_printf_i+0x1a4>
 8011fa2:	d808      	bhi.n	8011fb6 <_printf_i+0x7e>
 8011fa4:	296f      	cmp	r1, #111	; 0x6f
 8011fa6:	d020      	beq.n	8011fea <_printf_i+0xb2>
 8011fa8:	2970      	cmp	r1, #112	; 0x70
 8011faa:	d1dd      	bne.n	8011f68 <_printf_i+0x30>
 8011fac:	6823      	ldr	r3, [r4, #0]
 8011fae:	f043 0320 	orr.w	r3, r3, #32
 8011fb2:	6023      	str	r3, [r4, #0]
 8011fb4:	e003      	b.n	8011fbe <_printf_i+0x86>
 8011fb6:	2975      	cmp	r1, #117	; 0x75
 8011fb8:	d017      	beq.n	8011fea <_printf_i+0xb2>
 8011fba:	2978      	cmp	r1, #120	; 0x78
 8011fbc:	d1d4      	bne.n	8011f68 <_printf_i+0x30>
 8011fbe:	2378      	movs	r3, #120	; 0x78
 8011fc0:	4865      	ldr	r0, [pc, #404]	; (8012158 <_printf_i+0x220>)
 8011fc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011fc6:	e055      	b.n	8012074 <_printf_i+0x13c>
 8011fc8:	6813      	ldr	r3, [r2, #0]
 8011fca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011fce:	1d19      	adds	r1, r3, #4
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	6011      	str	r1, [r2, #0]
 8011fd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011fd8:	2301      	movs	r3, #1
 8011fda:	e08c      	b.n	80120f6 <_printf_i+0x1be>
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011fe2:	6011      	str	r1, [r2, #0]
 8011fe4:	bf18      	it	ne
 8011fe6:	b21b      	sxthne	r3, r3
 8011fe8:	e7cf      	b.n	8011f8a <_printf_i+0x52>
 8011fea:	6813      	ldr	r3, [r2, #0]
 8011fec:	6825      	ldr	r5, [r4, #0]
 8011fee:	1d18      	adds	r0, r3, #4
 8011ff0:	6010      	str	r0, [r2, #0]
 8011ff2:	0628      	lsls	r0, r5, #24
 8011ff4:	d501      	bpl.n	8011ffa <_printf_i+0xc2>
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	e002      	b.n	8012000 <_printf_i+0xc8>
 8011ffa:	0668      	lsls	r0, r5, #25
 8011ffc:	d5fb      	bpl.n	8011ff6 <_printf_i+0xbe>
 8011ffe:	881b      	ldrh	r3, [r3, #0]
 8012000:	296f      	cmp	r1, #111	; 0x6f
 8012002:	bf14      	ite	ne
 8012004:	220a      	movne	r2, #10
 8012006:	2208      	moveq	r2, #8
 8012008:	4852      	ldr	r0, [pc, #328]	; (8012154 <_printf_i+0x21c>)
 801200a:	2100      	movs	r1, #0
 801200c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012010:	6865      	ldr	r5, [r4, #4]
 8012012:	2d00      	cmp	r5, #0
 8012014:	60a5      	str	r5, [r4, #8]
 8012016:	f2c0 8095 	blt.w	8012144 <_printf_i+0x20c>
 801201a:	6821      	ldr	r1, [r4, #0]
 801201c:	f021 0104 	bic.w	r1, r1, #4
 8012020:	6021      	str	r1, [r4, #0]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d13d      	bne.n	80120a2 <_printf_i+0x16a>
 8012026:	2d00      	cmp	r5, #0
 8012028:	f040 808e 	bne.w	8012148 <_printf_i+0x210>
 801202c:	4665      	mov	r5, ip
 801202e:	2a08      	cmp	r2, #8
 8012030:	d10b      	bne.n	801204a <_printf_i+0x112>
 8012032:	6823      	ldr	r3, [r4, #0]
 8012034:	07db      	lsls	r3, r3, #31
 8012036:	d508      	bpl.n	801204a <_printf_i+0x112>
 8012038:	6923      	ldr	r3, [r4, #16]
 801203a:	6862      	ldr	r2, [r4, #4]
 801203c:	429a      	cmp	r2, r3
 801203e:	bfde      	ittt	le
 8012040:	2330      	movle	r3, #48	; 0x30
 8012042:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012046:	f105 35ff 	addle.w	r5, r5, #4294967295
 801204a:	ebac 0305 	sub.w	r3, ip, r5
 801204e:	6123      	str	r3, [r4, #16]
 8012050:	f8cd 8000 	str.w	r8, [sp]
 8012054:	463b      	mov	r3, r7
 8012056:	aa03      	add	r2, sp, #12
 8012058:	4621      	mov	r1, r4
 801205a:	4630      	mov	r0, r6
 801205c:	f7ff fef6 	bl	8011e4c <_printf_common>
 8012060:	3001      	adds	r0, #1
 8012062:	d14d      	bne.n	8012100 <_printf_i+0x1c8>
 8012064:	f04f 30ff 	mov.w	r0, #4294967295
 8012068:	b005      	add	sp, #20
 801206a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801206e:	4839      	ldr	r0, [pc, #228]	; (8012154 <_printf_i+0x21c>)
 8012070:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012074:	6813      	ldr	r3, [r2, #0]
 8012076:	6821      	ldr	r1, [r4, #0]
 8012078:	1d1d      	adds	r5, r3, #4
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	6015      	str	r5, [r2, #0]
 801207e:	060a      	lsls	r2, r1, #24
 8012080:	d50b      	bpl.n	801209a <_printf_i+0x162>
 8012082:	07ca      	lsls	r2, r1, #31
 8012084:	bf44      	itt	mi
 8012086:	f041 0120 	orrmi.w	r1, r1, #32
 801208a:	6021      	strmi	r1, [r4, #0]
 801208c:	b91b      	cbnz	r3, 8012096 <_printf_i+0x15e>
 801208e:	6822      	ldr	r2, [r4, #0]
 8012090:	f022 0220 	bic.w	r2, r2, #32
 8012094:	6022      	str	r2, [r4, #0]
 8012096:	2210      	movs	r2, #16
 8012098:	e7b7      	b.n	801200a <_printf_i+0xd2>
 801209a:	064d      	lsls	r5, r1, #25
 801209c:	bf48      	it	mi
 801209e:	b29b      	uxthmi	r3, r3
 80120a0:	e7ef      	b.n	8012082 <_printf_i+0x14a>
 80120a2:	4665      	mov	r5, ip
 80120a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80120a8:	fb02 3311 	mls	r3, r2, r1, r3
 80120ac:	5cc3      	ldrb	r3, [r0, r3]
 80120ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80120b2:	460b      	mov	r3, r1
 80120b4:	2900      	cmp	r1, #0
 80120b6:	d1f5      	bne.n	80120a4 <_printf_i+0x16c>
 80120b8:	e7b9      	b.n	801202e <_printf_i+0xf6>
 80120ba:	6813      	ldr	r3, [r2, #0]
 80120bc:	6825      	ldr	r5, [r4, #0]
 80120be:	1d18      	adds	r0, r3, #4
 80120c0:	6961      	ldr	r1, [r4, #20]
 80120c2:	6010      	str	r0, [r2, #0]
 80120c4:	0628      	lsls	r0, r5, #24
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	d501      	bpl.n	80120ce <_printf_i+0x196>
 80120ca:	6019      	str	r1, [r3, #0]
 80120cc:	e002      	b.n	80120d4 <_printf_i+0x19c>
 80120ce:	066a      	lsls	r2, r5, #25
 80120d0:	d5fb      	bpl.n	80120ca <_printf_i+0x192>
 80120d2:	8019      	strh	r1, [r3, #0]
 80120d4:	2300      	movs	r3, #0
 80120d6:	4665      	mov	r5, ip
 80120d8:	6123      	str	r3, [r4, #16]
 80120da:	e7b9      	b.n	8012050 <_printf_i+0x118>
 80120dc:	6813      	ldr	r3, [r2, #0]
 80120de:	1d19      	adds	r1, r3, #4
 80120e0:	6011      	str	r1, [r2, #0]
 80120e2:	681d      	ldr	r5, [r3, #0]
 80120e4:	6862      	ldr	r2, [r4, #4]
 80120e6:	2100      	movs	r1, #0
 80120e8:	4628      	mov	r0, r5
 80120ea:	f7ff fb03 	bl	80116f4 <memchr>
 80120ee:	b108      	cbz	r0, 80120f4 <_printf_i+0x1bc>
 80120f0:	1b40      	subs	r0, r0, r5
 80120f2:	6060      	str	r0, [r4, #4]
 80120f4:	6863      	ldr	r3, [r4, #4]
 80120f6:	6123      	str	r3, [r4, #16]
 80120f8:	2300      	movs	r3, #0
 80120fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80120fe:	e7a7      	b.n	8012050 <_printf_i+0x118>
 8012100:	6923      	ldr	r3, [r4, #16]
 8012102:	462a      	mov	r2, r5
 8012104:	4639      	mov	r1, r7
 8012106:	4630      	mov	r0, r6
 8012108:	47c0      	blx	r8
 801210a:	3001      	adds	r0, #1
 801210c:	d0aa      	beq.n	8012064 <_printf_i+0x12c>
 801210e:	6823      	ldr	r3, [r4, #0]
 8012110:	079b      	lsls	r3, r3, #30
 8012112:	d413      	bmi.n	801213c <_printf_i+0x204>
 8012114:	68e0      	ldr	r0, [r4, #12]
 8012116:	9b03      	ldr	r3, [sp, #12]
 8012118:	4298      	cmp	r0, r3
 801211a:	bfb8      	it	lt
 801211c:	4618      	movlt	r0, r3
 801211e:	e7a3      	b.n	8012068 <_printf_i+0x130>
 8012120:	2301      	movs	r3, #1
 8012122:	464a      	mov	r2, r9
 8012124:	4639      	mov	r1, r7
 8012126:	4630      	mov	r0, r6
 8012128:	47c0      	blx	r8
 801212a:	3001      	adds	r0, #1
 801212c:	d09a      	beq.n	8012064 <_printf_i+0x12c>
 801212e:	3501      	adds	r5, #1
 8012130:	68e3      	ldr	r3, [r4, #12]
 8012132:	9a03      	ldr	r2, [sp, #12]
 8012134:	1a9b      	subs	r3, r3, r2
 8012136:	42ab      	cmp	r3, r5
 8012138:	dcf2      	bgt.n	8012120 <_printf_i+0x1e8>
 801213a:	e7eb      	b.n	8012114 <_printf_i+0x1dc>
 801213c:	2500      	movs	r5, #0
 801213e:	f104 0919 	add.w	r9, r4, #25
 8012142:	e7f5      	b.n	8012130 <_printf_i+0x1f8>
 8012144:	2b00      	cmp	r3, #0
 8012146:	d1ac      	bne.n	80120a2 <_printf_i+0x16a>
 8012148:	7803      	ldrb	r3, [r0, #0]
 801214a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801214e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012152:	e76c      	b.n	801202e <_printf_i+0xf6>
 8012154:	08015677 	.word	0x08015677
 8012158:	08015688 	.word	0x08015688

0801215c <__ascii_wctomb>:
 801215c:	b149      	cbz	r1, 8012172 <__ascii_wctomb+0x16>
 801215e:	2aff      	cmp	r2, #255	; 0xff
 8012160:	bf8b      	itete	hi
 8012162:	238a      	movhi	r3, #138	; 0x8a
 8012164:	700a      	strbls	r2, [r1, #0]
 8012166:	6003      	strhi	r3, [r0, #0]
 8012168:	2001      	movls	r0, #1
 801216a:	bf88      	it	hi
 801216c:	f04f 30ff 	movhi.w	r0, #4294967295
 8012170:	4770      	bx	lr
 8012172:	4608      	mov	r0, r1
 8012174:	4770      	bx	lr

08012176 <_realloc_r>:
 8012176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012178:	4607      	mov	r7, r0
 801217a:	4614      	mov	r4, r2
 801217c:	460e      	mov	r6, r1
 801217e:	b921      	cbnz	r1, 801218a <_realloc_r+0x14>
 8012180:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012184:	4611      	mov	r1, r2
 8012186:	f7ff bb4b 	b.w	8011820 <_malloc_r>
 801218a:	b922      	cbnz	r2, 8012196 <_realloc_r+0x20>
 801218c:	f7ff fafc 	bl	8011788 <_free_r>
 8012190:	4625      	mov	r5, r4
 8012192:	4628      	mov	r0, r5
 8012194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012196:	f000 f814 	bl	80121c2 <_malloc_usable_size_r>
 801219a:	42a0      	cmp	r0, r4
 801219c:	d20f      	bcs.n	80121be <_realloc_r+0x48>
 801219e:	4621      	mov	r1, r4
 80121a0:	4638      	mov	r0, r7
 80121a2:	f7ff fb3d 	bl	8011820 <_malloc_r>
 80121a6:	4605      	mov	r5, r0
 80121a8:	2800      	cmp	r0, #0
 80121aa:	d0f2      	beq.n	8012192 <_realloc_r+0x1c>
 80121ac:	4631      	mov	r1, r6
 80121ae:	4622      	mov	r2, r4
 80121b0:	f7ff fabd 	bl	801172e <memcpy>
 80121b4:	4631      	mov	r1, r6
 80121b6:	4638      	mov	r0, r7
 80121b8:	f7ff fae6 	bl	8011788 <_free_r>
 80121bc:	e7e9      	b.n	8012192 <_realloc_r+0x1c>
 80121be:	4635      	mov	r5, r6
 80121c0:	e7e7      	b.n	8012192 <_realloc_r+0x1c>

080121c2 <_malloc_usable_size_r>:
 80121c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80121c6:	1f18      	subs	r0, r3, #4
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	bfbc      	itt	lt
 80121cc:	580b      	ldrlt	r3, [r1, r0]
 80121ce:	18c0      	addlt	r0, r0, r3
 80121d0:	4770      	bx	lr
	...

080121d4 <_init>:
 80121d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121d6:	bf00      	nop
 80121d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121da:	bc08      	pop	{r3}
 80121dc:	469e      	mov	lr, r3
 80121de:	4770      	bx	lr

080121e0 <_fini>:
 80121e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121e2:	bf00      	nop
 80121e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121e6:	bc08      	pop	{r3}
 80121e8:	469e      	mov	lr, r3
 80121ea:	4770      	bx	lr

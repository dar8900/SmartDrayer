
SmartDrayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000125ec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000035f8  080126fc  080126fc  000226fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015cf4  08015cf4  00030288  2**0
                  CONTENTS
  4 .ARM          00000000  08015cf4  08015cf4  00030288  2**0
                  CONTENTS
  5 .preinit_array 00000000  08015cf4  08015cf4  00030288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015cf4  08015cf4  00025cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015cf8  08015cf8  00025cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  08015cfc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d4  20000288  08015f84  00030288  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000085c  08015f84  0003085c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030288  2**0
                  CONTENTS, READONLY
 12 .debug_info   0011bb8d  00000000  00000000  000302b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009441  00000000  00000000  0014be3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003b60  00000000  00000000  00155280  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003878  00000000  00000000  00158de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021350  00000000  00000000  0015c658  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002bdd6  00000000  00000000  0017d9a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a41ba  00000000  00000000  001a977e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0024d938  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00011dac  00000000  00000000  0024d9b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000288 	.word	0x20000288
 800012c:	00000000 	.word	0x00000000
 8000130:	080126e4 	.word	0x080126e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000028c 	.word	0x2000028c
 800014c:	080126e4 	.word	0x080126e4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2f>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000904:	bf24      	itt	cs
 8000906:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800090a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800090e:	d90d      	bls.n	800092c <__aeabi_d2f+0x30>
 8000910:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000914:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000918:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800091c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000920:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000924:	bf08      	it	eq
 8000926:	f020 0001 	biceq.w	r0, r0, #1
 800092a:	4770      	bx	lr
 800092c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000930:	d121      	bne.n	8000976 <__aeabi_d2f+0x7a>
 8000932:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000936:	bfbc      	itt	lt
 8000938:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800093c:	4770      	bxlt	lr
 800093e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000942:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000946:	f1c2 0218 	rsb	r2, r2, #24
 800094a:	f1c2 0c20 	rsb	ip, r2, #32
 800094e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000952:	fa20 f002 	lsr.w	r0, r0, r2
 8000956:	bf18      	it	ne
 8000958:	f040 0001 	orrne.w	r0, r0, #1
 800095c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000960:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000964:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000968:	ea40 000c 	orr.w	r0, r0, ip
 800096c:	fa23 f302 	lsr.w	r3, r3, r2
 8000970:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000974:	e7cc      	b.n	8000910 <__aeabi_d2f+0x14>
 8000976:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097a:	d107      	bne.n	800098c <__aeabi_d2f+0x90>
 800097c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000980:	bf1e      	ittt	ne
 8000982:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000986:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800098a:	4770      	bxne	lr
 800098c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000990:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000994:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_frsub>:
 800099c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009a0:	e002      	b.n	80009a8 <__addsf3>
 80009a2:	bf00      	nop

080009a4 <__aeabi_fsub>:
 80009a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009a8 <__addsf3>:
 80009a8:	0042      	lsls	r2, r0, #1
 80009aa:	bf1f      	itttt	ne
 80009ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009b0:	ea92 0f03 	teqne	r2, r3
 80009b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009bc:	d06a      	beq.n	8000a94 <__addsf3+0xec>
 80009be:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009c6:	bfc1      	itttt	gt
 80009c8:	18d2      	addgt	r2, r2, r3
 80009ca:	4041      	eorgt	r1, r0
 80009cc:	4048      	eorgt	r0, r1
 80009ce:	4041      	eorgt	r1, r0
 80009d0:	bfb8      	it	lt
 80009d2:	425b      	neglt	r3, r3
 80009d4:	2b19      	cmp	r3, #25
 80009d6:	bf88      	it	hi
 80009d8:	4770      	bxhi	lr
 80009da:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009f6:	bf18      	it	ne
 80009f8:	4249      	negne	r1, r1
 80009fa:	ea92 0f03 	teq	r2, r3
 80009fe:	d03f      	beq.n	8000a80 <__addsf3+0xd8>
 8000a00:	f1a2 0201 	sub.w	r2, r2, #1
 8000a04:	fa41 fc03 	asr.w	ip, r1, r3
 8000a08:	eb10 000c 	adds.w	r0, r0, ip
 8000a0c:	f1c3 0320 	rsb	r3, r3, #32
 8000a10:	fa01 f103 	lsl.w	r1, r1, r3
 8000a14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a18:	d502      	bpl.n	8000a20 <__addsf3+0x78>
 8000a1a:	4249      	negs	r1, r1
 8000a1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a24:	d313      	bcc.n	8000a4e <__addsf3+0xa6>
 8000a26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a2a:	d306      	bcc.n	8000a3a <__addsf3+0x92>
 8000a2c:	0840      	lsrs	r0, r0, #1
 8000a2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a32:	f102 0201 	add.w	r2, r2, #1
 8000a36:	2afe      	cmp	r2, #254	; 0xfe
 8000a38:	d251      	bcs.n	8000ade <__addsf3+0x136>
 8000a3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a42:	bf08      	it	eq
 8000a44:	f020 0001 	biceq.w	r0, r0, #1
 8000a48:	ea40 0003 	orr.w	r0, r0, r3
 8000a4c:	4770      	bx	lr
 8000a4e:	0049      	lsls	r1, r1, #1
 8000a50:	eb40 0000 	adc.w	r0, r0, r0
 8000a54:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a58:	f1a2 0201 	sub.w	r2, r2, #1
 8000a5c:	d1ed      	bne.n	8000a3a <__addsf3+0x92>
 8000a5e:	fab0 fc80 	clz	ip, r0
 8000a62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a66:	ebb2 020c 	subs.w	r2, r2, ip
 8000a6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a6e:	bfaa      	itet	ge
 8000a70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a74:	4252      	neglt	r2, r2
 8000a76:	4318      	orrge	r0, r3
 8000a78:	bfbc      	itt	lt
 8000a7a:	40d0      	lsrlt	r0, r2
 8000a7c:	4318      	orrlt	r0, r3
 8000a7e:	4770      	bx	lr
 8000a80:	f092 0f00 	teq	r2, #0
 8000a84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a88:	bf06      	itte	eq
 8000a8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a8e:	3201      	addeq	r2, #1
 8000a90:	3b01      	subne	r3, #1
 8000a92:	e7b5      	b.n	8000a00 <__addsf3+0x58>
 8000a94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa2:	d021      	beq.n	8000ae8 <__addsf3+0x140>
 8000aa4:	ea92 0f03 	teq	r2, r3
 8000aa8:	d004      	beq.n	8000ab4 <__addsf3+0x10c>
 8000aaa:	f092 0f00 	teq	r2, #0
 8000aae:	bf08      	it	eq
 8000ab0:	4608      	moveq	r0, r1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea90 0f01 	teq	r0, r1
 8000ab8:	bf1c      	itt	ne
 8000aba:	2000      	movne	r0, #0
 8000abc:	4770      	bxne	lr
 8000abe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ac2:	d104      	bne.n	8000ace <__addsf3+0x126>
 8000ac4:	0040      	lsls	r0, r0, #1
 8000ac6:	bf28      	it	cs
 8000ac8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	4770      	bx	lr
 8000ace:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ad2:	bf3c      	itt	cc
 8000ad4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bxcc	lr
 8000ada:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ade:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ae2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae6:	4770      	bx	lr
 8000ae8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000aec:	bf16      	itet	ne
 8000aee:	4608      	movne	r0, r1
 8000af0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000af4:	4601      	movne	r1, r0
 8000af6:	0242      	lsls	r2, r0, #9
 8000af8:	bf06      	itte	eq
 8000afa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000afe:	ea90 0f01 	teqeq	r0, r1
 8000b02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_ui2f>:
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	e004      	b.n	8000b18 <__aeabi_i2f+0x8>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_i2f>:
 8000b10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b14:	bf48      	it	mi
 8000b16:	4240      	negmi	r0, r0
 8000b18:	ea5f 0c00 	movs.w	ip, r0
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b24:	4601      	mov	r1, r0
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	e01c      	b.n	8000b66 <__aeabi_l2f+0x2a>

08000b2c <__aeabi_ul2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f04f 0300 	mov.w	r3, #0
 8000b38:	e00a      	b.n	8000b50 <__aeabi_l2f+0x14>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_l2f>:
 8000b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b40:	bf08      	it	eq
 8000b42:	4770      	bxeq	lr
 8000b44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b48:	d502      	bpl.n	8000b50 <__aeabi_l2f+0x14>
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b50:	ea5f 0c01 	movs.w	ip, r1
 8000b54:	bf02      	ittt	eq
 8000b56:	4684      	moveq	ip, r0
 8000b58:	4601      	moveq	r1, r0
 8000b5a:	2000      	moveq	r0, #0
 8000b5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b60:	bf08      	it	eq
 8000b62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b6a:	fabc f28c 	clz	r2, ip
 8000b6e:	3a08      	subs	r2, #8
 8000b70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b74:	db10      	blt.n	8000b98 <__aeabi_l2f+0x5c>
 8000b76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b7a:	4463      	add	r3, ip
 8000b7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b80:	f1c2 0220 	rsb	r2, r2, #32
 8000b84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b88:	fa20 f202 	lsr.w	r2, r0, r2
 8000b8c:	eb43 0002 	adc.w	r0, r3, r2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f102 0220 	add.w	r2, r2, #32
 8000b9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ba0:	f1c2 0220 	rsb	r2, r2, #32
 8000ba4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ba8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bac:	eb43 0002 	adc.w	r0, r3, r2
 8000bb0:	bf08      	it	eq
 8000bb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_fmul>:
 8000bb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bc6:	ea92 0f0c 	teqne	r2, ip
 8000bca:	ea93 0f0c 	teqne	r3, ip
 8000bce:	d06f      	beq.n	8000cb0 <__aeabi_fmul+0xf8>
 8000bd0:	441a      	add	r2, r3
 8000bd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bd6:	0240      	lsls	r0, r0, #9
 8000bd8:	bf18      	it	ne
 8000bda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bde:	d01e      	beq.n	8000c1e <__aeabi_fmul+0x66>
 8000be0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000be4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000be8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bec:	fba0 3101 	umull	r3, r1, r0, r1
 8000bf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bf8:	bf3e      	ittt	cc
 8000bfa:	0049      	lslcc	r1, r1, #1
 8000bfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c00:	005b      	lslcc	r3, r3, #1
 8000c02:	ea40 0001 	orr.w	r0, r0, r1
 8000c06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c0a:	2afd      	cmp	r2, #253	; 0xfd
 8000c0c:	d81d      	bhi.n	8000c4a <__aeabi_fmul+0x92>
 8000c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c16:	bf08      	it	eq
 8000c18:	f020 0001 	biceq.w	r0, r0, #1
 8000c1c:	4770      	bx	lr
 8000c1e:	f090 0f00 	teq	r0, #0
 8000c22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c26:	bf08      	it	eq
 8000c28:	0249      	lsleq	r1, r1, #9
 8000c2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c32:	3a7f      	subs	r2, #127	; 0x7f
 8000c34:	bfc2      	ittt	gt
 8000c36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c3e:	4770      	bxgt	lr
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	dc5d      	bgt.n	8000d08 <__aeabi_fmul+0x150>
 8000c4c:	f112 0f19 	cmn.w	r2, #25
 8000c50:	bfdc      	itt	le
 8000c52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c56:	4770      	bxle	lr
 8000c58:	f1c2 0200 	rsb	r2, r2, #0
 8000c5c:	0041      	lsls	r1, r0, #1
 8000c5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c62:	f1c2 0220 	rsb	r2, r2, #32
 8000c66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c6e:	f140 0000 	adc.w	r0, r0, #0
 8000c72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c76:	bf08      	it	eq
 8000c78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c7c:	4770      	bx	lr
 8000c7e:	f092 0f00 	teq	r2, #0
 8000c82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c86:	bf02      	ittt	eq
 8000c88:	0040      	lsleq	r0, r0, #1
 8000c8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c8e:	3a01      	subeq	r2, #1
 8000c90:	d0f9      	beq.n	8000c86 <__aeabi_fmul+0xce>
 8000c92:	ea40 000c 	orr.w	r0, r0, ip
 8000c96:	f093 0f00 	teq	r3, #0
 8000c9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c9e:	bf02      	ittt	eq
 8000ca0:	0049      	lsleq	r1, r1, #1
 8000ca2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ca6:	3b01      	subeq	r3, #1
 8000ca8:	d0f9      	beq.n	8000c9e <__aeabi_fmul+0xe6>
 8000caa:	ea41 010c 	orr.w	r1, r1, ip
 8000cae:	e78f      	b.n	8000bd0 <__aeabi_fmul+0x18>
 8000cb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cb4:	ea92 0f0c 	teq	r2, ip
 8000cb8:	bf18      	it	ne
 8000cba:	ea93 0f0c 	teqne	r3, ip
 8000cbe:	d00a      	beq.n	8000cd6 <__aeabi_fmul+0x11e>
 8000cc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cc4:	bf18      	it	ne
 8000cc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cca:	d1d8      	bne.n	8000c7e <__aeabi_fmul+0xc6>
 8000ccc:	ea80 0001 	eor.w	r0, r0, r1
 8000cd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f090 0f00 	teq	r0, #0
 8000cda:	bf17      	itett	ne
 8000cdc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ce0:	4608      	moveq	r0, r1
 8000ce2:	f091 0f00 	teqne	r1, #0
 8000ce6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cea:	d014      	beq.n	8000d16 <__aeabi_fmul+0x15e>
 8000cec:	ea92 0f0c 	teq	r2, ip
 8000cf0:	d101      	bne.n	8000cf6 <__aeabi_fmul+0x13e>
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	d10f      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000cf6:	ea93 0f0c 	teq	r3, ip
 8000cfa:	d103      	bne.n	8000d04 <__aeabi_fmul+0x14c>
 8000cfc:	024b      	lsls	r3, r1, #9
 8000cfe:	bf18      	it	ne
 8000d00:	4608      	movne	r0, r1
 8000d02:	d108      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000d04:	ea80 0001 	eor.w	r0, r0, r1
 8000d08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d14:	4770      	bx	lr
 8000d16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_fdiv>:
 8000d20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d28:	bf1e      	ittt	ne
 8000d2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d2e:	ea92 0f0c 	teqne	r2, ip
 8000d32:	ea93 0f0c 	teqne	r3, ip
 8000d36:	d069      	beq.n	8000e0c <__aeabi_fdiv+0xec>
 8000d38:	eba2 0203 	sub.w	r2, r2, r3
 8000d3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d40:	0249      	lsls	r1, r1, #9
 8000d42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d46:	d037      	beq.n	8000db8 <__aeabi_fdiv+0x98>
 8000d48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	bf38      	it	cc
 8000d5c:	005b      	lslcc	r3, r3, #1
 8000d5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d66:	428b      	cmp	r3, r1
 8000d68:	bf24      	itt	cs
 8000d6a:	1a5b      	subcs	r3, r3, r1
 8000d6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d74:	bf24      	itt	cs
 8000d76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d82:	bf24      	itt	cs
 8000d84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d90:	bf24      	itt	cs
 8000d92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d9a:	011b      	lsls	r3, r3, #4
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000da2:	d1e0      	bne.n	8000d66 <__aeabi_fdiv+0x46>
 8000da4:	2afd      	cmp	r2, #253	; 0xfd
 8000da6:	f63f af50 	bhi.w	8000c4a <__aeabi_fmul+0x92>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db0:	bf08      	it	eq
 8000db2:	f020 0001 	biceq.w	r0, r0, #1
 8000db6:	4770      	bx	lr
 8000db8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dbc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc0:	327f      	adds	r2, #127	; 0x7f
 8000dc2:	bfc2      	ittt	gt
 8000dc4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dcc:	4770      	bxgt	lr
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd2:	f04f 0300 	mov.w	r3, #0
 8000dd6:	3a01      	subs	r2, #1
 8000dd8:	e737      	b.n	8000c4a <__aeabi_fmul+0x92>
 8000dda:	f092 0f00 	teq	r2, #0
 8000dde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de2:	bf02      	ittt	eq
 8000de4:	0040      	lsleq	r0, r0, #1
 8000de6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dea:	3a01      	subeq	r2, #1
 8000dec:	d0f9      	beq.n	8000de2 <__aeabi_fdiv+0xc2>
 8000dee:	ea40 000c 	orr.w	r0, r0, ip
 8000df2:	f093 0f00 	teq	r3, #0
 8000df6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfa:	bf02      	ittt	eq
 8000dfc:	0049      	lsleq	r1, r1, #1
 8000dfe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e02:	3b01      	subeq	r3, #1
 8000e04:	d0f9      	beq.n	8000dfa <__aeabi_fdiv+0xda>
 8000e06:	ea41 010c 	orr.w	r1, r1, ip
 8000e0a:	e795      	b.n	8000d38 <__aeabi_fdiv+0x18>
 8000e0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e10:	ea92 0f0c 	teq	r2, ip
 8000e14:	d108      	bne.n	8000e28 <__aeabi_fdiv+0x108>
 8000e16:	0242      	lsls	r2, r0, #9
 8000e18:	f47f af7d 	bne.w	8000d16 <__aeabi_fmul+0x15e>
 8000e1c:	ea93 0f0c 	teq	r3, ip
 8000e20:	f47f af70 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e776      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e28:	ea93 0f0c 	teq	r3, ip
 8000e2c:	d104      	bne.n	8000e38 <__aeabi_fdiv+0x118>
 8000e2e:	024b      	lsls	r3, r1, #9
 8000e30:	f43f af4c 	beq.w	8000ccc <__aeabi_fmul+0x114>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e76e      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e3c:	bf18      	it	ne
 8000e3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e42:	d1ca      	bne.n	8000dda <__aeabi_fdiv+0xba>
 8000e44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e48:	f47f af5c 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e50:	f47f af3c 	bne.w	8000ccc <__aeabi_fmul+0x114>
 8000e54:	e75f      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e56:	bf00      	nop

08000e58 <__aeabi_f2uiz>:
 8000e58:	0042      	lsls	r2, r0, #1
 8000e5a:	d20e      	bcs.n	8000e7a <__aeabi_f2uiz+0x22>
 8000e5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e60:	d30b      	bcc.n	8000e7a <__aeabi_f2uiz+0x22>
 8000e62:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e6a:	d409      	bmi.n	8000e80 <__aeabi_f2uiz+0x28>
 8000e6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e74:	fa23 f002 	lsr.w	r0, r3, r2
 8000e78:	4770      	bx	lr
 8000e7a:	f04f 0000 	mov.w	r0, #0
 8000e7e:	4770      	bx	lr
 8000e80:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e84:	d101      	bne.n	8000e8a <__aeabi_f2uiz+0x32>
 8000e86:	0242      	lsls	r2, r0, #9
 8000e88:	d102      	bne.n	8000e90 <__aeabi_f2uiz+0x38>
 8000e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8e:	4770      	bx	lr
 8000e90:	f04f 0000 	mov.w	r0, #0
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af02      	add	r7, sp, #8
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	70fb      	strb	r3, [r7, #3]
 8000eaa:	460b      	mov	r3, r1
 8000eac:	70bb      	strb	r3, [r7, #2]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	707b      	strb	r3, [r7, #1]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000eb8:	73bb      	strb	r3, [r7, #14]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8000eba:	7bbb      	ldrb	r3, [r7, #14]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	bf0c      	ite	eq
 8000ec0:	2301      	moveq	r3, #1
 8000ec2:	2300      	movne	r3, #0
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	737b      	strb	r3, [r7, #13]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8000ec8:	78fa      	ldrb	r2, [r7, #3]
 8000eca:	787b      	ldrb	r3, [r7, #1]
 8000ecc:	4413      	add	r3, r2
 8000ece:	b2d8      	uxtb	r0, r3
 8000ed0:	78bb      	ldrb	r3, [r7, #2]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	78ba      	ldrb	r2, [r7, #2]
 8000ed8:	78f9      	ldrb	r1, [r7, #3]
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	4603      	mov	r3, r0
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f001 fb7f 	bl	80025e2 <u8g2_IsIntersection>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d040      	beq.n	8000f6c <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8000eea:	2301      	movs	r3, #1
 8000eec:	73fb      	strb	r3, [r7, #15]
  while(len > 0) {
 8000eee:	e035      	b.n	8000f5c <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	781a      	ldrb	r2, [r3, #0]
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d00c      	beq.n	8000f18 <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	7bba      	ldrb	r2, [r7, #14]
 8000f02:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8000f06:	78ba      	ldrb	r2, [r7, #2]
 8000f08:	78f9      	ldrb	r1, [r7, #3]
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	2301      	movs	r3, #1
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f001 fa33 	bl	800237c <u8g2_DrawHVLine>
 8000f16:	e010      	b.n	8000f3a <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d10b      	bne.n	8000f3a <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	7b7a      	ldrb	r2, [r7, #13]
 8000f26:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8000f2a:	78ba      	ldrb	r2, [r7, #2]
 8000f2c:	78f9      	ldrb	r1, [r7, #3]
 8000f2e:	2300      	movs	r3, #0
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	2301      	movs	r3, #1
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f001 fa21 	bl	800237c <u8g2_DrawHVLine>
    }
    x++;
 8000f3a:	78fb      	ldrb	r3, [r7, #3]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	70fb      	strb	r3, [r7, #3]
    mask <<= 1;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	73fb      	strb	r3, [r7, #15]
    if ( mask == 0 )
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d104      	bne.n	8000f56 <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	73fb      	strb	r3, [r7, #15]
      b++;
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	3301      	adds	r3, #1
 8000f54:	61bb      	str	r3, [r7, #24]
    }
    len--;
 8000f56:	787b      	ldrb	r3, [r7, #1]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	707b      	strb	r3, [r7, #1]
  while(len > 0) {
 8000f5c:	787b      	ldrb	r3, [r7, #1]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1c6      	bne.n	8000ef0 <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	7bba      	ldrb	r2, [r7, #14]
 8000f66:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 8000f6a:	e000      	b.n	8000f6e <u8g2_DrawHXBM+0xd6>
    return;
 8000f6c:	bf00      	nop
}
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af02      	add	r7, sp, #8
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	4608      	mov	r0, r1
 8000f7e:	4611      	mov	r1, r2
 8000f80:	461a      	mov	r2, r3
 8000f82:	4603      	mov	r3, r0
 8000f84:	70fb      	strb	r3, [r7, #3]
 8000f86:	460b      	mov	r3, r1
 8000f88:	70bb      	strb	r3, [r7, #2]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t blen;
  blen = w;
 8000f8e:	787b      	ldrb	r3, [r7, #1]
 8000f90:	73fb      	strb	r3, [r7, #15]
  blen += 7;
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	3307      	adds	r3, #7
 8000f96:	73fb      	strb	r3, [r7, #15]
  blen >>= 3;
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	08db      	lsrs	r3, r3, #3
 8000f9c:	73fb      	strb	r3, [r7, #15]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8000f9e:	78fa      	ldrb	r2, [r7, #3]
 8000fa0:	787b      	ldrb	r3, [r7, #1]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	b2d8      	uxtb	r0, r3
 8000fa6:	78ba      	ldrb	r2, [r7, #2]
 8000fa8:	7e3b      	ldrb	r3, [r7, #24]
 8000faa:	4413      	add	r3, r2
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	78ba      	ldrb	r2, [r7, #2]
 8000fb0:	78f9      	ldrb	r1, [r7, #3]
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f001 fb13 	bl	80025e2 <u8g2_IsIntersection>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d017      	beq.n	8000ff2 <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8000fc2:	e012      	b.n	8000fea <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8000fc4:	7878      	ldrb	r0, [r7, #1]
 8000fc6:	78ba      	ldrb	r2, [r7, #2]
 8000fc8:	78f9      	ldrb	r1, [r7, #3]
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff ff61 	bl	8000e98 <u8g2_DrawHXBM>
    bitmap += blen;
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	69fa      	ldr	r2, [r7, #28]
 8000fda:	4413      	add	r3, r2
 8000fdc:	61fb      	str	r3, [r7, #28]
    y++;
 8000fde:	78bb      	ldrb	r3, [r7, #2]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	70bb      	strb	r3, [r7, #2]
    h--;
 8000fe4:	7e3b      	ldrb	r3, [r7, #24]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	763b      	strb	r3, [r7, #24]
  while( h > 0 )
 8000fea:	7e3b      	ldrb	r3, [r7, #24]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1e9      	bne.n	8000fc4 <u8g2_DrawXBM+0x50>
 8000ff0:	e000      	b.n	8000ff4 <u8g2_DrawXBM+0x80>
    return;
 8000ff2:	bf00      	nop
  }
}
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	af02      	add	r7, sp, #8
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	4608      	mov	r0, r1
 8001004:	4611      	mov	r1, r2
 8001006:	461a      	mov	r2, r3
 8001008:	4603      	mov	r3, r0
 800100a:	70fb      	strb	r3, [r7, #3]
 800100c:	460b      	mov	r3, r1
 800100e:	70bb      	strb	r3, [r7, #2]
 8001010:	4613      	mov	r3, r2
 8001012:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001014:	78fa      	ldrb	r2, [r7, #3]
 8001016:	787b      	ldrb	r3, [r7, #1]
 8001018:	4413      	add	r3, r2
 800101a:	b2d8      	uxtb	r0, r3
 800101c:	78ba      	ldrb	r2, [r7, #2]
 800101e:	7c3b      	ldrb	r3, [r7, #16]
 8001020:	4413      	add	r3, r2
 8001022:	b2db      	uxtb	r3, r3
 8001024:	78ba      	ldrb	r2, [r7, #2]
 8001026:	78f9      	ldrb	r1, [r7, #3]
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	4603      	mov	r3, r0
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f001 fad8 	bl	80025e2 <u8g2_IsIntersection>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d013      	beq.n	8001060 <u8g2_DrawBox+0x66>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8001038:	e00e      	b.n	8001058 <u8g2_DrawBox+0x5e>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 800103a:	7878      	ldrb	r0, [r7, #1]
 800103c:	78ba      	ldrb	r2, [r7, #2]
 800103e:	78f9      	ldrb	r1, [r7, #3]
 8001040:	2300      	movs	r3, #0
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	4603      	mov	r3, r0
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f001 f998 	bl	800237c <u8g2_DrawHVLine>
    y++;    
 800104c:	78bb      	ldrb	r3, [r7, #2]
 800104e:	3301      	adds	r3, #1
 8001050:	70bb      	strb	r3, [r7, #2]
    h--;
 8001052:	7c3b      	ldrb	r3, [r7, #16]
 8001054:	3b01      	subs	r3, #1
 8001056:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 8001058:	7c3b      	ldrb	r3, [r7, #16]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1ed      	bne.n	800103a <u8g2_DrawBox+0x40>
 800105e:	e000      	b.n	8001062 <u8g2_DrawBox+0x68>
    return;
 8001060:	bf00      	nop
  }
}
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af02      	add	r7, sp, #8
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	4608      	mov	r0, r1
 8001072:	4611      	mov	r1, r2
 8001074:	461a      	mov	r2, r3
 8001076:	4603      	mov	r3, r0
 8001078:	70fb      	strb	r3, [r7, #3]
 800107a:	460b      	mov	r3, r1
 800107c:	70bb      	strb	r3, [r7, #2]
 800107e:	4613      	mov	r3, r2
 8001080:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xtmp = x;
 8001082:	78fb      	ldrb	r3, [r7, #3]
 8001084:	73fb      	strb	r3, [r7, #15]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001086:	78fa      	ldrb	r2, [r7, #3]
 8001088:	787b      	ldrb	r3, [r7, #1]
 800108a:	4413      	add	r3, r2
 800108c:	b2d8      	uxtb	r0, r3
 800108e:	78ba      	ldrb	r2, [r7, #2]
 8001090:	7e3b      	ldrb	r3, [r7, #24]
 8001092:	4413      	add	r3, r2
 8001094:	b2db      	uxtb	r3, r3
 8001096:	78ba      	ldrb	r2, [r7, #2]
 8001098:	78f9      	ldrb	r1, [r7, #3]
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	4603      	mov	r3, r0
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f001 fa9f 	bl	80025e2 <u8g2_IsIntersection>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d03b      	beq.n	8001122 <u8g2_DrawFrame+0xba>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 80010aa:	7878      	ldrb	r0, [r7, #1]
 80010ac:	78ba      	ldrb	r2, [r7, #2]
 80010ae:	78f9      	ldrb	r1, [r7, #3]
 80010b0:	2300      	movs	r3, #0
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	4603      	mov	r3, r0
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f001 f960 	bl	800237c <u8g2_DrawHVLine>
  if (h >= 2) {
 80010bc:	7e3b      	ldrb	r3, [r7, #24]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d930      	bls.n	8001124 <u8g2_DrawFrame+0xbc>
    h-=2;
 80010c2:	7e3b      	ldrb	r3, [r7, #24]
 80010c4:	3b02      	subs	r3, #2
 80010c6:	763b      	strb	r3, [r7, #24]
    y++;
 80010c8:	78bb      	ldrb	r3, [r7, #2]
 80010ca:	3301      	adds	r3, #1
 80010cc:	70bb      	strb	r3, [r7, #2]
    if (h > 0) {
 80010ce:	7e3b      	ldrb	r3, [r7, #24]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d01c      	beq.n	800110e <u8g2_DrawFrame+0xa6>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 80010d4:	7e38      	ldrb	r0, [r7, #24]
 80010d6:	78ba      	ldrb	r2, [r7, #2]
 80010d8:	78f9      	ldrb	r1, [r7, #3]
 80010da:	2301      	movs	r3, #1
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	4603      	mov	r3, r0
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f001 f94b 	bl	800237c <u8g2_DrawHVLine>
      x+=w;
 80010e6:	78fa      	ldrb	r2, [r7, #3]
 80010e8:	787b      	ldrb	r3, [r7, #1]
 80010ea:	4413      	add	r3, r2
 80010ec:	70fb      	strb	r3, [r7, #3]
      x--;
 80010ee:	78fb      	ldrb	r3, [r7, #3]
 80010f0:	3b01      	subs	r3, #1
 80010f2:	70fb      	strb	r3, [r7, #3]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 80010f4:	7e38      	ldrb	r0, [r7, #24]
 80010f6:	78ba      	ldrb	r2, [r7, #2]
 80010f8:	78f9      	ldrb	r1, [r7, #3]
 80010fa:	2301      	movs	r3, #1
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	4603      	mov	r3, r0
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f001 f93b 	bl	800237c <u8g2_DrawHVLine>
      y+=h;
 8001106:	78ba      	ldrb	r2, [r7, #2]
 8001108:	7e3b      	ldrb	r3, [r7, #24]
 800110a:	4413      	add	r3, r2
 800110c:	70bb      	strb	r3, [r7, #2]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 800110e:	7878      	ldrb	r0, [r7, #1]
 8001110:	78ba      	ldrb	r2, [r7, #2]
 8001112:	7bf9      	ldrb	r1, [r7, #15]
 8001114:	2300      	movs	r3, #0
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	4603      	mov	r3, r0
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f001 f92e 	bl	800237c <u8g2_DrawHVLine>
 8001120:	e000      	b.n	8001124 <u8g2_DrawFrame+0xbc>
    return;
 8001122:	bf00      	nop
  }
}
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <u8g2_DrawRFrame>:
  }
}


void u8g2_DrawRFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af02      	add	r7, sp, #8
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	4608      	mov	r0, r1
 8001134:	4611      	mov	r1, r2
 8001136:	461a      	mov	r2, r3
 8001138:	4603      	mov	r3, r0
 800113a:	70fb      	strb	r3, [r7, #3]
 800113c:	460b      	mov	r3, r1
 800113e:	70bb      	strb	r3, [r7, #2]
 8001140:	4613      	mov	r3, r2
 8001142:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xl, yu;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001144:	78fa      	ldrb	r2, [r7, #3]
 8001146:	787b      	ldrb	r3, [r7, #1]
 8001148:	4413      	add	r3, r2
 800114a:	b2d8      	uxtb	r0, r3
 800114c:	78ba      	ldrb	r2, [r7, #2]
 800114e:	7e3b      	ldrb	r3, [r7, #24]
 8001150:	4413      	add	r3, r2
 8001152:	b2db      	uxtb	r3, r3
 8001154:	78ba      	ldrb	r2, [r7, #2]
 8001156:	78f9      	ldrb	r1, [r7, #3]
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	4603      	mov	r3, r0
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f001 fa40 	bl	80025e2 <u8g2_IsIntersection>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 8095 	beq.w	8001294 <u8g2_DrawRFrame+0x16a>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
 800116a:	78fb      	ldrb	r3, [r7, #3]
 800116c:	73fb      	strb	r3, [r7, #15]
  xl += r;
 800116e:	7bfa      	ldrb	r2, [r7, #15]
 8001170:	7f3b      	ldrb	r3, [r7, #28]
 8001172:	4413      	add	r3, r2
 8001174:	73fb      	strb	r3, [r7, #15]
  yu = y;
 8001176:	78bb      	ldrb	r3, [r7, #2]
 8001178:	73bb      	strb	r3, [r7, #14]
  yu += r;
 800117a:	7bba      	ldrb	r2, [r7, #14]
 800117c:	7f3b      	ldrb	r3, [r7, #28]
 800117e:	4413      	add	r3, r2
 8001180:	73bb      	strb	r3, [r7, #14]
 
  {
    u8g2_uint_t yl, xr;
      
    xr = x;
 8001182:	78fb      	ldrb	r3, [r7, #3]
 8001184:	737b      	strb	r3, [r7, #13]
    xr += w;
 8001186:	7b7a      	ldrb	r2, [r7, #13]
 8001188:	787b      	ldrb	r3, [r7, #1]
 800118a:	4413      	add	r3, r2
 800118c:	737b      	strb	r3, [r7, #13]
    xr -= r;
 800118e:	7b7a      	ldrb	r2, [r7, #13]
 8001190:	7f3b      	ldrb	r3, [r7, #28]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	737b      	strb	r3, [r7, #13]
    xr -= 1;
 8001196:	7b7b      	ldrb	r3, [r7, #13]
 8001198:	3b01      	subs	r3, #1
 800119a:	737b      	strb	r3, [r7, #13]
    
    yl = y;
 800119c:	78bb      	ldrb	r3, [r7, #2]
 800119e:	733b      	strb	r3, [r7, #12]
    yl += h;
 80011a0:	7b3a      	ldrb	r2, [r7, #12]
 80011a2:	7e3b      	ldrb	r3, [r7, #24]
 80011a4:	4413      	add	r3, r2
 80011a6:	733b      	strb	r3, [r7, #12]
    yl -= r; 
 80011a8:	7b3a      	ldrb	r2, [r7, #12]
 80011aa:	7f3b      	ldrb	r3, [r7, #28]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	733b      	strb	r3, [r7, #12]
    yl -= 1;
 80011b0:	7b3b      	ldrb	r3, [r7, #12]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	733b      	strb	r3, [r7, #12]

    u8g2_DrawCircle(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 80011b6:	7f38      	ldrb	r0, [r7, #28]
 80011b8:	7bba      	ldrb	r2, [r7, #14]
 80011ba:	7bf9      	ldrb	r1, [r7, #15]
 80011bc:	2302      	movs	r3, #2
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	4603      	mov	r3, r0
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 f9d0 	bl	8001568 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 80011c8:	7f38      	ldrb	r0, [r7, #28]
 80011ca:	7bba      	ldrb	r2, [r7, #14]
 80011cc:	7b79      	ldrb	r1, [r7, #13]
 80011ce:	2301      	movs	r3, #1
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	4603      	mov	r3, r0
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 f9c7 	bl	8001568 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 80011da:	7f38      	ldrb	r0, [r7, #28]
 80011dc:	7b3a      	ldrb	r2, [r7, #12]
 80011de:	7bf9      	ldrb	r1, [r7, #15]
 80011e0:	2304      	movs	r3, #4
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	4603      	mov	r3, r0
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f000 f9be 	bl	8001568 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 80011ec:	7f38      	ldrb	r0, [r7, #28]
 80011ee:	7b3a      	ldrb	r2, [r7, #12]
 80011f0:	7b79      	ldrb	r1, [r7, #13]
 80011f2:	2308      	movs	r3, #8
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	4603      	mov	r3, r0
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f000 f9b5 	bl	8001568 <u8g2_DrawCircle>
  }

  {
    u8g2_uint_t ww, hh;

    ww = w;
 80011fe:	787b      	ldrb	r3, [r7, #1]
 8001200:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 8001202:	7afa      	ldrb	r2, [r7, #11]
 8001204:	7f3b      	ldrb	r3, [r7, #28]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 800120a:	7afa      	ldrb	r2, [r7, #11]
 800120c:	7f3b      	ldrb	r3, [r7, #28]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	72fb      	strb	r3, [r7, #11]
    hh = h;
 8001212:	7e3b      	ldrb	r3, [r7, #24]
 8001214:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 8001216:	7aba      	ldrb	r2, [r7, #10]
 8001218:	7f3b      	ldrb	r3, [r7, #28]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 800121e:	7aba      	ldrb	r2, [r7, #10]
 8001220:	7f3b      	ldrb	r3, [r7, #28]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	72bb      	strb	r3, [r7, #10]
    
    xl++;
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	3301      	adds	r3, #1
 800122a:	73fb      	strb	r3, [r7, #15]
    yu++;
 800122c:	7bbb      	ldrb	r3, [r7, #14]
 800122e:	3301      	adds	r3, #1
 8001230:	73bb      	strb	r3, [r7, #14]
    
    if ( ww >= 3 )
 8001232:	7afb      	ldrb	r3, [r7, #11]
 8001234:	2b02      	cmp	r3, #2
 8001236:	d914      	bls.n	8001262 <u8g2_DrawRFrame+0x138>
    {
      ww -= 2;
 8001238:	7afb      	ldrb	r3, [r7, #11]
 800123a:	3b02      	subs	r3, #2
 800123c:	72fb      	strb	r3, [r7, #11]
      h--;
 800123e:	7e3b      	ldrb	r3, [r7, #24]
 8001240:	3b01      	subs	r3, #1
 8001242:	763b      	strb	r3, [r7, #24]
      u8g2_DrawHLine(u8g2, xl, y, ww);
 8001244:	7afb      	ldrb	r3, [r7, #11]
 8001246:	78ba      	ldrb	r2, [r7, #2]
 8001248:	7bf9      	ldrb	r1, [r7, #15]
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f001 f919 	bl	8002482 <u8g2_DrawHLine>
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
 8001250:	78ba      	ldrb	r2, [r7, #2]
 8001252:	7e3b      	ldrb	r3, [r7, #24]
 8001254:	4413      	add	r3, r2
 8001256:	b2da      	uxtb	r2, r3
 8001258:	7afb      	ldrb	r3, [r7, #11]
 800125a:	7bf9      	ldrb	r1, [r7, #15]
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f001 f910 	bl	8002482 <u8g2_DrawHLine>
    }
    
    if ( hh >= 3 )
 8001262:	7abb      	ldrb	r3, [r7, #10]
 8001264:	2b02      	cmp	r3, #2
 8001266:	d916      	bls.n	8001296 <u8g2_DrawRFrame+0x16c>
    {
      hh -= 2;
 8001268:	7abb      	ldrb	r3, [r7, #10]
 800126a:	3b02      	subs	r3, #2
 800126c:	72bb      	strb	r3, [r7, #10]
      w--;
 800126e:	787b      	ldrb	r3, [r7, #1]
 8001270:	3b01      	subs	r3, #1
 8001272:	707b      	strb	r3, [r7, #1]
      u8g2_DrawVLine(u8g2, x, yu, hh);
 8001274:	7abb      	ldrb	r3, [r7, #10]
 8001276:	7bba      	ldrb	r2, [r7, #14]
 8001278:	78f9      	ldrb	r1, [r7, #3]
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f001 f91b 	bl	80024b6 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x+w, yu, hh);
 8001280:	78fa      	ldrb	r2, [r7, #3]
 8001282:	787b      	ldrb	r3, [r7, #1]
 8001284:	4413      	add	r3, r2
 8001286:	b2d9      	uxtb	r1, r3
 8001288:	7abb      	ldrb	r3, [r7, #10]
 800128a:	7bba      	ldrb	r2, [r7, #14]
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f001 f912 	bl	80024b6 <u8g2_DrawVLine>
 8001292:	e000      	b.n	8001296 <u8g2_DrawRFrame+0x16c>
    return;
 8001294:	bf00      	nop
    }
  }
}
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	7c1b      	ldrb	r3, [r3, #16]
 80012aa:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80012b2:	461a      	mov	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	fb02 f303 	mul.w	r3, r2, r3
 80012ba:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f010 fcdb 	bl	8011c86 <memset>
}
 80012d0:	bf00      	nop
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af02      	add	r7, sp, #8
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	70fb      	strb	r3, [r7, #3]
 80012e4:	4613      	mov	r3, r2
 80012e6:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	7c1b      	ldrb	r3, [r3, #16]
 80012ee:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 80012f0:	78fb      	ldrb	r3, [r7, #3]
 80012f2:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f8:	60bb      	str	r3, [r7, #8]
  offset *= w;
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	89ba      	ldrh	r2, [r7, #12]
 8001300:	fb02 f303 	mul.w	r3, r2, r3
 8001304:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8001306:	89bb      	ldrh	r3, [r7, #12]
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 800130c:	89bb      	ldrh	r3, [r7, #12]
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	4413      	add	r3, r2
 8001312:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001314:	7bf9      	ldrb	r1, [r7, #15]
 8001316:	78ba      	ldrb	r2, [r7, #2]
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	460b      	mov	r3, r1
 800131e:	2100      	movs	r1, #0
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f001 ff7f 	bl	8003224 <u8x8_DrawTile>
}
 8001326:	bf00      	nop
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b084      	sub	sp, #16
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001340:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001348:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	7c5b      	ldrb	r3, [r3, #17]
 8001350:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001352:	7bba      	ldrb	r2, [r7, #14]
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	4619      	mov	r1, r3
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ffbd 	bl	80012d8 <u8g2_send_tile_row>
    src_row++;
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	3301      	adds	r3, #1
 8001362:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8001364:	7bbb      	ldrb	r3, [r7, #14]
 8001366:	3301      	adds	r3, #1
 8001368:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 800136a:	7bfa      	ldrb	r2, [r7, #15]
 800136c:	7b7b      	ldrb	r3, [r7, #13]
 800136e:	429a      	cmp	r2, r3
 8001370:	d203      	bcs.n	800137a <u8g2_send_buffer+0x4c>
 8001372:	7bba      	ldrb	r2, [r7, #14]
 8001374:	7b3b      	ldrb	r3, [r7, #12]
 8001376:	429a      	cmp	r2, r3
 8001378:	d3eb      	bcc.n	8001352 <u8g2_send_buffer+0x24>
}
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ffcf 	bl	800132e <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f001 ff98 	bl	80032c6 <u8x8_RefreshDisplay>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <u8g2_draw_circle_section>:
/* Circle */

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
 80013a6:	4608      	mov	r0, r1
 80013a8:	4611      	mov	r1, r2
 80013aa:	461a      	mov	r2, r3
 80013ac:	4603      	mov	r3, r0
 80013ae:	70fb      	strb	r3, [r7, #3]
 80013b0:	460b      	mov	r3, r1
 80013b2:	70bb      	strb	r3, [r7, #2]
 80013b4:	4613      	mov	r3, r2
 80013b6:	707b      	strb	r3, [r7, #1]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 80013b8:	7d3b      	ldrb	r3, [r7, #20]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d017      	beq.n	80013f2 <u8g2_draw_circle_section+0x54>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
 80013c2:	787a      	ldrb	r2, [r7, #1]
 80013c4:	78fb      	ldrb	r3, [r7, #3]
 80013c6:	4413      	add	r3, r2
 80013c8:	b2d9      	uxtb	r1, r3
 80013ca:	7c3a      	ldrb	r2, [r7, #16]
 80013cc:	78bb      	ldrb	r3, [r7, #2]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	461a      	mov	r2, r3
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f001 f888 	bl	80024ea <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
 80013da:	787a      	ldrb	r2, [r7, #1]
 80013dc:	78bb      	ldrb	r3, [r7, #2]
 80013de:	4413      	add	r3, r2
 80013e0:	b2d9      	uxtb	r1, r3
 80013e2:	7c3a      	ldrb	r2, [r7, #16]
 80013e4:	78fb      	ldrb	r3, [r7, #3]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	461a      	mov	r2, r3
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f001 f87c 	bl	80024ea <u8g2_DrawPixel>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 80013f2:	7d3b      	ldrb	r3, [r7, #20]
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d017      	beq.n	800142c <u8g2_draw_circle_section+0x8e>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
 80013fc:	787a      	ldrb	r2, [r7, #1]
 80013fe:	78fb      	ldrb	r3, [r7, #3]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	b2d9      	uxtb	r1, r3
 8001404:	7c3a      	ldrb	r2, [r7, #16]
 8001406:	78bb      	ldrb	r3, [r7, #2]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	b2db      	uxtb	r3, r3
 800140c:	461a      	mov	r2, r3
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f001 f86b 	bl	80024ea <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
 8001414:	787a      	ldrb	r2, [r7, #1]
 8001416:	78bb      	ldrb	r3, [r7, #2]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	b2d9      	uxtb	r1, r3
 800141c:	7c3a      	ldrb	r2, [r7, #16]
 800141e:	78fb      	ldrb	r3, [r7, #3]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	b2db      	uxtb	r3, r3
 8001424:	461a      	mov	r2, r3
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f001 f85f 	bl	80024ea <u8g2_DrawPixel>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 800142c:	7d3b      	ldrb	r3, [r7, #20]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d017      	beq.n	8001466 <u8g2_draw_circle_section+0xc8>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
 8001436:	787a      	ldrb	r2, [r7, #1]
 8001438:	78fb      	ldrb	r3, [r7, #3]
 800143a:	4413      	add	r3, r2
 800143c:	b2d9      	uxtb	r1, r3
 800143e:	7c3a      	ldrb	r2, [r7, #16]
 8001440:	78bb      	ldrb	r3, [r7, #2]
 8001442:	4413      	add	r3, r2
 8001444:	b2db      	uxtb	r3, r3
 8001446:	461a      	mov	r2, r3
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f001 f84e 	bl	80024ea <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
 800144e:	787a      	ldrb	r2, [r7, #1]
 8001450:	78bb      	ldrb	r3, [r7, #2]
 8001452:	4413      	add	r3, r2
 8001454:	b2d9      	uxtb	r1, r3
 8001456:	7c3a      	ldrb	r2, [r7, #16]
 8001458:	78fb      	ldrb	r3, [r7, #3]
 800145a:	4413      	add	r3, r2
 800145c:	b2db      	uxtb	r3, r3
 800145e:	461a      	mov	r2, r3
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f001 f842 	bl	80024ea <u8g2_DrawPixel>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 8001466:	7d3b      	ldrb	r3, [r7, #20]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	d017      	beq.n	80014a0 <u8g2_draw_circle_section+0x102>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
 8001470:	787a      	ldrb	r2, [r7, #1]
 8001472:	78fb      	ldrb	r3, [r7, #3]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	b2d9      	uxtb	r1, r3
 8001478:	7c3a      	ldrb	r2, [r7, #16]
 800147a:	78bb      	ldrb	r3, [r7, #2]
 800147c:	4413      	add	r3, r2
 800147e:	b2db      	uxtb	r3, r3
 8001480:	461a      	mov	r2, r3
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f001 f831 	bl	80024ea <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
 8001488:	787a      	ldrb	r2, [r7, #1]
 800148a:	78bb      	ldrb	r3, [r7, #2]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	b2d9      	uxtb	r1, r3
 8001490:	7c3a      	ldrb	r2, [r7, #16]
 8001492:	78fb      	ldrb	r3, [r7, #3]
 8001494:	4413      	add	r3, r2
 8001496:	b2db      	uxtb	r3, r3
 8001498:	461a      	mov	r2, r3
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f001 f825 	bl	80024ea <u8g2_DrawPixel>
    }
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <u8g2_draw_circle>:

static void u8g2_draw_circle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af02      	add	r7, sp, #8
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	4608      	mov	r0, r1
 80014b2:	4611      	mov	r1, r2
 80014b4:	461a      	mov	r2, r3
 80014b6:	4603      	mov	r3, r0
 80014b8:	70fb      	strb	r3, [r7, #3]
 80014ba:	460b      	mov	r3, r1
 80014bc:	70bb      	strb	r3, [r7, #2]
 80014be:	4613      	mov	r3, r2
 80014c0:	707b      	strb	r3, [r7, #1]
    u8g2_int_t ddF_x;
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
 80014c2:	2301      	movs	r3, #1
 80014c4:	73fb      	strb	r3, [r7, #15]
    f -= rad;
 80014c6:	7bfa      	ldrb	r2, [r7, #15]
 80014c8:	787b      	ldrb	r3, [r7, #1]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	73fb      	strb	r3, [r7, #15]
    ddF_x = 1;
 80014d0:	2301      	movs	r3, #1
 80014d2:	73bb      	strb	r3, [r7, #14]
    ddF_y = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	737b      	strb	r3, [r7, #13]
    ddF_y -= rad;
 80014d8:	7b7a      	ldrb	r2, [r7, #13]
 80014da:	787b      	ldrb	r3, [r7, #1]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	737b      	strb	r3, [r7, #13]
    ddF_y *= 2;
 80014e2:	7b7b      	ldrb	r3, [r7, #13]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	737b      	strb	r3, [r7, #13]
    x = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	733b      	strb	r3, [r7, #12]
    y = rad;
 80014ee:	787b      	ldrb	r3, [r7, #1]
 80014f0:	72fb      	strb	r3, [r7, #11]

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
 80014f2:	78f8      	ldrb	r0, [r7, #3]
 80014f4:	7afa      	ldrb	r2, [r7, #11]
 80014f6:	7b39      	ldrb	r1, [r7, #12]
 80014f8:	7e3b      	ldrb	r3, [r7, #24]
 80014fa:	9301      	str	r3, [sp, #4]
 80014fc:	78bb      	ldrb	r3, [r7, #2]
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	4603      	mov	r3, r0
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff ff4b 	bl	800139e <u8g2_draw_circle_section>
    
    while ( x < y )
 8001508:	e026      	b.n	8001558 <u8g2_draw_circle+0xb0>
    {
      if (f >= 0) 
 800150a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150e:	2b00      	cmp	r3, #0
 8001510:	db0b      	blt.n	800152a <u8g2_draw_circle+0x82>
      {
        y--;
 8001512:	7afb      	ldrb	r3, [r7, #11]
 8001514:	3b01      	subs	r3, #1
 8001516:	72fb      	strb	r3, [r7, #11]
        ddF_y += 2;
 8001518:	7b7b      	ldrb	r3, [r7, #13]
 800151a:	3302      	adds	r3, #2
 800151c:	b2db      	uxtb	r3, r3
 800151e:	737b      	strb	r3, [r7, #13]
        f += ddF_y;
 8001520:	7bfa      	ldrb	r2, [r7, #15]
 8001522:	7b7b      	ldrb	r3, [r7, #13]
 8001524:	4413      	add	r3, r2
 8001526:	b2db      	uxtb	r3, r3
 8001528:	73fb      	strb	r3, [r7, #15]
      }
      x++;
 800152a:	7b3b      	ldrb	r3, [r7, #12]
 800152c:	3301      	adds	r3, #1
 800152e:	733b      	strb	r3, [r7, #12]
      ddF_x += 2;
 8001530:	7bbb      	ldrb	r3, [r7, #14]
 8001532:	3302      	adds	r3, #2
 8001534:	b2db      	uxtb	r3, r3
 8001536:	73bb      	strb	r3, [r7, #14]
      f += ddF_x;
 8001538:	7bfa      	ldrb	r2, [r7, #15]
 800153a:	7bbb      	ldrb	r3, [r7, #14]
 800153c:	4413      	add	r3, r2
 800153e:	b2db      	uxtb	r3, r3
 8001540:	73fb      	strb	r3, [r7, #15]

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
 8001542:	78f8      	ldrb	r0, [r7, #3]
 8001544:	7afa      	ldrb	r2, [r7, #11]
 8001546:	7b39      	ldrb	r1, [r7, #12]
 8001548:	7e3b      	ldrb	r3, [r7, #24]
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	78bb      	ldrb	r3, [r7, #2]
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	4603      	mov	r3, r0
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff ff23 	bl	800139e <u8g2_draw_circle_section>
    while ( x < y )
 8001558:	7b3a      	ldrb	r2, [r7, #12]
 800155a:	7afb      	ldrb	r3, [r7, #11]
 800155c:	429a      	cmp	r2, r3
 800155e:	d3d4      	bcc.n	800150a <u8g2_draw_circle+0x62>
    }
}
 8001560:	bf00      	nop
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <u8g2_DrawCircle>:

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b085      	sub	sp, #20
 800156c:	af02      	add	r7, sp, #8
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	4608      	mov	r0, r1
 8001572:	4611      	mov	r1, r2
 8001574:	461a      	mov	r2, r3
 8001576:	4603      	mov	r3, r0
 8001578:	70fb      	strb	r3, [r7, #3]
 800157a:	460b      	mov	r3, r1
 800157c:	70bb      	strb	r3, [r7, #2]
 800157e:	4613      	mov	r3, r2
 8001580:	707b      	strb	r3, [r7, #1]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 8001582:	78fa      	ldrb	r2, [r7, #3]
 8001584:	787b      	ldrb	r3, [r7, #1]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	b2d9      	uxtb	r1, r3
 800158a:	78ba      	ldrb	r2, [r7, #2]
 800158c:	787b      	ldrb	r3, [r7, #1]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	b2d8      	uxtb	r0, r3
 8001592:	78fa      	ldrb	r2, [r7, #3]
 8001594:	787b      	ldrb	r3, [r7, #1]
 8001596:	4413      	add	r3, r2
 8001598:	b2db      	uxtb	r3, r3
 800159a:	3301      	adds	r3, #1
 800159c:	b2dc      	uxtb	r4, r3
 800159e:	78ba      	ldrb	r2, [r7, #2]
 80015a0:	787b      	ldrb	r3, [r7, #1]
 80015a2:	4413      	add	r3, r2
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	3301      	adds	r3, #1
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	4623      	mov	r3, r4
 80015ae:	4602      	mov	r2, r0
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f001 f816 	bl	80025e2 <u8g2_IsIntersection>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d009      	beq.n	80015d0 <u8g2_DrawCircle+0x68>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
 80015bc:	7878      	ldrb	r0, [r7, #1]
 80015be:	78ba      	ldrb	r2, [r7, #2]
 80015c0:	78f9      	ldrb	r1, [r7, #3]
 80015c2:	7e3b      	ldrb	r3, [r7, #24]
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	4603      	mov	r3, r0
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff ff6d 	bl	80014a8 <u8g2_draw_circle>
 80015ce:	e000      	b.n	80015d2 <u8g2_DrawCircle+0x6a>
      return;
 80015d0:	bf00      	nop
}
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd90      	pop	{r4, r7, pc}

080015d8 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2208      	movs	r2, #8
 80015e4:	701a      	strb	r2, [r3, #0]
  return buf;
 80015e6:	4b03      	ldr	r3, [pc, #12]	; (80015f4 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	200002a4 	.word	0x200002a4

080015f8 <u8g2_Setup_st7565_nhd_c12864_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_erc12864_alt, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_nhd_c12864_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_nhd_c12864, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a0b      	ldr	r2, [pc, #44]	; (800163c <u8g2_Setup_st7565_nhd_c12864_f+0x44>)
 800160e:	490c      	ldr	r1, [pc, #48]	; (8001640 <u8g2_Setup_st7565_nhd_c12864_f+0x48>)
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f001 feb7 	bl	8003384 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8001616:	f107 0313 	add.w	r3, r7, #19
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff ffdc 	bl	80015d8 <u8g2_m_16_8_f>
 8001620:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8001622:	7cfa      	ldrb	r2, [r7, #19]
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <u8g2_Setup_st7565_nhd_c12864_f+0x4c>)
 800162a:	6979      	ldr	r1, [r7, #20]
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	f001 f8c0 	bl	80027b2 <u8g2_SetupBuffer>
}
 8001632:	bf00      	nop
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	08002f49 	.word	0x08002f49
 8001640:	080030e5 	.word	0x080030e5
 8001644:	08002639 	.word	0x08002639

08001648 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8001654:	78fb      	ldrb	r3, [r7, #3]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	781b      	ldrb	r3, [r3, #0]
}
 8001660:	4618      	mov	r0, r3
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr

0800166a <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 800166a:	b480      	push	{r7}
 800166c:	b085      	sub	sp, #20
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	460b      	mov	r3, r1
 8001674:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8001676:	78fb      	ldrb	r3, [r7, #3]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	4413      	add	r3, r2
 800167c:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	81fb      	strh	r3, [r7, #14]
    font++;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3301      	adds	r3, #1
 8001688:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800168a:	89fb      	ldrh	r3, [r7, #14]
 800168c:	021b      	lsls	r3, r3, #8
 800168e:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	b29a      	uxth	r2, r3
 8001696:	89fb      	ldrh	r3, [r7, #14]
 8001698:	4413      	add	r3, r2
 800169a:	81fb      	strh	r3, [r7, #14]
    return pos;
 800169c:	89fb      	ldrh	r3, [r7, #14]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr

080016a8 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80016b2:	2100      	movs	r1, #0
 80016b4:	6838      	ldr	r0, [r7, #0]
 80016b6:	f7ff ffc7 	bl	8001648 <u8g2_font_get_byte>
 80016ba:	4603      	mov	r3, r0
 80016bc:	461a      	mov	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80016c2:	2101      	movs	r1, #1
 80016c4:	6838      	ldr	r0, [r7, #0]
 80016c6:	f7ff ffbf 	bl	8001648 <u8g2_font_get_byte>
 80016ca:	4603      	mov	r3, r0
 80016cc:	461a      	mov	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80016d2:	2102      	movs	r1, #2
 80016d4:	6838      	ldr	r0, [r7, #0]
 80016d6:	f7ff ffb7 	bl	8001648 <u8g2_font_get_byte>
 80016da:	4603      	mov	r3, r0
 80016dc:	461a      	mov	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80016e2:	2103      	movs	r1, #3
 80016e4:	6838      	ldr	r0, [r7, #0]
 80016e6:	f7ff ffaf 	bl	8001648 <u8g2_font_get_byte>
 80016ea:	4603      	mov	r3, r0
 80016ec:	461a      	mov	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80016f2:	2104      	movs	r1, #4
 80016f4:	6838      	ldr	r0, [r7, #0]
 80016f6:	f7ff ffa7 	bl	8001648 <u8g2_font_get_byte>
 80016fa:	4603      	mov	r3, r0
 80016fc:	461a      	mov	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8001702:	2105      	movs	r1, #5
 8001704:	6838      	ldr	r0, [r7, #0]
 8001706:	f7ff ff9f 	bl	8001648 <u8g2_font_get_byte>
 800170a:	4603      	mov	r3, r0
 800170c:	461a      	mov	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8001712:	2106      	movs	r1, #6
 8001714:	6838      	ldr	r0, [r7, #0]
 8001716:	f7ff ff97 	bl	8001648 <u8g2_font_get_byte>
 800171a:	4603      	mov	r3, r0
 800171c:	461a      	mov	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8001722:	2107      	movs	r1, #7
 8001724:	6838      	ldr	r0, [r7, #0]
 8001726:	f7ff ff8f 	bl	8001648 <u8g2_font_get_byte>
 800172a:	4603      	mov	r3, r0
 800172c:	461a      	mov	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8001732:	2108      	movs	r1, #8
 8001734:	6838      	ldr	r0, [r7, #0]
 8001736:	f7ff ff87 	bl	8001648 <u8g2_font_get_byte>
 800173a:	4603      	mov	r3, r0
 800173c:	461a      	mov	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8001742:	2109      	movs	r1, #9
 8001744:	6838      	ldr	r0, [r7, #0]
 8001746:	f7ff ff7f 	bl	8001648 <u8g2_font_get_byte>
 800174a:	4603      	mov	r3, r0
 800174c:	b25a      	sxtb	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8001752:	210a      	movs	r1, #10
 8001754:	6838      	ldr	r0, [r7, #0]
 8001756:	f7ff ff77 	bl	8001648 <u8g2_font_get_byte>
 800175a:	4603      	mov	r3, r0
 800175c:	b25a      	sxtb	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8001762:	210b      	movs	r1, #11
 8001764:	6838      	ldr	r0, [r7, #0]
 8001766:	f7ff ff6f 	bl	8001648 <u8g2_font_get_byte>
 800176a:	4603      	mov	r3, r0
 800176c:	b25a      	sxtb	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8001772:	210c      	movs	r1, #12
 8001774:	6838      	ldr	r0, [r7, #0]
 8001776:	f7ff ff67 	bl	8001648 <u8g2_font_get_byte>
 800177a:	4603      	mov	r3, r0
 800177c:	b25a      	sxtb	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8001782:	210d      	movs	r1, #13
 8001784:	6838      	ldr	r0, [r7, #0]
 8001786:	f7ff ff5f 	bl	8001648 <u8g2_font_get_byte>
 800178a:	4603      	mov	r3, r0
 800178c:	b25a      	sxtb	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8001792:	210e      	movs	r1, #14
 8001794:	6838      	ldr	r0, [r7, #0]
 8001796:	f7ff ff57 	bl	8001648 <u8g2_font_get_byte>
 800179a:	4603      	mov	r3, r0
 800179c:	b25a      	sxtb	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80017a2:	210f      	movs	r1, #15
 80017a4:	6838      	ldr	r0, [r7, #0]
 80017a6:	f7ff ff4f 	bl	8001648 <u8g2_font_get_byte>
 80017aa:	4603      	mov	r3, r0
 80017ac:	b25a      	sxtb	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80017b2:	2110      	movs	r1, #16
 80017b4:	6838      	ldr	r0, [r7, #0]
 80017b6:	f7ff ff47 	bl	8001648 <u8g2_font_get_byte>
 80017ba:	4603      	mov	r3, r0
 80017bc:	b25a      	sxtb	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80017c2:	2111      	movs	r1, #17
 80017c4:	6838      	ldr	r0, [r7, #0]
 80017c6:	f7ff ff50 	bl	800166a <u8g2_font_get_word>
 80017ca:	4603      	mov	r3, r0
 80017cc:	461a      	mov	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80017d2:	2113      	movs	r1, #19
 80017d4:	6838      	ldr	r0, [r7, #0]
 80017d6:	f7ff ff48 	bl	800166a <u8g2_font_get_word>
 80017da:	4603      	mov	r3, r0
 80017dc:	461a      	mov	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80017e2:	2115      	movs	r1, #21
 80017e4:	6838      	ldr	r0, [r7, #0]
 80017e6:	f7ff ff40 	bl	800166a <u8g2_font_get_word>
 80017ea:	4603      	mov	r3, r0
 80017ec:	461a      	mov	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	82da      	strh	r2, [r3, #22]
#endif
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80017fa:	b480      	push	{r7}
 80017fc:	b085      	sub	sp, #20
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	460b      	mov	r3, r1
 8001804:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	7a9b      	ldrb	r3, [r3, #10]
 800180a:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8001814:	7bfa      	ldrb	r2, [r7, #15]
 8001816:	7b7b      	ldrb	r3, [r7, #13]
 8001818:	fa42 f303 	asr.w	r3, r2, r3
 800181c:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 800181e:	7b7b      	ldrb	r3, [r7, #13]
 8001820:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8001822:	7bba      	ldrb	r2, [r7, #14]
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	4413      	add	r3, r2
 8001828:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 800182a:	7bbb      	ldrb	r3, [r7, #14]
 800182c:	2b07      	cmp	r3, #7
 800182e:	d91a      	bls.n	8001866 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8001830:	2308      	movs	r3, #8
 8001832:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8001834:	7b3a      	ldrb	r2, [r7, #12]
 8001836:	7b7b      	ldrb	r3, [r7, #13]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	7b3b      	ldrb	r3, [r7, #12]
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	b25a      	sxtb	r2, r3
 8001856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185a:	4313      	orrs	r3, r2
 800185c:	b25b      	sxtb	r3, r3
 800185e:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8001860:	7bbb      	ldrb	r3, [r7, #14]
 8001862:	3b08      	subs	r3, #8
 8001864:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8001866:	78fb      	ldrb	r3, [r7, #3]
 8001868:	f04f 32ff 	mov.w	r2, #4294967295
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	b2db      	uxtb	r3, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	b2da      	uxtb	r2, r3
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	4013      	ands	r3, r2
 800187a:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	7bba      	ldrb	r2, [r7, #14]
 8001880:	729a      	strb	r2, [r3, #10]
  return val;
 8001882:	7bfb      	ldrb	r3, [r7, #15]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr

0800188e <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b084      	sub	sp, #16
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	460b      	mov	r3, r1
 8001898:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 800189a:	78fb      	ldrb	r3, [r7, #3]
 800189c:	4619      	mov	r1, r3
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ffab 	bl	80017fa <u8g2_font_decode_get_unsigned_bits>
 80018a4:	4603      	mov	r3, r0
 80018a6:	73fb      	strb	r3, [r7, #15]
  d = 1;
 80018a8:	2301      	movs	r3, #1
 80018aa:	73bb      	strb	r3, [r7, #14]
  cnt--;
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80018b2:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80018b6:	78fb      	ldrb	r3, [r7, #3]
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80018be:	7bfa      	ldrb	r2, [r7, #15]
 80018c0:	7bbb      	ldrb	r3, [r7, #14]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	73fb      	strb	r3, [r7, #15]
  return v;
 80018c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 80018d4:	b490      	push	{r4, r7}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4604      	mov	r4, r0
 80018dc:	4608      	mov	r0, r1
 80018de:	4611      	mov	r1, r2
 80018e0:	461a      	mov	r2, r3
 80018e2:	4623      	mov	r3, r4
 80018e4:	71fb      	strb	r3, [r7, #7]
 80018e6:	4603      	mov	r3, r0
 80018e8:	71bb      	strb	r3, [r7, #6]
 80018ea:	460b      	mov	r3, r1
 80018ec:	717b      	strb	r3, [r7, #5]
 80018ee:	4613      	mov	r3, r2
 80018f0:	713b      	strb	r3, [r7, #4]
  switch(dir)
 80018f2:	793b      	ldrb	r3, [r7, #4]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d008      	beq.n	800190a <u8g2_add_vector_y+0x36>
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d00b      	beq.n	8001914 <u8g2_add_vector_y+0x40>
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10e      	bne.n	800191e <u8g2_add_vector_y+0x4a>
  {
    case 0:
      dy += y;
 8001900:	797a      	ldrb	r2, [r7, #5]
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	4413      	add	r3, r2
 8001906:	71fb      	strb	r3, [r7, #7]
      break;
 8001908:	e00e      	b.n	8001928 <u8g2_add_vector_y+0x54>
    case 1:
      dy += x;
 800190a:	79ba      	ldrb	r2, [r7, #6]
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	4413      	add	r3, r2
 8001910:	71fb      	strb	r3, [r7, #7]
      break;
 8001912:	e009      	b.n	8001928 <u8g2_add_vector_y+0x54>
    case 2:
      dy -= y;
 8001914:	797b      	ldrb	r3, [r7, #5]
 8001916:	79fa      	ldrb	r2, [r7, #7]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	71fb      	strb	r3, [r7, #7]
      break;
 800191c:	e004      	b.n	8001928 <u8g2_add_vector_y+0x54>
    default:
      dy -= x;
 800191e:	79bb      	ldrb	r3, [r7, #6]
 8001920:	79fa      	ldrb	r2, [r7, #7]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	71fb      	strb	r3, [r7, #7]
      break;      
 8001926:	bf00      	nop
  }
  return dy;
 8001928:	79fb      	ldrb	r3, [r7, #7]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bc90      	pop	{r4, r7}
 8001932:	4770      	bx	lr

08001934 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8001934:	b490      	push	{r4, r7}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	4604      	mov	r4, r0
 800193c:	4608      	mov	r0, r1
 800193e:	4611      	mov	r1, r2
 8001940:	461a      	mov	r2, r3
 8001942:	4623      	mov	r3, r4
 8001944:	71fb      	strb	r3, [r7, #7]
 8001946:	4603      	mov	r3, r0
 8001948:	71bb      	strb	r3, [r7, #6]
 800194a:	460b      	mov	r3, r1
 800194c:	717b      	strb	r3, [r7, #5]
 800194e:	4613      	mov	r3, r2
 8001950:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8001952:	793b      	ldrb	r3, [r7, #4]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d008      	beq.n	800196a <u8g2_add_vector_x+0x36>
 8001958:	2b02      	cmp	r3, #2
 800195a:	d00b      	beq.n	8001974 <u8g2_add_vector_x+0x40>
 800195c:	2b00      	cmp	r3, #0
 800195e:	d10e      	bne.n	800197e <u8g2_add_vector_x+0x4a>
  {
    case 0:
      dx += x;
 8001960:	79ba      	ldrb	r2, [r7, #6]
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	4413      	add	r3, r2
 8001966:	71fb      	strb	r3, [r7, #7]
      break;
 8001968:	e00e      	b.n	8001988 <u8g2_add_vector_x+0x54>
    case 1:
      dx -= y;
 800196a:	797b      	ldrb	r3, [r7, #5]
 800196c:	79fa      	ldrb	r2, [r7, #7]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	71fb      	strb	r3, [r7, #7]
      break;
 8001972:	e009      	b.n	8001988 <u8g2_add_vector_x+0x54>
    case 2:
      dx -= x;
 8001974:	79bb      	ldrb	r3, [r7, #6]
 8001976:	79fa      	ldrb	r2, [r7, #7]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	71fb      	strb	r3, [r7, #7]
      break;
 800197c:	e004      	b.n	8001988 <u8g2_add_vector_x+0x54>
    default:
      dx += y;
 800197e:	797a      	ldrb	r2, [r7, #5]
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	4413      	add	r3, r2
 8001984:	71fb      	strb	r3, [r7, #7]
      break;      
 8001986:	bf00      	nop
  }
  return dx;
 8001988:	79fb      	ldrb	r3, [r7, #7]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bc90      	pop	{r4, r7}
 8001992:	4770      	bx	lr

08001994 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af02      	add	r7, sp, #8
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	70fb      	strb	r3, [r7, #3]
 80019a0:	4613      	mov	r3, r2
 80019a2:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3354      	adds	r3, #84	; 0x54
 80019a8:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80019aa:	78fb      	ldrb	r3, [r7, #3]
 80019ac:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80019b4:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80019bc:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80019c4:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80019c6:	7bfa      	ldrb	r2, [r7, #15]
 80019c8:	7d7b      	ldrb	r3, [r7, #21]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80019d2:	7dfa      	ldrb	r2, [r7, #23]
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d201      	bcs.n	80019de <u8g2_font_decode_len+0x4a>
      current = cnt;
 80019da:	7dfb      	ldrb	r3, [r7, #23]
 80019dc:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	791b      	ldrb	r3, [r3, #4]
 80019e2:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	795b      	ldrb	r3, [r3, #5]
 80019e8:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80019ea:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80019ee:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	7b9b      	ldrb	r3, [r3, #14]
 80019f6:	7bb8      	ldrb	r0, [r7, #14]
 80019f8:	f7ff ff9c 	bl	8001934 <u8g2_add_vector_x>
 80019fc:	4603      	mov	r3, r0
 80019fe:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8001a00:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001a04:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	7b9b      	ldrb	r3, [r3, #14]
 8001a0c:	7b78      	ldrb	r0, [r7, #13]
 8001a0e:	f7ff ff61 	bl	80018d4 <u8g2_add_vector_y>
 8001a12:	4603      	mov	r3, r0
 8001a14:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8001a16:	78bb      	ldrb	r3, [r7, #2]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00f      	beq.n	8001a3c <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	7b1a      	ldrb	r2, [r3, #12]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	7b9b      	ldrb	r3, [r3, #14]
 8001a2a:	7db8      	ldrb	r0, [r7, #22]
 8001a2c:	7b7a      	ldrb	r2, [r7, #13]
 8001a2e:	7bb9      	ldrb	r1, [r7, #14]
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	4603      	mov	r3, r0
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 fca1 	bl	800237c <u8g2_DrawHVLine>
 8001a3a:	e012      	b.n	8001a62 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	7adb      	ldrb	r3, [r3, #11]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d10e      	bne.n	8001a62 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	7b5a      	ldrb	r2, [r3, #13]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      u8g2_DrawHVLine(u8g2, 
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	7b9b      	ldrb	r3, [r3, #14]
 8001a52:	7db8      	ldrb	r0, [r7, #22]
 8001a54:	7b7a      	ldrb	r2, [r7, #13]
 8001a56:	7bb9      	ldrb	r1, [r7, #14]
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 fc8d 	bl	800237c <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8001a62:	7dfa      	ldrb	r2, [r7, #23]
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d309      	bcc.n	8001a7e <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8001a6a:	7dfa      	ldrb	r2, [r7, #23]
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	757b      	strb	r3, [r7, #21]
    ly++;
 8001a76:	7d3b      	ldrb	r3, [r7, #20]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8001a7c:	e79f      	b.n	80019be <u8g2_font_decode_len+0x2a>
      break;
 8001a7e:	bf00      	nop
  }
  lx += cnt;
 8001a80:	7d7a      	ldrb	r2, [r7, #21]
 8001a82:	7dfb      	ldrb	r3, [r7, #23]
 8001a84:	4413      	add	r3, r2
 8001a86:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001a88:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8001a90:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	71da      	strb	r2, [r3, #7]
  
}
 8001a98:	bf00      	nop
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3354      	adds	r3, #84	; 0x54
 8001aae:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f7ff fe98 	bl	80017fa <u8g2_font_decode_get_unsigned_bits>
 8001aca:	4603      	mov	r3, r0
 8001acc:	b25a      	sxtb	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001ad8:	4619      	mov	r1, r3
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f7ff fe8d 	bl	80017fa <u8g2_font_decode_get_unsigned_bits>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	b25a      	sxtb	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	7b1b      	ldrb	r3, [r3, #12]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	bf0c      	ite	eq
 8001afa:	2301      	moveq	r3, #1
 8001afc:	2300      	movne	r3, #0
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	461a      	mov	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	735a      	strb	r2, [r3, #13]
}
 8001b06:	bf00      	nop
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af02      	add	r7, sp, #8
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3354      	adds	r3, #84	; 0x54
 8001b1e:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8001b20:	6839      	ldr	r1, [r7, #0]
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ffbc 	bl	8001aa0 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001b2e:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8001b36:	4619      	mov	r1, r3
 8001b38:	6938      	ldr	r0, [r7, #16]
 8001b3a:	f7ff fea8 	bl	800188e <u8g2_font_decode_get_signed_bits>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001b48:	4619      	mov	r1, r3
 8001b4a:	6938      	ldr	r0, [r7, #16]
 8001b4c:	f7ff fe9f 	bl	800188e <u8g2_font_decode_get_signed_bits>
 8001b50:	4603      	mov	r3, r0
 8001b52:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	6938      	ldr	r0, [r7, #16]
 8001b5e:	f7ff fe96 	bl	800188e <u8g2_font_decode_get_signed_bits>
 8001b62:	4603      	mov	r3, r0
 8001b64:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f340 80cf 	ble.w	8001d10 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	7918      	ldrb	r0, [r3, #4]
 8001b76:	7bfa      	ldrb	r2, [r7, #15]
 8001b78:	7b7b      	ldrb	r3, [r7, #13]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	425b      	negs	r3, r3
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	b25a      	sxtb	r2, r3
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	7b9b      	ldrb	r3, [r3, #14]
 8001b88:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001b8c:	f7ff fed2 	bl	8001934 <u8g2_add_vector_x>
 8001b90:	4603      	mov	r3, r0
 8001b92:	461a      	mov	r2, r3
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	7958      	ldrb	r0, [r3, #5]
 8001b9c:	7bfa      	ldrb	r2, [r7, #15]
 8001b9e:	7b7b      	ldrb	r3, [r7, #13]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	425b      	negs	r3, r3
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	b25a      	sxtb	r2, r3
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	7b9b      	ldrb	r3, [r3, #14]
 8001bae:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001bb2:	f7ff fe8f 	bl	80018d4 <u8g2_add_vector_y>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	461a      	mov	r2, r3
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	791b      	ldrb	r3, [r3, #4]
 8001bc2:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	795b      	ldrb	r3, [r3, #5]
 8001bc8:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8001bca:	7dfb      	ldrb	r3, [r7, #23]
 8001bcc:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8001bce:	7d7b      	ldrb	r3, [r7, #21]
 8001bd0:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	7b9b      	ldrb	r3, [r3, #14]
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	d852      	bhi.n	8001c80 <u8g2_font_decode_glyph+0x170>
 8001bda:	a201      	add	r2, pc, #4	; (adr r2, 8001be0 <u8g2_font_decode_glyph+0xd0>)
 8001bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be0:	08001bf1 	.word	0x08001bf1
 8001be4:	08001c09 	.word	0x08001c09
 8001be8:	08001c2d 	.word	0x08001c2d
 8001bec:	08001c5d 	.word	0x08001c5d
      {
	case 0:
	    x1 += decode->glyph_width;
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	7dbb      	ldrb	r3, [r7, #22]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8001bfe:	7bfa      	ldrb	r2, [r7, #15]
 8001c00:	7d3b      	ldrb	r3, [r7, #20]
 8001c02:	4413      	add	r3, r2
 8001c04:	753b      	strb	r3, [r7, #20]
	    break;
 8001c06:	e03b      	b.n	8001c80 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	7dfa      	ldrb	r2, [r7, #23]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001c10:	7dfb      	ldrb	r3, [r7, #23]
 8001c12:	3301      	adds	r3, #1
 8001c14:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8001c16:	7dbb      	ldrb	r3, [r7, #22]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	7d3b      	ldrb	r3, [r7, #20]
 8001c26:	4413      	add	r3, r2
 8001c28:	753b      	strb	r3, [r7, #20]
	    break;
 8001c2a:	e029      	b.n	8001c80 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	7dfa      	ldrb	r2, [r7, #23]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001c3a:	7dfb      	ldrb	r3, [r7, #23]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8001c40:	7dbb      	ldrb	r3, [r7, #22]
 8001c42:	3301      	adds	r3, #1
 8001c44:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	7d7a      	ldrb	r2, [r7, #21]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001c4e:	7d7b      	ldrb	r3, [r7, #21]
 8001c50:	3301      	adds	r3, #1
 8001c52:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001c54:	7d3b      	ldrb	r3, [r7, #20]
 8001c56:	3301      	adds	r3, #1
 8001c58:	753b      	strb	r3, [r7, #20]
	    break;	  
 8001c5a:	e011      	b.n	8001c80 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8001c5c:	7bfa      	ldrb	r2, [r7, #15]
 8001c5e:	7dbb      	ldrb	r3, [r7, #22]
 8001c60:	4413      	add	r3, r2
 8001c62:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	7d7a      	ldrb	r2, [r7, #21]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001c72:	7d7b      	ldrb	r3, [r7, #21]
 8001c74:	3301      	adds	r3, #1
 8001c76:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001c78:	7d3b      	ldrb	r3, [r7, #20]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	753b      	strb	r3, [r7, #20]
	    break;	  
 8001c7e:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001c80:	7db8      	ldrb	r0, [r7, #22]
 8001c82:	7d7a      	ldrb	r2, [r7, #21]
 8001c84:	7df9      	ldrb	r1, [r7, #23]
 8001c86:	7d3b      	ldrb	r3, [r7, #20]
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 fca8 	bl	80025e2 <u8g2_IsIntersection>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d102      	bne.n	8001c9e <u8g2_font_decode_glyph+0x18e>
	return d;
 8001c98:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001c9c:	e03a      	b.n	8001d14 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	6938      	ldr	r0, [r7, #16]
 8001cb4:	f7ff fda1 	bl	80017fa <u8g2_font_decode_get_unsigned_bits>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	6938      	ldr	r0, [r7, #16]
 8001cc6:	f7ff fd98 	bl	80017fa <u8g2_font_decode_get_unsigned_bits>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8001cce:	7afb      	ldrb	r3, [r7, #11]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff fe5d 	bl	8001994 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001cda:	7abb      	ldrb	r3, [r7, #10]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	4619      	mov	r1, r3
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff fe57 	bl	8001994 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	6938      	ldr	r0, [r7, #16]
 8001cea:	f7ff fd86 	bl	80017fa <u8g2_font_decode_get_unsigned_bits>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1ec      	bne.n	8001cce <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001cfa:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	dd00      	ble.n	8001d04 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001d02:	e7d2      	b.n	8001caa <u8g2_font_decode_glyph+0x19a>
	break;
 8001d04:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	7b1a      	ldrb	r2, [r3, #12]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  }
  return d;
 8001d10:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2c:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	3317      	adds	r3, #23
 8001d32:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8001d34:	887b      	ldrh	r3, [r7, #2]
 8001d36:	2bff      	cmp	r3, #255	; 0xff
 8001d38:	d82a      	bhi.n	8001d90 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8001d3a:	887b      	ldrh	r3, [r7, #2]
 8001d3c:	2b60      	cmp	r3, #96	; 0x60
 8001d3e:	d907      	bls.n	8001d50 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8001d46:	461a      	mov	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	e009      	b.n	8001d64 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001d50:	887b      	ldrh	r3, [r7, #2]
 8001d52:	2b40      	cmp	r3, #64	; 0x40
 8001d54:	d906      	bls.n	8001d64 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	4413      	add	r3, r2
 8001d62:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	3301      	adds	r3, #1
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d04e      	beq.n	8001e0c <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	887a      	ldrh	r2, [r7, #2]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d102      	bne.n	8001d80 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	3302      	adds	r3, #2
 8001d7e:	e049      	b.n	8001e14 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	3301      	adds	r3, #1
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001d8e:	e7e9      	b.n	8001d64 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8001d96:	461a      	mov	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001da2:	2100      	movs	r1, #0
 8001da4:	6938      	ldr	r0, [r7, #16]
 8001da6:	f7ff fc60 	bl	800166a <u8g2_font_get_word>
 8001daa:	4603      	mov	r3, r0
 8001dac:	461a      	mov	r2, r3
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	4413      	add	r3, r2
 8001db2:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001db4:	2102      	movs	r1, #2
 8001db6:	6938      	ldr	r0, [r7, #16]
 8001db8:	f7ff fc57 	bl	800166a <u8g2_font_get_word>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8001dc6:	89fa      	ldrh	r2, [r7, #14]
 8001dc8:	887b      	ldrh	r3, [r7, #2]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d3e9      	bcc.n	8001da2 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001dd4:	89fb      	ldrh	r3, [r7, #14]
 8001dd6:	021b      	lsls	r3, r3, #8
 8001dd8:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	89fb      	ldrh	r3, [r7, #14]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001de8:	89fb      	ldrh	r3, [r7, #14]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d010      	beq.n	8001e10 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8001dee:	89fa      	ldrh	r2, [r7, #14]
 8001df0:	887b      	ldrh	r3, [r7, #2]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d102      	bne.n	8001dfc <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	3303      	adds	r3, #3
 8001dfa:	e00b      	b.n	8001e14 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	3302      	adds	r3, #2
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	461a      	mov	r2, r3
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	4413      	add	r3, r2
 8001e08:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8001e0a:	e7e0      	b.n	8001dce <u8g2_font_get_glyph_data+0xb2>
	break;
 8001e0c:	bf00      	nop
 8001e0e:	e000      	b.n	8001e12 <u8g2_font_get_glyph_data+0xf6>
	break;
 8001e10:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	4608      	mov	r0, r1
 8001e26:	4611      	mov	r1, r2
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	70fb      	strb	r3, [r7, #3]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	70bb      	strb	r3, [r7, #2]
 8001e32:	4613      	mov	r3, r2
 8001e34:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	78fa      	ldrb	r2, [r7, #3]
 8001e3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  u8g2->font_decode.target_y = y;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	78ba      	ldrb	r2, [r7, #2]
 8001e46:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8001e4a:	883b      	ldrh	r3, [r7, #0]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ff64 	bl	8001d1c <u8g2_font_get_glyph_data>
 8001e54:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d005      	beq.n	8001e68 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001e5c:	68b9      	ldr	r1, [r7, #8]
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff fe56 	bl	8001b10 <u8g2_font_decode_glyph>
 8001e64:	4603      	mov	r3, r0
 8001e66:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <u8g2_GetGlyphWidth>:
  return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b084      	sub	sp, #16
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	807b      	strh	r3, [r7, #2]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 8001e7e:	887b      	ldrh	r3, [r7, #2]
 8001e80:	4619      	mov	r1, r3
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff ff4a 	bl	8001d1c <u8g2_font_get_glyph_data>
 8001e88:	60f8      	str	r0, [r7, #12]
  if ( glyph_data == NULL )
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <u8g2_GetGlyphWidth+0x22>
    return 0; 
 8001e90:	2300      	movs	r3, #0
 8001e92:	e027      	b.n	8001ee4 <u8g2_GetGlyphWidth+0x72>
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 8001e94:	68f9      	ldr	r1, [r7, #12]
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff fe02 	bl	8001aa0 <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4610      	mov	r0, r2
 8001eac:	f7ff fcef 	bl	800188e <u8g2_font_decode_get_signed_bits>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4610      	mov	r0, r2
 8001eca:	f7ff fce0 	bl	800188e <u8g2_font_decode_get_signed_bits>
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001eda:	4619      	mov	r1, r3
 8001edc:	4610      	mov	r0, r2
 8001ede:	f7ff fcd6 	bl	800188e <u8g2_font_decode_get_signed_bits>
 8001ee2:	4603      	mov	r3, r0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	78fa      	ldrb	r2, [r7, #3]
 8001efc:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr
	...

08001f0c <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	4608      	mov	r0, r1
 8001f16:	4611      	mov	r1, r2
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	70fb      	strb	r3, [r7, #3]
 8001f1e:	460b      	mov	r3, r1
 8001f20:	70bb      	strb	r3, [r7, #2]
 8001f22:	4613      	mov	r3, r2
 8001f24:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001f2c:	2b03      	cmp	r3, #3
 8001f2e:	d833      	bhi.n	8001f98 <u8g2_DrawGlyph+0x8c>
 8001f30:	a201      	add	r2, pc, #4	; (adr r2, 8001f38 <u8g2_DrawGlyph+0x2c>)
 8001f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f36:	bf00      	nop
 8001f38:	08001f49 	.word	0x08001f49
 8001f3c:	08001f5d 	.word	0x08001f5d
 8001f40:	08001f71 	.word	0x08001f71
 8001f44:	08001f85 	.word	0x08001f85
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	4798      	blx	r3
 8001f50:	4603      	mov	r3, r0
 8001f52:	461a      	mov	r2, r3
 8001f54:	78bb      	ldrb	r3, [r7, #2]
 8001f56:	4413      	add	r3, r2
 8001f58:	70bb      	strb	r3, [r7, #2]
      break;
 8001f5a:	e01d      	b.n	8001f98 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	4798      	blx	r3
 8001f64:	4603      	mov	r3, r0
 8001f66:	461a      	mov	r2, r3
 8001f68:	78fb      	ldrb	r3, [r7, #3]
 8001f6a:	1a9b      	subs	r3, r3, r2
 8001f6c:	70fb      	strb	r3, [r7, #3]
      break;
 8001f6e:	e013      	b.n	8001f98 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	4798      	blx	r3
 8001f78:	4603      	mov	r3, r0
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	78bb      	ldrb	r3, [r7, #2]
 8001f7e:	1a9b      	subs	r3, r3, r2
 8001f80:	70bb      	strb	r3, [r7, #2]
      break;
 8001f82:	e009      	b.n	8001f98 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	4798      	blx	r3
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	461a      	mov	r2, r3
 8001f90:	78fb      	ldrb	r3, [r7, #3]
 8001f92:	4413      	add	r3, r2
 8001f94:	70fb      	strb	r3, [r7, #3]
      break;
 8001f96:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8001f98:	883b      	ldrh	r3, [r7, #0]
 8001f9a:	78ba      	ldrb	r2, [r7, #2]
 8001f9c:	78f9      	ldrb	r1, [r7, #3]
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ff3c 	bl	8001e1c <u8g2_font_draw_glyph>
 8001fa4:	4603      	mov	r3, r0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop

08001fb0 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	607b      	str	r3, [r7, #4]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	72fb      	strb	r3, [r7, #11]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f000 fec2 	bl	8002d4c <u8x8_utf8_init>
  sum = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	7812      	ldrb	r2, [r2, #0]
 8001fd4:	4611      	mov	r1, r2
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	4798      	blx	r3
 8001fda:	4603      	mov	r3, r0
 8001fdc:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8001fde:	8abb      	ldrh	r3, [r7, #20]
 8001fe0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d038      	beq.n	800205a <u8g2_draw_string+0xaa>
      break;
    str++;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3301      	adds	r3, #1
 8001fec:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8001fee:	8abb      	ldrh	r3, [r7, #20]
 8001ff0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d0e9      	beq.n	8001fcc <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8001ff8:	8abb      	ldrh	r3, [r7, #20]
 8001ffa:	7aba      	ldrb	r2, [r7, #10]
 8001ffc:	7af9      	ldrb	r1, [r7, #11]
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f7ff ff84 	bl	8001f0c <u8g2_DrawGlyph>
 8002004:	4603      	mov	r3, r0
 8002006:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800200e:	2b03      	cmp	r3, #3
 8002010:	d81e      	bhi.n	8002050 <u8g2_draw_string+0xa0>
 8002012:	a201      	add	r2, pc, #4	; (adr r2, 8002018 <u8g2_draw_string+0x68>)
 8002014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002018:	08002029 	.word	0x08002029
 800201c:	08002033 	.word	0x08002033
 8002020:	0800203d 	.word	0x0800203d
 8002024:	08002047 	.word	0x08002047
      {
	case 0:
	  x += delta;
 8002028:	7afa      	ldrb	r2, [r7, #11]
 800202a:	7cfb      	ldrb	r3, [r7, #19]
 800202c:	4413      	add	r3, r2
 800202e:	72fb      	strb	r3, [r7, #11]
	  break;
 8002030:	e00e      	b.n	8002050 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8002032:	7aba      	ldrb	r2, [r7, #10]
 8002034:	7cfb      	ldrb	r3, [r7, #19]
 8002036:	4413      	add	r3, r2
 8002038:	72bb      	strb	r3, [r7, #10]
	  break;
 800203a:	e009      	b.n	8002050 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 800203c:	7afa      	ldrb	r2, [r7, #11]
 800203e:	7cfb      	ldrb	r3, [r7, #19]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	72fb      	strb	r3, [r7, #11]
	  break;
 8002044:	e004      	b.n	8002050 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8002046:	7aba      	ldrb	r2, [r7, #10]
 8002048:	7cfb      	ldrb	r3, [r7, #19]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	72bb      	strb	r3, [r7, #10]
	  break;
 800204e:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8002050:	7dfa      	ldrb	r2, [r7, #23]
 8002052:	7cfb      	ldrb	r3, [r7, #19]
 8002054:	4413      	add	r3, r2
 8002056:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002058:	e7b8      	b.n	8001fcc <u8g2_draw_string+0x1c>
      break;
 800205a:	bf00      	nop
    }
  }
  return sum;
 800205c:	7dfb      	ldrb	r3, [r7, #23]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop

08002068 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	607b      	str	r3, [r7, #4]
 8002072:	460b      	mov	r3, r1
 8002074:	72fb      	strb	r3, [r7, #11]
 8002076:	4613      	mov	r3, r2
 8002078:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4a06      	ldr	r2, [pc, #24]	; (8002098 <u8g2_DrawStr+0x30>)
 800207e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8002080:	7aba      	ldrb	r2, [r7, #10]
 8002082:	7af9      	ldrb	r1, [r7, #11]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f7ff ff92 	bl	8001fb0 <u8g2_draw_string>
 800208c:	4603      	mov	r3, r0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	08002d67 	.word	0x08002d67

0800209c <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d05d      	beq.n	8002168 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f993 2071 	ldrsb.w	r2, [r3, #113]	; 0x71
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f993 2072 	ldrsb.w	r2, [r3, #114]	; 0x72
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d04d      	beq.n	800216a <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d11c      	bne.n	8002112 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f993 207e 	ldrsb.w	r2, [r3, #126]	; 0x7e
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f993 3073 	ldrsb.w	r3, [r3, #115]	; 0x73
 80020e4:	429a      	cmp	r2, r3
 80020e6:	da05      	bge.n	80020f4 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f993 2073 	ldrsb.w	r2, [r3, #115]	; 0x73
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8002100:	429a      	cmp	r2, r3
 8002102:	dd32      	ble.n	800216a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8002110:	e02b      	b.n	800216a <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8002118:	461a      	mov	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8002120:	4619      	mov	r1, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8002128:	440b      	add	r3, r1
 800212a:	429a      	cmp	r2, r3
 800212c:	da0d      	bge.n	800214a <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8002134:	b2da      	uxtb	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 800213c:	b2db      	uxtb	r3, r3
 800213e:	4413      	add	r3, r2
 8002140:	b2db      	uxtb	r3, r3
 8002142:	b25a      	sxtb	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8002156:	429a      	cmp	r2, r3
 8002158:	dd07      	ble.n	800216a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f993 2070 	ldrsb.w	r2, [r3, #112]	; 0x70
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8002166:	e000      	b.n	800216a <u8g2_UpdateRefHeight+0xce>
    return;
 8002168:	bf00      	nop
  }  
}
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr

08002172 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  return 0;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr
	...

08002188 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a03      	ldr	r2, [pc, #12]	; (80021a0 <u8g2_SetFontPosBaseline+0x18>)
 8002194:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr
 80021a0:	08002173 	.word	0x08002173

080021a4 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d00b      	beq.n	80021d0 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	64da      	str	r2, [r3, #76]	; 0x4c
    u8g2_read_font_info(&(u8g2->font_info), font);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3364      	adds	r3, #100	; 0x64
 80021c2:	6839      	ldr	r1, [r7, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fa6f 	bl	80016a8 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff ff66 	bl	800209c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 80021d0:	bf00      	nop
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  uint16_t e;
  u8g2_uint_t  w, dx;
  
  u8g2->font_decode.glyph_width = 0;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 fdae 	bl	8002d4c <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	73fb      	strb	r3, [r7, #15]
  dx = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	73bb      	strb	r3, [r7, #14]

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	7812      	ldrb	r2, [r2, #0]
 8002200:	4611      	mov	r1, r2
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	4798      	blx	r3
 8002206:	4603      	mov	r3, r0
 8002208:	81bb      	strh	r3, [r7, #12]
    if ( e == 0x0ffff )
 800220a:	89bb      	ldrh	r3, [r7, #12]
 800220c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002210:	4293      	cmp	r3, r2
 8002212:	d013      	beq.n	800223c <u8g2_string_width+0x64>
      break;
    str++;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	3301      	adds	r3, #1
 8002218:	603b      	str	r3, [r7, #0]
    if ( e != 0x0fffe )
 800221a:	89bb      	ldrh	r3, [r7, #12]
 800221c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002220:	4293      	cmp	r3, r2
 8002222:	d0e9      	beq.n	80021f8 <u8g2_string_width+0x20>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 8002224:	89bb      	ldrh	r3, [r7, #12]
 8002226:	4619      	mov	r1, r3
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff fe22 	bl	8001e72 <u8g2_GetGlyphWidth>
 800222e:	4603      	mov	r3, r0
 8002230:	73bb      	strb	r3, [r7, #14]
      w += dx;
 8002232:	7bfa      	ldrb	r2, [r7, #15]
 8002234:	7bbb      	ldrb	r3, [r7, #14]
 8002236:	4413      	add	r3, r2
 8002238:	73fb      	strb	r3, [r7, #15]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800223a:	e7dd      	b.n	80021f8 <u8g2_string_width+0x20>
      break;
 800223c:	bf00      	nop
    }
  }
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 8002244:	2b00      	cmp	r3, #0
 8002246:	d011      	beq.n	800226c <u8g2_string_width+0x94>
  {
    w -= dx;
 8002248:	7bfa      	ldrb	r2, [r7, #15]
 800224a:	7bbb      	ldrb	r3, [r7, #14]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	73fb      	strb	r3, [r7, #15]
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 8002256:	b2da      	uxtb	r2, r3
 8002258:	7bfb      	ldrb	r3, [r7, #15]
 800225a:	4413      	add	r3, r2
 800225c:	73fb      	strb	r3, [r7, #15]
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002264:	b2da      	uxtb	r2, r3
 8002266:	7bfb      	ldrb	r3, [r7, #15]
 8002268:	4413      	add	r3, r2
 800226a:	73fb      	strb	r3, [r7, #15]
  }
  // printf("w=%d \n", w);
  
  return w;  
 800226c:	7bfb      	ldrb	r3, [r7, #15]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <u8g2_GetStrWidth>:




u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a05      	ldr	r2, [pc, #20]	; (800229c <u8g2_GetStrWidth+0x24>)
 8002286:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, s);
 8002288:	6839      	ldr	r1, [r7, #0]
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff ffa4 	bl	80021d8 <u8g2_string_width>
 8002290:	4603      	mov	r3, r0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	08002d67 	.word	0x08002d67

080022a0 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b087      	sub	sp, #28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	4611      	mov	r1, r2
 80022ac:	461a      	mov	r2, r3
 80022ae:	460b      	mov	r3, r1
 80022b0:	71fb      	strb	r3, [r7, #7]
 80022b2:	4613      	mov	r3, r2
 80022b4:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 80022bc:	7dfb      	ldrb	r3, [r7, #23]
 80022be:	75bb      	strb	r3, [r7, #22]
  b += *len;
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	781a      	ldrb	r2, [r3, #0]
 80022c4:	7dbb      	ldrb	r3, [r7, #22]
 80022c6:	4413      	add	r3, r2
 80022c8:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80022ca:	7dfa      	ldrb	r2, [r7, #23]
 80022cc:	7dbb      	ldrb	r3, [r7, #22]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d90b      	bls.n	80022ea <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80022d2:	7dfa      	ldrb	r2, [r7, #23]
 80022d4:	79bb      	ldrb	r3, [r7, #6]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d205      	bcs.n	80022e6 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 80022da:	79bb      	ldrb	r3, [r7, #6]
 80022dc:	75bb      	strb	r3, [r7, #22]
      b--;
 80022de:	7dbb      	ldrb	r3, [r7, #22]
 80022e0:	3b01      	subs	r3, #1
 80022e2:	75bb      	strb	r3, [r7, #22]
 80022e4:	e001      	b.n	80022ea <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 80022ea:	7dfa      	ldrb	r2, [r7, #23]
 80022ec:	79bb      	ldrb	r3, [r7, #6]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d301      	bcc.n	80022f6 <u8g2_clip_intersection2+0x56>
    return 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	e01c      	b.n	8002330 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 80022f6:	7dba      	ldrb	r2, [r7, #22]
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d801      	bhi.n	8002302 <u8g2_clip_intersection2+0x62>
    return 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	e016      	b.n	8002330 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8002302:	7dfa      	ldrb	r2, [r7, #23]
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	429a      	cmp	r2, r3
 8002308:	d201      	bcs.n	800230e <u8g2_clip_intersection2+0x6e>
    a = c;
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 800230e:	7dba      	ldrb	r2, [r7, #22]
 8002310:	79bb      	ldrb	r3, [r7, #6]
 8002312:	429a      	cmp	r2, r3
 8002314:	d901      	bls.n	800231a <u8g2_clip_intersection2+0x7a>
    b = d;
 8002316:	79bb      	ldrb	r3, [r7, #6]
 8002318:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	7dfa      	ldrb	r2, [r7, #23]
 800231e:	701a      	strb	r2, [r3, #0]
  b -= a;
 8002320:	7dba      	ldrb	r2, [r7, #22]
 8002322:	7dfb      	ldrb	r3, [r7, #23]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	75bb      	strb	r3, [r7, #22]
  *len = b;
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	7dba      	ldrb	r2, [r7, #22]
 800232c:	701a      	strb	r2, [r3, #0]
  return 1;
 800232e:	2301      	movs	r3, #1
}
 8002330:	4618      	mov	r0, r3
 8002332:	371c      	adds	r7, #28
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr

0800233a <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800233a:	b590      	push	{r4, r7, lr}
 800233c:	b085      	sub	sp, #20
 800233e:	af02      	add	r7, sp, #8
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	4608      	mov	r0, r1
 8002344:	4611      	mov	r1, r2
 8002346:	461a      	mov	r2, r3
 8002348:	4603      	mov	r3, r0
 800234a:	70fb      	strb	r3, [r7, #3]
 800234c:	460b      	mov	r3, r1
 800234e:	70bb      	strb	r3, [r7, #2]
 8002350:	4613      	mov	r3, r2
 8002352:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800235a:	78ba      	ldrb	r2, [r7, #2]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002364:	7878      	ldrb	r0, [r7, #1]
 8002366:	78ba      	ldrb	r2, [r7, #2]
 8002368:	78f9      	ldrb	r1, [r7, #3]
 800236a:	7e3b      	ldrb	r3, [r7, #24]
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	4603      	mov	r3, r0
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	47a0      	blx	r4
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	bd90      	pop	{r4, r7, pc}

0800237c <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800237c:	b590      	push	{r4, r7, lr}
 800237e:	b085      	sub	sp, #20
 8002380:	af02      	add	r7, sp, #8
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	4608      	mov	r0, r1
 8002386:	4611      	mov	r1, r2
 8002388:	461a      	mov	r2, r3
 800238a:	4603      	mov	r3, r0
 800238c:	70fb      	strb	r3, [r7, #3]
 800238e:	460b      	mov	r3, r1
 8002390:	70bb      	strb	r3, [r7, #2]
 8002392:	4613      	mov	r3, r2
 8002394:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800239c:	2b00      	cmp	r3, #0
 800239e:	d06d      	beq.n	800247c <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80023a0:	787b      	ldrb	r3, [r7, #1]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d06a      	beq.n	800247c <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80023a6:	787b      	ldrb	r3, [r7, #1]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d918      	bls.n	80023de <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 80023ac:	7e3b      	ldrb	r3, [r7, #24]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d109      	bne.n	80023c6 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 80023b2:	78fa      	ldrb	r2, [r7, #3]
 80023b4:	787b      	ldrb	r3, [r7, #1]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	70fb      	strb	r3, [r7, #3]
	  x++;
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	3301      	adds	r3, #1
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	70fb      	strb	r3, [r7, #3]
 80023c4:	e00b      	b.n	80023de <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 80023c6:	7e3b      	ldrb	r3, [r7, #24]
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	d108      	bne.n	80023de <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 80023cc:	78ba      	ldrb	r2, [r7, #2]
 80023ce:	787b      	ldrb	r3, [r7, #1]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	70bb      	strb	r3, [r7, #2]
	  y++;
 80023d6:	78bb      	ldrb	r3, [r7, #2]
 80023d8:	3301      	adds	r3, #1
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 80023de:	7e3b      	ldrb	r3, [r7, #24]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 80023e6:	7e3b      	ldrb	r3, [r7, #24]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d119      	bne.n	8002420 <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80023f2:	78bb      	ldrb	r3, [r7, #2]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d838      	bhi.n	800246a <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80023fe:	78bb      	ldrb	r3, [r7, #2]
 8002400:	429a      	cmp	r2, r3
 8002402:	d934      	bls.n	800246e <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002410:	1c79      	adds	r1, r7, #1
 8002412:	1cf8      	adds	r0, r7, #3
 8002414:	f7ff ff44 	bl	80022a0 <u8g2_clip_intersection2>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d119      	bne.n	8002452 <u8g2_DrawHVLine+0xd6>
	  return;
 800241e:	e02d      	b.n	800247c <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002426:	78fb      	ldrb	r3, [r7, #3]
 8002428:	429a      	cmp	r2, r3
 800242a:	d822      	bhi.n	8002472 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8002432:	78fb      	ldrb	r3, [r7, #3]
 8002434:	429a      	cmp	r2, r3
 8002436:	d91e      	bls.n	8002476 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002444:	1c79      	adds	r1, r7, #1
 8002446:	1cb8      	adds	r0, r7, #2
 8002448:	f7ff ff2a 	bl	80022a0 <u8g2_clip_intersection2>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d013      	beq.n	800247a <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	689c      	ldr	r4, [r3, #8]
 8002458:	78f9      	ldrb	r1, [r7, #3]
 800245a:	78ba      	ldrb	r2, [r7, #2]
 800245c:	7878      	ldrb	r0, [r7, #1]
 800245e:	7e3b      	ldrb	r3, [r7, #24]
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	4603      	mov	r3, r0
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	47a0      	blx	r4
 8002468:	e008      	b.n	800247c <u8g2_DrawHVLine+0x100>
	  return;
 800246a:	bf00      	nop
 800246c:	e006      	b.n	800247c <u8g2_DrawHVLine+0x100>
	  return;
 800246e:	bf00      	nop
 8002470:	e004      	b.n	800247c <u8g2_DrawHVLine+0x100>
	  return;
 8002472:	bf00      	nop
 8002474:	e002      	b.n	800247c <u8g2_DrawHVLine+0x100>
	  return;
 8002476:	bf00      	nop
 8002478:	e000      	b.n	800247c <u8g2_DrawHVLine+0x100>
	  return;
 800247a:	bf00      	nop
    }
}
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	bd90      	pop	{r4, r7, pc}

08002482 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b084      	sub	sp, #16
 8002486:	af02      	add	r7, sp, #8
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	4608      	mov	r0, r1
 800248c:	4611      	mov	r1, r2
 800248e:	461a      	mov	r2, r3
 8002490:	4603      	mov	r3, r0
 8002492:	70fb      	strb	r3, [r7, #3]
 8002494:	460b      	mov	r3, r1
 8002496:	70bb      	strb	r3, [r7, #2]
 8002498:	4613      	mov	r3, r2
 800249a:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 800249c:	7878      	ldrb	r0, [r7, #1]
 800249e:	78ba      	ldrb	r2, [r7, #2]
 80024a0:	78f9      	ldrb	r1, [r7, #3]
 80024a2:	2300      	movs	r3, #0
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	4603      	mov	r3, r0
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7ff ff67 	bl	800237c <u8g2_DrawHVLine>
}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b084      	sub	sp, #16
 80024ba:	af02      	add	r7, sp, #8
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	4608      	mov	r0, r1
 80024c0:	4611      	mov	r1, r2
 80024c2:	461a      	mov	r2, r3
 80024c4:	4603      	mov	r3, r0
 80024c6:	70fb      	strb	r3, [r7, #3]
 80024c8:	460b      	mov	r3, r1
 80024ca:	70bb      	strb	r3, [r7, #2]
 80024cc:	4613      	mov	r3, r2
 80024ce:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 80024d0:	7878      	ldrb	r0, [r7, #1]
 80024d2:	78ba      	ldrb	r2, [r7, #2]
 80024d4:	78f9      	ldrb	r1, [r7, #3]
 80024d6:	2301      	movs	r3, #1
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	4603      	mov	r3, r0
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7ff ff4d 	bl	800237c <u8g2_DrawHVLine>
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b084      	sub	sp, #16
 80024ee:	af02      	add	r7, sp, #8
 80024f0:	6078      	str	r0, [r7, #4]
 80024f2:	460b      	mov	r3, r1
 80024f4:	70fb      	strb	r3, [r7, #3]
 80024f6:	4613      	mov	r3, r2
 80024f8:	70bb      	strb	r3, [r7, #2]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002500:	78ba      	ldrb	r2, [r7, #2]
 8002502:	429a      	cmp	r2, r3
 8002504:	d31a      	bcc.n	800253c <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800250c:	78ba      	ldrb	r2, [r7, #2]
 800250e:	429a      	cmp	r2, r3
 8002510:	d216      	bcs.n	8002540 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002518:	78fa      	ldrb	r2, [r7, #3]
 800251a:	429a      	cmp	r2, r3
 800251c:	d312      	bcc.n	8002544 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	429a      	cmp	r2, r3
 8002528:	d20e      	bcs.n	8002548 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800252a:	78ba      	ldrb	r2, [r7, #2]
 800252c:	78f9      	ldrb	r1, [r7, #3]
 800252e:	2300      	movs	r3, #0
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	2301      	movs	r3, #1
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff ff21 	bl	800237c <u8g2_DrawHVLine>
 800253a:	e006      	b.n	800254a <u8g2_DrawPixel+0x60>
    return;
 800253c:	bf00      	nop
 800253e:	e004      	b.n	800254a <u8g2_DrawPixel+0x60>
    return;
 8002540:	bf00      	nop
 8002542:	e002      	b.n	800254a <u8g2_DrawPixel+0x60>
    return;
 8002544:	bf00      	nop
 8002546:	e000      	b.n	800254a <u8g2_DrawPixel+0x60>
    return;
 8002548:	bf00      	nop
}
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	78fa      	ldrb	r2, [r7, #3]
 8002560:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  if ( color >= 3 )
 8002564:	78fb      	ldrb	r3, [r7, #3]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d903      	bls.n	8002572 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr

0800257c <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 800257c:	b490      	push	{r4, r7}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	4604      	mov	r4, r0
 8002584:	4608      	mov	r0, r1
 8002586:	4611      	mov	r1, r2
 8002588:	461a      	mov	r2, r3
 800258a:	4623      	mov	r3, r4
 800258c:	71fb      	strb	r3, [r7, #7]
 800258e:	4603      	mov	r3, r0
 8002590:	71bb      	strb	r3, [r7, #6]
 8002592:	460b      	mov	r3, r1
 8002594:	717b      	strb	r3, [r7, #5]
 8002596:	4613      	mov	r3, r2
 8002598:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 800259a:	797a      	ldrb	r2, [r7, #5]
 800259c:	79bb      	ldrb	r3, [r7, #6]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d20d      	bcs.n	80025be <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 80025a2:	793a      	ldrb	r2, [r7, #4]
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d901      	bls.n	80025ae <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e014      	b.n	80025d8 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 80025ae:	797a      	ldrb	r2, [r7, #5]
 80025b0:	793b      	ldrb	r3, [r7, #4]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d901      	bls.n	80025ba <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e00e      	b.n	80025d8 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	e00c      	b.n	80025d8 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80025be:	793a      	ldrb	r2, [r7, #4]
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d907      	bls.n	80025d6 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 80025c6:	797a      	ldrb	r2, [r7, #5]
 80025c8:	793b      	ldrb	r3, [r7, #4]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d901      	bls.n	80025d2 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e002      	b.n	80025d8 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e000      	b.n	80025d8 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 80025d6:	2300      	movs	r3, #0
    }
  }
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc90      	pop	{r4, r7}
 80025e0:	4770      	bx	lr

080025e2 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	4608      	mov	r0, r1
 80025ec:	4611      	mov	r1, r2
 80025ee:	461a      	mov	r2, r3
 80025f0:	4603      	mov	r3, r0
 80025f2:	70fb      	strb	r3, [r7, #3]
 80025f4:	460b      	mov	r3, r1
 80025f6:	70bb      	strb	r3, [r7, #2]
 80025f8:	4613      	mov	r3, r2
 80025fa:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 8002608:	7c3b      	ldrb	r3, [r7, #16]
 800260a:	78ba      	ldrb	r2, [r7, #2]
 800260c:	f7ff ffb6 	bl	800257c <u8g2_is_intersection_decision_tree>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <u8g2_IsIntersection+0x38>
    return 0; 
 8002616:	2300      	movs	r3, #0
 8002618:	e00a      	b.n	8002630 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 0041 	ldrb.w	r0, [r3, #65]	; 0x41
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 8002626:	787b      	ldrb	r3, [r7, #1]
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	f7ff ffa7 	bl	800257c <u8g2_is_intersection_decision_tree>
 800262e:	4603      	mov	r3, r0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002638:	b480      	push	{r7}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	4608      	mov	r0, r1
 8002642:	4611      	mov	r1, r2
 8002644:	461a      	mov	r2, r3
 8002646:	4603      	mov	r3, r0
 8002648:	70fb      	strb	r3, [r7, #3]
 800264a:	460b      	mov	r3, r1
 800264c:	70bb      	strb	r3, [r7, #2]
 800264e:	4613      	mov	r3, r2
 8002650:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8002652:	78bb      	ldrb	r3, [r7, #2]
 8002654:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8002656:	7cfb      	ldrb	r3, [r7, #19]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 800265e:	2301      	movs	r3, #1
 8002660:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 8002662:	7c3a      	ldrb	r2, [r7, #16]
 8002664:	7cfb      	ldrb	r3, [r7, #19]
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800267a:	2b01      	cmp	r3, #1
 800267c:	d801      	bhi.n	8002682 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 800267e:	7c3b      	ldrb	r3, [r7, #16]
 8002680:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8002688:	2b01      	cmp	r3, #1
 800268a:	d001      	beq.n	8002690 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 800268c:	7c3b      	ldrb	r3, [r7, #16]
 800268e:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002690:	78bb      	ldrb	r3, [r7, #2]
 8002692:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 8002694:	89fb      	ldrh	r3, [r7, #14]
 8002696:	f023 0307 	bic.w	r3, r3, #7
 800269a:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	7c1b      	ldrb	r3, [r3, #16]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	89fa      	ldrh	r2, [r7, #14]
 80026a6:	fb02 f303 	mul.w	r3, r2, r3
 80026aa:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b0:	617b      	str	r3, [r7, #20]
  ptr += offset;
 80026b2:	89fb      	ldrh	r3, [r7, #14]
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	4413      	add	r3, r2
 80026b8:	617b      	str	r3, [r7, #20]
  ptr += x;
 80026ba:	78fb      	ldrb	r3, [r7, #3]
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	4413      	add	r3, r2
 80026c0:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 80026c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d117      	bne.n	80026fa <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	781a      	ldrb	r2, [r3, #0]
 80026ce:	7cbb      	ldrb	r3, [r7, #18]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	781a      	ldrb	r2, [r3, #0]
 80026dc:	7c7b      	ldrb	r3, [r7, #17]
 80026de:	4053      	eors	r3, r2
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	701a      	strb	r2, [r3, #0]
	ptr++;
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	3301      	adds	r3, #1
 80026ea:	617b      	str	r3, [r7, #20]
	len--;
 80026ec:	787b      	ldrb	r3, [r7, #1]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 80026f2:	787b      	ldrb	r3, [r7, #1]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1e8      	bne.n	80026ca <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80026f8:	e039      	b.n	800276e <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	781a      	ldrb	r2, [r3, #0]
 80026fe:	7cbb      	ldrb	r3, [r7, #18]
 8002700:	4313      	orrs	r3, r2
 8002702:	b2da      	uxtb	r2, r3
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	781a      	ldrb	r2, [r3, #0]
 800270c:	7c7b      	ldrb	r3, [r7, #17]
 800270e:	4053      	eors	r3, r2
 8002710:	b2da      	uxtb	r2, r3
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8002716:	7cfb      	ldrb	r3, [r7, #19]
 8002718:	3301      	adds	r3, #1
 800271a:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 800271c:	7cfb      	ldrb	r3, [r7, #19]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	74fb      	strb	r3, [r7, #19]
      len--;
 8002724:	787b      	ldrb	r3, [r7, #1]
 8002726:	3b01      	subs	r3, #1
 8002728:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 800272a:	7cfb      	ldrb	r3, [r7, #19]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d115      	bne.n	800275c <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002736:	461a      	mov	r2, r3
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	4413      	add	r3, r2
 800273c:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8002744:	2b01      	cmp	r3, #1
 8002746:	d801      	bhi.n	800274c <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 8002748:	2301      	movs	r3, #1
 800274a:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8002752:	2b01      	cmp	r3, #1
 8002754:	d008      	beq.n	8002768 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 8002756:	2301      	movs	r3, #1
 8002758:	747b      	strb	r3, [r7, #17]
 800275a:	e005      	b.n	8002768 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 800275c:	7cbb      	ldrb	r3, [r7, #18]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 8002762:	7c7b      	ldrb	r3, [r7, #17]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 8002768:	787b      	ldrb	r3, [r7, #1]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1c5      	bne.n	80026fa <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800276e:	bf00      	nop
 8002770:	371c      	adds	r7, #28
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr

08002778 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->clip_y0 = 0;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	22ff      	movs	r2, #255	; 0xff
 8002794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	22ff      	movs	r2, #255	; 0xff
 800279c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  u8g2->cb->update_page_win(u8g2);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	4798      	blx	r3
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b084      	sub	sp, #16
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	60f8      	str	r0, [r7, #12]
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	603b      	str	r3, [r7, #0]
 80027be:	4613      	mov	r3, r2
 80027c0:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	64da      	str	r2, [r3, #76]	; 0x4c
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	79fa      	ldrb	r2, [r7, #7]
 80027d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
  u8g2->bitmap_transparency = 0;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  
  u8g2->draw_color = 1;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->is_auto_page_clear = 1;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  
  u8g2->cb = u8g2_cb;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f7ff ffaf 	bl	8002778 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f7ff fcb4 	bl	8002188 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
#endif
}
 8002828:	bf00      	nop
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002844:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8002846:	7bfb      	ldrb	r3, [r7, #15]
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	7bfa      	ldrb	r2, [r7, #15]
 8002850:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  
  t = display_info->tile_width;
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	7c1b      	ldrb	r3, [r3, #16]
 8002858:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	2b1f      	cmp	r3, #31
 800285e:	d901      	bls.n	8002864 <u8g2_update_dimension_common+0x34>
    t = 31;
 8002860:	231f      	movs	r3, #31
 8002862:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	7bfa      	ldrb	r2, [r7, #15]
 800286e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002878:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	7bfa      	ldrb	r2, [r7, #15]
 8002884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  t = u8g2->tile_buf_height;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800288e:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002890:	7bfb      	ldrb	r3, [r7, #15]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8002898:	4413      	add	r3, r2
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	7c52      	ldrb	r2, [r2, #17]
 800289e:	4293      	cmp	r3, r2
 80028a0:	dd06      	ble.n	80028b0 <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	7c5a      	ldrb	r2, [r3, #17]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->buf_y1 = u8g2->buf_y0;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  u8g2->buf_y1 += t;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	4413      	add	r3, r2
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	22f0      	movs	r2, #240	; 0xf0
 80028e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  if ( display_info->pixel_width <= 240 )
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	8a9b      	ldrh	r3, [r3, #20]
 80028ec:	2bf0      	cmp	r3, #240	; 0xf0
 80028ee:	d805      	bhi.n	80028fc <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	8a9b      	ldrh	r3, [r3, #20]
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  u8g2->height = display_info->pixel_height;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	8adb      	ldrh	r3, [r3, #22]
 8002900:	b2da      	uxtb	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#endif

}
 8002908:	bf00      	nop
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr

08002912 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b084      	sub	sp, #16
 8002916:	af02      	add	r7, sp, #8
 8002918:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 0046 	ldrb.w	r0, [r3, #70]	; 0x46
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	4603      	mov	r3, r0
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff fe53 	bl	80025e2 <u8g2_IsIntersection>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d104      	bne.n	800294c <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800294a:	e03b      	b.n	80029c4 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002960:	429a      	cmp	r2, r3
 8002962:	d205      	bcs.n	8002970 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800297c:	429a      	cmp	r2, r3
 800297e:	d905      	bls.n	800298c <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002998:	429a      	cmp	r2, r3
 800299a:	d205      	bcs.n	80029a8 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d905      	bls.n	80029c4 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 80029c4:	bf00      	nop
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7ff ff2b 	bl	8002830 <u8g2_update_dimension_common>
}
 80029da:	bf00      	nop
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = u8g2->buf_y0;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->buf_y1;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff ff7b 	bl	8002912 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002a1c:	bf00      	nop
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <u8g2_update_dimension_r1>:


void u8g2_update_dimension_r1(u8g2_t *u8g2)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7ff feff 	bl	8002830 <u8g2_update_dimension_common>
  
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	8a9b      	ldrh	r3, [r3, #20]
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	8adb      	ldrh	r3, [r3, #22]
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <u8g2_update_page_win_r1>:

void u8g2_update_page_win_r1(u8g2_t *u8g2)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = u8g2->buf_y0;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->buf_y1;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = 0;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height;	/* pixel_buf_width replaced with height (which is the real pixel width) */
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff ff41 	bl	8002912 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <u8g2_update_dimension_r2>:

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7ff fec5 	bl	8002830 <u8g2_update_dimension_common>
}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( u8g2->height >= u8g2->buf_y1 )
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d30a      	bcc.n	8002af8 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff feff 	bl	8002912 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002b14:	bf00      	nop
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <u8g2_update_dimension_r3>:


void u8g2_update_dimension_r3(u8g2_t *u8g2)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7ff fe83 	bl	8002830 <u8g2_update_dimension_common>
  
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	8a9b      	ldrh	r3, [r3, #20]
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	8adb      	ldrh	r3, [r3, #22]
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

}
 8002b46:	bf00      	nop
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <u8g2_update_page_win_r3>:

void u8g2_update_page_win_r3(u8g2_t *u8g2)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->width */
  u8g2->user_x0 = 0;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  if ( u8g2->width >= u8g2->buf_y1 )
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d30a      	bcc.n	8002b84 <u8g2_update_page_win_r3+0x36>
    u8g2->user_x0 = u8g2->width - u8g2->buf_y1;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->width - u8g2->buf_y0;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = 0;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->height;	/* pixel_buf_width replaced with height (pixel_width) */
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7ff feaf 	bl	8002912 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002bb4:	bf00      	nop
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af02      	add	r7, sp, #8
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	4608      	mov	r0, r1
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4603      	mov	r3, r0
 8002bcc:	70fb      	strb	r3, [r7, #3]
 8002bce:	460b      	mov	r3, r1
 8002bd0:	70bb      	strb	r3, [r7, #2]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002bd6:	7878      	ldrb	r0, [r7, #1]
 8002bd8:	78ba      	ldrb	r2, [r7, #2]
 8002bda:	78f9      	ldrb	r1, [r7, #3]
 8002bdc:	7c3b      	ldrb	r3, [r7, #16]
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	4603      	mov	r3, r0
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7ff fba9 	bl	800233a <u8g2_draw_hv_line_2dir>
}
 8002be8:	bf00      	nop
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <u8g2_draw_l90_r1>:
  u8g2_draw_hv_line_2dir(u8g2, xx, y, len, dir);
}

/* dir = 0 or 1 */
void u8g2_draw_l90_r1(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af02      	add	r7, sp, #8
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	4608      	mov	r0, r1
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4603      	mov	r3, r0
 8002c00:	70fb      	strb	r3, [r7, #3]
 8002c02:	460b      	mov	r3, r1
 8002c04:	70bb      	strb	r3, [r7, #2]
 8002c06:	4613      	mov	r3, r2
 8002c08:	707b      	strb	r3, [r7, #1]

#ifdef __unix
  assert( dir <= 1 );
#endif
  
  yy = x;
 8002c0a:	78fb      	ldrb	r3, [r7, #3]
 8002c0c:	73bb      	strb	r3, [r7, #14]
  
  xx = u8g2->height;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c14:	73fb      	strb	r3, [r7, #15]
  xx -= y;
 8002c16:	7bfa      	ldrb	r2, [r7, #15]
 8002c18:	78bb      	ldrb	r3, [r7, #2]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	73fb      	strb	r3, [r7, #15]
  xx--;
 8002c1e:	7bfb      	ldrb	r3, [r7, #15]
 8002c20:	3b01      	subs	r3, #1
 8002c22:	73fb      	strb	r3, [r7, #15]
  
  dir ++;
 8002c24:	7e3b      	ldrb	r3, [r7, #24]
 8002c26:	3301      	adds	r3, #1
 8002c28:	763b      	strb	r3, [r7, #24]
  if ( dir == 2 )
 8002c2a:	7e3b      	ldrb	r3, [r7, #24]
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d108      	bne.n	8002c42 <u8g2_draw_l90_r1+0x52>
  {
    xx -= len;
 8002c30:	7bfa      	ldrb	r2, [r7, #15]
 8002c32:	787b      	ldrb	r3, [r7, #1]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	73fb      	strb	r3, [r7, #15]
    xx++;
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	73fb      	strb	r3, [r7, #15]
    dir = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	763b      	strb	r3, [r7, #24]
  }
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002c42:	7878      	ldrb	r0, [r7, #1]
 8002c44:	7bba      	ldrb	r2, [r7, #14]
 8002c46:	7bf9      	ldrb	r1, [r7, #15]
 8002c48:	7e3b      	ldrb	r3, [r7, #24]
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff fb73 	bl	800233a <u8g2_draw_hv_line_2dir>
}
 8002c54:	bf00      	nop
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <u8g2_draw_l90_r2>:

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	4608      	mov	r0, r1
 8002c66:	4611      	mov	r1, r2
 8002c68:	461a      	mov	r2, r3
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	70fb      	strb	r3, [r7, #3]
 8002c6e:	460b      	mov	r3, r1
 8002c70:	70bb      	strb	r3, [r7, #2]
 8002c72:	4613      	mov	r3, r2
 8002c74:	707b      	strb	r3, [r7, #1]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c7c:	73bb      	strb	r3, [r7, #14]
  yy -= y;
 8002c7e:	7bba      	ldrb	r2, [r7, #14]
 8002c80:	78bb      	ldrb	r3, [r7, #2]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	73bb      	strb	r3, [r7, #14]
  
  xx = u8g2->width;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c8c:	73fb      	strb	r3, [r7, #15]
  xx -= x;
 8002c8e:	7bfa      	ldrb	r2, [r7, #15]
 8002c90:	78fb      	ldrb	r3, [r7, #3]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	73fb      	strb	r3, [r7, #15]
  
  if ( dir == 0 )
 8002c96:	7e3b      	ldrb	r3, [r7, #24]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d107      	bne.n	8002cac <u8g2_draw_l90_r2+0x50>
  {
    yy--;
 8002c9c:	7bbb      	ldrb	r3, [r7, #14]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	73bb      	strb	r3, [r7, #14]
    xx -= len;
 8002ca2:	7bfa      	ldrb	r2, [r7, #15]
 8002ca4:	787b      	ldrb	r3, [r7, #1]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	73fb      	strb	r3, [r7, #15]
 8002caa:	e009      	b.n	8002cc0 <u8g2_draw_l90_r2+0x64>
  }
  else if ( dir == 1 )
 8002cac:	7e3b      	ldrb	r3, [r7, #24]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d106      	bne.n	8002cc0 <u8g2_draw_l90_r2+0x64>
  {
    xx--;
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
    yy -= len;
 8002cb8:	7bba      	ldrb	r2, [r7, #14]
 8002cba:	787b      	ldrb	r3, [r7, #1]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	73bb      	strb	r3, [r7, #14]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002cc0:	7878      	ldrb	r0, [r7, #1]
 8002cc2:	7bba      	ldrb	r2, [r7, #14]
 8002cc4:	7bf9      	ldrb	r1, [r7, #15]
 8002cc6:	7e3b      	ldrb	r3, [r7, #24]
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	4603      	mov	r3, r0
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff fb34 	bl	800233a <u8g2_draw_hv_line_2dir>
}
 8002cd2:	bf00      	nop
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <u8g2_draw_l90_r3>:

void u8g2_draw_l90_r3(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b086      	sub	sp, #24
 8002cde:	af02      	add	r7, sp, #8
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	4608      	mov	r0, r1
 8002ce4:	4611      	mov	r1, r2
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	4603      	mov	r3, r0
 8002cea:	70fb      	strb	r3, [r7, #3]
 8002cec:	460b      	mov	r3, r1
 8002cee:	70bb      	strb	r3, [r7, #2]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xx, yy;

  xx = y;
 8002cf4:	78bb      	ldrb	r3, [r7, #2]
 8002cf6:	73bb      	strb	r3, [r7, #14]
  
  yy = u8g2->width;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002cfe:	73fb      	strb	r3, [r7, #15]
  yy -= x;
 8002d00:	7bfa      	ldrb	r2, [r7, #15]
 8002d02:	78fb      	ldrb	r3, [r7, #3]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	73fb      	strb	r3, [r7, #15]
  
  if ( dir == 0 )
 8002d08:	7e3b      	ldrb	r3, [r7, #24]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10c      	bne.n	8002d28 <u8g2_draw_l90_r3+0x4e>
  {
    yy--;
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
 8002d10:	3b01      	subs	r3, #1
 8002d12:	73fb      	strb	r3, [r7, #15]
    yy -= len;
 8002d14:	7bfa      	ldrb	r2, [r7, #15]
 8002d16:	787b      	ldrb	r3, [r7, #1]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	73fb      	strb	r3, [r7, #15]
    yy++;
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	73fb      	strb	r3, [r7, #15]
    dir = 1;
 8002d22:	2301      	movs	r3, #1
 8002d24:	763b      	strb	r3, [r7, #24]
 8002d26:	e004      	b.n	8002d32 <u8g2_draw_l90_r3+0x58>
  }
  else
  {
    yy--;
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	73fb      	strb	r3, [r7, #15]
    dir = 0;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	763b      	strb	r3, [r7, #24]
  }
  
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002d32:	7878      	ldrb	r0, [r7, #1]
 8002d34:	7bfa      	ldrb	r2, [r7, #15]
 8002d36:	7bb9      	ldrb	r1, [r7, #14]
 8002d38:	7e3b      	ldrb	r3, [r7, #24]
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff fafb 	bl	800233a <u8g2_draw_hv_line_2dir>
}
 8002d44:	bf00      	nop
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr

08002d66 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	460b      	mov	r3, r1
 8002d70:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8002d72:	78fb      	ldrb	r3, [r7, #3]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <u8x8_ascii_next+0x18>
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	2b0a      	cmp	r3, #10
 8002d7c:	d102      	bne.n	8002d84 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8002d7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d82:	e001      	b.n	8002d88 <u8x8_ascii_next+0x22>
  return b;
 8002d84:	78fb      	ldrb	r3, [r7, #3]
 8002d86:	b29b      	uxth	r3, r3
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr

08002d92 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8002d92:	b590      	push	{r4, r7, lr}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691c      	ldr	r4, [r3, #16]
 8002da2:	78fa      	ldrb	r2, [r7, #3]
 8002da4:	2300      	movs	r3, #0
 8002da6:	2120      	movs	r1, #32
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	47a0      	blx	r4
 8002dac:	4603      	mov	r3, r0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd90      	pop	{r4, r7, pc}

08002db6 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002db6:	b590      	push	{r4, r7, lr}
 8002db8:	b085      	sub	sp, #20
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	60f8      	str	r0, [r7, #12]
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	607a      	str	r2, [r7, #4]
 8002dc2:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	691c      	ldr	r4, [r3, #16]
 8002dc8:	7afa      	ldrb	r2, [r7, #11]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2117      	movs	r1, #23
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	47a0      	blx	r4
 8002dd2:	4603      	mov	r3, r0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd90      	pop	{r4, r7, pc}

08002ddc <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	460b      	mov	r3, r1
 8002de6:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002de8:	1cfb      	adds	r3, r7, #3
 8002dea:	461a      	mov	r2, r3
 8002dec:	2101      	movs	r1, #1
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7ff ffe1 	bl	8002db6 <u8x8_byte_SendBytes>
 8002df4:	4603      	mov	r3, r0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002dfe:	b590      	push	{r4, r7, lr}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	460b      	mov	r3, r1
 8002e08:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68dc      	ldr	r4, [r3, #12]
 8002e0e:	78fa      	ldrb	r2, [r7, #3]
 8002e10:	2300      	movs	r3, #0
 8002e12:	2115      	movs	r1, #21
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	47a0      	blx	r4
 8002e18:	4603      	mov	r3, r0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd90      	pop	{r4, r7, pc}

08002e22 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002e22:	b590      	push	{r4, r7, lr}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68dc      	ldr	r4, [r3, #12]
 8002e32:	78fa      	ldrb	r2, [r7, #3]
 8002e34:	2300      	movs	r3, #0
 8002e36:	2116      	movs	r1, #22
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	47a0      	blx	r4
 8002e3c:	4603      	mov	r3, r0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd90      	pop	{r4, r7, pc}

08002e46 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002e46:	b590      	push	{r4, r7, lr}
 8002e48:	b085      	sub	sp, #20
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	607a      	str	r2, [r7, #4]
 8002e52:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	68dc      	ldr	r4, [r3, #12]
 8002e58:	7afa      	ldrb	r2, [r7, #11]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2117      	movs	r1, #23
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	47a0      	blx	r4
 8002e62:	4603      	mov	r3, r0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd90      	pop	{r4, r7, pc}

08002e6c <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8002e6c:	b590      	push	{r4, r7, lr}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68dc      	ldr	r4, [r3, #12]
 8002e78:	2300      	movs	r3, #0
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2118      	movs	r1, #24
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	47a0      	blx	r4
 8002e82:	4603      	mov	r3, r0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd90      	pop	{r4, r7, pc}

08002e8c <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8002e8c:	b590      	push	{r4, r7, lr}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68dc      	ldr	r4, [r3, #12]
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	2119      	movs	r1, #25
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	47a0      	blx	r4
 8002ea2:	4603      	mov	r3, r0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd90      	pop	{r4, r7, pc}

08002eac <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8002eac:	b590      	push	{r4, r7, lr}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	73fb      	strb	r3, [r7, #15]
    data++;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002ec2:	7bfb      	ldrb	r3, [r7, #15]
 8002ec4:	2b17      	cmp	r3, #23
 8002ec6:	d017      	beq.n	8002ef8 <u8x8_cad_SendSequence+0x4c>
 8002ec8:	2b17      	cmp	r3, #23
 8002eca:	dc02      	bgt.n	8002ed2 <u8x8_cad_SendSequence+0x26>
 8002ecc:	2b15      	cmp	r3, #21
 8002ece:	db37      	blt.n	8002f40 <u8x8_cad_SendSequence+0x94>
 8002ed0:	e004      	b.n	8002edc <u8x8_cad_SendSequence+0x30>
 8002ed2:	2b19      	cmp	r3, #25
 8002ed4:	dd1e      	ble.n	8002f14 <u8x8_cad_SendSequence+0x68>
 8002ed6:	2bfe      	cmp	r3, #254	; 0xfe
 8002ed8:	d024      	beq.n	8002f24 <u8x8_cad_SendSequence+0x78>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8002eda:	e031      	b.n	8002f40 <u8x8_cad_SendSequence+0x94>
	  v = *data;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68dc      	ldr	r4, [r3, #12]
 8002ee6:	7bba      	ldrb	r2, [r7, #14]
 8002ee8:	7bf9      	ldrb	r1, [r7, #15]
 8002eea:	2300      	movs	r3, #0
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	47a0      	blx	r4
	  data++;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	603b      	str	r3, [r7, #0]
	  break;
 8002ef6:	e022      	b.n	8002f3e <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002efe:	f107 030e 	add.w	r3, r7, #14
 8002f02:	461a      	mov	r2, r3
 8002f04:	2101      	movs	r1, #1
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7ff ff9d 	bl	8002e46 <u8x8_cad_SendData>
	  data++;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	603b      	str	r3, [r7, #0]
	  break;
 8002f12:	e014      	b.n	8002f3e <u8x8_cad_SendSequence+0x92>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68dc      	ldr	r4, [r3, #12]
 8002f18:	7bf9      	ldrb	r1, [r7, #15]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	47a0      	blx	r4
	  break;
 8002f22:	e00c      	b.n	8002f3e <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002f2a:	7bbb      	ldrb	r3, [r7, #14]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	2129      	movs	r1, #41	; 0x29
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f9d7 	bl	80032e4 <u8x8_gpio_call>
	  data++;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	603b      	str	r3, [r7, #0]
	  break;
 8002f3c:	bf00      	nop
    cmd = *data;
 8002f3e:	e7ba      	b.n	8002eb6 <u8x8_cad_SendSequence+0xa>
	return;
 8002f40:	bf00      	nop
    }
  }
}
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd90      	pop	{r4, r7, pc}

08002f48 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002f48:	b590      	push	{r4, r7, lr}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	607b      	str	r3, [r7, #4]
 8002f52:	460b      	mov	r3, r1
 8002f54:	72fb      	strb	r3, [r7, #11]
 8002f56:	4613      	mov	r3, r2
 8002f58:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8002f5a:	7afb      	ldrb	r3, [r7, #11]
 8002f5c:	3b14      	subs	r3, #20
 8002f5e:	2b05      	cmp	r3, #5
 8002f60:	d82f      	bhi.n	8002fc2 <u8x8_cad_001+0x7a>
 8002f62:	a201      	add	r2, pc, #4	; (adr r2, 8002f68 <u8x8_cad_001+0x20>)
 8002f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f68:	08002fb1 	.word	0x08002fb1
 8002f6c:	08002f81 	.word	0x08002f81
 8002f70:	08002f95 	.word	0x08002f95
 8002f74:	08002fa9 	.word	0x08002fa9
 8002f78:	08002fb1 	.word	0x08002fb1
 8002f7c:	08002fb1 	.word	0x08002fb1
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8002f80:	2100      	movs	r1, #0
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f7ff ff05 	bl	8002d92 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002f88:	7abb      	ldrb	r3, [r7, #10]
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f7ff ff25 	bl	8002ddc <u8x8_byte_SendByte>
      break;
 8002f92:	e018      	b.n	8002fc6 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8002f94:	2100      	movs	r1, #0
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f7ff fefb 	bl	8002d92 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002f9c:	7abb      	ldrb	r3, [r7, #10]
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f7ff ff1b 	bl	8002ddc <u8x8_byte_SendByte>
      break;
 8002fa6:	e00e      	b.n	8002fc6 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8002fa8:	2101      	movs	r1, #1
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f7ff fef1 	bl	8002d92 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	691c      	ldr	r4, [r3, #16]
 8002fb4:	7aba      	ldrb	r2, [r7, #10]
 8002fb6:	7af9      	ldrb	r1, [r7, #11]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	47a0      	blx	r4
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	e002      	b.n	8002fc8 <u8x8_cad_001+0x80>
    default:
      return 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	e000      	b.n	8002fc8 <u8x8_cad_001+0x80>
  }
  return 1;
 8002fc6:	2301      	movs	r3, #1
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd90      	pop	{r4, r7, pc}

08002fd0 <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	607b      	str	r3, [r7, #4]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	72fb      	strb	r3, [r7, #11]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002fe2:	7afb      	ldrb	r3, [r7, #11]
 8002fe4:	2b0e      	cmp	r3, #14
 8002fe6:	d05f      	beq.n	80030a8 <u8x8_d_st7565_common+0xd8>
 8002fe8:	2b0f      	cmp	r3, #15
 8002fea:	d002      	beq.n	8002ff2 <u8x8_d_st7565_common+0x22>
 8002fec:	2b0b      	cmp	r3, #11
 8002fee:	d04e      	beq.n	800308e <u8x8_d_st7565_common+0xbe>
 8002ff0:	e06c      	b.n	80030cc <u8x8_d_st7565_common+0xfc>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f7ff ff3a 	bl	8002e6c <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	795b      	ldrb	r3, [r3, #5]
 8002ffc:	75bb      	strb	r3, [r7, #22]
      x *= 8;
 8002ffe:	7dbb      	ldrb	r3, [r7, #22]
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	75bb      	strb	r3, [r7, #22]
      x += u8x8->x_offset;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800300a:	7dbb      	ldrb	r3, [r7, #22]
 800300c:	4413      	add	r3, r2
 800300e:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8003010:	7dbb      	ldrb	r3, [r7, #22]
 8003012:	091b      	lsrs	r3, r3, #4
 8003014:	b2db      	uxtb	r3, r3
 8003016:	f043 0310 	orr.w	r3, r3, #16
 800301a:	b2db      	uxtb	r3, r3
 800301c:	4619      	mov	r1, r3
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f7ff feed 	bl	8002dfe <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8003024:	7dbb      	ldrb	r3, [r7, #22]
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	b2db      	uxtb	r3, r3
 800302c:	4619      	mov	r1, r3
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f7ff fee5 	bl	8002dfe <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	799b      	ldrb	r3, [r3, #6]
 8003038:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800303c:	b2db      	uxtb	r3, r3
 800303e:	4619      	mov	r1, r3
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f7ff fedc 	bl	8002dfe <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	791b      	ldrb	r3, [r3, #4]
 800304a:	75fb      	strb	r3, [r7, #23]
      c *= 8;
 800304c:	7dfb      	ldrb	r3, [r7, #23]
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	613b      	str	r3, [r7, #16]
      /* 
	The following if condition checks the hardware limits of the st7565 
	controller: It is not allowed to write beyond the display limits.
	This is in fact an issue within flip mode.
      */
      if ( c + x > 132u )
 8003058:	7dfa      	ldrb	r2, [r7, #23]
 800305a:	7dbb      	ldrb	r3, [r7, #22]
 800305c:	4413      	add	r3, r2
 800305e:	2b84      	cmp	r3, #132	; 0x84
 8003060:	d905      	bls.n	800306e <u8x8_d_st7565_common+0x9e>
      {
	c = 132u;
 8003062:	2384      	movs	r3, #132	; 0x84
 8003064:	75fb      	strb	r3, [r7, #23]
	c -= x;
 8003066:	7dfa      	ldrb	r2, [r7, #23]
 8003068:	7dbb      	ldrb	r3, [r7, #22]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	75fb      	strb	r3, [r7, #23]
      }
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 800306e:	7dfb      	ldrb	r3, [r7, #23]
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	4619      	mov	r1, r3
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f7ff fee6 	bl	8002e46 <u8x8_cad_SendData>
	arg_int--;
 800307a:	7abb      	ldrb	r3, [r7, #10]
 800307c:	3b01      	subs	r3, #1
 800307e:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8003080:	7abb      	ldrb	r3, [r7, #10]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f3      	bne.n	800306e <u8x8_d_st7565_common+0x9e>
      
      u8x8_cad_EndTransfer(u8x8);
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f7ff ff00 	bl	8002e8c <u8x8_cad_EndTransfer>
      break;
 800308c:	e020      	b.n	80030d0 <u8x8_d_st7565_common+0x100>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 800308e:	7abb      	ldrb	r3, [r7, #10]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d104      	bne.n	800309e <u8x8_d_st7565_common+0xce>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 8003094:	4911      	ldr	r1, [pc, #68]	; (80030dc <u8x8_d_st7565_common+0x10c>)
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f7ff ff08 	bl	8002eac <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
      break;
 800309c:	e018      	b.n	80030d0 <u8x8_d_st7565_common+0x100>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 800309e:	4910      	ldr	r1, [pc, #64]	; (80030e0 <u8x8_d_st7565_common+0x110>)
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f7ff ff03 	bl	8002eac <u8x8_cad_SendSequence>
      break;
 80030a6:	e013      	b.n	80030d0 <u8x8_d_st7565_common+0x100>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f7ff fedf 	bl	8002e6c <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80030ae:	2181      	movs	r1, #129	; 0x81
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f7ff fea4 	bl	8002dfe <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 80030b6:	7abb      	ldrb	r3, [r7, #10]
 80030b8:	089b      	lsrs	r3, r3, #2
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	4619      	mov	r1, r3
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f7ff feaf 	bl	8002e22 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f7ff fee1 	bl	8002e8c <u8x8_cad_EndTransfer>
      break;
 80030ca:	e001      	b.n	80030d0 <u8x8_d_st7565_common+0x100>
#endif
    default:
      return 0;
 80030cc:	2300      	movs	r3, #0
 80030ce:	e000      	b.n	80030d2 <u8x8_d_st7565_common+0x102>
  }
  return 1;
 80030d0:	2301      	movs	r3, #1
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	08015988 	.word	0x08015988
 80030e0:	08015990 	.word	0x08015990

080030e4 <u8x8_d_st7565_nhd_c12864>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_st7565_nhd_c12864(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	607b      	str	r3, [r7, #4]
 80030ee:	460b      	mov	r3, r1
 80030f0:	72fb      	strb	r3, [r7, #11]
 80030f2:	4613      	mov	r3, r2
 80030f4:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 80030f6:	7aba      	ldrb	r2, [r7, #10]
 80030f8:	7af9      	ldrb	r1, [r7, #11]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f7ff ff67 	bl	8002fd0 <u8x8_d_st7565_common>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d12e      	bne.n	8003166 <u8x8_d_st7565_nhd_c12864+0x82>
  {
    /* msg not handled, then try here */
    switch(msg)
 8003108:	7afb      	ldrb	r3, [r7, #11]
 800310a:	2b0a      	cmp	r3, #10
 800310c:	d008      	beq.n	8003120 <u8x8_d_st7565_nhd_c12864+0x3c>
 800310e:	2b0d      	cmp	r3, #13
 8003110:	d00e      	beq.n	8003130 <u8x8_d_st7565_nhd_c12864+0x4c>
 8003112:	2b09      	cmp	r3, #9
 8003114:	d125      	bne.n	8003162 <u8x8_d_st7565_nhd_c12864+0x7e>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_nhd_c12864_display_info);
 8003116:	4917      	ldr	r1, [pc, #92]	; (8003174 <u8x8_d_st7565_nhd_c12864+0x90>)
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 f833 	bl	8003184 <u8x8_d_helper_display_setup_memory>
	break;
 800311e:	e023      	b.n	8003168 <u8x8_d_st7565_nhd_c12864+0x84>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 f842 	bl	80031aa <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_nhd_c12864_init_seq);
 8003126:	4914      	ldr	r1, [pc, #80]	; (8003178 <u8x8_d_st7565_nhd_c12864+0x94>)
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f7ff febf 	bl	8002eac <u8x8_cad_SendSequence>
	break;
 800312e:	e01b      	b.n	8003168 <u8x8_d_st7565_nhd_c12864+0x84>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
 8003130:	7abb      	ldrb	r3, [r7, #10]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10a      	bne.n	800314c <u8x8_d_st7565_nhd_c12864+0x68>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 8003136:	4911      	ldr	r1, [pc, #68]	; (800317c <u8x8_d_st7565_nhd_c12864+0x98>)
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f7ff feb7 	bl	8002eac <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	7c9a      	ldrb	r2, [r3, #18]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
	}	
	break;
 800314a:	e00d      	b.n	8003168 <u8x8_d_st7565_nhd_c12864+0x84>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 800314c:	490c      	ldr	r1, [pc, #48]	; (8003180 <u8x8_d_st7565_nhd_c12864+0x9c>)
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f7ff feac 	bl	8002eac <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	7cda      	ldrb	r2, [r3, #19]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	break;
 8003160:	e002      	b.n	8003168 <u8x8_d_st7565_nhd_c12864+0x84>
      default:
	return 0;		/* msg unknown */
 8003162:	2300      	movs	r3, #0
 8003164:	e001      	b.n	800316a <u8x8_d_st7565_nhd_c12864+0x86>
    }
  }
 8003166:	bf00      	nop
  return 1;
 8003168:	2301      	movs	r3, #1
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	080159a8 	.word	0x080159a8
 8003178:	080159c0 	.word	0x080159c0
 800317c:	08015998 	.word	0x08015998
 8003180:	080159a0 	.word	0x080159a0

08003184 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	7c9a      	ldrb	r2, [r3, #18]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr

080031aa <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80031aa:	b590      	push	{r4, r7, lr}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695c      	ldr	r4, [r3, #20]
 80031b6:	2300      	movs	r3, #0
 80031b8:	2200      	movs	r2, #0
 80031ba:	2128      	movs	r1, #40	; 0x28
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68dc      	ldr	r4, [r3, #12]
 80031c4:	2300      	movs	r3, #0
 80031c6:	2200      	movs	r2, #0
 80031c8:	2114      	movs	r1, #20
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80031ce:	2201      	movs	r2, #1
 80031d0:	214b      	movs	r1, #75	; 0x4b
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f886 	bl	80032e4 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	791b      	ldrb	r3, [r3, #4]
 80031de:	461a      	mov	r2, r3
 80031e0:	2129      	movs	r1, #41	; 0x29
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f87e 	bl	80032e4 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80031e8:	2200      	movs	r2, #0
 80031ea:	214b      	movs	r1, #75	; 0x4b
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f879 	bl	80032e4 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	791b      	ldrb	r3, [r3, #4]
 80031f8:	461a      	mov	r2, r3
 80031fa:	2129      	movs	r1, #41	; 0x29
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f871 	bl	80032e4 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8003202:	2201      	movs	r2, #1
 8003204:	214b      	movs	r1, #75	; 0x4b
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f86c 	bl	80032e4 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	795b      	ldrb	r3, [r3, #5]
 8003212:	461a      	mov	r2, r3
 8003214:	2129      	movs	r1, #41	; 0x29
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f864 	bl	80032e4 <u8x8_gpio_call>
}    
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	bd90      	pop	{r4, r7, pc}

08003224 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8003224:	b590      	push	{r4, r7, lr}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	4608      	mov	r0, r1
 800322e:	4611      	mov	r1, r2
 8003230:	461a      	mov	r2, r3
 8003232:	4603      	mov	r3, r0
 8003234:	70fb      	strb	r3, [r7, #3]
 8003236:	460b      	mov	r3, r1
 8003238:	70bb      	strb	r3, [r7, #2]
 800323a:	4613      	mov	r3, r2
 800323c:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8003242:	78bb      	ldrb	r3, [r7, #2]
 8003244:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8003246:	787b      	ldrb	r3, [r7, #1]
 8003248:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689c      	ldr	r4, [r3, #8]
 8003252:	f107 0308 	add.w	r3, r7, #8
 8003256:	2201      	movs	r2, #1
 8003258:	210f      	movs	r1, #15
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	47a0      	blx	r4
 800325e:	4603      	mov	r3, r0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	bd90      	pop	{r4, r7, pc}

08003268 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8003268:	b590      	push	{r4, r7, lr}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689c      	ldr	r4, [r3, #8]
 8003274:	2300      	movs	r3, #0
 8003276:	2200      	movs	r2, #0
 8003278:	2109      	movs	r1, #9
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	47a0      	blx	r4
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	bd90      	pop	{r4, r7, pc}

08003286 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8003286:	b590      	push	{r4, r7, lr}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689c      	ldr	r4, [r3, #8]
 8003292:	2300      	movs	r3, #0
 8003294:	2200      	movs	r2, #0
 8003296:	210a      	movs	r1, #10
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	47a0      	blx	r4
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd90      	pop	{r4, r7, pc}

080032a4 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80032a4:	b590      	push	{r4, r7, lr}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689c      	ldr	r4, [r3, #8]
 80032b4:	78fa      	ldrb	r2, [r7, #3]
 80032b6:	2300      	movs	r3, #0
 80032b8:	210b      	movs	r1, #11
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	47a0      	blx	r4
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd90      	pop	{r4, r7, pc}

080032c6 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80032c6:	b590      	push	{r4, r7, lr}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689c      	ldr	r4, [r3, #8]
 80032d2:	2300      	movs	r3, #0
 80032d4:	2200      	movs	r2, #0
 80032d6:	2110      	movs	r1, #16
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	47a0      	blx	r4
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd90      	pop	{r4, r7, pc}

080032e4 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80032e4:	b590      	push	{r4, r7, lr}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	70fb      	strb	r3, [r7, #3]
 80032f0:	4613      	mov	r3, r2
 80032f2:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	695c      	ldr	r4, [r3, #20]
 80032f8:	78ba      	ldrb	r2, [r7, #2]
 80032fa:	78f9      	ldrb	r1, [r7, #3]
 80032fc:	2300      	movs	r3, #0
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	47a0      	blx	r4
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	bd90      	pop	{r4, r7, pc}

0800330a <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800330a:	b480      	push	{r7}
 800330c:	b085      	sub	sp, #20
 800330e:	af00      	add	r7, sp, #0
 8003310:	60f8      	str	r0, [r7, #12]
 8003312:	607b      	str	r3, [r7, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	72fb      	strb	r3, [r7, #11]
 8003318:	4613      	mov	r3, r2
 800331a:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr

08003328 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a11      	ldr	r2, [pc, #68]	; (8003380 <u8x8_SetupDefaults+0x58>)
 800333a:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a10      	ldr	r2, [pc, #64]	; (8003380 <u8x8_SetupDefaults+0x58>)
 8003340:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a0e      	ldr	r2, [pc, #56]	; (8003380 <u8x8_SetupDefaults+0x58>)
 8003346:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a0d      	ldr	r2, [pc, #52]	; (8003380 <u8x8_SetupDefaults+0x58>)
 800334c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	22ff      	movs	r2, #255	; 0xff
 8003368:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	22ff      	movs	r2, #255	; 0xff
 8003370:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	bc80      	pop	{r7}
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	0800330b 	.word	0x0800330b

08003384 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
 8003390:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f7ff ffc8 	bl	8003328 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f7ff ff59 	bl	8003268 <u8x8_SetupMemory>
}
 80033b6:	bf00      	nop
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <_ZN11ChronoTimerC1Eh>:
 *      Author: deo
 */

#include <ChronoTimer.h>

ChronoTimer::ChronoTimer(uint8_t Resolution)
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
 80033c6:	460b      	mov	r3, r1
 80033c8:	70fb      	strb	r3, [r7, #3]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	701a      	strb	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	609a      	str	r2, [r3, #8]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	60da      	str	r2, [r3, #12]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	741a      	strb	r2, [r3, #16]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	745a      	strb	r2, [r3, #17]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	749a      	strb	r2, [r3, #18]
{
	if(Resolution <= HOURS)
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	2b03      	cmp	r3, #3
 80033f8:	d802      	bhi.n	8003400 <_ZN11ChronoTimerC1Eh+0x42>
		resolution = Resolution;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	701a      	strb	r2, [r3, #0]
}
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4618      	mov	r0, r3
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr

0800340c <_ZN11ChronoTimer8setTimerEm>:

void ChronoTimer::setTimer(uint32_t SetDelay)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
	if(oldSettedDelay != SetDelay)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	429a      	cmp	r2, r3
 800341e:	d031      	beq.n	8003484 <_ZN11ChronoTimer8setTimerEm+0x78>
	{
		switch(resolution)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b03      	cmp	r3, #3
 8003426:	d826      	bhi.n	8003476 <_ZN11ChronoTimer8setTimerEm+0x6a>
 8003428:	a201      	add	r2, pc, #4	; (adr r2, 8003430 <_ZN11ChronoTimer8setTimerEm+0x24>)
 800342a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342e:	bf00      	nop
 8003430:	08003441 	.word	0x08003441
 8003434:	08003449 	.word	0x08003449
 8003438:	08003459 	.word	0x08003459
 800343c:	08003469 	.word	0x08003469
		{
		case MILLIS:
			timeDelay = SetDelay;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	605a      	str	r2, [r3, #4]
			break;
 8003446:	e017      	b.n	8003478 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case SECONDS:
			timeDelay = SetDelay * 1000;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800344e:	fb02 f203 	mul.w	r2, r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	605a      	str	r2, [r3, #4]
			break;
 8003456:	e00f      	b.n	8003478 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case MINUTE:
			timeDelay = SetDelay * 1000 * 60;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	f64e 2260 	movw	r2, #60000	; 0xea60
 800345e:	fb02 f203 	mul.w	r2, r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	605a      	str	r2, [r3, #4]
			break;
 8003466:	e007      	b.n	8003478 <_ZN11ChronoTimer8setTimerEm+0x6c>
		case HOURS:
			timeDelay = SetDelay * 1000 * 3600;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	4a09      	ldr	r2, [pc, #36]	; (8003490 <_ZN11ChronoTimer8setTimerEm+0x84>)
 800346c:	fb02 f203 	mul.w	r2, r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	605a      	str	r2, [r3, #4]
			break;
 8003474:	e000      	b.n	8003478 <_ZN11ChronoTimer8setTimerEm+0x6c>
		default:
			break;
 8003476:	bf00      	nop
		}
		isSetted = true;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	741a      	strb	r2, [r3, #16]
		oldSettedDelay = SetDelay;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	609a      	str	r2, [r3, #8]
	}

}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	bc80      	pop	{r7}
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	0036ee80 	.word	0x0036ee80

08003494 <_ZN11ChronoTimer10startTimerEv>:

void ChronoTimer::startTimer()
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
	if(isStopped && isSetted)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	7c9b      	ldrb	r3, [r3, #18]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00e      	beq.n	80034c2 <_ZN11ChronoTimer10startTimerEv+0x2e>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	7c1b      	ldrb	r3, [r3, #16]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00a      	beq.n	80034c2 <_ZN11ChronoTimer10startTimerEv+0x2e>
	{
		isStarted = true;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	745a      	strb	r2, [r3, #17]
		isStopped = false;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	749a      	strb	r2, [r3, #18]
		getTick = HAL_GetTick();
 80034b8:	f009 f8e6 	bl	800c688 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	60da      	str	r2, [r3, #12]
	}
}
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <_ZN11ChronoTimer9stopTimerEv>:

void ChronoTimer::stopTimer()
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
	if(isStarted)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	7c5b      	ldrb	r3, [r3, #17]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d008      	beq.n	80034ec <_ZN11ChronoTimer9stopTimerEv+0x22>
	{
		isStarted = false;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	745a      	strb	r2, [r3, #17]
		isStopped = true;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	749a      	strb	r2, [r3, #18]
		getTick = 0;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	60da      	str	r2, [r3, #12]
	}
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr

080034f6 <_ZN11ChronoTimer7restartEv>:

void ChronoTimer::restart()
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b082      	sub	sp, #8
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
	stopTimer();
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff ffe3 	bl	80034ca <_ZN11ChronoTimer9stopTimerEv>
	startTimer();
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7ff ffc5 	bl	8003494 <_ZN11ChronoTimer10startTimerEv>
}
 800350a:	bf00      	nop
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <_ZN11ChronoTimer10isFinishedEbm>:

bool ChronoTimer::isFinished(bool Restart, uint32_t DelayReset)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b086      	sub	sp, #24
 8003516:	af00      	add	r7, sp, #0
 8003518:	60f8      	str	r0, [r7, #12]
 800351a:	460b      	mov	r3, r1
 800351c:	607a      	str	r2, [r7, #4]
 800351e:	72fb      	strb	r3, [r7, #11]
	bool Finish = false;
 8003520:	2300      	movs	r3, #0
 8003522:	75fb      	strb	r3, [r7, #23]
	if(DelayReset > 0)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <_ZN11ChronoTimer10isFinishedEbm+0x20>
	{
		setTimer(DelayReset);
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f7ff ff6d 	bl	800340c <_ZN11ChronoTimer8setTimerEm>
	}
	startTimer();
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f7ff ffae 	bl	8003494 <_ZN11ChronoTimer10startTimerEv>
	if(HAL_GetTick() - getTick >= timeDelay)
 8003538:	f009 f8a6 	bl	800c688 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	1ad2      	subs	r2, r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	429a      	cmp	r2, r3
 800354a:	bf2c      	ite	cs
 800354c:	2301      	movcs	r3, #1
 800354e:	2300      	movcc	r3, #0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <_ZN11ChronoTimer10isFinishedEbm+0x48>
	{
		Finish = true;
 8003556:	2301      	movs	r3, #1
 8003558:	75fb      	strb	r3, [r7, #23]
	}
	if(Restart && Finish)
 800355a:	7afb      	ldrb	r3, [r7, #11]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <_ZN11ChronoTimer10isFinishedEbm+0x5a>
 8003560:	7dfb      	ldrb	r3, [r7, #23]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <_ZN11ChronoTimer10isFinishedEbm+0x5a>
	{
		restart();
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f7ff ffc5 	bl	80034f6 <_ZN11ChronoTimer7restartEv>
	}
	return Finish;
 800356c:	7dfb      	ldrb	r3, [r7, #23]
}
 800356e:	4618      	mov	r0, r3
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af02      	add	r7, sp, #8
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	4b04      	ldr	r3, [pc, #16]	; (800359c <_ZNSt7__cxx119to_stringEi+0x24>)
 800358a:	2210      	movs	r2, #16
 800358c:	4904      	ldr	r1, [pc, #16]	; (80035a0 <_ZNSt7__cxx119to_stringEi+0x28>)
 800358e:	f000 fd45 	bl	800401c <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	080126fc 	.word	0x080126fc
 80035a0:	0801206d 	.word	0x0801206d

080035a4 <_ZL7bcd2binh>:
   values as BCD.
    @param val BCD value
    @return Binary value
*/
/**************************************************************************/
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	71fb      	strb	r3, [r7, #7]
 80035ae:	79fb      	ldrb	r3, [r7, #7]
 80035b0:	111b      	asrs	r3, r3, #4
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	461a      	mov	r2, r3
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	79fb      	ldrb	r3, [r7, #7]
 80035c0:	4413      	add	r3, r2
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	4618      	mov	r0, r3
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bc80      	pop	{r7}
 80035cc:	4770      	bx	lr
	...

080035d0 <_ZL7bin2bcdh>:
    @brief  Convert a binary value to BCD format for the RTC registers
    @param val Binary value
    @return BCD value
*/
/**************************************************************************/
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	4603      	mov	r3, r0
 80035d8:	71fb      	strb	r3, [r7, #7]
 80035da:	79fb      	ldrb	r3, [r7, #7]
 80035dc:	4a08      	ldr	r2, [pc, #32]	; (8003600 <_ZL7bin2bcdh+0x30>)
 80035de:	fba2 2303 	umull	r2, r3, r2, r3
 80035e2:	08db      	lsrs	r3, r3, #3
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	461a      	mov	r2, r3
 80035e8:	0052      	lsls	r2, r2, #1
 80035ea:	4413      	add	r3, r2
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	79fb      	ldrb	r3, [r7, #7]
 80035f2:	4413      	add	r3, r2
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	4618      	mov	r0, r3
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr
 8003600:	cccccccd 	.word	0xcccccccd

08003604 <_ZN10DS1307_RTC18devAddressLShiftedEv>:
  return t; // @suppress("Return with parenthesis")
}


uint16_t DS1307_RTC::devAddressLShifted()
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
	return ds1307Address << 1;
 800360c:	23d0      	movs	r3, #208	; 0xd0
}
 800360e:	4618      	mov	r0, r3
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr

08003618 <_ZN10DS1307_RTC12clearI2CBuffEv>:

void DS1307_RTC::clearI2CBuff()
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
	memset(i2cBuffer, 0x00, BUFFER_LEN);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2220      	movs	r2, #32
 8003624:	2100      	movs	r1, #0
 8003626:	4618      	mov	r0, r3
 8003628:	f00e fb2d 	bl	8011c86 <memset>
	i2cBufferIndex = 0;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2020 	strb.w	r2, [r3, #32]
}
 8003634:	bf00      	nop
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <_ZN10DS1307_RTCC1Ev>:

DS1307_RTC::DS1307_RTC()
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2020 	strb.w	r2, [r3, #32]
{

}
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4618      	mov	r0, r3
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	bc80      	pop	{r7}
 8003656:	4770      	bx	lr

08003658 <_ZN10DS1307_RTC5setupEv>:

void DS1307_RTC::setup()
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af02      	add	r7, sp, #8
 800365e:	6078      	str	r0, [r7, #4]
	clearI2CBuff();
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7ff ffd9 	bl	8003618 <_ZN10DS1307_RTC12clearI2CBuffEv>
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), i2cBuffer, 0, 1);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7ff ffcc 	bl	8003604 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 800366c:	4603      	mov	r3, r0
 800366e:	4619      	mov	r1, r3
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	2301      	movs	r3, #1
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	2300      	movs	r3, #0
 8003678:	4803      	ldr	r0, [pc, #12]	; (8003688 <_ZN10DS1307_RTC5setupEv+0x30>)
 800367a:	f00a fcad 	bl	800dfd8 <HAL_I2C_Master_Transmit>
}
 800367e:	bf00      	nop
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	20000704 	.word	0x20000704

0800368c <_ZN10DS1307_RTC9isRunningEv>:



bool DS1307_RTC::isRunning()
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b088      	sub	sp, #32
 8003690:	af02      	add	r7, sp, #8
 8003692:	6078      	str	r0, [r7, #4]
	bool Live = false;
 8003694:	2300      	movs	r3, #0
 8003696:	75fb      	strb	r3, [r7, #23]
	uint8_t RxData = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	75bb      	strb	r3, [r7, #22]
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), 0, 1, 1);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff ffb1 	bl	8003604 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 80036a2:	4603      	mov	r3, r0
 80036a4:	4619      	mov	r1, r3
 80036a6:	2301      	movs	r3, #1
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	2301      	movs	r3, #1
 80036ac:	2200      	movs	r2, #0
 80036ae:	4823      	ldr	r0, [pc, #140]	; (800373c <_ZN10DS1307_RTC9isRunningEv+0xb0>)
 80036b0:	f00a fc92 	bl	800dfd8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, devAddressLShifted(), i2cBuffer, 1, 1);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7ff ffa5 	bl	8003604 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 80036ba:	4603      	mov	r3, r0
 80036bc:	4619      	mov	r1, r3
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	2301      	movs	r3, #1
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	2301      	movs	r3, #1
 80036c6:	481d      	ldr	r0, [pc, #116]	; (800373c <_ZN10DS1307_RTC9isRunningEv+0xb0>)
 80036c8:	f00a fd84 	bl	800e1d4 <HAL_I2C_Master_Receive>
	RxData = i2cBuffer[0];
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	75bb      	strb	r3, [r7, #22]
	clearI2CBuff();
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7ff ffa0 	bl	8003618 <_ZN10DS1307_RTC12clearI2CBuffEv>
	if(RxData >> 7 == 0x00)
 80036d8:	7dbb      	ldrb	r3, [r7, #22]
 80036da:	11db      	asrs	r3, r3, #7
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <_ZN10DS1307_RTC9isRunningEv+0x58>
	{
		Live = true;
 80036e0:	2301      	movs	r3, #1
 80036e2:	75fb      	strb	r3, [r7, #23]
	}
	if(Live)
 80036e4:	7dfb      	ldrb	r3, [r7, #23]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d022      	beq.n	8003730 <_ZN10DS1307_RTC9isRunningEv+0xa4>
	{
		TIME_DATE_T ReadTime;
		getTimeDate(ReadTime);
 80036ea:	f107 030c 	add.w	r3, r7, #12
 80036ee:	4619      	mov	r1, r3
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f8cf 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
		if(ReadTime.year == 0  && ReadTime.month == 0  && ReadTime.day == 0)
 80036f6:	8a7b      	ldrh	r3, [r7, #18]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d119      	bne.n	8003730 <_ZN10DS1307_RTC9isRunningEv+0xa4>
 80036fc:	7c3b      	ldrb	r3, [r7, #16]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d116      	bne.n	8003730 <_ZN10DS1307_RTC9isRunningEv+0xa4>
 8003702:	7bfb      	ldrb	r3, [r7, #15]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d113      	bne.n	8003730 <_ZN10DS1307_RTC9isRunningEv+0xa4>
		{
			ReadTime.hour = 0;
 8003708:	2300      	movs	r3, #0
 800370a:	73bb      	strb	r3, [r7, #14]
			ReadTime.minute = 0;
 800370c:	2300      	movs	r3, #0
 800370e:	737b      	strb	r3, [r7, #13]
			ReadTime.second = 0;
 8003710:	2300      	movs	r3, #0
 8003712:	733b      	strb	r3, [r7, #12]
			ReadTime.day = 1;
 8003714:	2301      	movs	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
			ReadTime.month = 1;
 8003718:	2301      	movs	r3, #1
 800371a:	743b      	strb	r3, [r7, #16]
			ReadTime.year = 2020;
 800371c:	f240 73e4 	movw	r3, #2020	; 0x7e4
 8003720:	827b      	strh	r3, [r7, #18]
			adjustTimeDate(ReadTime);
 8003722:	f107 030c 	add.w	r3, r7, #12
 8003726:	e893 0006 	ldmia.w	r3, {r1, r2}
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f808 	bl	8003740 <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>
		}
	}
	return Live;
 8003730:	7dfb      	ldrb	r3, [r7, #23]
}
 8003732:	4618      	mov	r0, r3
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	20000704 	.word	0x20000704

08003740 <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>:



void DS1307_RTC::adjustTimeDate(TIME_DATE_T AdjustVar)
{
 8003740:	b590      	push	{r4, r7, lr}
 8003742:	b087      	sub	sp, #28
 8003744:	af02      	add	r7, sp, #8
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	1d3b      	adds	r3, r7, #4
 800374a:	e883 0006 	stmia.w	r3, {r1, r2}
	clearI2CBuff();
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f7ff ff62 	bl	8003618 <_ZN10DS1307_RTC12clearI2CBuffEv>
	i2cBuffer[i2cBufferIndex++] = 0;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f893 3020 	ldrb.w	r3, [r3, #32]
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	b2d1      	uxtb	r1, r2
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	f882 1020 	strb.w	r1, [r2, #32]
 8003764:	461a      	mov	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2100      	movs	r1, #0
 800376a:	5499      	strb	r1, [r3, r2]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.second);
 800376c:	7939      	ldrb	r1, [r7, #4]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	b2d0      	uxtb	r0, r2
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	f882 0020 	strb.w	r0, [r2, #32]
 800377e:	461c      	mov	r4, r3
 8003780:	4608      	mov	r0, r1
 8003782:	f7ff ff25 	bl	80035d0 <_ZL7bin2bcdh>
 8003786:	4603      	mov	r3, r0
 8003788:	461a      	mov	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.minute);
 800378e:	7979      	ldrb	r1, [r7, #5]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	b2d0      	uxtb	r0, r2
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	f882 0020 	strb.w	r0, [r2, #32]
 80037a0:	461c      	mov	r4, r3
 80037a2:	4608      	mov	r0, r1
 80037a4:	f7ff ff14 	bl	80035d0 <_ZL7bin2bcdh>
 80037a8:	4603      	mov	r3, r0
 80037aa:	461a      	mov	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.hour);
 80037b0:	79b9      	ldrb	r1, [r7, #6]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	b2d0      	uxtb	r0, r2
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	f882 0020 	strb.w	r0, [r2, #32]
 80037c2:	461c      	mov	r4, r3
 80037c4:	4608      	mov	r0, r1
 80037c6:	f7ff ff03 	bl	80035d0 <_ZL7bin2bcdh>
 80037ca:	4603      	mov	r3, r0
 80037cc:	461a      	mov	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(0);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037d8:	1c5a      	adds	r2, r3, #1
 80037da:	b2d1      	uxtb	r1, r2
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	f882 1020 	strb.w	r1, [r2, #32]
 80037e2:	461c      	mov	r4, r3
 80037e4:	2000      	movs	r0, #0
 80037e6:	f7ff fef3 	bl	80035d0 <_ZL7bin2bcdh>
 80037ea:	4603      	mov	r3, r0
 80037ec:	461a      	mov	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.day);
 80037f2:	79f9      	ldrb	r1, [r7, #7]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	b2d0      	uxtb	r0, r2
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	f882 0020 	strb.w	r0, [r2, #32]
 8003804:	461c      	mov	r4, r3
 8003806:	4608      	mov	r0, r1
 8003808:	f7ff fee2 	bl	80035d0 <_ZL7bin2bcdh>
 800380c:	4603      	mov	r3, r0
 800380e:	461a      	mov	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.month);
 8003814:	7a39      	ldrb	r1, [r7, #8]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f893 3020 	ldrb.w	r3, [r3, #32]
 800381c:	1c5a      	adds	r2, r3, #1
 800381e:	b2d0      	uxtb	r0, r2
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	f882 0020 	strb.w	r0, [r2, #32]
 8003826:	461c      	mov	r4, r3
 8003828:	4608      	mov	r0, r1
 800382a:	f7ff fed1 	bl	80035d0 <_ZL7bin2bcdh>
 800382e:	4603      	mov	r3, r0
 8003830:	461a      	mov	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	551a      	strb	r2, [r3, r4]
	i2cBuffer[i2cBufferIndex++] = bin2bcd(AdjustVar.year - 2000);
 8003836:	897b      	ldrh	r3, [r7, #10]
 8003838:	b2db      	uxtb	r3, r3
 800383a:	3330      	adds	r3, #48	; 0x30
 800383c:	b2d9      	uxtb	r1, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003844:	1c5a      	adds	r2, r3, #1
 8003846:	b2d0      	uxtb	r0, r2
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	f882 0020 	strb.w	r0, [r2, #32]
 800384e:	461c      	mov	r4, r3
 8003850:	4608      	mov	r0, r1
 8003852:	f7ff febd 	bl	80035d0 <_ZL7bin2bcdh>
 8003856:	4603      	mov	r3, r0
 8003858:	461a      	mov	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	551a      	strb	r2, [r3, r4]
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), i2cBuffer, i2cBufferIndex, 1);
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f7ff fed0 	bl	8003604 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 8003864:	4603      	mov	r3, r0
 8003866:	4618      	mov	r0, r3
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003870:	b299      	uxth	r1, r3
 8003872:	2301      	movs	r3, #1
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	460b      	mov	r3, r1
 8003878:	4601      	mov	r1, r0
 800387a:	4805      	ldr	r0, [pc, #20]	; (8003890 <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE+0x150>)
 800387c:	f00a fbac 	bl	800dfd8 <HAL_I2C_Master_Transmit>
	clearI2CBuff();
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f7ff fec9 	bl	8003618 <_ZN10DS1307_RTC12clearI2CBuffEv>
}
 8003886:	bf00      	nop
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	bd90      	pop	{r4, r7, pc}
 800388e:	bf00      	nop
 8003890:	20000704 	.word	0x20000704

08003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>:

void DS1307_RTC::getTimeDate(TIME_DATE_T &RetTimeDate)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af02      	add	r7, sp, #8
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
	clearI2CBuff();
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7ff feba 	bl	8003618 <_ZN10DS1307_RTC12clearI2CBuffEv>
	HAL_I2C_Master_Transmit(&hi2c1, devAddressLShifted(), 0, 1, 1);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7ff fead 	bl	8003604 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 80038aa:	4603      	mov	r3, r0
 80038ac:	4619      	mov	r1, r3
 80038ae:	2301      	movs	r3, #1
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	2301      	movs	r3, #1
 80038b4:	2200      	movs	r2, #0
 80038b6:	4848      	ldr	r0, [pc, #288]	; (80039d8 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE+0x144>)
 80038b8:	f00a fb8e 	bl	800dfd8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, devAddressLShifted(), i2cBuffer, 7, 1);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff fea1 	bl	8003604 <_ZN10DS1307_RTC18devAddressLShiftedEv>
 80038c2:	4603      	mov	r3, r0
 80038c4:	4619      	mov	r1, r3
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	2301      	movs	r3, #1
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	2307      	movs	r3, #7
 80038ce:	4842      	ldr	r0, [pc, #264]	; (80039d8 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE+0x144>)
 80038d0:	f00a fc80 	bl	800e1d4 <HAL_I2C_Master_Receive>
	RetTimeDate.second = bcd2bin(i2cBuffer[i2cBufferIndex++] & 0x7F);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	b2d1      	uxtb	r1, r2
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	f882 1020 	strb.w	r1, [r2, #32]
 80038e4:	461a      	mov	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	5c9b      	ldrb	r3, [r3, r2]
 80038ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff fe57 	bl	80035a4 <_ZL7bcd2binh>
 80038f6:	4603      	mov	r3, r0
 80038f8:	461a      	mov	r2, r3
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	701a      	strb	r2, [r3, #0]
	RetTimeDate.minute = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003904:	1c5a      	adds	r2, r3, #1
 8003906:	b2d1      	uxtb	r1, r2
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	f882 1020 	strb.w	r1, [r2, #32]
 800390e:	461a      	mov	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	5c9b      	ldrb	r3, [r3, r2]
 8003914:	4618      	mov	r0, r3
 8003916:	f7ff fe45 	bl	80035a4 <_ZL7bcd2binh>
 800391a:	4603      	mov	r3, r0
 800391c:	461a      	mov	r2, r3
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	705a      	strb	r2, [r3, #1]
	RetTimeDate.hour = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	b2d1      	uxtb	r1, r2
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	f882 1020 	strb.w	r1, [r2, #32]
 8003932:	461a      	mov	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	5c9b      	ldrb	r3, [r3, r2]
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff fe33 	bl	80035a4 <_ZL7bcd2binh>
 800393e:	4603      	mov	r3, r0
 8003940:	461a      	mov	r2, r3
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	709a      	strb	r2, [r3, #2]
	i2cBufferIndex++;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3020 	ldrb.w	r3, [r3, #32]
 800394c:	3301      	adds	r3, #1
 800394e:	b2da      	uxtb	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f883 2020 	strb.w	r2, [r3, #32]
	RetTimeDate.day = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 3020 	ldrb.w	r3, [r3, #32]
 800395c:	1c5a      	adds	r2, r3, #1
 800395e:	b2d1      	uxtb	r1, r2
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	f882 1020 	strb.w	r1, [r2, #32]
 8003966:	461a      	mov	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	5c9b      	ldrb	r3, [r3, r2]
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff fe19 	bl	80035a4 <_ZL7bcd2binh>
 8003972:	4603      	mov	r3, r0
 8003974:	461a      	mov	r2, r3
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	70da      	strb	r2, [r3, #3]
	RetTimeDate.month = bcd2bin(i2cBuffer[i2cBufferIndex++]);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	b2d1      	uxtb	r1, r2
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	f882 1020 	strb.w	r1, [r2, #32]
 800398a:	461a      	mov	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	5c9b      	ldrb	r3, [r3, r2]
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff fe07 	bl	80035a4 <_ZL7bcd2binh>
 8003996:	4603      	mov	r3, r0
 8003998:	461a      	mov	r2, r3
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	711a      	strb	r2, [r3, #4]
	RetTimeDate.year = bcd2bin(i2cBuffer[i2cBufferIndex++]) + 2000;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	b2d1      	uxtb	r1, r2
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	f882 1020 	strb.w	r1, [r2, #32]
 80039ae:	461a      	mov	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	5c9b      	ldrb	r3, [r3, r2]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff fdf5 	bl	80035a4 <_ZL7bcd2binh>
 80039ba:	4603      	mov	r3, r0
 80039bc:	b29b      	uxth	r3, r3
 80039be:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	80da      	strh	r2, [r3, #6]
	clearI2CBuff();
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7ff fe25 	bl	8003618 <_ZN10DS1307_RTC12clearI2CBuffEv>
}
 80039ce:	bf00      	nop
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20000704 	.word	0x20000704

080039dc <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh>:

String DS1307_RTC::getTimeDateStr(uint8_t FormatType)
{
 80039dc:	b590      	push	{r4, r7, lr}
 80039de:	f5ad 7d73 	sub.w	sp, sp, #972	; 0x3cc
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	f107 030c 	add.w	r3, r7, #12
 80039e8:	6018      	str	r0, [r3, #0]
 80039ea:	f107 0308 	add.w	r3, r7, #8
 80039ee:	6019      	str	r1, [r3, #0]
 80039f0:	1dfb      	adds	r3, r7, #7
 80039f2:	701a      	strb	r2, [r3, #0]
	String second, minute, hour, day, month, year, RetStr = "Wrong type";
 80039f4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80039f8:	4618      	mov	r0, r3
 80039fa:	f00d fe3f 	bl	801167c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80039fe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003a02:	4618      	mov	r0, r3
 8003a04:	f00d fe3a 	bl	801167c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a08:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f00d fe35 	bl	801167c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a12:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a16:	4618      	mov	r0, r3
 8003a18:	f00d fe30 	bl	801167c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a20:	4618      	mov	r0, r3
 8003a22:	f00d fe2b 	bl	801167c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a26:	f107 031c 	add.w	r3, r7, #28
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f00d fe26 	bl	801167c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a30:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a34:	4618      	mov	r0, r3
 8003a36:	f00d fd11 	bl	801145c <_ZNSaIcEC1Ev>
 8003a3a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003a3e:	f107 030c 	add.w	r3, r7, #12
 8003a42:	49df      	ldr	r1, [pc, #892]	; (8003dc0 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e4>)
 8003a44:	6818      	ldr	r0, [r3, #0]
 8003a46:	f00d ffd1 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003a4a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f00d fd05 	bl	801145e <_ZNSaIcED1Ev>
	TIME_DATE_T TimeDate;
	getTimeDate(TimeDate);
 8003a54:	f107 0214 	add.w	r2, r7, #20
 8003a58:	f107 0308 	add.w	r3, r7, #8
 8003a5c:	4611      	mov	r1, r2
 8003a5e:	6818      	ldr	r0, [r3, #0]
 8003a60:	f7ff ff18 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
	second = TimeDate.second > 9 ? std::to_string(TimeDate.second) : "0" + std::to_string(TimeDate.second);
 8003a64:	f107 0314 	add.w	r3, r7, #20
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2400      	movs	r4, #0
 8003a6c:	2b09      	cmp	r3, #9
 8003a6e:	d90a      	bls.n	8003a86 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0xaa>
 8003a70:	f107 0314 	add.w	r3, r7, #20
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff fd7a 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8003a84:	e012      	b.n	8003aac <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0xd0>
 8003a86:	f107 0314 	add.w	r3, r7, #20
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003a92:	4611      	mov	r1, r2
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff fd6f 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8003a9a:	2401      	movs	r4, #1
 8003a9c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003aa0:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8003aa4:	49c7      	ldr	r1, [pc, #796]	; (8003dc4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 faf0 	bl	800408c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003aac:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003ab0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003ab4:	4611      	mov	r1, r2
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f00d fe0d 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003abc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f00d fdfc 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003ac6:	2c00      	cmp	r4, #0
 8003ac8:	d004      	beq.n	8003ad4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0xf8>
 8003aca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f00d fdf5 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	minute = TimeDate.minute > 9 ? std::to_string(TimeDate.minute) : "0" + std::to_string(TimeDate.minute);
 8003ad4:	f107 0314 	add.w	r3, r7, #20
 8003ad8:	785b      	ldrb	r3, [r3, #1]
 8003ada:	2400      	movs	r4, #0
 8003adc:	2b09      	cmp	r3, #9
 8003ade:	d90a      	bls.n	8003af6 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x11a>
 8003ae0:	f107 0314 	add.w	r3, r7, #20
 8003ae4:	785b      	ldrb	r3, [r3, #1]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003aec:	4611      	mov	r1, r2
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff fd42 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8003af4:	e012      	b.n	8003b1c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x140>
 8003af6:	f107 0314 	add.w	r3, r7, #20
 8003afa:	785b      	ldrb	r3, [r3, #1]
 8003afc:	461a      	mov	r2, r3
 8003afe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003b02:	4611      	mov	r1, r2
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff fd37 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8003b0a:	2401      	movs	r4, #1
 8003b0c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003b10:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8003b14:	49ab      	ldr	r1, [pc, #684]	; (8003dc4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 fab8 	bl	800408c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003b1c:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8003b20:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003b24:	4611      	mov	r1, r2
 8003b26:	4618      	mov	r0, r3
 8003b28:	f00d fdd5 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003b2c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003b30:	4618      	mov	r0, r3
 8003b32:	f00d fdc4 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003b36:	2c00      	cmp	r4, #0
 8003b38:	d004      	beq.n	8003b44 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x168>
 8003b3a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f00d fdbd 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	hour = TimeDate.hour > 9 ? std::to_string(TimeDate.hour) : "0" + std::to_string(TimeDate.hour);
 8003b44:	f107 0314 	add.w	r3, r7, #20
 8003b48:	789b      	ldrb	r3, [r3, #2]
 8003b4a:	2400      	movs	r4, #0
 8003b4c:	2b09      	cmp	r3, #9
 8003b4e:	d90a      	bls.n	8003b66 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x18a>
 8003b50:	f107 0314 	add.w	r3, r7, #20
 8003b54:	789b      	ldrb	r3, [r3, #2]
 8003b56:	461a      	mov	r2, r3
 8003b58:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b5c:	4611      	mov	r1, r2
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff fd0a 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8003b64:	e012      	b.n	8003b8c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x1b0>
 8003b66:	f107 0314 	add.w	r3, r7, #20
 8003b6a:	789b      	ldrb	r3, [r3, #2]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003b72:	4611      	mov	r1, r2
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7ff fcff 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8003b7a:	2401      	movs	r4, #1
 8003b7c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b80:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8003b84:	498f      	ldr	r1, [pc, #572]	; (8003dc4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 fa80 	bl	800408c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003b8c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003b90:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003b94:	4611      	mov	r1, r2
 8003b96:	4618      	mov	r0, r3
 8003b98:	f00d fd9d 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003b9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f00d fd8c 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003ba6:	2c00      	cmp	r4, #0
 8003ba8:	d004      	beq.n	8003bb4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x1d8>
 8003baa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f00d fd85 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	day = TimeDate.day > 9 ? std::to_string(TimeDate.day) : "0" + std::to_string(TimeDate.day);
 8003bb4:	f107 0314 	add.w	r3, r7, #20
 8003bb8:	78db      	ldrb	r3, [r3, #3]
 8003bba:	2400      	movs	r4, #0
 8003bbc:	2b09      	cmp	r3, #9
 8003bbe:	d90a      	bls.n	8003bd6 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x1fa>
 8003bc0:	f107 0314 	add.w	r3, r7, #20
 8003bc4:	78db      	ldrb	r3, [r3, #3]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003bcc:	4611      	mov	r1, r2
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff fcd2 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8003bd4:	e012      	b.n	8003bfc <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x220>
 8003bd6:	f107 0314 	add.w	r3, r7, #20
 8003bda:	78db      	ldrb	r3, [r3, #3]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003be2:	4611      	mov	r1, r2
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff fcc7 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8003bea:	2401      	movs	r4, #1
 8003bec:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003bf0:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8003bf4:	4973      	ldr	r1, [pc, #460]	; (8003dc4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fa48 	bl	800408c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003bfc:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8003c00:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c04:	4611      	mov	r1, r2
 8003c06:	4618      	mov	r0, r3
 8003c08:	f00d fd65 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003c0c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003c10:	4618      	mov	r0, r3
 8003c12:	f00d fd54 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003c16:	2c00      	cmp	r4, #0
 8003c18:	d004      	beq.n	8003c24 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x248>
 8003c1a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f00d fd4d 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	month = TimeDate.month > 9 ? std::to_string(TimeDate.month) : "0" + std::to_string(TimeDate.month);
 8003c24:	f107 0314 	add.w	r3, r7, #20
 8003c28:	791b      	ldrb	r3, [r3, #4]
 8003c2a:	2400      	movs	r4, #0
 8003c2c:	2b09      	cmp	r3, #9
 8003c2e:	d90a      	bls.n	8003c46 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x26a>
 8003c30:	f107 0314 	add.w	r3, r7, #20
 8003c34:	791b      	ldrb	r3, [r3, #4]
 8003c36:	461a      	mov	r2, r3
 8003c38:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003c3c:	4611      	mov	r1, r2
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff fc9a 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8003c44:	e012      	b.n	8003c6c <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x290>
 8003c46:	f107 0314 	add.w	r3, r7, #20
 8003c4a:	791b      	ldrb	r3, [r3, #4]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003c52:	4611      	mov	r1, r2
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff fc8f 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8003c5a:	2401      	movs	r4, #1
 8003c5c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003c60:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8003c64:	4957      	ldr	r1, [pc, #348]	; (8003dc4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3e8>)
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 fa10 	bl	800408c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003c6c:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8003c70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003c74:	4611      	mov	r1, r2
 8003c76:	4618      	mov	r0, r3
 8003c78:	f00d fd2d 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003c7c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003c80:	4618      	mov	r0, r3
 8003c82:	f00d fd1c 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003c86:	2c00      	cmp	r4, #0
 8003c88:	d004      	beq.n	8003c94 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x2b8>
 8003c8a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f00d fd15 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	year = std::to_string(TimeDate.year % 100);
 8003c94:	f107 0314 	add.w	r3, r7, #20
 8003c98:	88db      	ldrh	r3, [r3, #6]
 8003c9a:	4a4b      	ldr	r2, [pc, #300]	; (8003dc8 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3ec>)
 8003c9c:	fba2 1203 	umull	r1, r2, r2, r3
 8003ca0:	0952      	lsrs	r2, r2, #5
 8003ca2:	2164      	movs	r1, #100	; 0x64
 8003ca4:	fb01 f202 	mul.w	r2, r1, r2
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	461a      	mov	r2, r3
 8003cae:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003cb2:	4611      	mov	r1, r2
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff fc5f 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8003cba:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8003cbe:	f107 031c 	add.w	r3, r7, #28
 8003cc2:	4611      	mov	r1, r2
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f00d fd06 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003cca:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f00d fcf5 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	switch(FormatType)
 8003cd4:	1dfb      	adds	r3, r7, #7
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	2b04      	cmp	r3, #4
 8003cda:	f200 816c 	bhi.w	8003fb6 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5da>
 8003cde:	a201      	add	r2, pc, #4	; (adr r2, 8003ce4 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x308>)
 8003ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce4:	08003cf9 	.word	0x08003cf9
 8003ce8:	08003d77 	.word	0x08003d77
 8003cec:	08003dd1 	.word	0x08003dd1
 8003cf0:	08003e4f 	.word	0x08003e4f
 8003cf4:	08003e97 	.word	0x08003e97
	{
	case ONLY_TIME:
		RetStr = hour + ":" + minute + ":" + second;
 8003cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cfc:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8003d00:	4a32      	ldr	r2, [pc, #200]	; (8003dcc <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3f0>)
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 f9da 	bl	80040bc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003d08:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003d0c:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003d10:	f507 7100 	add.w	r1, r7, #512	; 0x200
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 f9e4 	bl	80040e2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003d1a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003d1e:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8003d22:	4a2a      	ldr	r2, [pc, #168]	; (8003dcc <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3f0>)
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 f9f3 	bl	8004110 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003d2a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003d2e:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8003d32:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 f9d3 	bl	80040e2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003d3c:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 8003d40:	f107 030c 	add.w	r3, r7, #12
 8003d44:	4611      	mov	r1, r2
 8003d46:	6818      	ldr	r0, [r3, #0]
 8003d48:	f00d fcc5 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003d4c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003d50:	4618      	mov	r0, r3
 8003d52:	f00d fcb4 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003d56:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f00d fcaf 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003d60:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003d64:	4618      	mov	r0, r3
 8003d66:	f00d fcaa 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f00d fca5 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003d74:	e120      	b.n	8003fb8 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	case ONLY_TIME_NO_SEC:
		RetStr = hour + ":" + minute;
 8003d76:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003d7a:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8003d7e:	4a13      	ldr	r2, [pc, #76]	; (8003dcc <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x3f0>)
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 f99b 	bl	80040bc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003d86:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003d8a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003d8e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 f9a5 	bl	80040e2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003d98:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8003d9c:	f107 030c 	add.w	r3, r7, #12
 8003da0:	4611      	mov	r1, r2
 8003da2:	6818      	ldr	r0, [r3, #0]
 8003da4:	f00d fc97 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003da8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003dac:	4618      	mov	r0, r3
 8003dae:	f00d fc86 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003db2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003db6:	4618      	mov	r0, r3
 8003db8:	f00d fc81 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003dbc:	e0fc      	b.n	8003fb8 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
 8003dbe:	bf00      	nop
 8003dc0:	08012770 	.word	0x08012770
 8003dc4:	0801277c 	.word	0x0801277c
 8003dc8:	51eb851f 	.word	0x51eb851f
 8003dcc:	08012780 	.word	0x08012780
	case ONLY_DATE:
		RetStr = day + "/" + month + "/" + year;
 8003dd0:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8003dd4:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003dd8:	4a8d      	ldr	r2, [pc, #564]	; (8004010 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 f96e 	bl	80040bc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003de0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8003de4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003de8:	f507 7124 	add.w	r1, r7, #656	; 0x290
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 f978 	bl	80040e2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003df2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003df6:	f507 711e 	add.w	r1, r7, #632	; 0x278
 8003dfa:	4a85      	ldr	r2, [pc, #532]	; (8004010 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 f987 	bl	8004110 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003e02:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003e06:	f107 021c 	add.w	r2, r7, #28
 8003e0a:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 f967 	bl	80040e2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003e14:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8003e18:	f107 030c 	add.w	r3, r7, #12
 8003e1c:	4611      	mov	r1, r2
 8003e1e:	6818      	ldr	r0, [r3, #0]
 8003e20:	f00d fc59 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003e24:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f00d fc48 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e2e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e32:	4618      	mov	r0, r3
 8003e34:	f00d fc43 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e38:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f00d fc3e 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e42:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8003e46:	4618      	mov	r0, r3
 8003e48:	f00d fc39 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003e4c:	e0b4      	b.n	8003fb8 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	case ONLY_DATE_NO_YEAR:
		RetStr = day + "/" + month;
 8003e4e:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8003e52:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003e56:	4a6e      	ldr	r2, [pc, #440]	; (8004010 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 f92f 	bl	80040bc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003e5e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8003e62:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003e66:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 f939 	bl	80040e2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003e70:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8003e74:	f107 030c 	add.w	r3, r7, #12
 8003e78:	4611      	mov	r1, r2
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	f00d fc2b 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003e80:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8003e84:	4618      	mov	r0, r3
 8003e86:	f00d fc1a 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003e8a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f00d fc15 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003e94:	e090      	b.n	8003fb8 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	case TIME_DATE:
		RetStr = hour + ":" + minute + ":" + second + " " + day + "/" + month + "/" + year;
 8003e96:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8003e9a:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8003e9e:	4a5d      	ldr	r2, [pc, #372]	; (8004014 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x638>)
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 f90b 	bl	80040bc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8003ea6:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8003eaa:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003eae:	f507 716c 	add.w	r1, r7, #944	; 0x3b0
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 f915 	bl	80040e2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003eb8:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8003ebc:	f507 7166 	add.w	r1, r7, #920	; 0x398
 8003ec0:	4a54      	ldr	r2, [pc, #336]	; (8004014 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x638>)
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 f924 	bl	8004110 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003ec8:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8003ecc:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8003ed0:	f507 7160 	add.w	r1, r7, #896	; 0x380
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 f904 	bl	80040e2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003eda:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8003ede:	f507 715a 	add.w	r1, r7, #872	; 0x368
 8003ee2:	4a4d      	ldr	r2, [pc, #308]	; (8004018 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x63c>)
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 f913 	bl	8004110 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003eea:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8003eee:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003ef2:	f507 7154 	add.w	r1, r7, #848	; 0x350
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 f8f3 	bl	80040e2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003efc:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003f00:	f507 714e 	add.w	r1, r7, #824	; 0x338
 8003f04:	4a42      	ldr	r2, [pc, #264]	; (8004010 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 f902 	bl	8004110 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003f0c:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003f10:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003f14:	f507 7148 	add.w	r1, r7, #800	; 0x320
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 f8e2 	bl	80040e2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003f1e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003f22:	f507 7142 	add.w	r1, r7, #776	; 0x308
 8003f26:	4a3a      	ldr	r2, [pc, #232]	; (8004010 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x634>)
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 f8f1 	bl	8004110 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003f2e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8003f32:	f107 021c 	add.w	r2, r7, #28
 8003f36:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 f8d1 	bl	80040e2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8003f40:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8003f44:	f107 030c 	add.w	r3, r7, #12
 8003f48:	4611      	mov	r1, r2
 8003f4a:	6818      	ldr	r0, [r3, #0]
 8003f4c:	f00d fbc3 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003f50:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8003f54:	4618      	mov	r0, r3
 8003f56:	f00d fbb2 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003f5a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f00d fbad 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003f64:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f00d fba8 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003f6e:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003f72:	4618      	mov	r0, r3
 8003f74:	f00d fba3 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003f78:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f00d fb9e 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003f82:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8003f86:	4618      	mov	r0, r3
 8003f88:	f00d fb99 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003f8c:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8003f90:	4618      	mov	r0, r3
 8003f92:	f00d fb94 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003f96:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f00d fb8f 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fa0:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f00d fb8a 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003faa:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f00d fb85 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8003fb4:	e000      	b.n	8003fb8 <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh+0x5dc>
	default:
		break;
 8003fb6:	bf00      	nop
	}
	return RetStr;
 8003fb8:	bf00      	nop
	String second, minute, hour, day, month, year, RetStr = "Wrong type";
 8003fba:	f107 031c 	add.w	r3, r7, #28
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f00d fb7d 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fc4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f00d fb78 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f00d fb73 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fd8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f00d fb6e 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fe2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f00d fb69 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003fec:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f00d fb64 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return RetStr;
 8003ff6:	f107 030c 	add.w	r3, r7, #12
 8003ffa:	f107 020c 	add.w	r2, r7, #12
 8003ffe:	6812      	ldr	r2, [r2, #0]
 8004000:	601a      	str	r2, [r3, #0]
}
 8004002:	f107 030c 	add.w	r3, r7, #12
 8004006:	6818      	ldr	r0, [r3, #0]
 8004008:	f507 7773 	add.w	r7, r7, #972	; 0x3cc
 800400c:	46bd      	mov	sp, r7
 800400e:	bd90      	pop	{r4, r7, pc}
 8004010:	08012784 	.word	0x08012784
 8004014:	08012780 	.word	0x08012780
 8004018:	08012788 	.word	0x08012788

0800401c <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 800401c:	b408      	push	{r3}
 800401e:	b590      	push	{r4, r7, lr}
 8004020:	b088      	sub	sp, #32
 8004022:	af00      	add	r7, sp, #0
 8004024:	60f8      	str	r0, [r7, #12]
 8004026:	60b9      	str	r1, [r7, #8]
 8004028:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3307      	adds	r3, #7
 800402e:	3307      	adds	r3, #7
 8004030:	08db      	lsrs	r3, r3, #3
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	ebad 0d03 	sub.w	sp, sp, r3
 8004038:	466b      	mov	r3, sp
 800403a:	3307      	adds	r3, #7
 800403c:	08db      	lsrs	r3, r3, #3
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 8004042:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004046:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 8004048:	68bc      	ldr	r4, [r7, #8]
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800404e:	6879      	ldr	r1, [r7, #4]
 8004050:	69f8      	ldr	r0, [r7, #28]
 8004052:	47a0      	blx	r4
 8004054:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	69fa      	ldr	r2, [r7, #28]
 800405a:	18d4      	adds	r4, r2, r3
 800405c:	f107 0314 	add.w	r3, r7, #20
 8004060:	4618      	mov	r0, r3
 8004062:	f00d f9fb 	bl	801145c <_ZNSaIcEC1Ev>
 8004066:	f107 0314 	add.w	r3, r7, #20
 800406a:	4622      	mov	r2, r4
 800406c:	69f9      	ldr	r1, [r7, #28]
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 f865 	bl	800413e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 8004074:	f107 0314 	add.w	r3, r7, #20
 8004078:	4618      	mov	r0, r3
 800407a:	f00d f9f0 	bl	801145e <_ZNSaIcED1Ev>
    }
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	3720      	adds	r7, #32
 8004082:	46bd      	mov	sp, r7
 8004084:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004088:	b001      	add	sp, #4
 800408a:	4770      	bx	lr

0800408c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	2100      	movs	r1, #0
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f00d fc0f 	bl	80118c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 80040a2:	4603      	mov	r3, r0
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 f865 	bl	8004174 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80040aa:	4603      	mov	r3, r0
 80040ac:	4619      	mov	r1, r3
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f00d faeb 	bl	801168a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
 80040c8:	68b9      	ldr	r1, [r7, #8]
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f00d fc5b 	bl	8011986 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__rhs);
 80040d0:	6879      	ldr	r1, [r7, #4]
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f00d fc2a 	bl	801192c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
      return __str;
 80040d8:	bf00      	nop
    }
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b084      	sub	sp, #16
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	60f8      	str	r0, [r7, #12]
 80040ea:	60b9      	str	r1, [r7, #8]
 80040ec:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	68b8      	ldr	r0, [r7, #8]
 80040f2:	f00d fc15 	bl	8011920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 80040f6:	4603      	mov	r3, r0
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 f83b 	bl	8004174 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80040fe:	4603      	mov	r3, r0
 8004100:	4619      	mov	r1, r3
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f00d fac1 	bl	801168a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	68b8      	ldr	r0, [r7, #8]
 8004120:	f00d fc04 	bl	801192c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8004124:	4603      	mov	r3, r0
 8004126:	4618      	mov	r0, r3
 8004128:	f000 f824 	bl	8004174 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800412c:	4603      	mov	r3, r0
 800412e:	4619      	mov	r1, r3
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f00d faaa 	bl	801168a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 800413e:	b590      	push	{r4, r7, lr}
 8004140:	b085      	sub	sp, #20
 8004142:	af00      	add	r7, sp, #0
 8004144:	60f8      	str	r0, [r7, #12]
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	607a      	str	r2, [r7, #4]
 800414a:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 800414c:	68fc      	ldr	r4, [r7, #12]
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f00d f9bd 	bl	80114ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8004154:	4603      	mov	r3, r0
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	4619      	mov	r1, r3
 800415a:	4620      	mov	r0, r4
 800415c:	f00d fc11 	bl	8011982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	68b9      	ldr	r1, [r7, #8]
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 f80f 	bl	8004188 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	4618      	mov	r0, r3
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	bd90      	pop	{r4, r7, pc}

08004174 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4618      	mov	r0, r3
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	bc80      	pop	{r7}
 8004186:	4770      	bx	lr

08004188 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	68b9      	ldr	r1, [r7, #8]
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f804 	bl	80041a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 800419e:	bf00      	nop
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 80041a6:	b590      	push	{r4, r7, lr}
 80041a8:	b087      	sub	sp, #28
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	60f8      	str	r0, [r7, #12]
 80041ae:	60b9      	str	r1, [r7, #8]
 80041b0:	607a      	str	r2, [r7, #4]
 80041b2:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 80041b4:	4623      	mov	r3, r4
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	68b9      	ldr	r1, [r7, #8]
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 f804 	bl	80041c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 80041c0:	bf00      	nop
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd90      	pop	{r4, r7, pc}

080041c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
 80041d4:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 80041d6:	68b8      	ldr	r0, [r7, #8]
 80041d8:	f000 f83e 	bl	8004258 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d005      	beq.n	80041ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d001      	beq.n	80041ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 80041ee:	2300      	movs	r3, #0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d002      	beq.n	80041fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 80041f4:	4817      	ldr	r0, [pc, #92]	; (8004254 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 80041f6:	f00d f936 	bl	8011466 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	68b8      	ldr	r0, [r7, #8]
 80041fe:	f000 f843 	bl	8004288 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8004202:	4603      	mov	r3, r0
 8004204:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2b0f      	cmp	r3, #15
 800420a:	d910      	bls.n	800422e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 800420c:	f107 0314 	add.w	r3, r7, #20
 8004210:	2200      	movs	r2, #0
 8004212:	4619      	mov	r1, r3
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f00d f963 	bl	80114e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800421a:	4603      	mov	r3, r0
 800421c:	4619      	mov	r1, r3
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f00d f951 	bl	80114c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	4619      	mov	r1, r3
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f00d f952 	bl	80114d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f00d f94b 	bl	80114ca <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8004234:	4603      	mov	r3, r0
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	68b9      	ldr	r1, [r7, #8]
 800423a:	4618      	mov	r0, r3
 800423c:	f00d f9ad 	bl	801159a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	4619      	mov	r1, r3
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f00d f946 	bl	80114d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 800424a:	bf00      	nop
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	0801278c 	.word	0x0801278c

08004258 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	bf0c      	ite	eq
 8004266:	2301      	moveq	r3, #1
 8004268:	2300      	movne	r3, #0
 800426a:	b2db      	uxtb	r3, r3
 800426c:	4618      	mov	r0, r3
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	bc80      	pop	{r7}
 8004274:	4770      	bx	lr

08004276 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800427e:	4618      	mov	r0, r3
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr

08004288 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8004288:	b5b0      	push	{r4, r5, r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8004292:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8004294:	1d3b      	adds	r3, r7, #4
 8004296:	4618      	mov	r0, r3
 8004298:	f7ff ffed 	bl	8004276 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 800429c:	462a      	mov	r2, r5
 800429e:	6839      	ldr	r1, [r7, #0]
 80042a0:	4620      	mov	r0, r4
 80042a2:	f000 f805 	bl	80042b0 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 80042a6:	4603      	mov	r3, r0
    }
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bdb0      	pop	{r4, r5, r7, pc}

080042b0 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	1ad3      	subs	r3, r2, r3
    }
 80042c2:	4618      	mov	r0, r3
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr

080042cc <_Z7DelayNsm>:
#include "Display.h"
#include "tim.h"


void DelayNs(uint32_t NsDelay)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
	if(NsDelay < 16)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b0f      	cmp	r3, #15
 80042d8:	d801      	bhi.n	80042de <_Z7DelayNsm+0x12>
	{
		NsDelay = 16;
 80042da:	2310      	movs	r3, #16
 80042dc:	607b      	str	r3, [r7, #4]
	}
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80042de:	4b0a      	ldr	r3, [pc, #40]	; (8004308 <_Z7DelayNsm+0x3c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2200      	movs	r2, #0
 80042e4:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim2) < NsDelay);
 80042e6:	4b08      	ldr	r3, [pc, #32]	; (8004308 <_Z7DelayNsm+0x3c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	bf8c      	ite	hi
 80042f2:	2301      	movhi	r3, #1
 80042f4:	2300      	movls	r3, #0
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d000      	beq.n	80042fe <_Z7DelayNsm+0x32>
 80042fc:	e7f3      	b.n	80042e6 <_Z7DelayNsm+0x1a>
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	bc80      	pop	{r7}
 8004306:	4770      	bx	lr
 8004308:	200007b0 	.word	0x200007b0

0800430c <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv>:

uint8_t u8g2_gpio_and_delay_stm32(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	607b      	str	r3, [r7, #4]
 8004316:	460b      	mov	r3, r1
 8004318:	72fb      	strb	r3, [r7, #11]
 800431a:	4613      	mov	r3, r2
 800431c:	72bb      	strb	r3, [r7, #10]

	switch(msg)
 800431e:	7afb      	ldrb	r3, [r7, #11]
 8004320:	3b28      	subs	r3, #40	; 0x28
 8004322:	2b23      	cmp	r3, #35	; 0x23
 8004324:	d86b      	bhi.n	80043fe <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xf2>
 8004326:	a201      	add	r2, pc, #4	; (adr r2, 800432c <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x20>)
 8004328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432c:	08004409 	.word	0x08004409
 8004330:	080043cb 	.word	0x080043cb
 8004334:	080043c1 	.word	0x080043c1
 8004338:	080043bd 	.word	0x080043bd
 800433c:	08004409 	.word	0x08004409
 8004340:	080043ff 	.word	0x080043ff
 8004344:	080043ff 	.word	0x080043ff
 8004348:	080043ff 	.word	0x080043ff
 800434c:	080043ff 	.word	0x080043ff
 8004350:	080043ff 	.word	0x080043ff
 8004354:	080043ff 	.word	0x080043ff
 8004358:	080043ff 	.word	0x080043ff
 800435c:	080043ff 	.word	0x080043ff
 8004360:	080043ff 	.word	0x080043ff
 8004364:	080043ff 	.word	0x080043ff
 8004368:	080043ff 	.word	0x080043ff
 800436c:	080043ff 	.word	0x080043ff
 8004370:	080043ff 	.word	0x080043ff
 8004374:	080043ff 	.word	0x080043ff
 8004378:	080043ff 	.word	0x080043ff
 800437c:	080043ff 	.word	0x080043ff
 8004380:	080043ff 	.word	0x080043ff
 8004384:	080043ff 	.word	0x080043ff
 8004388:	080043ff 	.word	0x080043ff
 800438c:	080043ff 	.word	0x080043ff
 8004390:	080043ff 	.word	0x080043ff
 8004394:	080043ff 	.word	0x080043ff
 8004398:	080043ff 	.word	0x080043ff
 800439c:	080043ff 	.word	0x080043ff
 80043a0:	080043ff 	.word	0x080043ff
 80043a4:	080043ff 	.word	0x080043ff
 80043a8:	080043ff 	.word	0x080043ff
 80043ac:	080043ff 	.word	0x080043ff
 80043b0:	080043d5 	.word	0x080043d5
 80043b4:	080043e3 	.word	0x080043e3
 80043b8:	080043f1 	.word	0x080043f1
		case U8X8_MSG_DELAY_NANO:			// delay arg_int * 1 nano second
			//		DelayNs(arg_int);
			break;
		case U8X8_MSG_DELAY_100NANO:		// delay arg_int * 100 nano seconds
			//		DelayNs(arg_int);
			__NOP();
 80043bc:	bf00      	nop
			break;
 80043be:	e024      	b.n	800440a <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
			//Function which delays 10us
		case U8X8_MSG_DELAY_10MICRO:
			DelayNs(10000);
 80043c0:	f242 7010 	movw	r0, #10000	; 0x2710
 80043c4:	f7ff ff82 	bl	80042cc <_Z7DelayNsm>
			//		for (uint16_t n = 0; n < 320; n++)
			//		{
			//			__NOP();
			//		}
			break;
 80043c8:	e01f      	b.n	800440a <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		case U8X8_MSG_DELAY_MILLI:			// delay arg_int * 1 milli second
			HAL_Delay(arg_int);
 80043ca:	7abb      	ldrb	r3, [r7, #10]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f008 f965 	bl	800c69c <HAL_Delay>
			break;					// arg_int=1: delay by 5us, arg_int = 4: delay by 1.25us
 80043d2:	e01a      	b.n	800440a <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
			//		//	case U8X8_MSG_GPIO_D1:				// D1 or SPI data pin: Output level in arg_int
			//	case U8X8_MSG_GPIO_SPI_DATA:
			//		HAL_GPIO_WritePin(Mosi_GPIO_Port, Mosi_Pin, (GPIO_PinState)arg_int);
			//		break;
		case U8X8_MSG_GPIO_CS:				// CS (chip select) pin: Output level in arg_int
			HAL_GPIO_WritePin(LcdCS_GPIO_Port, LcdCS_Pin, (GPIO_PinState)arg_int);
 80043d4:	7abb      	ldrb	r3, [r7, #10]
 80043d6:	461a      	mov	r2, r3
 80043d8:	2108      	movs	r1, #8
 80043da:	480e      	ldr	r0, [pc, #56]	; (8004414 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 80043dc:	f009 fbea 	bl	800dbb4 <HAL_GPIO_WritePin>
			break;
 80043e0:	e013      	b.n	800440a <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		case U8X8_MSG_GPIO_DC:				// DC (data/cmd, A0, register select) pin: Output level in arg_int
			HAL_GPIO_WritePin(LcdA0_GPIO_Port, LcdA0_Pin, (GPIO_PinState)arg_int);
 80043e2:	7abb      	ldrb	r3, [r7, #10]
 80043e4:	461a      	mov	r2, r3
 80043e6:	2110      	movs	r1, #16
 80043e8:	480a      	ldr	r0, [pc, #40]	; (8004414 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 80043ea:	f009 fbe3 	bl	800dbb4 <HAL_GPIO_WritePin>
			break;
 80043ee:	e00c      	b.n	800440a <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		case U8X8_MSG_GPIO_RESET:			// Reset pin: Output level in arg_int
			HAL_GPIO_WritePin(LcdReset_GPIO_Port, LcdReset_Pin, (GPIO_PinState)arg_int);
 80043f0:	7abb      	ldrb	r3, [r7, #10]
 80043f2:	461a      	mov	r2, r3
 80043f4:	2140      	movs	r1, #64	; 0x40
 80043f6:	4807      	ldr	r0, [pc, #28]	; (8004414 <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0x108>)
 80043f8:	f009 fbdc 	bl	800dbb4 <HAL_GPIO_WritePin>
			break;
 80043fc:	e005      	b.n	800440a <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
		default:
			u8x8_SetGPIOResult(u8x8, 1);			// default return value
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			break;
 8004406:	e000      	b.n	800440a <_Z25u8g2_gpio_and_delay_stm32P11u8x8_structhhPv+0xfe>
			break;							// can be used to setup pins
 8004408:	bf00      	nop
	}
	return 1; // command processed successfully. // @suppress("Return with parenthesis")
 800440a:	2301      	movs	r3, #1
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40010800 	.word	0x40010800

08004418 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8g2, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	607b      	str	r3, [r7, #4]
 8004422:	460b      	mov	r3, r1
 8004424:	72fb      	strb	r3, [r7, #11]
 8004426:	4613      	mov	r3, r2
 8004428:	72bb      	strb	r3, [r7, #10]
	//	uint8_t byte;
	//	uint8_t *data;
	switch(msg)
 800442a:	7afb      	ldrb	r3, [r7, #11]
 800442c:	3b14      	subs	r3, #20
 800442e:	2b0c      	cmp	r3, #12
 8004430:	d848      	bhi.n	80044c4 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xac>
 8004432:	a201      	add	r2, pc, #4	; (adr r2, 8004438 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0x20>)
 8004434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004438:	0800447d 	.word	0x0800447d
 800443c:	080044c5 	.word	0x080044c5
 8004440:	080044c5 	.word	0x080044c5
 8004444:	0800446d 	.word	0x0800446d
 8004448:	0800449d 	.word	0x0800449d
 800444c:	080044b1 	.word	0x080044b1
 8004450:	080044c5 	.word	0x080044c5
 8004454:	080044c5 	.word	0x080044c5
 8004458:	080044c5 	.word	0x080044c5
 800445c:	080044c5 	.word	0x080044c5
 8004460:	080044c5 	.word	0x080044c5
 8004464:	080044c5 	.word	0x080044c5
 8004468:	0800448f 	.word	0x0800448f
			//			byte = *data;
			//			data++;
			//			arg_int--;
			//			HAL_SPI_Transmit(&hspi1, &byte, 1, 100);
			//		}
			HAL_SPI_Transmit(&hspi1, (uint8_t *)arg_ptr, arg_int, 10);
 800446c:	7abb      	ldrb	r3, [r7, #10]
 800446e:	b29a      	uxth	r2, r3
 8004470:	230a      	movs	r3, #10
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	4817      	ldr	r0, [pc, #92]	; (80044d4 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xbc>)
 8004476:	f00b fc01 	bl	800fc7c <HAL_SPI_Transmit>
			break;
 800447a:	e025      	b.n	80044c8 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_INIT:
			u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_disable_level);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	785b      	ldrb	r3, [r3, #1]
 8004482:	461a      	mov	r2, r3
 8004484:	2149      	movs	r1, #73	; 0x49
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f7fe ff2c 	bl	80032e4 <u8x8_gpio_call>
			break;
 800448c:	e01c      	b.n	80044c8 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_SET_DC:
			u8x8_gpio_SetDC(u8g2, arg_int);
 800448e:	7abb      	ldrb	r3, [r7, #10]
 8004490:	461a      	mov	r2, r3
 8004492:	214a      	movs	r1, #74	; 0x4a
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f7fe ff25 	bl	80032e4 <u8x8_gpio_call>
			break;
 800449a:	e015      	b.n	80044c8 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_START_TRANSFER:
			u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_enable_level);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	461a      	mov	r2, r3
 80044a4:	2149      	movs	r1, #73	; 0x49
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f7fe ff1c 	bl	80032e4 <u8x8_gpio_call>
			__NOP();
 80044ac:	bf00      	nop
			//		u8g2->gpio_and_delay_cb(u8g2, U8X8_MSG_DELAY_NANO, u8g2->display_info->post_chip_enable_wait_ns, NULL);
			break;
 80044ae:	e00b      	b.n	80044c8 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		case U8X8_MSG_BYTE_END_TRANSFER:
			//		u8g2->gpio_and_delay_cb(u8g2, U8X8_MSG_DELAY_NANO, u8g2->display_info->pre_chip_disable_wait_ns, NULL);
			__NOP();
 80044b0:	bf00      	nop
			u8x8_gpio_SetCS(u8g2, u8g2->display_info->chip_disable_level);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	785b      	ldrb	r3, [r3, #1]
 80044b8:	461a      	mov	r2, r3
 80044ba:	2149      	movs	r1, #73	; 0x49
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f7fe ff11 	bl	80032e4 <u8x8_gpio_call>
			break;
 80044c2:	e001      	b.n	80044c8 <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb0>
		default:
			return 0;
 80044c4:	2300      	movs	r3, #0
 80044c6:	e000      	b.n	80044ca <_Z22u8x8_byte_stm32_hw_spiP11u8x8_structhhPv+0xb2>
	}
	return 1;
 80044c8:	2301      	movs	r3, #1
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	20000758 	.word	0x20000758

080044d8 <_ZN13NHDST7565_LCD12TEXT_4_WRITEC1Ev>:
	{
		String text;
		uint8_t textLen;
		uint8_t textHigh;
		const uint8_t *textFont;
	}TEXT_4_WRITE;
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f00d f8ca 	bl	801167c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4618      	mov	r0, r3
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <_ZN13NHDST7565_LCDC1Eh>:


NHDST7565_LCD::NHDST7565_LCD(uint8_t Rotation)
 80044f4:	b5b0      	push	{r4, r5, r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	460b      	mov	r3, r1
 80044fe:	70fb      	strb	r3, [r7, #3]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff ffe8 	bl	80044d8 <_ZN13NHDST7565_LCD12TEXT_4_WRITEC1Ev>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2020 	strb.w	r2, [r3, #32]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a0a      	ldr	r2, [pc, #40]	; (800453c <_ZN13NHDST7565_LCDC1Eh+0x48>)
 8004514:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 8004518:	4615      	mov	r5, r2
 800451a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800451c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800451e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004522:	e884 0007 	stmia.w	r4, {r0, r1, r2}
{
	changeDisplayDisposition(Rotation);
 8004526:	78fb      	ldrb	r3, [r7, #3]
 8004528:	4619      	mov	r1, r3
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f808 	bl	8004540 <_ZN13NHDST7565_LCD24changeDisplayDispositionEh>
}
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4618      	mov	r0, r3
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bdb0      	pop	{r4, r5, r7, pc}
 800453a:	bf00      	nop
 800453c:	080127b8 	.word	0x080127b8

08004540 <_ZN13NHDST7565_LCD24changeDisplayDispositionEh>:

void NHDST7565_LCD::changeDisplayDisposition(uint8_t NewRotation)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	460b      	mov	r3, r1
 800454a:	70fb      	strb	r3, [r7, #3]
	dispParams.rotation = NewRotation;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	78fa      	ldrb	r2, [r7, #3]
 8004550:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	if(dispParams.rotation == VERTICAL_1 || dispParams.rotation == VERTICAL_2)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 800455a:	2b02      	cmp	r3, #2
 800455c:	d004      	beq.n	8004568 <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x28>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8004564:	2b03      	cmp	r3, #3
 8004566:	d108      	bne.n	800457a <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x3a>
	{
		dispParams.width = 64;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2240      	movs	r2, #64	; 0x40
 800456c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		dispParams.high = 128;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2280      	movs	r2, #128	; 0x80
 8004574:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 8004578:	e007      	b.n	800458a <_ZN13NHDST7565_LCD24changeDisplayDispositionEh+0x4a>
	}
	else
	{
		dispParams.width = 128;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2280      	movs	r2, #128	; 0x80
 800457e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		dispParams.high = 64;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2240      	movs	r2, #64	; 0x40
 8004586:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
	}
}
 800458a:	bf00      	nop
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	bc80      	pop	{r7}
 8004592:	4770      	bx	lr

08004594 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>:


void NHDST7565_LCD::assignTextParams(String Text, const uint8_t *Font)
{
 8004594:	b590      	push	{r4, r7, lr}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
	textToWrite.textLen = 0;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	761a      	strb	r2, [r3, #24]
	textToWrite.textHigh = 0;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	765a      	strb	r2, [r3, #25]
	textToWrite.text = "";
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4930      	ldr	r1, [pc, #192]	; (8004670 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xdc>)
 80045b0:	4618      	mov	r0, r3
 80045b2:	f00d f968 	bl	8011886 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	textToWrite.textFont = Font;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	61da      	str	r2, [r3, #28]
	//	if(textToWrite.textFont != Font)
	//	{
	u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	4619      	mov	r1, r3
 80045c8:	4610      	mov	r0, r2
 80045ca:	f7fd fdeb 	bl	80021a4 <u8g2_SetFont>
	textToWrite.textHigh = u8g2_GetAscent(&U8G2_Display);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f993 30a2 	ldrsb.w	r3, [r3, #162]	; 0xa2
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	765a      	strb	r2, [r3, #25]
	//	}
	if(Text != "")
 80045da:	4925      	ldr	r1, [pc, #148]	; (8004670 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xdc>)
 80045dc:	68b8      	ldr	r0, [r7, #8]
 80045de:	f000 fda9 	bl	8005134 <_ZStneIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00e      	beq.n	8004606 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0x72>
		textToWrite.textLen = u8g2_GetStrWidth(&U8G2_Display, Text.c_str());
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80045ee:	68b8      	ldr	r0, [r7, #8]
 80045f0:	f00d f9b2 	bl	8011958 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80045f4:	4603      	mov	r3, r0
 80045f6:	4619      	mov	r1, r3
 80045f8:	4620      	mov	r0, r4
 80045fa:	f7fd fe3d 	bl	8002278 <u8g2_GetStrWidth>
 80045fe:	4603      	mov	r3, r0
 8004600:	461a      	mov	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	761a      	strb	r2, [r3, #24]

	if(textToWrite.textLen < dispParams.width)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	7e1a      	ldrb	r2, [r3, #24]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004610:	429a      	cmp	r2, r3
 8004612:	d205      	bcs.n	8004620 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0x8c>
	{
		textToWrite.text = Text;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	68b9      	ldr	r1, [r7, #8]
 8004618:	4618      	mov	r0, r3
 800461a:	f00d f856 	bl	80116ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		textToWrite.textFont = displayFonts[W_5_H_8];
		u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
		textToWrite.textLen = u8g2_GetStrWidth(&U8G2_Display, Text.c_str());
		textToWrite.textHigh = u8g2_GetAscent(&U8G2_Display);
	}
}
 800461e:	e022      	b.n	8004666 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh+0xd2>
		textToWrite.textFont = displayFonts[W_5_H_8];
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	61da      	str	r2, [r3, #28]
		u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	4619      	mov	r1, r3
 8004636:	4610      	mov	r0, r2
 8004638:	f7fd fdb4 	bl	80021a4 <u8g2_SetFont>
		textToWrite.textLen = u8g2_GetStrWidth(&U8G2_Display, Text.c_str());
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8004642:	68b8      	ldr	r0, [r7, #8]
 8004644:	f00d f988 	bl	8011958 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004648:	4603      	mov	r3, r0
 800464a:	4619      	mov	r1, r3
 800464c:	4620      	mov	r0, r4
 800464e:	f7fd fe13 	bl	8002278 <u8g2_GetStrWidth>
 8004652:	4603      	mov	r3, r0
 8004654:	461a      	mov	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	761a      	strb	r2, [r3, #24]
		textToWrite.textHigh = u8g2_GetAscent(&U8G2_Display);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f993 30a2 	ldrsb.w	r3, [r3, #162]	; 0xa2
 8004660:	b2da      	uxtb	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	765a      	strb	r2, [r3, #25]
}
 8004666:	bf00      	nop
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	bd90      	pop	{r4, r7, pc}
 800466e:	bf00      	nop
 8004670:	080127d4 	.word	0x080127d4

08004674 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_>:

void NHDST7565_LCD::assignNewDrawCoord(uint8_t OldXPos, uint8_t OldYPos,
		uint8_t &NewXPos, uint8_t &NewYPos)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	607b      	str	r3, [r7, #4]
 800467e:	460b      	mov	r3, r1
 8004680:	72fb      	strb	r3, [r7, #11]
 8004682:	4613      	mov	r3, r2
 8004684:	72bb      	strb	r3, [r7, #10]
	if(OldXPos <= dispParams.width && OldYPos <= dispParams.high)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800468c:	7afa      	ldrb	r2, [r7, #11]
 800468e:	429a      	cmp	r2, r3
 8004690:	d80c      	bhi.n	80046ac <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x38>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004698:	7aba      	ldrb	r2, [r7, #10]
 800469a:	429a      	cmp	r2, r3
 800469c:	d806      	bhi.n	80046ac <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x38>
	{
		NewXPos = OldXPos;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	7afa      	ldrb	r2, [r7, #11]
 80046a2:	701a      	strb	r2, [r3, #0]
		NewYPos = OldYPos;
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	7aba      	ldrb	r2, [r7, #10]
 80046a8:	701a      	strb	r2, [r3, #0]
 80046aa:	e0bb      	b.n	8004824 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
	}
	else if(OldXPos > dispParams.width && OldYPos <= dispParams.high)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80046b2:	7afa      	ldrb	r2, [r7, #11]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d930      	bls.n	800471a <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa6>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80046be:	7aba      	ldrb	r2, [r7, #10]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d82a      	bhi.n	800471a <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa6>
	{
		NewYPos = OldYPos;
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	7aba      	ldrb	r2, [r7, #10]
 80046c8:	701a      	strb	r2, [r3, #0]
		switch(OldXPos)
 80046ca:	7afb      	ldrb	r3, [r7, #11]
 80046cc:	2b83      	cmp	r3, #131	; 0x83
 80046ce:	d00b      	beq.n	80046e8 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x74>
 80046d0:	2b84      	cmp	r3, #132	; 0x84
 80046d2:	d011      	beq.n	80046f8 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x84>
 80046d4:	2b82      	cmp	r3, #130	; 0x82
 80046d6:	d117      	bne.n	8004708 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x94>
		{
			case LEFT_POS:
				NewXPos = setTextLeft();
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 f901 	bl	80048e0 <_ZN13NHDST7565_LCD11setTextLeftEv>
 80046de:	4603      	mov	r3, r0
 80046e0:	461a      	mov	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	701a      	strb	r2, [r3, #0]
				break;
 80046e6:	e017      	b.n	8004718 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa4>
			case CENTER_POS:
				NewXPos = setTextCenter();
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 f905 	bl	80048f8 <_ZN13NHDST7565_LCD13setTextCenterEv>
 80046ee:	4603      	mov	r3, r0
 80046f0:	461a      	mov	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	701a      	strb	r2, [r3, #0]
				break;
 80046f6:	e00f      	b.n	8004718 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa4>
			case RIGHT_POS:
				NewXPos = setTextRight();
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 f914 	bl	8004926 <_ZN13NHDST7565_LCD12setTextRightEv>
 80046fe:	4603      	mov	r3, r0
 8004700:	461a      	mov	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	701a      	strb	r2, [r3, #0]
				break;
 8004706:	e007      	b.n	8004718 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xa4>
			default:
				NewXPos = setTextCenter();
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 f8f5 	bl	80048f8 <_ZN13NHDST7565_LCD13setTextCenterEv>
 800470e:	4603      	mov	r3, r0
 8004710:	461a      	mov	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	701a      	strb	r2, [r3, #0]
				break;
 8004716:	bf00      	nop
	else if(OldXPos > dispParams.width && OldYPos <= dispParams.high)
 8004718:	e084      	b.n	8004824 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
		}
	}
	else if(OldXPos <= dispParams.width && OldYPos > dispParams.high)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004720:	7afa      	ldrb	r2, [r7, #11]
 8004722:	429a      	cmp	r2, r3
 8004724:	d830      	bhi.n	8004788 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x114>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800472c:	7aba      	ldrb	r2, [r7, #10]
 800472e:	429a      	cmp	r2, r3
 8004730:	d92a      	bls.n	8004788 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x114>
	{
		NewXPos = OldXPos;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	7afa      	ldrb	r2, [r7, #11]
 8004736:	701a      	strb	r2, [r3, #0]
		switch(OldYPos)
 8004738:	7abb      	ldrb	r3, [r7, #10]
 800473a:	2b47      	cmp	r3, #71	; 0x47
 800473c:	d00b      	beq.n	8004756 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xe2>
 800473e:	2b48      	cmp	r3, #72	; 0x48
 8004740:	d011      	beq.n	8004766 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0xf2>
 8004742:	2b46      	cmp	r3, #70	; 0x46
 8004744:	d117      	bne.n	8004776 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x102>
		{
			case TOP_POS:
				NewYPos = setTextTop();
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 f900 	bl	800494c <_ZN13NHDST7565_LCD10setTextTopEv>
 800474c:	4603      	mov	r3, r0
 800474e:	461a      	mov	r2, r3
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	701a      	strb	r2, [r3, #0]
				break;
 8004754:	e017      	b.n	8004786 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x112>
			case MIDDLE_POS:
				NewYPos = setTextMiddle();
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 f906 	bl	8004968 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 800475c:	4603      	mov	r3, r0
 800475e:	461a      	mov	r2, r3
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	701a      	strb	r2, [r3, #0]
				break;
 8004764:	e00f      	b.n	8004786 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x112>
			case BOTTOM_POS:
				NewYPos = setTextBottom();
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 f920 	bl	80049ac <_ZN13NHDST7565_LCD13setTextBottomEv>
 800476c:	4603      	mov	r3, r0
 800476e:	461a      	mov	r2, r3
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	701a      	strb	r2, [r3, #0]
				break;
 8004774:	e007      	b.n	8004786 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x112>
			default:
				NewYPos = setTextMiddle();
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 f8f6 	bl	8004968 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 800477c:	4603      	mov	r3, r0
 800477e:	461a      	mov	r2, r3
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	701a      	strb	r2, [r3, #0]
				break;
 8004784:	bf00      	nop
	else if(OldXPos <= dispParams.width && OldYPos > dispParams.high)
 8004786:	e04d      	b.n	8004824 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
		}
	}
	else
	{
		switch(OldXPos)
 8004788:	7afb      	ldrb	r3, [r7, #11]
 800478a:	2b83      	cmp	r3, #131	; 0x83
 800478c:	d00b      	beq.n	80047a6 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x132>
 800478e:	2b84      	cmp	r3, #132	; 0x84
 8004790:	d011      	beq.n	80047b6 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x142>
 8004792:	2b82      	cmp	r3, #130	; 0x82
 8004794:	d117      	bne.n	80047c6 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x152>
		{
			case LEFT_POS:
				NewXPos = setTextLeft();
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 f8a2 	bl	80048e0 <_ZN13NHDST7565_LCD11setTextLeftEv>
 800479c:	4603      	mov	r3, r0
 800479e:	461a      	mov	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	701a      	strb	r2, [r3, #0]
				break;
 80047a4:	e017      	b.n	80047d6 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x162>
			case CENTER_POS:
				NewXPos = setTextCenter();
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 f8a6 	bl	80048f8 <_ZN13NHDST7565_LCD13setTextCenterEv>
 80047ac:	4603      	mov	r3, r0
 80047ae:	461a      	mov	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	701a      	strb	r2, [r3, #0]
				break;
 80047b4:	e00f      	b.n	80047d6 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x162>
			case RIGHT_POS:
				NewXPos = setTextRight();
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 f8b5 	bl	8004926 <_ZN13NHDST7565_LCD12setTextRightEv>
 80047bc:	4603      	mov	r3, r0
 80047be:	461a      	mov	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	701a      	strb	r2, [r3, #0]
				break;
 80047c4:	e007      	b.n	80047d6 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x162>
			default:
				NewXPos = setTextCenter();
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 f896 	bl	80048f8 <_ZN13NHDST7565_LCD13setTextCenterEv>
 80047cc:	4603      	mov	r3, r0
 80047ce:	461a      	mov	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	701a      	strb	r2, [r3, #0]
				break;
 80047d4:	bf00      	nop
		}
		switch(OldYPos)
 80047d6:	7abb      	ldrb	r3, [r7, #10]
 80047d8:	2b47      	cmp	r3, #71	; 0x47
 80047da:	d00b      	beq.n	80047f4 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x180>
 80047dc:	2b48      	cmp	r3, #72	; 0x48
 80047de:	d011      	beq.n	8004804 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x190>
 80047e0:	2b46      	cmp	r3, #70	; 0x46
 80047e2:	d117      	bne.n	8004814 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1a0>
		{
			case TOP_POS:
				NewYPos = setTextTop();
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 f8b1 	bl	800494c <_ZN13NHDST7565_LCD10setTextTopEv>
 80047ea:	4603      	mov	r3, r0
 80047ec:	461a      	mov	r2, r3
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	701a      	strb	r2, [r3, #0]
				break;
 80047f2:	e017      	b.n	8004824 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
			case MIDDLE_POS:
				NewYPos = setTextMiddle();
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 f8b7 	bl	8004968 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 80047fa:	4603      	mov	r3, r0
 80047fc:	461a      	mov	r2, r3
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	701a      	strb	r2, [r3, #0]
				break;
 8004802:	e00f      	b.n	8004824 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
			case BOTTOM_POS:
				NewYPos = setTextBottom();
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 f8d1 	bl	80049ac <_ZN13NHDST7565_LCD13setTextBottomEv>
 800480a:	4603      	mov	r3, r0
 800480c:	461a      	mov	r2, r3
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	701a      	strb	r2, [r3, #0]
				break;
 8004812:	e007      	b.n	8004824 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_+0x1b0>
			default:
				NewYPos = setTextMiddle();
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 f8a7 	bl	8004968 <_ZN13NHDST7565_LCD13setTextMiddleEv>
 800481a:	4603      	mov	r3, r0
 800481c:	461a      	mov	r2, r3
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	701a      	strb	r2, [r3, #0]
				break;
 8004822:	bf00      	nop
		}
	}
}
 8004824:	bf00      	nop
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <_ZN13NHDST7565_LCD8setupLcdEv>:

void NHDST7565_LCD::setupLcd()
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
	const u8g2_cb_t *DisplayRotation;
	switch(dispParams.rotation)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 800483a:	2b03      	cmp	r3, #3
 800483c:	d816      	bhi.n	800486c <_ZN13NHDST7565_LCD8setupLcdEv+0x40>
 800483e:	a201      	add	r2, pc, #4	; (adr r2, 8004844 <_ZN13NHDST7565_LCD8setupLcdEv+0x18>)
 8004840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004844:	08004855 	.word	0x08004855
 8004848:	0800485b 	.word	0x0800485b
 800484c:	08004861 	.word	0x08004861
 8004850:	08004867 	.word	0x08004867
	{
		case LANDSCAPE_1:
			DisplayRotation = &u8g2_cb_r2;
 8004854:	4b1c      	ldr	r3, [pc, #112]	; (80048c8 <_ZN13NHDST7565_LCD8setupLcdEv+0x9c>)
 8004856:	60fb      	str	r3, [r7, #12]
			break;
 8004858:	e00b      	b.n	8004872 <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		case LANDSCAPE_2:
			DisplayRotation = &u8g2_cb_r0;
 800485a:	4b1c      	ldr	r3, [pc, #112]	; (80048cc <_ZN13NHDST7565_LCD8setupLcdEv+0xa0>)
 800485c:	60fb      	str	r3, [r7, #12]
			break;
 800485e:	e008      	b.n	8004872 <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		case VERTICAL_1:
			DisplayRotation = &u8g2_cb_r1;
 8004860:	4b1b      	ldr	r3, [pc, #108]	; (80048d0 <_ZN13NHDST7565_LCD8setupLcdEv+0xa4>)
 8004862:	60fb      	str	r3, [r7, #12]
			break;
 8004864:	e005      	b.n	8004872 <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		case VERTICAL_2:
			DisplayRotation = &u8g2_cb_r3;
 8004866:	4b1b      	ldr	r3, [pc, #108]	; (80048d4 <_ZN13NHDST7565_LCD8setupLcdEv+0xa8>)
 8004868:	60fb      	str	r3, [r7, #12]
			break;
 800486a:	e002      	b.n	8004872 <_ZN13NHDST7565_LCD8setupLcdEv+0x46>
		default:
			DisplayRotation = &u8g2_cb_r0;
 800486c:	4b17      	ldr	r3, [pc, #92]	; (80048cc <_ZN13NHDST7565_LCD8setupLcdEv+0xa0>)
 800486e:	60fb      	str	r3, [r7, #12]
			break;
 8004870:	bf00      	nop
	}
	u8g2_Setup_st7565_nhd_c12864_f(&U8G2_Display, DisplayRotation, u8x8_byte_stm32_hw_spi, u8g2_gpio_and_delay_stm32);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004878:	4b17      	ldr	r3, [pc, #92]	; (80048d8 <_ZN13NHDST7565_LCD8setupLcdEv+0xac>)
 800487a:	4a18      	ldr	r2, [pc, #96]	; (80048dc <_ZN13NHDST7565_LCD8setupLcdEv+0xb0>)
 800487c:	68f9      	ldr	r1, [r7, #12]
 800487e:	f7fc febb 	bl	80015f8 <u8g2_Setup_st7565_nhd_c12864_f>
	u8g2_InitDisplay(&U8G2_Display); // send init sequence to the display, display is in sleep mode after this, // @suppress("C-Style cast instead of C++ cast")
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	3324      	adds	r3, #36	; 0x24
 8004886:	4618      	mov	r0, r3
 8004888:	f7fe fcfd 	bl	8003286 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&U8G2_Display, 0); // wake up display // @suppress("C-Style cast instead of C++ cast")
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3324      	adds	r3, #36	; 0x24
 8004890:	2100      	movs	r1, #0
 8004892:	4618      	mov	r0, r3
 8004894:	f7fe fd06 	bl	80032a4 <u8x8_SetPowerSave>
	u8g2_SetFontMode(&U8G2_Display, 1);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3324      	adds	r3, #36	; 0x24
 800489c:	2101      	movs	r1, #1
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fd fb24 	bl	8001eec <u8g2_SetFontMode>
	u8g2_SetDrawColor(&U8G2_Display, figureColorSetted);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048b0:	4619      	mov	r1, r3
 80048b2:	4610      	mov	r0, r2
 80048b4:	f7fd fe4c 	bl	8002550 <u8g2_SetDrawColor>
	clearScreen();
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f8a6 	bl	8004a0a <_ZN13NHDST7565_LCD11clearScreenEv>
}
 80048be:	bf00      	nop
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	08015970 	.word	0x08015970
 80048cc:	08015958 	.word	0x08015958
 80048d0:	08015964 	.word	0x08015964
 80048d4:	0801597c 	.word	0x0801597c
 80048d8:	0800430d 	.word	0x0800430d
 80048dc:	08004419 	.word	0x08004419

080048e0 <_ZN13NHDST7565_LCD11setTextLeftEv>:


uint8_t NHDST7565_LCD::setTextLeft()
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 80048e8:	2300      	movs	r3, #0
 80048ea:	73fb      	strb	r3, [r7, #15]
	//	TextLen = u8g2_GetStrWidth(U8G2_Display, textToWrite.c_str());
	return NewPos; // @suppress("Return with parenthesis")
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bc80      	pop	{r7}
 80048f6:	4770      	bx	lr

080048f8 <_ZN13NHDST7565_LCD13setTextCenterEv>:

uint8_t NHDST7565_LCD::setTextCenter()
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8004900:	2300      	movs	r3, #0
 8004902:	73fb      	strb	r3, [r7, #15]
	NewPos = (dispParams.width - textToWrite.textLen) / 2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800490a:	461a      	mov	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	7e1b      	ldrb	r3, [r3, #24]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	0fda      	lsrs	r2, r3, #31
 8004914:	4413      	add	r3, r2
 8004916:	105b      	asrs	r3, r3, #1
 8004918:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 800491a:	7bfb      	ldrb	r3, [r7, #15]
}
 800491c:	4618      	mov	r0, r3
 800491e:	3714      	adds	r7, #20
 8004920:	46bd      	mov	sp, r7
 8004922:	bc80      	pop	{r7}
 8004924:	4770      	bx	lr

08004926 <_ZN13NHDST7565_LCD12setTextRightEv>:

uint8_t NHDST7565_LCD::setTextRight()
{
 8004926:	b480      	push	{r7}
 8004928:	b085      	sub	sp, #20
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 800492e:	2300      	movs	r3, #0
 8004930:	73fb      	strb	r3, [r7, #15]
	NewPos = (dispParams.width - textToWrite.textLen);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	7e1b      	ldrb	r3, [r3, #24]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 8004940:	7bfb      	ldrb	r3, [r7, #15]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	bc80      	pop	{r7}
 800494a:	4770      	bx	lr

0800494c <_ZN13NHDST7565_LCD10setTextTopEv>:

uint8_t NHDST7565_LCD::setTextTop()
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8004954:	2300      	movs	r3, #0
 8004956:	73fb      	strb	r3, [r7, #15]
	NewPos = 1;
 8004958:	2301      	movs	r3, #1
 800495a:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 800495c:	7bfb      	ldrb	r3, [r7, #15]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	bc80      	pop	{r7}
 8004966:	4770      	bx	lr

08004968 <_ZN13NHDST7565_LCD13setTextMiddleEv>:

uint8_t NHDST7565_LCD::setTextMiddle()
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 8004970:	2300      	movs	r3, #0
 8004972:	73fb      	strb	r3, [r7, #15]
	NewPos = ((dispParams.high - textToWrite.textHigh + 1) / 2) + (textToWrite.textHigh / 2) - textToWrite.textHigh;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800497a:	461a      	mov	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	7e5b      	ldrb	r3, [r3, #25]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	3301      	adds	r3, #1
 8004984:	0fda      	lsrs	r2, r3, #31
 8004986:	4413      	add	r3, r2
 8004988:	105b      	asrs	r3, r3, #1
 800498a:	b2da      	uxtb	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	7e5b      	ldrb	r3, [r3, #25]
 8004990:	085b      	lsrs	r3, r3, #1
 8004992:	b2db      	uxtb	r3, r3
 8004994:	4413      	add	r3, r2
 8004996:	b2da      	uxtb	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	7e5b      	ldrb	r3, [r3, #25]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bc80      	pop	{r7}
 80049aa:	4770      	bx	lr

080049ac <_ZN13NHDST7565_LCD13setTextBottomEv>:

uint8_t NHDST7565_LCD::setTextBottom()
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
	uint8_t NewPos = 0;
 80049b4:	2300      	movs	r3, #0
 80049b6:	73fb      	strb	r3, [r7, #15]
	//	NewPos = (DispParams.high - textToWrite.textHigh - 1);
	NewPos = dispParams.high - 1 - textToWrite.textHigh;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	7e5b      	ldrb	r3, [r3, #25]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	3b01      	subs	r3, #1
 80049c8:	73fb      	strb	r3, [r7, #15]
	return NewPos; // @suppress("Return with parenthesis")
 80049ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bc80      	pop	{r7}
 80049d4:	4770      	bx	lr

080049d6 <_ZN13NHDST7565_LCD16clearFrameBufferEv>:



void NHDST7565_LCD::clearFrameBuffer()
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b082      	sub	sp, #8
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
	u8g2_ClearBuffer(&U8G2_Display);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	3324      	adds	r3, #36	; 0x24
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fc fc5a 	bl	800129c <u8g2_ClearBuffer>
}
 80049e8:	bf00      	nop
 80049ea:	3708      	adds	r7, #8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <_ZN13NHDST7565_LCD15sendFrameBufferEv>:
void NHDST7565_LCD::sendFrameBuffer()
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
	u8g2_SendBuffer(&U8G2_Display);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3324      	adds	r3, #36	; 0x24
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7fc fcc0 	bl	8001382 <u8g2_SendBuffer>
}
 8004a02:	bf00      	nop
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <_ZN13NHDST7565_LCD11clearScreenEv>:

void NHDST7565_LCD::clearScreen()
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b082      	sub	sp, #8
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
	clearFrameBuffer();
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7ff ffdf 	bl	80049d6 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
	sendFrameBuffer();
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7ff ffe9 	bl	80049f0 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
}
 8004a1e:	bf00      	nop
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>:
	if(Color != figureColorSetted)
		u8g2_SetDrawColor(&U8G2_Display, figureColorSetted);
}

void NHDST7565_LCD::drawString(String Text, uint8_t XPos, uint8_t YPos, const uint8_t *u8g2Font)
{
 8004a26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a28:	b08f      	sub	sp, #60	; 0x3c
 8004a2a:	af02      	add	r7, sp, #8
 8004a2c:	60f8      	str	r0, [r7, #12]
 8004a2e:	60b9      	str	r1, [r7, #8]
 8004a30:	4611      	mov	r1, r2
 8004a32:	461a      	mov	r2, r3
 8004a34:	460b      	mov	r3, r1
 8004a36:	71fb      	strb	r3, [r7, #7]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	71bb      	strb	r3, [r7, #6]
	uint8_t NewXPos = 0, NewYPos = 0;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	75fb      	strb	r3, [r7, #23]
 8004a40:	2300      	movs	r3, #0
 8004a42:	75bb      	strb	r3, [r7, #22]
	assignTextParams(Text, u8g2Font);
 8004a44:	f107 0318 	add.w	r3, r7, #24
 8004a48:	68b9      	ldr	r1, [r7, #8]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f00c ff9b 	bl	8011986 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004a50:	f107 0318 	add.w	r3, r7, #24
 8004a54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a56:	4619      	mov	r1, r3
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f7ff fd9b 	bl	8004594 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8004a5e:	f107 0318 	add.w	r3, r7, #24
 8004a62:	4618      	mov	r0, r3
 8004a64:	f00c fe2b 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	assignNewDrawCoord(XPos, YPos, NewXPos, NewYPos);
 8004a68:	f107 0017 	add.w	r0, r7, #23
 8004a6c:	79ba      	ldrb	r2, [r7, #6]
 8004a6e:	79f9      	ldrb	r1, [r7, #7]
 8004a70:	f107 0316 	add.w	r3, r7, #22
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	4603      	mov	r3, r0
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f7ff fdfb 	bl	8004674 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_>
//				NewYPos = setTextMiddle();
//				break;
//		}
//	}

	u8g2_DrawStr(&U8G2_Display, NewXPos, NewYPos + textToWrite.textHigh, textToWrite.text.c_str());
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8004a84:	7dfd      	ldrb	r5, [r7, #23]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	7e5a      	ldrb	r2, [r3, #25]
 8004a8a:	7dbb      	ldrb	r3, [r7, #22]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	b2de      	uxtb	r6, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f00c ff60 	bl	8011958 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	4632      	mov	r2, r6
 8004a9c:	4629      	mov	r1, r5
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	f7fd fae2 	bl	8002068 <u8g2_DrawStr>
}
 8004aa4:	bf00      	nop
 8004aa6:	3734      	adds	r7, #52	; 0x34
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004aac <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh>:
}


uint8_t NHDST7565_LCD::drawMenuList(uint8_t FirstItemXPos, uint8_t FirstItemYPos, uint8_t FirsListItem, uint8_t ItemSel, const char **MenuItems, uint8_t MaxItems,
		bool WithCheckBox, bool MenuSelected, bool *ItemsChecked, const uint8_t *u8g2Font)
{
 8004aac:	b590      	push	{r4, r7, lr}
 8004aae:	b0a3      	sub	sp, #140	; 0x8c
 8004ab0:	af02      	add	r7, sp, #8
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	4608      	mov	r0, r1
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	461a      	mov	r2, r3
 8004aba:	4603      	mov	r3, r0
 8004abc:	70fb      	strb	r3, [r7, #3]
 8004abe:	460b      	mov	r3, r1
 8004ac0:	70bb      	strb	r3, [r7, #2]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	707b      	strb	r3, [r7, #1]
	assignTextParams("", u8g2Font);
 8004ac6:	f107 0320 	add.w	r3, r7, #32
 8004aca:	4618      	mov	r0, r3
 8004acc:	f00c fcc6 	bl	801145c <_ZNSaIcEC1Ev>
 8004ad0:	f107 0220 	add.w	r2, r7, #32
 8004ad4:	f107 0308 	add.w	r3, r7, #8
 8004ad8:	49a8      	ldr	r1, [pc, #672]	; (8004d7c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x2d0>)
 8004ada:	4618      	mov	r0, r3
 8004adc:	f00c ff86 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004ae0:	f107 0308 	add.w	r3, r7, #8
 8004ae4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ae8:	4619      	mov	r1, r3
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7ff fd52 	bl	8004594 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8004af0:	f107 0308 	add.w	r3, r7, #8
 8004af4:	4618      	mov	r0, r3
 8004af6:	f00c fde2 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004afa:	f107 0320 	add.w	r3, r7, #32
 8004afe:	4618      	mov	r0, r3
 8004b00:	f00c fcad 	bl	801145e <_ZNSaIcED1Ev>
	uint8_t MaxLines = (dispParams.high - FirstItemYPos) / (textToWrite.textHigh + MENU_ITEM_INTERLINE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	78bb      	ldrb	r3, [r7, #2]
 8004b0e:	1ad2      	subs	r2, r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	7e5b      	ldrb	r3, [r3, #25]
 8004b14:	3303      	adds	r3, #3
 8004b16:	fb92 f3f3 	sdiv	r3, r2, r3
 8004b1a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint8_t NextItem = 0;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	uint8_t MaxTexLen = 0;
 8004b24:	2300      	movs	r3, #0
 8004b26:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t FrameHigh = 0;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	for(int Item = 0; Item < MaxLines; Item++)
 8004b30:	2300      	movs	r3, #0
 8004b32:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b34:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004b38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	f280 81bd 	bge.w	8004eba <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x40e>
	{
		NextItem = FirsListItem + Item;
 8004b40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b42:	b2da      	uxtb	r2, r3
 8004b44:	787b      	ldrb	r3, [r7, #1]
 8004b46:	4413      	add	r3, r2
 8004b48:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		if(NextItem >= MaxItems)
 8004b4c:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8004b50:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8004b54:	429a      	cmp	r2, r3
 8004b56:	f080 81af 	bcs.w	8004eb8 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x40c>
			break;
		if(NextItem == ItemSel && MenuSelected)
 8004b5a:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8004b5e:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8004b62:	429a      	cmp	r2, r3
 8004b64:	f040 810c 	bne.w	8004d80 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x2d4>
 8004b68:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 8107 	beq.w	8004d80 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x2d4>
		{
			assignTextParams(MenuItems[NextItem], u8g2Font);
 8004b72:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b7c:	4413      	add	r3, r2
 8004b7e:	681c      	ldr	r4, [r3, #0]
 8004b80:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004b84:	4618      	mov	r0, r3
 8004b86:	f00c fc69 	bl	801145c <_ZNSaIcEC1Ev>
 8004b8a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b92:	4621      	mov	r1, r4
 8004b94:	4618      	mov	r0, r3
 8004b96:	f00c ff29 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f7ff fcf5 	bl	8004594 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8004baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f00c fd85 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004bb4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f00c fc50 	bl	801145e <_ZNSaIcED1Ev>
			u8g2_SetFontMode(&U8G2_Display, 0);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	3324      	adds	r3, #36	; 0x24
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7fd f991 	bl	8001eec <u8g2_SetFontMode>
			u8g2_SetDrawColor(&U8G2_Display, 0);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	3324      	adds	r3, #36	; 0x24
 8004bce:	2100      	movs	r1, #0
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7fd fcbd 	bl	8002550 <u8g2_SetDrawColor>
			drawString(MenuItems[NextItem], FirstItemXPos, FirstItemYPos + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), u8g2Font);
 8004bd6:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004be0:	4413      	add	r3, r2
 8004be2:	681c      	ldr	r4, [r3, #0]
 8004be4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004be8:	4618      	mov	r0, r3
 8004bea:	f00c fc37 	bl	801145c <_ZNSaIcEC1Ev>
 8004bee:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004bf2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004bf6:	4621      	mov	r1, r4
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f00c fef7 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	7e5b      	ldrb	r3, [r3, #25]
 8004c02:	3303      	adds	r3, #3
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c08:	b2d2      	uxtb	r2, r2
 8004c0a:	fb02 f303 	mul.w	r3, r2, r3
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	78bb      	ldrb	r3, [r7, #2]
 8004c12:	4413      	add	r3, r2
 8004c14:	b2d8      	uxtb	r0, r3
 8004c16:	78fa      	ldrb	r2, [r7, #3]
 8004c18:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004c1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	4603      	mov	r3, r0
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f7ff fefe 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8004c2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f00c fd45 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004c34:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f00c fc10 	bl	801145e <_ZNSaIcED1Ev>
			u8g2_SetFontMode(&U8G2_Display, 1);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	3324      	adds	r3, #36	; 0x24
 8004c42:	2101      	movs	r1, #1
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7fd f951 	bl	8001eec <u8g2_SetFontMode>
			u8g2_SetDrawColor(&U8G2_Display, 1);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	3324      	adds	r3, #36	; 0x24
 8004c4e:	2101      	movs	r1, #1
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7fd fc7d 	bl	8002550 <u8g2_SetDrawColor>
			if(!WithCheckBox)
 8004c56:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8004c5a:	f083 0301 	eor.w	r3, r3, #1
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d033      	beq.n	8004ccc <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x220>
			{
				u8g2_SetFont(&U8G2_Display, displayFonts[W_8_H_8_ICON]);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004c70:	4619      	mov	r1, r3
 8004c72:	4610      	mov	r0, r2
 8004c74:	f7fd fa96 	bl	80021a4 <u8g2_SetFont>
				u8g2_DrawGlyph(&U8G2_Display, FirstItemXPos + textToWrite.textLen + 1, FirstItemYPos + textToWrite.textHigh + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 1, 0x006F);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	7e1a      	ldrb	r2, [r3, #24]
 8004c82:	78fb      	ldrb	r3, [r7, #3]
 8004c84:	4413      	add	r3, r2
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	3301      	adds	r3, #1
 8004c8a:	b2dc      	uxtb	r4, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	7e5a      	ldrb	r2, [r3, #25]
 8004c90:	78bb      	ldrb	r3, [r7, #2]
 8004c92:	4413      	add	r3, r2
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	7e5b      	ldrb	r3, [r3, #25]
 8004c9a:	3303      	adds	r3, #3
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004ca0:	b2c9      	uxtb	r1, r1
 8004ca2:	fb01 f303 	mul.w	r3, r1, r3
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	4413      	add	r3, r2
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	3301      	adds	r3, #1
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	236f      	movs	r3, #111	; 0x6f
 8004cb2:	4621      	mov	r1, r4
 8004cb4:	f7fd f92a 	bl	8001f0c <u8g2_DrawGlyph>
				u8g2_SetFont(&U8G2_Display, textToWrite.textFont);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	4610      	mov	r0, r2
 8004cc6:	f7fd fa6d 	bl	80021a4 <u8g2_SetFont>
			if(!WithCheckBox)
 8004cca:	e0e7      	b.n	8004e9c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
			}
			else
			{
				if(ItemsChecked[NextItem])
 8004ccc:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004cd0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004cd4:	4413      	add	r3, r2
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d034      	beq.n	8004d46 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x29a>
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004ce8:	3b0b      	subs	r3, #11
 8004cea:	b2d9      	uxtb	r1, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	7e5b      	ldrb	r3, [r3, #25]
 8004cf0:	3303      	adds	r3, #3
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	fb02 f303 	mul.w	r3, r2, r3
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	78bb      	ldrb	r3, [r7, #2]
 8004d00:	4413      	add	r3, r2
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	2308      	movs	r3, #8
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	2308      	movs	r3, #8
 8004d0a:	f7fc f9ad 	bl	8001068 <u8g2_DrawFrame>
					u8g2_DrawBox(&U8G2_Display, dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004d1a:	3b09      	subs	r3, #9
 8004d1c:	b2d9      	uxtb	r1, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	7e5b      	ldrb	r3, [r3, #25]
 8004d22:	3303      	adds	r3, #3
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d28:	b2d2      	uxtb	r2, r2
 8004d2a:	fb02 f303 	mul.w	r3, r2, r3
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	78bb      	ldrb	r3, [r7, #2]
 8004d32:	4413      	add	r3, r2
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	3302      	adds	r3, #2
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	2304      	movs	r3, #4
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	2304      	movs	r3, #4
 8004d40:	f7fc f95b 	bl	8000ffa <u8g2_DrawBox>
			if(!WithCheckBox)
 8004d44:	e0aa      	b.n	8004e9c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
					//					drawBox(dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4, BLACK_COLOR);
				}
				else
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004d52:	3b0b      	subs	r3, #11
 8004d54:	b2d9      	uxtb	r1, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	7e5b      	ldrb	r3, [r3, #25]
 8004d5a:	3303      	adds	r3, #3
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	fb02 f303 	mul.w	r3, r2, r3
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	78bb      	ldrb	r3, [r7, #2]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	2308      	movs	r3, #8
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	2308      	movs	r3, #8
 8004d74:	f7fc f978 	bl	8001068 <u8g2_DrawFrame>
			if(!WithCheckBox)
 8004d78:	e090      	b.n	8004e9c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
 8004d7a:	bf00      	nop
 8004d7c:	080127d4 	.word	0x080127d4
				}
			}
		}
		else
		{
			drawString(MenuItems[NextItem], FirstItemXPos, FirstItemYPos + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), u8g2Font);
 8004d80:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d8a:	4413      	add	r3, r2
 8004d8c:	681c      	ldr	r4, [r3, #0]
 8004d8e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004d92:	4618      	mov	r0, r3
 8004d94:	f00c fb62 	bl	801145c <_ZNSaIcEC1Ev>
 8004d98:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8004d9c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004da0:	4621      	mov	r1, r4
 8004da2:	4618      	mov	r0, r3
 8004da4:	f00c fe22 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	7e5b      	ldrb	r3, [r3, #25]
 8004dac:	3303      	adds	r3, #3
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	fb02 f303 	mul.w	r3, r2, r3
 8004db8:	b2da      	uxtb	r2, r3
 8004dba:	78bb      	ldrb	r3, [r7, #2]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	b2d8      	uxtb	r0, r3
 8004dc0:	78fa      	ldrb	r2, [r7, #3]
 8004dc2:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8004dc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	4603      	mov	r3, r0
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7ff fe29 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8004dd4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f00c fc70 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004dde:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004de2:	4618      	mov	r0, r3
 8004de4:	f00c fb3b 	bl	801145e <_ZNSaIcED1Ev>
			if(WithCheckBox)
 8004de8:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d055      	beq.n	8004e9c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
			{
				if(ItemsChecked[NextItem])
 8004df0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004df4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004df8:	4413      	add	r3, r2
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d034      	beq.n	8004e6a <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3be>
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004e0c:	3b0b      	subs	r3, #11
 8004e0e:	b2d9      	uxtb	r1, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	7e5b      	ldrb	r3, [r3, #25]
 8004e14:	3303      	adds	r3, #3
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	fb02 f303 	mul.w	r3, r2, r3
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	78bb      	ldrb	r3, [r7, #2]
 8004e24:	4413      	add	r3, r2
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	2308      	movs	r3, #8
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	2308      	movs	r3, #8
 8004e2e:	f7fc f91b 	bl	8001068 <u8g2_DrawFrame>
					u8g2_DrawBox(&U8G2_Display, dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004e3e:	3b09      	subs	r3, #9
 8004e40:	b2d9      	uxtb	r1, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	7e5b      	ldrb	r3, [r3, #25]
 8004e46:	3303      	adds	r3, #3
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e4c:	b2d2      	uxtb	r2, r2
 8004e4e:	fb02 f303 	mul.w	r3, r2, r3
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	78bb      	ldrb	r3, [r7, #2]
 8004e56:	4413      	add	r3, r2
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	3302      	adds	r3, #2
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	2304      	movs	r3, #4
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	2304      	movs	r3, #4
 8004e64:	f7fc f8c9 	bl	8000ffa <u8g2_DrawBox>
 8004e68:	e018      	b.n	8004e9c <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x3f0>
					//					drawBox(dispParams.width - 9, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)) + 2, 4, 4, BLACK_COLOR);
				}
				else
				{
					u8g2_DrawFrame(&U8G2_Display, dispParams.width - 11, FirstItemYPos  + (Item * (textToWrite.textHigh + MENU_ITEM_INTERLINE)), 8, 8);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004e76:	3b0b      	subs	r3, #11
 8004e78:	b2d9      	uxtb	r1, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	7e5b      	ldrb	r3, [r3, #25]
 8004e7e:	3303      	adds	r3, #3
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e84:	b2d2      	uxtb	r2, r2
 8004e86:	fb02 f303 	mul.w	r3, r2, r3
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	78bb      	ldrb	r3, [r7, #2]
 8004e8e:	4413      	add	r3, r2
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	2308      	movs	r3, #8
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	2308      	movs	r3, #8
 8004e98:	f7fc f8e6 	bl	8001068 <u8g2_DrawFrame>
				}
			}
		}
		if(MaxTexLen < textToWrite.textLen)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	7e1b      	ldrb	r3, [r3, #24]
 8004ea0:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d203      	bcs.n	8004eb0 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x404>
			MaxTexLen = textToWrite.textLen;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	7e1b      	ldrb	r3, [r3, #24]
 8004eac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	for(int Item = 0; Item < MaxLines; Item++)
 8004eb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004eb6:	e63d      	b.n	8004b34 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x88>
			break;
 8004eb8:	bf00      	nop
	}
	if((textToWrite.textHigh * (MaxItems + 1)) + 2 < dispParams.high - FirstItemYPos - 1 )
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	7e5b      	ldrb	r3, [r3, #25]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	fb03 f302 	mul.w	r3, r3, r2
 8004eca:	1c9a      	adds	r2, r3, #2
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	78bb      	ldrb	r3, [r7, #2]
 8004ed6:	1acb      	subs	r3, r1, r3
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	429a      	cmp	r2, r3
 8004edc:	da0c      	bge.n	8004ef8 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x44c>
		FrameHigh = (textToWrite.textHigh * (MaxItems + 1)) + 2;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	7e5b      	ldrb	r3, [r3, #25]
 8004ee2:	f897 2098 	ldrb.w	r2, [r7, #152]	; 0x98
 8004ee6:	3201      	adds	r2, #1
 8004ee8:	b2d2      	uxtb	r2, r2
 8004eea:	fb02 f303 	mul.w	r3, r2, r3
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	3302      	adds	r3, #2
 8004ef2:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8004ef6:	e008      	b.n	8004f0a <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x45e>
	else
		FrameHigh = dispParams.high - FirstItemYPos - 1;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8004efe:	78bb      	ldrb	r3, [r7, #2]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	3b01      	subs	r3, #1
 8004f06:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	if(!WithCheckBox)
 8004f0a:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8004f0e:	f083 0301 	eor.w	r3, r3, #1
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d015      	beq.n	8004f44 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x498>
	{
		u8g2_DrawRFrame(&U8G2_Display, FirstItemXPos - 1, FirstItemYPos - 1, MaxTexLen + 10, FrameHigh, 3);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004f1e:	78fb      	ldrb	r3, [r7, #3]
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b2d9      	uxtb	r1, r3
 8004f24:	78bb      	ldrb	r3, [r7, #2]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004f2e:	330a      	adds	r3, #10
 8004f30:	b2dc      	uxtb	r4, r3
 8004f32:	2303      	movs	r3, #3
 8004f34:	9301      	str	r3, [sp, #4]
 8004f36:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	4623      	mov	r3, r4
 8004f3e:	f7fc f8f4 	bl	800112a <u8g2_DrawRFrame>
 8004f42:	e019      	b.n	8004f78 <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh+0x4cc>
	}
	else
	{
		u8g2_DrawRFrame(&U8G2_Display, FirstItemXPos - 1, FirstItemYPos - 1, dispParams.width - FirstItemXPos - 1, FrameHigh, 3);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004f4a:	78fb      	ldrb	r3, [r7, #3]
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	b2d9      	uxtb	r1, r3
 8004f50:	78bb      	ldrb	r3, [r7, #2]
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b2dc      	uxtb	r4, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8004f5c:	78fb      	ldrb	r3, [r7, #3]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	3b01      	subs	r3, #1
 8004f64:	b2da      	uxtb	r2, r3
 8004f66:	2303      	movs	r3, #3
 8004f68:	9301      	str	r3, [sp, #4]
 8004f6a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	4613      	mov	r3, r2
 8004f72:	4622      	mov	r2, r4
 8004f74:	f7fc f8d9 	bl	800112a <u8g2_DrawRFrame>
	}
	return MaxLines;
 8004f78:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3784      	adds	r7, #132	; 0x84
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd90      	pop	{r4, r7, pc}

08004f84 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>:

void NHDST7565_LCD::drawSymbol(uint8_t XPos, uint8_t YPos, const uint8_t *SymbolFont, uint16_t SymbolCode)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b08e      	sub	sp, #56	; 0x38
 8004f88:	af02      	add	r7, sp, #8
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	607b      	str	r3, [r7, #4]
 8004f8e:	460b      	mov	r3, r1
 8004f90:	72fb      	strb	r3, [r7, #11]
 8004f92:	4613      	mov	r3, r2
 8004f94:	72bb      	strb	r3, [r7, #10]
	uint8_t NewXPos = 0, NewYPos = 0;
 8004f96:	2300      	movs	r3, #0
 8004f98:	74fb      	strb	r3, [r7, #19]
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	74bb      	strb	r3, [r7, #18]
	assignTextParams("", SymbolFont);
 8004f9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f00c fa5a 	bl	801145c <_ZNSaIcEC1Ev>
 8004fa8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004fac:	f107 0314 	add.w	r3, r7, #20
 8004fb0:	4915      	ldr	r1, [pc, #84]	; (8005008 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht+0x84>)
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f00c fd1a 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004fb8:	f107 0314 	add.w	r3, r7, #20
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f7ff fae7 	bl	8004594 <_ZN13NHDST7565_LCD16assignTextParamsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKh>
 8004fc6:	f107 0314 	add.w	r3, r7, #20
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f00c fb77 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004fd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f00c fa42 	bl	801145e <_ZNSaIcED1Ev>
	assignNewDrawCoord(XPos, YPos, NewXPos, NewYPos);
 8004fda:	f107 0013 	add.w	r0, r7, #19
 8004fde:	7aba      	ldrb	r2, [r7, #10]
 8004fe0:	7af9      	ldrb	r1, [r7, #11]
 8004fe2:	f107 0312 	add.w	r3, r7, #18
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	4603      	mov	r3, r0
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f7ff fb42 	bl	8004674 <_ZN13NHDST7565_LCD18assignNewDrawCoordEhhRhS0_>
	u8g2_DrawGlyph(&U8G2_Display, NewXPos, NewYPos, SymbolCode);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004ff6:	7cf9      	ldrb	r1, [r7, #19]
 8004ff8:	7cba      	ldrb	r2, [r7, #18]
 8004ffa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004ffc:	f7fc ff86 	bl	8001f0c <u8g2_DrawGlyph>
}
 8005000:	bf00      	nop
 8005002:	3730      	adds	r7, #48	; 0x30
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	080127d4 	.word	0x080127d4

0800500c <_ZN13NHDST7565_LCD12drawTimeDateENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>:


void NHDST7565_LCD::drawTimeDate(String Time, String Date)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b092      	sub	sp, #72	; 0x48
 8005010:	af02      	add	r7, sp, #8
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
	drawString(Time, LEFT_POS, TOP_POS, displayFonts[W_3_H_6]);
 8005018:	f107 0310 	add.w	r3, r7, #16
 800501c:	68b9      	ldr	r1, [r7, #8]
 800501e:	4618      	mov	r0, r3
 8005020:	f00c fcb1 	bl	8011986 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800502a:	f107 0110 	add.w	r1, r7, #16
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	2346      	movs	r3, #70	; 0x46
 8005032:	2282      	movs	r2, #130	; 0x82
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f7ff fcf6 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800503a:	f107 0310 	add.w	r3, r7, #16
 800503e:	4618      	mov	r0, r3
 8005040:	f00c fb3d 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	drawString(Date, RIGHT_POS, TOP_POS, displayFonts[W_3_H_6]);
 8005044:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005048:	6879      	ldr	r1, [r7, #4]
 800504a:	4618      	mov	r0, r3
 800504c:	f00c fc9b 	bl	8011986 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005056:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	2346      	movs	r3, #70	; 0x46
 800505e:	2284      	movs	r2, #132	; 0x84
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f7ff fce0 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8005066:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800506a:	4618      	mov	r0, r3
 800506c:	f00c fb27 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8005070:	bf00      	nop
 8005072:	3740      	adds	r7, #64	; 0x40
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>:

void NHDST7565_LCD::drawFullScreenPopUp(String Text, uint16_t Delay)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b08c      	sub	sp, #48	; 0x30
 800507c:	af02      	add	r7, sp, #8
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	4613      	mov	r3, r2
 8005084:	80fb      	strh	r3, [r7, #6]
	clearFrameBuffer();
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f7ff fca5 	bl	80049d6 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
	u8g2_DrawRFrame(&U8G2_Display, 1, 1, dispParams.width - 1, dispParams.high - 1, 2);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8005098:	3b01      	subs	r3, #1
 800509a:	b2d9      	uxtb	r1, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80050a2:	3b01      	subs	r3, #1
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2202      	movs	r2, #2
 80050a8:	9201      	str	r2, [sp, #4]
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	460b      	mov	r3, r1
 80050ae:	2201      	movs	r2, #1
 80050b0:	2101      	movs	r1, #1
 80050b2:	f7fc f83a 	bl	800112a <u8g2_DrawRFrame>
	drawString(Text, CENTER_POS, MIDDLE_POS, displayFonts[W_6_H_13_B]);
 80050b6:	f107 0310 	add.w	r3, r7, #16
 80050ba:	68b9      	ldr	r1, [r7, #8]
 80050bc:	4618      	mov	r0, r3
 80050be:	f00c fc62 	bl	8011986 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80050c8:	f107 0110 	add.w	r1, r7, #16
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	2347      	movs	r3, #71	; 0x47
 80050d0:	2283      	movs	r2, #131	; 0x83
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f7ff fca7 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80050d8:	f107 0310 	add.w	r3, r7, #16
 80050dc:	4618      	mov	r0, r3
 80050de:	f00c faee 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	sendFrameBuffer();
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f7ff fc84 	bl	80049f0 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
	HAL_Delay(Delay);
 80050e8:	88fb      	ldrh	r3, [r7, #6]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f007 fad6 	bl	800c69c <HAL_Delay>
}
 80050f0:	bf00      	nop
 80050f2:	3728      	adds	r7, #40	; 0x28
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <_ZN13NHDST7565_LCD8drawIconEhhhhPKh>:

void NHDST7565_LCD::drawIcon(uint8_t XPos, uint8_t YPos, uint8_t IconW,
		uint8_t IconH, const uint8_t *IconBits)
{
 80050f8:	b590      	push	{r4, r7, lr}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af02      	add	r7, sp, #8
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	4608      	mov	r0, r1
 8005102:	4611      	mov	r1, r2
 8005104:	461a      	mov	r2, r3
 8005106:	4603      	mov	r3, r0
 8005108:	70fb      	strb	r3, [r7, #3]
 800510a:	460b      	mov	r3, r1
 800510c:	70bb      	strb	r3, [r7, #2]
 800510e:	4613      	mov	r3, r2
 8005110:	707b      	strb	r3, [r7, #1]
	u8g2_DrawXBM(&U8G2_Display, XPos, YPos, IconW, IconH, IconBits);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8005118:	787c      	ldrb	r4, [r7, #1]
 800511a:	78ba      	ldrb	r2, [r7, #2]
 800511c:	78f9      	ldrb	r1, [r7, #3]
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	9301      	str	r3, [sp, #4]
 8005122:	7e3b      	ldrb	r3, [r7, #24]
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	4623      	mov	r3, r4
 8005128:	f7fb ff24 	bl	8000f74 <u8g2_DrawXBM>
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	bd90      	pop	{r4, r7, pc}

08005134 <_ZStneIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
    { return !(__lhs == __rhs); }
 800513e:	6839      	ldr	r1, [r7, #0]
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f808 	bl	8005156 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8005146:	4603      	mov	r3, r0
 8005148:	f083 0301 	eor.w	r3, r3, #1
 800514c:	b2db      	uxtb	r3, r3
 800514e:	4618      	mov	r0, r3
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8005156:	b580      	push	{r7, lr}
 8005158:	b082      	sub	sp, #8
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	6039      	str	r1, [r7, #0]
    { return __lhs.compare(__rhs) == 0; }
 8005160:	6839      	ldr	r1, [r7, #0]
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f00c fbfa 	bl	801195c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	bf0c      	ite	eq
 800516e:	2301      	moveq	r3, #1
 8005170:	2300      	movne	r3, #0
 8005172:	b2db      	uxtb	r3, r3
 8005174:	4618      	mov	r0, r3
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <_ZN12STM32_EEPROM6formatEv>:

// ERASE

//##########################################################################################################
bool STM32_EEPROM::format(void)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b088      	sub	sp, #32
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
	bool RetVal = false;
 8005184:	2300      	movs	r3, #0
 8005186:	77fb      	strb	r3, [r7, #31]
	uint32_t	error;
	HAL_FLASH_Unlock();
 8005188:	f008 f88c 	bl	800d2a4 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	flashErase;
	flashErase.NbPages=1;
 800518c:	2301      	movs	r3, #1
 800518e:	617b      	str	r3, [r7, #20]
	flashErase.Banks = FLASH_BANK_1;
 8005190:	2301      	movs	r3, #1
 8005192:	60fb      	str	r3, [r7, #12]
	flashErase.PageAddress = _EEPROM_FLASH_PAGE_ADDRESS;
 8005194:	4b12      	ldr	r3, [pc, #72]	; (80051e0 <_ZN12STM32_EEPROM6formatEv+0x64>)
 8005196:	613b      	str	r3, [r7, #16]
	flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 8005198:	2300      	movs	r3, #0
 800519a:	60bb      	str	r3, [r7, #8]
	if(HAL_FLASHEx_Erase(&flashErase, &error) == HAL_OK)
 800519c:	f107 0218 	add.w	r2, r7, #24
 80051a0:	f107 0308 	add.w	r3, r7, #8
 80051a4:	4611      	mov	r1, r2
 80051a6:	4618      	mov	r0, r3
 80051a8:	f008 f964 	bl	800d474 <HAL_FLASHEx_Erase>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	bf0c      	ite	eq
 80051b2:	2301      	moveq	r3, #1
 80051b4:	2300      	movne	r3, #0
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00a      	beq.n	80051d2 <_ZN12STM32_EEPROM6formatEv+0x56>
	{
		HAL_FLASH_Lock();
 80051bc:	f008 f898 	bl	800d2f0 <HAL_FLASH_Lock>
		if(error != 0xFFFFFFFF)
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c6:	d002      	beq.n	80051ce <_ZN12STM32_EEPROM6formatEv+0x52>
			RetVal = false;
 80051c8:	2300      	movs	r3, #0
 80051ca:	77fb      	strb	r3, [r7, #31]
 80051cc:	e001      	b.n	80051d2 <_ZN12STM32_EEPROM6formatEv+0x56>
		else
			RetVal = true;
 80051ce:	2301      	movs	r3, #1
 80051d0:	77fb      	strb	r3, [r7, #31]
	}
	HAL_FLASH_Lock();
 80051d2:	f008 f88d 	bl	800d2f0 <HAL_FLASH_Lock>
	return RetVal;
 80051d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3720      	adds	r7, #32
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	0801f400 	.word	0x0801f400

080051e4 <_ZN12STM32_EEPROM10singleReadEtPm>:
//##########################################################################################################



bool STM32_EEPROM::singleRead(uint16_t VirtualAddress, uint32_t* Data)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	460b      	mov	r3, r1
 80051ee:	607a      	str	r2, [r7, #4]
 80051f0:	817b      	strh	r3, [r7, #10]
	if(VirtualAddress >= (_EEPROM_FLASH_PAGE_SIZE/4))
 80051f2:	897b      	ldrh	r3, [r7, #10]
 80051f4:	2bff      	cmp	r3, #255	; 0xff
 80051f6:	d901      	bls.n	80051fc <_ZN12STM32_EEPROM10singleReadEtPm+0x18>
		return false;
 80051f8:	2300      	movs	r3, #0
 80051fa:	e009      	b.n	8005210 <_ZN12STM32_EEPROM10singleReadEtPm+0x2c>
	*Data =  (*(uint32_t*)((VirtualAddress*4) + _EEPROM_FLASH_PAGE_ADDRESS));
 80051fc:	897b      	ldrh	r3, [r7, #10]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8005204:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	601a      	str	r2, [r3, #0]
	return true;
 800520e:	2301      	movs	r3, #1
}
 8005210:	4618      	mov	r0, r3
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	bc80      	pop	{r7}
 8005218:	4770      	bx	lr

0800521a <_ZN12STM32_EEPROM9multiReadEttPm>:


bool STM32_EEPROM::multiRead(uint16_t StartVirtualAddress,uint16_t HowMuchToRead, uint32_t* Data)
{
 800521a:	b480      	push	{r7}
 800521c:	b087      	sub	sp, #28
 800521e:	af00      	add	r7, sp, #0
 8005220:	60f8      	str	r0, [r7, #12]
 8005222:	607b      	str	r3, [r7, #4]
 8005224:	460b      	mov	r3, r1
 8005226:	817b      	strh	r3, [r7, #10]
 8005228:	4613      	mov	r3, r2
 800522a:	813b      	strh	r3, [r7, #8]
	bool RetVal = false;
 800522c:	2300      	movs	r3, #0
 800522e:	75fb      	strb	r3, [r7, #23]
	if((StartVirtualAddress+HowMuchToRead) <= (_EEPROM_FLASH_PAGE_SIZE/4))
 8005230:	897a      	ldrh	r2, [r7, #10]
 8005232:	893b      	ldrh	r3, [r7, #8]
 8005234:	4413      	add	r3, r2
 8005236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800523a:	dc19      	bgt.n	8005270 <_ZN12STM32_EEPROM9multiReadEttPm+0x56>
	{
		for(uint16_t i = StartVirtualAddress ; i < (HowMuchToRead + StartVirtualAddress); i++)
 800523c:	897b      	ldrh	r3, [r7, #10]
 800523e:	82bb      	strh	r3, [r7, #20]
 8005240:	8aba      	ldrh	r2, [r7, #20]
 8005242:	8939      	ldrh	r1, [r7, #8]
 8005244:	897b      	ldrh	r3, [r7, #10]
 8005246:	440b      	add	r3, r1
 8005248:	429a      	cmp	r2, r3
 800524a:	da0f      	bge.n	800526c <_ZN12STM32_EEPROM9multiReadEttPm+0x52>
		{
			*Data =  (*(uint32_t*)((i*4) + _EEPROM_FLASH_PAGE_ADDRESS));
 800524c:	8abb      	ldrh	r3, [r7, #20]
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8005254:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	601a      	str	r2, [r3, #0]
			Data++;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	3304      	adds	r3, #4
 8005262:	607b      	str	r3, [r7, #4]
		for(uint16_t i = StartVirtualAddress ; i < (HowMuchToRead + StartVirtualAddress); i++)
 8005264:	8abb      	ldrh	r3, [r7, #20]
 8005266:	3301      	adds	r3, #1
 8005268:	82bb      	strh	r3, [r7, #20]
 800526a:	e7e9      	b.n	8005240 <_ZN12STM32_EEPROM9multiReadEttPm+0x26>
		}
		RetVal = true;
 800526c:	2301      	movs	r3, #1
 800526e:	75fb      	strb	r3, [r7, #23]
	}
	return RetVal;
 8005270:	7dfb      	ldrb	r3, [r7, #23]
}
 8005272:	4618      	mov	r0, r3
 8005274:	371c      	adds	r7, #28
 8005276:	46bd      	mov	sp, r7
 8005278:	bc80      	pop	{r7}
 800527a:	4770      	bx	lr

0800527c <_ZN12STM32_EEPROM5writeEPm>:
// SCRITTURA

//##########################################################################################################

bool STM32_EEPROM::write(uint32_t Data[])
{
 800527c:	b590      	push	{r4, r7, lr}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
    uint32_t OldValue = 0;
 8005286:	2300      	movs	r3, #0
 8005288:	60bb      	str	r3, [r7, #8]
    bool RetVal = false;
 800528a:	2300      	movs	r3, #0
 800528c:	73fb      	strb	r3, [r7, #15]
	if(format())
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7ff ff74 	bl	800517c <_ZN12STM32_EEPROM6formatEv>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d03c      	beq.n	8005314 <_ZN12STM32_EEPROM5writeEPm+0x98>
	{
		HAL_FLASH_Unlock();
 800529a:	f008 f803 	bl	800d2a4 <HAL_FLASH_Unlock>
		for(uint16_t i = 0 ; i < (_EEPROM_FLASH_PAGE_SIZE/4); i++)
 800529e:	2300      	movs	r3, #0
 80052a0:	81bb      	strh	r3, [r7, #12]
 80052a2:	89bb      	ldrh	r3, [r7, #12]
 80052a4:	2bff      	cmp	r3, #255	; 0xff
 80052a6:	d833      	bhi.n	8005310 <_ZN12STM32_EEPROM5writeEPm+0x94>
		{
			singleRead(i, &OldValue);
 80052a8:	f107 0208 	add.w	r2, r7, #8
 80052ac:	89bb      	ldrh	r3, [r7, #12]
 80052ae:	4619      	mov	r1, r3
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f7ff ff97 	bl	80051e4 <_ZN12STM32_EEPROM10singleReadEtPm>
			if(Data[i] != OldValue)
 80052b6:	89bb      	ldrh	r3, [r7, #12]
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	4413      	add	r3, r2
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d020      	beq.n	8005308 <_ZN12STM32_EEPROM5writeEPm+0x8c>
			{
				if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (i*4) + _EEPROM_FLASH_PAGE_ADDRESS, (uint64_t)Data[i]) != HAL_OK)
 80052c6:	89bb      	ldrh	r3, [r7, #12]
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 80052ce:	f501 31fa 	add.w	r1, r1, #128000	; 0x1f400
 80052d2:	89bb      	ldrh	r3, [r7, #12]
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	4413      	add	r3, r2
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f04f 0400 	mov.w	r4, #0
 80052e0:	461a      	mov	r2, r3
 80052e2:	4623      	mov	r3, r4
 80052e4:	2002      	movs	r0, #2
 80052e6:	f007 ff2d 	bl	800d144 <HAL_FLASH_Program>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	bf14      	ite	ne
 80052f0:	2301      	movne	r3, #1
 80052f2:	2300      	moveq	r3, #0
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d004      	beq.n	8005304 <_ZN12STM32_EEPROM5writeEPm+0x88>
				{
					HAL_FLASH_Lock();
 80052fa:	f007 fff9 	bl	800d2f0 <HAL_FLASH_Lock>
					RetVal = false;
 80052fe:	2300      	movs	r3, #0
 8005300:	73fb      	strb	r3, [r7, #15]
					break;
 8005302:	e005      	b.n	8005310 <_ZN12STM32_EEPROM5writeEPm+0x94>
				}
				RetVal = true;
 8005304:	2301      	movs	r3, #1
 8005306:	73fb      	strb	r3, [r7, #15]
		for(uint16_t i = 0 ; i < (_EEPROM_FLASH_PAGE_SIZE/4); i++)
 8005308:	89bb      	ldrh	r3, [r7, #12]
 800530a:	3301      	adds	r3, #1
 800530c:	81bb      	strh	r3, [r7, #12]
 800530e:	e7c8      	b.n	80052a2 <_ZN12STM32_EEPROM5writeEPm+0x26>
			}
		}
		HAL_FLASH_Lock();
 8005310:	f007 ffee 	bl	800d2f0 <HAL_FLASH_Lock>
	}
	return RetVal;
 8005314:	7bfb      	ldrb	r3, [r7, #15]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	bd90      	pop	{r4, r7, pc}

0800531e <_ZN12STM32_EEPROM16transferRamToMemEPm>:

//##########################################################################################################


void STM32_EEPROM::transferRamToMem(uint32_t *RamVector)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b082      	sub	sp, #8
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	6039      	str	r1, [r7, #0]
    write(RamVector);
 8005328:	6839      	ldr	r1, [r7, #0]
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7ff ffa6 	bl	800527c <_ZN12STM32_EEPROM5writeEPm>
}
 8005330:	bf00      	nop
 8005332:	3708      	adds	r7, #8
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <_ZN12STM32_EEPROM15tranferMemToRamEPm>:

void STM32_EEPROM::tranferMemToRam(uint32_t *RamVector)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
    multiRead(EEPROM_VIRTUAL_ADDR_BEGIN, MAX_DIM_EEPROM_ARRAY, RamVector);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005348:	2100      	movs	r1, #0
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7ff ff65 	bl	800521a <_ZN12STM32_EEPROM9multiReadEttPm>
}
 8005350:	bf00      	nop
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <_ZN12STM32_EEPROM11eraseMemoryEv>:

void STM32_EEPROM::eraseMemory()
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
	format();
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7ff ff0b 	bl	800517c <_ZN12STM32_EEPROM6formatEv>
	tranferMemToRam(eepromArray);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4619      	mov	r1, r3
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7ff ffe3 	bl	8005338 <_ZN12STM32_EEPROM15tranferMemToRamEPm>
    return;
 8005372:	bf00      	nop
}
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <_ZN12STM32_EEPROM11memoryEmptyEv>:


bool STM32_EEPROM::memoryEmpty()
{
 800537a:	b480      	push	{r7}
 800537c:	b085      	sub	sp, #20
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
    for(uint16_t i = 0; i < MAX_DIM_EEPROM_ARRAY; i++)
 8005382:	2300      	movs	r3, #0
 8005384:	81fb      	strh	r3, [r7, #14]
 8005386:	89fb      	ldrh	r3, [r7, #14]
 8005388:	2bff      	cmp	r3, #255	; 0xff
 800538a:	d80e      	bhi.n	80053aa <_ZN12STM32_EEPROM11memoryEmptyEv+0x30>
    {
        if(eepromArray[i] != BLANK_VALUE)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	89fb      	ldrh	r3, [r7, #14]
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539c:	d001      	beq.n	80053a2 <_ZN12STM32_EEPROM11memoryEmptyEv+0x28>
            return false;
 800539e:	2300      	movs	r3, #0
 80053a0:	e004      	b.n	80053ac <_ZN12STM32_EEPROM11memoryEmptyEv+0x32>
    for(uint16_t i = 0; i < MAX_DIM_EEPROM_ARRAY; i++)
 80053a2:	89fb      	ldrh	r3, [r7, #14]
 80053a4:	3301      	adds	r3, #1
 80053a6:	81fb      	strh	r3, [r7, #14]
 80053a8:	e7ed      	b.n	8005386 <_ZN12STM32_EEPROM11memoryEmptyEv+0xc>
    }
    return true;
 80053aa:	2301      	movs	r3, #1
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bc80      	pop	{r7}
 80053b4:	4770      	bx	lr

080053b6 <_ZN12STM32_EEPROMC1Ev>:


STM32_EEPROM::STM32_EEPROM()
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b082      	sub	sp, #8
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	605a      	str	r2, [r3, #4]
{
	eepromArray = new uint32_t[MAX_DIM_EEPROM_ARRAY];
 80053c4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80053c8:	f00c f82a 	bl	8011420 <_Znaj>
 80053cc:	4603      	mov	r3, r0
 80053ce:	461a      	mov	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	601a      	str	r2, [r3, #0]
	tranferMemToRam(eepromArray);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4619      	mov	r1, r3
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7ff ffac 	bl	8005338 <_ZN12STM32_EEPROM15tranferMemToRamEPm>
}
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4618      	mov	r0, r3
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>:

void STM32_EEPROM::writeToMemory(uint16_t Address, uint32_t Val, bool Transfer)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b084      	sub	sp, #16
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	60f8      	str	r0, [r7, #12]
 80053f2:	607a      	str	r2, [r7, #4]
 80053f4:	461a      	mov	r2, r3
 80053f6:	460b      	mov	r3, r1
 80053f8:	817b      	strh	r3, [r7, #10]
 80053fa:	4613      	mov	r3, r2
 80053fc:	727b      	strb	r3, [r7, #9]
	eepromArray[Address] = Val;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	897b      	ldrh	r3, [r7, #10]
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	4413      	add	r3, r2
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	601a      	str	r2, [r3, #0]
	if(Transfer)
 800540c:	7a7b      	ldrb	r3, [r7, #9]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d005      	beq.n	800541e <_ZN12STM32_EEPROM13writeToMemoryEtmb+0x34>
	{
		transferRamToMem(eepromArray);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4619      	mov	r1, r3
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f7ff ff80 	bl	800531e <_ZN12STM32_EEPROM16transferRamToMemEPm>
	}
}
 800541e:	bf00      	nop
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <_ZN12STM32_EEPROM10loadMemoryEtPm>:

void STM32_EEPROM::loadMemory(uint16_t Address, uint32_t *Val)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b084      	sub	sp, #16
 800542a:	af00      	add	r7, sp, #0
 800542c:	60f8      	str	r0, [r7, #12]
 800542e:	460b      	mov	r3, r1
 8005430:	607a      	str	r2, [r7, #4]
 8005432:	817b      	strh	r3, [r7, #10]
	tranferMemToRam(eepromArray);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4619      	mov	r1, r3
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f7ff ff7c 	bl	8005338 <_ZN12STM32_EEPROM15tranferMemToRamEPm>
	*Val = eepromArray[Address];
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	897b      	ldrh	r3, [r7, #10]
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4413      	add	r3, r2
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	601a      	str	r2, [r3, #0]
}
 8005450:	bf00      	nop
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <_ZN6BUTTON7readPinEv>:

#include "Keyboard.h"


bool BUTTON::readPin()
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
	bool State = false;
 8005460:	2300      	movs	r3, #0
 8005462:	73fb      	strb	r3, [r7, #15]
	if(HAL_GPIO_ReadPin(buttonPort, buttonPin) == (GPIO_PinState)LOW)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	889b      	ldrh	r3, [r3, #4]
 800546c:	4619      	mov	r1, r3
 800546e:	4610      	mov	r0, r2
 8005470:	f008 fb7a 	bl	800db68 <HAL_GPIO_ReadPin>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	bf0c      	ite	eq
 800547a:	2301      	moveq	r3, #1
 800547c:	2300      	movne	r3, #0
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <_ZN6BUTTON7readPinEv+0x30>
	{
		State = true;
 8005484:	2301      	movs	r3, #1
 8005486:	73fb      	strb	r3, [r7, #15]
	}
	return State;
 8005488:	7bfb      	ldrb	r3, [r7, #15]
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>:

BUTTON::BUTTON(GPIO_TypeDef *ButtonPort, uint16_t ButtonPin, uint16_t LongPressDelay)
 8005492:	b480      	push	{r7}
 8005494:	b085      	sub	sp, #20
 8005496:	af00      	add	r7, sp, #0
 8005498:	60f8      	str	r0, [r7, #12]
 800549a:	60b9      	str	r1, [r7, #8]
 800549c:	4611      	mov	r1, r2
 800549e:	461a      	mov	r2, r3
 80054a0:	460b      	mov	r3, r1
 80054a2:	80fb      	strh	r3, [r7, #6]
 80054a4:	4613      	mov	r3, r2
 80054a6:	80bb      	strh	r3, [r7, #4]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	609a      	str	r2, [r3, #8]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	819a      	strh	r2, [r3, #12]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	739a      	strb	r2, [r3, #14]
{
	buttonPort = ButtonPort;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	601a      	str	r2, [r3, #0]
	buttonPin = ButtonPin;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	88fa      	ldrh	r2, [r7, #6]
 80054c4:	809a      	strh	r2, [r3, #4]
	delay = LongPressDelay;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	88ba      	ldrh	r2, [r7, #4]
 80054ca:	819a      	strh	r2, [r3, #12]
}
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4618      	mov	r0, r3
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bc80      	pop	{r7}
 80054d6:	4770      	bx	lr

080054d8 <_ZN6BUTTON11checkButtonEv>:

uint8_t BUTTON::checkButton()
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
	uint8_t Status = NO_PRESS;
 80054e0:	2302      	movs	r3, #2
 80054e2:	73fb      	strb	r3, [r7, #15]
	bool LongPressed = false;
 80054e4:	2300      	movs	r3, #0
 80054e6:	73bb      	strb	r3, [r7, #14]
	bool ButtonState = readPin();
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f7ff ffb5 	bl	8005458 <_ZN6BUTTON7readPinEv>
 80054ee:	4603      	mov	r3, r0
 80054f0:	737b      	strb	r3, [r7, #13]
	if(ButtonState)
 80054f2:	7b7b      	ldrb	r3, [r7, #13]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d03c      	beq.n	8005572 <_ZN6BUTTON11checkButtonEv+0x9a>
	{
		longPressDelay = HAL_GetTick();
 80054f8:	f007 f8c6 	bl	800c688 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	609a      	str	r2, [r3, #8]
		while(ButtonState)
 8005502:	7b7b      	ldrb	r3, [r7, #13]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d015      	beq.n	8005534 <_ZN6BUTTON11checkButtonEv+0x5c>
		{
			ButtonState = readPin();
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f7ff ffa5 	bl	8005458 <_ZN6BUTTON7readPinEv>
 800550e:	4603      	mov	r3, r0
 8005510:	737b      	strb	r3, [r7, #13]
			if(HAL_GetTick() - longPressDelay > delay)
 8005512:	f007 f8b9 	bl	800c688 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	8992      	ldrh	r2, [r2, #12]
 8005522:	4293      	cmp	r3, r2
 8005524:	bf8c      	ite	hi
 8005526:	2301      	movhi	r3, #1
 8005528:	2300      	movls	r3, #0
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0e8      	beq.n	8005502 <_ZN6BUTTON11checkButtonEv+0x2a>
			{
				LongPressed = true;
 8005530:	2301      	movs	r3, #1
 8005532:	73bb      	strb	r3, [r7, #14]
				break;
			}
		}
		if(!LongPressed)
 8005534:	7bbb      	ldrb	r3, [r7, #14]
 8005536:	f083 0301 	eor.w	r3, r3, #1
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00d      	beq.n	800555c <_ZN6BUTTON11checkButtonEv+0x84>
		{
			if(!wasLongPressed)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	7b9b      	ldrb	r3, [r3, #14]
 8005544:	f083 0301 	eor.w	r3, r3, #1
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d002      	beq.n	8005554 <_ZN6BUTTON11checkButtonEv+0x7c>
				Status = PRESSED;
 800554e:	2300      	movs	r3, #0
 8005550:	73fb      	strb	r3, [r7, #15]
 8005552:	e008      	b.n	8005566 <_ZN6BUTTON11checkButtonEv+0x8e>
			else
				wasLongPressed = false;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	739a      	strb	r2, [r3, #14]
 800555a:	e004      	b.n	8005566 <_ZN6BUTTON11checkButtonEv+0x8e>
		}
		else
		{
			Status = LONG_PRESSED;
 800555c:	2301      	movs	r3, #1
 800555e:	73fb      	strb	r3, [r7, #15]
			wasLongPressed = true;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	739a      	strb	r2, [r3, #14]
		}
		longPressDelay = 0;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	609a      	str	r2, [r3, #8]
		HAL_Delay(10);
 800556c:	200a      	movs	r0, #10
 800556e:	f007 f895 	bl	800c69c <HAL_Delay>
	}
	return Status;
 8005572:	7bfb      	ldrb	r3, [r7, #15]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <_ZN8DryerKeyC1Ev>:

DryerKey::DryerKey()
 800557c:	b590      	push	{r4, r7, lr}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
{
	keys[0] = new BUTTON(UpButton_GPIO_Port, UpButton_Pin, 250);
 8005584:	2010      	movs	r0, #16
 8005586:	f00b ff4d 	bl	8011424 <_Znwj>
 800558a:	4603      	mov	r3, r0
 800558c:	461c      	mov	r4, r3
 800558e:	23fa      	movs	r3, #250	; 0xfa
 8005590:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005594:	491b      	ldr	r1, [pc, #108]	; (8005604 <_ZN8DryerKeyC1Ev+0x88>)
 8005596:	4620      	mov	r0, r4
 8005598:	f7ff ff7b 	bl	8005492 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	601c      	str	r4, [r3, #0]
	keys[1] = new BUTTON(DownButton_GPIO_Port, DownButton_Pin, 250);
 80055a0:	2010      	movs	r0, #16
 80055a2:	f00b ff3f 	bl	8011424 <_Znwj>
 80055a6:	4603      	mov	r3, r0
 80055a8:	461c      	mov	r4, r3
 80055aa:	23fa      	movs	r3, #250	; 0xfa
 80055ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80055b0:	4914      	ldr	r1, [pc, #80]	; (8005604 <_ZN8DryerKeyC1Ev+0x88>)
 80055b2:	4620      	mov	r0, r4
 80055b4:	f7ff ff6d 	bl	8005492 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	605c      	str	r4, [r3, #4]
	keys[2] = new BUTTON(LeftButton_GPIO_Port, LeftButton_Pin, 500);
 80055bc:	2010      	movs	r0, #16
 80055be:	f00b ff31 	bl	8011424 <_Znwj>
 80055c2:	4603      	mov	r3, r0
 80055c4:	461c      	mov	r4, r3
 80055c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80055ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80055ce:	490d      	ldr	r1, [pc, #52]	; (8005604 <_ZN8DryerKeyC1Ev+0x88>)
 80055d0:	4620      	mov	r0, r4
 80055d2:	f7ff ff5e 	bl	8005492 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	609c      	str	r4, [r3, #8]
	keys[3] = new BUTTON(OkButton_GPIO_Port, OkButton_Pin, 500);
 80055da:	2010      	movs	r0, #16
 80055dc:	f00b ff22 	bl	8011424 <_Znwj>
 80055e0:	4603      	mov	r3, r0
 80055e2:	461c      	mov	r4, r3
 80055e4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80055e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80055ec:	4905      	ldr	r1, [pc, #20]	; (8005604 <_ZN8DryerKeyC1Ev+0x88>)
 80055ee:	4620      	mov	r0, r4
 80055f0:	f7ff ff4f 	bl	8005492 <_ZN6BUTTONC1EP12GPIO_TypeDeftt>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	60dc      	str	r4, [r3, #12]
}
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4618      	mov	r0, r3
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd90      	pop	{r4, r7, pc}
 8005602:	bf00      	nop
 8005604:	40010c00 	.word	0x40010c00

08005608 <_ZN8DryerKey8checkKeyEv>:

uint8_t DryerKey::checkKey()
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
	uint8_t KeyPressed = NO_KEY;
 8005610:	2308      	movs	r3, #8
 8005612:	75fb      	strb	r3, [r7, #23]
	for(int Key = 0; Key < MAX_KEYS; Key++)
 8005614:	2300      	movs	r3, #0
 8005616:	613b      	str	r3, [r7, #16]
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	2b03      	cmp	r3, #3
 800561c:	dc1d      	bgt.n	800565a <_ZN8DryerKey8checkKeyEv+0x52>
	{
		uint8_t Status = keys[Key]->checkButton();
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005626:	4618      	mov	r0, r3
 8005628:	f7ff ff56 	bl	80054d8 <_ZN6BUTTON11checkButtonEv>
 800562c:	4603      	mov	r3, r0
 800562e:	73fb      	strb	r3, [r7, #15]
		if(Status == PRESSED)
 8005630:	7bfb      	ldrb	r3, [r7, #15]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d102      	bne.n	800563c <_ZN8DryerKey8checkKeyEv+0x34>
		{
			KeyPressed = Key;
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	75fb      	strb	r3, [r7, #23]
 800563a:	e006      	b.n	800564a <_ZN8DryerKey8checkKeyEv+0x42>
		}
		else if(Status == LONG_PRESSED)
 800563c:	7bfb      	ldrb	r3, [r7, #15]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d103      	bne.n	800564a <_ZN8DryerKey8checkKeyEv+0x42>
		{
			KeyPressed = Key + MAX_KEYS;
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	b2db      	uxtb	r3, r3
 8005646:	3304      	adds	r3, #4
 8005648:	75fb      	strb	r3, [r7, #23]
		}
		if(Status != NO_PRESS)
 800564a:	7bfb      	ldrb	r3, [r7, #15]
 800564c:	2b02      	cmp	r3, #2
 800564e:	d103      	bne.n	8005658 <_ZN8DryerKey8checkKeyEv+0x50>
	for(int Key = 0; Key < MAX_KEYS; Key++)
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	3301      	adds	r3, #1
 8005654:	613b      	str	r3, [r7, #16]
 8005656:	e7df      	b.n	8005618 <_ZN8DryerKey8checkKeyEv+0x10>
		{
			break;
 8005658:	bf00      	nop
		}
	}
	return KeyPressed;
 800565a:	7dfb      	ldrb	r3, [r7, #23]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3718      	adds	r7, #24
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <_ZN4RELE6setPinE9PIN_STATE>:
 */

#include "RELE.h"

void RELE::setPin(PIN_STATE State)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	460b      	mov	r3, r1
 800566e:	70fb      	strb	r3, [r7, #3]
	if(State != LOW && State != HIGH)
 8005670:	78fb      	ldrb	r3, [r7, #3]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d006      	beq.n	8005684 <_ZN4RELE6setPinE9PIN_STATE+0x20>
 8005676:	78fb      	ldrb	r3, [r7, #3]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d003      	beq.n	8005684 <_ZN4RELE6setPinE9PIN_STATE+0x20>
	{
		actualState = LOW;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	719a      	strb	r2, [r3, #6]
 8005682:	e007      	b.n	8005694 <_ZN4RELE6setPinE9PIN_STATE+0x30>
	}
	else
	{
		if(actualState != State)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	799b      	ldrb	r3, [r3, #6]
 8005688:	78fa      	ldrb	r2, [r7, #3]
 800568a:	429a      	cmp	r2, r3
 800568c:	d002      	beq.n	8005694 <_ZN4RELE6setPinE9PIN_STATE+0x30>
		{
			actualState = State;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	78fa      	ldrb	r2, [r7, #3]
 8005692:	719a      	strb	r2, [r3, #6]
		}
	}
	HAL_GPIO_WritePin(relePort, relePin, (GPIO_PinState)actualState);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6818      	ldr	r0, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	8899      	ldrh	r1, [r3, #4]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	799b      	ldrb	r3, [r3, #6]
 80056a0:	461a      	mov	r2, r3
 80056a2:	f008 fa87 	bl	800dbb4 <HAL_GPIO_WritePin>
}
 80056a6:	bf00      	nop
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>:




RELE::RELE(GPIO_TypeDef *RelePort, uint16_t RelePin, PIN_STATE InitialState)
 80056ae:	b480      	push	{r7}
 80056b0:	b085      	sub	sp, #20
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	60f8      	str	r0, [r7, #12]
 80056b6:	60b9      	str	r1, [r7, #8]
 80056b8:	4611      	mov	r1, r2
 80056ba:	461a      	mov	r2, r3
 80056bc:	460b      	mov	r3, r1
 80056be:	80fb      	strh	r3, [r7, #6]
 80056c0:	4613      	mov	r3, r2
 80056c2:	717b      	strb	r3, [r7, #5]
{
	relePort = RelePort;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	601a      	str	r2, [r3, #0]
	relePin = RelePin;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	88fa      	ldrh	r2, [r7, #6]
 80056ce:	809a      	strh	r2, [r3, #4]
	actualState = InitialState;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	797a      	ldrb	r2, [r7, #5]
 80056d4:	719a      	strb	r2, [r3, #6]

}
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	4618      	mov	r0, r3
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	bc80      	pop	{r7}
 80056e0:	4770      	bx	lr

080056e2 <_ZN4RELE8setStateE9PIN_STATE>:

void RELE::setState(PIN_STATE NewState)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b082      	sub	sp, #8
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	460b      	mov	r3, r1
 80056ec:	70fb      	strb	r3, [r7, #3]
	setPin(NewState);
 80056ee:	78fb      	ldrb	r3, [r7, #3]
 80056f0:	4619      	mov	r1, r3
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7ff ffb6 	bl	8005664 <_ZN4RELE6setPinE9PIN_STATE>
}
 80056f8:	bf00      	nop
 80056fa:	3708      	adds	r7, #8
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <_ZNSt7__cxx115stoulERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:
  { return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(),
			     __idx, __base); }

  inline unsigned long
  stoul(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(),
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af02      	add	r7, sp, #8
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f00c f923 	bl	8011958 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8005712:	4602      	mov	r2, r0
			     __idx, __base); }
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	4904      	ldr	r1, [pc, #16]	; (800572c <_ZNSt7__cxx115stoulERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 800571c:	4804      	ldr	r0, [pc, #16]	; (8005730 <_ZNSt7__cxx115stoulERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 800571e:	f000 fcf2 	bl	8006106 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 8005722:	4603      	mov	r3, r0
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	080127e0 	.word	0x080127e0
 8005730:	08011fe9 	.word	0x08011fe9

08005734 <HAL_UART_RxCpltCallback>:
uint8_t RxBuffer[RECEIVE_BUFFER_LEN];
uint8_t RxData[RECEIVE_BUFFER_LEN];


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a0a      	ldr	r2, [pc, #40]	; (8005768 <HAL_UART_RxCpltCallback+0x34>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d10c      	bne.n	800575e <HAL_UART_RxCpltCallback+0x2a>
	{
		RxReady = true;
 8005744:	4b09      	ldr	r3, [pc, #36]	; (800576c <HAL_UART_RxCpltCallback+0x38>)
 8005746:	2201      	movs	r2, #1
 8005748:	701a      	strb	r2, [r3, #0]
		memcpy(RxData, RxBuffer, RECEIVE_BUFFER_LEN);
 800574a:	4b09      	ldr	r3, [pc, #36]	; (8005770 <HAL_UART_RxCpltCallback+0x3c>)
 800574c:	4a09      	ldr	r2, [pc, #36]	; (8005774 <HAL_UART_RxCpltCallback+0x40>)
 800574e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005750:	c303      	stmia	r3!, {r0, r1}
 8005752:	801a      	strh	r2, [r3, #0]
		memset(RxBuffer, 0x00, RECEIVE_BUFFER_LEN);
 8005754:	220a      	movs	r2, #10
 8005756:	2100      	movs	r1, #0
 8005758:	4806      	ldr	r0, [pc, #24]	; (8005774 <HAL_UART_RxCpltCallback+0x40>)
 800575a:	f00c fa94 	bl	8011c86 <memset>
	}
}
 800575e:	bf00      	nop
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	200007f0 	.word	0x200007f0
 800576c:	200006a4 	.word	0x200006a4
 8005770:	200006b4 	.word	0x200006b4
 8005774:	200006a8 	.word	0x200006a8

08005778 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a0b      	ldr	r2, [pc, #44]	; (80057b0 <HAL_UART_ErrorCallback+0x38>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d10e      	bne.n	80057a6 <HAL_UART_ErrorCallback+0x2e>
	{
		memset(RxBuffer, 0x00, RECEIVE_BUFFER_LEN);
 8005788:	220a      	movs	r2, #10
 800578a:	2100      	movs	r1, #0
 800578c:	4809      	ldr	r0, [pc, #36]	; (80057b4 <HAL_UART_ErrorCallback+0x3c>)
 800578e:	f00c fa7a 	bl	8011c86 <memset>
		memset(RxData, 0x00, RECEIVE_BUFFER_LEN);
 8005792:	220a      	movs	r2, #10
 8005794:	2100      	movs	r1, #0
 8005796:	4808      	ldr	r0, [pc, #32]	; (80057b8 <HAL_UART_ErrorCallback+0x40>)
 8005798:	f00c fa75 	bl	8011c86 <memset>
		HAL_UART_Receive_IT(&huart1, RxBuffer, RECEIVE_BUFFER_LEN);
 800579c:	220a      	movs	r2, #10
 800579e:	4905      	ldr	r1, [pc, #20]	; (80057b4 <HAL_UART_ErrorCallback+0x3c>)
 80057a0:	4803      	ldr	r0, [pc, #12]	; (80057b0 <HAL_UART_ErrorCallback+0x38>)
 80057a2:	f00b fa62 	bl	8010c6a <HAL_UART_Receive_IT>
	}
}
 80057a6:	bf00      	nop
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	200007f0 	.word	0x200007f0
 80057b4:	200006a8 	.word	0x200006a8
 80057b8:	200006b4 	.word	0x200006b4

080057bc <_ZN13SerialMessage11writeSerialEv>:

void SerialMessage::writeSerial()
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
	uint16_t BufferLen = serialBuffer.size();
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f00b ffaa 	bl	8011720 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80057cc:	4603      	mov	r3, r0
 80057ce:	81fb      	strh	r3, [r7, #14]
	if(!RxReady)
 80057d0:	4b0a      	ldr	r3, [pc, #40]	; (80057fc <_ZN13SerialMessage11writeSerialEv+0x40>)
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	f083 0301 	eor.w	r3, r3, #1
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d009      	beq.n	80057f4 <_ZN13SerialMessage11writeSerialEv+0x38>
		HAL_UART_Transmit(&huart1, (uint8_t *)serialBuffer.c_str(), BufferLen, SEND_TIMEOUT);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f00c f8b8 	bl	8011958 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80057e8:	4601      	mov	r1, r0
 80057ea:	89fa      	ldrh	r2, [r7, #14]
 80057ec:	2364      	movs	r3, #100	; 0x64
 80057ee:	4804      	ldr	r0, [pc, #16]	; (8005800 <_ZN13SerialMessage11writeSerialEv+0x44>)
 80057f0:	f00b f9a2 	bl	8010b38 <HAL_UART_Transmit>
}
 80057f4:	bf00      	nop
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	200006a4 	.word	0x200006a4
 8005800:	200007f0 	.word	0x200007f0

08005804 <_ZN13SerialMessageC1Ev>:


SerialMessage::SerialMessage()
 8005804:	b590      	push	{r4, r7, lr}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	687c      	ldr	r4, [r7, #4]
 800580e:	f107 0308 	add.w	r3, r7, #8
 8005812:	4618      	mov	r0, r3
 8005814:	f00b fe22 	bl	801145c <_ZNSaIcEC1Ev>
 8005818:	f107 0308 	add.w	r3, r7, #8
 800581c:	461a      	mov	r2, r3
 800581e:	491f      	ldr	r1, [pc, #124]	; (800589c <_ZN13SerialMessageC1Ev+0x98>)
 8005820:	4620      	mov	r0, r4
 8005822:	f00c f8e3 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005826:	f107 0308 	add.w	r3, r7, #8
 800582a:	4618      	mov	r0, r3
 800582c:	f00b fe17 	bl	801145e <_ZNSaIcED1Ev>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f103 0418 	add.w	r4, r3, #24
 8005836:	f107 030c 	add.w	r3, r7, #12
 800583a:	4618      	mov	r0, r3
 800583c:	f00b fe0e 	bl	801145c <_ZNSaIcEC1Ev>
 8005840:	f107 030c 	add.w	r3, r7, #12
 8005844:	461a      	mov	r2, r3
 8005846:	4915      	ldr	r1, [pc, #84]	; (800589c <_ZN13SerialMessageC1Ev+0x98>)
 8005848:	4620      	mov	r0, r4
 800584a:	f00c f8cf 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800584e:	f107 030c 	add.w	r3, r7, #12
 8005852:	4618      	mov	r0, r3
 8005854:	f00b fe03 	bl	801145e <_ZNSaIcED1Ev>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f04f 32ff 	mov.w	r2, #4294967295
 8005866:	635a      	str	r2, [r3, #52]	; 0x34
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
{
	checkSerialDeviceTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8005870:	2014      	movs	r0, #20
 8005872:	f00b fdd7 	bl	8011424 <_Znwj>
 8005876:	4603      	mov	r3, r0
 8005878:	461c      	mov	r4, r3
 800587a:	2100      	movs	r1, #0
 800587c:	4620      	mov	r0, r4
 800587e:	f7fd fd9e 	bl	80033be <_ZN11ChronoTimerC1Eh>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	639c      	str	r4, [r3, #56]	; 0x38
	HAL_UART_Receive_IT(&huart1, RxBuffer, RECEIVE_BUFFER_LEN);
 8005886:	220a      	movs	r2, #10
 8005888:	4905      	ldr	r1, [pc, #20]	; (80058a0 <_ZN13SerialMessageC1Ev+0x9c>)
 800588a:	4806      	ldr	r0, [pc, #24]	; (80058a4 <_ZN13SerialMessageC1Ev+0xa0>)
 800588c:	f00b f9ed 	bl	8010c6a <HAL_UART_Receive_IT>
}
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4618      	mov	r0, r3
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	bd90      	pop	{r4, r7, pc}
 800589a:	bf00      	nop
 800589c:	080127e8 	.word	0x080127e8
 80058a0:	200006a8 	.word	0x200006a8
 80058a4:	200007f0 	.word	0x200007f0

080058a8 <_ZN13SerialMessage15clearDataBufferEv>:

void SerialMessage::clearDataBuffer()
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
	memset(RxData, 0x00, RECEIVE_BUFFER_LEN);
 80058b0:	220a      	movs	r2, #10
 80058b2:	2100      	movs	r1, #0
 80058b4:	4803      	ldr	r0, [pc, #12]	; (80058c4 <_ZN13SerialMessage15clearDataBufferEv+0x1c>)
 80058b6:	f00c f9e6 	bl	8011c86 <memset>
}
 80058ba:	bf00      	nop
 80058bc:	3708      	adds	r7, #8
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	200006b4 	.word	0x200006b4

080058c8 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm>:


void SerialMessage::sendMessage(String Message, bool NewLine, uint32_t SendDelay)
{
 80058c8:	b590      	push	{r4, r7, lr}
 80058ca:	b08b      	sub	sp, #44	; 0x2c
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	603b      	str	r3, [r7, #0]
 80058d4:	4613      	mov	r3, r2
 80058d6:	71fb      	strb	r3, [r7, #7]
	if(!Message.empty())
 80058d8:	68b8      	ldr	r0, [r7, #8]
 80058da:	f00b ff25 	bl	8011728 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 80058de:	4603      	mov	r3, r0
 80058e0:	f083 0301 	eor.w	r3, r3, #1
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d025      	beq.n	8005936 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm+0x6e>
	{
		if(NewLine)
 80058ea:	79fb      	ldrb	r3, [r7, #7]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d013      	beq.n	8005918 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm+0x50>
			serialBuffer = Message + "\n";
 80058f0:	68fc      	ldr	r4, [r7, #12]
 80058f2:	f107 0310 	add.w	r3, r7, #16
 80058f6:	4a14      	ldr	r2, [pc, #80]	; (8005948 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm+0x80>)
 80058f8:	68b9      	ldr	r1, [r7, #8]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fe fbde 	bl	80040bc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8005900:	f107 0310 	add.w	r3, r7, #16
 8005904:	4619      	mov	r1, r3
 8005906:	4620      	mov	r0, r4
 8005908:	f00b fee5 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800590c:	f107 0310 	add.w	r3, r7, #16
 8005910:	4618      	mov	r0, r3
 8005912:	f00b fed4 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005916:	e004      	b.n	8005922 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm+0x5a>
		else
			serialBuffer = Message;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	68b9      	ldr	r1, [r7, #8]
 800591c:	4618      	mov	r0, r3
 800591e:	f00b fed4 	bl	80116ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		writeSerial();
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f7ff ff4a 	bl	80057bc <_ZN13SerialMessage11writeSerialEv>
		if(SendDelay != 0)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d008      	beq.n	8005940 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm+0x78>
		{
			HAL_Delay(SendDelay);
 800592e:	6838      	ldr	r0, [r7, #0]
 8005930:	f006 feb4 	bl	800c69c <HAL_Delay>
	}
	else
	{
		serialBuffer = "Errore: messaggio mancante";
	}
}
 8005934:	e004      	b.n	8005940 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm+0x78>
		serialBuffer = "Errore: messaggio mancante";
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4904      	ldr	r1, [pc, #16]	; (800594c <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm+0x84>)
 800593a:	4618      	mov	r0, r3
 800593c:	f00b ffa3 	bl	8011886 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
}
 8005940:	bf00      	nop
 8005942:	372c      	adds	r7, #44	; 0x2c
 8005944:	46bd      	mov	sp, r7
 8005946:	bd90      	pop	{r4, r7, pc}
 8005948:	080127ec 	.word	0x080127ec
 800594c:	080127f0 	.word	0x080127f0

08005950 <_ZN13SerialMessage10readSerialEv>:

bool SerialMessage::readSerial()
{
 8005950:	b590      	push	{r4, r7, lr}
 8005952:	b08d      	sub	sp, #52	; 0x34
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
	bool Ready = false;
 8005958:	2300      	movs	r3, #0
 800595a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	String CommandStr = "";
 800595e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005962:	4618      	mov	r0, r3
 8005964:	f00b fd7a 	bl	801145c <_ZNSaIcEC1Ev>
 8005968:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800596c:	f107 030c 	add.w	r3, r7, #12
 8005970:	4927      	ldr	r1, [pc, #156]	; (8005a10 <_ZN13SerialMessage10readSerialEv+0xc0>)
 8005972:	4618      	mov	r0, r3
 8005974:	f00c f83a 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800597c:	4618      	mov	r0, r3
 800597e:	f00b fd6e 	bl	801145e <_ZNSaIcED1Ev>

//	HAL_UART_Receive(&huart1, rxBuffer, RECEIVE_BUFFER_LEN, 100);
	if(RxReady)
 8005982:	4b24      	ldr	r3, [pc, #144]	; (8005a14 <_ZN13SerialMessage10readSerialEv+0xc4>)
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	d035      	beq.n	80059f8 <_ZN13SerialMessage10readSerialEv+0xa8>
	{
		if(RxData[0] == '$' && (RxData[3] == '=' || RxData[3] == '$'))
 800598c:	4b22      	ldr	r3, [pc, #136]	; (8005a18 <_ZN13SerialMessage10readSerialEv+0xc8>)
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	2b24      	cmp	r3, #36	; 0x24
 8005992:	d10b      	bne.n	80059ac <_ZN13SerialMessage10readSerialEv+0x5c>
 8005994:	4b20      	ldr	r3, [pc, #128]	; (8005a18 <_ZN13SerialMessage10readSerialEv+0xc8>)
 8005996:	78db      	ldrb	r3, [r3, #3]
 8005998:	2b3d      	cmp	r3, #61	; 0x3d
 800599a:	d003      	beq.n	80059a4 <_ZN13SerialMessage10readSerialEv+0x54>
 800599c:	4b1e      	ldr	r3, [pc, #120]	; (8005a18 <_ZN13SerialMessage10readSerialEv+0xc8>)
 800599e:	78db      	ldrb	r3, [r3, #3]
 80059a0:	2b24      	cmp	r3, #36	; 0x24
 80059a2:	d103      	bne.n	80059ac <_ZN13SerialMessage10readSerialEv+0x5c>
		{
			Ready = true;
 80059a4:	2301      	movs	r3, #1
 80059a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80059aa:	e01d      	b.n	80059e8 <_ZN13SerialMessage10readSerialEv+0x98>
		}
		else
		{
			for(int i = 0; i < RECEIVE_BUFFER_LEN; i++)
 80059ac:	2300      	movs	r3, #0
 80059ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80059b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b2:	2b09      	cmp	r3, #9
 80059b4:	dc0d      	bgt.n	80059d2 <_ZN13SerialMessage10readSerialEv+0x82>
			{
				CommandStr.push_back(RxData[i]);
 80059b6:	4a18      	ldr	r2, [pc, #96]	; (8005a18 <_ZN13SerialMessage10readSerialEv+0xc8>)
 80059b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ba:	4413      	add	r3, r2
 80059bc:	781a      	ldrb	r2, [r3, #0]
 80059be:	f107 030c 	add.w	r3, r7, #12
 80059c2:	4611      	mov	r1, r2
 80059c4:	4618      	mov	r0, r3
 80059c6:	f00b feb7 	bl	8011738 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
			for(int i = 0; i < RECEIVE_BUFFER_LEN; i++)
 80059ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059cc:	3301      	adds	r3, #1
 80059ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80059d0:	e7ee      	b.n	80059b0 <_ZN13SerialMessage10readSerialEv+0x60>
			}
			commandReceived = CommandStr;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	3318      	adds	r3, #24
 80059d6:	f107 020c 	add.w	r2, r7, #12
 80059da:	4611      	mov	r1, r2
 80059dc:	4618      	mov	r0, r3
 80059de:	f00b fe74 	bl	80116ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
			Ready = false;
 80059e2:	2300      	movs	r3, #0
 80059e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		RxReady = false;
 80059e8:	4b0a      	ldr	r3, [pc, #40]	; (8005a14 <_ZN13SerialMessage10readSerialEv+0xc4>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, RxBuffer, RECEIVE_BUFFER_LEN);
 80059ee:	220a      	movs	r2, #10
 80059f0:	490a      	ldr	r1, [pc, #40]	; (8005a1c <_ZN13SerialMessage10readSerialEv+0xcc>)
 80059f2:	480b      	ldr	r0, [pc, #44]	; (8005a20 <_ZN13SerialMessage10readSerialEv+0xd0>)
 80059f4:	f00b f939 	bl	8010c6a <HAL_UART_Receive_IT>
	}
	return Ready;
 80059f8:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
	String CommandStr = "";
 80059fc:	f107 030c 	add.w	r3, r7, #12
 8005a00:	4618      	mov	r0, r3
 8005a02:	f00b fe5c 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return Ready;
 8005a06:	4623      	mov	r3, r4
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3734      	adds	r7, #52	; 0x34
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd90      	pop	{r4, r7, pc}
 8005a10:	080127e8 	.word	0x080127e8
 8005a14:	200006a4 	.word	0x200006a4
 8005a18:	200006b4 	.word	0x200006b4
 8005a1c:	200006a8 	.word	0x200006a8
 8005a20:	200007f0 	.word	0x200007f0

08005a24 <_ZN13SerialMessage15getStartStopReqEPc>:

int16_t SerialMessage::getStartStopReq(char *Req)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
	int16_t RetVal = INVALID_MESSAGE;
 8005a2e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005a32:	81fb      	strh	r3, [r7, #14]
	if(valueSetted == UINT32_MAX)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3c:	d13f      	bne.n	8005abe <_ZN13SerialMessage15getStartStopReqEPc+0x9a>
	{
		if((Req[0] >= '0' && Req[0] <= '9') && (Req[1] >= '0' && Req[1] <= '9'))
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	2b2f      	cmp	r3, #47	; 0x2f
 8005a44:	d92b      	bls.n	8005a9e <_ZN13SerialMessage15getStartStopReqEPc+0x7a>
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	2b39      	cmp	r3, #57	; 0x39
 8005a4c:	d827      	bhi.n	8005a9e <_ZN13SerialMessage15getStartStopReqEPc+0x7a>
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	3301      	adds	r3, #1
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	2b2f      	cmp	r3, #47	; 0x2f
 8005a56:	d922      	bls.n	8005a9e <_ZN13SerialMessage15getStartStopReqEPc+0x7a>
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	2b39      	cmp	r3, #57	; 0x39
 8005a60:	d81d      	bhi.n	8005a9e <_ZN13SerialMessage15getStartStopReqEPc+0x7a>
		{
			if(Req[0] == '0')
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	2b30      	cmp	r3, #48	; 0x30
 8005a68:	d107      	bne.n	8005a7a <_ZN13SerialMessage15getStartStopReqEPc+0x56>
			{
				RetVal = START_STOP_COMMANDS_START + (Req[1] - '0');
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	3398      	adds	r3, #152	; 0x98
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	81fb      	strh	r3, [r7, #14]
 8005a78:	e011      	b.n	8005a9e <_ZN13SerialMessage15getStartStopReqEPc+0x7a>
			}
			else
			{
				RetVal = START_STOP_COMMANDS_START + (((Req[0] - '0') * 10) + (Req[1] - '0'));
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	3b30      	subs	r3, #48	; 0x30
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	461a      	mov	r2, r3
 8005a84:	0092      	lsls	r2, r2, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	4413      	add	r3, r2
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	3398      	adds	r3, #152	; 0x98
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	81fb      	strh	r3, [r7, #14]
			}
		}
		if((RetVal >= MAX_START_STOP_COMMANDS && RetVal == START_STOP_COMMANDS_START) || RetVal == INVALID_MESSAGE)
 8005a9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005aa2:	2bd2      	cmp	r3, #210	; 0xd2
 8005aa4:	dd03      	ble.n	8005aae <_ZN13SerialMessage15getStartStopReqEPc+0x8a>
 8005aa6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005aaa:	2bc8      	cmp	r3, #200	; 0xc8
 8005aac:	d004      	beq.n	8005ab8 <_ZN13SerialMessage15getStartStopReqEPc+0x94>
 8005aae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005ab2:	f113 0f02 	cmn.w	r3, #2
 8005ab6:	d102      	bne.n	8005abe <_ZN13SerialMessage15getStartStopReqEPc+0x9a>
		{
			RetVal = INVALID_MESSAGE;
 8005ab8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005abc:	81fb      	strh	r3, [r7, #14]
		}
	}
	return RetVal;
 8005abe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bc80      	pop	{r7}
 8005aca:	4770      	bx	lr

08005acc <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

int16_t SerialMessage::getSetReq(char *Req, String Command)
{
 8005acc:	b590      	push	{r4, r7, lr}
 8005ace:	b08f      	sub	sp, #60	; 0x3c
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
	int16_t RetVal = INVALID_MESSAGE;
 8005ad8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005adc:	86fb      	strh	r3, [r7, #54]	; 0x36
	if(valueSetted == UINT32_MAX)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae6:	f040 80e2 	bne.w	8005cae <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e2>
	{
		if((Req[0] >= '0' && Req[0] <= '9') && (Req[1] >= '0' && Req[1] <= '9'))
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	2b2f      	cmp	r3, #47	; 0x2f
 8005af0:	d92b      	bls.n	8005b4a <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	2b39      	cmp	r3, #57	; 0x39
 8005af8:	d827      	bhi.n	8005b4a <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	3301      	adds	r3, #1
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	2b2f      	cmp	r3, #47	; 0x2f
 8005b02:	d922      	bls.n	8005b4a <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	3301      	adds	r3, #1
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	2b39      	cmp	r3, #57	; 0x39
 8005b0c:	d81d      	bhi.n	8005b4a <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
		{
			if(Req[0] == '0')
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	2b30      	cmp	r3, #48	; 0x30
 8005b14:	d107      	bne.n	8005b26 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5a>
			{
				RetVal = SET_COMMAND_START + (Req[1] - '0');
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	3b26      	subs	r3, #38	; 0x26
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005b24:	e011      	b.n	8005b4a <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7e>
			}
			else
			{
				RetVal = SET_COMMAND_START + (((Req[0] - '0') * 10) + (Req[1] - '0'));
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	3b30      	subs	r3, #48	; 0x30
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	461a      	mov	r2, r3
 8005b30:	0092      	lsls	r2, r2, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	005b      	lsls	r3, r3, #1
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	4413      	add	r3, r2
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	3b26      	subs	r3, #38	; 0x26
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	86fb      	strh	r3, [r7, #54]	; 0x36
			}
		}
		if(RetVal >= MAX_SET_COMMANDS && RetVal == SET_COMMAND_START)
 8005b4a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005b4e:	2b1a      	cmp	r3, #26
 8005b50:	dd06      	ble.n	8005b60 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x94>
 8005b52:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005b56:	2b0a      	cmp	r3, #10
 8005b58:	d102      	bne.n	8005b60 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x94>
		{
			RetVal = INVALID_MESSAGE;
 8005b5a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005b5e:	86fb      	strh	r3, [r7, #54]	; 0x36
		}
		if(RetVal != INVALID_MESSAGE)
 8005b60:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005b64:	f113 0f02 	cmn.w	r3, #2
 8005b68:	f000 80a1 	beq.w	8005cae <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e2>
		{
			String ValStr = "";
 8005b6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b70:	4618      	mov	r0, r3
 8005b72:	f00b fc73 	bl	801145c <_ZNSaIcEC1Ev>
 8005b76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005b7a:	f107 0310 	add.w	r3, r7, #16
 8005b7e:	494f      	ldr	r1, [pc, #316]	; (8005cbc <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1f0>)
 8005b80:	4618      	mov	r0, r3
 8005b82:	f00b ff33 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005b86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f00b fc67 	bl	801145e <_ZNSaIcED1Ev>
			bool ZeroChecked = false;
 8005b90:	2300      	movs	r3, #0
 8005b92:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			int ValueLen = Command.length() - 5;
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f00b fdc4 	bl	8011724 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	3b05      	subs	r3, #5
 8005ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
			for(uint16_t i = 4; i < Command.length() - 1; i++)
 8005ba2:	2304      	movs	r3, #4
 8005ba4:	867b      	strh	r3, [r7, #50]	; 0x32
 8005ba6:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f00b fdbb 	bl	8011724 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	429c      	cmp	r4, r3
 8005bb4:	bf34      	ite	cc
 8005bb6:	2301      	movcc	r3, #1
 8005bb8:	2300      	movcs	r3, #0
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d058      	beq.n	8005c72 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a6>
			{
				if(ValueLen > 1  && !ZeroChecked)
 8005bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	dd2a      	ble.n	8005c1c <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x150>
 8005bc6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005bca:	f083 0301 	eor.w	r3, r3, #1
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d023      	beq.n	8005c1c <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x150>
				{
					while(i < Command.length() - 1)
 8005bd4:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f00b fda4 	bl	8011724 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	3b01      	subs	r3, #1
 8005be0:	429c      	cmp	r4, r3
 8005be2:	bf34      	ite	cc
 8005be4:	2301      	movcc	r3, #1
 8005be6:	2300      	movcs	r3, #0
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d02b      	beq.n	8005c46 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x17a>
					{
						if(Command[i] == '0')
 8005bee:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f00b fd9d 	bl	8011732 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	2b30      	cmp	r3, #48	; 0x30
 8005bfe:	bf0c      	ite	eq
 8005c00:	2301      	moveq	r3, #1
 8005c02:	2300      	movne	r3, #0
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x146>
							i++;
 8005c0a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	867b      	strh	r3, [r7, #50]	; 0x32
 8005c10:	e7e0      	b.n	8005bd4 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x108>
						else
						{
							ZeroChecked = true;
 8005c12:	2301      	movs	r3, #1
 8005c14:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
							break;
 8005c18:	bf00      	nop
				if(ValueLen > 1  && !ZeroChecked)
 8005c1a:	e014      	b.n	8005c46 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x17a>
						}
					}
				}
				else if(ValueLen == 1 && Command[i] == '0')
 8005c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d10a      	bne.n	8005c38 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16c>
 8005c22:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005c24:	4619      	mov	r1, r3
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f00b fd83 	bl	8011732 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	2b30      	cmp	r3, #48	; 0x30
 8005c32:	d101      	bne.n	8005c38 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16c>
 8005c34:	2301      	movs	r3, #1
 8005c36:	e000      	b.n	8005c3a <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16e>
 8005c38:	2300      	movs	r3, #0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d004      	beq.n	8005c48 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x17c>
				{
					ZeroChecked = true;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8005c44:	e000      	b.n	8005c48 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x17c>
				if(ValueLen > 1  && !ZeroChecked)
 8005c46:	bf00      	nop
				}
				if(ZeroChecked)
 8005c48:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00c      	beq.n	8005c6a <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x19e>
				{
					ValStr.push_back(Command[i]);
 8005c50:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005c52:	4619      	mov	r1, r3
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f00b fd6c 	bl	8011732 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	781a      	ldrb	r2, [r3, #0]
 8005c5e:	f107 0310 	add.w	r3, r7, #16
 8005c62:	4611      	mov	r1, r2
 8005c64:	4618      	mov	r0, r3
 8005c66:	f00b fd67 	bl	8011738 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
			for(uint16_t i = 4; i < Command.length() - 1; i++)
 8005c6a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	867b      	strh	r3, [r7, #50]	; 0x32
 8005c70:	e799      	b.n	8005ba6 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xda>
				}
			}
			if(!ValStr.empty())
 8005c72:	f107 0310 	add.w	r3, r7, #16
 8005c76:	4618      	mov	r0, r3
 8005c78:	f00b fd56 	bl	8011728 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	f083 0301 	eor.w	r3, r3, #1
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00a      	beq.n	8005c9e <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d2>
			{
				valueSetted = std::stoul(ValStr);
 8005c88:	f107 0310 	add.w	r3, r7, #16
 8005c8c:	220a      	movs	r2, #10
 8005c8e:	2100      	movs	r1, #0
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7ff fd35 	bl	8005700 <_ZNSt7__cxx115stoulERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8005c96:	4602      	mov	r2, r0
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	635a      	str	r2, [r3, #52]	; 0x34
 8005c9c:	e002      	b.n	8005ca4 <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d8>
			}
			else
			{
				RetVal = INVALID_MESSAGE;
 8005c9e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005ca2:	86fb      	strh	r3, [r7, #54]	; 0x36
			String ValStr = "";
 8005ca4:	f107 0310 	add.w	r3, r7, #16
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f00b fd08 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			}
		}
	}
	return RetVal;
 8005cae:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	373c      	adds	r7, #60	; 0x3c
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd90      	pop	{r4, r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	080127e8 	.word	0x080127e8

08005cc0 <_ZN13SerialMessage17isDeviceConnectedEv>:


bool SerialMessage::isDeviceConnected()
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b098      	sub	sp, #96	; 0x60
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
	if(checkSerialDeviceTimer->isFinished(true, DELAY_SERIAL_ALIVE_TIMER))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cd0:	2101      	movs	r1, #1
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7fd fc1d 	bl	8003512 <_ZN11ChronoTimer10isFinishedEbm>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d02a      	beq.n	8005d34 <_ZN13SerialMessage17isDeviceConnectedEv+0x74>
	{
		sendMessage("$?$", true, 10);
 8005cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f00b fbba 	bl	801145c <_ZNSaIcEC1Ev>
 8005ce8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005cec:	f107 030c 	add.w	r3, r7, #12
 8005cf0:	4959      	ldr	r1, [pc, #356]	; (8005e58 <_ZN13SerialMessage17isDeviceConnectedEv+0x198>)
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f00b fe7a 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005cf8:	f107 010c 	add.w	r1, r7, #12
 8005cfc:	230a      	movs	r3, #10
 8005cfe:	2201      	movs	r2, #1
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f7ff fde1 	bl	80058c8 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm>
 8005d06:	f107 030c 	add.w	r3, r7, #12
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f00b fcd7 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d14:	4618      	mov	r0, r3
 8005d16:	f00b fba2 	bl	801145e <_ZNSaIcED1Ev>
		if(connectionRetries < MAX_CONNECTION_RETRIES)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d807      	bhi.n	8005d34 <_ZN13SerialMessage17isDeviceConnectedEv+0x74>
			connectionRetries++;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	}
	if(RxReady)
 8005d34:	4b49      	ldr	r3, [pc, #292]	; (8005e5c <_ZN13SerialMessage17isDeviceConnectedEv+0x19c>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d07b      	beq.n	8005e36 <_ZN13SerialMessage17isDeviceConnectedEv+0x176>
	{
		if(RxData[0] == '$' && RxData[1] == '!' && RxData[2] == '$')
 8005d3e:	4b48      	ldr	r3, [pc, #288]	; (8005e60 <_ZN13SerialMessage17isDeviceConnectedEv+0x1a0>)
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	2b24      	cmp	r3, #36	; 0x24
 8005d44:	d139      	bne.n	8005dba <_ZN13SerialMessage17isDeviceConnectedEv+0xfa>
 8005d46:	4b46      	ldr	r3, [pc, #280]	; (8005e60 <_ZN13SerialMessage17isDeviceConnectedEv+0x1a0>)
 8005d48:	785b      	ldrb	r3, [r3, #1]
 8005d4a:	2b21      	cmp	r3, #33	; 0x21
 8005d4c:	d135      	bne.n	8005dba <_ZN13SerialMessage17isDeviceConnectedEv+0xfa>
 8005d4e:	4b44      	ldr	r3, [pc, #272]	; (8005e60 <_ZN13SerialMessage17isDeviceConnectedEv+0x1a0>)
 8005d50:	789b      	ldrb	r3, [r3, #2]
 8005d52:	2b24      	cmp	r3, #36	; 0x24
 8005d54:	d131      	bne.n	8005dba <_ZN13SerialMessage17isDeviceConnectedEv+0xfa>
		{
			devConnected = true;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			RxReady = false;
 8005d5e:	4b3f      	ldr	r3, [pc, #252]	; (8005e5c <_ZN13SerialMessage17isDeviceConnectedEv+0x19c>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	701a      	strb	r2, [r3, #0]
			sendMessage("Thanks!", true, 10);
 8005d64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f00b fb77 	bl	801145c <_ZNSaIcEC1Ev>
 8005d6e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005d72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d76:	493b      	ldr	r1, [pc, #236]	; (8005e64 <_ZN13SerialMessage17isDeviceConnectedEv+0x1a4>)
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f00b fe37 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005d7e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005d82:	230a      	movs	r3, #10
 8005d84:	2201      	movs	r2, #1
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7ff fd9e 	bl	80058c8 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm>
 8005d8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d90:	4618      	mov	r0, r3
 8005d92:	f00b fc94 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005d96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f00b fb5f 	bl	801145e <_ZNSaIcED1Ev>
			HAL_UART_Receive_IT(&huart1, RxBuffer, RECEIVE_BUFFER_LEN);
 8005da0:	220a      	movs	r2, #10
 8005da2:	4931      	ldr	r1, [pc, #196]	; (8005e68 <_ZN13SerialMessage17isDeviceConnectedEv+0x1a8>)
 8005da4:	4831      	ldr	r0, [pc, #196]	; (8005e6c <_ZN13SerialMessage17isDeviceConnectedEv+0x1ac>)
 8005da6:	f00a ff60 	bl	8010c6a <HAL_UART_Receive_IT>
			clearDataBuffer();
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7ff fd7c 	bl	80058a8 <_ZN13SerialMessage15clearDataBufferEv>
			connectionRetries = 0;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005db8:	e03d      	b.n	8005e36 <_ZN13SerialMessage17isDeviceConnectedEv+0x176>
		}
		else if(RxData[0] == '$' && (RxData[3] == '=' || RxData[3] == '$'))
 8005dba:	4b29      	ldr	r3, [pc, #164]	; (8005e60 <_ZN13SerialMessage17isDeviceConnectedEv+0x1a0>)
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	2b24      	cmp	r3, #36	; 0x24
 8005dc0:	d110      	bne.n	8005de4 <_ZN13SerialMessage17isDeviceConnectedEv+0x124>
 8005dc2:	4b27      	ldr	r3, [pc, #156]	; (8005e60 <_ZN13SerialMessage17isDeviceConnectedEv+0x1a0>)
 8005dc4:	78db      	ldrb	r3, [r3, #3]
 8005dc6:	2b3d      	cmp	r3, #61	; 0x3d
 8005dc8:	d003      	beq.n	8005dd2 <_ZN13SerialMessage17isDeviceConnectedEv+0x112>
 8005dca:	4b25      	ldr	r3, [pc, #148]	; (8005e60 <_ZN13SerialMessage17isDeviceConnectedEv+0x1a0>)
 8005dcc:	78db      	ldrb	r3, [r3, #3]
 8005dce:	2b24      	cmp	r3, #36	; 0x24
 8005dd0:	d108      	bne.n	8005de4 <_ZN13SerialMessage17isDeviceConnectedEv+0x124>
		{
			devConnected = true;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			connectionRetries = 0;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005de2:	e028      	b.n	8005e36 <_ZN13SerialMessage17isDeviceConnectedEv+0x176>
		}
		else
		{
			RxReady = false;
 8005de4:	4b1d      	ldr	r3, [pc, #116]	; (8005e5c <_ZN13SerialMessage17isDeviceConnectedEv+0x19c>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	701a      	strb	r2, [r3, #0]
			sendMessage("Who are you??", true, 10);
 8005dea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005dee:	4618      	mov	r0, r3
 8005df0:	f00b fb34 	bl	801145c <_ZNSaIcEC1Ev>
 8005df4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005df8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005dfc:	491c      	ldr	r1, [pc, #112]	; (8005e70 <_ZN13SerialMessage17isDeviceConnectedEv+0x1b0>)
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f00b fdf4 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005e04:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8005e08:	230a      	movs	r3, #10
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f7ff fd5b 	bl	80058c8 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm>
 8005e12:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005e16:	4618      	mov	r0, r3
 8005e18:	f00b fc51 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005e1c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005e20:	4618      	mov	r0, r3
 8005e22:	f00b fb1c 	bl	801145e <_ZNSaIcED1Ev>
			HAL_UART_Receive_IT(&huart1, RxBuffer, RECEIVE_BUFFER_LEN);
 8005e26:	220a      	movs	r2, #10
 8005e28:	490f      	ldr	r1, [pc, #60]	; (8005e68 <_ZN13SerialMessage17isDeviceConnectedEv+0x1a8>)
 8005e2a:	4810      	ldr	r0, [pc, #64]	; (8005e6c <_ZN13SerialMessage17isDeviceConnectedEv+0x1ac>)
 8005e2c:	f00a ff1d 	bl	8010c6a <HAL_UART_Receive_IT>
			clearDataBuffer();
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f7ff fd39 	bl	80058a8 <_ZN13SerialMessage15clearDataBufferEv>
		}
	}
	if(connectionRetries == MAX_CONNECTION_RETRIES)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e3c:	2b03      	cmp	r3, #3
 8005e3e:	d103      	bne.n	8005e48 <_ZN13SerialMessage17isDeviceConnectedEv+0x188>
	{
		devConnected = false;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	}
	return devConnected;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3760      	adds	r7, #96	; 0x60
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	0801280c 	.word	0x0801280c
 8005e5c:	200006a4 	.word	0x200006a4
 8005e60:	200006b4 	.word	0x200006b4
 8005e64:	08012810 	.word	0x08012810
 8005e68:	200006a8 	.word	0x200006a8
 8005e6c:	200007f0 	.word	0x200007f0
 8005e70:	08012818 	.word	0x08012818

08005e74 <_ZN13SerialMessage20receiveSerialCommandEv>:


int16_t SerialMessage::receiveSerialCommand()
{
 8005e74:	b590      	push	{r4, r7, lr}
 8005e76:	b09b      	sub	sp, #108	; 0x6c
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
	String CommandStr = "";
 8005e7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e80:	4618      	mov	r0, r3
 8005e82:	f00b faeb 	bl	801145c <_ZNSaIcEC1Ev>
 8005e86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005e8a:	f107 0310 	add.w	r3, r7, #16
 8005e8e:	4969      	ldr	r1, [pc, #420]	; (8006034 <_ZN13SerialMessage20receiveSerialCommandEv+0x1c0>)
 8005e90:	4618      	mov	r0, r3
 8005e92:	f00b fdab 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005e96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f00b fadf 	bl	801145e <_ZNSaIcED1Ev>
	int16_t Command = NO_COMMANDS;
 8005ea0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ea4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	bool InvalidMsg = false;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	char Req[MAX_REQ_LEN];
	if(readSerial())
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7ff fd4e 	bl	8005950 <_ZN13SerialMessage10readSerialEv>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f000 80af 	beq.w	800601a <_ZN13SerialMessage20receiveSerialCommandEv+0x1a6>
	{
		for(int i = 0; i < RECEIVE_BUFFER_LEN; i++)
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	663b      	str	r3, [r7, #96]	; 0x60
 8005ec0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ec2:	2b09      	cmp	r3, #9
 8005ec4:	dc28      	bgt.n	8005f18 <_ZN13SerialMessage20receiveSerialCommandEv+0xa4>
		{
			bool EndMsg = false;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if(RxData[i] == '$' && i > 0)
 8005ecc:	4a5a      	ldr	r2, [pc, #360]	; (8006038 <_ZN13SerialMessage20receiveSerialCommandEv+0x1c4>)
 8005ece:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ed0:	4413      	add	r3, r2
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	2b24      	cmp	r3, #36	; 0x24
 8005ed6:	d106      	bne.n	8005ee6 <_ZN13SerialMessage20receiveSerialCommandEv+0x72>
 8005ed8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	dd03      	ble.n	8005ee6 <_ZN13SerialMessage20receiveSerialCommandEv+0x72>
			{
				EndMsg = true;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005ee4:	e002      	b.n	8005eec <_ZN13SerialMessage20receiveSerialCommandEv+0x78>
			}
			else
			{
				InvalidMsg = true;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			}
			CommandStr.push_back(RxData[i]);
 8005eec:	4a52      	ldr	r2, [pc, #328]	; (8006038 <_ZN13SerialMessage20receiveSerialCommandEv+0x1c4>)
 8005eee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ef0:	4413      	add	r3, r2
 8005ef2:	781a      	ldrb	r2, [r3, #0]
 8005ef4:	f107 0310 	add.w	r3, r7, #16
 8005ef8:	4611      	mov	r1, r2
 8005efa:	4618      	mov	r0, r3
 8005efc:	f00b fc1c 	bl	8011738 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
			if(EndMsg)
 8005f00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d003      	beq.n	8005f10 <_ZN13SerialMessage20receiveSerialCommandEv+0x9c>
			{
				InvalidMsg = false;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
				break;
 8005f0e:	e003      	b.n	8005f18 <_ZN13SerialMessage20receiveSerialCommandEv+0xa4>
		for(int i = 0; i < RECEIVE_BUFFER_LEN; i++)
 8005f10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f12:	3301      	adds	r3, #1
 8005f14:	663b      	str	r3, [r7, #96]	; 0x60
 8005f16:	e7d3      	b.n	8005ec0 <_ZN13SerialMessage20receiveSerialCommandEv+0x4c>
			}
		}
		commandReceived = CommandStr;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3318      	adds	r3, #24
 8005f1c:	f107 0210 	add.w	r2, r7, #16
 8005f20:	4611      	mov	r1, r2
 8005f22:	4618      	mov	r0, r3
 8005f24:	f00b fbd1 	bl	80116ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		clearDataBuffer();
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7ff fcbd 	bl	80058a8 <_ZN13SerialMessage15clearDataBufferEv>
		if(InvalidMsg)
 8005f2e:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d004      	beq.n	8005f40 <_ZN13SerialMessage20receiveSerialCommandEv+0xcc>
		{
			Command = INVALID_MESSAGE;
 8005f36:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005f3a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005f3e:	e042      	b.n	8005fc6 <_ZN13SerialMessage20receiveSerialCommandEv+0x152>
		}
		else
		{
			Req[0] = CommandStr[1];
 8005f40:	f107 0310 	add.w	r3, r7, #16
 8005f44:	2101      	movs	r1, #1
 8005f46:	4618      	mov	r0, r3
 8005f48:	f00b fbf3 	bl	8011732 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	733b      	strb	r3, [r7, #12]
			Req[1] = CommandStr[2];
 8005f52:	f107 0310 	add.w	r3, r7, #16
 8005f56:	2102      	movs	r1, #2
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f00b fbea 	bl	8011732 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	737b      	strb	r3, [r7, #13]
			if(CommandStr[3] == '$')
 8005f64:	f107 0310 	add.w	r3, r7, #16
 8005f68:	2103      	movs	r1, #3
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f00b fbe1 	bl	8011732 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8005f70:	4603      	mov	r3, r0
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	2b24      	cmp	r3, #36	; 0x24
 8005f76:	bf0c      	ite	eq
 8005f78:	2301      	moveq	r3, #1
 8005f7a:	2300      	movne	r3, #0
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d009      	beq.n	8005f96 <_ZN13SerialMessage20receiveSerialCommandEv+0x122>
			{
				Command = getStartStopReq(Req);
 8005f82:	f107 030c 	add.w	r3, r7, #12
 8005f86:	4619      	mov	r1, r3
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f7ff fd4b 	bl	8005a24 <_ZN13SerialMessage15getStartStopReqEPc>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005f94:	e017      	b.n	8005fc6 <_ZN13SerialMessage20receiveSerialCommandEv+0x152>
			}
			else
			{
				Command = getSetReq(Req, CommandStr);
 8005f96:	f107 0210 	add.w	r2, r7, #16
 8005f9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f9e:	4611      	mov	r1, r2
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f00b fcf0 	bl	8011986 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8005fa6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005faa:	f107 030c 	add.w	r3, r7, #12
 8005fae:	4619      	mov	r1, r3
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f7ff fd8b 	bl	8005acc <_ZN13SerialMessage9getSetReqEPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005fbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f00b fb7c 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			}

		}
		if(!InvalidMsg && Command != INVALID_MESSAGE)
 8005fc6:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8005fca:	f083 0301 	eor.w	r3, r3, #1
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d022      	beq.n	800601a <_ZN13SerialMessage20receiveSerialCommandEv+0x1a6>
 8005fd4:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8005fd8:	f113 0f02 	cmn.w	r3, #2
 8005fdc:	d01d      	beq.n	800601a <_ZN13SerialMessage20receiveSerialCommandEv+0x1a6>
		{
			sendMessage("$!$", true);
 8005fde:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f00b fa3a 	bl	801145c <_ZNSaIcEC1Ev>
 8005fe8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005fec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005ff0:	4912      	ldr	r1, [pc, #72]	; (800603c <_ZN13SerialMessage20receiveSerialCommandEv+0x1c8>)
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f00b fcfa 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005ff8:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	2201      	movs	r2, #1
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f7ff fc61 	bl	80058c8 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm>
 8006006:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800600a:	4618      	mov	r0, r3
 800600c:	f00b fb57 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006010:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006014:	4618      	mov	r0, r3
 8006016:	f00b fa22 	bl	801145e <_ZNSaIcED1Ev>
		}
	}
	return Command;
 800601a:	f9b7 4066 	ldrsh.w	r4, [r7, #102]	; 0x66
	String CommandStr = "";
 800601e:	f107 0310 	add.w	r3, r7, #16
 8006022:	4618      	mov	r0, r3
 8006024:	f00b fb4b 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return Command;
 8006028:	4623      	mov	r3, r4
}
 800602a:	4618      	mov	r0, r3
 800602c:	376c      	adds	r7, #108	; 0x6c
 800602e:	46bd      	mov	sp, r7
 8006030:	bd90      	pop	{r4, r7, pc}
 8006032:	bf00      	nop
 8006034:	080127e8 	.word	0x080127e8
 8006038:	200006b4 	.word	0x200006b4
 800603c:	08012828 	.word	0x08012828

08006040 <_ZN13SerialMessage14getValueSettedEv>:

uint32_t SerialMessage::getValueSetted()
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
	uint32_t RetVal = valueSetted;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800604c:	60fb      	str	r3, [r7, #12]
	valueSetted = UINT32_MAX;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f04f 32ff 	mov.w	r2, #4294967295
 8006054:	635a      	str	r2, [r3, #52]	; 0x34
	return RetVal;
 8006056:	68fb      	ldr	r3, [r7, #12]
}
 8006058:	4618      	mov	r0, r3
 800605a:	3714      	adds	r7, #20
 800605c:	46bd      	mov	sp, r7
 800605e:	bc80      	pop	{r7}
 8006060:	4770      	bx	lr
	...

08006064 <_ZN13SerialMessage18getCommandReceivedB5cxx11Ev>:



std::string SerialMessage::getCommandReceived()
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
	String RetCommand = commandReceived;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	3318      	adds	r3, #24
 8006072:	4619      	mov	r1, r3
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f00b fc86 	bl	8011986 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
	commandReceived = "";
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	3318      	adds	r3, #24
 800607e:	4904      	ldr	r1, [pc, #16]	; (8006090 <_ZN13SerialMessage18getCommandReceivedB5cxx11Ev+0x2c>)
 8006080:	4618      	mov	r0, r3
 8006082:	f00b fc00 	bl	8011886 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	return RetCommand;
 8006086:	bf00      	nop
}
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	080127e8 	.word	0x080127e8

08006094 <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	f00b fd78 	bl	8011b90 <__errno>
 80060a0:	4603      	mov	r3, r0
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	601a      	str	r2, [r3, #0]
 80060a8:	f00b fd72 	bl	8011b90 <__errno>
 80060ac:	4602      	mov	r2, r0
 80060ae:	2300      	movs	r3, #0
 80060b0:	6013      	str	r3, [r2, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4618      	mov	r0, r3
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	f00b fd64 	bl	8011b90 <__errno>
 80060c8:	4603      	mov	r3, r0
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	bf0c      	ite	eq
 80060d0:	2301      	moveq	r3, #1
 80060d2:	2300      	movne	r3, #0
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d005      	beq.n	80060e6 <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 80060da:	f00b fd59 	bl	8011b90 <__errno>
 80060de:	4602      	mov	r2, r0
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6013      	str	r3, [r2, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4618      	mov	r0, r3
 80060ea:	3708      	adds	r7, #8
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkEmSt17integral_constantIbLb0EE>:
	int _M_errno;
      } const __save_errno;

      struct _Range_chk {
	  static bool
	  _S_chk(_TRet, std::false_type) { return false; }
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	7039      	strb	r1, [r7, #0]
 80060fa:	2300      	movs	r3, #0
 80060fc:	4618      	mov	r0, r3
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	bc80      	pop	{r7}
 8006104:	4770      	bx	lr

08006106 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 8006106:	b590      	push	{r4, r7, lr}
 8006108:	b08b      	sub	sp, #44	; 0x2c
 800610a:	af00      	add	r7, sp, #0
 800610c:	60f8      	str	r0, [r7, #12]
 800610e:	60b9      	str	r1, [r7, #8]
 8006110:	607a      	str	r2, [r7, #4]
 8006112:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 8006114:	f107 0314 	add.w	r3, r7, #20
 8006118:	4618      	mov	r0, r3
 800611a:	f7ff ffbb 	bl	8006094 <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
	  }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 800611e:	f107 0118 	add.w	r1, r7, #24
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	4798      	blx	r3
 800612a:	6278      	str	r0, [r7, #36]	; 0x24

      if (__endptr == __str)
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	429a      	cmp	r2, r3
 8006132:	d102      	bne.n	800613a <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x34>
	std::__throw_invalid_argument(__name);
 8006134:	68b8      	ldr	r0, [r7, #8]
 8006136:	f00b f999 	bl	801146c <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 800613a:	f00b fd29 	bl	8011b90 <__errno>
 800613e:	4603      	mov	r3, r0
 8006140:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 8006142:	2b22      	cmp	r3, #34	; 0x22
 8006144:	d006      	beq.n	8006154 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
 8006146:	4621      	mov	r1, r4
 8006148:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800614a:	f7ff ffd1 	bl	80060f0 <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkEmSt17integral_constantIbLb0EE>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d001      	beq.n	8006158 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 8006154:	2301      	movs	r3, #1
 8006156:	e000      	b.n	800615a <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 8006158:	2300      	movs	r3, #0
      else if (errno == ERANGE
 800615a:	2b00      	cmp	r3, #0
 800615c:	d002      	beq.n	8006164 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
	std::__throw_out_of_range(__name);
 800615e:	68b8      	ldr	r0, [r7, #8]
 8006160:	f00b f98a 	bl	8011478 <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;
 8006164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006166:	623b      	str	r3, [r7, #32]

      if (__idx)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d006      	beq.n	800617c <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x76>
	*__idx = __endptr - __str;
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	461a      	mov	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	461a      	mov	r2, r3
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	601a      	str	r2, [r3, #0]

      return __ret;
 800617c:	6a3c      	ldr	r4, [r7, #32]
      } const __save_errno;
 800617e:	f107 0314 	add.w	r3, r7, #20
 8006182:	4618      	mov	r0, r3
 8006184:	f7ff ff9a 	bl	80060bc <_ZZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 8006188:	4623      	mov	r3, r4
    }
 800618a:	4618      	mov	r0, r3
 800618c:	372c      	adds	r7, #44	; 0x2c
 800618e:	46bd      	mov	sp, r7
 8006190:	bd90      	pop	{r4, r7, pc}

08006192 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8006192:	b480      	push	{r7}
 8006194:	b083      	sub	sp, #12
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	6039      	str	r1, [r7, #0]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	4618      	mov	r0, r3
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bc80      	pop	{r7}
 80061a6:	4770      	bx	lr

080061a8 <_ZNSt7__cxx119to_stringEm>:
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),
					   "%ld", __val); }

  inline string
  to_string(unsigned long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af02      	add	r7, sp, #8
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
					   4 * sizeof(unsigned long),
					   "%lu", __val); }
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	4b04      	ldr	r3, [pc, #16]	; (80061cc <_ZNSt7__cxx119to_stringEm+0x24>)
 80061ba:	2210      	movs	r2, #16
 80061bc:	4904      	ldr	r1, [pc, #16]	; (80061d0 <_ZNSt7__cxx119to_stringEm+0x28>)
 80061be:	f7fd ff2d 	bl	800401c <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	08012830 	.word	0x08012830
 80061d0:	0801206d 	.word	0x0801206d

080061d4 <_ZN13THERMO_SENSORC1Ev>:
#include <string>

typedef std::string String;


class THERMO_SENSOR
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 2020 	strb.w	r2, [r3, #32]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4618      	mov	r0, r3
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bc80      	pop	{r7}
 80061ee:	4770      	bx	lr

080061f0 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>:
		bool withChebox;
		bool *itemsChecked;
		void *paramAssociated;
		uint8_t paramType;
		bool menuSelected;
	}MENU_STRUCTURE;
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f00b fa3e 	bl	801167c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4618      	mov	r0, r3
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
	...

0800620c <_ZN10SmartDryer12DRYER_PARAMSC1Ev>:
	}DRYER_PARAMS;
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	701a      	strb	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	705a      	strb	r2, [r3, #1]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	709a      	strb	r2, [r3, #2]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a09      	ldr	r2, [pc, #36]	; (8006250 <_ZN10SmartDryer12DRYER_PARAMSC1Ev+0x44>)
 800622a:	605a      	str	r2, [r3, #4]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	721a      	strb	r2, [r3, #8]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	725a      	strb	r2, [r3, #9]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	729a      	strb	r2, [r3, #10]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2202      	movs	r2, #2
 8006242:	72da      	strb	r2, [r3, #11]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4618      	mov	r0, r3
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	bc80      	pop	{r7}
 800624e:	4770      	bx	lr
 8006250:	41f00000 	.word	0x41f00000

08006254 <_ZN10SmartDryerC1Ev>:
		"Programma 3",
};



SmartDryer::SmartDryer()
 8006254:	b590      	push	{r4, r7, lr}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	334c      	adds	r3, #76	; 0x4c
 8006268:	2248      	movs	r2, #72	; 0x48
 800626a:	2100      	movs	r1, #0
 800626c:	4618      	mov	r0, r3
 800626e:	f00b fd0a 	bl	8011c86 <memset>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2202      	movs	r2, #2
 8006276:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	33a4      	adds	r3, #164	; 0xa4
 800627e:	4618      	mov	r0, r3
 8006280:	f004 ff5a 	bl	800b138 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
{
	display = new NHDST7565_LCD(NHDST7565_LCD::LANDSCAPE_2);
 80062a4:	20c8      	movs	r0, #200	; 0xc8
 80062a6:	f00b f8bd 	bl	8011424 <_Znwj>
 80062aa:	4603      	mov	r3, r0
 80062ac:	461c      	mov	r4, r3
 80062ae:	2101      	movs	r1, #1
 80062b0:	4620      	mov	r0, r4
 80062b2:	f7fe f91f 	bl	80044f4 <_ZN13NHDST7565_LCDC1Eh>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	601c      	str	r4, [r3, #0]
	keyboard = new DryerKey();
 80062ba:	2010      	movs	r0, #16
 80062bc:	f00b f8b2 	bl	8011424 <_Znwj>
 80062c0:	4603      	mov	r3, r0
 80062c2:	461c      	mov	r4, r3
 80062c4:	4620      	mov	r0, r4
 80062c6:	f7ff f959 	bl	800557c <_ZN8DryerKeyC1Ev>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	609c      	str	r4, [r3, #8]
	tempSens = new THERMO_SENSOR();
 80062ce:	2021      	movs	r0, #33	; 0x21
 80062d0:	f00b f8a8 	bl	8011424 <_Znwj>
 80062d4:	4603      	mov	r3, r0
 80062d6:	461c      	mov	r4, r3
 80062d8:	4620      	mov	r0, r4
 80062da:	2321      	movs	r3, #33	; 0x21
 80062dc:	461a      	mov	r2, r3
 80062de:	2100      	movs	r1, #0
 80062e0:	f00b fcd1 	bl	8011c86 <memset>
 80062e4:	4620      	mov	r0, r4
 80062e6:	f7ff ff75 	bl	80061d4 <_ZN13THERMO_SENSORC1Ev>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	60dc      	str	r4, [r3, #12]
	fanCtrl = new RELE(FanCtrl_GPIO_Port, FanCtrl_Pin, LOW);
 80062ee:	2008      	movs	r0, #8
 80062f0:	f00b f898 	bl	8011424 <_Znwj>
 80062f4:	4603      	mov	r3, r0
 80062f6:	461c      	mov	r4, r3
 80062f8:	2300      	movs	r3, #0
 80062fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062fe:	499a      	ldr	r1, [pc, #616]	; (8006568 <_ZN10SmartDryerC1Ev+0x314>)
 8006300:	4620      	mov	r0, r4
 8006302:	f7ff f9d4 	bl	80056ae <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	611c      	str	r4, [r3, #16]
	thermoCtrl = new RELE(ThermoCtrl_GPIO_Port, ThermoCtrl_Pin, LOW);
 800630a:	2008      	movs	r0, #8
 800630c:	f00b f88a 	bl	8011424 <_Znwj>
 8006310:	4603      	mov	r3, r0
 8006312:	461c      	mov	r4, r3
 8006314:	2300      	movs	r3, #0
 8006316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800631a:	4993      	ldr	r1, [pc, #588]	; (8006568 <_ZN10SmartDryerC1Ev+0x314>)
 800631c:	4620      	mov	r0, r4
 800631e:	f7ff f9c6 	bl	80056ae <_ZN4RELEC1EP12GPIO_TypeDeft9PIN_STATE>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	615c      	str	r4, [r3, #20]

	memory = new STM32_EEPROM();
 8006326:	2008      	movs	r0, #8
 8006328:	f00b f87c 	bl	8011424 <_Znwj>
 800632c:	4603      	mov	r3, r0
 800632e:	461c      	mov	r4, r3
 8006330:	4620      	mov	r0, r4
 8006332:	f7ff f840 	bl	80053b6 <_ZN12STM32_EEPROMC1Ev>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	619c      	str	r4, [r3, #24]

	getTempTimer = new ChronoTimer(ChronoTimer::MILLIS);
 800633a:	2014      	movs	r0, #20
 800633c:	f00b f872 	bl	8011424 <_Znwj>
 8006340:	4603      	mov	r3, r0
 8006342:	461c      	mov	r4, r3
 8006344:	2100      	movs	r1, #0
 8006346:	4620      	mov	r0, r4
 8006348:	f7fd f839 	bl	80033be <_ZN11ChronoTimerC1Eh>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	61dc      	str	r4, [r3, #28]

	blinkRedLedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8006350:	2014      	movs	r0, #20
 8006352:	f00b f867 	bl	8011424 <_Znwj>
 8006356:	4603      	mov	r3, r0
 8006358:	461c      	mov	r4, r3
 800635a:	2100      	movs	r1, #0
 800635c:	4620      	mov	r0, r4
 800635e:	f7fd f82e 	bl	80033be <_ZN11ChronoTimerC1Eh>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	621c      	str	r4, [r3, #32]
	blinkGreenLedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 8006366:	2014      	movs	r0, #20
 8006368:	f00b f85c 	bl	8011424 <_Znwj>
 800636c:	4603      	mov	r3, r0
 800636e:	461c      	mov	r4, r3
 8006370:	2100      	movs	r1, #0
 8006372:	4620      	mov	r0, r4
 8006374:	f7fd f823 	bl	80033be <_ZN11ChronoTimerC1Eh>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	625c      	str	r4, [r3, #36]	; 0x24
	takeTimeTimer = new ChronoTimer(ChronoTimer::MILLIS);
 800637c:	2014      	movs	r0, #20
 800637e:	f00b f851 	bl	8011424 <_Znwj>
 8006382:	4603      	mov	r3, r0
 8006384:	461c      	mov	r4, r3
 8006386:	2100      	movs	r1, #0
 8006388:	4620      	mov	r0, r4
 800638a:	f7fd f818 	bl	80033be <_ZN11ChronoTimerC1Eh>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	629c      	str	r4, [r3, #40]	; 0x28
	showHelpMessageTimer = new ChronoTimer(ChronoTimer::SECONDS);
 8006392:	2014      	movs	r0, #20
 8006394:	f00b f846 	bl	8011424 <_Znwj>
 8006398:	4603      	mov	r3, r0
 800639a:	461c      	mov	r4, r3
 800639c:	2101      	movs	r1, #1
 800639e:	4620      	mov	r0, r4
 80063a0:	f7fd f80d 	bl	80033be <_ZN11ChronoTimerC1Eh>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	62dc      	str	r4, [r3, #44]	; 0x2c
	programStartedTimer = new ChronoTimer(ChronoTimer::MILLIS);
 80063a8:	2014      	movs	r0, #20
 80063aa:	f00b f83b 	bl	8011424 <_Znwj>
 80063ae:	4603      	mov	r3, r0
 80063b0:	461c      	mov	r4, r3
 80063b2:	2100      	movs	r1, #0
 80063b4:	4620      	mov	r0, r4
 80063b6:	f7fd f802 	bl	80033be <_ZN11ChronoTimerC1Eh>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	631c      	str	r4, [r3, #48]	; 0x30
	blinkSerialIconTimer = new ChronoTimer(ChronoTimer::MILLIS);
 80063be:	2014      	movs	r0, #20
 80063c0:	f00b f830 	bl	8011424 <_Znwj>
 80063c4:	4603      	mov	r3, r0
 80063c6:	461c      	mov	r4, r3
 80063c8:	2100      	movs	r1, #0
 80063ca:	4620      	mov	r0, r4
 80063cc:	f7fc fff7 	bl	80033be <_ZN11ChronoTimerC1Eh>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	635c      	str	r4, [r3, #52]	; 0x34
	lcdLedAutoOffTimer = new ChronoTimer(ChronoTimer::SECONDS);
 80063d4:	2014      	movs	r0, #20
 80063d6:	f00b f825 	bl	8011424 <_Znwj>
 80063da:	4603      	mov	r3, r0
 80063dc:	461c      	mov	r4, r3
 80063de:	2101      	movs	r1, #1
 80063e0:	4620      	mov	r0, r4
 80063e2:	f7fc ffec 	bl	80033be <_ZN11ChronoTimerC1Eh>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	639c      	str	r4, [r3, #56]	; 0x38


	testTimer = new ChronoTimer(ChronoTimer::MILLIS);
 80063ea:	2014      	movs	r0, #20
 80063ec:	f00b f81a 	bl	8011424 <_Znwj>
 80063f0:	4603      	mov	r3, r0
 80063f2:	461c      	mov	r4, r3
 80063f4:	2100      	movs	r1, #0
 80063f6:	4620      	mov	r0, r4
 80063f8:	f7fc ffe1 	bl	80033be <_ZN11ChronoTimerC1Eh>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	63dc      	str	r4, [r3, #60]	; 0x3c

	externalCommand = new SerialMessage();
 8006400:	2040      	movs	r0, #64	; 0x40
 8006402:	f00b f80f 	bl	8011424 <_Znwj>
 8006406:	4603      	mov	r3, r0
 8006408:	461c      	mov	r4, r3
 800640a:	4620      	mov	r0, r4
 800640c:	f7ff f9fa 	bl	8005804 <_ZN13SerialMessageC1Ev>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	641c      	str	r4, [r3, #64]	; 0x40

	clock = new DS1307_RTC();
 8006414:	2021      	movs	r0, #33	; 0x21
 8006416:	f00b f805 	bl	8011424 <_Znwj>
 800641a:	4603      	mov	r3, r0
 800641c:	461c      	mov	r4, r3
 800641e:	4620      	mov	r0, r4
 8006420:	f7fd f90c 	bl	800363c <_ZN10DS1307_RTCC1Ev>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	605c      	str	r4, [r3, #4]

	mainMenu = new MENU_STRUCTURE();
 8006428:	2038      	movs	r0, #56	; 0x38
 800642a:	f00a fffb 	bl	8011424 <_Znwj>
 800642e:	4603      	mov	r3, r0
 8006430:	461c      	mov	r4, r3
 8006432:	4620      	mov	r0, r4
 8006434:	2338      	movs	r3, #56	; 0x38
 8006436:	461a      	mov	r2, r3
 8006438:	2100      	movs	r1, #0
 800643a:	f00b fc24 	bl	8011c86 <memset>
 800643e:	4620      	mov	r0, r4
 8006440:	f7ff fed6 	bl	80061f0 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8c3 40b0 	str.w	r4, [r3, #176]	; 0xb0
	thermoMenuCtrl = new MENU_STRUCTURE();
 800644a:	2038      	movs	r0, #56	; 0x38
 800644c:	f00a ffea 	bl	8011424 <_Znwj>
 8006450:	4603      	mov	r3, r0
 8006452:	461c      	mov	r4, r3
 8006454:	4620      	mov	r0, r4
 8006456:	2338      	movs	r3, #56	; 0x38
 8006458:	461a      	mov	r2, r3
 800645a:	2100      	movs	r1, #0
 800645c:	f00b fc13 	bl	8011c86 <memset>
 8006460:	4620      	mov	r0, r4
 8006462:	f7ff fec5 	bl	80061f0 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
	fanMenuCtrl = new MENU_STRUCTURE();
 800646c:	2038      	movs	r0, #56	; 0x38
 800646e:	f00a ffd9 	bl	8011424 <_Znwj>
 8006472:	4603      	mov	r3, r0
 8006474:	461c      	mov	r4, r3
 8006476:	4620      	mov	r0, r4
 8006478:	2338      	movs	r3, #56	; 0x38
 800647a:	461a      	mov	r2, r3
 800647c:	2100      	movs	r1, #0
 800647e:	f00b fc02 	bl	8011c86 <memset>
 8006482:	4620      	mov	r0, r4
 8006484:	f7ff feb4 	bl	80061f0 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8c3 40b8 	str.w	r4, [r3, #184]	; 0xb8
	tempMenuCtrl = new MENU_STRUCTURE();
 800648e:	2038      	movs	r0, #56	; 0x38
 8006490:	f00a ffc8 	bl	8011424 <_Znwj>
 8006494:	4603      	mov	r3, r0
 8006496:	461c      	mov	r4, r3
 8006498:	4620      	mov	r0, r4
 800649a:	2338      	movs	r3, #56	; 0x38
 800649c:	461a      	mov	r2, r3
 800649e:	2100      	movs	r1, #0
 80064a0:	f00b fbf1 	bl	8011c86 <memset>
 80064a4:	4620      	mov	r0, r4
 80064a6:	f7ff fea3 	bl	80061f0 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
	startDryerMenu = new MENU_STRUCTURE();
 80064b0:	2038      	movs	r0, #56	; 0x38
 80064b2:	f00a ffb7 	bl	8011424 <_Znwj>
 80064b6:	4603      	mov	r3, r0
 80064b8:	461c      	mov	r4, r3
 80064ba:	4620      	mov	r0, r4
 80064bc:	2338      	movs	r3, #56	; 0x38
 80064be:	461a      	mov	r2, r3
 80064c0:	2100      	movs	r1, #0
 80064c2:	f00b fbe0 	bl	8011c86 <memset>
 80064c6:	4620      	mov	r0, r4
 80064c8:	f7ff fe92 	bl	80061f0 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8c3 40c0 	str.w	r4, [r3, #192]	; 0xc0
	changeProgramsMenu = new MENU_STRUCTURE();
 80064d2:	2038      	movs	r0, #56	; 0x38
 80064d4:	f00a ffa6 	bl	8011424 <_Znwj>
 80064d8:	4603      	mov	r3, r0
 80064da:	461c      	mov	r4, r3
 80064dc:	4620      	mov	r0, r4
 80064de:	2338      	movs	r3, #56	; 0x38
 80064e0:	461a      	mov	r2, r3
 80064e2:	2100      	movs	r1, #0
 80064e4:	f00b fbcf 	bl	8011c86 <memset>
 80064e8:	4620      	mov	r0, r4
 80064ea:	f7ff fe81 	bl	80061f0 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4
	startProgramsMenu = new MENU_STRUCTURE();
 80064f4:	2038      	movs	r0, #56	; 0x38
 80064f6:	f00a ff95 	bl	8011424 <_Znwj>
 80064fa:	4603      	mov	r3, r0
 80064fc:	461c      	mov	r4, r3
 80064fe:	4620      	mov	r0, r4
 8006500:	2338      	movs	r3, #56	; 0x38
 8006502:	461a      	mov	r2, r3
 8006504:	2100      	movs	r1, #0
 8006506:	f00b fbbe 	bl	8011c86 <memset>
 800650a:	4620      	mov	r0, r4
 800650c:	f7ff fe70 	bl	80061f0 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
	backlightCtrl = new MENU_STRUCTURE();
 8006516:	2038      	movs	r0, #56	; 0x38
 8006518:	f00a ff84 	bl	8011424 <_Znwj>
 800651c:	4603      	mov	r3, r0
 800651e:	461c      	mov	r4, r3
 8006520:	4620      	mov	r0, r4
 8006522:	2338      	movs	r3, #56	; 0x38
 8006524:	461a      	mov	r2, r3
 8006526:	2100      	movs	r1, #0
 8006528:	f00b fbad 	bl	8011c86 <memset>
 800652c:	4620      	mov	r0, r4
 800652e:	f7ff fe5f 	bl	80061f0 <_ZN10SmartDryer14MENU_STRUCTUREC1Ev>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8c3 40cc 	str.w	r4, [r3, #204]	; 0xcc

	statusParam = new DRYER_PARAMS();
 8006538:	200c      	movs	r0, #12
 800653a:	f00a ff73 	bl	8011424 <_Znwj>
 800653e:	4603      	mov	r3, r0
 8006540:	461c      	mov	r4, r3
 8006542:	4622      	mov	r2, r4
 8006544:	2300      	movs	r3, #0
 8006546:	6013      	str	r3, [r2, #0]
 8006548:	6053      	str	r3, [r2, #4]
 800654a:	6093      	str	r3, [r2, #8]
 800654c:	4620      	mov	r0, r4
 800654e:	f7ff fe5d 	bl	800620c <_ZN10SmartDryer12DRYER_PARAMSC1Ev>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	649c      	str	r4, [r3, #72]	; 0x48

	chamberTemperature.readedValueInt = 0;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4618      	mov	r0, r3
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	bd90      	pop	{r4, r7, pc}
 8006568:	40010800 	.word	0x40010800

0800656c <_ZN10SmartDryer11floatStringB5cxx11Efh>:

String SmartDryer::floatString(float Number, uint8_t NDecimal)
{
 800656c:	b590      	push	{r4, r7, lr}
 800656e:	b08d      	sub	sp, #52	; 0x34
 8006570:	af02      	add	r7, sp, #8
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
 8006578:	70fb      	strb	r3, [r7, #3]
	char CharArray[6];
	char Format[6];
	snprintf(Format, 6, "%%.%df", NDecimal);
 800657a:	78fb      	ldrb	r3, [r7, #3]
 800657c:	f107 0014 	add.w	r0, r7, #20
 8006580:	4a13      	ldr	r2, [pc, #76]	; (80065d0 <_ZN10SmartDryer11floatStringB5cxx11Efh+0x64>)
 8006582:	2106      	movs	r1, #6
 8006584:	f00b fc82 	bl	8011e8c <sniprintf>
	snprintf(CharArray, 6, Format, Number);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f7f9 ff4d 	bl	8000428 <__aeabi_f2d>
 800658e:	4603      	mov	r3, r0
 8006590:	460c      	mov	r4, r1
 8006592:	f107 0214 	add.w	r2, r7, #20
 8006596:	f107 001c 	add.w	r0, r7, #28
 800659a:	e9cd 3400 	strd	r3, r4, [sp]
 800659e:	2106      	movs	r1, #6
 80065a0:	f00b fc74 	bl	8011e8c <sniprintf>
	return String(CharArray);
 80065a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065a8:	4618      	mov	r0, r3
 80065aa:	f00a ff57 	bl	801145c <_ZNSaIcEC1Ev>
 80065ae:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80065b2:	f107 031c 	add.w	r3, r7, #28
 80065b6:	4619      	mov	r1, r3
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f00b fa17 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80065be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065c2:	4618      	mov	r0, r3
 80065c4:	f00a ff4b 	bl	801145e <_ZNSaIcED1Ev>
}
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	372c      	adds	r7, #44	; 0x2c
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd90      	pop	{r4, r7, pc}
 80065d0:	08012924 	.word	0x08012924

080065d4 <_ZN10SmartDryer8blinkLedEht>:

void SmartDryer::blinkLed(uint8_t WichLed, uint16_t BlinkDelay)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	460b      	mov	r3, r1
 80065de:	70fb      	strb	r3, [r7, #3]
 80065e0:	4613      	mov	r3, r2
 80065e2:	803b      	strh	r3, [r7, #0]
	//	GPIO_TypeDef *LedPort;
	//	uint16_t LedPin = 0;
	if(BlinkDelay <= 1)
 80065e4:	883b      	ldrh	r3, [r7, #0]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d801      	bhi.n	80065ee <_ZN10SmartDryer8blinkLedEht+0x1a>
	{
		BlinkDelay = 2;
 80065ea:	2302      	movs	r3, #2
 80065ec:	803b      	strh	r3, [r7, #0]
	}
	switch(WichLed)
 80065ee:	78fb      	ldrb	r3, [r7, #3]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d002      	beq.n	80065fa <_ZN10SmartDryer8blinkLedEht+0x26>
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d010      	beq.n	800661a <_ZN10SmartDryer8blinkLedEht+0x46>
			}
			//		LedPort = GreenLed_GPIO_Port;
			//		LedPin = GreenLed_Pin;
			break;
		default:
			break;
 80065f8:	e022      	b.n	8006640 <_ZN10SmartDryer8blinkLedEht+0x6c>
			if(blinkRedLedTimer->isFinished(true, BlinkDelay))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	883a      	ldrh	r2, [r7, #0]
 8006600:	2101      	movs	r1, #1
 8006602:	4618      	mov	r0, r3
 8006604:	f7fc ff85 	bl	8003512 <_ZN11ChronoTimer10isFinishedEbm>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d015      	beq.n	800663a <_ZN10SmartDryer8blinkLedEht+0x66>
				toggleLed(WichLed);
 800660e:	78fb      	ldrb	r3, [r7, #3]
 8006610:	4619      	mov	r1, r3
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f818 	bl	8006648 <_ZN10SmartDryer9toggleLedEh>
			break;
 8006618:	e00f      	b.n	800663a <_ZN10SmartDryer8blinkLedEht+0x66>
			if(blinkGreenLedTimer->isFinished(true, BlinkDelay))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661e:	883a      	ldrh	r2, [r7, #0]
 8006620:	2101      	movs	r1, #1
 8006622:	4618      	mov	r0, r3
 8006624:	f7fc ff75 	bl	8003512 <_ZN11ChronoTimer10isFinishedEbm>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d007      	beq.n	800663e <_ZN10SmartDryer8blinkLedEht+0x6a>
				toggleLed(WichLed);
 800662e:	78fb      	ldrb	r3, [r7, #3]
 8006630:	4619      	mov	r1, r3
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f808 	bl	8006648 <_ZN10SmartDryer9toggleLedEh>
			break;
 8006638:	e001      	b.n	800663e <_ZN10SmartDryer8blinkLedEht+0x6a>
			break;
 800663a:	bf00      	nop
 800663c:	e000      	b.n	8006640 <_ZN10SmartDryer8blinkLedEht+0x6c>
			break;
 800663e:	bf00      	nop
	}

}
 8006640:	bf00      	nop
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <_ZN10SmartDryer9toggleLedEh>:

void SmartDryer::toggleLed(uint8_t WichLed)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	460b      	mov	r3, r1
 8006652:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 8006654:	2300      	movs	r3, #0
 8006656:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 8006658:	78fb      	ldrb	r3, [r7, #3]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d002      	beq.n	8006664 <_ZN10SmartDryer9toggleLedEh+0x1c>
 800665e:	2b01      	cmp	r3, #1
 8006660:	d006      	beq.n	8006670 <_ZN10SmartDryer9toggleLedEh+0x28>
		case GREEN_LED:
			LedPort = GreenLed_GPIO_Port;
			LedPin = GreenLed_Pin;
			break;
		default:
			break;
 8006662:	e00b      	b.n	800667c <_ZN10SmartDryer9toggleLedEh+0x34>
			LedPort = RedLed_GPIO_Port;
 8006664:	4b0a      	ldr	r3, [pc, #40]	; (8006690 <_ZN10SmartDryer9toggleLedEh+0x48>)
 8006666:	60fb      	str	r3, [r7, #12]
			LedPin = RedLed_Pin;
 8006668:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800666c:	817b      	strh	r3, [r7, #10]
			break;
 800666e:	e005      	b.n	800667c <_ZN10SmartDryer9toggleLedEh+0x34>
			LedPort = GreenLed_GPIO_Port;
 8006670:	4b07      	ldr	r3, [pc, #28]	; (8006690 <_ZN10SmartDryer9toggleLedEh+0x48>)
 8006672:	60fb      	str	r3, [r7, #12]
			LedPin = GreenLed_Pin;
 8006674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006678:	817b      	strh	r3, [r7, #10]
			break;
 800667a:	bf00      	nop
	}
	HAL_GPIO_TogglePin(LedPort, LedPin);
 800667c:	897b      	ldrh	r3, [r7, #10]
 800667e:	4619      	mov	r1, r3
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f007 fac9 	bl	800dc18 <HAL_GPIO_TogglePin>
}
 8006686:	bf00      	nop
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	40010800 	.word	0x40010800

08006694 <_ZN10SmartDryer9turnOnLedEh>:

void SmartDryer::turnOnLed(uint8_t WichLed)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	460b      	mov	r3, r1
 800669e:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 80066a0:	2300      	movs	r3, #0
 80066a2:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 80066a4:	78fb      	ldrb	r3, [r7, #3]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d002      	beq.n	80066b0 <_ZN10SmartDryer9turnOnLedEh+0x1c>
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d006      	beq.n	80066bc <_ZN10SmartDryer9turnOnLedEh+0x28>
		case GREEN_LED:
			LedPort = GreenLed_GPIO_Port;
			LedPin = GreenLed_Pin;
			break;
		default:
			break;
 80066ae:	e00b      	b.n	80066c8 <_ZN10SmartDryer9turnOnLedEh+0x34>
			LedPort = RedLed_GPIO_Port;
 80066b0:	4b0a      	ldr	r3, [pc, #40]	; (80066dc <_ZN10SmartDryer9turnOnLedEh+0x48>)
 80066b2:	60fb      	str	r3, [r7, #12]
			LedPin = RedLed_Pin;
 80066b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80066b8:	817b      	strh	r3, [r7, #10]
			break;
 80066ba:	e005      	b.n	80066c8 <_ZN10SmartDryer9turnOnLedEh+0x34>
			LedPort = GreenLed_GPIO_Port;
 80066bc:	4b07      	ldr	r3, [pc, #28]	; (80066dc <_ZN10SmartDryer9turnOnLedEh+0x48>)
 80066be:	60fb      	str	r3, [r7, #12]
			LedPin = GreenLed_Pin;
 80066c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066c4:	817b      	strh	r3, [r7, #10]
			break;
 80066c6:	bf00      	nop
	}
	HAL_GPIO_WritePin(LedPort, LedPin, GPIO_PIN_SET);
 80066c8:	897b      	ldrh	r3, [r7, #10]
 80066ca:	2201      	movs	r2, #1
 80066cc:	4619      	mov	r1, r3
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f007 fa70 	bl	800dbb4 <HAL_GPIO_WritePin>
}
 80066d4:	bf00      	nop
 80066d6:	3710      	adds	r7, #16
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	40010800 	.word	0x40010800

080066e0 <_ZN10SmartDryer10turnOffLedEh>:

void SmartDryer::turnOffLed(uint8_t WichLed)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	460b      	mov	r3, r1
 80066ea:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *LedPort;
	uint16_t LedPin = 0;
 80066ec:	2300      	movs	r3, #0
 80066ee:	817b      	strh	r3, [r7, #10]
	switch(WichLed)
 80066f0:	78fb      	ldrb	r3, [r7, #3]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d002      	beq.n	80066fc <_ZN10SmartDryer10turnOffLedEh+0x1c>
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d006      	beq.n	8006708 <_ZN10SmartDryer10turnOffLedEh+0x28>
		case GREEN_LED:
			LedPort = GreenLed_GPIO_Port;
			LedPin = GreenLed_Pin;
			break;
		default:
			break;
 80066fa:	e00b      	b.n	8006714 <_ZN10SmartDryer10turnOffLedEh+0x34>
			LedPort = RedLed_GPIO_Port;
 80066fc:	4b0a      	ldr	r3, [pc, #40]	; (8006728 <_ZN10SmartDryer10turnOffLedEh+0x48>)
 80066fe:	60fb      	str	r3, [r7, #12]
			LedPin = RedLed_Pin;
 8006700:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006704:	817b      	strh	r3, [r7, #10]
			break;
 8006706:	e005      	b.n	8006714 <_ZN10SmartDryer10turnOffLedEh+0x34>
			LedPort = GreenLed_GPIO_Port;
 8006708:	4b07      	ldr	r3, [pc, #28]	; (8006728 <_ZN10SmartDryer10turnOffLedEh+0x48>)
 800670a:	60fb      	str	r3, [r7, #12]
			LedPin = GreenLed_Pin;
 800670c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006710:	817b      	strh	r3, [r7, #10]
			break;
 8006712:	bf00      	nop
	}
	HAL_GPIO_WritePin(LedPort, LedPin, GPIO_PIN_RESET);
 8006714:	897b      	ldrh	r3, [r7, #10]
 8006716:	2200      	movs	r2, #0
 8006718:	4619      	mov	r1, r3
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f007 fa4a 	bl	800dbb4 <HAL_GPIO_WritePin>
}
 8006720:	bf00      	nop
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	40010800 	.word	0x40010800

0800672c <_ZN10SmartDryer10ledControlEv>:

void SmartDryer::ledControl()
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
	switch(ledStatus)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 800673a:	2b03      	cmp	r3, #3
 800673c:	d032      	beq.n	80067a4 <_ZN10SmartDryer10ledControlEv+0x78>
 800673e:	2b03      	cmp	r3, #3
 8006740:	dc06      	bgt.n	8006750 <_ZN10SmartDryer10ledControlEv+0x24>
 8006742:	2b01      	cmp	r3, #1
 8006744:	d01a      	beq.n	800677c <_ZN10SmartDryer10ledControlEv+0x50>
 8006746:	2b01      	cmp	r3, #1
 8006748:	dc23      	bgt.n	8006792 <_ZN10SmartDryer10ledControlEv+0x66>
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00b      	beq.n	8006766 <_ZN10SmartDryer10ledControlEv+0x3a>
 800674e:	e075      	b.n	800683c <_ZN10SmartDryer10ledControlEv+0x110>
 8006750:	f240 12f5 	movw	r2, #501	; 0x1f5
 8006754:	4293      	cmp	r3, r2
 8006756:	d037      	beq.n	80067c8 <_ZN10SmartDryer10ledControlEv+0x9c>
 8006758:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 800675c:	d051      	beq.n	8006802 <_ZN10SmartDryer10ledControlEv+0xd6>
 800675e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006762:	d02c      	beq.n	80067be <_ZN10SmartDryer10ledControlEv+0x92>
 8006764:	e06a      	b.n	800683c <_ZN10SmartDryer10ledControlEv+0x110>
	{
		case THERMO_ON_FAN_OFF:
			blinkLed(RED_LED, THERMO_ON_LED_BLINK_DELAY);
 8006766:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800676a:	2100      	movs	r1, #0
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f7ff ff31 	bl	80065d4 <_ZN10SmartDryer8blinkLedEht>
			turnOffLed(GREEN_LED);
 8006772:	2101      	movs	r1, #1
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f7ff ffb3 	bl	80066e0 <_ZN10SmartDryer10turnOffLedEh>
			break;
 800677a:	e06c      	b.n	8006856 <_ZN10SmartDryer10ledControlEv+0x12a>
		case THERMO_OFF_FAN_ON:
			turnOffLed(RED_LED);
 800677c:	2100      	movs	r1, #0
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7ff ffae 	bl	80066e0 <_ZN10SmartDryer10turnOffLedEh>
			blinkLed(GREEN_LED, FAN_ON_LED_BLINK_DELAY);
 8006784:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006788:	2101      	movs	r1, #1
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7ff ff22 	bl	80065d4 <_ZN10SmartDryer8blinkLedEht>
			break;
 8006790:	e061      	b.n	8006856 <_ZN10SmartDryer10ledControlEv+0x12a>
		case THERMO_OFF_FAN_OFF:
			turnOffLed(GREEN_LED);
 8006792:	2101      	movs	r1, #1
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f7ff ffa3 	bl	80066e0 <_ZN10SmartDryer10turnOffLedEh>
			turnOffLed(RED_LED);
 800679a:	2100      	movs	r1, #0
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f7ff ff9f 	bl	80066e0 <_ZN10SmartDryer10turnOffLedEh>
			break;
 80067a2:	e058      	b.n	8006856 <_ZN10SmartDryer10ledControlEv+0x12a>
		case THERMO_ON_FAN_ON:
			blinkLed(RED_LED, THERMO_ON_LED_BLINK_DELAY);
 80067a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80067a8:	2100      	movs	r1, #0
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7ff ff12 	bl	80065d4 <_ZN10SmartDryer8blinkLedEht>
			blinkLed(GREEN_LED, FAN_ON_LED_BLINK_DELAY);
 80067b0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80067b4:	2101      	movs	r1, #1
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7ff ff0c 	bl	80065d4 <_ZN10SmartDryer8blinkLedEht>
			break;
 80067bc:	e04b      	b.n	8006856 <_ZN10SmartDryer10ledControlEv+0x12a>
		case TEMP_REACHED:
			turnOnLed(RED_LED);
 80067be:	2100      	movs	r1, #0
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f7ff ff67 	bl	8006694 <_ZN10SmartDryer9turnOnLedEh>
//			HAL_Delay(250);
//			ledStatus = UNKNOWN_STATE;
			break;
 80067c6:	e046      	b.n	8006856 <_ZN10SmartDryer10ledControlEv+0x12a>
		case PROGRAM_INIT:
			for(int i = 0; i < 50*10; i++)
 80067c8:	2300      	movs	r3, #0
 80067ca:	60fb      	str	r3, [r7, #12]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80067d2:	da10      	bge.n	80067f6 <_ZN10SmartDryer10ledControlEv+0xca>
			{
				blinkLed(RED_LED, 50);
 80067d4:	2232      	movs	r2, #50	; 0x32
 80067d6:	2100      	movs	r1, #0
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f7ff fefb 	bl	80065d4 <_ZN10SmartDryer8blinkLedEht>
				blinkLed(GREEN_LED, 50);
 80067de:	2232      	movs	r2, #50	; 0x32
 80067e0:	2101      	movs	r1, #1
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f7ff fef6 	bl	80065d4 <_ZN10SmartDryer8blinkLedEht>
				HAL_Delay(1);
 80067e8:	2001      	movs	r0, #1
 80067ea:	f005 ff57 	bl	800c69c <HAL_Delay>
			for(int i = 0; i < 50*10; i++)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	3301      	adds	r3, #1
 80067f2:	60fb      	str	r3, [r7, #12]
 80067f4:	e7ea      	b.n	80067cc <_ZN10SmartDryer10ledControlEv+0xa0>
			};
			ledStatus = UNKNOWN_STATE;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f240 12f7 	movw	r2, #503	; 0x1f7
 80067fc:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
			break;
 8006800:	e029      	b.n	8006856 <_ZN10SmartDryer10ledControlEv+0x12a>
		case PROGRAM_END:
			for(int i = 0; i < 50*20; i++)
 8006802:	2300      	movs	r3, #0
 8006804:	60bb      	str	r3, [r7, #8]
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800680c:	da10      	bge.n	8006830 <_ZN10SmartDryer10ledControlEv+0x104>
			{
				blinkLed(RED_LED, 50);
 800680e:	2232      	movs	r2, #50	; 0x32
 8006810:	2100      	movs	r1, #0
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7ff fede 	bl	80065d4 <_ZN10SmartDryer8blinkLedEht>
				blinkLed(GREEN_LED, 50);
 8006818:	2232      	movs	r2, #50	; 0x32
 800681a:	2101      	movs	r1, #1
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f7ff fed9 	bl	80065d4 <_ZN10SmartDryer8blinkLedEht>
				HAL_Delay(1);
 8006822:	2001      	movs	r0, #1
 8006824:	f005 ff3a 	bl	800c69c <HAL_Delay>
			for(int i = 0; i < 50*20; i++)
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	3301      	adds	r3, #1
 800682c:	60bb      	str	r3, [r7, #8]
 800682e:	e7ea      	b.n	8006806 <_ZN10SmartDryer10ledControlEv+0xda>
			};
			ledStatus = UNKNOWN_STATE;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f240 12f7 	movw	r2, #503	; 0x1f7
 8006836:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
			break;
 800683a:	e00c      	b.n	8006856 <_ZN10SmartDryer10ledControlEv+0x12a>
		case UNKNOWN_STATE:
		default:
			blinkLed(RED_LED, 1000);
 800683c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006840:	2100      	movs	r1, #0
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f7ff fec6 	bl	80065d4 <_ZN10SmartDryer8blinkLedEht>
			blinkLed(GREEN_LED, 1000);
 8006848:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800684c:	2101      	movs	r1, #1
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7ff fec0 	bl	80065d4 <_ZN10SmartDryer8blinkLedEht>
			break;
 8006854:	bf00      	nop
	}
	switch (statusParam->backlightStatus)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800685a:	7adb      	ldrb	r3, [r3, #11]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d010      	beq.n	8006882 <_ZN10SmartDryer10ledControlEv+0x156>
 8006860:	2b02      	cmp	r3, #2
 8006862:	d01a      	beq.n	800689a <_ZN10SmartDryer10ledControlEv+0x16e>
 8006864:	2b00      	cmp	r3, #0
 8006866:	d000      	beq.n	800686a <_ZN10SmartDryer10ledControlEv+0x13e>
			{
				HAL_GPIO_WritePin(LCD_Led_GPIO_Port, LCD_Led_Pin, GPIO_PIN_SET);
			}
			break;
		default:
			break;
 8006868:	e02f      	b.n	80068ca <_ZN10SmartDryer10ledControlEv+0x19e>
			HAL_GPIO_WritePin(LCD_Led_GPIO_Port, LCD_Led_Pin, GPIO_PIN_RESET);
 800686a:	2200      	movs	r2, #0
 800686c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006870:	4818      	ldr	r0, [pc, #96]	; (80068d4 <_ZN10SmartDryer10ledControlEv+0x1a8>)
 8006872:	f007 f99f 	bl	800dbb4 <HAL_GPIO_WritePin>
			lcdLedAutoOffTimer->restart();
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687a:	4618      	mov	r0, r3
 800687c:	f7fc fe3b 	bl	80034f6 <_ZN11ChronoTimer7restartEv>
			break;
 8006880:	e023      	b.n	80068ca <_ZN10SmartDryer10ledControlEv+0x19e>
			HAL_GPIO_WritePin(LCD_Led_GPIO_Port, LCD_Led_Pin, GPIO_PIN_SET);
 8006882:	2201      	movs	r2, #1
 8006884:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006888:	4812      	ldr	r0, [pc, #72]	; (80068d4 <_ZN10SmartDryer10ledControlEv+0x1a8>)
 800688a:	f007 f993 	bl	800dbb4 <HAL_GPIO_WritePin>
			lcdLedAutoOffTimer->restart();
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006892:	4618      	mov	r0, r3
 8006894:	f7fc fe2f 	bl	80034f6 <_ZN11ChronoTimer7restartEv>
			break;
 8006898:	e017      	b.n	80068ca <_ZN10SmartDryer10ledControlEv+0x19e>
			if(lcdLedAutoOffTimer->isFinished(false, 10))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689e:	220a      	movs	r2, #10
 80068a0:	2100      	movs	r1, #0
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7fc fe35 	bl	8003512 <_ZN11ChronoTimer10isFinishedEbm>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d006      	beq.n	80068bc <_ZN10SmartDryer10ledControlEv+0x190>
				HAL_GPIO_WritePin(LCD_Led_GPIO_Port, LCD_Led_Pin, GPIO_PIN_RESET);
 80068ae:	2200      	movs	r2, #0
 80068b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80068b4:	4807      	ldr	r0, [pc, #28]	; (80068d4 <_ZN10SmartDryer10ledControlEv+0x1a8>)
 80068b6:	f007 f97d 	bl	800dbb4 <HAL_GPIO_WritePin>
			break;
 80068ba:	e005      	b.n	80068c8 <_ZN10SmartDryer10ledControlEv+0x19c>
				HAL_GPIO_WritePin(LCD_Led_GPIO_Port, LCD_Led_Pin, GPIO_PIN_SET);
 80068bc:	2201      	movs	r2, #1
 80068be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80068c2:	4804      	ldr	r0, [pc, #16]	; (80068d4 <_ZN10SmartDryer10ledControlEv+0x1a8>)
 80068c4:	f007 f976 	bl	800dbb4 <HAL_GPIO_WritePin>
			break;
 80068c8:	bf00      	nop
	}
}
 80068ca:	bf00      	nop
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	40010c00 	.word	0x40010c00

080068d8 <_ZN10SmartDryer16thermoRegulationEf>:

void SmartDryer::thermoRegulation(float WichTemp)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b086      	sub	sp, #24
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
	uint32_t ReadedTemp = 0;
 80068e2:	2300      	movs	r3, #0
 80068e4:	617b      	str	r3, [r7, #20]
	uint32_t TempTarget = (uint32_t)roundf(WichTemp * 10);
 80068e6:	497e      	ldr	r1, [pc, #504]	; (8006ae0 <_ZN10SmartDryer16thermoRegulationEf+0x208>)
 80068e8:	6838      	ldr	r0, [r7, #0]
 80068ea:	f7fa f965 	bl	8000bb8 <__aeabi_fmul>
 80068ee:	4603      	mov	r3, r0
 80068f0:	4618      	mov	r0, r3
 80068f2:	f00b f921 	bl	8011b38 <roundf>
 80068f6:	4603      	mov	r3, r0
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7fa faad 	bl	8000e58 <__aeabi_f2uiz>
 80068fe:	4603      	mov	r3, r0
 8006900:	60fb      	str	r3, [r7, #12]
	bool Reading = false;
 8006902:	2300      	movs	r3, #0
 8006904:	74fb      	strb	r3, [r7, #19]
	if(statusParam->dryerOn)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 80a7 	beq.w	8006a60 <_ZN10SmartDryer16thermoRegulationEf+0x188>
	{
		if(getTempTimer->isFinished(true, 750))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	f240 22ee 	movw	r2, #750	; 0x2ee
 800691a:	2101      	movs	r1, #1
 800691c:	4618      	mov	r0, r3
 800691e:	f7fc fdf8 	bl	8003512 <_ZN11ChronoTimer10isFinishedEbm>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d024      	beq.n	8006972 <_ZN10SmartDryer16thermoRegulationEf+0x9a>
		{
			chamberTemperature.readedValueFL = tempSens->getTemperature();
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	4618      	mov	r0, r3
 800692e:	f005 fd06 	bl	800c33e <_ZN13THERMO_SENSOR14getTemperatureEv>
 8006932:	4602      	mov	r2, r0
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			chamberHumity.readedValueFL = tempSens->getHumidity();
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	4618      	mov	r0, r3
 8006940:	f005 fce9 	bl	800c316 <_ZN13THERMO_SENSOR11getHumidityEv>
 8006944:	4602      	mov	r2, r0
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			ReadedTemp = (uint32_t)roundf(chamberTemperature.readedValueFL * 10);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006952:	4963      	ldr	r1, [pc, #396]	; (8006ae0 <_ZN10SmartDryer16thermoRegulationEf+0x208>)
 8006954:	4618      	mov	r0, r3
 8006956:	f7fa f92f 	bl	8000bb8 <__aeabi_fmul>
 800695a:	4603      	mov	r3, r0
 800695c:	4618      	mov	r0, r3
 800695e:	f00b f8eb 	bl	8011b38 <roundf>
 8006962:	4603      	mov	r3, r0
 8006964:	4618      	mov	r0, r3
 8006966:	f7fa fa77 	bl	8000e58 <__aeabi_f2uiz>
 800696a:	4603      	mov	r3, r0
 800696c:	617b      	str	r3, [r7, #20]
			Reading = true;
 800696e:	2301      	movs	r3, #1
 8006970:	74fb      	strb	r3, [r7, #19]
		}
		if(ReadedTemp != 0 && Reading)
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	2b00      	cmp	r3, #0
 8006976:	f000 80af 	beq.w	8006ad8 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 800697a:	7cfb      	ldrb	r3, [r7, #19]
 800697c:	2b00      	cmp	r3, #0
 800697e:	f000 80ab 	beq.w	8006ad8 <_ZN10SmartDryer16thermoRegulationEf+0x200>
		{
			if(ReadedTemp >= TempTarget - TOLLERANCE_DEGREES)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	3b37      	subs	r3, #55	; 0x37
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	429a      	cmp	r2, r3
 800698a:	d31b      	bcc.n	80069c4 <_ZN10SmartDryer16thermoRegulationEf+0xec>
			{
				statusParam->fanOn = true;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006990:	2201      	movs	r2, #1
 8006992:	709a      	strb	r2, [r3, #2]
				statusParam->thermoOn = true;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006998:	2201      	movs	r2, #1
 800699a:	705a      	strb	r2, [r3, #1]
				if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 80069a2:	f240 12f5 	movw	r2, #501	; 0x1f5
 80069a6:	4293      	cmp	r3, r2
 80069a8:	f000 8096 	beq.w	8006ad8 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 80069b2:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 80069b6:	f000 808f 	beq.w	8006ad8 <_ZN10SmartDryer16thermoRegulationEf+0x200>
					ledStatus = THERMO_ON_FAN_ON;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2203      	movs	r2, #3
 80069be:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		{
			chamberTemperature.readedValueFL = tempSens->getTemperature();
			chamberHumity.readedValueFL = tempSens->getHumidity();
		}
	}
}
 80069c2:	e089      	b.n	8006ad8 <_ZN10SmartDryer16thermoRegulationEf+0x200>
			else if(ReadedTemp >= TempTarget)
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d324      	bcc.n	8006a16 <_ZN10SmartDryer16thermoRegulationEf+0x13e>
				statusParam->fanOn = true;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069d0:	2201      	movs	r2, #1
 80069d2:	709a      	strb	r2, [r3, #2]
				statusParam->thermoOn = false;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069d8:	2200      	movs	r2, #0
 80069da:	705a      	strb	r2, [r3, #1]
				ledStatus = TEMP_REACHED;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80069e2:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
				if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END && ledStatus != TEMP_REACHED)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 80069ec:	f240 12f5 	movw	r2, #501	; 0x1f5
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d071      	beq.n	8006ad8 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 80069fa:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 80069fe:	d06b      	beq.n	8006ad8 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8006a06:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006a0a:	d065      	beq.n	8006ad8 <_ZN10SmartDryer16thermoRegulationEf+0x200>
					ledStatus = THERMO_OFF_FAN_ON;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
}
 8006a14:	e060      	b.n	8006ad8 <_ZN10SmartDryer16thermoRegulationEf+0x200>
			else if(ReadedTemp < TempTarget - TOLLERANCE_DEGREES)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	3b37      	subs	r3, #55	; 0x37
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d25b      	bcs.n	8006ad8 <_ZN10SmartDryer16thermoRegulationEf+0x200>
				statusParam->fanOn = false;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a24:	2200      	movs	r2, #0
 8006a26:	709a      	strb	r2, [r3, #2]
				statusParam->thermoOn = true;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	705a      	strb	r2, [r3, #1]
				if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END && ledStatus != TEMP_REACHED)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8006a36:	f240 12f5 	movw	r2, #501	; 0x1f5
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d04c      	beq.n	8006ad8 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8006a44:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8006a48:	d046      	beq.n	8006ad8 <_ZN10SmartDryer16thermoRegulationEf+0x200>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8006a50:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006a54:	d040      	beq.n	8006ad8 <_ZN10SmartDryer16thermoRegulationEf+0x200>
					ledStatus = THERMO_ON_FAN_OFF;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
}
 8006a5e:	e03b      	b.n	8006ad8 <_ZN10SmartDryer16thermoRegulationEf+0x200>
		statusParam->fanOn = false;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a64:	2200      	movs	r2, #0
 8006a66:	709a      	strb	r2, [r3, #2]
		statusParam->thermoOn = false;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	705a      	strb	r2, [r3, #1]
		if(ledStatus != PROGRAM_INIT && ledStatus != PROGRAM_END && ledStatus != TEMP_REACHED)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8006a76:	f240 12f5 	movw	r2, #501	; 0x1f5
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d00f      	beq.n	8006a9e <_ZN10SmartDryer16thermoRegulationEf+0x1c6>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8006a84:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8006a88:	d009      	beq.n	8006a9e <_ZN10SmartDryer16thermoRegulationEf+0x1c6>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8006a90:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006a94:	d003      	beq.n	8006a9e <_ZN10SmartDryer16thermoRegulationEf+0x1c6>
			ledStatus = THERMO_OFF_FAN_OFF;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2202      	movs	r2, #2
 8006a9a:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		if(getTempTimer->isFinished(true, 750))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	69db      	ldr	r3, [r3, #28]
 8006aa2:	f240 22ee 	movw	r2, #750	; 0x2ee
 8006aa6:	2101      	movs	r1, #1
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7fc fd32 	bl	8003512 <_ZN11ChronoTimer10isFinishedEbm>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d011      	beq.n	8006ad8 <_ZN10SmartDryer16thermoRegulationEf+0x200>
			chamberTemperature.readedValueFL = tempSens->getTemperature();
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f005 fc40 	bl	800c33e <_ZN13THERMO_SENSOR14getTemperatureEv>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			chamberHumity.readedValueFL = tempSens->getHumidity();
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	4618      	mov	r0, r3
 8006acc:	f005 fc23 	bl	800c316 <_ZN13THERMO_SENSOR11getHumidityEv>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 8006ad8:	bf00      	nop
 8006ada:	3718      	adds	r7, #24
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	41200000 	.word	0x41200000

08006ae4 <_ZN10SmartDryer16physicalReleCtrlEv>:

void SmartDryer::physicalReleCtrl()
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
	if(statusParam->dryerOn)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d024      	beq.n	8006b40 <_ZN10SmartDryer16physicalReleCtrlEv+0x5c>
	{
		if(statusParam->fanOn)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006afa:	789b      	ldrb	r3, [r3, #2]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d006      	beq.n	8006b0e <_ZN10SmartDryer16physicalReleCtrlEv+0x2a>
		{
			fanCtrl->setState(HIGH);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	2101      	movs	r1, #1
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7fe fdeb 	bl	80056e2 <_ZN4RELE8setStateE9PIN_STATE>
 8006b0c:	e005      	b.n	8006b1a <_ZN10SmartDryer16physicalReleCtrlEv+0x36>
		}
		else
		{
			fanCtrl->setState(LOW);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	2100      	movs	r1, #0
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7fe fde4 	bl	80056e2 <_ZN4RELE8setStateE9PIN_STATE>
		}
		if(statusParam->thermoOn)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b1e:	785b      	ldrb	r3, [r3, #1]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d006      	beq.n	8006b32 <_ZN10SmartDryer16physicalReleCtrlEv+0x4e>
		{
			thermoCtrl->setState(HIGH);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	695b      	ldr	r3, [r3, #20]
 8006b28:	2101      	movs	r1, #1
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7fe fdd9 	bl	80056e2 <_ZN4RELE8setStateE9PIN_STATE>
	else
	{
		fanCtrl->setState(LOW);
		thermoCtrl->setState(LOW);
	}
}
 8006b30:	e012      	b.n	8006b58 <_ZN10SmartDryer16physicalReleCtrlEv+0x74>
			thermoCtrl->setState(LOW);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	2100      	movs	r1, #0
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7fe fdd2 	bl	80056e2 <_ZN4RELE8setStateE9PIN_STATE>
}
 8006b3e:	e00b      	b.n	8006b58 <_ZN10SmartDryer16physicalReleCtrlEv+0x74>
		fanCtrl->setState(LOW);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	2100      	movs	r1, #0
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fe fdcb 	bl	80056e2 <_ZN4RELE8setStateE9PIN_STATE>
		thermoCtrl->setState(LOW);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	695b      	ldr	r3, [r3, #20]
 8006b50:	2100      	movs	r1, #0
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7fe fdc5 	bl	80056e2 <_ZN4RELE8setStateE9PIN_STATE>
}
 8006b58:	bf00      	nop
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <_ZN10SmartDryer18peripheralsControlEv>:

void SmartDryer::peripheralsControl()
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
	thermoRegulation(statusParam->temperatureSetted);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	4619      	mov	r1, r3
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f7ff feb1 	bl	80068d8 <_ZN10SmartDryer16thermoRegulationEf>
	physicalReleCtrl();
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7ff ffb4 	bl	8006ae4 <_ZN10SmartDryer16physicalReleCtrlEv>
	ledControl();
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f7ff fdd5 	bl	800672c <_ZN10SmartDryer10ledControlEv>
}
 8006b82:	bf00      	nop
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>:


void SmartDryer::showTimeDate(String &Time, String &Date)
{
 8006b8a:	b590      	push	{r4, r7, lr}
 8006b8c:	b09d      	sub	sp, #116	; 0x74
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	60f8      	str	r0, [r7, #12]
 8006b92:	60b9      	str	r1, [r7, #8]
 8006b94:	607a      	str	r2, [r7, #4]
	if(takeTimeTimer->isFinished(true, 500))
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b9a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006b9e:	2101      	movs	r1, #1
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7fc fcb6 	bl	8003512 <_ZN11ChronoTimer10isFinishedEbm>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d025      	beq.n	8006bf8 <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0x6e>
	{
		Time = clock->getTimeDateStr(DS1307_RTC::ONLY_TIME_NO_SEC);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6859      	ldr	r1, [r3, #4]
 8006bb0:	f107 0310 	add.w	r3, r7, #16
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fc ff10 	bl	80039dc <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh>
 8006bbc:	f107 0310 	add.w	r3, r7, #16
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	68b8      	ldr	r0, [r7, #8]
 8006bc4:	f00a fd87 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8006bc8:	f107 0310 	add.w	r3, r7, #16
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f00a fd76 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		Date = clock->getTimeDateStr(DS1307_RTC::ONLY_DATE_NO_YEAR);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6859      	ldr	r1, [r3, #4]
 8006bd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006bda:	2203      	movs	r2, #3
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7fc fefd 	bl	80039dc <_ZN10DS1307_RTC14getTimeDateStrB5cxx11Eh>
 8006be2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006be6:	4619      	mov	r1, r3
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f00a fd74 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8006bee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f00a fd63 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	}
	display->drawTimeDate(Time, Date);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681c      	ldr	r4, [r3, #0]
 8006bfc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006c00:	68b9      	ldr	r1, [r7, #8]
 8006c02:	4618      	mov	r0, r3
 8006c04:	f00a febf 	bl	8011986 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8006c08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006c0c:	6879      	ldr	r1, [r7, #4]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f00a feb9 	bl	8011986 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8006c14:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006c18:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f7fe f9f4 	bl	800500c <_ZN13NHDST7565_LCD12drawTimeDateENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>
 8006c24:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f00a fd48 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006c2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006c32:	4618      	mov	r0, r3
 8006c34:	f00a fd43 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8006c38:	bf00      	nop
 8006c3a:	3774      	adds	r7, #116	; 0x74
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd90      	pop	{r4, r7, pc}

08006c40 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>:

void SmartDryer::writeDefaultsDryerProgram(uint8_t WichProgram)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	460b      	mov	r3, r1
 8006c4a:	70fb      	strb	r3, [r7, #3]
	dryerPrograms[WichProgram].programSetted = false;
 8006c4c:	78fa      	ldrb	r2, [r7, #3]
 8006c4e:	6879      	ldr	r1, [r7, #4]
 8006c50:	4613      	mov	r3, r2
 8006c52:	005b      	lsls	r3, r3, #1
 8006c54:	4413      	add	r3, r2
 8006c56:	00db      	lsls	r3, r3, #3
 8006c58:	440b      	add	r3, r1
 8006c5a:	334c      	adds	r3, #76	; 0x4c
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.second = 0;
 8006c60:	78fa      	ldrb	r2, [r7, #3]
 8006c62:	6879      	ldr	r1, [r7, #4]
 8006c64:	4613      	mov	r3, r2
 8006c66:	005b      	lsls	r3, r3, #1
 8006c68:	4413      	add	r3, r2
 8006c6a:	00db      	lsls	r3, r3, #3
 8006c6c:	440b      	add	r3, r1
 8006c6e:	334e      	adds	r3, #78	; 0x4e
 8006c70:	2200      	movs	r2, #0
 8006c72:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.minute = 0;
 8006c74:	78fa      	ldrb	r2, [r7, #3]
 8006c76:	6879      	ldr	r1, [r7, #4]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	005b      	lsls	r3, r3, #1
 8006c7c:	4413      	add	r3, r2
 8006c7e:	00db      	lsls	r3, r3, #3
 8006c80:	440b      	add	r3, r1
 8006c82:	334f      	adds	r3, #79	; 0x4f
 8006c84:	2200      	movs	r2, #0
 8006c86:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.hour = 0;
 8006c88:	78fa      	ldrb	r2, [r7, #3]
 8006c8a:	6879      	ldr	r1, [r7, #4]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	005b      	lsls	r3, r3, #1
 8006c90:	4413      	add	r3, r2
 8006c92:	00db      	lsls	r3, r3, #3
 8006c94:	440b      	add	r3, r1
 8006c96:	3350      	adds	r3, #80	; 0x50
 8006c98:	2200      	movs	r2, #0
 8006c9a:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.day = 1;
 8006c9c:	78fa      	ldrb	r2, [r7, #3]
 8006c9e:	6879      	ldr	r1, [r7, #4]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	005b      	lsls	r3, r3, #1
 8006ca4:	4413      	add	r3, r2
 8006ca6:	00db      	lsls	r3, r3, #3
 8006ca8:	440b      	add	r3, r1
 8006caa:	3351      	adds	r3, #81	; 0x51
 8006cac:	2201      	movs	r2, #1
 8006cae:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.month = 1;
 8006cb0:	78fa      	ldrb	r2, [r7, #3]
 8006cb2:	6879      	ldr	r1, [r7, #4]
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	005b      	lsls	r3, r3, #1
 8006cb8:	4413      	add	r3, r2
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	440b      	add	r3, r1
 8006cbe:	3352      	adds	r3, #82	; 0x52
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.year = 2020;
 8006cc4:	78fa      	ldrb	r2, [r7, #3]
 8006cc6:	6879      	ldr	r1, [r7, #4]
 8006cc8:	4613      	mov	r3, r2
 8006cca:	005b      	lsls	r3, r3, #1
 8006ccc:	4413      	add	r3, r2
 8006cce:	00db      	lsls	r3, r3, #3
 8006cd0:	440b      	add	r3, r1
 8006cd2:	3354      	adds	r3, #84	; 0x54
 8006cd4:	f240 72e4 	movw	r2, #2020	; 0x7e4
 8006cd8:	801a      	strh	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.second = 0;
 8006cda:	78fa      	ldrb	r2, [r7, #3]
 8006cdc:	6879      	ldr	r1, [r7, #4]
 8006cde:	4613      	mov	r3, r2
 8006ce0:	005b      	lsls	r3, r3, #1
 8006ce2:	4413      	add	r3, r2
 8006ce4:	00db      	lsls	r3, r3, #3
 8006ce6:	440b      	add	r3, r1
 8006ce8:	3356      	adds	r3, #86	; 0x56
 8006cea:	2200      	movs	r2, #0
 8006cec:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.minute = 10;
 8006cee:	78fa      	ldrb	r2, [r7, #3]
 8006cf0:	6879      	ldr	r1, [r7, #4]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	005b      	lsls	r3, r3, #1
 8006cf6:	4413      	add	r3, r2
 8006cf8:	00db      	lsls	r3, r3, #3
 8006cfa:	440b      	add	r3, r1
 8006cfc:	3357      	adds	r3, #87	; 0x57
 8006cfe:	220a      	movs	r2, #10
 8006d00:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.hour = 0;
 8006d02:	78fa      	ldrb	r2, [r7, #3]
 8006d04:	6879      	ldr	r1, [r7, #4]
 8006d06:	4613      	mov	r3, r2
 8006d08:	005b      	lsls	r3, r3, #1
 8006d0a:	4413      	add	r3, r2
 8006d0c:	00db      	lsls	r3, r3, #3
 8006d0e:	440b      	add	r3, r1
 8006d10:	3358      	adds	r3, #88	; 0x58
 8006d12:	2200      	movs	r2, #0
 8006d14:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.day = 1;
 8006d16:	78fa      	ldrb	r2, [r7, #3]
 8006d18:	6879      	ldr	r1, [r7, #4]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	005b      	lsls	r3, r3, #1
 8006d1e:	4413      	add	r3, r2
 8006d20:	00db      	lsls	r3, r3, #3
 8006d22:	440b      	add	r3, r1
 8006d24:	3359      	adds	r3, #89	; 0x59
 8006d26:	2201      	movs	r2, #1
 8006d28:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.month = 1;
 8006d2a:	78fa      	ldrb	r2, [r7, #3]
 8006d2c:	6879      	ldr	r1, [r7, #4]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	005b      	lsls	r3, r3, #1
 8006d32:	4413      	add	r3, r2
 8006d34:	00db      	lsls	r3, r3, #3
 8006d36:	440b      	add	r3, r1
 8006d38:	335a      	adds	r3, #90	; 0x5a
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.year = 2020;
 8006d3e:	78fa      	ldrb	r2, [r7, #3]
 8006d40:	6879      	ldr	r1, [r7, #4]
 8006d42:	4613      	mov	r3, r2
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	4413      	add	r3, r2
 8006d48:	00db      	lsls	r3, r3, #3
 8006d4a:	440b      	add	r3, r1
 8006d4c:	335c      	adds	r3, #92	; 0x5c
 8006d4e:	f240 72e4 	movw	r2, #2020	; 0x7e4
 8006d52:	801a      	strh	r2, [r3, #0]
	dryerPrograms[WichProgram].tempSetted = 30.0;
 8006d54:	78fa      	ldrb	r2, [r7, #3]
 8006d56:	6879      	ldr	r1, [r7, #4]
 8006d58:	4613      	mov	r3, r2
 8006d5a:	005b      	lsls	r3, r3, #1
 8006d5c:	4413      	add	r3, r2
 8006d5e:	00db      	lsls	r3, r3, #3
 8006d60:	440b      	add	r3, r1
 8006d62:	3360      	adds	r3, #96	; 0x60
 8006d64:	4a03      	ldr	r2, [pc, #12]	; (8006d74 <_ZN10SmartDryer25writeDefaultsDryerProgramEh+0x134>)
 8006d66:	601a      	str	r2, [r3, #0]
}
 8006d68:	bf00      	nop
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bc80      	pop	{r7}
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	41f00000 	.word	0x41f00000

08006d78 <_ZN10SmartDryer16saveDryerProgramEh>:

void SmartDryer::saveDryerProgram(uint8_t WichProgram)
{
 8006d78:	b590      	push	{r4, r7, lr}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	460b      	mov	r3, r1
 8006d82:	70fb      	strb	r3, [r7, #3]
	const uint8_t MAX_DRYER_VAR = 14;
 8006d84:	230e      	movs	r3, #14
 8006d86:	73fb      	strb	r3, [r7, #15]
	uint32_t TempToSave = 0;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	60bb      	str	r3, [r7, #8]
	TempToSave = (uint32_t)dryerPrograms[WichProgram].tempSetted;
 8006d8c:	78fa      	ldrb	r2, [r7, #3]
 8006d8e:	6879      	ldr	r1, [r7, #4]
 8006d90:	4613      	mov	r3, r2
 8006d92:	005b      	lsls	r3, r3, #1
 8006d94:	4413      	add	r3, r2
 8006d96:	00db      	lsls	r3, r3, #3
 8006d98:	440b      	add	r3, r1
 8006d9a:	3360      	adds	r3, #96	; 0x60
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7fa f85a 	bl	8000e58 <__aeabi_f2uiz>
 8006da4:	4603      	mov	r3, r0
 8006da6:	60bb      	str	r3, [r7, #8]
	memory->writeToMemory(SETTED_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].programSetted, NO_MEM_TRANSFER);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6998      	ldr	r0, [r3, #24]
 8006dac:	78fb      	ldrb	r3, [r7, #3]
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	461a      	mov	r2, r3
 8006db2:	00d2      	lsls	r2, r2, #3
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	005b      	lsls	r3, r3, #1
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	3301      	adds	r3, #1
 8006dbc:	b29c      	uxth	r4, r3
 8006dbe:	78fa      	ldrb	r2, [r7, #3]
 8006dc0:	6879      	ldr	r1, [r7, #4]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	005b      	lsls	r3, r3, #1
 8006dc6:	4413      	add	r3, r2
 8006dc8:	00db      	lsls	r3, r3, #3
 8006dca:	440b      	add	r3, r1
 8006dcc:	334c      	adds	r3, #76	; 0x4c
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	4621      	mov	r1, r4
 8006dd6:	f7fe fb08 	bl	80053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.second, NO_MEM_TRANSFER);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6998      	ldr	r0, [r3, #24]
 8006dde:	78fb      	ldrb	r3, [r7, #3]
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	461a      	mov	r2, r3
 8006de4:	00d2      	lsls	r2, r2, #3
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	005b      	lsls	r3, r3, #1
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	3302      	adds	r3, #2
 8006dee:	b29c      	uxth	r4, r3
 8006df0:	78fa      	ldrb	r2, [r7, #3]
 8006df2:	6879      	ldr	r1, [r7, #4]
 8006df4:	4613      	mov	r3, r2
 8006df6:	005b      	lsls	r3, r3, #1
 8006df8:	4413      	add	r3, r2
 8006dfa:	00db      	lsls	r3, r3, #3
 8006dfc:	440b      	add	r3, r1
 8006dfe:	334e      	adds	r3, #78	; 0x4e
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	461a      	mov	r2, r3
 8006e04:	2300      	movs	r3, #0
 8006e06:	4621      	mov	r1, r4
 8006e08:	f7fe faef 	bl	80053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.minute, NO_MEM_TRANSFER);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6998      	ldr	r0, [r3, #24]
 8006e10:	78fb      	ldrb	r3, [r7, #3]
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	461a      	mov	r2, r3
 8006e16:	00d2      	lsls	r2, r2, #3
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	005b      	lsls	r3, r3, #1
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	3303      	adds	r3, #3
 8006e20:	b29c      	uxth	r4, r3
 8006e22:	78fa      	ldrb	r2, [r7, #3]
 8006e24:	6879      	ldr	r1, [r7, #4]
 8006e26:	4613      	mov	r3, r2
 8006e28:	005b      	lsls	r3, r3, #1
 8006e2a:	4413      	add	r3, r2
 8006e2c:	00db      	lsls	r3, r3, #3
 8006e2e:	440b      	add	r3, r1
 8006e30:	334f      	adds	r3, #79	; 0x4f
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	461a      	mov	r2, r3
 8006e36:	2300      	movs	r3, #0
 8006e38:	4621      	mov	r1, r4
 8006e3a:	f7fe fad6 	bl	80053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.hour, NO_MEM_TRANSFER);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6998      	ldr	r0, [r3, #24]
 8006e42:	78fb      	ldrb	r3, [r7, #3]
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	461a      	mov	r2, r3
 8006e48:	00d2      	lsls	r2, r2, #3
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	005b      	lsls	r3, r3, #1
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	3304      	adds	r3, #4
 8006e52:	b29c      	uxth	r4, r3
 8006e54:	78fa      	ldrb	r2, [r7, #3]
 8006e56:	6879      	ldr	r1, [r7, #4]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	005b      	lsls	r3, r3, #1
 8006e5c:	4413      	add	r3, r2
 8006e5e:	00db      	lsls	r3, r3, #3
 8006e60:	440b      	add	r3, r1
 8006e62:	3350      	adds	r3, #80	; 0x50
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	461a      	mov	r2, r3
 8006e68:	2300      	movs	r3, #0
 8006e6a:	4621      	mov	r1, r4
 8006e6c:	f7fe fabd 	bl	80053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.day, NO_MEM_TRANSFER);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6998      	ldr	r0, [r3, #24]
 8006e74:	78fb      	ldrb	r3, [r7, #3]
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	461a      	mov	r2, r3
 8006e7a:	00d2      	lsls	r2, r2, #3
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	005b      	lsls	r3, r3, #1
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	3305      	adds	r3, #5
 8006e84:	b29c      	uxth	r4, r3
 8006e86:	78fa      	ldrb	r2, [r7, #3]
 8006e88:	6879      	ldr	r1, [r7, #4]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	005b      	lsls	r3, r3, #1
 8006e8e:	4413      	add	r3, r2
 8006e90:	00db      	lsls	r3, r3, #3
 8006e92:	440b      	add	r3, r1
 8006e94:	3351      	adds	r3, #81	; 0x51
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	461a      	mov	r2, r3
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	4621      	mov	r1, r4
 8006e9e:	f7fe faa4 	bl	80053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.month, NO_MEM_TRANSFER);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6998      	ldr	r0, [r3, #24]
 8006ea6:	78fb      	ldrb	r3, [r7, #3]
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	461a      	mov	r2, r3
 8006eac:	00d2      	lsls	r2, r2, #3
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	005b      	lsls	r3, r3, #1
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	3306      	adds	r3, #6
 8006eb6:	b29c      	uxth	r4, r3
 8006eb8:	78fa      	ldrb	r2, [r7, #3]
 8006eba:	6879      	ldr	r1, [r7, #4]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	005b      	lsls	r3, r3, #1
 8006ec0:	4413      	add	r3, r2
 8006ec2:	00db      	lsls	r3, r3, #3
 8006ec4:	440b      	add	r3, r1
 8006ec6:	3352      	adds	r3, #82	; 0x52
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	2300      	movs	r3, #0
 8006ece:	4621      	mov	r1, r4
 8006ed0:	f7fe fa8b 	bl	80053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(START_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].startTime.year, NO_MEM_TRANSFER);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6998      	ldr	r0, [r3, #24]
 8006ed8:	78fb      	ldrb	r3, [r7, #3]
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	461a      	mov	r2, r3
 8006ede:	00d2      	lsls	r2, r2, #3
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	005b      	lsls	r3, r3, #1
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	3307      	adds	r3, #7
 8006ee8:	b29c      	uxth	r4, r3
 8006eea:	78fa      	ldrb	r2, [r7, #3]
 8006eec:	6879      	ldr	r1, [r7, #4]
 8006eee:	4613      	mov	r3, r2
 8006ef0:	005b      	lsls	r3, r3, #1
 8006ef2:	4413      	add	r3, r2
 8006ef4:	00db      	lsls	r3, r3, #3
 8006ef6:	440b      	add	r3, r1
 8006ef8:	3354      	adds	r3, #84	; 0x54
 8006efa:	881b      	ldrh	r3, [r3, #0]
 8006efc:	461a      	mov	r2, r3
 8006efe:	2300      	movs	r3, #0
 8006f00:	4621      	mov	r1, r4
 8006f02:	f7fe fa72 	bl	80053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.second, NO_MEM_TRANSFER);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6998      	ldr	r0, [r3, #24]
 8006f0a:	78fb      	ldrb	r3, [r7, #3]
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	461a      	mov	r2, r3
 8006f10:	00d2      	lsls	r2, r2, #3
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	005b      	lsls	r3, r3, #1
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	3308      	adds	r3, #8
 8006f1a:	b29c      	uxth	r4, r3
 8006f1c:	78fa      	ldrb	r2, [r7, #3]
 8006f1e:	6879      	ldr	r1, [r7, #4]
 8006f20:	4613      	mov	r3, r2
 8006f22:	005b      	lsls	r3, r3, #1
 8006f24:	4413      	add	r3, r2
 8006f26:	00db      	lsls	r3, r3, #3
 8006f28:	440b      	add	r3, r1
 8006f2a:	3356      	adds	r3, #86	; 0x56
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	2300      	movs	r3, #0
 8006f32:	4621      	mov	r1, r4
 8006f34:	f7fe fa59 	bl	80053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.minute, NO_MEM_TRANSFER);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6998      	ldr	r0, [r3, #24]
 8006f3c:	78fb      	ldrb	r3, [r7, #3]
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	461a      	mov	r2, r3
 8006f42:	00d2      	lsls	r2, r2, #3
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	005b      	lsls	r3, r3, #1
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	3309      	adds	r3, #9
 8006f4c:	b29c      	uxth	r4, r3
 8006f4e:	78fa      	ldrb	r2, [r7, #3]
 8006f50:	6879      	ldr	r1, [r7, #4]
 8006f52:	4613      	mov	r3, r2
 8006f54:	005b      	lsls	r3, r3, #1
 8006f56:	4413      	add	r3, r2
 8006f58:	00db      	lsls	r3, r3, #3
 8006f5a:	440b      	add	r3, r1
 8006f5c:	3357      	adds	r3, #87	; 0x57
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	461a      	mov	r2, r3
 8006f62:	2300      	movs	r3, #0
 8006f64:	4621      	mov	r1, r4
 8006f66:	f7fe fa40 	bl	80053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.hour, NO_MEM_TRANSFER);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6998      	ldr	r0, [r3, #24]
 8006f6e:	78fb      	ldrb	r3, [r7, #3]
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	461a      	mov	r2, r3
 8006f74:	00d2      	lsls	r2, r2, #3
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	005b      	lsls	r3, r3, #1
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	330a      	adds	r3, #10
 8006f7e:	b29c      	uxth	r4, r3
 8006f80:	78fa      	ldrb	r2, [r7, #3]
 8006f82:	6879      	ldr	r1, [r7, #4]
 8006f84:	4613      	mov	r3, r2
 8006f86:	005b      	lsls	r3, r3, #1
 8006f88:	4413      	add	r3, r2
 8006f8a:	00db      	lsls	r3, r3, #3
 8006f8c:	440b      	add	r3, r1
 8006f8e:	3358      	adds	r3, #88	; 0x58
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	461a      	mov	r2, r3
 8006f94:	2300      	movs	r3, #0
 8006f96:	4621      	mov	r1, r4
 8006f98:	f7fe fa27 	bl	80053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.day, NO_MEM_TRANSFER);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6998      	ldr	r0, [r3, #24]
 8006fa0:	78fb      	ldrb	r3, [r7, #3]
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	00d2      	lsls	r2, r2, #3
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	005b      	lsls	r3, r3, #1
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	330b      	adds	r3, #11
 8006fb0:	b29c      	uxth	r4, r3
 8006fb2:	78fa      	ldrb	r2, [r7, #3]
 8006fb4:	6879      	ldr	r1, [r7, #4]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	005b      	lsls	r3, r3, #1
 8006fba:	4413      	add	r3, r2
 8006fbc:	00db      	lsls	r3, r3, #3
 8006fbe:	440b      	add	r3, r1
 8006fc0:	3359      	adds	r3, #89	; 0x59
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	4621      	mov	r1, r4
 8006fca:	f7fe fa0e 	bl	80053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.month, NO_MEM_TRANSFER);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6998      	ldr	r0, [r3, #24]
 8006fd2:	78fb      	ldrb	r3, [r7, #3]
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	00d2      	lsls	r2, r2, #3
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	005b      	lsls	r3, r3, #1
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	330c      	adds	r3, #12
 8006fe2:	b29c      	uxth	r4, r3
 8006fe4:	78fa      	ldrb	r2, [r7, #3]
 8006fe6:	6879      	ldr	r1, [r7, #4]
 8006fe8:	4613      	mov	r3, r2
 8006fea:	005b      	lsls	r3, r3, #1
 8006fec:	4413      	add	r3, r2
 8006fee:	00db      	lsls	r3, r3, #3
 8006ff0:	440b      	add	r3, r1
 8006ff2:	335a      	adds	r3, #90	; 0x5a
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	4621      	mov	r1, r4
 8006ffc:	f7fe f9f5 	bl	80053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(END_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), dryerPrograms[WichProgram].endTime.year, NO_MEM_TRANSFER);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6998      	ldr	r0, [r3, #24]
 8007004:	78fb      	ldrb	r3, [r7, #3]
 8007006:	b29b      	uxth	r3, r3
 8007008:	461a      	mov	r2, r3
 800700a:	00d2      	lsls	r2, r2, #3
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	005b      	lsls	r3, r3, #1
 8007010:	b29b      	uxth	r3, r3
 8007012:	330d      	adds	r3, #13
 8007014:	b29c      	uxth	r4, r3
 8007016:	78fa      	ldrb	r2, [r7, #3]
 8007018:	6879      	ldr	r1, [r7, #4]
 800701a:	4613      	mov	r3, r2
 800701c:	005b      	lsls	r3, r3, #1
 800701e:	4413      	add	r3, r2
 8007020:	00db      	lsls	r3, r3, #3
 8007022:	440b      	add	r3, r1
 8007024:	335c      	adds	r3, #92	; 0x5c
 8007026:	881b      	ldrh	r3, [r3, #0]
 8007028:	461a      	mov	r2, r3
 800702a:	2300      	movs	r3, #0
 800702c:	4621      	mov	r1, r4
 800702e:	f7fe f9dc 	bl	80053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>
	memory->writeToMemory(TEMP_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), TempToSave, MEM_TRANSFER);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6998      	ldr	r0, [r3, #24]
 8007036:	78fb      	ldrb	r3, [r7, #3]
 8007038:	3301      	adds	r3, #1
 800703a:	b29b      	uxth	r3, r3
 800703c:	461a      	mov	r2, r3
 800703e:	00d2      	lsls	r2, r2, #3
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	005b      	lsls	r3, r3, #1
 8007044:	b299      	uxth	r1, r3
 8007046:	2301      	movs	r3, #1
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	f7fe f9ce 	bl	80053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>

}
 800704e:	bf00      	nop
 8007050:	3714      	adds	r7, #20
 8007052:	46bd      	mov	sp, r7
 8007054:	bd90      	pop	{r4, r7, pc}

08007056 <_ZN10SmartDryer16loadDryerProgramEh>:

void SmartDryer::loadDryerProgram(uint8_t WichProgram)
{
 8007056:	b590      	push	{r4, r7, lr}
 8007058:	b085      	sub	sp, #20
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
 800705e:	460b      	mov	r3, r1
 8007060:	70fb      	strb	r3, [r7, #3]
	const uint8_t MAX_DRYER_VAR = 14;
 8007062:	230e      	movs	r3, #14
 8007064:	73fb      	strb	r3, [r7, #15]
	uint32_t TempSaved = 0;
 8007066:	2300      	movs	r3, #0
 8007068:	60bb      	str	r3, [r7, #8]
	memory->loadMemory(SETTED_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].programSetted);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6998      	ldr	r0, [r3, #24]
 800706e:	78fb      	ldrb	r3, [r7, #3]
 8007070:	b29b      	uxth	r3, r3
 8007072:	461a      	mov	r2, r3
 8007074:	00d2      	lsls	r2, r2, #3
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	005b      	lsls	r3, r3, #1
 800707a:	b29b      	uxth	r3, r3
 800707c:	3301      	adds	r3, #1
 800707e:	b299      	uxth	r1, r3
 8007080:	78fa      	ldrb	r2, [r7, #3]
 8007082:	4613      	mov	r3, r2
 8007084:	005b      	lsls	r3, r3, #1
 8007086:	4413      	add	r3, r2
 8007088:	00db      	lsls	r3, r3, #3
 800708a:	3348      	adds	r3, #72	; 0x48
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	4413      	add	r3, r2
 8007090:	3304      	adds	r3, #4
 8007092:	461a      	mov	r2, r3
 8007094:	f7fe f9c7 	bl	8005426 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.second);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6998      	ldr	r0, [r3, #24]
 800709c:	78fb      	ldrb	r3, [r7, #3]
 800709e:	b29b      	uxth	r3, r3
 80070a0:	461a      	mov	r2, r3
 80070a2:	00d2      	lsls	r2, r2, #3
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	005b      	lsls	r3, r3, #1
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	3302      	adds	r3, #2
 80070ac:	b299      	uxth	r1, r3
 80070ae:	78fa      	ldrb	r2, [r7, #3]
 80070b0:	4613      	mov	r3, r2
 80070b2:	005b      	lsls	r3, r3, #1
 80070b4:	4413      	add	r3, r2
 80070b6:	00db      	lsls	r3, r3, #3
 80070b8:	3348      	adds	r3, #72	; 0x48
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	4413      	add	r3, r2
 80070be:	3306      	adds	r3, #6
 80070c0:	461a      	mov	r2, r3
 80070c2:	f7fe f9b0 	bl	8005426 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.minute);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6998      	ldr	r0, [r3, #24]
 80070ca:	78fb      	ldrb	r3, [r7, #3]
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	461a      	mov	r2, r3
 80070d0:	00d2      	lsls	r2, r2, #3
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	005b      	lsls	r3, r3, #1
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	3303      	adds	r3, #3
 80070da:	b299      	uxth	r1, r3
 80070dc:	78fa      	ldrb	r2, [r7, #3]
 80070de:	4613      	mov	r3, r2
 80070e0:	005b      	lsls	r3, r3, #1
 80070e2:	4413      	add	r3, r2
 80070e4:	00db      	lsls	r3, r3, #3
 80070e6:	3348      	adds	r3, #72	; 0x48
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	4413      	add	r3, r2
 80070ec:	3307      	adds	r3, #7
 80070ee:	461a      	mov	r2, r3
 80070f0:	f7fe f999 	bl	8005426 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.hour);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6998      	ldr	r0, [r3, #24]
 80070f8:	78fb      	ldrb	r3, [r7, #3]
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	461a      	mov	r2, r3
 80070fe:	00d2      	lsls	r2, r2, #3
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	005b      	lsls	r3, r3, #1
 8007104:	b29b      	uxth	r3, r3
 8007106:	3304      	adds	r3, #4
 8007108:	b299      	uxth	r1, r3
 800710a:	78fa      	ldrb	r2, [r7, #3]
 800710c:	4613      	mov	r3, r2
 800710e:	005b      	lsls	r3, r3, #1
 8007110:	4413      	add	r3, r2
 8007112:	00db      	lsls	r3, r3, #3
 8007114:	3348      	adds	r3, #72	; 0x48
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	4413      	add	r3, r2
 800711a:	3308      	adds	r3, #8
 800711c:	461a      	mov	r2, r3
 800711e:	f7fe f982 	bl	8005426 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.day);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6998      	ldr	r0, [r3, #24]
 8007126:	78fb      	ldrb	r3, [r7, #3]
 8007128:	b29b      	uxth	r3, r3
 800712a:	461a      	mov	r2, r3
 800712c:	00d2      	lsls	r2, r2, #3
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	005b      	lsls	r3, r3, #1
 8007132:	b29b      	uxth	r3, r3
 8007134:	3305      	adds	r3, #5
 8007136:	b299      	uxth	r1, r3
 8007138:	78fa      	ldrb	r2, [r7, #3]
 800713a:	4613      	mov	r3, r2
 800713c:	005b      	lsls	r3, r3, #1
 800713e:	4413      	add	r3, r2
 8007140:	00db      	lsls	r3, r3, #3
 8007142:	3348      	adds	r3, #72	; 0x48
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	4413      	add	r3, r2
 8007148:	3309      	adds	r3, #9
 800714a:	461a      	mov	r2, r3
 800714c:	f7fe f96b 	bl	8005426 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.month);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6998      	ldr	r0, [r3, #24]
 8007154:	78fb      	ldrb	r3, [r7, #3]
 8007156:	b29b      	uxth	r3, r3
 8007158:	461a      	mov	r2, r3
 800715a:	00d2      	lsls	r2, r2, #3
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	005b      	lsls	r3, r3, #1
 8007160:	b29b      	uxth	r3, r3
 8007162:	3306      	adds	r3, #6
 8007164:	b299      	uxth	r1, r3
 8007166:	78fa      	ldrb	r2, [r7, #3]
 8007168:	4613      	mov	r3, r2
 800716a:	005b      	lsls	r3, r3, #1
 800716c:	4413      	add	r3, r2
 800716e:	00db      	lsls	r3, r3, #3
 8007170:	3348      	adds	r3, #72	; 0x48
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	4413      	add	r3, r2
 8007176:	330a      	adds	r3, #10
 8007178:	461a      	mov	r2, r3
 800717a:	f7fe f954 	bl	8005426 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(START_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].startTime.year);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6998      	ldr	r0, [r3, #24]
 8007182:	78fb      	ldrb	r3, [r7, #3]
 8007184:	b29b      	uxth	r3, r3
 8007186:	461a      	mov	r2, r3
 8007188:	00d2      	lsls	r2, r2, #3
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	005b      	lsls	r3, r3, #1
 800718e:	b29b      	uxth	r3, r3
 8007190:	3307      	adds	r3, #7
 8007192:	b299      	uxth	r1, r3
 8007194:	78fa      	ldrb	r2, [r7, #3]
 8007196:	4613      	mov	r3, r2
 8007198:	005b      	lsls	r3, r3, #1
 800719a:	4413      	add	r3, r2
 800719c:	00db      	lsls	r3, r3, #3
 800719e:	3348      	adds	r3, #72	; 0x48
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	4413      	add	r3, r2
 80071a4:	330c      	adds	r3, #12
 80071a6:	461a      	mov	r2, r3
 80071a8:	f7fe f93d 	bl	8005426 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_SECOND_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.second);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6998      	ldr	r0, [r3, #24]
 80071b0:	78fb      	ldrb	r3, [r7, #3]
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	461a      	mov	r2, r3
 80071b6:	00d2      	lsls	r2, r2, #3
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	005b      	lsls	r3, r3, #1
 80071bc:	b29b      	uxth	r3, r3
 80071be:	3308      	adds	r3, #8
 80071c0:	b299      	uxth	r1, r3
 80071c2:	78fa      	ldrb	r2, [r7, #3]
 80071c4:	4613      	mov	r3, r2
 80071c6:	005b      	lsls	r3, r3, #1
 80071c8:	4413      	add	r3, r2
 80071ca:	00db      	lsls	r3, r3, #3
 80071cc:	3350      	adds	r3, #80	; 0x50
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	4413      	add	r3, r2
 80071d2:	3306      	adds	r3, #6
 80071d4:	461a      	mov	r2, r3
 80071d6:	f7fe f926 	bl	8005426 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_MINUTE_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.minute);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6998      	ldr	r0, [r3, #24]
 80071de:	78fb      	ldrb	r3, [r7, #3]
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	461a      	mov	r2, r3
 80071e4:	00d2      	lsls	r2, r2, #3
 80071e6:	1ad3      	subs	r3, r2, r3
 80071e8:	005b      	lsls	r3, r3, #1
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	3309      	adds	r3, #9
 80071ee:	b299      	uxth	r1, r3
 80071f0:	78fa      	ldrb	r2, [r7, #3]
 80071f2:	4613      	mov	r3, r2
 80071f4:	005b      	lsls	r3, r3, #1
 80071f6:	4413      	add	r3, r2
 80071f8:	00db      	lsls	r3, r3, #3
 80071fa:	3350      	adds	r3, #80	; 0x50
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	4413      	add	r3, r2
 8007200:	3307      	adds	r3, #7
 8007202:	461a      	mov	r2, r3
 8007204:	f7fe f90f 	bl	8005426 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_HOUR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.hour);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6998      	ldr	r0, [r3, #24]
 800720c:	78fb      	ldrb	r3, [r7, #3]
 800720e:	b29b      	uxth	r3, r3
 8007210:	461a      	mov	r2, r3
 8007212:	00d2      	lsls	r2, r2, #3
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	005b      	lsls	r3, r3, #1
 8007218:	b29b      	uxth	r3, r3
 800721a:	330a      	adds	r3, #10
 800721c:	b299      	uxth	r1, r3
 800721e:	78fa      	ldrb	r2, [r7, #3]
 8007220:	4613      	mov	r3, r2
 8007222:	005b      	lsls	r3, r3, #1
 8007224:	4413      	add	r3, r2
 8007226:	00db      	lsls	r3, r3, #3
 8007228:	3350      	adds	r3, #80	; 0x50
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	4413      	add	r3, r2
 800722e:	3308      	adds	r3, #8
 8007230:	461a      	mov	r2, r3
 8007232:	f7fe f8f8 	bl	8005426 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_DAY_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.day);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6998      	ldr	r0, [r3, #24]
 800723a:	78fb      	ldrb	r3, [r7, #3]
 800723c:	b29b      	uxth	r3, r3
 800723e:	461a      	mov	r2, r3
 8007240:	00d2      	lsls	r2, r2, #3
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	005b      	lsls	r3, r3, #1
 8007246:	b29b      	uxth	r3, r3
 8007248:	330b      	adds	r3, #11
 800724a:	b299      	uxth	r1, r3
 800724c:	78fa      	ldrb	r2, [r7, #3]
 800724e:	4613      	mov	r3, r2
 8007250:	005b      	lsls	r3, r3, #1
 8007252:	4413      	add	r3, r2
 8007254:	00db      	lsls	r3, r3, #3
 8007256:	3350      	adds	r3, #80	; 0x50
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	4413      	add	r3, r2
 800725c:	3309      	adds	r3, #9
 800725e:	461a      	mov	r2, r3
 8007260:	f7fe f8e1 	bl	8005426 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_MONTH_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.month);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6998      	ldr	r0, [r3, #24]
 8007268:	78fb      	ldrb	r3, [r7, #3]
 800726a:	b29b      	uxth	r3, r3
 800726c:	461a      	mov	r2, r3
 800726e:	00d2      	lsls	r2, r2, #3
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	005b      	lsls	r3, r3, #1
 8007274:	b29b      	uxth	r3, r3
 8007276:	330c      	adds	r3, #12
 8007278:	b299      	uxth	r1, r3
 800727a:	78fa      	ldrb	r2, [r7, #3]
 800727c:	4613      	mov	r3, r2
 800727e:	005b      	lsls	r3, r3, #1
 8007280:	4413      	add	r3, r2
 8007282:	00db      	lsls	r3, r3, #3
 8007284:	3350      	adds	r3, #80	; 0x50
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	4413      	add	r3, r2
 800728a:	330a      	adds	r3, #10
 800728c:	461a      	mov	r2, r3
 800728e:	f7fe f8ca 	bl	8005426 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(END_YEAR_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&dryerPrograms[WichProgram].endTime.year);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6998      	ldr	r0, [r3, #24]
 8007296:	78fb      	ldrb	r3, [r7, #3]
 8007298:	b29b      	uxth	r3, r3
 800729a:	461a      	mov	r2, r3
 800729c:	00d2      	lsls	r2, r2, #3
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	005b      	lsls	r3, r3, #1
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	330d      	adds	r3, #13
 80072a6:	b299      	uxth	r1, r3
 80072a8:	78fa      	ldrb	r2, [r7, #3]
 80072aa:	4613      	mov	r3, r2
 80072ac:	005b      	lsls	r3, r3, #1
 80072ae:	4413      	add	r3, r2
 80072b0:	00db      	lsls	r3, r3, #3
 80072b2:	3350      	adds	r3, #80	; 0x50
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	4413      	add	r3, r2
 80072b8:	330c      	adds	r3, #12
 80072ba:	461a      	mov	r2, r3
 80072bc:	f7fe f8b3 	bl	8005426 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	memory->loadMemory(TEMP_PROGRAM_1 + (MAX_DRYER_VAR * WichProgram), (uint32_t *)&TempSaved);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6998      	ldr	r0, [r3, #24]
 80072c4:	78fb      	ldrb	r3, [r7, #3]
 80072c6:	3301      	adds	r3, #1
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	461a      	mov	r2, r3
 80072cc:	00d2      	lsls	r2, r2, #3
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	005b      	lsls	r3, r3, #1
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	f107 0208 	add.w	r2, r7, #8
 80072d8:	4619      	mov	r1, r3
 80072da:	f7fe f8a4 	bl	8005426 <_ZN12STM32_EEPROM10loadMemoryEtPm>
	dryerPrograms[WichProgram].tempSetted = (float)TempSaved;
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	78fc      	ldrb	r4, [r7, #3]
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7f9 fc10 	bl	8000b08 <__aeabi_ui2f>
 80072e8:	4601      	mov	r1, r0
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	4623      	mov	r3, r4
 80072ee:	005b      	lsls	r3, r3, #1
 80072f0:	4423      	add	r3, r4
 80072f2:	00db      	lsls	r3, r3, #3
 80072f4:	4413      	add	r3, r2
 80072f6:	3360      	adds	r3, #96	; 0x60
 80072f8:	6019      	str	r1, [r3, #0]
}
 80072fa:	bf00      	nop
 80072fc:	3714      	adds	r7, #20
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd90      	pop	{r4, r7, pc}
	...

08007304 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE>:


void SmartDryer::checkSettedProgramTime(uint8_t WichProgram, PROGRAM_STRUCURE ProgramToSet)
{
 8007304:	b082      	sub	sp, #8
 8007306:	b580      	push	{r7, lr}
 8007308:	b082      	sub	sp, #8
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
 800730e:	f107 0010 	add.w	r0, r7, #16
 8007312:	e880 000c 	stmia.w	r0, {r2, r3}
 8007316:	460b      	mov	r3, r1
 8007318:	70fb      	strb	r3, [r7, #3]
	clock->getTimeDate(dryerPrograms[WichProgram].startTime);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6858      	ldr	r0, [r3, #4]
 800731e:	78fa      	ldrb	r2, [r7, #3]
 8007320:	4613      	mov	r3, r2
 8007322:	005b      	lsls	r3, r3, #1
 8007324:	4413      	add	r3, r2
 8007326:	00db      	lsls	r3, r3, #3
 8007328:	3348      	adds	r3, #72	; 0x48
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	4413      	add	r3, r2
 800732e:	3306      	adds	r3, #6
 8007330:	4619      	mov	r1, r3
 8007332:	f7fc faaf 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
	HAL_Delay(250);
 8007336:	20fa      	movs	r0, #250	; 0xfa
 8007338:	f005 f9b0 	bl	800c69c <HAL_Delay>
	clock->getTimeDate(dryerPrograms[WichProgram].endTime);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6858      	ldr	r0, [r3, #4]
 8007340:	78fa      	ldrb	r2, [r7, #3]
 8007342:	4613      	mov	r3, r2
 8007344:	005b      	lsls	r3, r3, #1
 8007346:	4413      	add	r3, r2
 8007348:	00db      	lsls	r3, r3, #3
 800734a:	3350      	adds	r3, #80	; 0x50
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	4413      	add	r3, r2
 8007350:	3306      	adds	r3, #6
 8007352:	4619      	mov	r1, r3
 8007354:	f7fc fa9e 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
	dryerPrograms[WichProgram].startTime.minute = ProgramToSet.startTime.minute;
 8007358:	78fa      	ldrb	r2, [r7, #3]
 800735a:	7cf8      	ldrb	r0, [r7, #19]
 800735c:	6879      	ldr	r1, [r7, #4]
 800735e:	4613      	mov	r3, r2
 8007360:	005b      	lsls	r3, r3, #1
 8007362:	4413      	add	r3, r2
 8007364:	00db      	lsls	r3, r3, #3
 8007366:	440b      	add	r3, r1
 8007368:	334f      	adds	r3, #79	; 0x4f
 800736a:	4602      	mov	r2, r0
 800736c:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.minute = ProgramToSet.endTime.minute;
 800736e:	78fa      	ldrb	r2, [r7, #3]
 8007370:	7ef8      	ldrb	r0, [r7, #27]
 8007372:	6879      	ldr	r1, [r7, #4]
 8007374:	4613      	mov	r3, r2
 8007376:	005b      	lsls	r3, r3, #1
 8007378:	4413      	add	r3, r2
 800737a:	00db      	lsls	r3, r3, #3
 800737c:	440b      	add	r3, r1
 800737e:	3357      	adds	r3, #87	; 0x57
 8007380:	4602      	mov	r2, r0
 8007382:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].startTime.hour = ProgramToSet.startTime.hour;
 8007384:	78fa      	ldrb	r2, [r7, #3]
 8007386:	7d38      	ldrb	r0, [r7, #20]
 8007388:	6879      	ldr	r1, [r7, #4]
 800738a:	4613      	mov	r3, r2
 800738c:	005b      	lsls	r3, r3, #1
 800738e:	4413      	add	r3, r2
 8007390:	00db      	lsls	r3, r3, #3
 8007392:	440b      	add	r3, r1
 8007394:	3350      	adds	r3, #80	; 0x50
 8007396:	4602      	mov	r2, r0
 8007398:	701a      	strb	r2, [r3, #0]
	dryerPrograms[WichProgram].endTime.hour = ProgramToSet.endTime.hour;
 800739a:	78fa      	ldrb	r2, [r7, #3]
 800739c:	7f38      	ldrb	r0, [r7, #28]
 800739e:	6879      	ldr	r1, [r7, #4]
 80073a0:	4613      	mov	r3, r2
 80073a2:	005b      	lsls	r3, r3, #1
 80073a4:	4413      	add	r3, r2
 80073a6:	00db      	lsls	r3, r3, #3
 80073a8:	440b      	add	r3, r1
 80073aa:	3358      	adds	r3, #88	; 0x58
 80073ac:	4602      	mov	r2, r0
 80073ae:	701a      	strb	r2, [r3, #0]
	if(ProgramToSet.startTime.hour > ProgramToSet.endTime.hour)
 80073b0:	7d3a      	ldrb	r2, [r7, #20]
 80073b2:	7f3b      	ldrb	r3, [r7, #28]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d94d      	bls.n	8007454 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x150>
	{
		if(dryerPrograms[WichProgram].endTime.day + 1 < daysInMonth[dryerPrograms[WichProgram].endTime.month - 1])
 80073b8:	78fa      	ldrb	r2, [r7, #3]
 80073ba:	6879      	ldr	r1, [r7, #4]
 80073bc:	4613      	mov	r3, r2
 80073be:	005b      	lsls	r3, r3, #1
 80073c0:	4413      	add	r3, r2
 80073c2:	00db      	lsls	r3, r3, #3
 80073c4:	440b      	add	r3, r1
 80073c6:	3359      	adds	r3, #89	; 0x59
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	1c59      	adds	r1, r3, #1
 80073cc:	78fa      	ldrb	r2, [r7, #3]
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	4613      	mov	r3, r2
 80073d2:	005b      	lsls	r3, r3, #1
 80073d4:	4413      	add	r3, r2
 80073d6:	00db      	lsls	r3, r3, #3
 80073d8:	4403      	add	r3, r0
 80073da:	335a      	adds	r3, #90	; 0x5a
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	3b01      	subs	r3, #1
 80073e0:	4a60      	ldr	r2, [pc, #384]	; (8007564 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x260>)
 80073e2:	5cd3      	ldrb	r3, [r2, r3]
 80073e4:	4299      	cmp	r1, r3
 80073e6:	da15      	bge.n	8007414 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x110>
			dryerPrograms[WichProgram].endTime.day += 1;
 80073e8:	78fa      	ldrb	r2, [r7, #3]
 80073ea:	6879      	ldr	r1, [r7, #4]
 80073ec:	4613      	mov	r3, r2
 80073ee:	005b      	lsls	r3, r3, #1
 80073f0:	4413      	add	r3, r2
 80073f2:	00db      	lsls	r3, r3, #3
 80073f4:	440b      	add	r3, r1
 80073f6:	3359      	adds	r3, #89	; 0x59
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	78fa      	ldrb	r2, [r7, #3]
 80073fc:	3301      	adds	r3, #1
 80073fe:	b2d8      	uxtb	r0, r3
 8007400:	6879      	ldr	r1, [r7, #4]
 8007402:	4613      	mov	r3, r2
 8007404:	005b      	lsls	r3, r3, #1
 8007406:	4413      	add	r3, r2
 8007408:	00db      	lsls	r3, r3, #3
 800740a:	440b      	add	r3, r1
 800740c:	3359      	adds	r3, #89	; 0x59
 800740e:	4602      	mov	r2, r0
 8007410:	701a      	strb	r2, [r3, #0]
//	dryerPrograms[WichProgram].programSetted = true;
//	if(eepromEnabled)
//	{
//		saveDryerProgram(WichProgram);
//	}
}
 8007412:	e09f      	b.n	8007554 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
			dryerPrograms[WichProgram].endTime.day = 1;
 8007414:	78fa      	ldrb	r2, [r7, #3]
 8007416:	6879      	ldr	r1, [r7, #4]
 8007418:	4613      	mov	r3, r2
 800741a:	005b      	lsls	r3, r3, #1
 800741c:	4413      	add	r3, r2
 800741e:	00db      	lsls	r3, r3, #3
 8007420:	440b      	add	r3, r1
 8007422:	3359      	adds	r3, #89	; 0x59
 8007424:	2201      	movs	r2, #1
 8007426:	701a      	strb	r2, [r3, #0]
			dryerPrograms[WichProgram].endTime.month += 1;
 8007428:	78fa      	ldrb	r2, [r7, #3]
 800742a:	6879      	ldr	r1, [r7, #4]
 800742c:	4613      	mov	r3, r2
 800742e:	005b      	lsls	r3, r3, #1
 8007430:	4413      	add	r3, r2
 8007432:	00db      	lsls	r3, r3, #3
 8007434:	440b      	add	r3, r1
 8007436:	335a      	adds	r3, #90	; 0x5a
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	78fa      	ldrb	r2, [r7, #3]
 800743c:	3301      	adds	r3, #1
 800743e:	b2d8      	uxtb	r0, r3
 8007440:	6879      	ldr	r1, [r7, #4]
 8007442:	4613      	mov	r3, r2
 8007444:	005b      	lsls	r3, r3, #1
 8007446:	4413      	add	r3, r2
 8007448:	00db      	lsls	r3, r3, #3
 800744a:	440b      	add	r3, r1
 800744c:	335a      	adds	r3, #90	; 0x5a
 800744e:	4602      	mov	r2, r0
 8007450:	701a      	strb	r2, [r3, #0]
}
 8007452:	e07f      	b.n	8007554 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
	else if(ProgramToSet.endTime.hour == ProgramToSet.startTime.hour)
 8007454:	7f3a      	ldrb	r2, [r7, #28]
 8007456:	7d3b      	ldrb	r3, [r7, #20]
 8007458:	429a      	cmp	r2, r3
 800745a:	d17b      	bne.n	8007554 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
		if(ProgramToSet.startTime.minute > ProgramToSet.endTime.minute)
 800745c:	7cfa      	ldrb	r2, [r7, #19]
 800745e:	7efb      	ldrb	r3, [r7, #27]
 8007460:	429a      	cmp	r2, r3
 8007462:	d977      	bls.n	8007554 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
			if(ProgramToSet.endTime.minute + (ProgramToSet.startTime.minute  - ProgramToSet.endTime.minute) < 50)
 8007464:	7cfb      	ldrb	r3, [r7, #19]
 8007466:	2b31      	cmp	r3, #49	; 0x31
 8007468:	d80b      	bhi.n	8007482 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x17e>
				dryerPrograms[WichProgram].endTime.minute = ProgramToSet.endTime.minute + (ProgramToSet.startTime.minute  - ProgramToSet.endTime.minute);
 800746a:	78fa      	ldrb	r2, [r7, #3]
 800746c:	7cf8      	ldrb	r0, [r7, #19]
 800746e:	6879      	ldr	r1, [r7, #4]
 8007470:	4613      	mov	r3, r2
 8007472:	005b      	lsls	r3, r3, #1
 8007474:	4413      	add	r3, r2
 8007476:	00db      	lsls	r3, r3, #3
 8007478:	440b      	add	r3, r1
 800747a:	3357      	adds	r3, #87	; 0x57
 800747c:	4602      	mov	r2, r0
 800747e:	701a      	strb	r2, [r3, #0]
}
 8007480:	e068      	b.n	8007554 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
				dryerPrograms[WichProgram].endTime.minute = ProgramToSet.endTime.minute;
 8007482:	78fa      	ldrb	r2, [r7, #3]
 8007484:	7ef8      	ldrb	r0, [r7, #27]
 8007486:	6879      	ldr	r1, [r7, #4]
 8007488:	4613      	mov	r3, r2
 800748a:	005b      	lsls	r3, r3, #1
 800748c:	4413      	add	r3, r2
 800748e:	00db      	lsls	r3, r3, #3
 8007490:	440b      	add	r3, r1
 8007492:	3357      	adds	r3, #87	; 0x57
 8007494:	4602      	mov	r2, r0
 8007496:	701a      	strb	r2, [r3, #0]
				dryerPrograms[WichProgram].endTime.hour = ProgramToSet.startTime.hour + 1;
 8007498:	7d3b      	ldrb	r3, [r7, #20]
 800749a:	78fa      	ldrb	r2, [r7, #3]
 800749c:	3301      	adds	r3, #1
 800749e:	b2d8      	uxtb	r0, r3
 80074a0:	6879      	ldr	r1, [r7, #4]
 80074a2:	4613      	mov	r3, r2
 80074a4:	005b      	lsls	r3, r3, #1
 80074a6:	4413      	add	r3, r2
 80074a8:	00db      	lsls	r3, r3, #3
 80074aa:	440b      	add	r3, r1
 80074ac:	3358      	adds	r3, #88	; 0x58
 80074ae:	4602      	mov	r2, r0
 80074b0:	701a      	strb	r2, [r3, #0]
				if(ProgramToSet.startTime.hour > ProgramToSet.endTime.hour)
 80074b2:	7d3a      	ldrb	r2, [r7, #20]
 80074b4:	7f3b      	ldrb	r3, [r7, #28]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d94c      	bls.n	8007554 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
					if(dryerPrograms[WichProgram].endTime.day + 1 < daysInMonth[dryerPrograms[WichProgram].endTime.month - 1])
 80074ba:	78fa      	ldrb	r2, [r7, #3]
 80074bc:	6879      	ldr	r1, [r7, #4]
 80074be:	4613      	mov	r3, r2
 80074c0:	005b      	lsls	r3, r3, #1
 80074c2:	4413      	add	r3, r2
 80074c4:	00db      	lsls	r3, r3, #3
 80074c6:	440b      	add	r3, r1
 80074c8:	3359      	adds	r3, #89	; 0x59
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	1c59      	adds	r1, r3, #1
 80074ce:	78fa      	ldrb	r2, [r7, #3]
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	4613      	mov	r3, r2
 80074d4:	005b      	lsls	r3, r3, #1
 80074d6:	4413      	add	r3, r2
 80074d8:	00db      	lsls	r3, r3, #3
 80074da:	4403      	add	r3, r0
 80074dc:	335a      	adds	r3, #90	; 0x5a
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	3b01      	subs	r3, #1
 80074e2:	4a20      	ldr	r2, [pc, #128]	; (8007564 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x260>)
 80074e4:	5cd3      	ldrb	r3, [r2, r3]
 80074e6:	4299      	cmp	r1, r3
 80074e8:	da15      	bge.n	8007516 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x212>
						dryerPrograms[WichProgram].endTime.day += 1;
 80074ea:	78fa      	ldrb	r2, [r7, #3]
 80074ec:	6879      	ldr	r1, [r7, #4]
 80074ee:	4613      	mov	r3, r2
 80074f0:	005b      	lsls	r3, r3, #1
 80074f2:	4413      	add	r3, r2
 80074f4:	00db      	lsls	r3, r3, #3
 80074f6:	440b      	add	r3, r1
 80074f8:	3359      	adds	r3, #89	; 0x59
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	78fa      	ldrb	r2, [r7, #3]
 80074fe:	3301      	adds	r3, #1
 8007500:	b2d8      	uxtb	r0, r3
 8007502:	6879      	ldr	r1, [r7, #4]
 8007504:	4613      	mov	r3, r2
 8007506:	005b      	lsls	r3, r3, #1
 8007508:	4413      	add	r3, r2
 800750a:	00db      	lsls	r3, r3, #3
 800750c:	440b      	add	r3, r1
 800750e:	3359      	adds	r3, #89	; 0x59
 8007510:	4602      	mov	r2, r0
 8007512:	701a      	strb	r2, [r3, #0]
}
 8007514:	e01e      	b.n	8007554 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE+0x250>
						dryerPrograms[WichProgram].endTime.day = 1;
 8007516:	78fa      	ldrb	r2, [r7, #3]
 8007518:	6879      	ldr	r1, [r7, #4]
 800751a:	4613      	mov	r3, r2
 800751c:	005b      	lsls	r3, r3, #1
 800751e:	4413      	add	r3, r2
 8007520:	00db      	lsls	r3, r3, #3
 8007522:	440b      	add	r3, r1
 8007524:	3359      	adds	r3, #89	; 0x59
 8007526:	2201      	movs	r2, #1
 8007528:	701a      	strb	r2, [r3, #0]
						dryerPrograms[WichProgram].endTime.month += 1;
 800752a:	78fa      	ldrb	r2, [r7, #3]
 800752c:	6879      	ldr	r1, [r7, #4]
 800752e:	4613      	mov	r3, r2
 8007530:	005b      	lsls	r3, r3, #1
 8007532:	4413      	add	r3, r2
 8007534:	00db      	lsls	r3, r3, #3
 8007536:	440b      	add	r3, r1
 8007538:	335a      	adds	r3, #90	; 0x5a
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	78fa      	ldrb	r2, [r7, #3]
 800753e:	3301      	adds	r3, #1
 8007540:	b2d8      	uxtb	r0, r3
 8007542:	6879      	ldr	r1, [r7, #4]
 8007544:	4613      	mov	r3, r2
 8007546:	005b      	lsls	r3, r3, #1
 8007548:	4413      	add	r3, r2
 800754a:	00db      	lsls	r3, r3, #3
 800754c:	440b      	add	r3, r1
 800754e:	335a      	adds	r3, #90	; 0x5a
 8007550:	4602      	mov	r2, r0
 8007552:	701a      	strb	r2, [r3, #0]
}
 8007554:	bf00      	nop
 8007556:	3708      	adds	r7, #8
 8007558:	46bd      	mov	sp, r7
 800755a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800755e:	b002      	add	sp, #8
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	080159e4 	.word	0x080159e4

08007568 <_ZN10SmartDryer22serialComunicationCtrlEv>:

void SmartDryer::serialComunicationCtrl()
{
 8007568:	b5b0      	push	{r4, r5, r7, lr}
 800756a:	b0a0      	sub	sp, #128	; 0x80
 800756c:	af04      	add	r7, sp, #16
 800756e:	6078      	str	r0, [r7, #4]
	int16_t Command = 0;
 8007570:	2300      	movs	r3, #0
 8007572:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	bool TempFound = false;
 8007576:	2300      	movs	r3, #0
 8007578:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	bool SetProgramTime = false;
 800757c:	2300      	movs	r3, #0
 800757e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	float OldTemp = 0.0;
 8007582:	f04f 0300 	mov.w	r3, #0
 8007586:	657b      	str	r3, [r7, #84]	; 0x54
	uint8_t WichProgram = 0;
 8007588:	2300      	movs	r3, #0
 800758a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	PROGRAM_STRUCURE ProgramToSet;
 800758e:	f107 030c 	add.w	r3, r7, #12
 8007592:	2200      	movs	r2, #0
 8007594:	601a      	str	r2, [r3, #0]
 8007596:	605a      	str	r2, [r3, #4]
 8007598:	609a      	str	r2, [r3, #8]
 800759a:	60da      	str	r2, [r3, #12]
 800759c:	611a      	str	r2, [r3, #16]
 800759e:	615a      	str	r2, [r3, #20]
	Command = externalCommand->receiveSerialCommand();
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7fe fc65 	bl	8005e74 <_ZN13SerialMessage20receiveSerialCommandEv>
 80075aa:	4603      	mov	r3, r0
 80075ac:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	if(Command != SerialMessage::NO_COMMANDS && Command != SerialMessage::INVALID_MESSAGE)
 80075b0:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80075b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b8:	f000 83c9 	beq.w	8007d4e <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e6>
 80075bc:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80075c0:	f113 0f02 	cmn.w	r3, #2
 80075c4:	f000 83c3 	beq.w	8007d4e <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e6>
	{
		statusParam->serialCommandReceived = true;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075cc:	2201      	movs	r2, #1
 80075ce:	729a      	strb	r2, [r3, #10]
		switch(Command)
 80075d0:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80075d4:	3b0b      	subs	r3, #11
 80075d6:	2bc7      	cmp	r3, #199	; 0xc7
 80075d8:	f200 83af 	bhi.w	8007d3a <_ZN10SmartDryer22serialComunicationCtrlEv+0x7d2>
 80075dc:	a201      	add	r2, pc, #4	; (adr r2, 80075e4 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7c>)
 80075de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e2:	bf00      	nop
 80075e4:	08007905 	.word	0x08007905
 80075e8:	0800797b 	.word	0x0800797b
 80075ec:	080079ab 	.word	0x080079ab
 80075f0:	080079db 	.word	0x080079db
 80075f4:	08007a0b 	.word	0x08007a0b
 80075f8:	08007a3b 	.word	0x08007a3b
 80075fc:	08007aad 	.word	0x08007aad
 8007600:	08007add 	.word	0x08007add
 8007604:	08007b0d 	.word	0x08007b0d
 8007608:	08007b3d 	.word	0x08007b3d
 800760c:	08007b6d 	.word	0x08007b6d
 8007610:	08007bdf 	.word	0x08007bdf
 8007614:	08007c0f 	.word	0x08007c0f
 8007618:	08007c3f 	.word	0x08007c3f
 800761c:	08007c6f 	.word	0x08007c6f
 8007620:	08007c9f 	.word	0x08007c9f
 8007624:	08007d3b 	.word	0x08007d3b
 8007628:	08007d3b 	.word	0x08007d3b
 800762c:	08007d3b 	.word	0x08007d3b
 8007630:	08007d3b 	.word	0x08007d3b
 8007634:	08007d3b 	.word	0x08007d3b
 8007638:	08007d3b 	.word	0x08007d3b
 800763c:	08007d3b 	.word	0x08007d3b
 8007640:	08007d3b 	.word	0x08007d3b
 8007644:	08007d3b 	.word	0x08007d3b
 8007648:	08007d3b 	.word	0x08007d3b
 800764c:	08007d3b 	.word	0x08007d3b
 8007650:	08007d3b 	.word	0x08007d3b
 8007654:	08007d3b 	.word	0x08007d3b
 8007658:	08007d3b 	.word	0x08007d3b
 800765c:	08007d3b 	.word	0x08007d3b
 8007660:	08007d3b 	.word	0x08007d3b
 8007664:	08007d3b 	.word	0x08007d3b
 8007668:	08007d3b 	.word	0x08007d3b
 800766c:	08007d3b 	.word	0x08007d3b
 8007670:	08007d3b 	.word	0x08007d3b
 8007674:	08007d3b 	.word	0x08007d3b
 8007678:	08007d3b 	.word	0x08007d3b
 800767c:	08007d3b 	.word	0x08007d3b
 8007680:	08007d3b 	.word	0x08007d3b
 8007684:	08007d3b 	.word	0x08007d3b
 8007688:	08007d3b 	.word	0x08007d3b
 800768c:	08007d3b 	.word	0x08007d3b
 8007690:	08007d3b 	.word	0x08007d3b
 8007694:	08007d3b 	.word	0x08007d3b
 8007698:	08007d3b 	.word	0x08007d3b
 800769c:	08007d3b 	.word	0x08007d3b
 80076a0:	08007d3b 	.word	0x08007d3b
 80076a4:	08007d3b 	.word	0x08007d3b
 80076a8:	08007d3b 	.word	0x08007d3b
 80076ac:	08007d3b 	.word	0x08007d3b
 80076b0:	08007d3b 	.word	0x08007d3b
 80076b4:	08007d3b 	.word	0x08007d3b
 80076b8:	08007d3b 	.word	0x08007d3b
 80076bc:	08007d3b 	.word	0x08007d3b
 80076c0:	08007d3b 	.word	0x08007d3b
 80076c4:	08007d3b 	.word	0x08007d3b
 80076c8:	08007d3b 	.word	0x08007d3b
 80076cc:	08007d3b 	.word	0x08007d3b
 80076d0:	08007d3b 	.word	0x08007d3b
 80076d4:	08007d3b 	.word	0x08007d3b
 80076d8:	08007d3b 	.word	0x08007d3b
 80076dc:	08007d3b 	.word	0x08007d3b
 80076e0:	08007d3b 	.word	0x08007d3b
 80076e4:	08007d3b 	.word	0x08007d3b
 80076e8:	08007d3b 	.word	0x08007d3b
 80076ec:	08007d3b 	.word	0x08007d3b
 80076f0:	08007d3b 	.word	0x08007d3b
 80076f4:	08007d3b 	.word	0x08007d3b
 80076f8:	08007d3b 	.word	0x08007d3b
 80076fc:	08007d3b 	.word	0x08007d3b
 8007700:	08007d3b 	.word	0x08007d3b
 8007704:	08007d3b 	.word	0x08007d3b
 8007708:	08007d3b 	.word	0x08007d3b
 800770c:	08007d3b 	.word	0x08007d3b
 8007710:	08007d3b 	.word	0x08007d3b
 8007714:	08007d3b 	.word	0x08007d3b
 8007718:	08007d3b 	.word	0x08007d3b
 800771c:	08007d3b 	.word	0x08007d3b
 8007720:	08007d3b 	.word	0x08007d3b
 8007724:	08007d3b 	.word	0x08007d3b
 8007728:	08007d3b 	.word	0x08007d3b
 800772c:	08007d3b 	.word	0x08007d3b
 8007730:	08007d3b 	.word	0x08007d3b
 8007734:	08007d3b 	.word	0x08007d3b
 8007738:	08007d3b 	.word	0x08007d3b
 800773c:	08007d3b 	.word	0x08007d3b
 8007740:	08007d3b 	.word	0x08007d3b
 8007744:	08007d3b 	.word	0x08007d3b
 8007748:	08007d3b 	.word	0x08007d3b
 800774c:	08007d3b 	.word	0x08007d3b
 8007750:	08007d3b 	.word	0x08007d3b
 8007754:	08007d3b 	.word	0x08007d3b
 8007758:	08007d3b 	.word	0x08007d3b
 800775c:	08007d3b 	.word	0x08007d3b
 8007760:	08007d3b 	.word	0x08007d3b
 8007764:	08007d3b 	.word	0x08007d3b
 8007768:	08007d3b 	.word	0x08007d3b
 800776c:	08007d3b 	.word	0x08007d3b
 8007770:	08007d3b 	.word	0x08007d3b
 8007774:	08007d3b 	.word	0x08007d3b
 8007778:	08007d3b 	.word	0x08007d3b
 800777c:	08007d3b 	.word	0x08007d3b
 8007780:	08007d3b 	.word	0x08007d3b
 8007784:	08007d3b 	.word	0x08007d3b
 8007788:	08007d3b 	.word	0x08007d3b
 800778c:	08007d3b 	.word	0x08007d3b
 8007790:	08007d3b 	.word	0x08007d3b
 8007794:	08007d3b 	.word	0x08007d3b
 8007798:	08007d3b 	.word	0x08007d3b
 800779c:	08007d3b 	.word	0x08007d3b
 80077a0:	08007d3b 	.word	0x08007d3b
 80077a4:	08007d3b 	.word	0x08007d3b
 80077a8:	08007d3b 	.word	0x08007d3b
 80077ac:	08007d3b 	.word	0x08007d3b
 80077b0:	08007d3b 	.word	0x08007d3b
 80077b4:	08007d3b 	.word	0x08007d3b
 80077b8:	08007d3b 	.word	0x08007d3b
 80077bc:	08007d3b 	.word	0x08007d3b
 80077c0:	08007d3b 	.word	0x08007d3b
 80077c4:	08007d3b 	.word	0x08007d3b
 80077c8:	08007d3b 	.word	0x08007d3b
 80077cc:	08007d3b 	.word	0x08007d3b
 80077d0:	08007d3b 	.word	0x08007d3b
 80077d4:	08007d3b 	.word	0x08007d3b
 80077d8:	08007d3b 	.word	0x08007d3b
 80077dc:	08007d3b 	.word	0x08007d3b
 80077e0:	08007d3b 	.word	0x08007d3b
 80077e4:	08007d3b 	.word	0x08007d3b
 80077e8:	08007d3b 	.word	0x08007d3b
 80077ec:	08007d3b 	.word	0x08007d3b
 80077f0:	08007d3b 	.word	0x08007d3b
 80077f4:	08007d3b 	.word	0x08007d3b
 80077f8:	08007d3b 	.word	0x08007d3b
 80077fc:	08007d3b 	.word	0x08007d3b
 8007800:	08007d3b 	.word	0x08007d3b
 8007804:	08007d3b 	.word	0x08007d3b
 8007808:	08007d3b 	.word	0x08007d3b
 800780c:	08007d3b 	.word	0x08007d3b
 8007810:	08007d3b 	.word	0x08007d3b
 8007814:	08007d3b 	.word	0x08007d3b
 8007818:	08007d3b 	.word	0x08007d3b
 800781c:	08007d3b 	.word	0x08007d3b
 8007820:	08007d3b 	.word	0x08007d3b
 8007824:	08007d3b 	.word	0x08007d3b
 8007828:	08007d3b 	.word	0x08007d3b
 800782c:	08007d3b 	.word	0x08007d3b
 8007830:	08007d3b 	.word	0x08007d3b
 8007834:	08007d3b 	.word	0x08007d3b
 8007838:	08007d3b 	.word	0x08007d3b
 800783c:	08007d3b 	.word	0x08007d3b
 8007840:	08007d3b 	.word	0x08007d3b
 8007844:	08007d3b 	.word	0x08007d3b
 8007848:	08007d3b 	.word	0x08007d3b
 800784c:	08007d3b 	.word	0x08007d3b
 8007850:	08007d3b 	.word	0x08007d3b
 8007854:	08007d3b 	.word	0x08007d3b
 8007858:	08007d3b 	.word	0x08007d3b
 800785c:	08007d3b 	.word	0x08007d3b
 8007860:	08007d3b 	.word	0x08007d3b
 8007864:	08007d3b 	.word	0x08007d3b
 8007868:	08007d3b 	.word	0x08007d3b
 800786c:	08007d3b 	.word	0x08007d3b
 8007870:	08007d3b 	.word	0x08007d3b
 8007874:	08007d3b 	.word	0x08007d3b
 8007878:	08007d3b 	.word	0x08007d3b
 800787c:	08007d3b 	.word	0x08007d3b
 8007880:	08007d3b 	.word	0x08007d3b
 8007884:	08007d3b 	.word	0x08007d3b
 8007888:	08007d3b 	.word	0x08007d3b
 800788c:	08007d3b 	.word	0x08007d3b
 8007890:	08007d3b 	.word	0x08007d3b
 8007894:	08007d3b 	.word	0x08007d3b
 8007898:	08007d3b 	.word	0x08007d3b
 800789c:	08007d3b 	.word	0x08007d3b
 80078a0:	08007d3b 	.word	0x08007d3b
 80078a4:	08007d3b 	.word	0x08007d3b
 80078a8:	08007d3b 	.word	0x08007d3b
 80078ac:	08007d3b 	.word	0x08007d3b
 80078b0:	08007d3b 	.word	0x08007d3b
 80078b4:	08007d3b 	.word	0x08007d3b
 80078b8:	08007d3b 	.word	0x08007d3b
 80078bc:	08007d3b 	.word	0x08007d3b
 80078c0:	08007d3b 	.word	0x08007d3b
 80078c4:	08007d3b 	.word	0x08007d3b
 80078c8:	08007d3b 	.word	0x08007d3b
 80078cc:	08007d3b 	.word	0x08007d3b
 80078d0:	08007d3b 	.word	0x08007d3b
 80078d4:	08007d3b 	.word	0x08007d3b
 80078d8:	08007d3b 	.word	0x08007d3b
 80078dc:	08007d13 	.word	0x08007d13
 80078e0:	08007d1d 	.word	0x08007d1d
 80078e4:	08007d27 	.word	0x08007d27
 80078e8:	08007d31 	.word	0x08007d31
 80078ec:	08007d3b 	.word	0x08007d3b
 80078f0:	08007d3b 	.word	0x08007d3b
 80078f4:	08007d3b 	.word	0x08007d3b
 80078f8:	08007d3b 	.word	0x08007d3b
 80078fc:	08007d3b 	.word	0x08007d3b
 8007900:	08007d3b 	.word	0x08007d3b
		{
			case SerialMessage::SET_TEMP:
				OldTemp = statusParam->temperatureSetted;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	657b      	str	r3, [r7, #84]	; 0x54
				statusParam->temperatureSetted = externalCommand->getValueSetted();
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007910:	4618      	mov	r0, r3
 8007912:	f7fe fb95 	bl	8006040 <_ZN13SerialMessage14getValueSettedEv>
 8007916:	4602      	mov	r2, r0
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800791c:	4610      	mov	r0, r2
 800791e:	f7f9 f8f3 	bl	8000b08 <__aeabi_ui2f>
 8007922:	4603      	mov	r3, r0
 8007924:	6063      	str	r3, [r4, #4]
				for(int i = 0; i < NTemps; i++)
 8007926:	2300      	movs	r3, #0
 8007928:	66bb      	str	r3, [r7, #104]	; 0x68
 800792a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800792c:	2b0c      	cmp	r3, #12
 800792e:	dc17      	bgt.n	8007960 <_ZN10SmartDryer22serialComunicationCtrlEv+0x3f8>
				{
					if((uint8_t)statusParam->temperatureSetted == paramTemperatures[i])
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	4618      	mov	r0, r3
 8007938:	f7f9 fa8e 	bl	8000e58 <__aeabi_f2uiz>
 800793c:	4603      	mov	r3, r0
 800793e:	b2da      	uxtb	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8007946:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007948:	440b      	add	r3, r1
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	429a      	cmp	r2, r3
 800794e:	d103      	bne.n	8007958 <_ZN10SmartDryer22serialComunicationCtrlEv+0x3f0>
					{
						TempFound = true;
 8007950:	2301      	movs	r3, #1
 8007952:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
 8007956:	e003      	b.n	8007960 <_ZN10SmartDryer22serialComunicationCtrlEv+0x3f8>
				for(int i = 0; i < NTemps; i++)
 8007958:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800795a:	3301      	adds	r3, #1
 800795c:	66bb      	str	r3, [r7, #104]	; 0x68
 800795e:	e7e4      	b.n	800792a <_ZN10SmartDryer22serialComunicationCtrlEv+0x3c2>
					}
				}
				if(!TempFound)
 8007960:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007964:	f083 0301 	eor.w	r3, r3, #1
 8007968:	b2db      	uxtb	r3, r3
 800796a:	2b00      	cmp	r3, #0
 800796c:	f000 81e7 	beq.w	8007d3e <_ZN10SmartDryer22serialComunicationCtrlEv+0x7d6>
				{
					statusParam->temperatureSetted = OldTemp;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007974:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007976:	605a      	str	r2, [r3, #4]
				}
				break;
 8007978:	e1e1      	b.n	8007d3e <_ZN10SmartDryer22serialComunicationCtrlEv+0x7d6>
			case SerialMessage::SET_START_MINUTE_PROG_1:
				clock->getTimeDate(ProgramToSet.startTime);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	685a      	ldr	r2, [r3, #4]
 800797e:	f107 030c 	add.w	r3, r7, #12
 8007982:	3302      	adds	r3, #2
 8007984:	4619      	mov	r1, r3
 8007986:	4610      	mov	r0, r2
 8007988:	f7fb ff84 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.minute = externalCommand->getValueSetted();
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007990:	4618      	mov	r0, r3
 8007992:	f7fe fb55 	bl	8006040 <_ZN13SerialMessage14getValueSettedEv>
 8007996:	4603      	mov	r3, r0
 8007998:	b2db      	uxtb	r3, r3
 800799a:	73fb      	strb	r3, [r7, #15]
				WichProgram = DRYER_PROGRAM_1;
 800799c:	2300      	movs	r3, #0
 800799e:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 80079a2:	2301      	movs	r3, #1
 80079a4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 80079a8:	e1d0      	b.n	8007d4c <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_START_HOUR_PROG_1:
				clock->getTimeDate(ProgramToSet.startTime);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	685a      	ldr	r2, [r3, #4]
 80079ae:	f107 030c 	add.w	r3, r7, #12
 80079b2:	3302      	adds	r3, #2
 80079b4:	4619      	mov	r1, r3
 80079b6:	4610      	mov	r0, r2
 80079b8:	f7fb ff6c 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.hour = externalCommand->getValueSetted();
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7fe fb3d 	bl	8006040 <_ZN13SerialMessage14getValueSettedEv>
 80079c6:	4603      	mov	r3, r0
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	743b      	strb	r3, [r7, #16]
				WichProgram = DRYER_PROGRAM_1;
 80079cc:	2300      	movs	r3, #0
 80079ce:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 80079d2:	2301      	movs	r3, #1
 80079d4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 80079d8:	e1b8      	b.n	8007d4c <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_MINUTE_PROG_1:
				clock->getTimeDate(ProgramToSet.endTime);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	685a      	ldr	r2, [r3, #4]
 80079de:	f107 030c 	add.w	r3, r7, #12
 80079e2:	330a      	adds	r3, #10
 80079e4:	4619      	mov	r1, r3
 80079e6:	4610      	mov	r0, r2
 80079e8:	f7fb ff54 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.minute = externalCommand->getValueSetted();
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7fe fb25 	bl	8006040 <_ZN13SerialMessage14getValueSettedEv>
 80079f6:	4603      	mov	r3, r0
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	75fb      	strb	r3, [r7, #23]
				WichProgram = DRYER_PROGRAM_1;
 80079fc:	2300      	movs	r3, #0
 80079fe:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007a02:	2301      	movs	r3, #1
 8007a04:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007a08:	e1a0      	b.n	8007d4c <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_HOUR_PROG_1:
				clock->getTimeDate(ProgramToSet.endTime);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	685a      	ldr	r2, [r3, #4]
 8007a0e:	f107 030c 	add.w	r3, r7, #12
 8007a12:	330a      	adds	r3, #10
 8007a14:	4619      	mov	r1, r3
 8007a16:	4610      	mov	r0, r2
 8007a18:	f7fb ff3c 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.hour = externalCommand->getValueSetted();
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7fe fb0d 	bl	8006040 <_ZN13SerialMessage14getValueSettedEv>
 8007a26:	4603      	mov	r3, r0
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	763b      	strb	r3, [r7, #24]
				WichProgram = DRYER_PROGRAM_1;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007a32:	2301      	movs	r3, #1
 8007a34:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007a38:	e188      	b.n	8007d4c <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_TEMP_PROG_1:
				OldTemp = dryerPrograms[DRYER_PROGRAM_1].tempSetted;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a3e:	657b      	str	r3, [r7, #84]	; 0x54
				statusParam->temperatureSetted = externalCommand->getValueSetted();
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7fe fafb 	bl	8006040 <_ZN13SerialMessage14getValueSettedEv>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8007a50:	4610      	mov	r0, r2
 8007a52:	f7f9 f859 	bl	8000b08 <__aeabi_ui2f>
 8007a56:	4603      	mov	r3, r0
 8007a58:	6063      	str	r3, [r4, #4]
				for(int i = 0; i < NTemps; i++)
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	667b      	str	r3, [r7, #100]	; 0x64
 8007a5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a60:	2b0c      	cmp	r3, #12
 8007a62:	dc17      	bgt.n	8007a94 <_ZN10SmartDryer22serialComunicationCtrlEv+0x52c>
				{
					if((uint8_t)statusParam->temperatureSetted == paramTemperatures[i])
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7f9 f9f4 	bl	8000e58 <__aeabi_f2uiz>
 8007a70:	4603      	mov	r3, r0
 8007a72:	b2da      	uxtb	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8007a7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a7c:	440b      	add	r3, r1
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d103      	bne.n	8007a8c <_ZN10SmartDryer22serialComunicationCtrlEv+0x524>
					{
						TempFound = true;
 8007a84:	2301      	movs	r3, #1
 8007a86:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
 8007a8a:	e003      	b.n	8007a94 <_ZN10SmartDryer22serialComunicationCtrlEv+0x52c>
				for(int i = 0; i < NTemps; i++)
 8007a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a8e:	3301      	adds	r3, #1
 8007a90:	667b      	str	r3, [r7, #100]	; 0x64
 8007a92:	e7e4      	b.n	8007a5e <_ZN10SmartDryer22serialComunicationCtrlEv+0x4f6>
					}
				}
				if(!TempFound)
 8007a94:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007a98:	f083 0301 	eor.w	r3, r3, #1
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 814f 	beq.w	8007d42 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7da>
				{
					dryerPrograms[DRYER_PROGRAM_1].tempSetted = OldTemp;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007aa8:	661a      	str	r2, [r3, #96]	; 0x60
				}
				break;
 8007aaa:	e14a      	b.n	8007d42 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7da>
			case SerialMessage::SET_START_MINUTE_PROG_2:
				clock->getTimeDate(ProgramToSet.startTime);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	685a      	ldr	r2, [r3, #4]
 8007ab0:	f107 030c 	add.w	r3, r7, #12
 8007ab4:	3302      	adds	r3, #2
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	4610      	mov	r0, r2
 8007aba:	f7fb feeb 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.minute = externalCommand->getValueSetted();
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7fe fabc 	bl	8006040 <_ZN13SerialMessage14getValueSettedEv>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	73fb      	strb	r3, [r7, #15]
				WichProgram = DRYER_PROGRAM_2;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007ada:	e137      	b.n	8007d4c <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_START_HOUR_PROG_2:
				clock->getTimeDate(ProgramToSet.startTime);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	685a      	ldr	r2, [r3, #4]
 8007ae0:	f107 030c 	add.w	r3, r7, #12
 8007ae4:	3302      	adds	r3, #2
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	4610      	mov	r0, r2
 8007aea:	f7fb fed3 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.hour = externalCommand->getValueSetted();
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7fe faa4 	bl	8006040 <_ZN13SerialMessage14getValueSettedEv>
 8007af8:	4603      	mov	r3, r0
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	743b      	strb	r3, [r7, #16]
				WichProgram = DRYER_PROGRAM_2;
 8007afe:	2301      	movs	r3, #1
 8007b00:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007b04:	2301      	movs	r3, #1
 8007b06:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007b0a:	e11f      	b.n	8007d4c <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_MINUTE_PROG_2:
				clock->getTimeDate(ProgramToSet.endTime);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	f107 030c 	add.w	r3, r7, #12
 8007b14:	330a      	adds	r3, #10
 8007b16:	4619      	mov	r1, r3
 8007b18:	4610      	mov	r0, r2
 8007b1a:	f7fb febb 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.minute = externalCommand->getValueSetted();
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7fe fa8c 	bl	8006040 <_ZN13SerialMessage14getValueSettedEv>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	75fb      	strb	r3, [r7, #23]
				WichProgram = DRYER_PROGRAM_2;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007b34:	2301      	movs	r3, #1
 8007b36:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007b3a:	e107      	b.n	8007d4c <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_HOUR_PROG_2:
				clock->getTimeDate(ProgramToSet.endTime);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685a      	ldr	r2, [r3, #4]
 8007b40:	f107 030c 	add.w	r3, r7, #12
 8007b44:	330a      	adds	r3, #10
 8007b46:	4619      	mov	r1, r3
 8007b48:	4610      	mov	r0, r2
 8007b4a:	f7fb fea3 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.hour = externalCommand->getValueSetted();
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7fe fa74 	bl	8006040 <_ZN13SerialMessage14getValueSettedEv>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	763b      	strb	r3, [r7, #24]
				WichProgram = DRYER_PROGRAM_2;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007b64:	2301      	movs	r3, #1
 8007b66:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007b6a:	e0ef      	b.n	8007d4c <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_TEMP_PROG_2:
				OldTemp = dryerPrograms[DRYER_PROGRAM_2].tempSetted;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b70:	657b      	str	r3, [r7, #84]	; 0x54
				statusParam->temperatureSetted = externalCommand->getValueSetted();
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7fe fa62 	bl	8006040 <_ZN13SerialMessage14getValueSettedEv>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8007b82:	4610      	mov	r0, r2
 8007b84:	f7f8 ffc0 	bl	8000b08 <__aeabi_ui2f>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	6063      	str	r3, [r4, #4]
				for(int i = 0; i < NTemps; i++)
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	663b      	str	r3, [r7, #96]	; 0x60
 8007b90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b92:	2b0c      	cmp	r3, #12
 8007b94:	dc17      	bgt.n	8007bc6 <_ZN10SmartDryer22serialComunicationCtrlEv+0x65e>
				{
					if((uint8_t)statusParam->temperatureSetted == paramTemperatures[i])
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7f9 f95b 	bl	8000e58 <__aeabi_f2uiz>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	b2da      	uxtb	r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8007bac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bae:	440b      	add	r3, r1
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d103      	bne.n	8007bbe <_ZN10SmartDryer22serialComunicationCtrlEv+0x656>
					{
						TempFound = true;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
 8007bbc:	e003      	b.n	8007bc6 <_ZN10SmartDryer22serialComunicationCtrlEv+0x65e>
				for(int i = 0; i < NTemps; i++)
 8007bbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	663b      	str	r3, [r7, #96]	; 0x60
 8007bc4:	e7e4      	b.n	8007b90 <_ZN10SmartDryer22serialComunicationCtrlEv+0x628>
					}
				}
				if(!TempFound)
 8007bc6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007bca:	f083 0301 	eor.w	r3, r3, #1
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 80b8 	beq.w	8007d46 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7de>
				{
					dryerPrograms[DRYER_PROGRAM_2].tempSetted = OldTemp;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007bda:	679a      	str	r2, [r3, #120]	; 0x78
				}
				break;
 8007bdc:	e0b3      	b.n	8007d46 <_ZN10SmartDryer22serialComunicationCtrlEv+0x7de>
			case SerialMessage::SET_START_MINUTE_PROG_3:
				clock->getTimeDate(ProgramToSet.startTime);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	685a      	ldr	r2, [r3, #4]
 8007be2:	f107 030c 	add.w	r3, r7, #12
 8007be6:	3302      	adds	r3, #2
 8007be8:	4619      	mov	r1, r3
 8007bea:	4610      	mov	r0, r2
 8007bec:	f7fb fe52 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.minute = externalCommand->getValueSetted();
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7fe fa23 	bl	8006040 <_ZN13SerialMessage14getValueSettedEv>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	73fb      	strb	r3, [r7, #15]
				WichProgram = DRYER_PROGRAM_3;
 8007c00:	2302      	movs	r3, #2
 8007c02:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007c06:	2301      	movs	r3, #1
 8007c08:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007c0c:	e09e      	b.n	8007d4c <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_START_HOUR_PROG_3:
				clock->getTimeDate(ProgramToSet.startTime);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	685a      	ldr	r2, [r3, #4]
 8007c12:	f107 030c 	add.w	r3, r7, #12
 8007c16:	3302      	adds	r3, #2
 8007c18:	4619      	mov	r1, r3
 8007c1a:	4610      	mov	r0, r2
 8007c1c:	f7fb fe3a 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.startTime.hour = externalCommand->getValueSetted();
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7fe fa0b 	bl	8006040 <_ZN13SerialMessage14getValueSettedEv>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	743b      	strb	r3, [r7, #16]
				WichProgram = DRYER_PROGRAM_3;
 8007c30:	2302      	movs	r3, #2
 8007c32:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007c36:	2301      	movs	r3, #1
 8007c38:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007c3c:	e086      	b.n	8007d4c <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_MINUTE_PROG_3:
				clock->getTimeDate(ProgramToSet.endTime);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685a      	ldr	r2, [r3, #4]
 8007c42:	f107 030c 	add.w	r3, r7, #12
 8007c46:	330a      	adds	r3, #10
 8007c48:	4619      	mov	r1, r3
 8007c4a:	4610      	mov	r0, r2
 8007c4c:	f7fb fe22 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.minute = externalCommand->getValueSetted();
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7fe f9f3 	bl	8006040 <_ZN13SerialMessage14getValueSettedEv>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	75fb      	strb	r3, [r7, #23]
				WichProgram = DRYER_PROGRAM_3;
 8007c60:	2302      	movs	r3, #2
 8007c62:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007c66:	2301      	movs	r3, #1
 8007c68:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007c6c:	e06e      	b.n	8007d4c <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_END_HOUR_PROG_3:
				clock->getTimeDate(ProgramToSet.endTime);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685a      	ldr	r2, [r3, #4]
 8007c72:	f107 030c 	add.w	r3, r7, #12
 8007c76:	330a      	adds	r3, #10
 8007c78:	4619      	mov	r1, r3
 8007c7a:	4610      	mov	r0, r2
 8007c7c:	f7fb fe0a 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
				ProgramToSet.endTime.hour = externalCommand->getValueSetted();
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7fe f9db 	bl	8006040 <_ZN13SerialMessage14getValueSettedEv>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	763b      	strb	r3, [r7, #24]
				WichProgram = DRYER_PROGRAM_3;
 8007c90:	2302      	movs	r3, #2
 8007c92:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				SetProgramTime = true;
 8007c96:	2301      	movs	r3, #1
 8007c98:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				break;
 8007c9c:	e056      	b.n	8007d4c <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::SET_TEMP_PROG_3:
				OldTemp = dryerPrograms[DRYER_PROGRAM_3].tempSetted;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ca4:	657b      	str	r3, [r7, #84]	; 0x54
				statusParam->temperatureSetted = externalCommand->getValueSetted();
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fe f9c8 	bl	8006040 <_ZN13SerialMessage14getValueSettedEv>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8007cb6:	4610      	mov	r0, r2
 8007cb8:	f7f8 ff26 	bl	8000b08 <__aeabi_ui2f>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	6063      	str	r3, [r4, #4]
				for(int i = 0; i < NTemps; i++)
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cc6:	2b0c      	cmp	r3, #12
 8007cc8:	dc17      	bgt.n	8007cfa <_ZN10SmartDryer22serialComunicationCtrlEv+0x792>
				{
					if((uint8_t)statusParam->temperatureSetted == paramTemperatures[i])
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7f9 f8c1 	bl	8000e58 <__aeabi_f2uiz>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	b2da      	uxtb	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8007ce0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ce2:	440b      	add	r3, r1
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d103      	bne.n	8007cf2 <_ZN10SmartDryer22serialComunicationCtrlEv+0x78a>
					{
						TempFound = true;
 8007cea:	2301      	movs	r3, #1
 8007cec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						break;
 8007cf0:	e003      	b.n	8007cfa <_ZN10SmartDryer22serialComunicationCtrlEv+0x792>
				for(int i = 0; i < NTemps; i++)
 8007cf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cf8:	e7e4      	b.n	8007cc4 <_ZN10SmartDryer22serialComunicationCtrlEv+0x75c>
					}
				}
				if(!TempFound)
 8007cfa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007cfe:	f083 0301 	eor.w	r3, r3, #1
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d020      	beq.n	8007d4a <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e2>
				{
					dryerPrograms[DRYER_PROGRAM_3].tempSetted = OldTemp;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
				}
				break;
 8007d10:	e01b      	b.n	8007d4a <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e2>


			case SerialMessage::DRYER_ON:
				statusParam->dryerOn = true;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d16:	2201      	movs	r2, #1
 8007d18:	701a      	strb	r2, [r3, #0]
				break;
 8007d1a:	e017      	b.n	8007d4c <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::DRYER_OFF:
				statusParam->dryerOn = false;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d20:	2200      	movs	r2, #0
 8007d22:	701a      	strb	r2, [r3, #0]
				break;
 8007d24:	e012      	b.n	8007d4c <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::FAN_ON:
				statusParam->fanOn = true;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	709a      	strb	r2, [r3, #2]
				break;
 8007d2e:	e00d      	b.n	8007d4c <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
			case SerialMessage::FAN_OFF:
				statusParam->fanOn = false;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d34:	2200      	movs	r2, #0
 8007d36:	709a      	strb	r2, [r3, #2]
				break;
 8007d38:	e008      	b.n	8007d4c <_ZN10SmartDryer22serialComunicationCtrlEv+0x7e4>
				break;
			case SerialMessage::STOP_PROG_3:
				break;

			default:
				break;
 8007d3a:	bf00      	nop
 8007d3c:	e038      	b.n	8007db0 <_ZN10SmartDryer22serialComunicationCtrlEv+0x848>
				break;
 8007d3e:	bf00      	nop
 8007d40:	e036      	b.n	8007db0 <_ZN10SmartDryer22serialComunicationCtrlEv+0x848>
				break;
 8007d42:	bf00      	nop
 8007d44:	e034      	b.n	8007db0 <_ZN10SmartDryer22serialComunicationCtrlEv+0x848>
				break;
 8007d46:	bf00      	nop
 8007d48:	e032      	b.n	8007db0 <_ZN10SmartDryer22serialComunicationCtrlEv+0x848>
				break;
 8007d4a:	bf00      	nop
		}
 8007d4c:	e030      	b.n	8007db0 <_ZN10SmartDryer22serialComunicationCtrlEv+0x848>
	}
	else if(Command == SerialMessage::INVALID_MESSAGE)
 8007d4e:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8007d52:	f113 0f02 	cmn.w	r3, #2
 8007d56:	d127      	bne.n	8007da8 <_ZN10SmartDryer22serialComunicationCtrlEv+0x840>
	{
		externalCommand->sendMessage("Comando invalido, ricevuto: " + externalCommand->getCommandReceived());
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d60:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007d64:	4611      	mov	r1, r2
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7fe f97c 	bl	8006064 <_ZN13SerialMessage18getCommandReceivedB5cxx11Ev>
 8007d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d70:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007d74:	4925      	ldr	r1, [pc, #148]	; (8007e0c <_ZN10SmartDryer22serialComunicationCtrlEv+0x8a4>)
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7fc f988 	bl	800408c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8007d7c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8007d80:	2300      	movs	r3, #0
 8007d82:	2201      	movs	r2, #1
 8007d84:	4620      	mov	r0, r4
 8007d86:	f7fd fd9f 	bl	80058c8 <_ZN13SerialMessage11sendMessageENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbm>
 8007d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f009 fc95 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007d94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f009 fc90 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		statusParam->serialCommandReceived = true;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007da2:	2201      	movs	r2, #1
 8007da4:	729a      	strb	r2, [r3, #10]
 8007da6:	e003      	b.n	8007db0 <_ZN10SmartDryer22serialComunicationCtrlEv+0x848>
	}
	else
	{
		statusParam->serialCommandReceived = false;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dac:	2200      	movs	r2, #0
 8007dae:	729a      	strb	r2, [r3, #10]
	}
	if(SetProgramTime)
 8007db0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d024      	beq.n	8007e02 <_ZN10SmartDryer22serialComunicationCtrlEv+0x89a>
	{
		checkSettedProgramTime(WichProgram, ProgramToSet);
 8007db8:	f897 506d 	ldrb.w	r5, [r7, #109]	; 0x6d
 8007dbc:	466c      	mov	r4, sp
 8007dbe:	f107 0314 	add.w	r3, r7, #20
 8007dc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007dc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007dc8:	f107 030c 	add.w	r3, r7, #12
 8007dcc:	cb0c      	ldmia	r3, {r2, r3}
 8007dce:	4629      	mov	r1, r5
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7ff fa97 	bl	8007304 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE>
		dryerPrograms[WichProgram].programSetted = true;
 8007dd6:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 8007dda:	6879      	ldr	r1, [r7, #4]
 8007ddc:	4613      	mov	r3, r2
 8007dde:	005b      	lsls	r3, r3, #1
 8007de0:	4413      	add	r3, r2
 8007de2:	00db      	lsls	r3, r3, #3
 8007de4:	440b      	add	r3, r1
 8007de6:	334c      	adds	r3, #76	; 0x4c
 8007de8:	2201      	movs	r2, #1
 8007dea:	701a      	strb	r2, [r3, #0]
		if(eepromEnabled)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d005      	beq.n	8007e02 <_ZN10SmartDryer22serialComunicationCtrlEv+0x89a>
		{
			saveDryerProgram(WichProgram);
 8007df6:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f7fe ffbb 	bl	8006d78 <_ZN10SmartDryer16saveDryerProgramEh>
		}
	}
}
 8007e02:	bf00      	nop
 8007e04:	3770      	adds	r7, #112	; 0x70
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bdb0      	pop	{r4, r5, r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	0801292c 	.word	0x0801292c

08007e10 <_ZN10SmartDryer4testEv>:




void SmartDryer::test()
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]

}
 8007e18:	bf00      	nop
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bc80      	pop	{r7}
 8007e20:	4770      	bx	lr
	...

08007e24 <_ZN10SmartDryer5setupEv>:

void SmartDryer::setup()
{
 8007e24:	b590      	push	{r4, r7, lr}
 8007e26:	b0d9      	sub	sp, #356	; 0x164
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	1d3b      	adds	r3, r7, #4
 8007e2c:	6018      	str	r0, [r3, #0]
	uint32_t FirstBootVal = 0;
 8007e2e:	f107 030c 	add.w	r3, r7, #12
 8007e32:	2200      	movs	r2, #0
 8007e34:	601a      	str	r2, [r3, #0]
	display->setupLcd();
 8007e36:	1d3b      	adds	r3, r7, #4
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f7fc fcf5 	bl	800482c <_ZN13NHDST7565_LCD8setupLcdEv>
	clock->setup();
 8007e42:	1d3b      	adds	r3, r7, #4
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7fb fc05 	bl	8003658 <_ZN10DS1307_RTC5setupEv>
	rtcRunning = clock->isRunning();
 8007e4e:	1d3b      	adds	r3, r7, #4
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7fb fc19 	bl	800368c <_ZN10DS1307_RTC9isRunningEv>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	1d3b      	adds	r3, r7, #4
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44


	paramTemperatures = new uint8_t[NTemps];
 8007e66:	200d      	movs	r0, #13
 8007e68:	f009 fada 	bl	8011420 <_Znaj>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	461a      	mov	r2, r3
 8007e70:	1d3b      	adds	r3, r7, #4
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	for(int i = 0; i < NTemps; i++)
 8007e78:	2300      	movs	r3, #0
 8007e7a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8007e7e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8007e82:	2b0c      	cmp	r3, #12
 8007e84:	dc16      	bgt.n	8007eb4 <_ZN10SmartDryer5setupEv+0x90>
	{
		paramTemperatures[i] = 30 + (i * 5);
 8007e86:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	0092      	lsls	r2, r2, #2
 8007e90:	4413      	add	r3, r2
 8007e92:	b2da      	uxtb	r2, r3
 8007e94:	1d3b      	adds	r3, r7, #4
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8007e9c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8007ea0:	440b      	add	r3, r1
 8007ea2:	321e      	adds	r2, #30
 8007ea4:	b2d2      	uxtb	r2, r2
 8007ea6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NTemps; i++)
 8007ea8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8007eac:	3301      	adds	r3, #1
 8007eae:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8007eb2:	e7e4      	b.n	8007e7e <_ZN10SmartDryer5setupEv+0x5a>
	}

	physicalReleCtrl();
 8007eb4:	1d3b      	adds	r3, r7, #4
 8007eb6:	6818      	ldr	r0, [r3, #0]
 8007eb8:	f7fe fe14 	bl	8006ae4 <_ZN10SmartDryer16physicalReleCtrlEv>
	ledControl();
 8007ebc:	1d3b      	adds	r3, r7, #4
 8007ebe:	6818      	ldr	r0, [r3, #0]
 8007ec0:	f7fe fc34 	bl	800672c <_ZN10SmartDryer10ledControlEv>


	mainMenuHelpMsgs.push_back("Accende o spegne la resistenza");
 8007ec4:	1d3b      	adds	r3, r7, #4
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8007ecc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f009 fac3 	bl	801145c <_ZNSaIcEC1Ev>
 8007ed6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007eda:	f107 0310 	add.w	r3, r7, #16
 8007ede:	49bf      	ldr	r1, [pc, #764]	; (80081dc <_ZN10SmartDryer5setupEv+0x3b8>)
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f009 fd83 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007ee6:	f107 0310 	add.w	r3, r7, #16
 8007eea:	4619      	mov	r1, r3
 8007eec:	4620      	mov	r0, r4
 8007eee:	f003 f930 	bl	800b152 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8007ef2:	f107 0310 	add.w	r3, r7, #16
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f009 fbe1 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007efc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f00:	4618      	mov	r0, r3
 8007f02:	f009 faac 	bl	801145e <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Accende o spegne la ventola");
 8007f06:	1d3b      	adds	r3, r7, #4
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8007f0e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007f12:	4618      	mov	r0, r3
 8007f14:	f009 faa2 	bl	801145c <_ZNSaIcEC1Ev>
 8007f18:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8007f1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007f20:	49af      	ldr	r1, [pc, #700]	; (80081e0 <_ZN10SmartDryer5setupEv+0x3bc>)
 8007f22:	4618      	mov	r0, r3
 8007f24:	f009 fd62 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007f28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	4620      	mov	r0, r4
 8007f30:	f003 f90f 	bl	800b152 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8007f34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f009 fbc0 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007f3e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007f42:	4618      	mov	r0, r3
 8007f44:	f009 fa8b 	bl	801145e <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Imposta la temperatura di servizio");
 8007f48:	1d3b      	adds	r3, r7, #4
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8007f50:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007f54:	4618      	mov	r0, r3
 8007f56:	f009 fa81 	bl	801145c <_ZNSaIcEC1Ev>
 8007f5a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007f5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007f62:	49a0      	ldr	r1, [pc, #640]	; (80081e4 <_ZN10SmartDryer5setupEv+0x3c0>)
 8007f64:	4618      	mov	r0, r3
 8007f66:	f009 fd41 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007f6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007f6e:	4619      	mov	r1, r3
 8007f70:	4620      	mov	r0, r4
 8007f72:	f003 f8ee 	bl	800b152 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8007f76:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f009 fb9f 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007f80:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007f84:	4618      	mov	r0, r3
 8007f86:	f009 fa6a 	bl	801145e <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Avvia il dryer manualmente");
 8007f8a:	1d3b      	adds	r3, r7, #4
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8007f92:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007f96:	4618      	mov	r0, r3
 8007f98:	f009 fa60 	bl	801145c <_ZNSaIcEC1Ev>
 8007f9c:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8007fa0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007fa4:	4990      	ldr	r1, [pc, #576]	; (80081e8 <_ZN10SmartDryer5setupEv+0x3c4>)
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f009 fd20 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007fac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	f003 f8cd 	bl	800b152 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8007fb8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f009 fb7e 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007fc2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f009 fa49 	bl	801145e <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Modifica l'ora di sistema");
 8007fcc:	1d3b      	adds	r3, r7, #4
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8007fd4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f009 fa3f 	bl	801145c <_ZNSaIcEC1Ev>
 8007fde:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8007fe2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007fe6:	4981      	ldr	r1, [pc, #516]	; (80081ec <_ZN10SmartDryer5setupEv+0x3c8>)
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f009 fcff 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007fee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	f003 f8ac 	bl	800b152 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8007ffa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007ffe:	4618      	mov	r0, r3
 8008000:	f009 fb5d 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008004:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008008:	4618      	mov	r0, r3
 800800a:	f009 fa28 	bl	801145e <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Modifica la data di sistema");
 800800e:	1d3b      	adds	r3, r7, #4
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8008016:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800801a:	4618      	mov	r0, r3
 800801c:	f009 fa1e 	bl	801145c <_ZNSaIcEC1Ev>
 8008020:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8008024:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008028:	4971      	ldr	r1, [pc, #452]	; (80081f0 <_ZN10SmartDryer5setupEv+0x3cc>)
 800802a:	4618      	mov	r0, r3
 800802c:	f009 fcde 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008030:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008034:	4619      	mov	r1, r3
 8008036:	4620      	mov	r0, r4
 8008038:	f003 f88b 	bl	800b152 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 800803c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008040:	4618      	mov	r0, r3
 8008042:	f009 fb3c 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008046:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800804a:	4618      	mov	r0, r3
 800804c:	f009 fa07 	bl	801145e <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Imposta i programmi");
 8008050:	1d3b      	adds	r3, r7, #4
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8008058:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800805c:	4618      	mov	r0, r3
 800805e:	f009 f9fd 	bl	801145c <_ZNSaIcEC1Ev>
 8008062:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8008066:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800806a:	4962      	ldr	r1, [pc, #392]	; (80081f4 <_ZN10SmartDryer5setupEv+0x3d0>)
 800806c:	4618      	mov	r0, r3
 800806e:	f009 fcbd 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008072:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8008076:	4619      	mov	r1, r3
 8008078:	4620      	mov	r0, r4
 800807a:	f003 f86a 	bl	800b152 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 800807e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8008082:	4618      	mov	r0, r3
 8008084:	f009 fb1b 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008088:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800808c:	4618      	mov	r0, r3
 800808e:	f009 f9e6 	bl	801145e <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Seleziona il programma da avviare");
 8008092:	1d3b      	adds	r3, r7, #4
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 800809a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800809e:	4618      	mov	r0, r3
 80080a0:	f009 f9dc 	bl	801145c <_ZNSaIcEC1Ev>
 80080a4:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 80080a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80080ac:	4952      	ldr	r1, [pc, #328]	; (80081f8 <_ZN10SmartDryer5setupEv+0x3d4>)
 80080ae:	4618      	mov	r0, r3
 80080b0:	f009 fc9c 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80080b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80080b8:	4619      	mov	r1, r3
 80080ba:	4620      	mov	r0, r4
 80080bc:	f003 f849 	bl	800b152 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 80080c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80080c4:	4618      	mov	r0, r3
 80080c6:	f009 fafa 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80080ca:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80080ce:	4618      	mov	r0, r3
 80080d0:	f009 f9c5 	bl	801145e <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Backlight");
 80080d4:	1d3b      	adds	r3, r7, #4
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 80080dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080e0:	4618      	mov	r0, r3
 80080e2:	f009 f9bb 	bl	801145c <_ZNSaIcEC1Ev>
 80080e6:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80080ea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80080ee:	4943      	ldr	r1, [pc, #268]	; (80081fc <_ZN10SmartDryer5setupEv+0x3d8>)
 80080f0:	4618      	mov	r0, r3
 80080f2:	f009 fc7b 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80080f6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80080fa:	4619      	mov	r1, r3
 80080fc:	4620      	mov	r0, r4
 80080fe:	f003 f828 	bl	800b152 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8008102:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8008106:	4618      	mov	r0, r3
 8008108:	f009 fad9 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800810c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008110:	4618      	mov	r0, r3
 8008112:	f009 f9a4 	bl	801145e <_ZNSaIcED1Ev>
	mainMenuHelpMsgs.push_back("Mostra info sistema");
 8008116:	1d3b      	adds	r3, r7, #4
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 800811e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8008122:	4618      	mov	r0, r3
 8008124:	f009 f99a 	bl	801145c <_ZNSaIcEC1Ev>
 8008128:	f507 7292 	add.w	r2, r7, #292	; 0x124
 800812c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8008130:	4933      	ldr	r1, [pc, #204]	; (8008200 <_ZN10SmartDryer5setupEv+0x3dc>)
 8008132:	4618      	mov	r0, r3
 8008134:	f009 fc5a 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008138:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800813c:	4619      	mov	r1, r3
 800813e:	4620      	mov	r0, r4
 8008140:	f003 f807 	bl	800b152 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 8008144:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8008148:	4618      	mov	r0, r3
 800814a:	f009 fab8 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800814e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8008152:	4618      	mov	r0, r3
 8008154:	f009 f983 	bl	801145e <_ZNSaIcED1Ev>
	if(mainMenuHelpMsgs.size() < MAX_MENU_ITEMS)
 8008158:	1d3b      	adds	r3, r7, #4
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	33a4      	adds	r3, #164	; 0xa4
 800815e:	4618      	mov	r0, r3
 8008160:	f003 f808 	bl	800b174 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8008164:	4603      	mov	r3, r0
 8008166:	2b0a      	cmp	r3, #10
 8008168:	bf94      	ite	ls
 800816a:	2301      	movls	r3, #1
 800816c:	2300      	movhi	r3, #0
 800816e:	b2db      	uxtb	r3, r3
 8008170:	2b00      	cmp	r3, #0
 8008172:	d049      	beq.n	8008208 <_ZN10SmartDryer5setupEv+0x3e4>
	{
		mainMenuHelpMsgs.clear();
 8008174:	1d3b      	adds	r3, r7, #4
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	33a4      	adds	r3, #164	; 0xa4
 800817a:	4618      	mov	r0, r3
 800817c:	f003 f810 	bl	800b1a0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5clearEv>
		for(int i = 0; i < MAX_MENU_ITEMS; i++)
 8008180:	2300      	movs	r3, #0
 8008182:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8008186:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800818a:	2b0a      	cmp	r3, #10
 800818c:	dc3c      	bgt.n	8008208 <_ZN10SmartDryer5setupEv+0x3e4>
		{
			mainMenuHelpMsgs.push_back("");
 800818e:	1d3b      	adds	r3, r7, #4
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8008196:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800819a:	4618      	mov	r0, r3
 800819c:	f009 f95e 	bl	801145c <_ZNSaIcEC1Ev>
 80081a0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80081a4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80081a8:	4916      	ldr	r1, [pc, #88]	; (8008204 <_ZN10SmartDryer5setupEv+0x3e0>)
 80081aa:	4618      	mov	r0, r3
 80081ac:	f009 fc1e 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80081b0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80081b4:	4619      	mov	r1, r3
 80081b6:	4620      	mov	r0, r4
 80081b8:	f002 ffcb 	bl	800b152 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>
 80081bc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80081c0:	4618      	mov	r0, r3
 80081c2:	f009 fa7c 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80081c6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80081ca:	4618      	mov	r0, r3
 80081cc:	f009 f947 	bl	801145e <_ZNSaIcED1Ev>
		for(int i = 0; i < MAX_MENU_ITEMS; i++)
 80081d0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80081d4:	3301      	adds	r3, #1
 80081d6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80081da:	e7d4      	b.n	8008186 <_ZN10SmartDryer5setupEv+0x362>
 80081dc:	0801294c 	.word	0x0801294c
 80081e0:	0801296c 	.word	0x0801296c
 80081e4:	08012988 	.word	0x08012988
 80081e8:	080129ac 	.word	0x080129ac
 80081ec:	080129c8 	.word	0x080129c8
 80081f0:	080129e4 	.word	0x080129e4
 80081f4:	08012a00 	.word	0x08012a00
 80081f8:	08012a14 	.word	0x08012a14
 80081fc:	08012a38 	.word	0x08012a38
 8008200:	08012a44 	.word	0x08012a44
 8008204:	08012a58 	.word	0x08012a58
		}
	}


	mainMenu->menuTitle = "Menu principale";
 8008208:	1d3b      	adds	r3, r7, #4
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008210:	49cc      	ldr	r1, [pc, #816]	; (8008544 <_ZN10SmartDryer5setupEv+0x720>)
 8008212:	4618      	mov	r0, r3
 8008214:	f009 fb37 	bl	8011886 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	mainMenu->menuVoices = mainMenuVoices;
 8008218:	1d3b      	adds	r3, r7, #4
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008220:	4ac9      	ldr	r2, [pc, #804]	; (8008548 <_ZN10SmartDryer5setupEv+0x724>)
 8008222:	619a      	str	r2, [r3, #24]
	mainMenu->XPos = MENU_LEFT_LIST_XPOS;
 8008224:	1d3b      	adds	r3, r7, #4
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800822c:	2205      	movs	r2, #5
 800822e:	771a      	strb	r2, [r3, #28]
	mainMenu->YPos = MENU_LIST_YPOS;
 8008230:	1d3b      	adds	r3, r7, #4
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008238:	2214      	movs	r2, #20
 800823a:	775a      	strb	r2, [r3, #29]
	mainMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 800823c:	1d3b      	adds	r3, r7, #4
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	1d3b      	adds	r3, r7, #4
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800824a:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 800824e:	621a      	str	r2, [r3, #32]
	mainMenu->topItemPos = 0;
 8008250:	1d3b      	adds	r3, r7, #4
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008258:	2200      	movs	r2, #0
 800825a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	mainMenu->itemSelected = 0;
 800825e:	1d3b      	adds	r3, r7, #4
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008266:	2200      	movs	r2, #0
 8008268:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	mainMenu->maxMenuLines = 0;
 800826c:	1d3b      	adds	r3, r7, #4
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008274:	2200      	movs	r2, #0
 8008276:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	mainMenu->maxMenuItems = sizeof(mainMenuVoices)/sizeof(mainMenuVoices[0]);
 800827a:	1d3b      	adds	r3, r7, #4
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008282:	220a      	movs	r2, #10
 8008284:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	mainMenu->withChebox = false;
 8008288:	1d3b      	adds	r3, r7, #4
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008290:	2200      	movs	r2, #0
 8008292:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	mainMenu->itemsChecked = NULL;
 8008296:	1d3b      	adds	r3, r7, #4
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800829e:	2200      	movs	r2, #0
 80082a0:	62da      	str	r2, [r3, #44]	; 0x2c
	mainMenu->paramAssociated = NULL;
 80082a2:	1d3b      	adds	r3, r7, #4
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80082aa:	2200      	movs	r2, #0
 80082ac:	631a      	str	r2, [r3, #48]	; 0x30
	mainMenu->paramType = NO_TYPE;
 80082ae:	1d3b      	adds	r3, r7, #4
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	mainMenu->menuSelected = true;
 80082bc:	1d3b      	adds	r3, r7, #4
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80082c4:	2201      	movs	r2, #1
 80082c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	thermoMenuCtrl->menuTitle = "Ctrl. thermo";
 80082ca:	1d3b      	adds	r3, r7, #4
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80082d2:	499e      	ldr	r1, [pc, #632]	; (800854c <_ZN10SmartDryer5setupEv+0x728>)
 80082d4:	4618      	mov	r0, r3
 80082d6:	f009 fad6 	bl	8011886 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	thermoMenuCtrl->menuVoices = OnOff;
 80082da:	1d3b      	adds	r3, r7, #4
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80082e2:	4a9b      	ldr	r2, [pc, #620]	; (8008550 <_ZN10SmartDryer5setupEv+0x72c>)
 80082e4:	619a      	str	r2, [r3, #24]
	thermoMenuCtrl->XPos = MENU_RIGHT_LIST_XPOS;
 80082e6:	1d3b      	adds	r3, r7, #4
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80082ee:	223c      	movs	r2, #60	; 0x3c
 80082f0:	771a      	strb	r2, [r3, #28]
	thermoMenuCtrl->YPos = MENU_LIST_YPOS;
 80082f2:	1d3b      	adds	r3, r7, #4
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80082fa:	2214      	movs	r2, #20
 80082fc:	775a      	strb	r2, [r3, #29]
	thermoMenuCtrl->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 80082fe:	1d3b      	adds	r3, r7, #4
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	1d3b      	adds	r3, r7, #4
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800830c:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8008310:	621a      	str	r2, [r3, #32]
	thermoMenuCtrl->topItemPos = 0;
 8008312:	1d3b      	adds	r3, r7, #4
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800831a:	2200      	movs	r2, #0
 800831c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	thermoMenuCtrl->itemSelected = 0;
 8008320:	1d3b      	adds	r3, r7, #4
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008328:	2200      	movs	r2, #0
 800832a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	thermoMenuCtrl->maxMenuLines = 0;
 800832e:	1d3b      	adds	r3, r7, #4
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008336:	2200      	movs	r2, #0
 8008338:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	thermoMenuCtrl->maxMenuItems = sizeof(OnOff)/sizeof(OnOff[0]);
 800833c:	1d3b      	adds	r3, r7, #4
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008344:	2202      	movs	r2, #2
 8008346:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	thermoMenuCtrl->withChebox = true;
 800834a:	1d3b      	adds	r3, r7, #4
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008352:	2201      	movs	r2, #1
 8008354:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	thermoMenuCtrl->itemsChecked = new bool(thermoMenuCtrl->maxMenuItems);
 8008358:	2001      	movs	r0, #1
 800835a:	f009 f863 	bl	8011424 <_Znwj>
 800835e:	4603      	mov	r3, r0
 8008360:	1d3a      	adds	r2, r7, #4
 8008362:	6812      	ldr	r2, [r2, #0]
 8008364:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 8008368:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800836c:	2a00      	cmp	r2, #0
 800836e:	bf14      	ite	ne
 8008370:	2201      	movne	r2, #1
 8008372:	2200      	moveq	r2, #0
 8008374:	b2d2      	uxtb	r2, r2
 8008376:	701a      	strb	r2, [r3, #0]
 8008378:	1d3a      	adds	r2, r7, #4
 800837a:	6812      	ldr	r2, [r2, #0]
 800837c:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 8008380:	62d3      	str	r3, [r2, #44]	; 0x2c
	thermoMenuCtrl->paramAssociated = (bool *)&statusParam->thermoOn;
 8008382:	1d3b      	adds	r3, r7, #4
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008388:	1d3b      	adds	r3, r7, #4
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008390:	3201      	adds	r2, #1
 8008392:	631a      	str	r2, [r3, #48]	; 0x30
	thermoMenuCtrl->paramType = PARAM_BOOL_TYPE;
 8008394:	1d3b      	adds	r3, r7, #4
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800839c:	2201      	movs	r2, #1
 800839e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	thermoMenuCtrl->menuSelected = true;
 80083a2:	1d3b      	adds	r3, r7, #4
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	fanMenuCtrl->menuTitle = "Ctrl. ventola";
 80083b0:	1d3b      	adds	r3, r7, #4
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80083b8:	4966      	ldr	r1, [pc, #408]	; (8008554 <_ZN10SmartDryer5setupEv+0x730>)
 80083ba:	4618      	mov	r0, r3
 80083bc:	f009 fa63 	bl	8011886 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	fanMenuCtrl->menuVoices = OnOff;
 80083c0:	1d3b      	adds	r3, r7, #4
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80083c8:	4a61      	ldr	r2, [pc, #388]	; (8008550 <_ZN10SmartDryer5setupEv+0x72c>)
 80083ca:	619a      	str	r2, [r3, #24]
	fanMenuCtrl->XPos = MENU_RIGHT_LIST_XPOS;
 80083cc:	1d3b      	adds	r3, r7, #4
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80083d4:	223c      	movs	r2, #60	; 0x3c
 80083d6:	771a      	strb	r2, [r3, #28]
	fanMenuCtrl->YPos = MENU_LIST_YPOS;
 80083d8:	1d3b      	adds	r3, r7, #4
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80083e0:	2214      	movs	r2, #20
 80083e2:	775a      	strb	r2, [r3, #29]
	fanMenuCtrl->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 80083e4:	1d3b      	adds	r3, r7, #4
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	1d3b      	adds	r3, r7, #4
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80083f2:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 80083f6:	621a      	str	r2, [r3, #32]
	fanMenuCtrl->topItemPos = 0;
 80083f8:	1d3b      	adds	r3, r7, #4
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008400:	2200      	movs	r2, #0
 8008402:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	fanMenuCtrl->itemSelected = 0;
 8008406:	1d3b      	adds	r3, r7, #4
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800840e:	2200      	movs	r2, #0
 8008410:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	fanMenuCtrl->maxMenuLines = 0;
 8008414:	1d3b      	adds	r3, r7, #4
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800841c:	2200      	movs	r2, #0
 800841e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	fanMenuCtrl->maxMenuItems = sizeof(OnOff)/sizeof(OnOff[0]);
 8008422:	1d3b      	adds	r3, r7, #4
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800842a:	2202      	movs	r2, #2
 800842c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	fanMenuCtrl->withChebox = true;
 8008430:	1d3b      	adds	r3, r7, #4
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008438:	2201      	movs	r2, #1
 800843a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	fanMenuCtrl->itemsChecked = new bool(fanMenuCtrl->maxMenuItems);
 800843e:	2001      	movs	r0, #1
 8008440:	f008 fff0 	bl	8011424 <_Znwj>
 8008444:	4603      	mov	r3, r0
 8008446:	1d3a      	adds	r2, r7, #4
 8008448:	6812      	ldr	r2, [r2, #0]
 800844a:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 800844e:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8008452:	2a00      	cmp	r2, #0
 8008454:	bf14      	ite	ne
 8008456:	2201      	movne	r2, #1
 8008458:	2200      	moveq	r2, #0
 800845a:	b2d2      	uxtb	r2, r2
 800845c:	701a      	strb	r2, [r3, #0]
 800845e:	1d3a      	adds	r2, r7, #4
 8008460:	6812      	ldr	r2, [r2, #0]
 8008462:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 8008466:	62d3      	str	r3, [r2, #44]	; 0x2c
	fanMenuCtrl->paramAssociated = (bool *)&statusParam->fanOn;
 8008468:	1d3b      	adds	r3, r7, #4
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800846e:	1d3b      	adds	r3, r7, #4
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008476:	3202      	adds	r2, #2
 8008478:	631a      	str	r2, [r3, #48]	; 0x30
	fanMenuCtrl->paramType = PARAM_BOOL_TYPE;
 800847a:	1d3b      	adds	r3, r7, #4
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008482:	2201      	movs	r2, #1
 8008484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	fanMenuCtrl->menuSelected = true;
 8008488:	1d3b      	adds	r3, r7, #4
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008490:	2201      	movs	r2, #1
 8008492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	startDryerMenu->menuTitle = "Avvia dryer";
 8008496:	1d3b      	adds	r3, r7, #4
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800849e:	492e      	ldr	r1, [pc, #184]	; (8008558 <_ZN10SmartDryer5setupEv+0x734>)
 80084a0:	4618      	mov	r0, r3
 80084a2:	f009 f9f0 	bl	8011886 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	startDryerMenu->menuVoices = OnOff;
 80084a6:	1d3b      	adds	r3, r7, #4
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80084ae:	4a28      	ldr	r2, [pc, #160]	; (8008550 <_ZN10SmartDryer5setupEv+0x72c>)
 80084b0:	619a      	str	r2, [r3, #24]
	startDryerMenu->XPos = MENU_RIGHT_LIST_XPOS;
 80084b2:	1d3b      	adds	r3, r7, #4
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80084ba:	223c      	movs	r2, #60	; 0x3c
 80084bc:	771a      	strb	r2, [r3, #28]
	startDryerMenu->YPos = MENU_LIST_YPOS;
 80084be:	1d3b      	adds	r3, r7, #4
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80084c6:	2214      	movs	r2, #20
 80084c8:	775a      	strb	r2, [r3, #29]
	startDryerMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 80084ca:	1d3b      	adds	r3, r7, #4
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	1d3b      	adds	r3, r7, #4
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80084d8:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 80084dc:	621a      	str	r2, [r3, #32]
	startDryerMenu->topItemPos = 0;
 80084de:	1d3b      	adds	r3, r7, #4
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	startDryerMenu->itemSelected = 0;
 80084ec:	1d3b      	adds	r3, r7, #4
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	startDryerMenu->maxMenuLines = 0;
 80084fa:	1d3b      	adds	r3, r7, #4
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008502:	2200      	movs	r2, #0
 8008504:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	startDryerMenu->maxMenuItems = sizeof(OnOff)/sizeof(OnOff[0]);
 8008508:	1d3b      	adds	r3, r7, #4
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008510:	2202      	movs	r2, #2
 8008512:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	startDryerMenu->withChebox = true;
 8008516:	1d3b      	adds	r3, r7, #4
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800851e:	2201      	movs	r2, #1
 8008520:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	startDryerMenu->itemsChecked = new bool(startDryerMenu->maxMenuItems);
 8008524:	2001      	movs	r0, #1
 8008526:	f008 ff7d 	bl	8011424 <_Znwj>
 800852a:	4603      	mov	r3, r0
 800852c:	1d3a      	adds	r2, r7, #4
 800852e:	6812      	ldr	r2, [r2, #0]
 8008530:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 8008534:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8008538:	2a00      	cmp	r2, #0
 800853a:	bf14      	ite	ne
 800853c:	2201      	movne	r2, #1
 800853e:	2200      	moveq	r2, #0
 8008540:	e00c      	b.n	800855c <_ZN10SmartDryer5setupEv+0x738>
 8008542:	bf00      	nop
 8008544:	08012a5c 	.word	0x08012a5c
 8008548:	20000030 	.word	0x20000030
 800854c:	08012a6c 	.word	0x08012a6c
 8008550:	20000058 	.word	0x20000058
 8008554:	08012a7c 	.word	0x08012a7c
 8008558:	08012854 	.word	0x08012854
 800855c:	b2d2      	uxtb	r2, r2
 800855e:	701a      	strb	r2, [r3, #0]
 8008560:	1d3a      	adds	r2, r7, #4
 8008562:	6812      	ldr	r2, [r2, #0]
 8008564:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 8008568:	62d3      	str	r3, [r2, #44]	; 0x2c
	startDryerMenu->paramAssociated = (bool *)&statusParam->dryerOn;
 800856a:	1d3b      	adds	r3, r7, #4
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008570:	1d3b      	adds	r3, r7, #4
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008578:	631a      	str	r2, [r3, #48]	; 0x30
	startDryerMenu->paramType = PARAM_BOOL_TYPE;
 800857a:	1d3b      	adds	r3, r7, #4
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008582:	2201      	movs	r2, #1
 8008584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	startDryerMenu->menuSelected = true;
 8008588:	1d3b      	adds	r3, r7, #4
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008590:	2201      	movs	r2, #1
 8008592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	tempMenuCtrl->menuTitle = "Imposta temp.";
 8008596:	1d3b      	adds	r3, r7, #4
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800859e:	49cc      	ldr	r1, [pc, #816]	; (80088d0 <_ZN10SmartDryer5setupEv+0xaac>)
 80085a0:	4618      	mov	r0, r3
 80085a2:	f009 f970 	bl	8011886 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	tempMenuCtrl->menuVoices = Temps;
 80085a6:	1d3b      	adds	r3, r7, #4
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80085ae:	4ac9      	ldr	r2, [pc, #804]	; (80088d4 <_ZN10SmartDryer5setupEv+0xab0>)
 80085b0:	619a      	str	r2, [r3, #24]
	tempMenuCtrl->XPos = MENU_RIGHT_LIST_XPOS;
 80085b2:	1d3b      	adds	r3, r7, #4
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80085ba:	223c      	movs	r2, #60	; 0x3c
 80085bc:	771a      	strb	r2, [r3, #28]
	tempMenuCtrl->YPos = MENU_LIST_YPOS;
 80085be:	1d3b      	adds	r3, r7, #4
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80085c6:	2214      	movs	r2, #20
 80085c8:	775a      	strb	r2, [r3, #29]
	tempMenuCtrl->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 80085ca:	1d3b      	adds	r3, r7, #4
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	1d3b      	adds	r3, r7, #4
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80085d8:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 80085dc:	621a      	str	r2, [r3, #32]
	tempMenuCtrl->topItemPos = 0;
 80085de:	1d3b      	adds	r3, r7, #4
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80085e6:	2200      	movs	r2, #0
 80085e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	tempMenuCtrl->itemSelected = 0;
 80085ec:	1d3b      	adds	r3, r7, #4
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80085f4:	2200      	movs	r2, #0
 80085f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	tempMenuCtrl->maxMenuLines = 0;
 80085fa:	1d3b      	adds	r3, r7, #4
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008602:	2200      	movs	r2, #0
 8008604:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	tempMenuCtrl->maxMenuItems = sizeof(Temps)/sizeof(Temps[0]);;
 8008608:	1d3b      	adds	r3, r7, #4
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008610:	220d      	movs	r2, #13
 8008612:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	tempMenuCtrl->withChebox = true;
 8008616:	1d3b      	adds	r3, r7, #4
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800861e:	2201      	movs	r2, #1
 8008620:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	tempMenuCtrl->itemsChecked = new bool(tempMenuCtrl->maxMenuItems);
 8008624:	2001      	movs	r0, #1
 8008626:	f008 fefd 	bl	8011424 <_Znwj>
 800862a:	4603      	mov	r3, r0
 800862c:	1d3a      	adds	r2, r7, #4
 800862e:	6812      	ldr	r2, [r2, #0]
 8008630:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 8008634:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8008638:	2a00      	cmp	r2, #0
 800863a:	bf14      	ite	ne
 800863c:	2201      	movne	r2, #1
 800863e:	2200      	moveq	r2, #0
 8008640:	b2d2      	uxtb	r2, r2
 8008642:	701a      	strb	r2, [r3, #0]
 8008644:	1d3a      	adds	r2, r7, #4
 8008646:	6812      	ldr	r2, [r2, #0]
 8008648:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 800864c:	62d3      	str	r3, [r2, #44]	; 0x2c
	tempMenuCtrl->paramAssociated = (float *)&statusParam->temperatureSetted;
 800864e:	1d3b      	adds	r3, r7, #4
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008654:	1d3b      	adds	r3, r7, #4
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800865c:	3204      	adds	r2, #4
 800865e:	631a      	str	r2, [r3, #48]	; 0x30
	tempMenuCtrl->paramType = PARAM_FLOAT_TYPE;
 8008660:	1d3b      	adds	r3, r7, #4
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008668:	2204      	movs	r2, #4
 800866a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	tempMenuCtrl->menuSelected = true;
 800866e:	1d3b      	adds	r3, r7, #4
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008676:	2201      	movs	r2, #1
 8008678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	changeProgramsMenu->menuTitle = "Modifica programma";
 800867c:	1d3b      	adds	r3, r7, #4
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008684:	4994      	ldr	r1, [pc, #592]	; (80088d8 <_ZN10SmartDryer5setupEv+0xab4>)
 8008686:	4618      	mov	r0, r3
 8008688:	f009 f8fd 	bl	8011886 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	changeProgramsMenu->menuVoices = programsMenuVoices;
 800868c:	1d3b      	adds	r3, r7, #4
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008694:	4a91      	ldr	r2, [pc, #580]	; (80088dc <_ZN10SmartDryer5setupEv+0xab8>)
 8008696:	619a      	str	r2, [r3, #24]
	changeProgramsMenu->XPos = MENU_LEFT_LIST_XPOS;
 8008698:	1d3b      	adds	r3, r7, #4
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80086a0:	2205      	movs	r2, #5
 80086a2:	771a      	strb	r2, [r3, #28]
	changeProgramsMenu->YPos = MENU_LIST_YPOS;
 80086a4:	1d3b      	adds	r3, r7, #4
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80086ac:	2214      	movs	r2, #20
 80086ae:	775a      	strb	r2, [r3, #29]
	changeProgramsMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 80086b0:	1d3b      	adds	r3, r7, #4
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	1d3b      	adds	r3, r7, #4
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80086be:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 80086c2:	621a      	str	r2, [r3, #32]
	changeProgramsMenu->topItemPos = 0;
 80086c4:	1d3b      	adds	r3, r7, #4
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80086cc:	2200      	movs	r2, #0
 80086ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	changeProgramsMenu->itemSelected = 0;
 80086d2:	1d3b      	adds	r3, r7, #4
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80086da:	2200      	movs	r2, #0
 80086dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	changeProgramsMenu->maxMenuLines = 0;
 80086e0:	1d3b      	adds	r3, r7, #4
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	changeProgramsMenu->maxMenuItems = sizeof(programsMenuVoices)/sizeof(programsMenuVoices[0]);
 80086ee:	1d3b      	adds	r3, r7, #4
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80086f6:	2203      	movs	r2, #3
 80086f8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	changeProgramsMenu->withChebox = false;
 80086fc:	1d3b      	adds	r3, r7, #4
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008704:	2200      	movs	r2, #0
 8008706:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	changeProgramsMenu->itemsChecked = NULL;
 800870a:	1d3b      	adds	r3, r7, #4
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008712:	2200      	movs	r2, #0
 8008714:	62da      	str	r2, [r3, #44]	; 0x2c
	changeProgramsMenu->paramAssociated = NULL;
 8008716:	1d3b      	adds	r3, r7, #4
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800871e:	2200      	movs	r2, #0
 8008720:	631a      	str	r2, [r3, #48]	; 0x30
	changeProgramsMenu->paramType = NO_TYPE;
 8008722:	1d3b      	adds	r3, r7, #4
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800872a:	2200      	movs	r2, #0
 800872c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	changeProgramsMenu->menuSelected = true;
 8008730:	1d3b      	adds	r3, r7, #4
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008738:	2201      	movs	r2, #1
 800873a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	startProgramsMenu->menuTitle = "Avvia programma";
 800873e:	1d3b      	adds	r3, r7, #4
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008746:	4966      	ldr	r1, [pc, #408]	; (80088e0 <_ZN10SmartDryer5setupEv+0xabc>)
 8008748:	4618      	mov	r0, r3
 800874a:	f009 f89c 	bl	8011886 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	startProgramsMenu->menuVoices = programsMenuVoices;
 800874e:	1d3b      	adds	r3, r7, #4
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008756:	4a61      	ldr	r2, [pc, #388]	; (80088dc <_ZN10SmartDryer5setupEv+0xab8>)
 8008758:	619a      	str	r2, [r3, #24]
	startProgramsMenu->XPos = MENU_LEFT_LIST_XPOS;
 800875a:	1d3b      	adds	r3, r7, #4
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008762:	2205      	movs	r2, #5
 8008764:	771a      	strb	r2, [r3, #28]
	startProgramsMenu->YPos = MENU_LIST_YPOS;
 8008766:	1d3b      	adds	r3, r7, #4
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800876e:	2214      	movs	r2, #20
 8008770:	775a      	strb	r2, [r3, #29]
	startProgramsMenu->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 8008772:	1d3b      	adds	r3, r7, #4
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	1d3b      	adds	r3, r7, #4
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008780:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8008784:	621a      	str	r2, [r3, #32]
	startProgramsMenu->topItemPos = 0;
 8008786:	1d3b      	adds	r3, r7, #4
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800878e:	2200      	movs	r2, #0
 8008790:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	startProgramsMenu->itemSelected = 0;
 8008794:	1d3b      	adds	r3, r7, #4
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800879c:	2200      	movs	r2, #0
 800879e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	startProgramsMenu->maxMenuLines = 0;
 80087a2:	1d3b      	adds	r3, r7, #4
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	startProgramsMenu->maxMenuItems = sizeof(programsMenuVoices)/sizeof(programsMenuVoices[0]);
 80087b0:	1d3b      	adds	r3, r7, #4
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80087b8:	2203      	movs	r2, #3
 80087ba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	startProgramsMenu->withChebox = false;
 80087be:	1d3b      	adds	r3, r7, #4
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80087c6:	2200      	movs	r2, #0
 80087c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	startProgramsMenu->itemsChecked = NULL;
 80087cc:	1d3b      	adds	r3, r7, #4
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80087d4:	2200      	movs	r2, #0
 80087d6:	62da      	str	r2, [r3, #44]	; 0x2c
	startProgramsMenu->paramAssociated = NULL;
 80087d8:	1d3b      	adds	r3, r7, #4
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80087e0:	2200      	movs	r2, #0
 80087e2:	631a      	str	r2, [r3, #48]	; 0x30
	startProgramsMenu->paramType = NO_TYPE;
 80087e4:	1d3b      	adds	r3, r7, #4
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	startProgramsMenu->menuSelected = true;
 80087f2:	1d3b      	adds	r3, r7, #4
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	backlightCtrl->menuTitle = "BackLight";
 8008800:	1d3b      	adds	r3, r7, #4
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8008808:	4936      	ldr	r1, [pc, #216]	; (80088e4 <_ZN10SmartDryer5setupEv+0xac0>)
 800880a:	4618      	mov	r0, r3
 800880c:	f009 f83b 	bl	8011886 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	backlightCtrl->menuVoices = BackLightLabels;
 8008810:	1d3b      	adds	r3, r7, #4
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8008818:	4a33      	ldr	r2, [pc, #204]	; (80088e8 <_ZN10SmartDryer5setupEv+0xac4>)
 800881a:	619a      	str	r2, [r3, #24]
	backlightCtrl->XPos = MENU_RIGHT_LIST_XPOS;
 800881c:	1d3b      	adds	r3, r7, #4
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8008824:	223c      	movs	r2, #60	; 0x3c
 8008826:	771a      	strb	r2, [r3, #28]
	backlightCtrl->YPos = MENU_LIST_YPOS;
 8008828:	1d3b      	adds	r3, r7, #4
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8008830:	2214      	movs	r2, #20
 8008832:	775a      	strb	r2, [r3, #29]
	backlightCtrl->menuFont = display->displayFonts[NHDST7565_LCD::W_5_H_8];
 8008834:	1d3b      	adds	r3, r7, #4
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	1d3b      	adds	r3, r7, #4
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8008842:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8008846:	621a      	str	r2, [r3, #32]
	backlightCtrl->topItemPos = 0;
 8008848:	1d3b      	adds	r3, r7, #4
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8008850:	2200      	movs	r2, #0
 8008852:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	backlightCtrl->itemSelected = 0;
 8008856:	1d3b      	adds	r3, r7, #4
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800885e:	2200      	movs	r2, #0
 8008860:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	backlightCtrl->maxMenuLines = 0;
 8008864:	1d3b      	adds	r3, r7, #4
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800886c:	2200      	movs	r2, #0
 800886e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	backlightCtrl->maxMenuItems = sizeof(BackLightLabels)/sizeof(BackLightLabels[0]);
 8008872:	1d3b      	adds	r3, r7, #4
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800887a:	2203      	movs	r2, #3
 800887c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	backlightCtrl->withChebox = true;
 8008880:	1d3b      	adds	r3, r7, #4
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8008888:	2201      	movs	r2, #1
 800888a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	backlightCtrl->itemsChecked = new bool(backlightCtrl->maxMenuItems);
 800888e:	2001      	movs	r0, #1
 8008890:	f008 fdc8 	bl	8011424 <_Znwj>
 8008894:	4603      	mov	r3, r0
 8008896:	1d3a      	adds	r2, r7, #4
 8008898:	6812      	ldr	r2, [r2, #0]
 800889a:	f8d2 20cc 	ldr.w	r2, [r2, #204]	; 0xcc
 800889e:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 80088a2:	2a00      	cmp	r2, #0
 80088a4:	bf14      	ite	ne
 80088a6:	2201      	movne	r2, #1
 80088a8:	2200      	moveq	r2, #0
 80088aa:	b2d2      	uxtb	r2, r2
 80088ac:	701a      	strb	r2, [r3, #0]
 80088ae:	1d3a      	adds	r2, r7, #4
 80088b0:	6812      	ldr	r2, [r2, #0]
 80088b2:	f8d2 20cc 	ldr.w	r2, [r2, #204]	; 0xcc
 80088b6:	62d3      	str	r3, [r2, #44]	; 0x2c
	backlightCtrl->paramAssociated = (uint8_t *)&statusParam->backlightStatus;
 80088b8:	1d3b      	adds	r3, r7, #4
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80088be:	1d3b      	adds	r3, r7, #4
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80088c6:	320b      	adds	r2, #11
 80088c8:	631a      	str	r2, [r3, #48]	; 0x30
	backlightCtrl->paramType = PARAM_VALUE_UINT_TYPE;
 80088ca:	1d3b      	adds	r3, r7, #4
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	e00d      	b.n	80088ec <_ZN10SmartDryer5setupEv+0xac8>
 80088d0:	08012844 	.word	0x08012844
 80088d4:	2000006c 	.word	0x2000006c
 80088d8:	08012a8c 	.word	0x08012a8c
 80088dc:	200000a0 	.word	0x200000a0
 80088e0:	08012890 	.word	0x08012890
 80088e4:	08012aa0 	.word	0x08012aa0
 80088e8:	20000060 	.word	0x20000060
 80088ec:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80088f0:	2202      	movs	r2, #2
 80088f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	backlightCtrl->menuSelected = true;
 80088f6:	1d3b      	adds	r3, r7, #4
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	if(eepromEnabled)
 8008904:	1d3b      	adds	r3, r7, #4
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
 800890c:	2b00      	cmp	r3, #0
 800890e:	f000 80ca 	beq.w	8008aa6 <_ZN10SmartDryer5setupEv+0xc82>
	{
		if(resetMemory)
 8008912:	1d3b      	adds	r3, r7, #4
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 800891a:	2b00      	cmp	r3, #0
 800891c:	d010      	beq.n	8008940 <_ZN10SmartDryer5setupEv+0xb1c>
		{
			FirstBootVal = 500;
 800891e:	f107 030c 	add.w	r3, r7, #12
 8008922:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008926:	601a      	str	r2, [r3, #0]
			memory->writeToMemory(FIRST_BOOT, FirstBootVal, MEM_TRANSFER);
 8008928:	1d3b      	adds	r3, r7, #4
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	6998      	ldr	r0, [r3, #24]
 800892e:	f107 030c 	add.w	r3, r7, #12
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	2301      	movs	r3, #1
 8008936:	2100      	movs	r1, #0
 8008938:	f7fc fd57 	bl	80053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>
			ResetSystem;
 800893c:	f004 fb7c 	bl	800d038 <HAL_NVIC_SystemReset>
		}
		if(!memory->memoryEmpty())
 8008940:	1d3b      	adds	r3, r7, #4
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	699b      	ldr	r3, [r3, #24]
 8008946:	4618      	mov	r0, r3
 8008948:	f7fc fd17 	bl	800537a <_ZN12STM32_EEPROM11memoryEmptyEv>
 800894c:	4603      	mov	r3, r0
 800894e:	f083 0301 	eor.w	r3, r3, #1
 8008952:	b2db      	uxtb	r3, r3
 8008954:	2b00      	cmp	r3, #0
 8008956:	d068      	beq.n	8008a2a <_ZN10SmartDryer5setupEv+0xc06>
		{
			memory->loadMemory(FIRST_BOOT, &FirstBootVal);
 8008958:	1d3b      	adds	r3, r7, #4
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	699b      	ldr	r3, [r3, #24]
 800895e:	f107 020c 	add.w	r2, r7, #12
 8008962:	2100      	movs	r1, #0
 8008964:	4618      	mov	r0, r3
 8008966:	f7fc fd5e 	bl	8005426 <_ZN12STM32_EEPROM10loadMemoryEtPm>
			if(FirstBootVal == 200)
 800896a:	f107 030c 	add.w	r3, r7, #12
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2bc8      	cmp	r3, #200	; 0xc8
 8008972:	d115      	bne.n	80089a0 <_ZN10SmartDryer5setupEv+0xb7c>
			{
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008974:	2300      	movs	r3, #0
 8008976:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800897a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800897e:	2b02      	cmp	r3, #2
 8008980:	f300 8091 	bgt.w	8008aa6 <_ZN10SmartDryer5setupEv+0xc82>
				{
					loadDryerProgram(i);
 8008984:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008988:	b2da      	uxtb	r2, r3
 800898a:	1d3b      	adds	r3, r7, #4
 800898c:	4611      	mov	r1, r2
 800898e:	6818      	ldr	r0, [r3, #0]
 8008990:	f7fe fb61 	bl	8007056 <_ZN10SmartDryer16loadDryerProgramEh>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008994:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008998:	3301      	adds	r3, #1
 800899a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800899e:	e7ec      	b.n	800897a <_ZN10SmartDryer5setupEv+0xb56>
				}
			}
			else
			{
				FirstBootVal = 200;
 80089a0:	f107 030c 	add.w	r3, r7, #12
 80089a4:	22c8      	movs	r2, #200	; 0xc8
 80089a6:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 80089a8:	2300      	movs	r3, #0
 80089aa:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80089ae:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80089b2:	2b02      	cmp	r3, #2
 80089b4:	dc0d      	bgt.n	80089d2 <_ZN10SmartDryer5setupEv+0xbae>
				{
					writeDefaultsDryerProgram(i);
 80089b6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80089ba:	b2da      	uxtb	r2, r3
 80089bc:	1d3b      	adds	r3, r7, #4
 80089be:	4611      	mov	r1, r2
 80089c0:	6818      	ldr	r0, [r3, #0]
 80089c2:	f7fe f93d 	bl	8006c40 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 80089c6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80089ca:	3301      	adds	r3, #1
 80089cc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80089d0:	e7ed      	b.n	80089ae <_ZN10SmartDryer5setupEv+0xb8a>
				}
				memory->eraseMemory();
 80089d2:	1d3b      	adds	r3, r7, #4
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	699b      	ldr	r3, [r3, #24]
 80089d8:	4618      	mov	r0, r3
 80089da:	f7fc fcbd 	bl	8005358 <_ZN12STM32_EEPROM11eraseMemoryEv>
				memory->writeToMemory(FIRST_BOOT, FirstBootVal, NO_MEM_TRANSFER);
 80089de:	1d3b      	adds	r3, r7, #4
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	6998      	ldr	r0, [r3, #24]
 80089e4:	f107 030c 	add.w	r3, r7, #12
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	2300      	movs	r3, #0
 80089ec:	2100      	movs	r1, #0
 80089ee:	f7fc fcfc 	bl	80053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 80089f2:	2300      	movs	r3, #0
 80089f4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80089f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80089fc:	2b02      	cmp	r3, #2
 80089fe:	dc11      	bgt.n	8008a24 <_ZN10SmartDryer5setupEv+0xc00>
				{
					saveDryerProgram(i);
 8008a00:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008a04:	b2da      	uxtb	r2, r3
 8008a06:	1d3b      	adds	r3, r7, #4
 8008a08:	4611      	mov	r1, r2
 8008a0a:	6818      	ldr	r0, [r3, #0]
 8008a0c:	f7fe f9b4 	bl	8006d78 <_ZN10SmartDryer16saveDryerProgramEh>
					HAL_Delay(500);
 8008a10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008a14:	f003 fe42 	bl	800c69c <HAL_Delay>
				for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008a18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8008a22:	e7e9      	b.n	80089f8 <_ZN10SmartDryer5setupEv+0xbd4>
				}
				ResetSystem;
 8008a24:	f004 fb08 	bl	800d038 <HAL_NVIC_SystemReset>
			}
			ResetSystem;
		}
	}

}
 8008a28:	e03d      	b.n	8008aa6 <_ZN10SmartDryer5setupEv+0xc82>
			FirstBootVal = 200;
 8008a2a:	f107 030c 	add.w	r3, r7, #12
 8008a2e:	22c8      	movs	r2, #200	; 0xc8
 8008a30:	601a      	str	r2, [r3, #0]
			memory->writeToMemory(FIRST_BOOT, FirstBootVal, NO_MEM_TRANSFER);
 8008a32:	1d3b      	adds	r3, r7, #4
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	6998      	ldr	r0, [r3, #24]
 8008a38:	f107 030c 	add.w	r3, r7, #12
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	2300      	movs	r3, #0
 8008a40:	2100      	movs	r1, #0
 8008a42:	f7fc fcd2 	bl	80053ea <_ZN12STM32_EEPROM13writeToMemoryEtmb>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008a46:	2300      	movs	r3, #0
 8008a48:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8008a4c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	dc0d      	bgt.n	8008a70 <_ZN10SmartDryer5setupEv+0xc4c>
				writeDefaultsDryerProgram(i);
 8008a54:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008a58:	b2da      	uxtb	r2, r3
 8008a5a:	1d3b      	adds	r3, r7, #4
 8008a5c:	4611      	mov	r1, r2
 8008a5e:	6818      	ldr	r0, [r3, #0]
 8008a60:	f7fe f8ee 	bl	8006c40 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008a64:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008a68:	3301      	adds	r3, #1
 8008a6a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8008a6e:	e7ed      	b.n	8008a4c <_ZN10SmartDryer5setupEv+0xc28>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008a70:	2300      	movs	r3, #0
 8008a72:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8008a76:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	dc11      	bgt.n	8008aa2 <_ZN10SmartDryer5setupEv+0xc7e>
				saveDryerProgram(i);
 8008a7e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008a82:	b2da      	uxtb	r2, r3
 8008a84:	1d3b      	adds	r3, r7, #4
 8008a86:	4611      	mov	r1, r2
 8008a88:	6818      	ldr	r0, [r3, #0]
 8008a8a:	f7fe f975 	bl	8006d78 <_ZN10SmartDryer16saveDryerProgramEh>
				HAL_Delay(500);
 8008a8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008a92:	f003 fe03 	bl	800c69c <HAL_Delay>
			for(int i = 0; i < MAX_DRYER_PROGRAMS; i++)
 8008a96:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8008aa0:	e7e9      	b.n	8008a76 <_ZN10SmartDryer5setupEv+0xc52>
			ResetSystem;
 8008aa2:	f004 fac9 	bl	800d038 <HAL_NVIC_SystemReset>
}
 8008aa6:	bf00      	nop
 8008aa8:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd90      	pop	{r4, r7, pc}

08008ab0 <_ZN10SmartDryer7navMenuEv>:

void SmartDryer::navMenu()
{
 8008ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab4:	b0a8      	sub	sp, #160	; 0xa0
 8008ab6:	af08      	add	r7, sp, #32
 8008ab8:	6078      	str	r0, [r7, #4]
	bool ExitNavMenu = false;
 8008aba:	2300      	movs	r3, #0
 8008abc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	MENU_STRUCTURE *ActualMenu = mainMenu;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ac6:	67bb      	str	r3, [r7, #120]	; 0x78
	uint8_t MenuSel = MAIN_MENU;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	showHelpMessageTimer->restart();
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7fa fd0f 	bl	80034f6 <_ZN11ChronoTimer7restartEv>
	String Time = "", Date = "";
 8008ad8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008adc:	4618      	mov	r0, r3
 8008ade:	f008 fcbd 	bl	801145c <_ZNSaIcEC1Ev>
 8008ae2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8008ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008aea:	49bd      	ldr	r1, [pc, #756]	; (8008de0 <_ZN10SmartDryer7navMenuEv+0x330>)
 8008aec:	4618      	mov	r0, r3
 8008aee:	f008 ff7d 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008af2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008af6:	4618      	mov	r0, r3
 8008af8:	f008 fcb1 	bl	801145e <_ZNSaIcED1Ev>
 8008afc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008b00:	4618      	mov	r0, r3
 8008b02:	f008 fcab 	bl	801145c <_ZNSaIcEC1Ev>
 8008b06:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008b0a:	f107 030c 	add.w	r3, r7, #12
 8008b0e:	49b4      	ldr	r1, [pc, #720]	; (8008de0 <_ZN10SmartDryer7navMenuEv+0x330>)
 8008b10:	4618      	mov	r0, r3
 8008b12:	f008 ff6b 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8008b16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f008 fc9f 	bl	801145e <_ZNSaIcED1Ev>
	while(!ExitNavMenu)
 8008b20:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	f040 82f3 	bne.w	8009110 <_ZN10SmartDryer7navMenuEv+0x660>
	{
		uint8_t WichKey = DryerKey::NO_KEY;
 8008b2a:	2308      	movs	r3, #8
 8008b2c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
		display->clearFrameBuffer();
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7fb ff4e 	bl	80049d6 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 8008b3a:	f107 020c 	add.w	r2, r7, #12
 8008b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b42:	4619      	mov	r1, r3
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f7fe f820 	bl	8006b8a <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString(ActualMenu->menuTitle, NHDST7565_LCD::CENTER_POS, MENU_TITLE_YPOS, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681c      	ldr	r4, [r3, #0]
 8008b4e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008b50:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008b54:	4611      	mov	r1, r2
 8008b56:	4618      	mov	r0, r3
 8008b58:	f008 ff15 	bl	8011986 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008b64:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8008b68:	9300      	str	r3, [sp, #0]
 8008b6a:	2307      	movs	r3, #7
 8008b6c:	2283      	movs	r2, #131	; 0x83
 8008b6e:	4620      	mov	r0, r4
 8008b70:	f7fb ff59 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8008b74:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f008 fda0 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		ActualMenu->maxMenuLines = display->drawMenuList(ActualMenu->XPos, ActualMenu->YPos, ActualMenu->topItemPos,
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	603b      	str	r3, [r7, #0]
 8008b84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b86:	f893 c01c 	ldrb.w	ip, [r3, #28]
 8008b8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b8c:	f893 e01d 	ldrb.w	lr, [r3, #29]
 8008b90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b92:	f893 8024 	ldrb.w	r8, [r3, #36]	; 0x24
 8008b96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b98:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008b9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008b9e:	6992      	ldr	r2, [r2, #24]
 8008ba0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008ba2:	f891 1027 	ldrb.w	r1, [r1, #39]	; 0x27
 8008ba6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8008ba8:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
 8008bac:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8008bae:	f894 4035 	ldrb.w	r4, [r4, #53]	; 0x35
 8008bb2:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 8008bb4:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 8008bb6:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 8008bb8:	6a36      	ldr	r6, [r6, #32]
 8008bba:	9606      	str	r6, [sp, #24]
 8008bbc:	9505      	str	r5, [sp, #20]
 8008bbe:	9404      	str	r4, [sp, #16]
 8008bc0:	9003      	str	r0, [sp, #12]
 8008bc2:	9102      	str	r1, [sp, #8]
 8008bc4:	9201      	str	r2, [sp, #4]
 8008bc6:	9300      	str	r3, [sp, #0]
 8008bc8:	4643      	mov	r3, r8
 8008bca:	4672      	mov	r2, lr
 8008bcc:	4661      	mov	r1, ip
 8008bce:	6838      	ldr	r0, [r7, #0]
 8008bd0:	f7fb ff6c 	bl	8004aac <_ZN13NHDST7565_LCD12drawMenuListEhhhhPPKchbbPbPKh>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008bda:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				ActualMenu->itemSelected, ActualMenu->menuVoices, ActualMenu->maxMenuItems,
				ActualMenu->withChebox, ActualMenu->menuSelected, ActualMenu->itemsChecked, ActualMenu->menuFont);
		if(statusParam->serialDeviceAttached)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008be2:	7a5b      	ldrb	r3, [r3, #9]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00a      	beq.n	8008bfe <_ZN10SmartDryer7navMenuEv+0x14e>
		{
			display->drawIcon(50, 0, SerialIcon_width, SerialIcon_height, SerialIcon_bits);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6818      	ldr	r0, [r3, #0]
 8008bec:	4b7d      	ldr	r3, [pc, #500]	; (8008de4 <_ZN10SmartDryer7navMenuEv+0x334>)
 8008bee:	9301      	str	r3, [sp, #4]
 8008bf0:	2308      	movs	r3, #8
 8008bf2:	9300      	str	r3, [sp, #0]
 8008bf4:	2314      	movs	r3, #20
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	2132      	movs	r1, #50	; 0x32
 8008bfa:	f7fc fa7d 	bl	80050f8 <_ZN13NHDST7565_LCD8drawIconEhhhhPKh>
		}
		display->sendFrameBuffer();
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7fb fef4 	bl	80049f0 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		WichKey = keyboard->checkKey();
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f7fc fcfb 	bl	8005608 <_ZN8DryerKey8checkKeyEv>
 8008c12:	4603      	mov	r3, r0
 8008c14:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
		switch(WichKey)
 8008c18:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8008c1c:	2b07      	cmp	r3, #7
 8008c1e:	f200 8201 	bhi.w	8009024 <_ZN10SmartDryer7navMenuEv+0x574>
 8008c22:	a201      	add	r2, pc, #4	; (adr r2, 8008c28 <_ZN10SmartDryer7navMenuEv+0x178>)
 8008c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c28:	08008c49 	.word	0x08008c49
 8008c2c:	08008c77 	.word	0x08008c77
 8008c30:	08008ca7 	.word	0x08008ca7
 8008c34:	08008f13 	.word	0x08008f13
 8008c38:	08008c49 	.word	0x08008c49
 8008c3c:	08008c77 	.word	0x08008c77
 8008c40:	08008fdd 	.word	0x08008fdd
 8008c44:	08009025 	.word	0x08009025
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				if(ActualMenu->itemSelected > 0)
 8008c48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d008      	beq.n	8008c64 <_ZN10SmartDryer7navMenuEv+0x1b4>
					ActualMenu->itemSelected--;
 8008c52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c54:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	b2da      	uxtb	r2, r3
 8008c5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				else
					ActualMenu->itemSelected = ActualMenu->maxMenuItems - 1;
				break;
 8008c62:	e1e2      	b.n	800902a <_ZN10SmartDryer7navMenuEv+0x57a>
					ActualMenu->itemSelected = ActualMenu->maxMenuItems - 1;
 8008c64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c66:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	b2da      	uxtb	r2, r3
 8008c6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				break;
 8008c74:	e1d9      	b.n	800902a <_ZN10SmartDryer7navMenuEv+0x57a>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				if(ActualMenu->itemSelected < ActualMenu->maxMenuItems - 1)
 8008c76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c78:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c80:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8008c84:	3b01      	subs	r3, #1
 8008c86:	429a      	cmp	r2, r3
 8008c88:	da08      	bge.n	8008c9c <_ZN10SmartDryer7navMenuEv+0x1ec>
					ActualMenu->itemSelected++;
 8008c8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c8c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008c90:	3301      	adds	r3, #1
 8008c92:	b2da      	uxtb	r2, r3
 8008c94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				else
					ActualMenu->itemSelected = 0;
				break;
 8008c9a:	e1c6      	b.n	800902a <_ZN10SmartDryer7navMenuEv+0x57a>
					ActualMenu->itemSelected = 0;
 8008c9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				break;
 8008ca4:	e1c1      	b.n	800902a <_ZN10SmartDryer7navMenuEv+0x57a>
			case DryerKey::LEFT_KEY:
				switch(MenuSel)
 8008ca6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008caa:	2b07      	cmp	r3, #7
 8008cac:	f000 8107 	beq.w	8008ebe <_ZN10SmartDryer7navMenuEv+0x40e>
 8008cb0:	2b08      	cmp	r3, #8
 8008cb2:	f000 8110 	beq.w	8008ed6 <_ZN10SmartDryer7navMenuEv+0x426>
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d000      	beq.n	8008cbc <_ZN10SmartDryer7navMenuEv+0x20c>
							screen = ActualMenu->itemSelected + START_PROGRAM_1;
							ExitNavMenu = true;
						}
						break;
					default:
						break;
 8008cba:	e129      	b.n	8008f10 <_ZN10SmartDryer7navMenuEv+0x460>
						switch(ActualMenu->itemSelected + 1)
 8008cbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cbe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	3b01      	subs	r3, #1
 8008cc6:	2b09      	cmp	r3, #9
 8008cc8:	d866      	bhi.n	8008d98 <_ZN10SmartDryer7navMenuEv+0x2e8>
 8008cca:	a201      	add	r2, pc, #4	; (adr r2, 8008cd0 <_ZN10SmartDryer7navMenuEv+0x220>)
 8008ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd0:	08008cf9 	.word	0x08008cf9
 8008cd4:	08008d09 	.word	0x08008d09
 8008cd8:	08008d19 	.word	0x08008d19
 8008cdc:	08008d29 	.word	0x08008d29
 8008ce0:	08008d39 	.word	0x08008d39
 8008ce4:	08008d49 	.word	0x08008d49
 8008ce8:	08008d59 	.word	0x08008d59
 8008cec:	08008d69 	.word	0x08008d69
 8008cf0:	08008d79 	.word	0x08008d79
 8008cf4:	08008d89 	.word	0x08008d89
								MenuSel = THERMO_CTRL;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
								ActualMenu = thermoMenuCtrl;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008d04:	67bb      	str	r3, [r7, #120]	; 0x78
								break;
 8008d06:	e048      	b.n	8008d9a <_ZN10SmartDryer7navMenuEv+0x2ea>
								MenuSel = FAN_CTRL;
 8008d08:	2302      	movs	r3, #2
 8008d0a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
								ActualMenu = fanMenuCtrl;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008d14:	67bb      	str	r3, [r7, #120]	; 0x78
								break;
 8008d16:	e040      	b.n	8008d9a <_ZN10SmartDryer7navMenuEv+0x2ea>
								MenuSel = TEMP_CTRL;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
								ActualMenu = tempMenuCtrl;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008d24:	67bb      	str	r3, [r7, #120]	; 0x78
								break;
 8008d26:	e038      	b.n	8008d9a <_ZN10SmartDryer7navMenuEv+0x2ea>
								MenuSel = START_DRYER_CTRL;
 8008d28:	2304      	movs	r3, #4
 8008d2a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
								ActualMenu = startDryerMenu;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008d34:	67bb      	str	r3, [r7, #120]	; 0x78
								break;
 8008d36:	e030      	b.n	8008d9a <_ZN10SmartDryer7navMenuEv+0x2ea>
								screen = CHANGE_TIME;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
								ExitNavMenu = true;
 8008d40:	2301      	movs	r3, #1
 8008d42:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
								break;
 8008d46:	e028      	b.n	8008d9a <_ZN10SmartDryer7navMenuEv+0x2ea>
								screen = CHANGE_DATE;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2202      	movs	r2, #2
 8008d4c:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
								ExitNavMenu = true;
 8008d50:	2301      	movs	r3, #1
 8008d52:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
								break;
 8008d56:	e020      	b.n	8008d9a <_ZN10SmartDryer7navMenuEv+0x2ea>
								MenuSel = CHANGE_PROGRAMS_LIST;
 8008d58:	2307      	movs	r3, #7
 8008d5a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
								ActualMenu = changeProgramsMenu;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008d64:	67bb      	str	r3, [r7, #120]	; 0x78
								break;
 8008d66:	e018      	b.n	8008d9a <_ZN10SmartDryer7navMenuEv+0x2ea>
								MenuSel = START_PROGRAMS_LIST;
 8008d68:	2308      	movs	r3, #8
 8008d6a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
								ActualMenu = startProgramsMenu;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8008d74:	67bb      	str	r3, [r7, #120]	; 0x78
								break;
 8008d76:	e010      	b.n	8008d9a <_ZN10SmartDryer7navMenuEv+0x2ea>
								MenuSel = BACKLIGHT_CTRL;
 8008d78:	2309      	movs	r3, #9
 8008d7a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
								ActualMenu = backlightCtrl;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8008d84:	67bb      	str	r3, [r7, #120]	; 0x78
								break;
 8008d86:	e008      	b.n	8008d9a <_ZN10SmartDryer7navMenuEv+0x2ea>
								screen = SHOW_INFO;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2203      	movs	r2, #3
 8008d8c:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
								ExitNavMenu = true;
 8008d90:	2301      	movs	r3, #1
 8008d92:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
								break;
 8008d96:	e000      	b.n	8008d9a <_ZN10SmartDryer7navMenuEv+0x2ea>
								break;
 8008d98:	bf00      	nop
						if(ActualMenu->withChebox)
 8008d9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	f000 80b2 	beq.w	8008f0a <_ZN10SmartDryer7navMenuEv+0x45a>
							for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8008da6:	2300      	movs	r3, #0
 8008da8:	673b      	str	r3, [r7, #112]	; 0x70
 8008daa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008dac:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8008db0:	461a      	mov	r2, r3
 8008db2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008db4:	4293      	cmp	r3, r2
 8008db6:	da09      	bge.n	8008dcc <_ZN10SmartDryer7navMenuEv+0x31c>
								ActualMenu->itemsChecked[i] = false;
 8008db8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008dbe:	4413      	add	r3, r2
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	701a      	strb	r2, [r3, #0]
							for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8008dc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	673b      	str	r3, [r7, #112]	; 0x70
 8008dca:	e7ee      	b.n	8008daa <_ZN10SmartDryer7navMenuEv+0x2fa>
							switch(ActualMenu->paramType)
 8008dcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008dce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d021      	beq.n	8008e1a <_ZN10SmartDryer7navMenuEv+0x36a>
 8008dd6:	2b04      	cmp	r3, #4
 8008dd8:	d042      	beq.n	8008e60 <_ZN10SmartDryer7navMenuEv+0x3b0>
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d004      	beq.n	8008de8 <_ZN10SmartDryer7navMenuEv+0x338>
									break;
 8008dde:	e06d      	b.n	8008ebc <_ZN10SmartDryer7navMenuEv+0x40c>
 8008de0:	08012a58 	.word	0x08012a58
 8008de4:	080159f0 	.word	0x080159f0
									if(*(bool *)ActualMenu->paramAssociated)
 8008de8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d009      	beq.n	8008e06 <_ZN10SmartDryer7navMenuEv+0x356>
										ActualMenu->itemsChecked[0] = false;
 8008df2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df6:	2200      	movs	r2, #0
 8008df8:	701a      	strb	r2, [r3, #0]
										ActualMenu->itemsChecked[1] = true;
 8008dfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dfe:	3301      	adds	r3, #1
 8008e00:	2201      	movs	r2, #1
 8008e02:	701a      	strb	r2, [r3, #0]
									break;
 8008e04:	e05a      	b.n	8008ebc <_ZN10SmartDryer7navMenuEv+0x40c>
										ActualMenu->itemsChecked[0] = true;
 8008e06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	701a      	strb	r2, [r3, #0]
										ActualMenu->itemsChecked[1] = false;
 8008e0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e12:	3301      	adds	r3, #1
 8008e14:	2200      	movs	r2, #0
 8008e16:	701a      	strb	r2, [r3, #0]
									break;
 8008e18:	e050      	b.n	8008ebc <_ZN10SmartDryer7navMenuEv+0x40c>
									switch(MenuSel)
 8008e1a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008e1e:	2b09      	cmp	r3, #9
 8008e20:	d000      	beq.n	8008e24 <_ZN10SmartDryer7navMenuEv+0x374>
										break;
 8008e22:	e01c      	b.n	8008e5e <_ZN10SmartDryer7navMenuEv+0x3ae>
										for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8008e24:	2300      	movs	r3, #0
 8008e26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e2a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8008e2e:	461a      	mov	r2, r3
 8008e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e32:	4293      	cmp	r3, r2
 8008e34:	da12      	bge.n	8008e5c <_ZN10SmartDryer7navMenuEv+0x3ac>
											if(*(uint8_t*)ActualMenu->paramAssociated == i)
 8008e36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d107      	bne.n	8008e54 <_ZN10SmartDryer7navMenuEv+0x3a4>
												ActualMenu->itemsChecked[i] = true;
 8008e44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e4a:	4413      	add	r3, r2
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	701a      	strb	r2, [r3, #0]
												break;
 8008e50:	bf00      	nop
										break;
 8008e52:	e003      	b.n	8008e5c <_ZN10SmartDryer7navMenuEv+0x3ac>
										for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8008e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e56:	3301      	adds	r3, #1
 8008e58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e5a:	e7e5      	b.n	8008e28 <_ZN10SmartDryer7navMenuEv+0x378>
										break;
 8008e5c:	bf00      	nop
									break;
 8008e5e:	e02d      	b.n	8008ebc <_ZN10SmartDryer7navMenuEv+0x40c>
									switch(MenuSel)
 8008e60:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008e64:	2b03      	cmp	r3, #3
 8008e66:	d000      	beq.n	8008e6a <_ZN10SmartDryer7navMenuEv+0x3ba>
											break;
 8008e68:	e027      	b.n	8008eba <_ZN10SmartDryer7navMenuEv+0x40a>
											for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e70:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8008e74:	461a      	mov	r2, r3
 8008e76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	da1d      	bge.n	8008eb8 <_ZN10SmartDryer7navMenuEv+0x408>
												uint32_t TempSetted = (uint32_t)*(float *)ActualMenu->paramAssociated;
 8008e7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7f7 ffe8 	bl	8000e58 <__aeabi_f2uiz>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	65fb      	str	r3, [r7, #92]	; 0x5c
												if(TempSetted == (uint32_t)paramTemperatures[i])
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008e92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e94:	4413      	add	r3, r2
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	461a      	mov	r2, r3
 8008e9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d107      	bne.n	8008eb0 <_ZN10SmartDryer7navMenuEv+0x400>
													ActualMenu->itemsChecked[i] = true;
 8008ea0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ea4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ea6:	4413      	add	r3, r2
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	701a      	strb	r2, [r3, #0]
													break;
 8008eac:	bf00      	nop
											break;
 8008eae:	e003      	b.n	8008eb8 <_ZN10SmartDryer7navMenuEv+0x408>
											for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8008eb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8008eb6:	e7da      	b.n	8008e6e <_ZN10SmartDryer7navMenuEv+0x3be>
											break;
 8008eb8:	bf00      	nop
									break;
 8008eba:	bf00      	nop
						break; // case MAIN_MENU
 8008ebc:	e025      	b.n	8008f0a <_ZN10SmartDryer7navMenuEv+0x45a>
						screen = ActualMenu->itemSelected + CHANGE_PROGRAM_1;
 8008ebe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ec0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008ec4:	3304      	adds	r3, #4
 8008ec6:	b2da      	uxtb	r2, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
						ExitNavMenu = true;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						break;
 8008ed4:	e01c      	b.n	8008f10 <_ZN10SmartDryer7navMenuEv+0x460>
						if(dryerPrograms[ ActualMenu->itemSelected].programSetted)
 8008ed6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ed8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008edc:	4619      	mov	r1, r3
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	005b      	lsls	r3, r3, #1
 8008ee4:	440b      	add	r3, r1
 8008ee6:	00db      	lsls	r3, r3, #3
 8008ee8:	4413      	add	r3, r2
 8008eea:	334c      	adds	r3, #76	; 0x4c
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d00d      	beq.n	8008f0e <_ZN10SmartDryer7navMenuEv+0x45e>
							screen = ActualMenu->itemSelected + START_PROGRAM_1;
 8008ef2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ef4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008ef8:	3307      	adds	r3, #7
 8008efa:	b2da      	uxtb	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
							ExitNavMenu = true;
 8008f02:	2301      	movs	r3, #1
 8008f04:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						break;
 8008f08:	e001      	b.n	8008f0e <_ZN10SmartDryer7navMenuEv+0x45e>
						break; // case MAIN_MENU
 8008f0a:	bf00      	nop
 8008f0c:	e08d      	b.n	800902a <_ZN10SmartDryer7navMenuEv+0x57a>
						break;
 8008f0e:	bf00      	nop
				}
			break;// case LEFT_KEY
 8008f10:	e08b      	b.n	800902a <_ZN10SmartDryer7navMenuEv+0x57a>
			case DryerKey::OK_KEY:
				if(ActualMenu->withChebox)
 8008f12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f000 8085 	beq.w	8009028 <_ZN10SmartDryer7navMenuEv+0x578>
				{
					for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8008f1e:	2300      	movs	r3, #0
 8008f20:	667b      	str	r3, [r7, #100]	; 0x64
 8008f22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f24:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8008f28:	461a      	mov	r2, r3
 8008f2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	da09      	bge.n	8008f44 <_ZN10SmartDryer7navMenuEv+0x494>
						ActualMenu->itemsChecked[i] = false;
 8008f30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f36:	4413      	add	r3, r2
 8008f38:	2200      	movs	r2, #0
 8008f3a:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < ActualMenu->maxMenuItems; i++)
 8008f3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f3e:	3301      	adds	r3, #1
 8008f40:	667b      	str	r3, [r7, #100]	; 0x64
 8008f42:	e7ee      	b.n	8008f22 <_ZN10SmartDryer7navMenuEv+0x472>
					ActualMenu->itemsChecked[ActualMenu->itemSelected] = true;
 8008f44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008f4a:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8008f4e:	4413      	add	r3, r2
 8008f50:	2201      	movs	r2, #1
 8008f52:	701a      	strb	r2, [r3, #0]
					switch(ActualMenu->paramType)
 8008f54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008f5a:	2b02      	cmp	r3, #2
 8008f5c:	d013      	beq.n	8008f86 <_ZN10SmartDryer7navMenuEv+0x4d6>
 8008f5e:	2b04      	cmp	r3, #4
 8008f60:	d01e      	beq.n	8008fa0 <_ZN10SmartDryer7navMenuEv+0x4f0>
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d000      	beq.n	8008f68 <_ZN10SmartDryer7navMenuEv+0x4b8>
								default:
									break;
							}
							break;
						default:
							break;
 8008f66:	e031      	b.n	8008fcc <_ZN10SmartDryer7navMenuEv+0x51c>
							if(ActualMenu->itemSelected == 0)
 8008f68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f6a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d104      	bne.n	8008f7c <_ZN10SmartDryer7navMenuEv+0x4cc>
								*(bool *)ActualMenu->paramAssociated = false;
 8008f72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f76:	2200      	movs	r2, #0
 8008f78:	701a      	strb	r2, [r3, #0]
							break;
 8008f7a:	e027      	b.n	8008fcc <_ZN10SmartDryer7navMenuEv+0x51c>
								*(bool *)ActualMenu->paramAssociated = true;
 8008f7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f80:	2201      	movs	r2, #1
 8008f82:	701a      	strb	r2, [r3, #0]
							break;
 8008f84:	e022      	b.n	8008fcc <_ZN10SmartDryer7navMenuEv+0x51c>
							switch(MenuSel)
 8008f86:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008f8a:	2b09      	cmp	r3, #9
 8008f8c:	d000      	beq.n	8008f90 <_ZN10SmartDryer7navMenuEv+0x4e0>
								break;
 8008f8e:	e006      	b.n	8008f9e <_ZN10SmartDryer7navMenuEv+0x4ee>
								*(uint8_t*)ActualMenu->paramAssociated = ActualMenu->itemSelected;
 8008f90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008f96:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8008f9a:	701a      	strb	r2, [r3, #0]
								break;
 8008f9c:	bf00      	nop
							break;
 8008f9e:	e015      	b.n	8008fcc <_ZN10SmartDryer7navMenuEv+0x51c>
							switch(MenuSel)
 8008fa0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008fa4:	2b03      	cmp	r3, #3
 8008fa6:	d000      	beq.n	8008faa <_ZN10SmartDryer7navMenuEv+0x4fa>
									break;
 8008fa8:	e00f      	b.n	8008fca <_ZN10SmartDryer7navMenuEv+0x51a>
									*(float *)ActualMenu->paramAssociated = (float)paramTemperatures[ActualMenu->itemSelected];
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008fb0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008fb2:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8008fb6:	4413      	add	r3, r2
 8008fb8:	781a      	ldrb	r2, [r3, #0]
 8008fba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fbc:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8008fbe:	4610      	mov	r0, r2
 8008fc0:	f7f7 fda2 	bl	8000b08 <__aeabi_ui2f>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	6023      	str	r3, [r4, #0]
									break;
 8008fc8:	bf00      	nop
							break;
 8008fca:	bf00      	nop
					}
					MenuSel = MAIN_MENU;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
					ActualMenu = mainMenu;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008fd8:	67bb      	str	r3, [r7, #120]	; 0x78
				}
				break;
 8008fda:	e025      	b.n	8009028 <_ZN10SmartDryer7navMenuEv+0x578>
			case DryerKey::LONG_LEFT_KEY:
				switch(MenuSel)
 8008fdc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	2b08      	cmp	r3, #8
 8008fe4:	d81c      	bhi.n	8009020 <_ZN10SmartDryer7navMenuEv+0x570>
 8008fe6:	a201      	add	r2, pc, #4	; (adr r2, 8008fec <_ZN10SmartDryer7navMenuEv+0x53c>)
 8008fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fec:	08009011 	.word	0x08009011
 8008ff0:	08009011 	.word	0x08009011
 8008ff4:	08009011 	.word	0x08009011
 8008ff8:	08009011 	.word	0x08009011
 8008ffc:	08009021 	.word	0x08009021
 8009000:	08009021 	.word	0x08009021
 8009004:	08009011 	.word	0x08009011
 8009008:	08009011 	.word	0x08009011
 800900c:	08009011 	.word	0x08009011
					case TEMP_CTRL:
					case START_DRYER_CTRL:
					case CHANGE_PROGRAMS_LIST:
					case START_PROGRAMS_LIST:
					case BACKLIGHT_CTRL:
						MenuSel = MAIN_MENU;
 8009010:	2300      	movs	r3, #0
 8009012:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						ActualMenu = mainMenu;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800901c:	67bb      	str	r3, [r7, #120]	; 0x78
						break;
 800901e:	e000      	b.n	8009022 <_ZN10SmartDryer7navMenuEv+0x572>
					default:
						break;
 8009020:	bf00      	nop
				}
				break;
 8009022:	e002      	b.n	800902a <_ZN10SmartDryer7navMenuEv+0x57a>
			case DryerKey::LONG_OK_KEY:
				break;
			default:
				break;
 8009024:	bf00      	nop
 8009026:	e000      	b.n	800902a <_ZN10SmartDryer7navMenuEv+0x57a>
				break;
 8009028:	bf00      	nop
		}
		if(WichKey != DryerKey::NO_KEY && WichKey != DryerKey::LEFT_KEY)
 800902a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800902e:	2b08      	cmp	r3, #8
 8009030:	d04d      	beq.n	80090ce <_ZN10SmartDryer7navMenuEv+0x61e>
 8009032:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8009036:	2b02      	cmp	r3, #2
 8009038:	d049      	beq.n	80090ce <_ZN10SmartDryer7navMenuEv+0x61e>
		{
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 800903a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800903c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009040:	461a      	mov	r2, r3
 8009042:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009044:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8009048:	3b02      	subs	r3, #2
 800904a:	429a      	cmp	r2, r3
 800904c:	dd3a      	ble.n	80090c4 <_ZN10SmartDryer7navMenuEv+0x614>
			{
				if(ActualMenu->itemSelected - (ActualMenu->maxMenuLines - 2) < ActualMenu->maxMenuItems - 1)
 800904e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009050:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009054:	461a      	mov	r2, r3
 8009056:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009058:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800905c:	3b02      	subs	r3, #2
 800905e:	1ad2      	subs	r2, r2, r3
 8009060:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009062:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8009066:	3b01      	subs	r3, #1
 8009068:	429a      	cmp	r2, r3
 800906a:	da0d      	bge.n	8009088 <_ZN10SmartDryer7navMenuEv+0x5d8>
					ActualMenu->topItemPos = ActualMenu->itemSelected - (ActualMenu->maxMenuLines - 2);
 800906c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800906e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8009072:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009074:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8009078:	1ad3      	subs	r3, r2, r3
 800907a:	b2db      	uxtb	r3, r3
 800907c:	3302      	adds	r3, #2
 800907e:	b2da      	uxtb	r2, r3
 8009080:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009082:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009086:	e003      	b.n	8009090 <_ZN10SmartDryer7navMenuEv+0x5e0>
				else
					ActualMenu->topItemPos = 0;
 8009088:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800908a:	2200      	movs	r2, #0
 800908c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				if(ActualMenu->itemSelected >= ActualMenu->maxMenuItems - ActualMenu->maxMenuLines)
 8009090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009092:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009096:	461a      	mov	r2, r3
 8009098:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800909a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800909e:	4619      	mov	r1, r3
 80090a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090a2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80090a6:	1acb      	subs	r3, r1, r3
 80090a8:	429a      	cmp	r2, r3
 80090aa:	db1a      	blt.n	80090e2 <_ZN10SmartDryer7navMenuEv+0x632>
				{
					ActualMenu->topItemPos = ActualMenu->maxMenuItems - ActualMenu->maxMenuLines;
 80090ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090ae:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80090b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090b4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80090b8:	1ad3      	subs	r3, r2, r3
 80090ba:	b2da      	uxtb	r2, r3
 80090bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 80090c2:	e00e      	b.n	80090e2 <_ZN10SmartDryer7navMenuEv+0x632>
				}
			}
			else
				ActualMenu->topItemPos = 0;
 80090c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090c6:	2200      	movs	r2, #0
 80090c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 80090cc:	e009      	b.n	80090e2 <_ZN10SmartDryer7navMenuEv+0x632>

		}
		else if(WichKey != DryerKey::NO_KEY)
 80090ce:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80090d2:	2b08      	cmp	r3, #8
 80090d4:	d006      	beq.n	80090e4 <_ZN10SmartDryer7navMenuEv+0x634>
		{
			lcdLedAutoOffTimer->restart();
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090da:	4618      	mov	r0, r3
 80090dc:	f7fa fa0b 	bl	80034f6 <_ZN11ChronoTimer7restartEv>
 80090e0:	e000      	b.n	80090e4 <_ZN10SmartDryer7navMenuEv+0x634>
			if(ActualMenu->itemSelected > ActualMenu->maxMenuLines - 2)
 80090e2:	bf00      	nop
		}
		peripheralsControl();
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f7fd fd3b 	bl	8006b60 <_ZN10SmartDryer18peripheralsControlEv>
		statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80090f2:	4610      	mov	r0, r2
 80090f4:	f7fc fde4 	bl	8005cc0 <_ZN13SerialMessage17isDeviceConnectedEv>
 80090f8:	4603      	mov	r3, r0
 80090fa:	7263      	strb	r3, [r4, #9]
		if(statusParam->serialDeviceAttached)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009100:	7a5b      	ldrb	r3, [r3, #9]
 8009102:	2b00      	cmp	r3, #0
 8009104:	f43f ad0c 	beq.w	8008b20 <_ZN10SmartDryer7navMenuEv+0x70>
		{
			serialComunicationCtrl();
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f7fe fa2d 	bl	8007568 <_ZN10SmartDryer22serialComunicationCtrlEv>
	while(!ExitNavMenu)
 800910e:	e507      	b.n	8008b20 <_ZN10SmartDryer7navMenuEv+0x70>
	String Time = "", Date = "";
 8009110:	f107 030c 	add.w	r3, r7, #12
 8009114:	4618      	mov	r0, r3
 8009116:	f008 fad2 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800911a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800911e:	4618      	mov	r0, r3
 8009120:	f008 facd 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}

}
 8009124:	bf00      	nop
 8009126:	3780      	adds	r7, #128	; 0x80
 8009128:	46bd      	mov	sp, r7
 800912a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800912e:	bf00      	nop

08009130 <_ZN10SmartDryer10changeTimeEv>:


void SmartDryer::changeTime()
{
 8009130:	b590      	push	{r4, r7, lr}
 8009132:	b0bd      	sub	sp, #244	; 0xf4
 8009134:	af02      	add	r7, sp, #8
 8009136:	6078      	str	r0, [r7, #4]
	bool ExitChangeTime = false;
 8009138:	2300      	movs	r3, #0
 800913a:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
	uint8_t Hour = 0, Minute = 0;
 800913e:	2300      	movs	r3, #0
 8009140:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
 8009144:	2300      	movs	r3, #0
 8009146:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
	bool IsHours = true;
 800914a:	2301      	movs	r3, #1
 800914c:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
	String Title = "", Number = "";
 8009150:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009154:	4618      	mov	r0, r3
 8009156:	f008 f981 	bl	801145c <_ZNSaIcEC1Ev>
 800915a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800915e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009162:	49c5      	ldr	r1, [pc, #788]	; (8009478 <_ZN10SmartDryer10changeTimeEv+0x348>)
 8009164:	4618      	mov	r0, r3
 8009166:	f008 fc41 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800916a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800916e:	4618      	mov	r0, r3
 8009170:	f008 f975 	bl	801145e <_ZNSaIcED1Ev>
 8009174:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009178:	4618      	mov	r0, r3
 800917a:	f008 f96f 	bl	801145c <_ZNSaIcEC1Ev>
 800917e:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8009182:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009186:	49bc      	ldr	r1, [pc, #752]	; (8009478 <_ZN10SmartDryer10changeTimeEv+0x348>)
 8009188:	4618      	mov	r0, r3
 800918a:	f008 fc2f 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800918e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009192:	4618      	mov	r0, r3
 8009194:	f008 f963 	bl	801145e <_ZNSaIcED1Ev>
	String Time = "", Date = "";
 8009198:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800919c:	4618      	mov	r0, r3
 800919e:	f008 f95d 	bl	801145c <_ZNSaIcEC1Ev>
 80091a2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80091a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80091aa:	49b3      	ldr	r1, [pc, #716]	; (8009478 <_ZN10SmartDryer10changeTimeEv+0x348>)
 80091ac:	4618      	mov	r0, r3
 80091ae:	f008 fc1d 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80091b2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80091b6:	4618      	mov	r0, r3
 80091b8:	f008 f951 	bl	801145e <_ZNSaIcED1Ev>
 80091bc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80091c0:	4618      	mov	r0, r3
 80091c2:	f008 f94b 	bl	801145c <_ZNSaIcEC1Ev>
 80091c6:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80091ca:	f107 0310 	add.w	r3, r7, #16
 80091ce:	49aa      	ldr	r1, [pc, #680]	; (8009478 <_ZN10SmartDryer10changeTimeEv+0x348>)
 80091d0:	4618      	mov	r0, r3
 80091d2:	f008 fc0b 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80091d6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80091da:	4618      	mov	r0, r3
 80091dc:	f008 f93f 	bl	801145e <_ZNSaIcED1Ev>
	while(!ExitChangeTime)
 80091e0:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	f040 816f 	bne.w	80094c8 <_ZN10SmartDryer10changeTimeEv+0x398>
	{
		display->clearFrameBuffer();
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7fb fbf1 	bl	80049d6 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 80091f4:	f107 0210 	add.w	r2, r7, #16
 80091f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80091fc:	4619      	mov	r1, r3
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f7fd fcc3 	bl	8006b8a <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		if(IsHours)
 8009204:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8009208:	2b00      	cmp	r3, #0
 800920a:	d01b      	beq.n	8009244 <_ZN10SmartDryer10changeTimeEv+0x114>
		{
			Title = "Imposta ora";
 800920c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009210:	499a      	ldr	r1, [pc, #616]	; (800947c <_ZN10SmartDryer10changeTimeEv+0x34c>)
 8009212:	4618      	mov	r0, r3
 8009214:	f008 fb37 	bl	8011886 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Hour);
 8009218:	f897 20e6 	ldrb.w	r2, [r7, #230]	; 0xe6
 800921c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009220:	4611      	mov	r1, r2
 8009222:	4618      	mov	r0, r3
 8009224:	f7fa f9a8 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8009228:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800922c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009230:	4611      	mov	r1, r2
 8009232:	4618      	mov	r0, r3
 8009234:	f008 fa4f 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009238:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800923c:	4618      	mov	r0, r3
 800923e:	f008 fa3e 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009242:	e01a      	b.n	800927a <_ZN10SmartDryer10changeTimeEv+0x14a>
		}
		else
		{
			Title = "Imposta minuto";
 8009244:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009248:	498d      	ldr	r1, [pc, #564]	; (8009480 <_ZN10SmartDryer10changeTimeEv+0x350>)
 800924a:	4618      	mov	r0, r3
 800924c:	f008 fb1b 	bl	8011886 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Minute);
 8009250:	f897 20e5 	ldrb.w	r2, [r7, #229]	; 0xe5
 8009254:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009258:	4611      	mov	r1, r2
 800925a:	4618      	mov	r0, r3
 800925c:	f7fa f98c 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8009260:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8009264:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009268:	4611      	mov	r1, r2
 800926a:	4618      	mov	r0, r3
 800926c:	f008 fa33 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009270:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009274:	4618      	mov	r0, r3
 8009276:	f008 fa22 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
		display->drawString(Title, NHDST7565_LCD::CENTER_POS, 5, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681c      	ldr	r4, [r3, #0]
 800927e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009282:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8009286:	4611      	mov	r1, r2
 8009288:	4618      	mov	r0, r3
 800928a:	f008 fb7c 	bl	8011986 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009296:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800929a:	9300      	str	r3, [sp, #0]
 800929c:	2305      	movs	r3, #5
 800929e:	2283      	movs	r2, #131	; 0x83
 80092a0:	4620      	mov	r0, r4
 80092a2:	f7fb fbc0 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80092a6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80092aa:	4618      	mov	r0, r3
 80092ac:	f008 fa07 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(Number, NHDST7565_LCD::CENTER_POS, 30, display->displayFonts[NHDST7565_LCD::W_9_H_17_B]);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681c      	ldr	r4, [r3, #0]
 80092b4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80092b8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80092bc:	4611      	mov	r1, r2
 80092be:	4618      	mov	r0, r3
 80092c0:	f008 fb61 	bl	8011986 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80092cc:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80092d0:	9300      	str	r3, [sp, #0]
 80092d2:	231e      	movs	r3, #30
 80092d4:	2283      	movs	r2, #131	; 0x83
 80092d6:	4620      	mov	r0, r4
 80092d8:	f7fb fba5 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80092dc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80092e0:	4618      	mov	r0, r3
 80092e2:	f008 f9ec 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawSymbol(60, 30, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x0070); // triangolo alto
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6818      	ldr	r0, [r3, #0]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80092f2:	2370      	movs	r3, #112	; 0x70
 80092f4:	9300      	str	r3, [sp, #0]
 80092f6:	4613      	mov	r3, r2
 80092f8:	221e      	movs	r2, #30
 80092fa:	213c      	movs	r1, #60	; 0x3c
 80092fc:	f7fb fe42 	bl	8004f84 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->drawSymbol(60, 55, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x006D); // triangolo basso
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6818      	ldr	r0, [r3, #0]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800930c:	236d      	movs	r3, #109	; 0x6d
 800930e:	9300      	str	r3, [sp, #0]
 8009310:	4613      	mov	r3, r2
 8009312:	2237      	movs	r2, #55	; 0x37
 8009314:	213c      	movs	r1, #60	; 0x3c
 8009316:	f7fb fe35 	bl	8004f84 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		if(statusParam->serialDeviceAttached)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800931e:	7a5b      	ldrb	r3, [r3, #9]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00a      	beq.n	800933a <_ZN10SmartDryer10changeTimeEv+0x20a>
		{
			display->drawIcon(50, 0, SerialIcon_width, SerialIcon_height, SerialIcon_bits);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6818      	ldr	r0, [r3, #0]
 8009328:	4b56      	ldr	r3, [pc, #344]	; (8009484 <_ZN10SmartDryer10changeTimeEv+0x354>)
 800932a:	9301      	str	r3, [sp, #4]
 800932c:	2308      	movs	r3, #8
 800932e:	9300      	str	r3, [sp, #0]
 8009330:	2314      	movs	r3, #20
 8009332:	2200      	movs	r2, #0
 8009334:	2132      	movs	r1, #50	; 0x32
 8009336:	f7fb fedf 	bl	80050f8 <_ZN13NHDST7565_LCD8drawIconEhhhhPKh>
		}
		display->sendFrameBuffer();
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4618      	mov	r0, r3
 8009340:	f7fb fb56 	bl	80049f0 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 8009344:	2308      	movs	r3, #8
 8009346:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
		WichKey = keyboard->checkKey();
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	4618      	mov	r0, r3
 8009350:	f7fc f95a 	bl	8005608 <_ZN8DryerKey8checkKeyEv>
 8009354:	4603      	mov	r3, r0
 8009356:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
		switch(WichKey)
 800935a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800935e:	2b07      	cmp	r3, #7
 8009360:	f200 8087 	bhi.w	8009472 <_ZN10SmartDryer10changeTimeEv+0x342>
 8009364:	a201      	add	r2, pc, #4	; (adr r2, 800936c <_ZN10SmartDryer10changeTimeEv+0x23c>)
 8009366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800936a:	bf00      	nop
 800936c:	0800938d 	.word	0x0800938d
 8009370:	080093cd 	.word	0x080093cd
 8009374:	08009473 	.word	0x08009473
 8009378:	0800940d 	.word	0x0800940d
 800937c:	0800938d 	.word	0x0800938d
 8009380:	080093cd 	.word	0x080093cd
 8009384:	0800946b 	.word	0x0800946b
 8009388:	08009455 	.word	0x08009455
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				if(IsHours)
 800938c:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00d      	beq.n	80093b0 <_ZN10SmartDryer10changeTimeEv+0x280>
				{
					if(Hour > 0)
 8009394:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8009398:	2b00      	cmp	r3, #0
 800939a:	d005      	beq.n	80093a8 <_ZN10SmartDryer10changeTimeEv+0x278>
						Hour--;
 800939c:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 80093a0:	3b01      	subs	r3, #1
 80093a2:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
					if(Minute > 0)
						Minute--;
					else
						Minute = 59;
				}
				break;
 80093a6:	e070      	b.n	800948a <_ZN10SmartDryer10changeTimeEv+0x35a>
						Hour = 23;
 80093a8:	2317      	movs	r3, #23
 80093aa:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
				break;
 80093ae:	e06c      	b.n	800948a <_ZN10SmartDryer10changeTimeEv+0x35a>
					if(Minute > 0)
 80093b0:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d005      	beq.n	80093c4 <_ZN10SmartDryer10changeTimeEv+0x294>
						Minute--;
 80093b8:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 80093bc:	3b01      	subs	r3, #1
 80093be:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 80093c2:	e062      	b.n	800948a <_ZN10SmartDryer10changeTimeEv+0x35a>
						Minute = 59;
 80093c4:	233b      	movs	r3, #59	; 0x3b
 80093c6:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 80093ca:	e05e      	b.n	800948a <_ZN10SmartDryer10changeTimeEv+0x35a>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				if(IsHours)
 80093cc:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d00d      	beq.n	80093f0 <_ZN10SmartDryer10changeTimeEv+0x2c0>
				{
					if(Hour < 23)
 80093d4:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 80093d8:	2b16      	cmp	r3, #22
 80093da:	d805      	bhi.n	80093e8 <_ZN10SmartDryer10changeTimeEv+0x2b8>
						Hour++;
 80093dc:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 80093e0:	3301      	adds	r3, #1
 80093e2:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
					if(Minute < 59)
						Minute++;
					else
						Minute = 0;
				}
				break;
 80093e6:	e050      	b.n	800948a <_ZN10SmartDryer10changeTimeEv+0x35a>
						Hour = 0;
 80093e8:	2300      	movs	r3, #0
 80093ea:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
				break;
 80093ee:	e04c      	b.n	800948a <_ZN10SmartDryer10changeTimeEv+0x35a>
					if(Minute < 59)
 80093f0:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 80093f4:	2b3a      	cmp	r3, #58	; 0x3a
 80093f6:	d805      	bhi.n	8009404 <_ZN10SmartDryer10changeTimeEv+0x2d4>
						Minute++;
 80093f8:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 80093fc:	3301      	adds	r3, #1
 80093fe:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 8009402:	e042      	b.n	800948a <_ZN10SmartDryer10changeTimeEv+0x35a>
						Minute = 0;
 8009404:	2300      	movs	r3, #0
 8009406:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				break;
 800940a:	e03e      	b.n	800948a <_ZN10SmartDryer10changeTimeEv+0x35a>
			case DryerKey::OK_KEY:
				if(IsHours)
 800940c:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8009410:	2b00      	cmp	r3, #0
 8009412:	d003      	beq.n	800941c <_ZN10SmartDryer10changeTimeEv+0x2ec>
				{
					IsHours = false;
 8009414:	2300      	movs	r3, #0
 8009416:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
					NewTime.minute = Minute;
					NewTime.second = 0;
					clock->adjustTimeDate(NewTime);
					ExitChangeTime = true;
				}
				break;
 800941a:	e036      	b.n	800948a <_ZN10SmartDryer10changeTimeEv+0x35a>
					clock->getTimeDate(NewTime);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	f107 0208 	add.w	r2, r7, #8
 8009424:	4611      	mov	r1, r2
 8009426:	4618      	mov	r0, r3
 8009428:	f7fa fa34 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
					NewTime.hour = Hour;
 800942c:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8009430:	72bb      	strb	r3, [r7, #10]
					NewTime.minute = Minute;
 8009432:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8009436:	727b      	strb	r3, [r7, #9]
					NewTime.second = 0;
 8009438:	2300      	movs	r3, #0
 800943a:	723b      	strb	r3, [r7, #8]
					clock->adjustTimeDate(NewTime);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6858      	ldr	r0, [r3, #4]
 8009440:	f107 0308 	add.w	r3, r7, #8
 8009444:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009448:	f7fa f97a 	bl	8003740 <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>
					ExitChangeTime = true;
 800944c:	2301      	movs	r3, #1
 800944e:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				break;
 8009452:	e01a      	b.n	800948a <_ZN10SmartDryer10changeTimeEv+0x35a>
			case DryerKey::LONG_OK_KEY:
				if(!IsHours)
 8009454:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8009458:	f083 0301 	eor.w	r3, r3, #1
 800945c:	b2db      	uxtb	r3, r3
 800945e:	2b00      	cmp	r3, #0
 8009460:	d012      	beq.n	8009488 <_ZN10SmartDryer10changeTimeEv+0x358>
				{
					IsHours = true;
 8009462:	2301      	movs	r3, #1
 8009464:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
				}
				break;
 8009468:	e00e      	b.n	8009488 <_ZN10SmartDryer10changeTimeEv+0x358>
			case DryerKey::LONG_LEFT_KEY:
				ExitChangeTime = true;
 800946a:	2301      	movs	r3, #1
 800946c:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				break;
 8009470:	e00b      	b.n	800948a <_ZN10SmartDryer10changeTimeEv+0x35a>
			default:
				break;
 8009472:	bf00      	nop
 8009474:	e009      	b.n	800948a <_ZN10SmartDryer10changeTimeEv+0x35a>
 8009476:	bf00      	nop
 8009478:	08012a58 	.word	0x08012a58
 800947c:	08012860 	.word	0x08012860
 8009480:	08012aac 	.word	0x08012aac
 8009484:	080159f0 	.word	0x080159f0
				break;
 8009488:	bf00      	nop
		}
		if(WichKey != DryerKey::NO_KEY)
 800948a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800948e:	2b08      	cmp	r3, #8
 8009490:	d004      	beq.n	800949c <_ZN10SmartDryer10changeTimeEv+0x36c>
		{
			lcdLedAutoOffTimer->restart();
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009496:	4618      	mov	r0, r3
 8009498:	f7fa f82d 	bl	80034f6 <_ZN11ChronoTimer7restartEv>
		}
		peripheralsControl();
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f7fd fb5f 	bl	8006b60 <_ZN10SmartDryer18peripheralsControlEv>
		statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80094aa:	4610      	mov	r0, r2
 80094ac:	f7fc fc08 	bl	8005cc0 <_ZN13SerialMessage17isDeviceConnectedEv>
 80094b0:	4603      	mov	r3, r0
 80094b2:	7263      	strb	r3, [r4, #9]
		if(statusParam->serialDeviceAttached)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094b8:	7a5b      	ldrb	r3, [r3, #9]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	f43f ae90 	beq.w	80091e0 <_ZN10SmartDryer10changeTimeEv+0xb0>
		{
			serialComunicationCtrl();
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f7fe f851 	bl	8007568 <_ZN10SmartDryer22serialComunicationCtrlEv>
	while(!ExitChangeTime)
 80094c6:	e68b      	b.n	80091e0 <_ZN10SmartDryer10changeTimeEv+0xb0>
	String Time = "", Date = "";
 80094c8:	f107 0310 	add.w	r3, r7, #16
 80094cc:	4618      	mov	r0, r3
 80094ce:	f008 f8f6 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80094d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80094d6:	4618      	mov	r0, r3
 80094d8:	f008 f8f1 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Title = "", Number = "";
 80094dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80094e0:	4618      	mov	r0, r3
 80094e2:	f008 f8ec 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80094e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80094ea:	4618      	mov	r0, r3
 80094ec:	f008 f8e7 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
}
 80094f0:	bf00      	nop
 80094f2:	37ec      	adds	r7, #236	; 0xec
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd90      	pop	{r4, r7, pc}

080094f8 <_ZN10SmartDryer10changeDateEv>:

void SmartDryer::changeDate()
{
 80094f8:	b590      	push	{r4, r7, lr}
 80094fa:	b0c5      	sub	sp, #276	; 0x114
 80094fc:	af02      	add	r7, sp, #8
 80094fe:	1d3b      	adds	r3, r7, #4
 8009500:	6018      	str	r0, [r3, #0]
	bool ExitChangeDate = false;
 8009502:	2300      	movs	r3, #0
 8009504:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	uint8_t Day = 1, Month = 1, Year = 20;
 8009508:	2301      	movs	r3, #1
 800950a:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 800950e:	2301      	movs	r3, #1
 8009510:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
 8009514:	2314      	movs	r3, #20
 8009516:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
	uint8_t WichDateVar = 0;
 800951a:	2300      	movs	r3, #0
 800951c:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
	String Title = "", Number = "";
 8009520:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009524:	4618      	mov	r0, r3
 8009526:	f007 ff99 	bl	801145c <_ZNSaIcEC1Ev>
 800952a:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800952e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009532:	49d8      	ldr	r1, [pc, #864]	; (8009894 <_ZN10SmartDryer10changeDateEv+0x39c>)
 8009534:	4618      	mov	r0, r3
 8009536:	f008 fa59 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800953a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800953e:	4618      	mov	r0, r3
 8009540:	f007 ff8d 	bl	801145e <_ZNSaIcED1Ev>
 8009544:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8009548:	4618      	mov	r0, r3
 800954a:	f007 ff87 	bl	801145c <_ZNSaIcEC1Ev>
 800954e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8009552:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009556:	49cf      	ldr	r1, [pc, #828]	; (8009894 <_ZN10SmartDryer10changeDateEv+0x39c>)
 8009558:	4618      	mov	r0, r3
 800955a:	f008 fa47 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800955e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8009562:	4618      	mov	r0, r3
 8009564:	f007 ff7b 	bl	801145e <_ZNSaIcED1Ev>
	String Time = "", Date = "";
 8009568:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800956c:	4618      	mov	r0, r3
 800956e:	f007 ff75 	bl	801145c <_ZNSaIcEC1Ev>
 8009572:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8009576:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800957a:	49c6      	ldr	r1, [pc, #792]	; (8009894 <_ZN10SmartDryer10changeDateEv+0x39c>)
 800957c:	4618      	mov	r0, r3
 800957e:	f008 fa35 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009582:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8009586:	4618      	mov	r0, r3
 8009588:	f007 ff69 	bl	801145e <_ZNSaIcED1Ev>
 800958c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009590:	4618      	mov	r0, r3
 8009592:	f007 ff63 	bl	801145c <_ZNSaIcEC1Ev>
 8009596:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800959a:	f107 0314 	add.w	r3, r7, #20
 800959e:	49bd      	ldr	r1, [pc, #756]	; (8009894 <_ZN10SmartDryer10changeDateEv+0x39c>)
 80095a0:	4618      	mov	r0, r3
 80095a2:	f008 fa23 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80095a6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80095aa:	4618      	mov	r0, r3
 80095ac:	f007 ff57 	bl	801145e <_ZNSaIcED1Ev>
	while(!ExitChangeDate)
 80095b0:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	f040 81ec 	bne.w	8009992 <_ZN10SmartDryer10changeDateEv+0x49a>
	{
		display->clearFrameBuffer();
 80095ba:	1d3b      	adds	r3, r7, #4
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7fb fa08 	bl	80049d6 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 80095c6:	f107 0214 	add.w	r2, r7, #20
 80095ca:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80095ce:	1d3b      	adds	r3, r7, #4
 80095d0:	6818      	ldr	r0, [r3, #0]
 80095d2:	f7fd fada 	bl	8006b8a <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		if(WichDateVar == 0)
 80095d6:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d12b      	bne.n	8009636 <_ZN10SmartDryer10changeDateEv+0x13e>
		{
			Title = "Imposta mese";
 80095de:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80095e2:	49ad      	ldr	r1, [pc, #692]	; (8009898 <_ZN10SmartDryer10changeDateEv+0x3a0>)
 80095e4:	4618      	mov	r0, r3
 80095e6:	f008 f94e 	bl	8011886 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = String(monthNames[Month - 1]);
 80095ea:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80095ee:	3b01      	subs	r3, #1
 80095f0:	4aaa      	ldr	r2, [pc, #680]	; (800989c <_ZN10SmartDryer10changeDateEv+0x3a4>)
 80095f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80095f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80095fa:	4618      	mov	r0, r3
 80095fc:	f007 ff2e 	bl	801145c <_ZNSaIcEC1Ev>
 8009600:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8009604:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8009608:	4621      	mov	r1, r4
 800960a:	4618      	mov	r0, r3
 800960c:	f008 f9ee 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009610:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8009614:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009618:	4611      	mov	r1, r2
 800961a:	4618      	mov	r0, r3
 800961c:	f008 f85b 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009620:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8009624:	4618      	mov	r0, r3
 8009626:	f008 f84a 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800962a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800962e:	4618      	mov	r0, r3
 8009630:	f007 ff15 	bl	801145e <_ZNSaIcED1Ev>
 8009634:	e03a      	b.n	80096ac <_ZN10SmartDryer10changeDateEv+0x1b4>
		}
		else if(WichDateVar == 1)
 8009636:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 800963a:	2b01      	cmp	r3, #1
 800963c:	d11b      	bne.n	8009676 <_ZN10SmartDryer10changeDateEv+0x17e>
		{
			Title = "Imposta giorno";
 800963e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009642:	4997      	ldr	r1, [pc, #604]	; (80098a0 <_ZN10SmartDryer10changeDateEv+0x3a8>)
 8009644:	4618      	mov	r0, r3
 8009646:	f008 f91e 	bl	8011886 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Day);
 800964a:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 800964e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009652:	4611      	mov	r1, r2
 8009654:	4618      	mov	r0, r3
 8009656:	f7f9 ff8f 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 800965a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800965e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009662:	4611      	mov	r1, r2
 8009664:	4618      	mov	r0, r3
 8009666:	f008 f836 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800966a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800966e:	4618      	mov	r0, r3
 8009670:	f008 f825 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009674:	e01a      	b.n	80096ac <_ZN10SmartDryer10changeDateEv+0x1b4>
		}
		else
		{
			Title = "Imposta anno";
 8009676:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800967a:	498a      	ldr	r1, [pc, #552]	; (80098a4 <_ZN10SmartDryer10changeDateEv+0x3ac>)
 800967c:	4618      	mov	r0, r3
 800967e:	f008 f902 	bl	8011886 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			Number = std::to_string(Year);
 8009682:	f897 2104 	ldrb.w	r2, [r7, #260]	; 0x104
 8009686:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800968a:	4611      	mov	r1, r2
 800968c:	4618      	mov	r0, r3
 800968e:	f7f9 ff73 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8009692:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8009696:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800969a:	4611      	mov	r1, r2
 800969c:	4618      	mov	r0, r3
 800969e:	f008 f81a 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80096a2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80096a6:	4618      	mov	r0, r3
 80096a8:	f008 f809 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
		display->drawString(Title, NHDST7565_LCD::CENTER_POS, 5, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 80096ac:	1d3b      	adds	r3, r7, #4
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	681c      	ldr	r4, [r3, #0]
 80096b2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80096b6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80096ba:	4611      	mov	r1, r2
 80096bc:	4618      	mov	r0, r3
 80096be:	f008 f962 	bl	8011986 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80096c2:	1d3b      	adds	r3, r7, #4
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80096cc:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80096d0:	9300      	str	r3, [sp, #0]
 80096d2:	2305      	movs	r3, #5
 80096d4:	2283      	movs	r2, #131	; 0x83
 80096d6:	4620      	mov	r0, r4
 80096d8:	f7fb f9a5 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 80096dc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80096e0:	4618      	mov	r0, r3
 80096e2:	f007 ffec 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(Number, NHDST7565_LCD::CENTER_POS, 30, display->displayFonts[NHDST7565_LCD::W_9_H_17_B]);
 80096e6:	1d3b      	adds	r3, r7, #4
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	681c      	ldr	r4, [r3, #0]
 80096ec:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80096f0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80096f4:	4611      	mov	r1, r2
 80096f6:	4618      	mov	r0, r3
 80096f8:	f008 f945 	bl	8011986 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80096fc:	1d3b      	adds	r3, r7, #4
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009706:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 800970a:	9300      	str	r3, [sp, #0]
 800970c:	231e      	movs	r3, #30
 800970e:	2283      	movs	r2, #131	; 0x83
 8009710:	4620      	mov	r0, r4
 8009712:	f7fb f988 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009716:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800971a:	4618      	mov	r0, r3
 800971c:	f007 ffcf 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawSymbol(60, 30, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x0070); // triangolo alto
 8009720:	1d3b      	adds	r3, r7, #4
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	6818      	ldr	r0, [r3, #0]
 8009726:	1d3b      	adds	r3, r7, #4
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8009730:	2370      	movs	r3, #112	; 0x70
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	4613      	mov	r3, r2
 8009736:	221e      	movs	r2, #30
 8009738:	213c      	movs	r1, #60	; 0x3c
 800973a:	f7fb fc23 	bl	8004f84 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->drawSymbol(60, 55, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x006D); // triangolo basso
 800973e:	1d3b      	adds	r3, r7, #4
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	6818      	ldr	r0, [r3, #0]
 8009744:	1d3b      	adds	r3, r7, #4
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800974e:	236d      	movs	r3, #109	; 0x6d
 8009750:	9300      	str	r3, [sp, #0]
 8009752:	4613      	mov	r3, r2
 8009754:	2237      	movs	r2, #55	; 0x37
 8009756:	213c      	movs	r1, #60	; 0x3c
 8009758:	f7fb fc14 	bl	8004f84 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		if(statusParam->serialDeviceAttached)
 800975c:	1d3b      	adds	r3, r7, #4
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009762:	7a5b      	ldrb	r3, [r3, #9]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d00b      	beq.n	8009780 <_ZN10SmartDryer10changeDateEv+0x288>
		{
			display->drawIcon(50, 0, SerialIcon_width, SerialIcon_height, SerialIcon_bits);
 8009768:	1d3b      	adds	r3, r7, #4
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	6818      	ldr	r0, [r3, #0]
 800976e:	4b4e      	ldr	r3, [pc, #312]	; (80098a8 <_ZN10SmartDryer10changeDateEv+0x3b0>)
 8009770:	9301      	str	r3, [sp, #4]
 8009772:	2308      	movs	r3, #8
 8009774:	9300      	str	r3, [sp, #0]
 8009776:	2314      	movs	r3, #20
 8009778:	2200      	movs	r2, #0
 800977a:	2132      	movs	r1, #50	; 0x32
 800977c:	f7fb fcbc 	bl	80050f8 <_ZN13NHDST7565_LCD8drawIconEhhhhPKh>
		}
		display->sendFrameBuffer();
 8009780:	1d3b      	adds	r3, r7, #4
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4618      	mov	r0, r3
 8009788:	f7fb f932 	bl	80049f0 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 800978c:	2308      	movs	r3, #8
 800978e:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		WichKey = keyboard->checkKey();
 8009792:	1d3b      	adds	r3, r7, #4
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	4618      	mov	r0, r3
 800979a:	f7fb ff35 	bl	8005608 <_ZN8DryerKey8checkKeyEv>
 800979e:	4603      	mov	r3, r0
 80097a0:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		switch(WichKey)
 80097a4:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 80097a8:	2b07      	cmp	r3, #7
 80097aa:	f200 80ca 	bhi.w	8009942 <_ZN10SmartDryer10changeDateEv+0x44a>
 80097ae:	a201      	add	r2, pc, #4	; (adr r2, 80097b4 <_ZN10SmartDryer10changeDateEv+0x2bc>)
 80097b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b4:	080097d5 	.word	0x080097d5
 80097b8:	08009841 	.word	0x08009841
 80097bc:	08009943 	.word	0x08009943
 80097c0:	080098cd 	.word	0x080098cd
 80097c4:	080097d5 	.word	0x080097d5
 80097c8:	08009841 	.word	0x08009841
 80097cc:	0800993b 	.word	0x0800993b
 80097d0:	08009927 	.word	0x08009927
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				if(WichDateVar == 1)
 80097d4:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d111      	bne.n	8009800 <_ZN10SmartDryer10changeDateEv+0x308>
				{
					if(Day > 1)
 80097dc:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d905      	bls.n	80097f0 <_ZN10SmartDryer10changeDateEv+0x2f8>
						Day--;
 80097e4:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80097e8:	3b01      	subs	r3, #1
 80097ea:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
					if(Year > 20)
						Year--;
					else
						Year = 99;
				}
				break;
 80097ee:	e0ab      	b.n	8009948 <_ZN10SmartDryer10changeDateEv+0x450>
						Day = daysInMonth[Month - 1];
 80097f0:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80097f4:	3b01      	subs	r3, #1
 80097f6:	4a2d      	ldr	r2, [pc, #180]	; (80098ac <_ZN10SmartDryer10changeDateEv+0x3b4>)
 80097f8:	5cd3      	ldrb	r3, [r2, r3]
 80097fa:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
				break;
 80097fe:	e0a3      	b.n	8009948 <_ZN10SmartDryer10changeDateEv+0x450>
				else if(WichDateVar == 0)
 8009800:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8009804:	2b00      	cmp	r3, #0
 8009806:	d10d      	bne.n	8009824 <_ZN10SmartDryer10changeDateEv+0x32c>
					if(Month > 1)
 8009808:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 800980c:	2b01      	cmp	r3, #1
 800980e:	d905      	bls.n	800981c <_ZN10SmartDryer10changeDateEv+0x324>
						Month--;
 8009810:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8009814:	3b01      	subs	r3, #1
 8009816:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 800981a:	e095      	b.n	8009948 <_ZN10SmartDryer10changeDateEv+0x450>
						Month = 12;
 800981c:	230c      	movs	r3, #12
 800981e:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 8009822:	e091      	b.n	8009948 <_ZN10SmartDryer10changeDateEv+0x450>
					if(Year > 20)
 8009824:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8009828:	2b14      	cmp	r3, #20
 800982a:	d905      	bls.n	8009838 <_ZN10SmartDryer10changeDateEv+0x340>
						Year--;
 800982c:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8009830:	3b01      	subs	r3, #1
 8009832:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 8009836:	e087      	b.n	8009948 <_ZN10SmartDryer10changeDateEv+0x450>
						Year = 99;
 8009838:	2363      	movs	r3, #99	; 0x63
 800983a:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 800983e:	e083      	b.n	8009948 <_ZN10SmartDryer10changeDateEv+0x450>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				if(WichDateVar == 1)
 8009840:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8009844:	2b01      	cmp	r3, #1
 8009846:	d112      	bne.n	800986e <_ZN10SmartDryer10changeDateEv+0x376>
				{
					if(Day < daysInMonth[Month - 1])
 8009848:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 800984c:	3b01      	subs	r3, #1
 800984e:	4a17      	ldr	r2, [pc, #92]	; (80098ac <_ZN10SmartDryer10changeDateEv+0x3b4>)
 8009850:	5cd3      	ldrb	r3, [r2, r3]
 8009852:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 8009856:	429a      	cmp	r2, r3
 8009858:	d205      	bcs.n	8009866 <_ZN10SmartDryer10changeDateEv+0x36e>
						Day++;
 800985a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800985e:	3301      	adds	r3, #1
 8009860:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
					if(Year < 99)
						Year++;
					else
						Year = 20;
				}
				break;
 8009864:	e070      	b.n	8009948 <_ZN10SmartDryer10changeDateEv+0x450>
						Day = 1;
 8009866:	2301      	movs	r3, #1
 8009868:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
				break;
 800986c:	e06c      	b.n	8009948 <_ZN10SmartDryer10changeDateEv+0x450>
				else if(WichDateVar == 0)
 800986e:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8009872:	2b00      	cmp	r3, #0
 8009874:	d11c      	bne.n	80098b0 <_ZN10SmartDryer10changeDateEv+0x3b8>
					if(Month < 12)
 8009876:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 800987a:	2b0b      	cmp	r3, #11
 800987c:	d805      	bhi.n	800988a <_ZN10SmartDryer10changeDateEv+0x392>
						Month++;
 800987e:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8009882:	3301      	adds	r3, #1
 8009884:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 8009888:	e05e      	b.n	8009948 <_ZN10SmartDryer10changeDateEv+0x450>
						Month = 1;
 800988a:	2301      	movs	r3, #1
 800988c:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				break;
 8009890:	e05a      	b.n	8009948 <_ZN10SmartDryer10changeDateEv+0x450>
 8009892:	bf00      	nop
 8009894:	08012a58 	.word	0x08012a58
 8009898:	08012abc 	.word	0x08012abc
 800989c:	20000000 	.word	0x20000000
 80098a0:	08012acc 	.word	0x08012acc
 80098a4:	08012adc 	.word	0x08012adc
 80098a8:	080159f0 	.word	0x080159f0
 80098ac:	080159e4 	.word	0x080159e4
					if(Year < 99)
 80098b0:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 80098b4:	2b62      	cmp	r3, #98	; 0x62
 80098b6:	d805      	bhi.n	80098c4 <_ZN10SmartDryer10changeDateEv+0x3cc>
						Year++;
 80098b8:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 80098bc:	3301      	adds	r3, #1
 80098be:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 80098c2:	e041      	b.n	8009948 <_ZN10SmartDryer10changeDateEv+0x450>
						Year = 20;
 80098c4:	2314      	movs	r3, #20
 80098c6:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				break;
 80098ca:	e03d      	b.n	8009948 <_ZN10SmartDryer10changeDateEv+0x450>
			case DryerKey::OK_KEY:
				if(WichDateVar < 2)
 80098cc:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d805      	bhi.n	80098e0 <_ZN10SmartDryer10changeDateEv+0x3e8>
				{
					WichDateVar++;
 80098d4:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80098d8:	3301      	adds	r3, #1
 80098da:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
					NewDate.month = Month;
					NewDate.year = Year + 2000;
					clock->adjustTimeDate(NewDate);
					ExitChangeDate = true;
				}
				break;
 80098de:	e033      	b.n	8009948 <_ZN10SmartDryer10changeDateEv+0x450>
					clock->getTimeDate(NewDate);
 80098e0:	1d3b      	adds	r3, r7, #4
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	f107 020c 	add.w	r2, r7, #12
 80098ea:	4611      	mov	r1, r2
 80098ec:	4618      	mov	r0, r3
 80098ee:	f7f9 ffd1 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
					NewDate.day = Day;
 80098f2:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80098f6:	73fb      	strb	r3, [r7, #15]
					NewDate.month = Month;
 80098f8:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80098fc:	743b      	strb	r3, [r7, #16]
					NewDate.year = Year + 2000;
 80098fe:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8009902:	b29b      	uxth	r3, r3
 8009904:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8009908:	b29b      	uxth	r3, r3
 800990a:	827b      	strh	r3, [r7, #18]
					clock->adjustTimeDate(NewDate);
 800990c:	1d3b      	adds	r3, r7, #4
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	6858      	ldr	r0, [r3, #4]
 8009912:	f107 030c 	add.w	r3, r7, #12
 8009916:	e893 0006 	ldmia.w	r3, {r1, r2}
 800991a:	f7f9 ff11 	bl	8003740 <_ZN10DS1307_RTC14adjustTimeDateENS_11TIME_DATE_TE>
					ExitChangeDate = true;
 800991e:	2301      	movs	r3, #1
 8009920:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				break;
 8009924:	e010      	b.n	8009948 <_ZN10SmartDryer10changeDateEv+0x450>
			case DryerKey::LONG_OK_KEY:
				if(WichDateVar > 0)
 8009926:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 800992a:	2b00      	cmp	r3, #0
 800992c:	d00b      	beq.n	8009946 <_ZN10SmartDryer10changeDateEv+0x44e>
				{
					WichDateVar--;
 800992e:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8009932:	3b01      	subs	r3, #1
 8009934:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
				}
				break;
 8009938:	e005      	b.n	8009946 <_ZN10SmartDryer10changeDateEv+0x44e>
			case DryerKey::LONG_LEFT_KEY:
				ExitChangeDate = true;
 800993a:	2301      	movs	r3, #1
 800993c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				break;
 8009940:	e002      	b.n	8009948 <_ZN10SmartDryer10changeDateEv+0x450>
			default:
				break;
 8009942:	bf00      	nop
 8009944:	e000      	b.n	8009948 <_ZN10SmartDryer10changeDateEv+0x450>
				break;
 8009946:	bf00      	nop
		}
		if(WichKey != DryerKey::NO_KEY)
 8009948:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 800994c:	2b08      	cmp	r3, #8
 800994e:	d005      	beq.n	800995c <_ZN10SmartDryer10changeDateEv+0x464>
		{
			lcdLedAutoOffTimer->restart();
 8009950:	1d3b      	adds	r3, r7, #4
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009956:	4618      	mov	r0, r3
 8009958:	f7f9 fdcd 	bl	80034f6 <_ZN11ChronoTimer7restartEv>
		}
		peripheralsControl();
 800995c:	1d3b      	adds	r3, r7, #4
 800995e:	6818      	ldr	r0, [r3, #0]
 8009960:	f7fd f8fe 	bl	8006b60 <_ZN10SmartDryer18peripheralsControlEv>
		statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 8009964:	1d3b      	adds	r3, r7, #4
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800996a:	1d3b      	adds	r3, r7, #4
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8009970:	4610      	mov	r0, r2
 8009972:	f7fc f9a5 	bl	8005cc0 <_ZN13SerialMessage17isDeviceConnectedEv>
 8009976:	4603      	mov	r3, r0
 8009978:	7263      	strb	r3, [r4, #9]
		if(statusParam->serialDeviceAttached)
 800997a:	1d3b      	adds	r3, r7, #4
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009980:	7a5b      	ldrb	r3, [r3, #9]
 8009982:	2b00      	cmp	r3, #0
 8009984:	f43f ae14 	beq.w	80095b0 <_ZN10SmartDryer10changeDateEv+0xb8>
		{
			serialComunicationCtrl();
 8009988:	1d3b      	adds	r3, r7, #4
 800998a:	6818      	ldr	r0, [r3, #0]
 800998c:	f7fd fdec 	bl	8007568 <_ZN10SmartDryer22serialComunicationCtrlEv>
	while(!ExitChangeDate)
 8009990:	e60e      	b.n	80095b0 <_ZN10SmartDryer10changeDateEv+0xb8>
	String Time = "", Date = "";
 8009992:	f107 0314 	add.w	r3, r7, #20
 8009996:	4618      	mov	r0, r3
 8009998:	f007 fe91 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800999c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80099a0:	4618      	mov	r0, r3
 80099a2:	f007 fe8c 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Title = "", Number = "";
 80099a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80099aa:	4618      	mov	r0, r3
 80099ac:	f007 fe87 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80099b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80099b4:	4618      	mov	r0, r3
 80099b6:	f007 fe82 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
}
 80099ba:	bf00      	nop
 80099bc:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd90      	pop	{r4, r7, pc}

080099c4 <_ZN10SmartDryer8showInfoEv>:

void SmartDryer::showInfo()
{
 80099c4:	b590      	push	{r4, r7, lr}
 80099c6:	b0cd      	sub	sp, #308	; 0x134
 80099c8:	af02      	add	r7, sp, #8
 80099ca:	1d3b      	adds	r3, r7, #4
 80099cc:	6018      	str	r0, [r3, #0]
	bool ExitShowInfo = false;
 80099ce:	2300      	movs	r3, #0
 80099d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	String Time = "", Date = "";
 80099d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80099d8:	4618      	mov	r0, r3
 80099da:	f007 fd3f 	bl	801145c <_ZNSaIcEC1Ev>
 80099de:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80099e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80099e6:	49b4      	ldr	r1, [pc, #720]	; (8009cb8 <_ZN10SmartDryer8showInfoEv+0x2f4>)
 80099e8:	4618      	mov	r0, r3
 80099ea:	f007 ffff 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80099ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80099f2:	4618      	mov	r0, r3
 80099f4:	f007 fd33 	bl	801145e <_ZNSaIcED1Ev>
 80099f8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80099fc:	4618      	mov	r0, r3
 80099fe:	f007 fd2d 	bl	801145c <_ZNSaIcEC1Ev>
 8009a02:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8009a06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009a0a:	49ab      	ldr	r1, [pc, #684]	; (8009cb8 <_ZN10SmartDryer8showInfoEv+0x2f4>)
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f007 ffed 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009a12:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009a16:	4618      	mov	r0, r3
 8009a18:	f007 fd21 	bl	801145e <_ZNSaIcED1Ev>
	while(!ExitShowInfo)
 8009a1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	f040 8139 	bne.w	8009c98 <_ZN10SmartDryer8showInfoEv+0x2d4>
	{
		String TempReaded = floatString(chamberTemperature.readedValueFL, 1) + "C";
 8009a26:	1d3b      	adds	r3, r7, #4
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8009a2e:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8009a32:	1d39      	adds	r1, r7, #4
 8009a34:	2301      	movs	r3, #1
 8009a36:	6809      	ldr	r1, [r1, #0]
 8009a38:	f7fc fd98 	bl	800656c <_ZN10SmartDryer11floatStringB5cxx11Efh>
 8009a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a40:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8009a44:	4a9d      	ldr	r2, [pc, #628]	; (8009cbc <_ZN10SmartDryer8showInfoEv+0x2f8>)
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7fa fb62 	bl	8004110 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8009a4c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009a50:	4618      	mov	r0, r3
 8009a52:	f007 fe34 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		String HumidityReaded = floatString(chamberHumity.readedValueFL, 1) + "%";
 8009a56:	1d3b      	adds	r3, r7, #4
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8009a5e:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8009a62:	1d39      	adds	r1, r7, #4
 8009a64:	2301      	movs	r3, #1
 8009a66:	6809      	ldr	r1, [r1, #0]
 8009a68:	f7fc fd80 	bl	800656c <_ZN10SmartDryer11floatStringB5cxx11Efh>
 8009a6c:	f107 030c 	add.w	r3, r7, #12
 8009a70:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8009a74:	4a92      	ldr	r2, [pc, #584]	; (8009cc0 <_ZN10SmartDryer8showInfoEv+0x2fc>)
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7fa fb4a 	bl	8004110 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8009a7c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009a80:	4618      	mov	r0, r3
 8009a82:	f007 fe1c 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->clearFrameBuffer();
 8009a86:	1d3b      	adds	r3, r7, #4
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7fa ffa2 	bl	80049d6 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 8009a92:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8009a96:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8009a9a:	1d3b      	adds	r3, r7, #4
 8009a9c:	6818      	ldr	r0, [r3, #0]
 8009a9e:	f7fd f874 	bl	8006b8a <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString("Condizioni camera", NHDST7565_LCD::CENTER_POS, 8, display->displayFonts[NHDST7565_LCD::W_5_H_8]);
 8009aa2:	1d3b      	adds	r3, r7, #4
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	681c      	ldr	r4, [r3, #0]
 8009aa8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8009aac:	4618      	mov	r0, r3
 8009aae:	f007 fcd5 	bl	801145c <_ZNSaIcEC1Ev>
 8009ab2:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8009ab6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009aba:	4982      	ldr	r1, [pc, #520]	; (8009cc4 <_ZN10SmartDryer8showInfoEv+0x300>)
 8009abc:	4618      	mov	r0, r3
 8009abe:	f007 ff95 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009ac2:	1d3b      	adds	r3, r7, #4
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009acc:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8009ad0:	9300      	str	r3, [sp, #0]
 8009ad2:	2308      	movs	r3, #8
 8009ad4:	2283      	movs	r2, #131	; 0x83
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	f7fa ffa5 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009adc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f007 fdec 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009ae6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8009aea:	4618      	mov	r0, r3
 8009aec:	f007 fcb7 	bl	801145e <_ZNSaIcED1Ev>
		display->drawString(TempReaded + "    " + HumidityReaded, NHDST7565_LCD::CENTER_POS, 20, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8009af0:	1d3b      	adds	r3, r7, #4
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	681c      	ldr	r4, [r3, #0]
 8009af6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8009afa:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8009afe:	4a72      	ldr	r2, [pc, #456]	; (8009cc8 <_ZN10SmartDryer8showInfoEv+0x304>)
 8009b00:	4618      	mov	r0, r3
 8009b02:	f7fa fadb 	bl	80040bc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 8009b06:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8009b0a:	f107 020c 	add.w	r2, r7, #12
 8009b0e:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7fa fae5 	bl	80040e2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8009b18:	1d3b      	adds	r3, r7, #4
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009b22:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8009b26:	9300      	str	r3, [sp, #0]
 8009b28:	2314      	movs	r3, #20
 8009b2a:	2283      	movs	r2, #131	; 0x83
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	f7fa ff7a 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009b32:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8009b36:	4618      	mov	r0, r3
 8009b38:	f007 fdc1 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009b3c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8009b40:	4618      	mov	r0, r3
 8009b42:	f007 fdbc 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString("Versione SW", NHDST7565_LCD::CENTER_POS, 40, display->displayFonts[NHDST7565_LCD::W_5_H_8]);
 8009b46:	1d3b      	adds	r3, r7, #4
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	681c      	ldr	r4, [r3, #0]
 8009b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b50:	4618      	mov	r0, r3
 8009b52:	f007 fc83 	bl	801145c <_ZNSaIcEC1Ev>
 8009b56:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8009b5a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8009b5e:	495b      	ldr	r1, [pc, #364]	; (8009ccc <_ZN10SmartDryer8showInfoEv+0x308>)
 8009b60:	4618      	mov	r0, r3
 8009b62:	f007 ff43 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009b66:	1d3b      	adds	r3, r7, #4
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009b70:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8009b74:	9300      	str	r3, [sp, #0]
 8009b76:	2328      	movs	r3, #40	; 0x28
 8009b78:	2283      	movs	r2, #131	; 0x83
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	f7fa ff53 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009b80:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8009b84:	4618      	mov	r0, r3
 8009b86:	f007 fd9a 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009b8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f007 fc65 	bl	801145e <_ZNSaIcED1Ev>
		display->drawString(String(SW_VERSION), NHDST7565_LCD::CENTER_POS, 50, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8009b94:	1d3b      	adds	r3, r7, #4
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	681c      	ldr	r4, [r3, #0]
 8009b9a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f007 fc5c 	bl	801145c <_ZNSaIcEC1Ev>
 8009ba4:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8009ba8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8009bac:	4948      	ldr	r1, [pc, #288]	; (8009cd0 <_ZN10SmartDryer8showInfoEv+0x30c>)
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f007 ff1c 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009bb4:	1d3b      	adds	r3, r7, #4
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009bbe:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8009bc2:	9300      	str	r3, [sp, #0]
 8009bc4:	2332      	movs	r3, #50	; 0x32
 8009bc6:	2283      	movs	r2, #131	; 0x83
 8009bc8:	4620      	mov	r0, r4
 8009bca:	f7fa ff2c 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009bce:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f007 fd73 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009bd8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f007 fc3e 	bl	801145e <_ZNSaIcED1Ev>
		if(statusParam->serialDeviceAttached)
 8009be2:	1d3b      	adds	r3, r7, #4
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009be8:	7a5b      	ldrb	r3, [r3, #9]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d00b      	beq.n	8009c06 <_ZN10SmartDryer8showInfoEv+0x242>
		{
			display->drawIcon(50, 0, SerialIcon_width, SerialIcon_height, SerialIcon_bits);
 8009bee:	1d3b      	adds	r3, r7, #4
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	6818      	ldr	r0, [r3, #0]
 8009bf4:	4b37      	ldr	r3, [pc, #220]	; (8009cd4 <_ZN10SmartDryer8showInfoEv+0x310>)
 8009bf6:	9301      	str	r3, [sp, #4]
 8009bf8:	2308      	movs	r3, #8
 8009bfa:	9300      	str	r3, [sp, #0]
 8009bfc:	2314      	movs	r3, #20
 8009bfe:	2200      	movs	r2, #0
 8009c00:	2132      	movs	r1, #50	; 0x32
 8009c02:	f7fb fa79 	bl	80050f8 <_ZN13NHDST7565_LCD8drawIconEhhhhPKh>
		}
		display->sendFrameBuffer();
 8009c06:	1d3b      	adds	r3, r7, #4
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f7fa feef 	bl	80049f0 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 8009c12:	2308      	movs	r3, #8
 8009c14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
		WichKey = keyboard->checkKey();
 8009c18:	1d3b      	adds	r3, r7, #4
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7fb fcf2 	bl	8005608 <_ZN8DryerKey8checkKeyEv>
 8009c24:	4603      	mov	r3, r0
 8009c26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
		switch(WichKey)
 8009c2a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8009c2e:	2b06      	cmp	r3, #6
 8009c30:	d000      	beq.n	8009c34 <_ZN10SmartDryer8showInfoEv+0x270>
		{
			case DryerKey::LONG_LEFT_KEY:
				ExitShowInfo = true;
				break;
			default:
				break;
 8009c32:	e003      	b.n	8009c3c <_ZN10SmartDryer8showInfoEv+0x278>
				ExitShowInfo = true;
 8009c34:	2301      	movs	r3, #1
 8009c36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
				break;
 8009c3a:	bf00      	nop
		}
		if(WichKey != DryerKey::NO_KEY)
 8009c3c:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8009c40:	2b08      	cmp	r3, #8
 8009c42:	d005      	beq.n	8009c50 <_ZN10SmartDryer8showInfoEv+0x28c>
		{
			lcdLedAutoOffTimer->restart();
 8009c44:	1d3b      	adds	r3, r7, #4
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7f9 fc53 	bl	80034f6 <_ZN11ChronoTimer7restartEv>
		}
		peripheralsControl();
 8009c50:	1d3b      	adds	r3, r7, #4
 8009c52:	6818      	ldr	r0, [r3, #0]
 8009c54:	f7fc ff84 	bl	8006b60 <_ZN10SmartDryer18peripheralsControlEv>
		statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 8009c58:	1d3b      	adds	r3, r7, #4
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c5e:	1d3b      	adds	r3, r7, #4
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8009c64:	4610      	mov	r0, r2
 8009c66:	f7fc f82b 	bl	8005cc0 <_ZN13SerialMessage17isDeviceConnectedEv>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	7263      	strb	r3, [r4, #9]
		if(statusParam->serialDeviceAttached)
 8009c6e:	1d3b      	adds	r3, r7, #4
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c74:	7a5b      	ldrb	r3, [r3, #9]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d003      	beq.n	8009c82 <_ZN10SmartDryer8showInfoEv+0x2be>
		{
			serialComunicationCtrl();
 8009c7a:	1d3b      	adds	r3, r7, #4
 8009c7c:	6818      	ldr	r0, [r3, #0]
 8009c7e:	f7fd fc73 	bl	8007568 <_ZN10SmartDryer22serialComunicationCtrlEv>
		String HumidityReaded = floatString(chamberHumity.readedValueFL, 1) + "%";
 8009c82:	f107 030c 	add.w	r3, r7, #12
 8009c86:	4618      	mov	r0, r3
 8009c88:	f007 fd19 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		String TempReaded = floatString(chamberTemperature.readedValueFL, 1) + "C";
 8009c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c90:	4618      	mov	r0, r3
 8009c92:	f007 fd14 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	while(!ExitShowInfo)
 8009c96:	e6c1      	b.n	8009a1c <_ZN10SmartDryer8showInfoEv+0x58>
	String Time = "", Date = "";
 8009c98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f007 fd0e 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009ca2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f007 fd09 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
}
 8009cac:	bf00      	nop
 8009cae:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd90      	pop	{r4, r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	08012a58 	.word	0x08012a58
 8009cbc:	08012aec 	.word	0x08012aec
 8009cc0:	08012af0 	.word	0x08012af0
 8009cc4:	08012af4 	.word	0x08012af4
 8009cc8:	08012b08 	.word	0x08012b08
 8009ccc:	08012b10 	.word	0x08012b10
 8009cd0:	08012b1c 	.word	0x08012b1c
 8009cd4:	080159f0 	.word	0x080159f0

08009cd8 <_ZN10SmartDryer13changeProgramEh>:

void SmartDryer::changeProgram(uint8_t WichProgram)
{
 8009cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cda:	b0ef      	sub	sp, #444	; 0x1bc
 8009cdc:	af04      	add	r7, sp, #16
 8009cde:	1d3b      	adds	r3, r7, #4
 8009ce0:	6018      	str	r0, [r3, #0]
 8009ce2:	460a      	mov	r2, r1
 8009ce4:	1cfb      	adds	r3, r7, #3
 8009ce6:	701a      	strb	r2, [r3, #0]
	bool ExitChangeProgram = false;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
	uint8_t WichSetting = 0;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	f887 31a6 	strb.w	r3, [r7, #422]	; 0x1a6
	const uint8_t MAX_SETTINGS = 5;
 8009cf4:	2305      	movs	r3, #5
 8009cf6:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
	PROGRAM_STRUCURE NewProgram = dryerPrograms[WichProgram];
 8009cfa:	1cfb      	adds	r3, r7, #3
 8009cfc:	781a      	ldrb	r2, [r3, #0]
 8009cfe:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8009d02:	1d3b      	adds	r3, r7, #4
 8009d04:	6819      	ldr	r1, [r3, #0]
 8009d06:	4613      	mov	r3, r2
 8009d08:	005b      	lsls	r3, r3, #1
 8009d0a:	4413      	add	r3, r2
 8009d0c:	00db      	lsls	r3, r3, #3
 8009d0e:	440b      	add	r3, r1
 8009d10:	3348      	adds	r3, #72	; 0x48
 8009d12:	4605      	mov	r5, r0
 8009d14:	1d1c      	adds	r4, r3, #4
 8009d16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009d18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009d1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009d1e:	e885 0003 	stmia.w	r5, {r0, r1}
//	uint8_t StartHour = dryerPrograms[WichProgram].startTime.hour, StartMinute = dryerPrograms[WichProgram].startTime.minute;
//	uint8_t EndHour = dryerPrograms[WichProgram].endTime.hour, EndMinute = dryerPrograms[WichProgram].endTime.minute;
	uint32_t TemperatureSetted = (uint32_t)dryerPrograms[WichProgram].tempSetted;
 8009d22:	1cfb      	adds	r3, r7, #3
 8009d24:	781a      	ldrb	r2, [r3, #0]
 8009d26:	1d3b      	adds	r3, r7, #4
 8009d28:	6819      	ldr	r1, [r3, #0]
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	005b      	lsls	r3, r3, #1
 8009d2e:	4413      	add	r3, r2
 8009d30:	00db      	lsls	r3, r3, #3
 8009d32:	440b      	add	r3, r1
 8009d34:	3360      	adds	r3, #96	; 0x60
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f7f7 f88d 	bl	8000e58 <__aeabi_f2uiz>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	String Time = "", Date = "";
 8009d44:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f007 fb87 	bl	801145c <_ZNSaIcEC1Ev>
 8009d4e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8009d52:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009d56:	498f      	ldr	r1, [pc, #572]	; (8009f94 <_ZN10SmartDryer13changeProgramEh+0x2bc>)
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f007 fe47 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009d5e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009d62:	4618      	mov	r0, r3
 8009d64:	f007 fb7b 	bl	801145e <_ZNSaIcED1Ev>
 8009d68:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f007 fb75 	bl	801145c <_ZNSaIcEC1Ev>
 8009d72:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8009d76:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009d7a:	4986      	ldr	r1, [pc, #536]	; (8009f94 <_ZN10SmartDryer13changeProgramEh+0x2bc>)
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f007 fe35 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009d82:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009d86:	4618      	mov	r0, r3
 8009d88:	f007 fb69 	bl	801145e <_ZNSaIcED1Ev>
	String Title = "", SubTitle = "", Number = "";
 8009d8c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009d90:	4618      	mov	r0, r3
 8009d92:	f007 fb63 	bl	801145c <_ZNSaIcEC1Ev>
 8009d96:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8009d9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009d9e:	497d      	ldr	r1, [pc, #500]	; (8009f94 <_ZN10SmartDryer13changeProgramEh+0x2bc>)
 8009da0:	4618      	mov	r0, r3
 8009da2:	f007 fe23 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009da6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009daa:	4618      	mov	r0, r3
 8009dac:	f007 fb57 	bl	801145e <_ZNSaIcED1Ev>
 8009db0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009db4:	4618      	mov	r0, r3
 8009db6:	f007 fb51 	bl	801145c <_ZNSaIcEC1Ev>
 8009dba:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8009dbe:	f107 0320 	add.w	r3, r7, #32
 8009dc2:	4974      	ldr	r1, [pc, #464]	; (8009f94 <_ZN10SmartDryer13changeProgramEh+0x2bc>)
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f007 fe11 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009dca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f007 fb45 	bl	801145e <_ZNSaIcED1Ev>
 8009dd4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f007 fb3f 	bl	801145c <_ZNSaIcEC1Ev>
 8009dde:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8009de2:	f107 0308 	add.w	r3, r7, #8
 8009de6:	496b      	ldr	r1, [pc, #428]	; (8009f94 <_ZN10SmartDryer13changeProgramEh+0x2bc>)
 8009de8:	4618      	mov	r0, r3
 8009dea:	f007 fdff 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8009dee:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8009df2:	4618      	mov	r0, r3
 8009df4:	f007 fb33 	bl	801145e <_ZNSaIcED1Ev>
	while(!ExitChangeProgram)
 8009df8:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	f040 82f5 	bne.w	800a3ec <_ZN10SmartDryer13changeProgramEh+0x714>
	{
		Title = "Programma " + std::to_string(WichProgram + 1);
 8009e02:	1cfb      	adds	r3, r7, #3
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	1c5a      	adds	r2, r3, #1
 8009e08:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009e0c:	4611      	mov	r1, r2
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f7f9 fbb2 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8009e14:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009e18:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8009e1c:	495e      	ldr	r1, [pc, #376]	; (8009f98 <_ZN10SmartDryer13changeProgramEh+0x2c0>)
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7fa f934 	bl	800408c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8009e24:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8009e28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009e2c:	4611      	mov	r1, r2
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f007 fc51 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009e34:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f007 fc40 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009e3e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009e42:	4618      	mov	r0, r3
 8009e44:	f007 fc3b 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		switch(WichSetting)
 8009e48:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8009e4c:	2b04      	cmp	r3, #4
 8009e4e:	f200 80af 	bhi.w	8009fb0 <_ZN10SmartDryer13changeProgramEh+0x2d8>
 8009e52:	a201      	add	r2, pc, #4	; (adr r2, 8009e58 <_ZN10SmartDryer13changeProgramEh+0x180>)
 8009e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e58:	08009e6d 	.word	0x08009e6d
 8009e5c:	08009ea9 	.word	0x08009ea9
 8009e60:	08009ee5 	.word	0x08009ee5
 8009e64:	08009f21 	.word	0x08009f21
 8009e68:	08009f5d 	.word	0x08009f5d
		{
			case 0:
				SubTitle = "Ora di inizio";
 8009e6c:	f107 0320 	add.w	r3, r7, #32
 8009e70:	494a      	ldr	r1, [pc, #296]	; (8009f9c <_ZN10SmartDryer13changeProgramEh+0x2c4>)
 8009e72:	4618      	mov	r0, r3
 8009e74:	f007 fd07 	bl	8011886 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(NewProgram.startTime.hour);
 8009e78:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009e7c:	791b      	ldrb	r3, [r3, #4]
 8009e7e:	461a      	mov	r2, r3
 8009e80:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8009e84:	4611      	mov	r1, r2
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7f9 fb76 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8009e8c:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8009e90:	f107 0308 	add.w	r3, r7, #8
 8009e94:	4611      	mov	r1, r2
 8009e96:	4618      	mov	r0, r3
 8009e98:	f007 fc1d 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009e9c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f007 fc0c 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 8009ea6:	e084      	b.n	8009fb2 <_ZN10SmartDryer13changeProgramEh+0x2da>
			case 1:
				SubTitle = "Minuto di inizio";
 8009ea8:	f107 0320 	add.w	r3, r7, #32
 8009eac:	493c      	ldr	r1, [pc, #240]	; (8009fa0 <_ZN10SmartDryer13changeProgramEh+0x2c8>)
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f007 fce9 	bl	8011886 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(NewProgram.startTime.minute);
 8009eb4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009eb8:	78db      	ldrb	r3, [r3, #3]
 8009eba:	461a      	mov	r2, r3
 8009ebc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8009ec0:	4611      	mov	r1, r2
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7f9 fb58 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8009ec8:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8009ecc:	f107 0308 	add.w	r3, r7, #8
 8009ed0:	4611      	mov	r1, r2
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f007 fbff 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009ed8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8009edc:	4618      	mov	r0, r3
 8009ede:	f007 fbee 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 8009ee2:	e066      	b.n	8009fb2 <_ZN10SmartDryer13changeProgramEh+0x2da>
			case 2:
				SubTitle = "Ora di fine";
 8009ee4:	f107 0320 	add.w	r3, r7, #32
 8009ee8:	492e      	ldr	r1, [pc, #184]	; (8009fa4 <_ZN10SmartDryer13changeProgramEh+0x2cc>)
 8009eea:	4618      	mov	r0, r3
 8009eec:	f007 fccb 	bl	8011886 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(NewProgram.endTime.hour);
 8009ef0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009ef4:	7b1b      	ldrb	r3, [r3, #12]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8009efc:	4611      	mov	r1, r2
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7f9 fb3a 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8009f04:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8009f08:	f107 0308 	add.w	r3, r7, #8
 8009f0c:	4611      	mov	r1, r2
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f007 fbe1 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009f14:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f007 fbd0 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 8009f1e:	e048      	b.n	8009fb2 <_ZN10SmartDryer13changeProgramEh+0x2da>
			case 3:
				SubTitle = "Minuto di fine";
 8009f20:	f107 0320 	add.w	r3, r7, #32
 8009f24:	4920      	ldr	r1, [pc, #128]	; (8009fa8 <_ZN10SmartDryer13changeProgramEh+0x2d0>)
 8009f26:	4618      	mov	r0, r3
 8009f28:	f007 fcad 	bl	8011886 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(NewProgram.endTime.minute);
 8009f2c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009f30:	7adb      	ldrb	r3, [r3, #11]
 8009f32:	461a      	mov	r2, r3
 8009f34:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8009f38:	4611      	mov	r1, r2
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7f9 fb1c 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 8009f40:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8009f44:	f107 0308 	add.w	r3, r7, #8
 8009f48:	4611      	mov	r1, r2
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f007 fbc3 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009f50:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8009f54:	4618      	mov	r0, r3
 8009f56:	f007 fbb2 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 8009f5a:	e02a      	b.n	8009fb2 <_ZN10SmartDryer13changeProgramEh+0x2da>
			case 4:
				SubTitle = "Temperatura";
 8009f5c:	f107 0320 	add.w	r3, r7, #32
 8009f60:	4912      	ldr	r1, [pc, #72]	; (8009fac <_ZN10SmartDryer13changeProgramEh+0x2d4>)
 8009f62:	4618      	mov	r0, r3
 8009f64:	f007 fc8f 	bl	8011886 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				Number = std::to_string(TemperatureSetted);
 8009f68:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8009f6c:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7fc f919 	bl	80061a8 <_ZNSt7__cxx119to_stringEm>
 8009f76:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8009f7a:	f107 0308 	add.w	r3, r7, #8
 8009f7e:	4611      	mov	r1, r2
 8009f80:	4618      	mov	r0, r3
 8009f82:	f007 fba8 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8009f86:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f007 fb97 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				break;
 8009f90:	e00f      	b.n	8009fb2 <_ZN10SmartDryer13changeProgramEh+0x2da>
 8009f92:	bf00      	nop
 8009f94:	08012a58 	.word	0x08012a58
 8009f98:	08012b24 	.word	0x08012b24
 8009f9c:	08012b30 	.word	0x08012b30
 8009fa0:	08012b40 	.word	0x08012b40
 8009fa4:	08012b54 	.word	0x08012b54
 8009fa8:	08012b60 	.word	0x08012b60
 8009fac:	08012b70 	.word	0x08012b70
			default:
				break;
 8009fb0:	bf00      	nop
		}
		display->clearFrameBuffer();
 8009fb2:	1d3b      	adds	r3, r7, #4
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f7fa fd0c 	bl	80049d6 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 8009fbe:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009fc2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8009fc6:	1d3b      	adds	r3, r7, #4
 8009fc8:	6818      	ldr	r0, [r3, #0]
 8009fca:	f7fc fdde 	bl	8006b8a <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString(Title, NHDST7565_LCD::CENTER_POS, 7, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 8009fce:	1d3b      	adds	r3, r7, #4
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	681c      	ldr	r4, [r3, #0]
 8009fd4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009fd8:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8009fdc:	4611      	mov	r1, r2
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f007 fcd1 	bl	8011986 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8009fe4:	1d3b      	adds	r3, r7, #4
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009fee:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8009ff2:	9300      	str	r3, [sp, #0]
 8009ff4:	2307      	movs	r3, #7
 8009ff6:	2283      	movs	r2, #131	; 0x83
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	f7fa fd14 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 8009ffe:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800a002:	4618      	mov	r0, r3
 800a004:	f007 fb5b 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(SubTitle, NHDST7565_LCD::CENTER_POS, 22, display->displayFonts[NHDST7565_LCD::W_6_H_10]);
 800a008:	1d3b      	adds	r3, r7, #4
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	681c      	ldr	r4, [r3, #0]
 800a00e:	f107 0220 	add.w	r2, r7, #32
 800a012:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800a016:	4611      	mov	r1, r2
 800a018:	4618      	mov	r0, r3
 800a01a:	f007 fcb4 	bl	8011986 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800a01e:	1d3b      	adds	r3, r7, #4
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a028:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 800a02c:	9300      	str	r3, [sp, #0]
 800a02e:	2316      	movs	r3, #22
 800a030:	2283      	movs	r2, #131	; 0x83
 800a032:	4620      	mov	r0, r4
 800a034:	f7fa fcf7 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a038:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800a03c:	4618      	mov	r0, r3
 800a03e:	f007 fb3e 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(Number, NHDST7565_LCD::CENTER_POS, 41, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800a042:	1d3b      	adds	r3, r7, #4
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	681c      	ldr	r4, [r3, #0]
 800a048:	f107 0208 	add.w	r2, r7, #8
 800a04c:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800a050:	4611      	mov	r1, r2
 800a052:	4618      	mov	r0, r3
 800a054:	f007 fc97 	bl	8011986 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800a058:	1d3b      	adds	r3, r7, #4
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a062:	f507 71c2 	add.w	r1, r7, #388	; 0x184
 800a066:	9300      	str	r3, [sp, #0]
 800a068:	2329      	movs	r3, #41	; 0x29
 800a06a:	2283      	movs	r2, #131	; 0x83
 800a06c:	4620      	mov	r0, r4
 800a06e:	f7fa fcda 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a072:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800a076:	4618      	mov	r0, r3
 800a078:	f007 fb21 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawSymbol(60, 40, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x0070); // triangolo alto
 800a07c:	1d3b      	adds	r3, r7, #4
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	6818      	ldr	r0, [r3, #0]
 800a082:	1d3b      	adds	r3, r7, #4
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800a08c:	2370      	movs	r3, #112	; 0x70
 800a08e:	9300      	str	r3, [sp, #0]
 800a090:	4613      	mov	r3, r2
 800a092:	2228      	movs	r2, #40	; 0x28
 800a094:	213c      	movs	r1, #60	; 0x3c
 800a096:	f7fa ff75 	bl	8004f84 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		display->drawSymbol(60, 60, display->displayFonts[NHDST7565_LCD::W_8_H_8_ICON], 0x006D); // triangolo basso
 800a09a:	1d3b      	adds	r3, r7, #4
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	6818      	ldr	r0, [r3, #0]
 800a0a0:	1d3b      	adds	r3, r7, #4
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800a0aa:	236d      	movs	r3, #109	; 0x6d
 800a0ac:	9300      	str	r3, [sp, #0]
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	223c      	movs	r2, #60	; 0x3c
 800a0b2:	213c      	movs	r1, #60	; 0x3c
 800a0b4:	f7fa ff66 	bl	8004f84 <_ZN13NHDST7565_LCD10drawSymbolEhhPKht>
		if(statusParam->serialDeviceAttached)
 800a0b8:	1d3b      	adds	r3, r7, #4
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0be:	7a5b      	ldrb	r3, [r3, #9]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d00b      	beq.n	800a0dc <_ZN10SmartDryer13changeProgramEh+0x404>
		{
			display->drawIcon(50, 0, SerialIcon_width, SerialIcon_height, SerialIcon_bits);
 800a0c4:	1d3b      	adds	r3, r7, #4
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	6818      	ldr	r0, [r3, #0]
 800a0ca:	4bc7      	ldr	r3, [pc, #796]	; (800a3e8 <_ZN10SmartDryer13changeProgramEh+0x710>)
 800a0cc:	9301      	str	r3, [sp, #4]
 800a0ce:	2308      	movs	r3, #8
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	2314      	movs	r3, #20
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	2132      	movs	r1, #50	; 0x32
 800a0d8:	f7fb f80e 	bl	80050f8 <_ZN13NHDST7565_LCD8drawIconEhhhhPKh>
		}
		display->sendFrameBuffer();
 800a0dc:	1d3b      	adds	r3, r7, #4
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7fa fc84 	bl	80049f0 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 800a0e8:	2308      	movs	r3, #8
 800a0ea:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
		WichKey = keyboard->checkKey();
 800a0ee:	1d3b      	adds	r3, r7, #4
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	689b      	ldr	r3, [r3, #8]
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7fb fa87 	bl	8005608 <_ZN8DryerKey8checkKeyEv>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
		switch(WichKey)
 800a100:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 800a104:	2b07      	cmp	r3, #7
 800a106:	f200 8146 	bhi.w	800a396 <_ZN10SmartDryer13changeProgramEh+0x6be>
 800a10a:	a201      	add	r2, pc, #4	; (adr r2, 800a110 <_ZN10SmartDryer13changeProgramEh+0x438>)
 800a10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a110:	0800a131 	.word	0x0800a131
 800a114:	0800a20d 	.word	0x0800a20d
 800a118:	0800a37b 	.word	0x0800a37b
 800a11c:	0800a2e9 	.word	0x0800a2e9
 800a120:	0800a131 	.word	0x0800a131
 800a124:	0800a20d 	.word	0x0800a20d
 800a128:	0800a38f 	.word	0x0800a38f
 800a12c:	0800a397 	.word	0x0800a397
		{
			case DryerKey::UP_KEY:
			case DryerKey::LONG_UP_KEY:
				switch(WichSetting)
 800a130:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 800a134:	2b04      	cmp	r3, #4
 800a136:	d867      	bhi.n	800a208 <_ZN10SmartDryer13changeProgramEh+0x530>
 800a138:	a201      	add	r2, pc, #4	; (adr r2, 800a140 <_ZN10SmartDryer13changeProgramEh+0x468>)
 800a13a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a13e:	bf00      	nop
 800a140:	0800a155 	.word	0x0800a155
 800a144:	0800a17b 	.word	0x0800a17b
 800a148:	0800a1a1 	.word	0x0800a1a1
 800a14c:	0800a1c7 	.word	0x0800a1c7
 800a150:	0800a1ed 	.word	0x0800a1ed
				{
					case 0:
						if(NewProgram.startTime.hour > 0)
 800a154:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a158:	791b      	ldrb	r3, [r3, #4]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d008      	beq.n	800a170 <_ZN10SmartDryer13changeProgramEh+0x498>
							NewProgram.startTime.hour--;
 800a15e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a162:	791b      	ldrb	r3, [r3, #4]
 800a164:	3b01      	subs	r3, #1
 800a166:	b2da      	uxtb	r2, r3
 800a168:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a16c:	711a      	strb	r2, [r3, #4]
						else
							NewProgram.startTime.hour = 23;
						break;
 800a16e:	e04c      	b.n	800a20a <_ZN10SmartDryer13changeProgramEh+0x532>
							NewProgram.startTime.hour = 23;
 800a170:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a174:	2217      	movs	r2, #23
 800a176:	711a      	strb	r2, [r3, #4]
						break;
 800a178:	e047      	b.n	800a20a <_ZN10SmartDryer13changeProgramEh+0x532>
					case 1:
						if(NewProgram.startTime.minute > 0)
 800a17a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a17e:	78db      	ldrb	r3, [r3, #3]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d008      	beq.n	800a196 <_ZN10SmartDryer13changeProgramEh+0x4be>
							NewProgram.startTime.minute -= 10;
 800a184:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a188:	78db      	ldrb	r3, [r3, #3]
 800a18a:	3b0a      	subs	r3, #10
 800a18c:	b2da      	uxtb	r2, r3
 800a18e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a192:	70da      	strb	r2, [r3, #3]
						else
							NewProgram.startTime.minute = 50;
						break;
 800a194:	e039      	b.n	800a20a <_ZN10SmartDryer13changeProgramEh+0x532>
							NewProgram.startTime.minute = 50;
 800a196:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a19a:	2232      	movs	r2, #50	; 0x32
 800a19c:	70da      	strb	r2, [r3, #3]
						break;
 800a19e:	e034      	b.n	800a20a <_ZN10SmartDryer13changeProgramEh+0x532>
					case 2:
						if(NewProgram.endTime.hour > 0)
 800a1a0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a1a4:	7b1b      	ldrb	r3, [r3, #12]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d008      	beq.n	800a1bc <_ZN10SmartDryer13changeProgramEh+0x4e4>
							NewProgram.endTime.hour--;
 800a1aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a1ae:	7b1b      	ldrb	r3, [r3, #12]
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	b2da      	uxtb	r2, r3
 800a1b4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a1b8:	731a      	strb	r2, [r3, #12]
						else
							NewProgram.endTime.hour = 23;
						break;
 800a1ba:	e026      	b.n	800a20a <_ZN10SmartDryer13changeProgramEh+0x532>
							NewProgram.endTime.hour = 23;
 800a1bc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a1c0:	2217      	movs	r2, #23
 800a1c2:	731a      	strb	r2, [r3, #12]
						break;
 800a1c4:	e021      	b.n	800a20a <_ZN10SmartDryer13changeProgramEh+0x532>
					case 3:
						if(NewProgram.endTime.minute > 0)
 800a1c6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a1ca:	7adb      	ldrb	r3, [r3, #11]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d008      	beq.n	800a1e2 <_ZN10SmartDryer13changeProgramEh+0x50a>
							NewProgram.endTime.minute -= 10;
 800a1d0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a1d4:	7adb      	ldrb	r3, [r3, #11]
 800a1d6:	3b0a      	subs	r3, #10
 800a1d8:	b2da      	uxtb	r2, r3
 800a1da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a1de:	72da      	strb	r2, [r3, #11]
						else
							NewProgram.endTime.minute = 50;
						break;
 800a1e0:	e013      	b.n	800a20a <_ZN10SmartDryer13changeProgramEh+0x532>
							NewProgram.endTime.minute = 50;
 800a1e2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a1e6:	2232      	movs	r2, #50	; 0x32
 800a1e8:	72da      	strb	r2, [r3, #11]
						break;
 800a1ea:	e00e      	b.n	800a20a <_ZN10SmartDryer13changeProgramEh+0x532>
					case 4:
						if(TemperatureSetted > 30)
 800a1ec:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800a1f0:	2b1e      	cmp	r3, #30
 800a1f2:	d905      	bls.n	800a200 <_ZN10SmartDryer13changeProgramEh+0x528>
							TemperatureSetted -= 5;
 800a1f4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800a1f8:	3b05      	subs	r3, #5
 800a1fa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
						else
							TemperatureSetted = 90;
						break;
 800a1fe:	e004      	b.n	800a20a <_ZN10SmartDryer13changeProgramEh+0x532>
							TemperatureSetted = 90;
 800a200:	235a      	movs	r3, #90	; 0x5a
 800a202:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
						break;
 800a206:	e000      	b.n	800a20a <_ZN10SmartDryer13changeProgramEh+0x532>
					default:
						break;
 800a208:	bf00      	nop
				}
				break;
 800a20a:	e0c7      	b.n	800a39c <_ZN10SmartDryer13changeProgramEh+0x6c4>
			case DryerKey::DOWN_KEY:
			case DryerKey::LONG_DOWN_KEY:
				switch(WichSetting)
 800a20c:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 800a210:	2b04      	cmp	r3, #4
 800a212:	d867      	bhi.n	800a2e4 <_ZN10SmartDryer13changeProgramEh+0x60c>
 800a214:	a201      	add	r2, pc, #4	; (adr r2, 800a21c <_ZN10SmartDryer13changeProgramEh+0x544>)
 800a216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a21a:	bf00      	nop
 800a21c:	0800a231 	.word	0x0800a231
 800a220:	0800a257 	.word	0x0800a257
 800a224:	0800a27d 	.word	0x0800a27d
 800a228:	0800a2a3 	.word	0x0800a2a3
 800a22c:	0800a2c9 	.word	0x0800a2c9
				{
					case 0:
						if(NewProgram.startTime.hour < 23)
 800a230:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a234:	791b      	ldrb	r3, [r3, #4]
 800a236:	2b16      	cmp	r3, #22
 800a238:	d808      	bhi.n	800a24c <_ZN10SmartDryer13changeProgramEh+0x574>
							NewProgram.startTime.hour++;
 800a23a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a23e:	791b      	ldrb	r3, [r3, #4]
 800a240:	3301      	adds	r3, #1
 800a242:	b2da      	uxtb	r2, r3
 800a244:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a248:	711a      	strb	r2, [r3, #4]
						else
							NewProgram.startTime.hour = 0;
						break;
 800a24a:	e04c      	b.n	800a2e6 <_ZN10SmartDryer13changeProgramEh+0x60e>
							NewProgram.startTime.hour = 0;
 800a24c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a250:	2200      	movs	r2, #0
 800a252:	711a      	strb	r2, [r3, #4]
						break;
 800a254:	e047      	b.n	800a2e6 <_ZN10SmartDryer13changeProgramEh+0x60e>
					case 1:
						if(NewProgram.startTime.minute < 50)
 800a256:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a25a:	78db      	ldrb	r3, [r3, #3]
 800a25c:	2b31      	cmp	r3, #49	; 0x31
 800a25e:	d808      	bhi.n	800a272 <_ZN10SmartDryer13changeProgramEh+0x59a>
							NewProgram.startTime.minute += 10;
 800a260:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a264:	78db      	ldrb	r3, [r3, #3]
 800a266:	330a      	adds	r3, #10
 800a268:	b2da      	uxtb	r2, r3
 800a26a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a26e:	70da      	strb	r2, [r3, #3]
						else
							NewProgram.startTime.minute = 0;
						break;
 800a270:	e039      	b.n	800a2e6 <_ZN10SmartDryer13changeProgramEh+0x60e>
							NewProgram.startTime.minute = 0;
 800a272:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a276:	2200      	movs	r2, #0
 800a278:	70da      	strb	r2, [r3, #3]
						break;
 800a27a:	e034      	b.n	800a2e6 <_ZN10SmartDryer13changeProgramEh+0x60e>
					case 2:
						if(NewProgram.endTime.hour < 23)
 800a27c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a280:	7b1b      	ldrb	r3, [r3, #12]
 800a282:	2b16      	cmp	r3, #22
 800a284:	d808      	bhi.n	800a298 <_ZN10SmartDryer13changeProgramEh+0x5c0>
							NewProgram.endTime.hour++;
 800a286:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a28a:	7b1b      	ldrb	r3, [r3, #12]
 800a28c:	3301      	adds	r3, #1
 800a28e:	b2da      	uxtb	r2, r3
 800a290:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a294:	731a      	strb	r2, [r3, #12]
						else
							NewProgram.endTime.hour = 0;
						break;
 800a296:	e026      	b.n	800a2e6 <_ZN10SmartDryer13changeProgramEh+0x60e>
							NewProgram.endTime.hour = 0;
 800a298:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a29c:	2200      	movs	r2, #0
 800a29e:	731a      	strb	r2, [r3, #12]
						break;
 800a2a0:	e021      	b.n	800a2e6 <_ZN10SmartDryer13changeProgramEh+0x60e>
					case 3:
						if(NewProgram.endTime.minute < 50)
 800a2a2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a2a6:	7adb      	ldrb	r3, [r3, #11]
 800a2a8:	2b31      	cmp	r3, #49	; 0x31
 800a2aa:	d808      	bhi.n	800a2be <_ZN10SmartDryer13changeProgramEh+0x5e6>
							NewProgram.endTime.minute += 10;
 800a2ac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a2b0:	7adb      	ldrb	r3, [r3, #11]
 800a2b2:	330a      	adds	r3, #10
 800a2b4:	b2da      	uxtb	r2, r3
 800a2b6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a2ba:	72da      	strb	r2, [r3, #11]
						else
							NewProgram.endTime.minute = 0;
						break;
 800a2bc:	e013      	b.n	800a2e6 <_ZN10SmartDryer13changeProgramEh+0x60e>
							NewProgram.endTime.minute = 0;
 800a2be:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	72da      	strb	r2, [r3, #11]
						break;
 800a2c6:	e00e      	b.n	800a2e6 <_ZN10SmartDryer13changeProgramEh+0x60e>
					case 4:
						if(TemperatureSetted < 90)
 800a2c8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800a2cc:	2b59      	cmp	r3, #89	; 0x59
 800a2ce:	d805      	bhi.n	800a2dc <_ZN10SmartDryer13changeProgramEh+0x604>
							TemperatureSetted += 5;
 800a2d0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800a2d4:	3305      	adds	r3, #5
 800a2d6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
						else
							TemperatureSetted = 30;
						break;
 800a2da:	e004      	b.n	800a2e6 <_ZN10SmartDryer13changeProgramEh+0x60e>
							TemperatureSetted = 30;
 800a2dc:	231e      	movs	r3, #30
 800a2de:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
						break;
 800a2e2:	e000      	b.n	800a2e6 <_ZN10SmartDryer13changeProgramEh+0x60e>
					default:
						break;
 800a2e4:	bf00      	nop
				}
				break;
 800a2e6:	e059      	b.n	800a39c <_ZN10SmartDryer13changeProgramEh+0x6c4>
			case DryerKey::OK_KEY:
				if(WichSetting < MAX_SETTINGS - 1)
 800a2e8:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 800a2ec:	2b03      	cmp	r3, #3
 800a2ee:	d805      	bhi.n	800a2fc <_ZN10SmartDryer13changeProgramEh+0x624>
					WichSetting++;
 800a2f0:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	f887 31a6 	strb.w	r3, [r7, #422]	; 0x1a6
					{
						saveDryerProgram(WichProgram);
					}
					ExitChangeProgram = true;
				}
				break;
 800a2fa:	e04f      	b.n	800a39c <_ZN10SmartDryer13changeProgramEh+0x6c4>
					checkSettedProgramTime(WichProgram, NewProgram);
 800a2fc:	f107 0480 	add.w	r4, r7, #128	; 0x80
 800a300:	1cfb      	adds	r3, r7, #3
 800a302:	f893 c000 	ldrb.w	ip, [r3]
 800a306:	1d3d      	adds	r5, r7, #4
 800a308:	466e      	mov	r6, sp
 800a30a:	f104 0308 	add.w	r3, r4, #8
 800a30e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a310:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800a314:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a318:	4661      	mov	r1, ip
 800a31a:	6828      	ldr	r0, [r5, #0]
 800a31c:	f7fc fff2 	bl	8007304 <_ZN10SmartDryer22checkSettedProgramTimeEhNS_16PROGRAM_STRUCUREE>
					dryerPrograms[WichProgram].tempSetted = (float)TemperatureSetted;
 800a320:	1cfb      	adds	r3, r7, #3
 800a322:	781c      	ldrb	r4, [r3, #0]
 800a324:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 800a328:	f7f6 fbee 	bl	8000b08 <__aeabi_ui2f>
 800a32c:	4601      	mov	r1, r0
 800a32e:	1d3b      	adds	r3, r7, #4
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	4623      	mov	r3, r4
 800a334:	005b      	lsls	r3, r3, #1
 800a336:	4423      	add	r3, r4
 800a338:	00db      	lsls	r3, r3, #3
 800a33a:	4413      	add	r3, r2
 800a33c:	3360      	adds	r3, #96	; 0x60
 800a33e:	6019      	str	r1, [r3, #0]
					dryerPrograms[WichProgram].programSetted = true;
 800a340:	1cfb      	adds	r3, r7, #3
 800a342:	781a      	ldrb	r2, [r3, #0]
 800a344:	1d3b      	adds	r3, r7, #4
 800a346:	6819      	ldr	r1, [r3, #0]
 800a348:	4613      	mov	r3, r2
 800a34a:	005b      	lsls	r3, r3, #1
 800a34c:	4413      	add	r3, r2
 800a34e:	00db      	lsls	r3, r3, #3
 800a350:	440b      	add	r3, r1
 800a352:	334c      	adds	r3, #76	; 0x4c
 800a354:	2201      	movs	r2, #1
 800a356:	701a      	strb	r2, [r3, #0]
					if(eepromEnabled)
 800a358:	1d3b      	adds	r3, r7, #4
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
 800a360:	2b00      	cmp	r3, #0
 800a362:	d006      	beq.n	800a372 <_ZN10SmartDryer13changeProgramEh+0x69a>
						saveDryerProgram(WichProgram);
 800a364:	1cfb      	adds	r3, r7, #3
 800a366:	781a      	ldrb	r2, [r3, #0]
 800a368:	1d3b      	adds	r3, r7, #4
 800a36a:	4611      	mov	r1, r2
 800a36c:	6818      	ldr	r0, [r3, #0]
 800a36e:	f7fc fd03 	bl	8006d78 <_ZN10SmartDryer16saveDryerProgramEh>
					ExitChangeProgram = true;
 800a372:	2301      	movs	r3, #1
 800a374:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
				break;
 800a378:	e010      	b.n	800a39c <_ZN10SmartDryer13changeProgramEh+0x6c4>
			case DryerKey::LEFT_KEY:
				if(WichSetting > 0)
 800a37a:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d00b      	beq.n	800a39a <_ZN10SmartDryer13changeProgramEh+0x6c2>
					WichSetting--;
 800a382:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 800a386:	3b01      	subs	r3, #1
 800a388:	f887 31a6 	strb.w	r3, [r7, #422]	; 0x1a6
				break;
 800a38c:	e005      	b.n	800a39a <_ZN10SmartDryer13changeProgramEh+0x6c2>
			case DryerKey::LONG_OK_KEY:

				break;
			case DryerKey::LONG_LEFT_KEY:
				ExitChangeProgram = true;
 800a38e:	2301      	movs	r3, #1
 800a390:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
				break;
 800a394:	e002      	b.n	800a39c <_ZN10SmartDryer13changeProgramEh+0x6c4>
			default:
				break;
 800a396:	bf00      	nop
 800a398:	e000      	b.n	800a39c <_ZN10SmartDryer13changeProgramEh+0x6c4>
				break;
 800a39a:	bf00      	nop
		}
		if(WichKey != DryerKey::NO_KEY)
 800a39c:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 800a3a0:	2b08      	cmp	r3, #8
 800a3a2:	d005      	beq.n	800a3b0 <_ZN10SmartDryer13changeProgramEh+0x6d8>
		{
			lcdLedAutoOffTimer->restart();
 800a3a4:	1d3b      	adds	r3, r7, #4
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7f9 f8a3 	bl	80034f6 <_ZN11ChronoTimer7restartEv>
		}
		peripheralsControl();
 800a3b0:	1d3b      	adds	r3, r7, #4
 800a3b2:	6818      	ldr	r0, [r3, #0]
 800a3b4:	f7fc fbd4 	bl	8006b60 <_ZN10SmartDryer18peripheralsControlEv>
		statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 800a3b8:	1d3b      	adds	r3, r7, #4
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a3be:	1d3b      	adds	r3, r7, #4
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800a3c4:	4610      	mov	r0, r2
 800a3c6:	f7fb fc7b 	bl	8005cc0 <_ZN13SerialMessage17isDeviceConnectedEv>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	7263      	strb	r3, [r4, #9]
		if(statusParam->serialDeviceAttached)
 800a3ce:	1d3b      	adds	r3, r7, #4
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3d4:	7a5b      	ldrb	r3, [r3, #9]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	f43f ad0e 	beq.w	8009df8 <_ZN10SmartDryer13changeProgramEh+0x120>
		{
			serialComunicationCtrl();
 800a3dc:	1d3b      	adds	r3, r7, #4
 800a3de:	6818      	ldr	r0, [r3, #0]
 800a3e0:	f7fd f8c2 	bl	8007568 <_ZN10SmartDryer22serialComunicationCtrlEv>
	while(!ExitChangeProgram)
 800a3e4:	e508      	b.n	8009df8 <_ZN10SmartDryer13changeProgramEh+0x120>
 800a3e6:	bf00      	nop
 800a3e8:	080159f0 	.word	0x080159f0
	String Title = "", SubTitle = "", Number = "";
 800a3ec:	f107 0308 	add.w	r3, r7, #8
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f007 f964 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a3f6:	f107 0320 	add.w	r3, r7, #32
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f007 f95f 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a400:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a404:	4618      	mov	r0, r3
 800a406:	f007 f95a 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Time = "", Date = "";
 800a40a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a40e:	4618      	mov	r0, r3
 800a410:	f007 f955 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a414:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a418:	4618      	mov	r0, r3
 800a41a:	f007 f950 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
}
 800a41e:	bf00      	nop
 800a420:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 800a424:	46bd      	mov	sp, r7
 800a426:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a428 <_ZN10SmartDryer12startProgramEh>:

void SmartDryer::startProgram(uint8_t WichProgram)
{
 800a428:	b590      	push	{r4, r7, lr}
 800a42a:	f5ad 7d5d 	sub.w	sp, sp, #884	; 0x374
 800a42e:	af02      	add	r7, sp, #8
 800a430:	1d3b      	adds	r3, r7, #4
 800a432:	6018      	str	r0, [r3, #0]
 800a434:	460a      	mov	r2, r1
 800a436:	1cfb      	adds	r3, r7, #3
 800a438:	701a      	strb	r2, [r3, #0]
	bool ExitStartProgram = false;
 800a43a:	2300      	movs	r3, #0
 800a43c:	f887 3367 	strb.w	r3, [r7, #871]	; 0x367
	bool ProgramEnd = false;
 800a440:	2300      	movs	r3, #0
 800a442:	f887 3366 	strb.w	r3, [r7, #870]	; 0x366
	String Time = "", Date = "";
 800a446:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800a44a:	4618      	mov	r0, r3
 800a44c:	f007 f806 	bl	801145c <_ZNSaIcEC1Ev>
 800a450:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800a454:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800a458:	49cb      	ldr	r1, [pc, #812]	; (800a788 <_ZN10SmartDryer12startProgramEh+0x360>)
 800a45a:	4618      	mov	r0, r3
 800a45c:	f007 fac6 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a460:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800a464:	4618      	mov	r0, r3
 800a466:	f006 fffa 	bl	801145e <_ZNSaIcED1Ev>
 800a46a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800a46e:	4618      	mov	r0, r3
 800a470:	f006 fff4 	bl	801145c <_ZNSaIcEC1Ev>
 800a474:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 800a478:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a47c:	49c2      	ldr	r1, [pc, #776]	; (800a788 <_ZN10SmartDryer12startProgramEh+0x360>)
 800a47e:	4618      	mov	r0, r3
 800a480:	f007 fab4 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a484:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800a488:	4618      	mov	r0, r3
 800a48a:	f006 ffe8 	bl	801145e <_ZNSaIcED1Ev>
	String StartHour = "", StartMinute = "", EndHour = "", EndMinute = "";
 800a48e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800a492:	4618      	mov	r0, r3
 800a494:	f006 ffe2 	bl	801145c <_ZNSaIcEC1Ev>
 800a498:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 800a49c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a4a0:	49b9      	ldr	r1, [pc, #740]	; (800a788 <_ZN10SmartDryer12startProgramEh+0x360>)
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f007 faa2 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a4a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f006 ffd6 	bl	801145e <_ZNSaIcED1Ev>
 800a4b2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f006 ffd0 	bl	801145c <_ZNSaIcEC1Ev>
 800a4bc:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800a4c0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a4c4:	49b0      	ldr	r1, [pc, #704]	; (800a788 <_ZN10SmartDryer12startProgramEh+0x360>)
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f007 fa90 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a4cc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f006 ffc4 	bl	801145e <_ZNSaIcED1Ev>
 800a4d6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f006 ffbe 	bl	801145c <_ZNSaIcEC1Ev>
 800a4e0:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800a4e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a4e8:	49a7      	ldr	r1, [pc, #668]	; (800a788 <_ZN10SmartDryer12startProgramEh+0x360>)
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f007 fa7e 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a4f0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f006 ffb2 	bl	801145e <_ZNSaIcED1Ev>
 800a4fa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800a4fe:	4618      	mov	r0, r3
 800a500:	f006 ffac 	bl	801145c <_ZNSaIcEC1Ev>
 800a504:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800a508:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a50c:	499e      	ldr	r1, [pc, #632]	; (800a788 <_ZN10SmartDryer12startProgramEh+0x360>)
 800a50e:	4618      	mov	r0, r3
 800a510:	f007 fa6c 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a514:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800a518:	4618      	mov	r0, r3
 800a51a:	f006 ffa0 	bl	801145e <_ZNSaIcED1Ev>
	String TempRead = "0C", TempSet = "0";
 800a51e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800a522:	4618      	mov	r0, r3
 800a524:	f006 ff9a 	bl	801145c <_ZNSaIcEC1Ev>
 800a528:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 800a52c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a530:	4996      	ldr	r1, [pc, #600]	; (800a78c <_ZN10SmartDryer12startProgramEh+0x364>)
 800a532:	4618      	mov	r0, r3
 800a534:	f007 fa5a 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a538:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800a53c:	4618      	mov	r0, r3
 800a53e:	f006 ff8e 	bl	801145e <_ZNSaIcED1Ev>
 800a542:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800a546:	4618      	mov	r0, r3
 800a548:	f006 ff88 	bl	801145c <_ZNSaIcEC1Ev>
 800a54c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800a550:	f107 0314 	add.w	r3, r7, #20
 800a554:	498e      	ldr	r1, [pc, #568]	; (800a790 <_ZN10SmartDryer12startProgramEh+0x368>)
 800a556:	4618      	mov	r0, r3
 800a558:	f007 fa48 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a55c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800a560:	4618      	mov	r0, r3
 800a562:	f006 ff7c 	bl	801145e <_ZNSaIcED1Ev>
	DS1307_RTC::TIME_DATE_T ActualTime;
	StartHour = dryerPrograms[WichProgram].startTime.hour > 9 ? std::to_string(dryerPrograms[WichProgram].startTime.hour) : "0" + std::to_string(dryerPrograms[WichProgram].startTime.hour);
 800a566:	1cfb      	adds	r3, r7, #3
 800a568:	781a      	ldrb	r2, [r3, #0]
 800a56a:	1d3b      	adds	r3, r7, #4
 800a56c:	6819      	ldr	r1, [r3, #0]
 800a56e:	4613      	mov	r3, r2
 800a570:	005b      	lsls	r3, r3, #1
 800a572:	4413      	add	r3, r2
 800a574:	00db      	lsls	r3, r3, #3
 800a576:	440b      	add	r3, r1
 800a578:	3350      	adds	r3, #80	; 0x50
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	2400      	movs	r4, #0
 800a57e:	2b09      	cmp	r3, #9
 800a580:	d912      	bls.n	800a5a8 <_ZN10SmartDryer12startProgramEh+0x180>
 800a582:	1cfb      	adds	r3, r7, #3
 800a584:	781a      	ldrb	r2, [r3, #0]
 800a586:	1d3b      	adds	r3, r7, #4
 800a588:	6819      	ldr	r1, [r3, #0]
 800a58a:	4613      	mov	r3, r2
 800a58c:	005b      	lsls	r3, r3, #1
 800a58e:	4413      	add	r3, r2
 800a590:	00db      	lsls	r3, r3, #3
 800a592:	440b      	add	r3, r1
 800a594:	3350      	adds	r3, #80	; 0x50
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	461a      	mov	r2, r3
 800a59a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800a59e:	4611      	mov	r1, r2
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f7f8 ffe9 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 800a5a6:	e01a      	b.n	800a5de <_ZN10SmartDryer12startProgramEh+0x1b6>
 800a5a8:	1cfb      	adds	r3, r7, #3
 800a5aa:	781a      	ldrb	r2, [r3, #0]
 800a5ac:	1d3b      	adds	r3, r7, #4
 800a5ae:	6819      	ldr	r1, [r3, #0]
 800a5b0:	4613      	mov	r3, r2
 800a5b2:	005b      	lsls	r3, r3, #1
 800a5b4:	4413      	add	r3, r2
 800a5b6:	00db      	lsls	r3, r3, #3
 800a5b8:	440b      	add	r3, r1
 800a5ba:	3350      	adds	r3, #80	; 0x50
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	461a      	mov	r2, r3
 800a5c0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800a5c4:	4611      	mov	r1, r2
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f7f8 ffd6 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 800a5cc:	2401      	movs	r4, #1
 800a5ce:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800a5d2:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800a5d6:	496e      	ldr	r1, [pc, #440]	; (800a790 <_ZN10SmartDryer12startProgramEh+0x368>)
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f7f9 fd57 	bl	800408c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800a5de:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 800a5e2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a5e6:	4611      	mov	r1, r2
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f007 f874 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a5ee:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f007 f863 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a5f8:	2c00      	cmp	r4, #0
 800a5fa:	d004      	beq.n	800a606 <_ZN10SmartDryer12startProgramEh+0x1de>
 800a5fc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800a600:	4618      	mov	r0, r3
 800a602:	f007 f85c 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	StartMinute = dryerPrograms[WichProgram].startTime.minute > 9 ? std::to_string(dryerPrograms[WichProgram].startTime.minute) : "0" + std::to_string(dryerPrograms[WichProgram].startTime.minute);
 800a606:	1cfb      	adds	r3, r7, #3
 800a608:	781a      	ldrb	r2, [r3, #0]
 800a60a:	1d3b      	adds	r3, r7, #4
 800a60c:	6819      	ldr	r1, [r3, #0]
 800a60e:	4613      	mov	r3, r2
 800a610:	005b      	lsls	r3, r3, #1
 800a612:	4413      	add	r3, r2
 800a614:	00db      	lsls	r3, r3, #3
 800a616:	440b      	add	r3, r1
 800a618:	334f      	adds	r3, #79	; 0x4f
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	2400      	movs	r4, #0
 800a61e:	2b09      	cmp	r3, #9
 800a620:	d912      	bls.n	800a648 <_ZN10SmartDryer12startProgramEh+0x220>
 800a622:	1cfb      	adds	r3, r7, #3
 800a624:	781a      	ldrb	r2, [r3, #0]
 800a626:	1d3b      	adds	r3, r7, #4
 800a628:	6819      	ldr	r1, [r3, #0]
 800a62a:	4613      	mov	r3, r2
 800a62c:	005b      	lsls	r3, r3, #1
 800a62e:	4413      	add	r3, r2
 800a630:	00db      	lsls	r3, r3, #3
 800a632:	440b      	add	r3, r1
 800a634:	334f      	adds	r3, #79	; 0x4f
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	461a      	mov	r2, r3
 800a63a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800a63e:	4611      	mov	r1, r2
 800a640:	4618      	mov	r0, r3
 800a642:	f7f8 ff99 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 800a646:	e01a      	b.n	800a67e <_ZN10SmartDryer12startProgramEh+0x256>
 800a648:	1cfb      	adds	r3, r7, #3
 800a64a:	781a      	ldrb	r2, [r3, #0]
 800a64c:	1d3b      	adds	r3, r7, #4
 800a64e:	6819      	ldr	r1, [r3, #0]
 800a650:	4613      	mov	r3, r2
 800a652:	005b      	lsls	r3, r3, #1
 800a654:	4413      	add	r3, r2
 800a656:	00db      	lsls	r3, r3, #3
 800a658:	440b      	add	r3, r1
 800a65a:	334f      	adds	r3, #79	; 0x4f
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	461a      	mov	r2, r3
 800a660:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800a664:	4611      	mov	r1, r2
 800a666:	4618      	mov	r0, r3
 800a668:	f7f8 ff86 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 800a66c:	2401      	movs	r4, #1
 800a66e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800a672:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 800a676:	4946      	ldr	r1, [pc, #280]	; (800a790 <_ZN10SmartDryer12startProgramEh+0x368>)
 800a678:	4618      	mov	r0, r3
 800a67a:	f7f9 fd07 	bl	800408c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800a67e:	f507 7292 	add.w	r2, r7, #292	; 0x124
 800a682:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a686:	4611      	mov	r1, r2
 800a688:	4618      	mov	r0, r3
 800a68a:	f007 f824 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a68e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800a692:	4618      	mov	r0, r3
 800a694:	f007 f813 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a698:	2c00      	cmp	r4, #0
 800a69a:	d004      	beq.n	800a6a6 <_ZN10SmartDryer12startProgramEh+0x27e>
 800a69c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f007 f80c 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	EndHour = dryerPrograms[WichProgram].endTime.hour > 9 ? std::to_string(dryerPrograms[WichProgram].endTime.hour) : "0" + std::to_string(dryerPrograms[WichProgram].endTime.hour);
 800a6a6:	1cfb      	adds	r3, r7, #3
 800a6a8:	781a      	ldrb	r2, [r3, #0]
 800a6aa:	1d3b      	adds	r3, r7, #4
 800a6ac:	6819      	ldr	r1, [r3, #0]
 800a6ae:	4613      	mov	r3, r2
 800a6b0:	005b      	lsls	r3, r3, #1
 800a6b2:	4413      	add	r3, r2
 800a6b4:	00db      	lsls	r3, r3, #3
 800a6b6:	440b      	add	r3, r1
 800a6b8:	3358      	adds	r3, #88	; 0x58
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	2400      	movs	r4, #0
 800a6be:	2b09      	cmp	r3, #9
 800a6c0:	d912      	bls.n	800a6e8 <_ZN10SmartDryer12startProgramEh+0x2c0>
 800a6c2:	1cfb      	adds	r3, r7, #3
 800a6c4:	781a      	ldrb	r2, [r3, #0]
 800a6c6:	1d3b      	adds	r3, r7, #4
 800a6c8:	6819      	ldr	r1, [r3, #0]
 800a6ca:	4613      	mov	r3, r2
 800a6cc:	005b      	lsls	r3, r3, #1
 800a6ce:	4413      	add	r3, r2
 800a6d0:	00db      	lsls	r3, r3, #3
 800a6d2:	440b      	add	r3, r1
 800a6d4:	3358      	adds	r3, #88	; 0x58
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	461a      	mov	r2, r3
 800a6da:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800a6de:	4611      	mov	r1, r2
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7f8 ff49 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 800a6e6:	e01a      	b.n	800a71e <_ZN10SmartDryer12startProgramEh+0x2f6>
 800a6e8:	1cfb      	adds	r3, r7, #3
 800a6ea:	781a      	ldrb	r2, [r3, #0]
 800a6ec:	1d3b      	adds	r3, r7, #4
 800a6ee:	6819      	ldr	r1, [r3, #0]
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	005b      	lsls	r3, r3, #1
 800a6f4:	4413      	add	r3, r2
 800a6f6:	00db      	lsls	r3, r3, #3
 800a6f8:	440b      	add	r3, r1
 800a6fa:	3358      	adds	r3, #88	; 0x58
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	461a      	mov	r2, r3
 800a700:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800a704:	4611      	mov	r1, r2
 800a706:	4618      	mov	r0, r3
 800a708:	f7f8 ff36 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 800a70c:	2401      	movs	r4, #1
 800a70e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800a712:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 800a716:	491e      	ldr	r1, [pc, #120]	; (800a790 <_ZN10SmartDryer12startProgramEh+0x368>)
 800a718:	4618      	mov	r0, r3
 800a71a:	f7f9 fcb7 	bl	800408c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800a71e:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 800a722:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a726:	4611      	mov	r1, r2
 800a728:	4618      	mov	r0, r3
 800a72a:	f006 ffd4 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a72e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800a732:	4618      	mov	r0, r3
 800a734:	f006 ffc3 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a738:	2c00      	cmp	r4, #0
 800a73a:	d004      	beq.n	800a746 <_ZN10SmartDryer12startProgramEh+0x31e>
 800a73c:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800a740:	4618      	mov	r0, r3
 800a742:	f006 ffbc 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	EndMinute = dryerPrograms[WichProgram].endTime.minute > 9 ? std::to_string(dryerPrograms[WichProgram].endTime.minute) : "0" + std::to_string(dryerPrograms[WichProgram].endTime.minute);
 800a746:	1cfb      	adds	r3, r7, #3
 800a748:	781a      	ldrb	r2, [r3, #0]
 800a74a:	1d3b      	adds	r3, r7, #4
 800a74c:	6819      	ldr	r1, [r3, #0]
 800a74e:	4613      	mov	r3, r2
 800a750:	005b      	lsls	r3, r3, #1
 800a752:	4413      	add	r3, r2
 800a754:	00db      	lsls	r3, r3, #3
 800a756:	440b      	add	r3, r1
 800a758:	3357      	adds	r3, #87	; 0x57
 800a75a:	781b      	ldrb	r3, [r3, #0]
 800a75c:	2400      	movs	r4, #0
 800a75e:	2b09      	cmp	r3, #9
 800a760:	d918      	bls.n	800a794 <_ZN10SmartDryer12startProgramEh+0x36c>
 800a762:	1cfb      	adds	r3, r7, #3
 800a764:	781a      	ldrb	r2, [r3, #0]
 800a766:	1d3b      	adds	r3, r7, #4
 800a768:	6819      	ldr	r1, [r3, #0]
 800a76a:	4613      	mov	r3, r2
 800a76c:	005b      	lsls	r3, r3, #1
 800a76e:	4413      	add	r3, r2
 800a770:	00db      	lsls	r3, r3, #3
 800a772:	440b      	add	r3, r1
 800a774:	3357      	adds	r3, #87	; 0x57
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	461a      	mov	r2, r3
 800a77a:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800a77e:	4611      	mov	r1, r2
 800a780:	4618      	mov	r0, r3
 800a782:	f7f8 fef9 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 800a786:	e020      	b.n	800a7ca <_ZN10SmartDryer12startProgramEh+0x3a2>
 800a788:	08012a58 	.word	0x08012a58
 800a78c:	08012b7c 	.word	0x08012b7c
 800a790:	08012b80 	.word	0x08012b80
 800a794:	1cfb      	adds	r3, r7, #3
 800a796:	781a      	ldrb	r2, [r3, #0]
 800a798:	1d3b      	adds	r3, r7, #4
 800a79a:	6819      	ldr	r1, [r3, #0]
 800a79c:	4613      	mov	r3, r2
 800a79e:	005b      	lsls	r3, r3, #1
 800a7a0:	4413      	add	r3, r2
 800a7a2:	00db      	lsls	r3, r3, #3
 800a7a4:	440b      	add	r3, r1
 800a7a6:	3357      	adds	r3, #87	; 0x57
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800a7b0:	4611      	mov	r1, r2
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7f8 fee0 	bl	8003578 <_ZNSt7__cxx119to_stringEi>
 800a7b8:	2401      	movs	r4, #1
 800a7ba:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800a7be:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 800a7c2:	49de      	ldr	r1, [pc, #888]	; (800ab3c <_ZN10SmartDryer12startProgramEh+0x714>)
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7f9 fc61 	bl	800408c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800a7ca:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 800a7ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a7d2:	4611      	mov	r1, r2
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f006 ff7e 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a7da:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f006 ff6d 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a7e4:	2c00      	cmp	r4, #0
 800a7e6:	d004      	beq.n	800a7f2 <_ZN10SmartDryer12startProgramEh+0x3ca>
 800a7e8:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f006 ff66 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	TempSet = floatString(dryerPrograms[WichProgram].tempSetted, 1) + "C";
 800a7f2:	1cfb      	adds	r3, r7, #3
 800a7f4:	781a      	ldrb	r2, [r3, #0]
 800a7f6:	1d3b      	adds	r3, r7, #4
 800a7f8:	6819      	ldr	r1, [r3, #0]
 800a7fa:	4613      	mov	r3, r2
 800a7fc:	005b      	lsls	r3, r3, #1
 800a7fe:	4413      	add	r3, r2
 800a800:	00db      	lsls	r3, r3, #3
 800a802:	440b      	add	r3, r1
 800a804:	3360      	adds	r3, #96	; 0x60
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	f507 70e6 	add.w	r0, r7, #460	; 0x1cc
 800a80c:	1d39      	adds	r1, r7, #4
 800a80e:	2301      	movs	r3, #1
 800a810:	6809      	ldr	r1, [r1, #0]
 800a812:	f7fb feab 	bl	800656c <_ZN10SmartDryer11floatStringB5cxx11Efh>
 800a816:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800a81a:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 800a81e:	4ac8      	ldr	r2, [pc, #800]	; (800ab40 <_ZN10SmartDryer12startProgramEh+0x718>)
 800a820:	4618      	mov	r0, r3
 800a822:	f7f9 fc75 	bl	8004110 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800a826:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 800a82a:	f107 0314 	add.w	r3, r7, #20
 800a82e:	4611      	mov	r1, r2
 800a830:	4618      	mov	r0, r3
 800a832:	f006 ff50 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a836:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800a83a:	4618      	mov	r0, r3
 800a83c:	f006 ff3f 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a840:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800a844:	4618      	mov	r0, r3
 800a846:	f006 ff3a 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	while(!ExitStartProgram)
 800a84a:	f897 3367 	ldrb.w	r3, [r7, #871]	; 0x367
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f040 83c4 	bne.w	800afdc <_ZN10SmartDryer12startProgramEh+0xbb4>
	{
		if(programStartedTimer->isFinished(true, 500))
 800a854:	1d3b      	adds	r3, r7, #4
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a85a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a85e:	2101      	movs	r1, #1
 800a860:	4618      	mov	r0, r3
 800a862:	f7f8 fe56 	bl	8003512 <_ZN11ChronoTimer10isFinishedEbm>
 800a866:	4603      	mov	r3, r0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d008      	beq.n	800a87e <_ZN10SmartDryer12startProgramEh+0x456>
		{
			clock->getTimeDate(ActualTime);
 800a86c:	1d3b      	adds	r3, r7, #4
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	f107 020c 	add.w	r2, r7, #12
 800a876:	4611      	mov	r1, r2
 800a878:	4618      	mov	r0, r3
 800a87a:	f7f9 f80b 	bl	8003894 <_ZN10DS1307_RTC11getTimeDateERNS_11TIME_DATE_TE>
		}
		TempRead = floatString(chamberTemperature.readedValueFL, 1) + "C";
 800a87e:	1d3b      	adds	r3, r7, #4
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800a886:	f507 70fe 	add.w	r0, r7, #508	; 0x1fc
 800a88a:	1d39      	adds	r1, r7, #4
 800a88c:	2301      	movs	r3, #1
 800a88e:	6809      	ldr	r1, [r1, #0]
 800a890:	f7fb fe6c 	bl	800656c <_ZN10SmartDryer11floatStringB5cxx11Efh>
 800a894:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800a898:	f507 71fe 	add.w	r1, r7, #508	; 0x1fc
 800a89c:	4aa8      	ldr	r2, [pc, #672]	; (800ab40 <_ZN10SmartDryer12startProgramEh+0x718>)
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7f9 fc36 	bl	8004110 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800a8a4:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
 800a8a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a8ac:	4611      	mov	r1, r2
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f006 ff11 	bl	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800a8b4:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f006 ff00 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a8be:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f006 fefb 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->clearFrameBuffer();
 800a8c8:	1d3b      	adds	r3, r7, #4
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f7fa f881 	bl	80049d6 <_ZN13NHDST7565_LCD16clearFrameBufferEv>
		showTimeDate(Time, Date);
 800a8d4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800a8d8:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 800a8dc:	1d3b      	adds	r3, r7, #4
 800a8de:	6818      	ldr	r0, [r3, #0]
 800a8e0:	f7fc f953 	bl	8006b8a <_ZN10SmartDryer12showTimeDateERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>
		display->drawString("Temp. letta", NHDST7565_LCD::LEFT_POS, 10, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 800a8e4:	1d3b      	adds	r3, r7, #4
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	681c      	ldr	r4, [r3, #0]
 800a8ea:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f006 fdb4 	bl	801145c <_ZNSaIcEC1Ev>
 800a8f4:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 800a8f8:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800a8fc:	4991      	ldr	r1, [pc, #580]	; (800ab44 <_ZN10SmartDryer12startProgramEh+0x71c>)
 800a8fe:	4618      	mov	r0, r3
 800a900:	f007 f874 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a904:	1d3b      	adds	r3, r7, #4
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a90e:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800a912:	9300      	str	r3, [sp, #0]
 800a914:	230a      	movs	r3, #10
 800a916:	2282      	movs	r2, #130	; 0x82
 800a918:	4620      	mov	r0, r4
 800a91a:	f7fa f884 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a91e:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800a922:	4618      	mov	r0, r3
 800a924:	f006 fecb 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a928:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 800a92c:	4618      	mov	r0, r3
 800a92e:	f006 fd96 	bl	801145e <_ZNSaIcED1Ev>
		display->drawString("Temp. target", NHDST7565_LCD::RIGHT_POS, 10, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 800a932:	1d3b      	adds	r3, r7, #4
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	681c      	ldr	r4, [r3, #0]
 800a938:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800a93c:	4618      	mov	r0, r3
 800a93e:	f006 fd8d 	bl	801145c <_ZNSaIcEC1Ev>
 800a942:	f507 7212 	add.w	r2, r7, #584	; 0x248
 800a946:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800a94a:	497f      	ldr	r1, [pc, #508]	; (800ab48 <_ZN10SmartDryer12startProgramEh+0x720>)
 800a94c:	4618      	mov	r0, r3
 800a94e:	f007 f84d 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800a952:	1d3b      	adds	r3, r7, #4
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a95c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800a960:	9300      	str	r3, [sp, #0]
 800a962:	230a      	movs	r3, #10
 800a964:	2284      	movs	r2, #132	; 0x84
 800a966:	4620      	mov	r0, r4
 800a968:	f7fa f85d 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a96c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800a970:	4618      	mov	r0, r3
 800a972:	f006 fea4 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a976:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800a97a:	4618      	mov	r0, r3
 800a97c:	f006 fd6f 	bl	801145e <_ZNSaIcED1Ev>
		display->drawString(TempRead, NHDST7565_LCD::LEFT_POS, 20, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800a980:	1d3b      	adds	r3, r7, #4
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	681c      	ldr	r4, [r3, #0]
 800a986:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800a98a:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800a98e:	4611      	mov	r1, r2
 800a990:	4618      	mov	r0, r3
 800a992:	f006 fff8 	bl	8011986 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800a996:	1d3b      	adds	r3, r7, #4
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a9a0:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 800a9a4:	9300      	str	r3, [sp, #0]
 800a9a6:	2314      	movs	r3, #20
 800a9a8:	2282      	movs	r2, #130	; 0x82
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	f7fa f83b 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a9b0:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f006 fe82 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(TempSet, NHDST7565_LCD::RIGHT_POS, 20, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800a9ba:	1d3b      	adds	r3, r7, #4
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	681c      	ldr	r4, [r3, #0]
 800a9c0:	f107 0214 	add.w	r2, r7, #20
 800a9c4:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800a9c8:	4611      	mov	r1, r2
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f006 ffdb 	bl	8011986 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800a9d0:	1d3b      	adds	r3, r7, #4
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a9da:	f507 7119 	add.w	r1, r7, #612	; 0x264
 800a9de:	9300      	str	r3, [sp, #0]
 800a9e0:	2314      	movs	r3, #20
 800a9e2:	2284      	movs	r2, #132	; 0x84
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	f7fa f81e 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800a9ea:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f006 fe65 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString("Inizio programma", NHDST7565_LCD::LEFT_POS, 40, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 800a9f4:	1d3b      	adds	r3, r7, #4
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	681c      	ldr	r4, [r3, #0]
 800a9fa:	f507 7325 	add.w	r3, r7, #660	; 0x294
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f006 fd2c 	bl	801145c <_ZNSaIcEC1Ev>
 800aa04:	f507 7225 	add.w	r2, r7, #660	; 0x294
 800aa08:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800aa0c:	494f      	ldr	r1, [pc, #316]	; (800ab4c <_ZN10SmartDryer12startProgramEh+0x724>)
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f006 ffec 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800aa14:	1d3b      	adds	r3, r7, #4
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aa1e:	f507 711f 	add.w	r1, r7, #636	; 0x27c
 800aa22:	9300      	str	r3, [sp, #0]
 800aa24:	2328      	movs	r3, #40	; 0x28
 800aa26:	2282      	movs	r2, #130	; 0x82
 800aa28:	4620      	mov	r0, r4
 800aa2a:	f7f9 fffc 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800aa2e:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800aa32:	4618      	mov	r0, r3
 800aa34:	f006 fe43 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800aa38:	f507 7325 	add.w	r3, r7, #660	; 0x294
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f006 fd0e 	bl	801145e <_ZNSaIcED1Ev>
		display->drawString("Fine programma", NHDST7565_LCD::RIGHT_POS, 40, display->displayFonts[NHDST7565_LCD::W_3_H_6]);
 800aa42:	1d3b      	adds	r3, r7, #4
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	681c      	ldr	r4, [r3, #0]
 800aa48:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f006 fd05 	bl	801145c <_ZNSaIcEC1Ev>
 800aa52:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 800aa56:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800aa5a:	493d      	ldr	r1, [pc, #244]	; (800ab50 <_ZN10SmartDryer12startProgramEh+0x728>)
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f006 ffc5 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800aa62:	1d3b      	adds	r3, r7, #4
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aa6c:	f507 7126 	add.w	r1, r7, #664	; 0x298
 800aa70:	9300      	str	r3, [sp, #0]
 800aa72:	2328      	movs	r3, #40	; 0x28
 800aa74:	2284      	movs	r2, #132	; 0x84
 800aa76:	4620      	mov	r0, r4
 800aa78:	f7f9 ffd5 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800aa7c:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800aa80:	4618      	mov	r0, r3
 800aa82:	f006 fe1c 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800aa86:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f006 fce7 	bl	801145e <_ZNSaIcED1Ev>
		display->drawString(StartHour + ":" + StartMinute, NHDST7565_LCD::LEFT_POS, 50, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800aa90:	1d3b      	adds	r3, r7, #4
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	681c      	ldr	r4, [r3, #0]
 800aa96:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 800aa9a:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800aa9e:	4a2d      	ldr	r2, [pc, #180]	; (800ab54 <_ZN10SmartDryer12startProgramEh+0x72c>)
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f7f9 fb0b 	bl	80040bc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 800aaa6:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800aaaa:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800aaae:	f507 7133 	add.w	r1, r7, #716	; 0x2cc
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7f9 fb15 	bl	80040e2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 800aab8:	1d3b      	adds	r3, r7, #4
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800aac2:	f507 712d 	add.w	r1, r7, #692	; 0x2b4
 800aac6:	9300      	str	r3, [sp, #0]
 800aac8:	2332      	movs	r3, #50	; 0x32
 800aaca:	2282      	movs	r2, #130	; 0x82
 800aacc:	4620      	mov	r0, r4
 800aace:	f7f9 ffaa 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800aad2:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800aad6:	4618      	mov	r0, r3
 800aad8:	f006 fdf1 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800aadc:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 800aae0:	4618      	mov	r0, r3
 800aae2:	f006 fdec 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		display->drawString(EndHour + ":" + EndMinute, NHDST7565_LCD::RIGHT_POS, 50, display->displayFonts[NHDST7565_LCD::W_6_H_13_B]);
 800aae6:	1d3b      	adds	r3, r7, #4
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	681c      	ldr	r4, [r3, #0]
 800aaec:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 800aaf0:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800aaf4:	4a17      	ldr	r2, [pc, #92]	; (800ab54 <_ZN10SmartDryer12startProgramEh+0x72c>)
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f7f9 fae0 	bl	80040bc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 800aafc:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 800ab00:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800ab04:	f507 713f 	add.w	r1, r7, #764	; 0x2fc
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f7f9 faea 	bl	80040e2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 800ab0e:	1d3b      	adds	r3, r7, #4
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ab18:	f507 7139 	add.w	r1, r7, #740	; 0x2e4
 800ab1c:	9300      	str	r3, [sp, #0]
 800ab1e:	2332      	movs	r3, #50	; 0x32
 800ab20:	2284      	movs	r2, #132	; 0x84
 800ab22:	4620      	mov	r0, r4
 800ab24:	f7f9 ff7f 	bl	8004a26 <_ZN13NHDST7565_LCD10drawStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhhPKh>
 800ab28:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f006 fdc6 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ab32:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 800ab36:	4618      	mov	r0, r3
 800ab38:	e00e      	b.n	800ab58 <_ZN10SmartDryer12startProgramEh+0x730>
 800ab3a:	bf00      	nop
 800ab3c:	08012b80 	.word	0x08012b80
 800ab40:	08012aec 	.word	0x08012aec
 800ab44:	08012b84 	.word	0x08012b84
 800ab48:	08012b90 	.word	0x08012b90
 800ab4c:	08012ba0 	.word	0x08012ba0
 800ab50:	08012bb4 	.word	0x08012bb4
 800ab54:	08012bc4 	.word	0x08012bc4
 800ab58:	f006 fdb1 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		if(statusParam->serialDeviceAttached)
 800ab5c:	1d3b      	adds	r3, r7, #4
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab62:	7a5b      	ldrb	r3, [r3, #9]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d00b      	beq.n	800ab80 <_ZN10SmartDryer12startProgramEh+0x758>
		{
			display->drawIcon(50, 0, SerialIcon_width, SerialIcon_height, SerialIcon_bits);
 800ab68:	1d3b      	adds	r3, r7, #4
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	6818      	ldr	r0, [r3, #0]
 800ab6e:	4bb2      	ldr	r3, [pc, #712]	; (800ae38 <_ZN10SmartDryer12startProgramEh+0xa10>)
 800ab70:	9301      	str	r3, [sp, #4]
 800ab72:	2308      	movs	r3, #8
 800ab74:	9300      	str	r3, [sp, #0]
 800ab76:	2314      	movs	r3, #20
 800ab78:	2200      	movs	r2, #0
 800ab7a:	2132      	movs	r1, #50	; 0x32
 800ab7c:	f7fa fabc 	bl	80050f8 <_ZN13NHDST7565_LCD8drawIconEhhhhPKh>
		}
		display->sendFrameBuffer();
 800ab80:	1d3b      	adds	r3, r7, #4
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7f9 ff32 	bl	80049f0 <_ZN13NHDST7565_LCD15sendFrameBufferEv>
		uint8_t WichKey = DryerKey::NO_KEY;
 800ab8c:	2308      	movs	r3, #8
 800ab8e:	f887 3365 	strb.w	r3, [r7, #869]	; 0x365
		WichKey = keyboard->checkKey();
 800ab92:	1d3b      	adds	r3, r7, #4
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f7fa fd35 	bl	8005608 <_ZN8DryerKey8checkKeyEv>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	f887 3365 	strb.w	r3, [r7, #869]	; 0x365
		switch(WichKey)
 800aba4:	f897 3365 	ldrb.w	r3, [r7, #869]	; 0x365
 800aba8:	2b03      	cmp	r3, #3
 800abaa:	d055      	beq.n	800ac58 <_ZN10SmartDryer12startProgramEh+0x830>
 800abac:	2b06      	cmp	r3, #6
 800abae:	d000      	beq.n	800abb2 <_ZN10SmartDryer12startProgramEh+0x78a>
					saveDryerProgram(WichProgram);
				}
				ExitStartProgram = true;
				break;
			default:
				break;
 800abb0:	e053      	b.n	800ac5a <_ZN10SmartDryer12startProgramEh+0x832>
				statusParam->dryerOn = false;
 800abb2:	1d3b      	adds	r3, r7, #4
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abb8:	2200      	movs	r2, #0
 800abba:	701a      	strb	r2, [r3, #0]
				statusParam->programStarted = false;
 800abbc:	1d3b      	adds	r3, r7, #4
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abc2:	2200      	movs	r2, #0
 800abc4:	721a      	strb	r2, [r3, #8]
				ledStatus = PROGRAM_END;
 800abc6:	1d3b      	adds	r3, r7, #4
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 800abce:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
				display->drawFullScreenPopUp("Programma terminato", 2000);
 800abd2:	1d3b      	adds	r3, r7, #4
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	681c      	ldr	r4, [r3, #0]
 800abd8:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 800abdc:	4618      	mov	r0, r3
 800abde:	f006 fc3d 	bl	801145c <_ZNSaIcEC1Ev>
 800abe2:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 800abe6:	f507 7345 	add.w	r3, r7, #788	; 0x314
 800abea:	4994      	ldr	r1, [pc, #592]	; (800ae3c <_ZN10SmartDryer12startProgramEh+0xa14>)
 800abec:	4618      	mov	r0, r3
 800abee:	f006 fefd 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800abf2:	f507 7345 	add.w	r3, r7, #788	; 0x314
 800abf6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800abfa:	4619      	mov	r1, r3
 800abfc:	4620      	mov	r0, r4
 800abfe:	f7fa fa3b 	bl	8005078 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 800ac02:	f507 7345 	add.w	r3, r7, #788	; 0x314
 800ac06:	4618      	mov	r0, r3
 800ac08:	f006 fd59 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ac0c:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 800ac10:	4618      	mov	r0, r3
 800ac12:	f006 fc24 	bl	801145e <_ZNSaIcED1Ev>
				programStartedTimer->stopTimer();
 800ac16:	1d3b      	adds	r3, r7, #4
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f7f8 fc54 	bl	80034ca <_ZN11ChronoTimer9stopTimerEv>
				ProgramEnd = true;
 800ac22:	2301      	movs	r3, #1
 800ac24:	f887 3366 	strb.w	r3, [r7, #870]	; 0x366
				if(eepromEnabled)
 800ac28:	1d3b      	adds	r3, r7, #4
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d00d      	beq.n	800ac50 <_ZN10SmartDryer12startProgramEh+0x828>
					writeDefaultsDryerProgram(WichProgram);
 800ac34:	1cfb      	adds	r3, r7, #3
 800ac36:	781a      	ldrb	r2, [r3, #0]
 800ac38:	1d3b      	adds	r3, r7, #4
 800ac3a:	4611      	mov	r1, r2
 800ac3c:	6818      	ldr	r0, [r3, #0]
 800ac3e:	f7fb ffff 	bl	8006c40 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>
					saveDryerProgram(WichProgram);
 800ac42:	1cfb      	adds	r3, r7, #3
 800ac44:	781a      	ldrb	r2, [r3, #0]
 800ac46:	1d3b      	adds	r3, r7, #4
 800ac48:	4611      	mov	r1, r2
 800ac4a:	6818      	ldr	r0, [r3, #0]
 800ac4c:	f7fc f894 	bl	8006d78 <_ZN10SmartDryer16saveDryerProgramEh>
				ExitStartProgram = true;
 800ac50:	2301      	movs	r3, #1
 800ac52:	f887 3367 	strb.w	r3, [r7, #871]	; 0x367
				break;
 800ac56:	e000      	b.n	800ac5a <_ZN10SmartDryer12startProgramEh+0x832>
				break;
 800ac58:	bf00      	nop
		}

		if(!statusParam->programStarted && !ProgramEnd)
 800ac5a:	1d3b      	adds	r3, r7, #4
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac60:	7a1b      	ldrb	r3, [r3, #8]
 800ac62:	f083 0301 	eor.w	r3, r3, #1
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	f000 80eb 	beq.w	800ae44 <_ZN10SmartDryer12startProgramEh+0xa1c>
 800ac6e:	f897 3366 	ldrb.w	r3, [r7, #870]	; 0x366
 800ac72:	f083 0301 	eor.w	r3, r3, #1
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	f000 80e3 	beq.w	800ae44 <_ZN10SmartDryer12startProgramEh+0xa1c>
		{
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour &&
 800ac7e:	f107 030c 	add.w	r3, r7, #12
 800ac82:	7899      	ldrb	r1, [r3, #2]
 800ac84:	1cfb      	adds	r3, r7, #3
 800ac86:	781a      	ldrb	r2, [r3, #0]
 800ac88:	1d3b      	adds	r3, r7, #4
 800ac8a:	6818      	ldr	r0, [r3, #0]
 800ac8c:	4613      	mov	r3, r2
 800ac8e:	005b      	lsls	r3, r3, #1
 800ac90:	4413      	add	r3, r2
 800ac92:	00db      	lsls	r3, r3, #3
 800ac94:	4403      	add	r3, r0
 800ac96:	3350      	adds	r3, #80	; 0x50
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	4299      	cmp	r1, r3
 800ac9c:	f0c0 8178 	bcc.w	800af90 <_ZN10SmartDryer12startProgramEh+0xb68>
					ActualTime.minute >= dryerPrograms[WichProgram].startTime.minute &&
 800aca0:	f107 030c 	add.w	r3, r7, #12
 800aca4:	7859      	ldrb	r1, [r3, #1]
 800aca6:	1cfb      	adds	r3, r7, #3
 800aca8:	781a      	ldrb	r2, [r3, #0]
 800acaa:	1d3b      	adds	r3, r7, #4
 800acac:	6818      	ldr	r0, [r3, #0]
 800acae:	4613      	mov	r3, r2
 800acb0:	005b      	lsls	r3, r3, #1
 800acb2:	4413      	add	r3, r2
 800acb4:	00db      	lsls	r3, r3, #3
 800acb6:	4403      	add	r3, r0
 800acb8:	334f      	adds	r3, #79	; 0x4f
 800acba:	781b      	ldrb	r3, [r3, #0]
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour &&
 800acbc:	4299      	cmp	r1, r3
 800acbe:	f0c0 8167 	bcc.w	800af90 <_ZN10SmartDryer12startProgramEh+0xb68>
					ActualTime.day >= dryerPrograms[WichProgram].startTime.day &&
 800acc2:	f107 030c 	add.w	r3, r7, #12
 800acc6:	78d9      	ldrb	r1, [r3, #3]
 800acc8:	1cfb      	adds	r3, r7, #3
 800acca:	781a      	ldrb	r2, [r3, #0]
 800accc:	1d3b      	adds	r3, r7, #4
 800acce:	6818      	ldr	r0, [r3, #0]
 800acd0:	4613      	mov	r3, r2
 800acd2:	005b      	lsls	r3, r3, #1
 800acd4:	4413      	add	r3, r2
 800acd6:	00db      	lsls	r3, r3, #3
 800acd8:	4403      	add	r3, r0
 800acda:	3351      	adds	r3, #81	; 0x51
 800acdc:	781b      	ldrb	r3, [r3, #0]
					ActualTime.minute >= dryerPrograms[WichProgram].startTime.minute &&
 800acde:	4299      	cmp	r1, r3
 800ace0:	f0c0 8156 	bcc.w	800af90 <_ZN10SmartDryer12startProgramEh+0xb68>
					ActualTime.month >= dryerPrograms[WichProgram].startTime.month &&
 800ace4:	f107 030c 	add.w	r3, r7, #12
 800ace8:	7919      	ldrb	r1, [r3, #4]
 800acea:	1cfb      	adds	r3, r7, #3
 800acec:	781a      	ldrb	r2, [r3, #0]
 800acee:	1d3b      	adds	r3, r7, #4
 800acf0:	6818      	ldr	r0, [r3, #0]
 800acf2:	4613      	mov	r3, r2
 800acf4:	005b      	lsls	r3, r3, #1
 800acf6:	4413      	add	r3, r2
 800acf8:	00db      	lsls	r3, r3, #3
 800acfa:	4403      	add	r3, r0
 800acfc:	3352      	adds	r3, #82	; 0x52
 800acfe:	781b      	ldrb	r3, [r3, #0]
					ActualTime.day >= dryerPrograms[WichProgram].startTime.day &&
 800ad00:	4299      	cmp	r1, r3
 800ad02:	f0c0 8145 	bcc.w	800af90 <_ZN10SmartDryer12startProgramEh+0xb68>
					ActualTime.year >= dryerPrograms[WichProgram].startTime.year &&
 800ad06:	f107 030c 	add.w	r3, r7, #12
 800ad0a:	88d9      	ldrh	r1, [r3, #6]
 800ad0c:	1cfb      	adds	r3, r7, #3
 800ad0e:	781a      	ldrb	r2, [r3, #0]
 800ad10:	1d3b      	adds	r3, r7, #4
 800ad12:	6818      	ldr	r0, [r3, #0]
 800ad14:	4613      	mov	r3, r2
 800ad16:	005b      	lsls	r3, r3, #1
 800ad18:	4413      	add	r3, r2
 800ad1a:	00db      	lsls	r3, r3, #3
 800ad1c:	4403      	add	r3, r0
 800ad1e:	3354      	adds	r3, #84	; 0x54
 800ad20:	881b      	ldrh	r3, [r3, #0]
					ActualTime.month >= dryerPrograms[WichProgram].startTime.month &&
 800ad22:	4299      	cmp	r1, r3
 800ad24:	f0c0 8134 	bcc.w	800af90 <_ZN10SmartDryer12startProgramEh+0xb68>
					ActualTime.day <= dryerPrograms[WichProgram].endTime.day &&
 800ad28:	f107 030c 	add.w	r3, r7, #12
 800ad2c:	78d9      	ldrb	r1, [r3, #3]
 800ad2e:	1cfb      	adds	r3, r7, #3
 800ad30:	781a      	ldrb	r2, [r3, #0]
 800ad32:	1d3b      	adds	r3, r7, #4
 800ad34:	6818      	ldr	r0, [r3, #0]
 800ad36:	4613      	mov	r3, r2
 800ad38:	005b      	lsls	r3, r3, #1
 800ad3a:	4413      	add	r3, r2
 800ad3c:	00db      	lsls	r3, r3, #3
 800ad3e:	4403      	add	r3, r0
 800ad40:	3359      	adds	r3, #89	; 0x59
 800ad42:	781b      	ldrb	r3, [r3, #0]
					ActualTime.year >= dryerPrograms[WichProgram].startTime.year &&
 800ad44:	4299      	cmp	r1, r3
 800ad46:	f200 8123 	bhi.w	800af90 <_ZN10SmartDryer12startProgramEh+0xb68>
					ActualTime.hour <= dryerPrograms[WichProgram].endTime.hour &&
 800ad4a:	f107 030c 	add.w	r3, r7, #12
 800ad4e:	7899      	ldrb	r1, [r3, #2]
 800ad50:	1cfb      	adds	r3, r7, #3
 800ad52:	781a      	ldrb	r2, [r3, #0]
 800ad54:	1d3b      	adds	r3, r7, #4
 800ad56:	6818      	ldr	r0, [r3, #0]
 800ad58:	4613      	mov	r3, r2
 800ad5a:	005b      	lsls	r3, r3, #1
 800ad5c:	4413      	add	r3, r2
 800ad5e:	00db      	lsls	r3, r3, #3
 800ad60:	4403      	add	r3, r0
 800ad62:	3358      	adds	r3, #88	; 0x58
 800ad64:	781b      	ldrb	r3, [r3, #0]
					ActualTime.day <= dryerPrograms[WichProgram].endTime.day &&
 800ad66:	4299      	cmp	r1, r3
 800ad68:	f200 8112 	bhi.w	800af90 <_ZN10SmartDryer12startProgramEh+0xb68>
					ActualTime.minute <= dryerPrograms[WichProgram].endTime.minute &&
 800ad6c:	f107 030c 	add.w	r3, r7, #12
 800ad70:	7859      	ldrb	r1, [r3, #1]
 800ad72:	1cfb      	adds	r3, r7, #3
 800ad74:	781a      	ldrb	r2, [r3, #0]
 800ad76:	1d3b      	adds	r3, r7, #4
 800ad78:	6818      	ldr	r0, [r3, #0]
 800ad7a:	4613      	mov	r3, r2
 800ad7c:	005b      	lsls	r3, r3, #1
 800ad7e:	4413      	add	r3, r2
 800ad80:	00db      	lsls	r3, r3, #3
 800ad82:	4403      	add	r3, r0
 800ad84:	3357      	adds	r3, #87	; 0x57
 800ad86:	781b      	ldrb	r3, [r3, #0]
					ActualTime.hour <= dryerPrograms[WichProgram].endTime.hour &&
 800ad88:	4299      	cmp	r1, r3
 800ad8a:	f200 8101 	bhi.w	800af90 <_ZN10SmartDryer12startProgramEh+0xb68>
					ActualTime.month <= dryerPrograms[WichProgram].endTime.month &&
 800ad8e:	f107 030c 	add.w	r3, r7, #12
 800ad92:	7919      	ldrb	r1, [r3, #4]
 800ad94:	1cfb      	adds	r3, r7, #3
 800ad96:	781a      	ldrb	r2, [r3, #0]
 800ad98:	1d3b      	adds	r3, r7, #4
 800ad9a:	6818      	ldr	r0, [r3, #0]
 800ad9c:	4613      	mov	r3, r2
 800ad9e:	005b      	lsls	r3, r3, #1
 800ada0:	4413      	add	r3, r2
 800ada2:	00db      	lsls	r3, r3, #3
 800ada4:	4403      	add	r3, r0
 800ada6:	335a      	adds	r3, #90	; 0x5a
 800ada8:	781b      	ldrb	r3, [r3, #0]
					ActualTime.minute <= dryerPrograms[WichProgram].endTime.minute &&
 800adaa:	4299      	cmp	r1, r3
 800adac:	f200 80f0 	bhi.w	800af90 <_ZN10SmartDryer12startProgramEh+0xb68>
					ActualTime.year <= dryerPrograms[WichProgram].endTime.year)
 800adb0:	f107 030c 	add.w	r3, r7, #12
 800adb4:	88d9      	ldrh	r1, [r3, #6]
 800adb6:	1cfb      	adds	r3, r7, #3
 800adb8:	781a      	ldrb	r2, [r3, #0]
 800adba:	1d3b      	adds	r3, r7, #4
 800adbc:	6818      	ldr	r0, [r3, #0]
 800adbe:	4613      	mov	r3, r2
 800adc0:	005b      	lsls	r3, r3, #1
 800adc2:	4413      	add	r3, r2
 800adc4:	00db      	lsls	r3, r3, #3
 800adc6:	4403      	add	r3, r0
 800adc8:	335c      	adds	r3, #92	; 0x5c
 800adca:	881b      	ldrh	r3, [r3, #0]
					ActualTime.month <= dryerPrograms[WichProgram].endTime.month &&
 800adcc:	4299      	cmp	r1, r3
 800adce:	f200 80df 	bhi.w	800af90 <_ZN10SmartDryer12startProgramEh+0xb68>
			{
				statusParam->programStarted = true;
 800add2:	1d3b      	adds	r3, r7, #4
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800add8:	2201      	movs	r2, #1
 800adda:	721a      	strb	r2, [r3, #8]
				statusParam->dryerOn = true;
 800addc:	1d3b      	adds	r3, r7, #4
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ade2:	2201      	movs	r2, #1
 800ade4:	701a      	strb	r2, [r3, #0]
				ledStatus = PROGRAM_INIT;
 800ade6:	1d3b      	adds	r3, r7, #4
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f240 12f5 	movw	r2, #501	; 0x1f5
 800adee:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
				display->drawFullScreenPopUp("Programma iniziato", 2000);
 800adf2:	1d3b      	adds	r3, r7, #4
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	681c      	ldr	r4, [r3, #0]
 800adf8:	f507 7352 	add.w	r3, r7, #840	; 0x348
 800adfc:	4618      	mov	r0, r3
 800adfe:	f006 fb2d 	bl	801145c <_ZNSaIcEC1Ev>
 800ae02:	f507 7252 	add.w	r2, r7, #840	; 0x348
 800ae06:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800ae0a:	490d      	ldr	r1, [pc, #52]	; (800ae40 <_ZN10SmartDryer12startProgramEh+0xa18>)
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f006 fded 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800ae12:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800ae16:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	f7fa f92b 	bl	8005078 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 800ae22:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800ae26:	4618      	mov	r0, r3
 800ae28:	f006 fc49 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ae2c:	f507 7352 	add.w	r3, r7, #840	; 0x348
 800ae30:	4618      	mov	r0, r3
 800ae32:	f006 fb14 	bl	801145e <_ZNSaIcED1Ev>
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour &&
 800ae36:	e0ab      	b.n	800af90 <_ZN10SmartDryer12startProgramEh+0xb68>
 800ae38:	080159f0 	.word	0x080159f0
 800ae3c:	08012bc8 	.word	0x08012bc8
 800ae40:	08012bdc 	.word	0x08012bdc
//				ExitStartProgram = true;
//			}
		}
		else
		{
			if(!ProgramEnd)
 800ae44:	f897 3366 	ldrb.w	r3, [r7, #870]	; 0x366
 800ae48:	f083 0301 	eor.w	r3, r3, #1
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	f000 809f 	beq.w	800af92 <_ZN10SmartDryer12startProgramEh+0xb6a>
			{
				if(ActualTime.hour == dryerPrograms[WichProgram].endTime.hour &&
 800ae54:	f107 030c 	add.w	r3, r7, #12
 800ae58:	7899      	ldrb	r1, [r3, #2]
 800ae5a:	1cfb      	adds	r3, r7, #3
 800ae5c:	781a      	ldrb	r2, [r3, #0]
 800ae5e:	1d3b      	adds	r3, r7, #4
 800ae60:	6818      	ldr	r0, [r3, #0]
 800ae62:	4613      	mov	r3, r2
 800ae64:	005b      	lsls	r3, r3, #1
 800ae66:	4413      	add	r3, r2
 800ae68:	00db      	lsls	r3, r3, #3
 800ae6a:	4403      	add	r3, r0
 800ae6c:	3358      	adds	r3, #88	; 0x58
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	4299      	cmp	r1, r3
 800ae72:	f040 808e 	bne.w	800af92 <_ZN10SmartDryer12startProgramEh+0xb6a>
						ActualTime.minute == dryerPrograms[WichProgram].endTime.minute &&
 800ae76:	f107 030c 	add.w	r3, r7, #12
 800ae7a:	7859      	ldrb	r1, [r3, #1]
 800ae7c:	1cfb      	adds	r3, r7, #3
 800ae7e:	781a      	ldrb	r2, [r3, #0]
 800ae80:	1d3b      	adds	r3, r7, #4
 800ae82:	6818      	ldr	r0, [r3, #0]
 800ae84:	4613      	mov	r3, r2
 800ae86:	005b      	lsls	r3, r3, #1
 800ae88:	4413      	add	r3, r2
 800ae8a:	00db      	lsls	r3, r3, #3
 800ae8c:	4403      	add	r3, r0
 800ae8e:	3357      	adds	r3, #87	; 0x57
 800ae90:	781b      	ldrb	r3, [r3, #0]
				if(ActualTime.hour == dryerPrograms[WichProgram].endTime.hour &&
 800ae92:	4299      	cmp	r1, r3
 800ae94:	d17d      	bne.n	800af92 <_ZN10SmartDryer12startProgramEh+0xb6a>
						ActualTime.day == dryerPrograms[WichProgram].endTime.day &&
 800ae96:	f107 030c 	add.w	r3, r7, #12
 800ae9a:	78d9      	ldrb	r1, [r3, #3]
 800ae9c:	1cfb      	adds	r3, r7, #3
 800ae9e:	781a      	ldrb	r2, [r3, #0]
 800aea0:	1d3b      	adds	r3, r7, #4
 800aea2:	6818      	ldr	r0, [r3, #0]
 800aea4:	4613      	mov	r3, r2
 800aea6:	005b      	lsls	r3, r3, #1
 800aea8:	4413      	add	r3, r2
 800aeaa:	00db      	lsls	r3, r3, #3
 800aeac:	4403      	add	r3, r0
 800aeae:	3359      	adds	r3, #89	; 0x59
 800aeb0:	781b      	ldrb	r3, [r3, #0]
						ActualTime.minute == dryerPrograms[WichProgram].endTime.minute &&
 800aeb2:	4299      	cmp	r1, r3
 800aeb4:	d16d      	bne.n	800af92 <_ZN10SmartDryer12startProgramEh+0xb6a>
						ActualTime.month == dryerPrograms[WichProgram].endTime.month &&
 800aeb6:	f107 030c 	add.w	r3, r7, #12
 800aeba:	7919      	ldrb	r1, [r3, #4]
 800aebc:	1cfb      	adds	r3, r7, #3
 800aebe:	781a      	ldrb	r2, [r3, #0]
 800aec0:	1d3b      	adds	r3, r7, #4
 800aec2:	6818      	ldr	r0, [r3, #0]
 800aec4:	4613      	mov	r3, r2
 800aec6:	005b      	lsls	r3, r3, #1
 800aec8:	4413      	add	r3, r2
 800aeca:	00db      	lsls	r3, r3, #3
 800aecc:	4403      	add	r3, r0
 800aece:	335a      	adds	r3, #90	; 0x5a
 800aed0:	781b      	ldrb	r3, [r3, #0]
						ActualTime.day == dryerPrograms[WichProgram].endTime.day &&
 800aed2:	4299      	cmp	r1, r3
 800aed4:	d15d      	bne.n	800af92 <_ZN10SmartDryer12startProgramEh+0xb6a>
						ActualTime.year == dryerPrograms[WichProgram].endTime.year)
 800aed6:	f107 030c 	add.w	r3, r7, #12
 800aeda:	88d9      	ldrh	r1, [r3, #6]
 800aedc:	1cfb      	adds	r3, r7, #3
 800aede:	781a      	ldrb	r2, [r3, #0]
 800aee0:	1d3b      	adds	r3, r7, #4
 800aee2:	6818      	ldr	r0, [r3, #0]
 800aee4:	4613      	mov	r3, r2
 800aee6:	005b      	lsls	r3, r3, #1
 800aee8:	4413      	add	r3, r2
 800aeea:	00db      	lsls	r3, r3, #3
 800aeec:	4403      	add	r3, r0
 800aeee:	335c      	adds	r3, #92	; 0x5c
 800aef0:	881b      	ldrh	r3, [r3, #0]
						ActualTime.month == dryerPrograms[WichProgram].endTime.month &&
 800aef2:	4299      	cmp	r1, r3
 800aef4:	d14d      	bne.n	800af92 <_ZN10SmartDryer12startProgramEh+0xb6a>
				{
					statusParam->programStarted = false;
 800aef6:	1d3b      	adds	r3, r7, #4
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aefc:	2200      	movs	r2, #0
 800aefe:	721a      	strb	r2, [r3, #8]
					statusParam->dryerOn = false;
 800af00:	1d3b      	adds	r3, r7, #4
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af06:	2200      	movs	r2, #0
 800af08:	701a      	strb	r2, [r3, #0]
					ledStatus = PROGRAM_END;
 800af0a:	1d3b      	adds	r3, r7, #4
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 800af12:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
					ProgramEnd = true;
 800af16:	2301      	movs	r3, #1
 800af18:	f887 3366 	strb.w	r3, [r7, #870]	; 0x366
					display->drawFullScreenPopUp("Programma terminato", 2000);
 800af1c:	1d3b      	adds	r3, r7, #4
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	681c      	ldr	r4, [r3, #0]
 800af22:	f507 7359 	add.w	r3, r7, #868	; 0x364
 800af26:	4618      	mov	r0, r3
 800af28:	f006 fa98 	bl	801145c <_ZNSaIcEC1Ev>
 800af2c:	f507 7259 	add.w	r2, r7, #868	; 0x364
 800af30:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 800af34:	4940      	ldr	r1, [pc, #256]	; (800b038 <_ZN10SmartDryer12startProgramEh+0xc10>)
 800af36:	4618      	mov	r0, r3
 800af38:	f006 fd58 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800af3c:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 800af40:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800af44:	4619      	mov	r1, r3
 800af46:	4620      	mov	r0, r4
 800af48:	f7fa f896 	bl	8005078 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 800af4c:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 800af50:	4618      	mov	r0, r3
 800af52:	f006 fbb4 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800af56:	f507 7359 	add.w	r3, r7, #868	; 0x364
 800af5a:	4618      	mov	r0, r3
 800af5c:	f006 fa7f 	bl	801145e <_ZNSaIcED1Ev>
					if(eepromEnabled)
 800af60:	1d3b      	adds	r3, r7, #4
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d00d      	beq.n	800af88 <_ZN10SmartDryer12startProgramEh+0xb60>
					{
						writeDefaultsDryerProgram(WichProgram);
 800af6c:	1cfb      	adds	r3, r7, #3
 800af6e:	781a      	ldrb	r2, [r3, #0]
 800af70:	1d3b      	adds	r3, r7, #4
 800af72:	4611      	mov	r1, r2
 800af74:	6818      	ldr	r0, [r3, #0]
 800af76:	f7fb fe63 	bl	8006c40 <_ZN10SmartDryer25writeDefaultsDryerProgramEh>
						saveDryerProgram(WichProgram);
 800af7a:	1cfb      	adds	r3, r7, #3
 800af7c:	781a      	ldrb	r2, [r3, #0]
 800af7e:	1d3b      	adds	r3, r7, #4
 800af80:	4611      	mov	r1, r2
 800af82:	6818      	ldr	r0, [r3, #0]
 800af84:	f7fb fef8 	bl	8006d78 <_ZN10SmartDryer16saveDryerProgramEh>
					}
					ExitStartProgram = true;
 800af88:	2301      	movs	r3, #1
 800af8a:	f887 3367 	strb.w	r3, [r7, #871]	; 0x367
 800af8e:	e000      	b.n	800af92 <_ZN10SmartDryer12startProgramEh+0xb6a>
			if(ActualTime.hour >= dryerPrograms[WichProgram].startTime.hour &&
 800af90:	bf00      	nop
				}
			}
		}
		if(WichKey != DryerKey::NO_KEY)
 800af92:	f897 3365 	ldrb.w	r3, [r7, #869]	; 0x365
 800af96:	2b08      	cmp	r3, #8
 800af98:	d005      	beq.n	800afa6 <_ZN10SmartDryer12startProgramEh+0xb7e>
		{
			lcdLedAutoOffTimer->restart();
 800af9a:	1d3b      	adds	r3, r7, #4
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afa0:	4618      	mov	r0, r3
 800afa2:	f7f8 faa8 	bl	80034f6 <_ZN11ChronoTimer7restartEv>
		}
		peripheralsControl();
 800afa6:	1d3b      	adds	r3, r7, #4
 800afa8:	6818      	ldr	r0, [r3, #0]
 800afaa:	f7fb fdd9 	bl	8006b60 <_ZN10SmartDryer18peripheralsControlEv>
		statusParam->serialDeviceAttached = externalCommand->isDeviceConnected();
 800afae:	1d3b      	adds	r3, r7, #4
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800afb4:	1d3b      	adds	r3, r7, #4
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800afba:	4610      	mov	r0, r2
 800afbc:	f7fa fe80 	bl	8005cc0 <_ZN13SerialMessage17isDeviceConnectedEv>
 800afc0:	4603      	mov	r3, r0
 800afc2:	7263      	strb	r3, [r4, #9]
		if(statusParam->serialDeviceAttached)
 800afc4:	1d3b      	adds	r3, r7, #4
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afca:	7a5b      	ldrb	r3, [r3, #9]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	f43f ac3c 	beq.w	800a84a <_ZN10SmartDryer12startProgramEh+0x422>
		{
			serialComunicationCtrl();
 800afd2:	1d3b      	adds	r3, r7, #4
 800afd4:	6818      	ldr	r0, [r3, #0]
 800afd6:	f7fc fac7 	bl	8007568 <_ZN10SmartDryer22serialComunicationCtrlEv>
	while(!ExitStartProgram)
 800afda:	e436      	b.n	800a84a <_ZN10SmartDryer12startProgramEh+0x422>
	String TempRead = "0C", TempSet = "0";
 800afdc:	f107 0314 	add.w	r3, r7, #20
 800afe0:	4618      	mov	r0, r3
 800afe2:	f006 fb6c 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800afe6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800afea:	4618      	mov	r0, r3
 800afec:	f006 fb67 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String StartHour = "", StartMinute = "", EndHour = "", EndMinute = "";
 800aff0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800aff4:	4618      	mov	r0, r3
 800aff6:	f006 fb62 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800affa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800affe:	4618      	mov	r0, r3
 800b000:	f006 fb5d 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b004:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800b008:	4618      	mov	r0, r3
 800b00a:	f006 fb58 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b00e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800b012:	4618      	mov	r0, r3
 800b014:	f006 fb53 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	String Time = "", Date = "";
 800b018:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800b01c:	4618      	mov	r0, r3
 800b01e:	f006 fb4e 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b022:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800b026:	4618      	mov	r0, r3
 800b028:	f006 fb49 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
}
 800b02c:	bf00      	nop
 800b02e:	f507 775b 	add.w	r7, r7, #876	; 0x36c
 800b032:	46bd      	mov	sp, r7
 800b034:	bd90      	pop	{r4, r7, pc}
 800b036:	bf00      	nop
 800b038:	08012bc8 	.word	0x08012bc8

0800b03c <_ZN10SmartDryer3runEv>:

void SmartDryer::run()
{
 800b03c:	b590      	push	{r4, r7, lr}
 800b03e:	b08b      	sub	sp, #44	; 0x2c
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
	display->drawFullScreenPopUp("Smart Dryer", 1000);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681c      	ldr	r4, [r3, #0]
 800b048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b04c:	4618      	mov	r0, r3
 800b04e:	f006 fa05 	bl	801145c <_ZNSaIcEC1Ev>
 800b052:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b056:	f107 030c 	add.w	r3, r7, #12
 800b05a:	4936      	ldr	r1, [pc, #216]	; (800b134 <_ZN10SmartDryer3runEv+0xf8>)
 800b05c:	4618      	mov	r0, r3
 800b05e:	f006 fcc5 	bl	80119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b062:	f107 030c 	add.w	r3, r7, #12
 800b066:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b06a:	4619      	mov	r1, r3
 800b06c:	4620      	mov	r0, r4
 800b06e:	f7fa f803 	bl	8005078 <_ZN13NHDST7565_LCD19drawFullScreenPopUpENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEt>
 800b072:	f107 030c 	add.w	r3, r7, #12
 800b076:	4618      	mov	r0, r3
 800b078:	f006 fb21 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b07c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b080:	4618      	mov	r0, r3
 800b082:	f006 f9ec 	bl	801145e <_ZNSaIcED1Ev>
	while(1)
	{
		switch(screen)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 800b08c:	2b09      	cmp	r3, #9
 800b08e:	d84f      	bhi.n	800b130 <_ZN10SmartDryer3runEv+0xf4>
 800b090:	a201      	add	r2, pc, #4	; (adr r2, 800b098 <_ZN10SmartDryer3runEv+0x5c>)
 800b092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b096:	bf00      	nop
 800b098:	0800b0c1 	.word	0x0800b0c1
 800b09c:	0800b0c9 	.word	0x0800b0c9
 800b0a0:	0800b0d9 	.word	0x0800b0d9
 800b0a4:	0800b0e9 	.word	0x0800b0e9
 800b0a8:	0800b0f9 	.word	0x0800b0f9
 800b0ac:	0800b0f9 	.word	0x0800b0f9
 800b0b0:	0800b0f9 	.word	0x0800b0f9
 800b0b4:	0800b115 	.word	0x0800b115
 800b0b8:	0800b115 	.word	0x0800b115
 800b0bc:	0800b115 	.word	0x0800b115
		{
			case NAV_MENU:
				navMenu();
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f7fd fcf5 	bl	8008ab0 <_ZN10SmartDryer7navMenuEv>
				break;
 800b0c6:	e034      	b.n	800b132 <_ZN10SmartDryer3runEv+0xf6>
			case CHANGE_TIME:
				changeTime();
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f7fe f831 	bl	8009130 <_ZN10SmartDryer10changeTimeEv>
				screen = NAV_MENU;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
				break;
 800b0d6:	e02c      	b.n	800b132 <_ZN10SmartDryer3runEv+0xf6>
			case CHANGE_DATE:
				changeDate();
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f7fe fa0d 	bl	80094f8 <_ZN10SmartDryer10changeDateEv>
				screen = NAV_MENU;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
				break;
 800b0e6:	e024      	b.n	800b132 <_ZN10SmartDryer3runEv+0xf6>
			case SHOW_INFO:
				showInfo();
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f7fe fc6b 	bl	80099c4 <_ZN10SmartDryer8showInfoEv>
				screen = NAV_MENU;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
				break;
 800b0f6:	e01c      	b.n	800b132 <_ZN10SmartDryer3runEv+0xf6>
			case CHANGE_PROGRAM_1:
			case CHANGE_PROGRAM_2:
			case CHANGE_PROGRAM_3:
				//TODO aggiungere altri possibili programmi in cascata
				changeProgram(screen - CHANGE_PROGRAM_1);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 800b0fe:	3b04      	subs	r3, #4
 800b100:	b2db      	uxtb	r3, r3
 800b102:	4619      	mov	r1, r3
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f7fe fde7 	bl	8009cd8 <_ZN10SmartDryer13changeProgramEh>
				screen = NAV_MENU;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2200      	movs	r2, #0
 800b10e:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
				break;
 800b112:	e00e      	b.n	800b132 <_ZN10SmartDryer3runEv+0xf6>
			case START_PROGRAM_1:
			case START_PROGRAM_2:
			case START_PROGRAM_3:
				//TODO aggiungere altri possibili programmi in cascata
				startProgram(screen - START_PROGRAM_1);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 800b11a:	3b07      	subs	r3, #7
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	4619      	mov	r1, r3
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f7ff f981 	bl	800a428 <_ZN10SmartDryer12startProgramEh>
				screen = NAV_MENU;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2200      	movs	r2, #0
 800b12a:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
				break;
 800b12e:	e000      	b.n	800b132 <_ZN10SmartDryer3runEv+0xf6>
			default:
				break;
 800b130:	bf00      	nop
		switch(screen)
 800b132:	e7a8      	b.n	800b086 <_ZN10SmartDryer3runEv+0x4a>
 800b134:	08012bf0 	.word	0x08012bf0

0800b138 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	4618      	mov	r0, r3
 800b144:	f000 f83a 	bl	800b1bc <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	4618      	mov	r0, r3
 800b14c:	3708      	adds	r7, #8
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}

0800b152 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 800b152:	b580      	push	{r7, lr}
 800b154:	b082      	sub	sp, #8
 800b156:	af00      	add	r7, sp, #0
 800b158:	6078      	str	r0, [r7, #4]
 800b15a:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800b15c:	6838      	ldr	r0, [r7, #0]
 800b15e:	f7f9 f809 	bl	8004174 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800b162:	4603      	mov	r3, r0
 800b164:	4619      	mov	r1, r3
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 f857 	bl	800b21a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_>
 800b16c:	bf00      	nop
 800b16e:	3708      	adds	r7, #8
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800b174:	b480      	push	{r7}
 800b176:	b083      	sub	sp, #12
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	461a      	mov	r2, r3
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	1ad3      	subs	r3, r2, r3
 800b188:	10db      	asrs	r3, r3, #3
 800b18a:	4a04      	ldr	r2, [pc, #16]	; (800b19c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv+0x28>)
 800b18c:	fb02 f303 	mul.w	r3, r2, r3
 800b190:	4618      	mov	r0, r3
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	bc80      	pop	{r7}
 800b198:	4770      	bx	lr
 800b19a:	bf00      	nop
 800b19c:	aaaaaaab 	.word	0xaaaaaaab

0800b1a0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b082      	sub	sp, #8
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 f862 	bl	800b278 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endEPS5_>
 800b1b4:	bf00      	nop
 800b1b6:	3708      	adds	r7, #8
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      _Vector_base()
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b082      	sub	sp, #8
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f000 f86e 	bl	800b2a8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3708      	adds	r7, #8
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}

0800b1d6 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800b1d6:	b480      	push	{r7}
 800b1d8:	b083      	sub	sp, #12
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	370c      	adds	r7, #12
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bc80      	pop	{r7}
 800b1e8:	4770      	bx	lr

0800b1ea <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b084      	sub	sp, #16
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	60f8      	str	r0, [r7, #12]
 800b1f2:	60b9      	str	r1, [r7, #8]
 800b1f4:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800b1f6:	68b9      	ldr	r1, [r7, #8]
 800b1f8:	68f8      	ldr	r0, [r7, #12]
 800b1fa:	f000 f87d 	bl	800b2f8 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
    }
 800b1fe:	bf00      	nop
 800b200:	3710      	adds	r7, #16
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}

0800b206 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b206:	b480      	push	{r7}
 800b208:	b083      	sub	sp, #12
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	4618      	mov	r0, r3
 800b212:	370c      	adds	r7, #12
 800b214:	46bd      	mov	sp, r7
 800b216:	bc80      	pop	{r7}
 800b218:	4770      	bx	lr

0800b21a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 800b21a:	b5b0      	push	{r4, r5, r7, lr}
 800b21c:	b082      	sub	sp, #8
 800b21e:	af00      	add	r7, sp, #0
 800b220:	6078      	str	r0, [r7, #4]
 800b222:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	685a      	ldr	r2, [r3, #4]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	689b      	ldr	r3, [r3, #8]
 800b22c:	429a      	cmp	r2, r3
 800b22e:	d012      	beq.n	800b256 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_+0x3c>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800b230:	687c      	ldr	r4, [r7, #4]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	685d      	ldr	r5, [r3, #4]
 800b236:	6838      	ldr	r0, [r7, #0]
 800b238:	f7ff ffe5 	bl	800b206 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b23c:	4603      	mov	r3, r0
 800b23e:	461a      	mov	r2, r3
 800b240:	4629      	mov	r1, r5
 800b242:	4620      	mov	r0, r4
 800b244:	f000 f865 	bl	800b312 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	685b      	ldr	r3, [r3, #4]
 800b24c:	f103 0218 	add.w	r2, r3, #24
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 800b254:	e00c      	b.n	800b270 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 f86e 	bl	800b338 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 800b25c:	4604      	mov	r4, r0
 800b25e:	6838      	ldr	r0, [r7, #0]
 800b260:	f7ff ffd1 	bl	800b206 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b264:	4603      	mov	r3, r0
 800b266:	461a      	mov	r2, r3
 800b268:	4621      	mov	r1, r4
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 f876 	bl	800b35c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
      }
 800b270:	bf00      	nop
 800b272:	3708      	adds	r7, #8
 800b274:	46bd      	mov	sp, r7
 800b276:	bdb0      	pop	{r4, r5, r7, pc}

0800b278 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endEPS5_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800b278:	b590      	push	{r4, r7, lr}
 800b27a:	b083      	sub	sp, #12
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	685c      	ldr	r4, [r3, #4]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	4618      	mov	r0, r3
 800b28a:	f7ff ffa4 	bl	800b1d6 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800b28e:	4603      	mov	r3, r0
 800b290:	461a      	mov	r2, r3
 800b292:	4621      	mov	r1, r4
 800b294:	6838      	ldr	r0, [r7, #0]
 800b296:	f7ff ffa8 	bl	800b1ea <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	683a      	ldr	r2, [r7, #0]
 800b29e:	605a      	str	r2, [r3, #4]
      }
 800b2a0:	bf00      	nop
 800b2a2:	370c      	adds	r7, #12
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd90      	pop	{r4, r7, pc}

0800b2a8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl()
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f000 f8eb 	bl	800b48c <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	601a      	str	r2, [r3, #0]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	605a      	str	r2, [r3, #4]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	609a      	str	r2, [r3, #8]
	{ }
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3708      	adds	r7, #8
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}

0800b2d2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>:
      _M_deallocate(pointer __p, size_t __n)
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	b084      	sub	sp, #16
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	60f8      	str	r0, [r7, #12]
 800b2da:	60b9      	str	r1, [r7, #8]
 800b2dc:	607a      	str	r2, [r7, #4]
	if (__p)
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d005      	beq.n	800b2f0 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	68b9      	ldr	r1, [r7, #8]
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f000 f8da 	bl	800b4a4 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>
      }
 800b2f0:	bf00      	nop
 800b2f2:	3710      	adds	r7, #16
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b082      	sub	sp, #8
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800b302:	6839      	ldr	r1, [r7, #0]
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f000 f8e6 	bl	800b4d6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
    }
 800b30a:	bf00      	nop
 800b30c:	3708      	adds	r7, #8
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}

0800b312 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800b312:	b580      	push	{r7, lr}
 800b314:	b084      	sub	sp, #16
 800b316:	af00      	add	r7, sp, #0
 800b318:	60f8      	str	r0, [r7, #12]
 800b31a:	60b9      	str	r1, [r7, #8]
 800b31c:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f7ff ff71 	bl	800b206 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b324:	4603      	mov	r3, r0
 800b326:	461a      	mov	r2, r3
 800b328:	68b9      	ldr	r1, [r7, #8]
 800b32a:	68f8      	ldr	r0, [r7, #12]
 800b32c:	f000 f8eb 	bl	800b506 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_>
 800b330:	bf00      	nop
 800b332:	3710      	adds	r7, #16
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800b338:	b580      	push	{r7, lr}
 800b33a:	b084      	sub	sp, #16
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	1d1a      	adds	r2, r3, #4
 800b344:	f107 030c 	add.w	r3, r7, #12
 800b348:	4611      	mov	r1, r2
 800b34a:	4618      	mov	r0, r3
 800b34c:	f000 f8f5 	bl	800b53a <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	4618      	mov	r0, r3
 800b354:	3710      	adds	r7, #16
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
	...

0800b35c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800b35c:	b5b0      	push	{r4, r5, r7, lr}
 800b35e:	b08a      	sub	sp, #40	; 0x28
 800b360:	af00      	add	r7, sp, #0
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 800b368:	4a46      	ldr	r2, [pc, #280]	; (800b484 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x128>)
 800b36a:	2101      	movs	r1, #1
 800b36c:	68f8      	ldr	r0, [r7, #12]
 800b36e:	f000 f8f3 	bl	800b558 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>
 800b372:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 800b374:	68f8      	ldr	r0, [r7, #12]
 800b376:	f000 f937 	bl	800b5e8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 800b37a:	4603      	mov	r3, r0
 800b37c:	617b      	str	r3, [r7, #20]
 800b37e:	f107 0214 	add.w	r2, r7, #20
 800b382:	f107 0308 	add.w	r3, r7, #8
 800b386:	4611      	mov	r1, r2
 800b388:	4618      	mov	r0, r3
 800b38a:	f000 f93d 	bl	800b608 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>
 800b38e:	4603      	mov	r3, r0
 800b390:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b396:	4618      	mov	r0, r3
 800b398:	f000 f952 	bl	800b640 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>
 800b39c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800b39e:	69fb      	ldr	r3, [r7, #28]
 800b3a0:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800b3a2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800b3a4:	6a3a      	ldr	r2, [r7, #32]
 800b3a6:	4613      	mov	r3, r2
 800b3a8:	005b      	lsls	r3, r3, #1
 800b3aa:	4413      	add	r3, r2
 800b3ac:	00db      	lsls	r3, r3, #3
 800b3ae:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 800b3b0:	69fb      	ldr	r3, [r7, #28]
 800b3b2:	189d      	adds	r5, r3, r2
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f7ff ff26 	bl	800b206 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	461a      	mov	r2, r3
 800b3be:	4629      	mov	r1, r5
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	f7ff ffa6 	bl	800b312 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	681c      	ldr	r4, [r3, #0]
 800b3ce:	f107 0308 	add.w	r3, r7, #8
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f000 f948 	bl	800b668 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f7ff fef9 	bl	800b1d6 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800b3e4:	4603      	mov	r3, r0
	  __new_finish
 800b3e6:	69fa      	ldr	r2, [r7, #28]
 800b3e8:	4629      	mov	r1, r5
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	f000 f946 	bl	800b67c <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 800b3f0:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 800b3f2:	69bb      	ldr	r3, [r7, #24]
 800b3f4:	3318      	adds	r3, #24
 800b3f6:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 800b3f8:	f107 0308 	add.w	r3, r7, #8
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f000 f933 	bl	800b668 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800b402:	4603      	mov	r3, r0
 800b404:	681c      	ldr	r4, [r3, #0]
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	4618      	mov	r0, r3
 800b40e:	f7ff fee2 	bl	800b1d6 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800b412:	4603      	mov	r3, r0
	  __new_finish
 800b414:	69ba      	ldr	r2, [r7, #24]
 800b416:	4629      	mov	r1, r5
 800b418:	4620      	mov	r0, r4
 800b41a:	f000 f92f 	bl	800b67c <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 800b41e:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681c      	ldr	r4, [r3, #0]
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7ff fed3 	bl	800b1d6 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800b430:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800b432:	461a      	mov	r2, r3
 800b434:	4629      	mov	r1, r5
 800b436:	4620      	mov	r0, r4
 800b438:	f7ff fed7 	bl	800b1ea <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 800b43c:	68f8      	ldr	r0, [r7, #12]
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 800b446:	461a      	mov	r2, r3
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	1ad3      	subs	r3, r2, r3
 800b44e:	10db      	asrs	r3, r3, #3
 800b450:	4a0d      	ldr	r2, [pc, #52]	; (800b488 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x12c>)
 800b452:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(this->_M_impl._M_start,
 800b456:	461a      	mov	r2, r3
 800b458:	f7ff ff3b 	bl	800b2d2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      this->_M_impl._M_start = __new_start;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	69fa      	ldr	r2, [r7, #28]
 800b460:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	69ba      	ldr	r2, [r7, #24]
 800b466:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800b468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b46a:	4613      	mov	r3, r2
 800b46c:	005b      	lsls	r3, r3, #1
 800b46e:	4413      	add	r3, r2
 800b470:	00db      	lsls	r3, r3, #3
 800b472:	461a      	mov	r2, r3
 800b474:	69fb      	ldr	r3, [r7, #28]
 800b476:	441a      	add	r2, r3
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	609a      	str	r2, [r3, #8]
    }
 800b47c:	bf00      	nop
 800b47e:	3728      	adds	r7, #40	; 0x28
 800b480:	46bd      	mov	sp, r7
 800b482:	bdb0      	pop	{r4, r5, r7, pc}
 800b484:	08012bfc 	.word	0x08012bfc
 800b488:	aaaaaaab 	.word	0xaaaaaaab

0800b48c <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b082      	sub	sp, #8
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 f90a 	bl	800b6ae <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	4618      	mov	r0, r3
 800b49e:	3708      	adds	r7, #8
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	60f8      	str	r0, [r7, #12]
 800b4ac:	60b9      	str	r1, [r7, #8]
 800b4ae:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	68b9      	ldr	r1, [r7, #8]
 800b4b4:	68f8      	ldr	r0, [r7, #12]
 800b4b6:	f000 f904 	bl	800b6c2 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>
 800b4ba:	bf00      	nop
 800b4bc:	3710      	adds	r7, #16
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}

0800b4c2 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800b4c2:	b480      	push	{r7}
 800b4c4:	b083      	sub	sp, #12
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	370c      	adds	r7, #12
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bc80      	pop	{r7}
 800b4d4:	4770      	bx	lr

0800b4d6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	b082      	sub	sp, #8
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
 800b4de:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d00a      	beq.n	800b4fe <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f7ff ffea 	bl	800b4c2 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f000 f8f3 	bl	800b6dc <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	3318      	adds	r3, #24
 800b4fa:	607b      	str	r3, [r7, #4]
 800b4fc:	e7f0      	b.n	800b4e0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0xa>
	}
 800b4fe:	bf00      	nop
 800b500:	3708      	adds	r7, #8
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}

0800b506 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800b506:	b590      	push	{r4, r7, lr}
 800b508:	b085      	sub	sp, #20
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	60f8      	str	r0, [r7, #12]
 800b50e:	60b9      	str	r1, [r7, #8]
 800b510:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f7ff fe77 	bl	800b206 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b518:	4604      	mov	r4, r0
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	4619      	mov	r1, r3
 800b51e:	2018      	movs	r0, #24
 800b520:	f7fa fe37 	bl	8006192 <_ZnwjPv>
 800b524:	4603      	mov	r3, r0
 800b526:	2b00      	cmp	r3, #0
 800b528:	d003      	beq.n	800b532 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_+0x2c>
 800b52a:	4621      	mov	r1, r4
 800b52c:	4618      	mov	r0, r3
 800b52e:	f006 f8ac 	bl	801168a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800b532:	bf00      	nop
 800b534:	3714      	adds	r7, #20
 800b536:	46bd      	mov	sp, r7
 800b538:	bd90      	pop	{r4, r7, pc}

0800b53a <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800b53a:	b480      	push	{r7}
 800b53c:	b083      	sub	sp, #12
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
 800b542:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	601a      	str	r2, [r3, #0]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	4618      	mov	r0, r3
 800b550:	370c      	adds	r7, #12
 800b552:	46bd      	mov	sp, r7
 800b554:	bc80      	pop	{r7}
 800b556:	4770      	bx	lr

0800b558 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800b558:	b590      	push	{r4, r7, lr}
 800b55a:	b087      	sub	sp, #28
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	60f8      	str	r0, [r7, #12]
 800b560:	60b9      	str	r1, [r7, #8]
 800b562:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800b564:	68f8      	ldr	r0, [r7, #12]
 800b566:	f000 f8c4 	bl	800b6f2 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 800b56a:	4604      	mov	r4, r0
 800b56c:	68f8      	ldr	r0, [r7, #12]
 800b56e:	f7ff fe01 	bl	800b174 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800b572:	4603      	mov	r3, r0
 800b574:	1ae2      	subs	r2, r4, r3
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	429a      	cmp	r2, r3
 800b57a:	bf34      	ite	cc
 800b57c:	2301      	movcc	r3, #1
 800b57e:	2300      	movcs	r3, #0
 800b580:	b2db      	uxtb	r3, r3
 800b582:	2b00      	cmp	r3, #0
 800b584:	d003      	beq.n	800b58e <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	4618      	mov	r0, r3
 800b58a:	f005 ff72 	bl	8011472 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 800b58e:	68f8      	ldr	r0, [r7, #12]
 800b590:	f7ff fdf0 	bl	800b174 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800b594:	4604      	mov	r4, r0
 800b596:	68f8      	ldr	r0, [r7, #12]
 800b598:	f7ff fdec 	bl	800b174 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800b59c:	4603      	mov	r3, r0
 800b59e:	613b      	str	r3, [r7, #16]
 800b5a0:	f107 0208 	add.w	r2, r7, #8
 800b5a4:	f107 0310 	add.w	r3, r7, #16
 800b5a8:	4611      	mov	r1, r2
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f000 f8b2 	bl	800b714 <_ZSt3maxIjERKT_S2_S2_>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	4423      	add	r3, r4
 800b5b6:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	f7ff fddb 	bl	800b174 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800b5be:	4602      	mov	r2, r0
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d306      	bcc.n	800b5d4 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x7c>
 800b5c6:	68f8      	ldr	r0, [r7, #12]
 800b5c8:	f000 f893 	bl	800b6f2 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d904      	bls.n	800b5de <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x86>
 800b5d4:	68f8      	ldr	r0, [r7, #12]
 800b5d6:	f000 f88c 	bl	800b6f2 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	e000      	b.n	800b5e0 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x88>
 800b5de:	697b      	ldr	r3, [r7, #20]
      }
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	371c      	adds	r7, #28
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd90      	pop	{r4, r7, pc}

0800b5e8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b084      	sub	sp, #16
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800b5f0:	687a      	ldr	r2, [r7, #4]
 800b5f2:	f107 030c 	add.w	r3, r7, #12
 800b5f6:	4611      	mov	r1, r2
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f7ff ff9e 	bl	800b53a <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	4618      	mov	r0, r3
 800b602:	3710      	adds	r7, #16
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800b608:	b590      	push	{r4, r7, lr}
 800b60a:	b083      	sub	sp, #12
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
 800b610:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f000 f828 	bl	800b668 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800b618:	4603      	mov	r3, r0
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	461c      	mov	r4, r3
 800b61e:	6838      	ldr	r0, [r7, #0]
 800b620:	f000 f822 	bl	800b668 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800b624:	4603      	mov	r3, r0
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	1ae3      	subs	r3, r4, r3
 800b62a:	10db      	asrs	r3, r3, #3
 800b62c:	4a03      	ldr	r2, [pc, #12]	; (800b63c <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_+0x34>)
 800b62e:	fb02 f303 	mul.w	r3, r2, r3
 800b632:	4618      	mov	r0, r3
 800b634:	370c      	adds	r7, #12
 800b636:	46bd      	mov	sp, r7
 800b638:	bd90      	pop	{r4, r7, pc}
 800b63a:	bf00      	nop
 800b63c:	aaaaaaab 	.word	0xaaaaaaab

0800b640 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800b640:	b580      	push	{r7, lr}
 800b642:	b082      	sub	sp, #8
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d006      	beq.n	800b65e <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x1e>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6839      	ldr	r1, [r7, #0]
 800b654:	4618      	mov	r0, r3
 800b656:	f000 f870 	bl	800b73a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>
 800b65a:	4603      	mov	r3, r0
 800b65c:	e000      	b.n	800b660 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x20>
 800b65e:	2300      	movs	r3, #0
      }
 800b660:	4618      	mov	r0, r3
 800b662:	3708      	adds	r7, #8
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800b668:	b480      	push	{r7}
 800b66a:	b083      	sub	sp, #12
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	4618      	mov	r0, r3
 800b674:	370c      	adds	r7, #12
 800b676:	46bd      	mov	sp, r7
 800b678:	bc80      	pop	{r7}
 800b67a:	4770      	bx	lr

0800b67c <_ZSt34__uninitialized_move_if_noexcept_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800b67c:	b590      	push	{r4, r7, lr}
 800b67e:	b085      	sub	sp, #20
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	607a      	str	r2, [r7, #4]
 800b688:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800b68a:	68f8      	ldr	r0, [r7, #12]
 800b68c:	f000 f864 	bl	800b758 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 800b690:	4604      	mov	r4, r0
 800b692:	68b8      	ldr	r0, [r7, #8]
 800b694:	f000 f860 	bl	800b758 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>
 800b698:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	687a      	ldr	r2, [r7, #4]
 800b69e:	4620      	mov	r0, r4
 800b6a0:	f000 f869 	bl	800b776 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>
 800b6a4:	4603      	mov	r3, r0
    }
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3714      	adds	r7, #20
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd90      	pop	{r4, r7, pc}

0800b6ae <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800b6ae:	b480      	push	{r7}
 800b6b0:	b083      	sub	sp, #12
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	6078      	str	r0, [r7, #4]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	370c      	adds	r7, #12
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bc80      	pop	{r7}
 800b6c0:	4770      	bx	lr

0800b6c2 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>:
      deallocate(pointer __p, size_type)
 800b6c2:	b580      	push	{r7, lr}
 800b6c4:	b084      	sub	sp, #16
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	60f8      	str	r0, [r7, #12]
 800b6ca:	60b9      	str	r1, [r7, #8]
 800b6cc:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800b6ce:	68b8      	ldr	r0, [r7, #8]
 800b6d0:	f005 fec2 	bl	8011458 <_ZdlPv>
      }
 800b6d4:	bf00      	nop
 800b6d6:	3710      	adds	r7, #16
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}

0800b6dc <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b082      	sub	sp, #8
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f005 ffea 	bl	80116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b6ea:	bf00      	nop
 800b6ec:	3708      	adds	r7, #8
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}

0800b6f2 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800b6f2:	b580      	push	{r7, lr}
 800b6f4:	b082      	sub	sp, #8
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f000 f857 	bl	800b7b0 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800b702:	4603      	mov	r3, r0
 800b704:	4618      	mov	r0, r3
 800b706:	f000 f847 	bl	800b798 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>
 800b70a:	4603      	mov	r3, r0
 800b70c:	4618      	mov	r0, r3
 800b70e:	3708      	adds	r7, #8
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800b714:	b480      	push	{r7}
 800b716:	b083      	sub	sp, #12
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681a      	ldr	r2, [r3, #0]
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	429a      	cmp	r2, r3
 800b728:	d201      	bcs.n	800b72e <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	e000      	b.n	800b730 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800b72e:	687b      	ldr	r3, [r7, #4]
    }
 800b730:	4618      	mov	r0, r3
 800b732:	370c      	adds	r7, #12
 800b734:	46bd      	mov	sp, r7
 800b736:	bc80      	pop	{r7}
 800b738:	4770      	bx	lr

0800b73a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800b73a:	b580      	push	{r7, lr}
 800b73c:	b082      	sub	sp, #8
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
 800b742:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800b744:	2200      	movs	r2, #0
 800b746:	6839      	ldr	r1, [r7, #0]
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f000 f83b 	bl	800b7c4 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 800b74e:	4603      	mov	r3, r0
 800b750:	4618      	mov	r0, r3
 800b752:	3708      	adds	r7, #8
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}

0800b758 <_ZSt32__make_move_if_noexcept_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt13move_iteratorIPS5_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800b758:	b580      	push	{r7, lr}
 800b75a:	b084      	sub	sp, #16
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800b760:	f107 030c 	add.w	r3, r7, #12
 800b764:	6879      	ldr	r1, [r7, #4]
 800b766:	4618      	mov	r0, r3
 800b768:	f000 f84d 	bl	800b806 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	4618      	mov	r0, r3
 800b770:	3710      	adds	r7, #16
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}

0800b776 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_S6_ET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800b776:	b580      	push	{r7, lr}
 800b778:	b084      	sub	sp, #16
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	60f8      	str	r0, [r7, #12]
 800b77e:	60b9      	str	r1, [r7, #8]
 800b780:	607a      	str	r2, [r7, #4]
 800b782:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	68b9      	ldr	r1, [r7, #8]
 800b788:	68f8      	ldr	r0, [r7, #12]
 800b78a:	f000 f84a 	bl	800b822 <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>
 800b78e:	4603      	mov	r3, r0
 800b790:	4618      	mov	r0, r3
 800b792:	3710      	adds	r7, #16
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 800b798:	b580      	push	{r7, lr}
 800b79a:	b082      	sub	sp, #8
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f000 f851 	bl	800b848 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3708      	adds	r7, #8
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800b7b0:	b480      	push	{r7}
 800b7b2:	b083      	sub	sp, #12
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	370c      	adds	r7, #12
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bc80      	pop	{r7}
 800b7c2:	4770      	bx	lr

0800b7c4 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b084      	sub	sp, #16
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	60b9      	str	r1, [r7, #8]
 800b7ce:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800b7d0:	68f8      	ldr	r0, [r7, #12]
 800b7d2:	f000 f839 	bl	800b848 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	bf8c      	ite	hi
 800b7de:	2301      	movhi	r3, #1
 800b7e0:	2300      	movls	r3, #0
 800b7e2:	b2db      	uxtb	r3, r3
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d001      	beq.n	800b7ec <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800b7e8:	f005 fe3a 	bl	8011460 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800b7ec:	68ba      	ldr	r2, [r7, #8]
 800b7ee:	4613      	mov	r3, r2
 800b7f0:	005b      	lsls	r3, r3, #1
 800b7f2:	4413      	add	r3, r2
 800b7f4:	00db      	lsls	r3, r3, #3
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f005 fe14 	bl	8011424 <_Znwj>
 800b7fc:	4603      	mov	r3, r0
      }
 800b7fe:	4618      	mov	r0, r3
 800b800:	3710      	adds	r7, #16
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}

0800b806 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ES6_>:
      move_iterator(iterator_type __i)
 800b806:	b480      	push	{r7}
 800b808:	b083      	sub	sp, #12
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
 800b80e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	683a      	ldr	r2, [r7, #0]
 800b814:	601a      	str	r2, [r3, #0]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	4618      	mov	r0, r3
 800b81a:	370c      	adds	r7, #12
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bc80      	pop	{r7}
 800b820:	4770      	bx	lr

0800b822 <_ZSt18uninitialized_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES7_ET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800b822:	b580      	push	{r7, lr}
 800b824:	b086      	sub	sp, #24
 800b826:	af00      	add	r7, sp, #0
 800b828:	60f8      	str	r0, [r7, #12]
 800b82a:	60b9      	str	r1, [r7, #8]
 800b82c:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800b82e:	2301      	movs	r3, #1
 800b830:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800b832:	687a      	ldr	r2, [r7, #4]
 800b834:	68b9      	ldr	r1, [r7, #8]
 800b836:	68f8      	ldr	r0, [r7, #12]
 800b838:	f000 f812 	bl	800b860 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>
 800b83c:	4603      	mov	r3, r0
    }
 800b83e:	4618      	mov	r0, r3
 800b840:	3718      	adds	r7, #24
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
	...

0800b848 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800b848:	b480      	push	{r7}
 800b84a:	b083      	sub	sp, #12
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800b850:	4b02      	ldr	r3, [pc, #8]	; (800b85c <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv+0x14>)
 800b852:	4618      	mov	r0, r3
 800b854:	370c      	adds	r7, #12
 800b856:	46bd      	mov	sp, r7
 800b858:	bc80      	pop	{r7}
 800b85a:	4770      	bx	lr
 800b85c:	0aaaaaaa 	.word	0x0aaaaaaa

0800b860 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800b860:	b590      	push	{r4, r7, lr}
 800b862:	b087      	sub	sp, #28
 800b864:	af00      	add	r7, sp, #0
 800b866:	60f8      	str	r0, [r7, #12]
 800b868:	60b9      	str	r1, [r7, #8]
 800b86a:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800b870:	f107 0208 	add.w	r2, r7, #8
 800b874:	f107 030c 	add.w	r3, r7, #12
 800b878:	4611      	mov	r1, r2
 800b87a:	4618      	mov	r0, r3
 800b87c:	f000 f81f 	bl	800b8be <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 800b880:	4603      	mov	r3, r0
 800b882:	2b00      	cmp	r3, #0
 800b884:	d016      	beq.n	800b8b4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 800b886:	6978      	ldr	r0, [r7, #20]
 800b888:	f7ff fe1b 	bl	800b4c2 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800b88c:	4604      	mov	r4, r0
 800b88e:	f107 030c 	add.w	r3, r7, #12
 800b892:	4618      	mov	r0, r3
 800b894:	f000 f834 	bl	800b900 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 800b898:	4603      	mov	r3, r0
 800b89a:	4619      	mov	r1, r3
 800b89c:	4620      	mov	r0, r4
 800b89e:	f000 f83a 	bl	800b916 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800b8a2:	f107 030c 	add.w	r3, r7, #12
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f000 f81a 	bl	800b8e0 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	3318      	adds	r3, #24
 800b8b0:	617b      	str	r3, [r7, #20]
 800b8b2:	e7dd      	b.n	800b870 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEES9_EET0_T_SC_SB_+0x10>
	      return __cur;
 800b8b4:	697b      	ldr	r3, [r7, #20]
	}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	371c      	adds	r7, #28
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd90      	pop	{r4, r7, pc}

0800b8be <_ZStneIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800b8be:	b580      	push	{r7, lr}
 800b8c0:	b082      	sub	sp, #8
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	6078      	str	r0, [r7, #4]
 800b8c6:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800b8c8:	6839      	ldr	r1, [r7, #0]
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 f83c 	bl	800b948 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	f083 0301 	eor.w	r3, r3, #1
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3708      	adds	r7, #8
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <_ZNSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++()
 800b8e0:	b480      	push	{r7}
 800b8e2:	b083      	sub	sp, #12
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
	++_M_current;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f103 0218 	add.w	r2, r3, #24
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	601a      	str	r2, [r3, #0]
	return *this;
 800b8f4:	687b      	ldr	r3, [r7, #4]
      }
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	370c      	adds	r7, #12
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bc80      	pop	{r7}
 800b8fe:	4770      	bx	lr

0800b900 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const
 800b900:	b480      	push	{r7}
 800b902:	b083      	sub	sp, #12
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	4618      	mov	r0, r3
 800b90e:	370c      	adds	r7, #12
 800b910:	46bd      	mov	sp, r7
 800b912:	bc80      	pop	{r7}
 800b914:	4770      	bx	lr

0800b916 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 800b916:	b590      	push	{r4, r7, lr}
 800b918:	b083      	sub	sp, #12
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
 800b91e:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 800b920:	6838      	ldr	r0, [r7, #0]
 800b922:	f7ff fc70 	bl	800b206 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b926:	4604      	mov	r4, r0
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	4619      	mov	r1, r3
 800b92c:	2018      	movs	r0, #24
 800b92e:	f7fa fc30 	bl	8006192 <_ZnwjPv>
 800b932:	4603      	mov	r3, r0
 800b934:	2b00      	cmp	r3, #0
 800b936:	d003      	beq.n	800b940 <_ZSt10_ConstructINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEvPT_DpOT0_+0x2a>
 800b938:	4621      	mov	r1, r4
 800b93a:	4618      	mov	r0, r3
 800b93c:	f005 fea5 	bl	801168a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800b940:	bf00      	nop
 800b942:	370c      	adds	r7, #12
 800b944:	46bd      	mov	sp, r7
 800b946:	bd90      	pop	{r4, r7, pc}

0800b948 <_ZSteqIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEbRKSt13move_iteratorIT_ESB_>:
    operator==(const move_iterator<_Iterator>& __x,
 800b948:	b590      	push	{r4, r7, lr}
 800b94a:	b083      	sub	sp, #12
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 f80e 	bl	800b974 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800b958:	4604      	mov	r4, r0
 800b95a:	6838      	ldr	r0, [r7, #0]
 800b95c:	f000 f80a 	bl	800b974 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800b960:	4603      	mov	r3, r0
 800b962:	429c      	cmp	r4, r3
 800b964:	bf0c      	ite	eq
 800b966:	2301      	moveq	r3, #1
 800b968:	2300      	movne	r3, #0
 800b96a:	b2db      	uxtb	r3, r3
 800b96c:	4618      	mov	r0, r3
 800b96e:	370c      	adds	r7, #12
 800b970:	46bd      	mov	sp, r7
 800b972:	bd90      	pop	{r4, r7, pc}

0800b974 <_ZNKSt13move_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const
 800b974:	b480      	push	{r7}
 800b976:	b083      	sub	sp, #12
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4618      	mov	r0, r3
 800b982:	370c      	adds	r7, #12
 800b984:	46bd      	mov	sp, r7
 800b986:	bc80      	pop	{r7}
 800b988:	4770      	bx	lr
	...

0800b98c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800b992:	1d3b      	adds	r3, r7, #4
 800b994:	2200      	movs	r2, #0
 800b996:	601a      	str	r2, [r3, #0]
 800b998:	605a      	str	r2, [r3, #4]
 800b99a:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 800b99c:	4b18      	ldr	r3, [pc, #96]	; (800ba00 <MX_ADC1_Init+0x74>)
 800b99e:	4a19      	ldr	r2, [pc, #100]	; (800ba04 <MX_ADC1_Init+0x78>)
 800b9a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b9a2:	4b17      	ldr	r3, [pc, #92]	; (800ba00 <MX_ADC1_Init+0x74>)
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800b9a8:	4b15      	ldr	r3, [pc, #84]	; (800ba00 <MX_ADC1_Init+0x74>)
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800b9ae:	4b14      	ldr	r3, [pc, #80]	; (800ba00 <MX_ADC1_Init+0x74>)
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b9b4:	4b12      	ldr	r3, [pc, #72]	; (800ba00 <MX_ADC1_Init+0x74>)
 800b9b6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800b9ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b9bc:	4b10      	ldr	r3, [pc, #64]	; (800ba00 <MX_ADC1_Init+0x74>)
 800b9be:	2200      	movs	r2, #0
 800b9c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800b9c2:	4b0f      	ldr	r3, [pc, #60]	; (800ba00 <MX_ADC1_Init+0x74>)
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800b9c8:	480d      	ldr	r0, [pc, #52]	; (800ba00 <MX_ADC1_Init+0x74>)
 800b9ca:	f000 fe89 	bl	800c6e0 <HAL_ADC_Init>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d001      	beq.n	800b9d8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800b9d4:	f000 f9ea 	bl	800bdac <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800b9dc:	2301      	movs	r3, #1
 800b9de:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b9e4:	1d3b      	adds	r3, r7, #4
 800b9e6:	4619      	mov	r1, r3
 800b9e8:	4805      	ldr	r0, [pc, #20]	; (800ba00 <MX_ADC1_Init+0x74>)
 800b9ea:	f000 ffe3 	bl	800c9b4 <HAL_ADC_ConfigChannel>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d001      	beq.n	800b9f8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800b9f4:	f000 f9da 	bl	800bdac <Error_Handler>
  }

}
 800b9f8:	bf00      	nop
 800b9fa:	3710      	adds	r7, #16
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}
 800ba00:	200006d4 	.word	0x200006d4
 800ba04:	40012400 	.word	0x40012400

0800ba08 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b088      	sub	sp, #32
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ba10:	f107 0310 	add.w	r3, r7, #16
 800ba14:	2200      	movs	r2, #0
 800ba16:	601a      	str	r2, [r3, #0]
 800ba18:	605a      	str	r2, [r3, #4]
 800ba1a:	609a      	str	r2, [r3, #8]
 800ba1c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	4a14      	ldr	r2, [pc, #80]	; (800ba74 <HAL_ADC_MspInit+0x6c>)
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d121      	bne.n	800ba6c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800ba28:	4b13      	ldr	r3, [pc, #76]	; (800ba78 <HAL_ADC_MspInit+0x70>)
 800ba2a:	699b      	ldr	r3, [r3, #24]
 800ba2c:	4a12      	ldr	r2, [pc, #72]	; (800ba78 <HAL_ADC_MspInit+0x70>)
 800ba2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ba32:	6193      	str	r3, [r2, #24]
 800ba34:	4b10      	ldr	r3, [pc, #64]	; (800ba78 <HAL_ADC_MspInit+0x70>)
 800ba36:	699b      	ldr	r3, [r3, #24]
 800ba38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ba3c:	60fb      	str	r3, [r7, #12]
 800ba3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba40:	4b0d      	ldr	r3, [pc, #52]	; (800ba78 <HAL_ADC_MspInit+0x70>)
 800ba42:	699b      	ldr	r3, [r3, #24]
 800ba44:	4a0c      	ldr	r2, [pc, #48]	; (800ba78 <HAL_ADC_MspInit+0x70>)
 800ba46:	f043 0304 	orr.w	r3, r3, #4
 800ba4a:	6193      	str	r3, [r2, #24]
 800ba4c:	4b0a      	ldr	r3, [pc, #40]	; (800ba78 <HAL_ADC_MspInit+0x70>)
 800ba4e:	699b      	ldr	r3, [r3, #24]
 800ba50:	f003 0304 	and.w	r3, r3, #4
 800ba54:	60bb      	str	r3, [r7, #8]
 800ba56:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = CurrentSensor_Pin;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ba5c:	2303      	movs	r3, #3
 800ba5e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CurrentSensor_GPIO_Port, &GPIO_InitStruct);
 800ba60:	f107 0310 	add.w	r3, r7, #16
 800ba64:	4619      	mov	r1, r3
 800ba66:	4805      	ldr	r0, [pc, #20]	; (800ba7c <HAL_ADC_MspInit+0x74>)
 800ba68:	f001 fe44 	bl	800d6f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800ba6c:	bf00      	nop
 800ba6e:	3720      	adds	r7, #32
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}
 800ba74:	40012400 	.word	0x40012400
 800ba78:	40021000 	.word	0x40021000
 800ba7c:	40010800 	.word	0x40010800

0800ba80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b086      	sub	sp, #24
 800ba84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ba86:	f107 0308 	add.w	r3, r7, #8
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	601a      	str	r2, [r3, #0]
 800ba8e:	605a      	str	r2, [r3, #4]
 800ba90:	609a      	str	r2, [r3, #8]
 800ba92:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba94:	4b33      	ldr	r3, [pc, #204]	; (800bb64 <MX_GPIO_Init+0xe4>)
 800ba96:	699b      	ldr	r3, [r3, #24]
 800ba98:	4a32      	ldr	r2, [pc, #200]	; (800bb64 <MX_GPIO_Init+0xe4>)
 800ba9a:	f043 0304 	orr.w	r3, r3, #4
 800ba9e:	6193      	str	r3, [r2, #24]
 800baa0:	4b30      	ldr	r3, [pc, #192]	; (800bb64 <MX_GPIO_Init+0xe4>)
 800baa2:	699b      	ldr	r3, [r3, #24]
 800baa4:	f003 0304 	and.w	r3, r3, #4
 800baa8:	607b      	str	r3, [r7, #4]
 800baaa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800baac:	4b2d      	ldr	r3, [pc, #180]	; (800bb64 <MX_GPIO_Init+0xe4>)
 800baae:	699b      	ldr	r3, [r3, #24]
 800bab0:	4a2c      	ldr	r2, [pc, #176]	; (800bb64 <MX_GPIO_Init+0xe4>)
 800bab2:	f043 0308 	orr.w	r3, r3, #8
 800bab6:	6193      	str	r3, [r2, #24]
 800bab8:	4b2a      	ldr	r3, [pc, #168]	; (800bb64 <MX_GPIO_Init+0xe4>)
 800baba:	699b      	ldr	r3, [r3, #24]
 800babc:	f003 0308 	and.w	r3, r3, #8
 800bac0:	603b      	str	r3, [r7, #0]
 800bac2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ThermoSensor_Pin|LcdCS_Pin, GPIO_PIN_SET);
 800bac4:	2201      	movs	r2, #1
 800bac6:	210c      	movs	r1, #12
 800bac8:	4827      	ldr	r0, [pc, #156]	; (800bb68 <MX_GPIO_Init+0xe8>)
 800baca:	f002 f873 	bl	800dbb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LcdA0_Pin|LcdReset_Pin|ThermoCtrl_Pin|FanCtrl_Pin
 800bace:	2200      	movs	r2, #0
 800bad0:	f641 6150 	movw	r1, #7760	; 0x1e50
 800bad4:	4824      	ldr	r0, [pc, #144]	; (800bb68 <MX_GPIO_Init+0xe8>)
 800bad6:	f002 f86d 	bl	800dbb4 <HAL_GPIO_WritePin>
                          |RedLed_Pin|GreenLed_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_Led_GPIO_Port, LCD_Led_Pin, GPIO_PIN_RESET);
 800bada:	2200      	movs	r2, #0
 800badc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bae0:	4822      	ldr	r0, [pc, #136]	; (800bb6c <MX_GPIO_Init+0xec>)
 800bae2:	f002 f867 	bl	800dbb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = ThermoSensor_Pin|LcdCS_Pin|LcdA0_Pin|LcdReset_Pin
 800bae6:	f240 435c 	movw	r3, #1116	; 0x45c
 800baea:	60bb      	str	r3, [r7, #8]
                          |FanCtrl_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800baec:	2301      	movs	r3, #1
 800baee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800baf0:	2300      	movs	r3, #0
 800baf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800baf4:	2303      	movs	r3, #3
 800baf6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800baf8:	f107 0308 	add.w	r3, r7, #8
 800bafc:	4619      	mov	r1, r3
 800bafe:	481a      	ldr	r0, [pc, #104]	; (800bb68 <MX_GPIO_Init+0xe8>)
 800bb00:	f001 fdf8 	bl	800d6f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_Led_Pin;
 800bb04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800bb12:	2301      	movs	r3, #1
 800bb14:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LCD_Led_GPIO_Port, &GPIO_InitStruct);
 800bb16:	f107 0308 	add.w	r3, r7, #8
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	4813      	ldr	r0, [pc, #76]	; (800bb6c <MX_GPIO_Init+0xec>)
 800bb1e:	f001 fde9 	bl	800d6f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = UpButton_Pin|DownButton_Pin|LeftButton_Pin|OkButton_Pin;
 800bb22:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800bb26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bb30:	f107 0308 	add.w	r3, r7, #8
 800bb34:	4619      	mov	r1, r3
 800bb36:	480d      	ldr	r0, [pc, #52]	; (800bb6c <MX_GPIO_Init+0xec>)
 800bb38:	f001 fddc 	bl	800d6f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ThermoCtrl_Pin|RedLed_Pin|GreenLed_Pin;
 800bb3c:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 800bb40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bb42:	2301      	movs	r3, #1
 800bb44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb46:	2300      	movs	r3, #0
 800bb48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bb4a:	2302      	movs	r3, #2
 800bb4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb4e:	f107 0308 	add.w	r3, r7, #8
 800bb52:	4619      	mov	r1, r3
 800bb54:	4804      	ldr	r0, [pc, #16]	; (800bb68 <MX_GPIO_Init+0xe8>)
 800bb56:	f001 fdcd 	bl	800d6f4 <HAL_GPIO_Init>

}
 800bb5a:	bf00      	nop
 800bb5c:	3718      	adds	r7, #24
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}
 800bb62:	bf00      	nop
 800bb64:	40021000 	.word	0x40021000
 800bb68:	40010800 	.word	0x40010800
 800bb6c:	40010c00 	.word	0x40010c00

0800bb70 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800bb74:	4b12      	ldr	r3, [pc, #72]	; (800bbc0 <MX_I2C1_Init+0x50>)
 800bb76:	4a13      	ldr	r2, [pc, #76]	; (800bbc4 <MX_I2C1_Init+0x54>)
 800bb78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800bb7a:	4b11      	ldr	r3, [pc, #68]	; (800bbc0 <MX_I2C1_Init+0x50>)
 800bb7c:	4a12      	ldr	r2, [pc, #72]	; (800bbc8 <MX_I2C1_Init+0x58>)
 800bb7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800bb80:	4b0f      	ldr	r3, [pc, #60]	; (800bbc0 <MX_I2C1_Init+0x50>)
 800bb82:	2200      	movs	r2, #0
 800bb84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800bb86:	4b0e      	ldr	r3, [pc, #56]	; (800bbc0 <MX_I2C1_Init+0x50>)
 800bb88:	2200      	movs	r2, #0
 800bb8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800bb8c:	4b0c      	ldr	r3, [pc, #48]	; (800bbc0 <MX_I2C1_Init+0x50>)
 800bb8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800bb92:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800bb94:	4b0a      	ldr	r3, [pc, #40]	; (800bbc0 <MX_I2C1_Init+0x50>)
 800bb96:	2200      	movs	r2, #0
 800bb98:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800bb9a:	4b09      	ldr	r3, [pc, #36]	; (800bbc0 <MX_I2C1_Init+0x50>)
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800bba0:	4b07      	ldr	r3, [pc, #28]	; (800bbc0 <MX_I2C1_Init+0x50>)
 800bba2:	2200      	movs	r2, #0
 800bba4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800bba6:	4b06      	ldr	r3, [pc, #24]	; (800bbc0 <MX_I2C1_Init+0x50>)
 800bba8:	2200      	movs	r2, #0
 800bbaa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800bbac:	4804      	ldr	r0, [pc, #16]	; (800bbc0 <MX_I2C1_Init+0x50>)
 800bbae:	f002 f859 	bl	800dc64 <HAL_I2C_Init>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d001      	beq.n	800bbbc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800bbb8:	f000 f8f8 	bl	800bdac <Error_Handler>
  }

}
 800bbbc:	bf00      	nop
 800bbbe:	bd80      	pop	{r7, pc}
 800bbc0:	20000704 	.word	0x20000704
 800bbc4:	40005400 	.word	0x40005400
 800bbc8:	000186a0 	.word	0x000186a0

0800bbcc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b08a      	sub	sp, #40	; 0x28
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bbd4:	f107 0314 	add.w	r3, r7, #20
 800bbd8:	2200      	movs	r2, #0
 800bbda:	601a      	str	r2, [r3, #0]
 800bbdc:	605a      	str	r2, [r3, #4]
 800bbde:	609a      	str	r2, [r3, #8]
 800bbe0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	4a1d      	ldr	r2, [pc, #116]	; (800bc5c <HAL_I2C_MspInit+0x90>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d132      	bne.n	800bc52 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bbec:	4b1c      	ldr	r3, [pc, #112]	; (800bc60 <HAL_I2C_MspInit+0x94>)
 800bbee:	699b      	ldr	r3, [r3, #24]
 800bbf0:	4a1b      	ldr	r2, [pc, #108]	; (800bc60 <HAL_I2C_MspInit+0x94>)
 800bbf2:	f043 0308 	orr.w	r3, r3, #8
 800bbf6:	6193      	str	r3, [r2, #24]
 800bbf8:	4b19      	ldr	r3, [pc, #100]	; (800bc60 <HAL_I2C_MspInit+0x94>)
 800bbfa:	699b      	ldr	r3, [r3, #24]
 800bbfc:	f003 0308 	and.w	r3, r3, #8
 800bc00:	613b      	str	r3, [r7, #16]
 800bc02:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 800bc04:	f44f 7340 	mov.w	r3, #768	; 0x300
 800bc08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800bc0a:	2312      	movs	r3, #18
 800bc0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800bc0e:	2303      	movs	r3, #3
 800bc10:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bc12:	f107 0314 	add.w	r3, r7, #20
 800bc16:	4619      	mov	r1, r3
 800bc18:	4812      	ldr	r0, [pc, #72]	; (800bc64 <HAL_I2C_MspInit+0x98>)
 800bc1a:	f001 fd6b 	bl	800d6f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800bc1e:	4b12      	ldr	r3, [pc, #72]	; (800bc68 <HAL_I2C_MspInit+0x9c>)
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	627b      	str	r3, [r7, #36]	; 0x24
 800bc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc26:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800bc2a:	627b      	str	r3, [r7, #36]	; 0x24
 800bc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc2e:	f043 0302 	orr.w	r3, r3, #2
 800bc32:	627b      	str	r3, [r7, #36]	; 0x24
 800bc34:	4a0c      	ldr	r2, [pc, #48]	; (800bc68 <HAL_I2C_MspInit+0x9c>)
 800bc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc38:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800bc3a:	4b09      	ldr	r3, [pc, #36]	; (800bc60 <HAL_I2C_MspInit+0x94>)
 800bc3c:	69db      	ldr	r3, [r3, #28]
 800bc3e:	4a08      	ldr	r2, [pc, #32]	; (800bc60 <HAL_I2C_MspInit+0x94>)
 800bc40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bc44:	61d3      	str	r3, [r2, #28]
 800bc46:	4b06      	ldr	r3, [pc, #24]	; (800bc60 <HAL_I2C_MspInit+0x94>)
 800bc48:	69db      	ldr	r3, [r3, #28]
 800bc4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bc4e:	60fb      	str	r3, [r7, #12]
 800bc50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800bc52:	bf00      	nop
 800bc54:	3728      	adds	r7, #40	; 0x28
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}
 800bc5a:	bf00      	nop
 800bc5c:	40005400 	.word	0x40005400
 800bc60:	40021000 	.word	0x40021000
 800bc64:	40010c00 	.word	0x40010c00
 800bc68:	40010000 	.word	0x40010000

0800bc6c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800bc6c:	b598      	push	{r3, r4, r7, lr}
 800bc6e:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800bc70:	f000 fcb2 	bl	800c5d8 <HAL_Init>


	/* Configure the system clock */
	SystemClock_Config();
 800bc74:	f000 f836 	bl	800bce4 <_Z18SystemClock_Configv>


	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800bc78:	f7ff ff02 	bl	800ba80 <MX_GPIO_Init>
	MX_ADC1_Init();
 800bc7c:	f7ff fe86 	bl	800b98c <MX_ADC1_Init>
	MX_I2C1_Init();
 800bc80:	f7ff ff76 	bl	800bb70 <MX_I2C1_Init>
	MX_SPI1_Init();
 800bc84:	f000 f8a2 	bl	800bdcc <MX_SPI1_Init>
	MX_TIM2_Init();
 800bc88:	f000 fb8c 	bl	800c3a4 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 800bc8c:	f000 fbf2 	bl	800c474 <MX_USART1_UART_Init>

	HAL_TIM_Base_Start(&htim2);
 800bc90:	4812      	ldr	r0, [pc, #72]	; (800bcdc <main+0x70>)
 800bc92:	f004 fa45 	bl	8010120 <HAL_TIM_Base_Start>

	DryerApplication = new SmartDryer();
 800bc96:	20d4      	movs	r0, #212	; 0xd4
 800bc98:	f005 fbc4 	bl	8011424 <_Znwj>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	461c      	mov	r4, r3
 800bca0:	4620      	mov	r0, r4
 800bca2:	f7fa fad7 	bl	8006254 <_ZN10SmartDryerC1Ev>
 800bca6:	4b0e      	ldr	r3, [pc, #56]	; (800bce0 <main+0x74>)
 800bca8:	601c      	str	r4, [r3, #0]

	DryerApplication->setup();
 800bcaa:	4b0d      	ldr	r3, [pc, #52]	; (800bce0 <main+0x74>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f7fc f8b8 	bl	8007e24 <_ZN10SmartDryer5setupEv>

	if(DryerApplication->enableTest)
 800bcb4:	4b0a      	ldr	r3, [pc, #40]	; (800bce0 <main+0x74>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d005      	beq.n	800bccc <main+0x60>
	{
		DryerApplication->test();
 800bcc0:	4b07      	ldr	r3, [pc, #28]	; (800bce0 <main+0x74>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f7fc f8a3 	bl	8007e10 <_ZN10SmartDryer4testEv>
 800bcca:	e004      	b.n	800bcd6 <main+0x6a>
	}
	else
	{
		DryerApplication->run();
 800bccc:	4b04      	ldr	r3, [pc, #16]	; (800bce0 <main+0x74>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f7ff f9b3 	bl	800b03c <_ZN10SmartDryer3runEv>
	}
}
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	4618      	mov	r0, r3
 800bcda:	bd98      	pop	{r3, r4, r7, pc}
 800bcdc:	200007b0 	.word	0x200007b0
 800bce0:	200006c0 	.word	0x200006c0

0800bce4 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b094      	sub	sp, #80	; 0x50
 800bce8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800bcea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bcee:	2228      	movs	r2, #40	; 0x28
 800bcf0:	2100      	movs	r1, #0
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f005 ffc7 	bl	8011c86 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800bcf8:	f107 0314 	add.w	r3, r7, #20
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	601a      	str	r2, [r3, #0]
 800bd00:	605a      	str	r2, [r3, #4]
 800bd02:	609a      	str	r2, [r3, #8]
 800bd04:	60da      	str	r2, [r3, #12]
 800bd06:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bd08:	1d3b      	adds	r3, r7, #4
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	601a      	str	r2, [r3, #0]
 800bd0e:	605a      	str	r2, [r3, #4]
 800bd10:	609a      	str	r2, [r3, #8]
 800bd12:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800bd14:	2302      	movs	r3, #2
 800bd16:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800bd18:	2301      	movs	r3, #1
 800bd1a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800bd1c:	2310      	movs	r3, #16
 800bd1e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800bd20:	2302      	movs	r3, #2
 800bd22:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800bd24:	2300      	movs	r3, #0
 800bd26:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800bd28:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bd2c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800bd2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bd32:	4618      	mov	r0, r3
 800bd34:	f002 ffd4 	bl	800ece0 <HAL_RCC_OscConfig>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	bf14      	ite	ne
 800bd3e:	2301      	movne	r3, #1
 800bd40:	2300      	moveq	r3, #0
 800bd42:	b2db      	uxtb	r3, r3
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d001      	beq.n	800bd4c <_Z18SystemClock_Configv+0x68>
	{
		Error_Handler();
 800bd48:	f000 f830 	bl	800bdac <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800bd4c:	230f      	movs	r3, #15
 800bd4e:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800bd50:	2302      	movs	r3, #2
 800bd52:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800bd54:	2300      	movs	r3, #0
 800bd56:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800bd60:	f107 0314 	add.w	r3, r7, #20
 800bd64:	2100      	movs	r1, #0
 800bd66:	4618      	mov	r0, r3
 800bd68:	f003 fb2a 	bl	800f3c0 <HAL_RCC_ClockConfig>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	bf14      	ite	ne
 800bd72:	2301      	movne	r3, #1
 800bd74:	2300      	moveq	r3, #0
 800bd76:	b2db      	uxtb	r3, r3
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d001      	beq.n	800bd80 <_Z18SystemClock_Configv+0x9c>
	{
		Error_Handler();
 800bd7c:	f000 f816 	bl	800bdac <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800bd80:	2302      	movs	r3, #2
 800bd82:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800bd84:	2300      	movs	r3, #0
 800bd86:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bd88:	1d3b      	adds	r3, r7, #4
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f003 fd5a 	bl	800f844 <HAL_RCCEx_PeriphCLKConfig>
 800bd90:	4603      	mov	r3, r0
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	bf14      	ite	ne
 800bd96:	2301      	movne	r3, #1
 800bd98:	2300      	moveq	r3, #0
 800bd9a:	b2db      	uxtb	r3, r3
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d001      	beq.n	800bda4 <_Z18SystemClock_Configv+0xc0>
	{
		Error_Handler();
 800bda0:	f000 f804 	bl	800bdac <Error_Handler>
	}
}
 800bda4:	bf00      	nop
 800bda6:	3750      	adds	r7, #80	; 0x50
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800bdac:	b480      	push	{r7}
 800bdae:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800bdb0:	bf00      	nop
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bc80      	pop	{r7}
 800bdb6:	4770      	bx	lr

0800bdb8 <assert_failed>:
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b083      	sub	sp, #12
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 800bdc2:	bf00      	nop
 800bdc4:	370c      	adds	r7, #12
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bc80      	pop	{r7}
 800bdca:	4770      	bx	lr

0800bdcc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800bdd0:	4b18      	ldr	r3, [pc, #96]	; (800be34 <MX_SPI1_Init+0x68>)
 800bdd2:	4a19      	ldr	r2, [pc, #100]	; (800be38 <MX_SPI1_Init+0x6c>)
 800bdd4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800bdd6:	4b17      	ldr	r3, [pc, #92]	; (800be34 <MX_SPI1_Init+0x68>)
 800bdd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 800bddc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800bdde:	4b15      	ldr	r3, [pc, #84]	; (800be34 <MX_SPI1_Init+0x68>)
 800bde0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800bde4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800bde6:	4b13      	ldr	r3, [pc, #76]	; (800be34 <MX_SPI1_Init+0x68>)
 800bde8:	2200      	movs	r2, #0
 800bdea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800bdec:	4b11      	ldr	r3, [pc, #68]	; (800be34 <MX_SPI1_Init+0x68>)
 800bdee:	2200      	movs	r2, #0
 800bdf0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800bdf2:	4b10      	ldr	r3, [pc, #64]	; (800be34 <MX_SPI1_Init+0x68>)
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800bdf8:	4b0e      	ldr	r3, [pc, #56]	; (800be34 <MX_SPI1_Init+0x68>)
 800bdfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bdfe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800be00:	4b0c      	ldr	r3, [pc, #48]	; (800be34 <MX_SPI1_Init+0x68>)
 800be02:	2228      	movs	r2, #40	; 0x28
 800be04:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800be06:	4b0b      	ldr	r3, [pc, #44]	; (800be34 <MX_SPI1_Init+0x68>)
 800be08:	2200      	movs	r2, #0
 800be0a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800be0c:	4b09      	ldr	r3, [pc, #36]	; (800be34 <MX_SPI1_Init+0x68>)
 800be0e:	2200      	movs	r2, #0
 800be10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800be12:	4b08      	ldr	r3, [pc, #32]	; (800be34 <MX_SPI1_Init+0x68>)
 800be14:	2200      	movs	r2, #0
 800be16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800be18:	4b06      	ldr	r3, [pc, #24]	; (800be34 <MX_SPI1_Init+0x68>)
 800be1a:	220a      	movs	r2, #10
 800be1c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800be1e:	4805      	ldr	r0, [pc, #20]	; (800be34 <MX_SPI1_Init+0x68>)
 800be20:	f003 fe1a 	bl	800fa58 <HAL_SPI_Init>
 800be24:	4603      	mov	r3, r0
 800be26:	2b00      	cmp	r3, #0
 800be28:	d001      	beq.n	800be2e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800be2a:	f7ff ffbf 	bl	800bdac <Error_Handler>
  }

}
 800be2e:	bf00      	nop
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	20000758 	.word	0x20000758
 800be38:	40013000 	.word	0x40013000

0800be3c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b088      	sub	sp, #32
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be44:	f107 0310 	add.w	r3, r7, #16
 800be48:	2200      	movs	r2, #0
 800be4a:	601a      	str	r2, [r3, #0]
 800be4c:	605a      	str	r2, [r3, #4]
 800be4e:	609a      	str	r2, [r3, #8]
 800be50:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	4a15      	ldr	r2, [pc, #84]	; (800beac <HAL_SPI_MspInit+0x70>)
 800be58:	4293      	cmp	r3, r2
 800be5a:	d123      	bne.n	800bea4 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800be5c:	4b14      	ldr	r3, [pc, #80]	; (800beb0 <HAL_SPI_MspInit+0x74>)
 800be5e:	699b      	ldr	r3, [r3, #24]
 800be60:	4a13      	ldr	r2, [pc, #76]	; (800beb0 <HAL_SPI_MspInit+0x74>)
 800be62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800be66:	6193      	str	r3, [r2, #24]
 800be68:	4b11      	ldr	r3, [pc, #68]	; (800beb0 <HAL_SPI_MspInit+0x74>)
 800be6a:	699b      	ldr	r3, [r3, #24]
 800be6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800be70:	60fb      	str	r3, [r7, #12]
 800be72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800be74:	4b0e      	ldr	r3, [pc, #56]	; (800beb0 <HAL_SPI_MspInit+0x74>)
 800be76:	699b      	ldr	r3, [r3, #24]
 800be78:	4a0d      	ldr	r2, [pc, #52]	; (800beb0 <HAL_SPI_MspInit+0x74>)
 800be7a:	f043 0304 	orr.w	r3, r3, #4
 800be7e:	6193      	str	r3, [r2, #24]
 800be80:	4b0b      	ldr	r3, [pc, #44]	; (800beb0 <HAL_SPI_MspInit+0x74>)
 800be82:	699b      	ldr	r3, [r3, #24]
 800be84:	f003 0304 	and.w	r3, r3, #4
 800be88:	60bb      	str	r3, [r7, #8]
 800be8a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Sck_Pin|Mosi_Pin;
 800be8c:	23a0      	movs	r3, #160	; 0xa0
 800be8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be90:	2302      	movs	r3, #2
 800be92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800be94:	2303      	movs	r3, #3
 800be96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800be98:	f107 0310 	add.w	r3, r7, #16
 800be9c:	4619      	mov	r1, r3
 800be9e:	4805      	ldr	r0, [pc, #20]	; (800beb4 <HAL_SPI_MspInit+0x78>)
 800bea0:	f001 fc28 	bl	800d6f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800bea4:	bf00      	nop
 800bea6:	3720      	adds	r7, #32
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}
 800beac:	40013000 	.word	0x40013000
 800beb0:	40021000 	.word	0x40021000
 800beb4:	40010800 	.word	0x40010800

0800beb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800beb8:	b480      	push	{r7}
 800beba:	b085      	sub	sp, #20
 800bebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800bebe:	4b15      	ldr	r3, [pc, #84]	; (800bf14 <HAL_MspInit+0x5c>)
 800bec0:	699b      	ldr	r3, [r3, #24]
 800bec2:	4a14      	ldr	r2, [pc, #80]	; (800bf14 <HAL_MspInit+0x5c>)
 800bec4:	f043 0301 	orr.w	r3, r3, #1
 800bec8:	6193      	str	r3, [r2, #24]
 800beca:	4b12      	ldr	r3, [pc, #72]	; (800bf14 <HAL_MspInit+0x5c>)
 800becc:	699b      	ldr	r3, [r3, #24]
 800bece:	f003 0301 	and.w	r3, r3, #1
 800bed2:	60bb      	str	r3, [r7, #8]
 800bed4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800bed6:	4b0f      	ldr	r3, [pc, #60]	; (800bf14 <HAL_MspInit+0x5c>)
 800bed8:	69db      	ldr	r3, [r3, #28]
 800beda:	4a0e      	ldr	r2, [pc, #56]	; (800bf14 <HAL_MspInit+0x5c>)
 800bedc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bee0:	61d3      	str	r3, [r2, #28]
 800bee2:	4b0c      	ldr	r3, [pc, #48]	; (800bf14 <HAL_MspInit+0x5c>)
 800bee4:	69db      	ldr	r3, [r3, #28]
 800bee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800beea:	607b      	str	r3, [r7, #4]
 800beec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800beee:	4b0a      	ldr	r3, [pc, #40]	; (800bf18 <HAL_MspInit+0x60>)
 800bef0:	685b      	ldr	r3, [r3, #4]
 800bef2:	60fb      	str	r3, [r7, #12]
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800befa:	60fb      	str	r3, [r7, #12]
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800bf02:	60fb      	str	r3, [r7, #12]
 800bf04:	4a04      	ldr	r2, [pc, #16]	; (800bf18 <HAL_MspInit+0x60>)
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800bf0a:	bf00      	nop
 800bf0c:	3714      	adds	r7, #20
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bc80      	pop	{r7}
 800bf12:	4770      	bx	lr
 800bf14:	40021000 	.word	0x40021000
 800bf18:	40010000 	.word	0x40010000

0800bf1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800bf20:	bf00      	nop
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bc80      	pop	{r7}
 800bf26:	4770      	bx	lr

0800bf28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 800bf2c:	f001 f884 	bl	800d038 <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800bf30:	e7fe      	b.n	800bf30 <HardFault_Handler+0x8>

0800bf32 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800bf32:	b480      	push	{r7}
 800bf34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800bf36:	e7fe      	b.n	800bf36 <MemManage_Handler+0x4>

0800bf38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800bf38:	b480      	push	{r7}
 800bf3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800bf3c:	e7fe      	b.n	800bf3c <BusFault_Handler+0x4>

0800bf3e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800bf3e:	b480      	push	{r7}
 800bf40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800bf42:	e7fe      	b.n	800bf42 <UsageFault_Handler+0x4>

0800bf44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800bf44:	b480      	push	{r7}
 800bf46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800bf48:	bf00      	nop
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bc80      	pop	{r7}
 800bf4e:	4770      	bx	lr

0800bf50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800bf50:	b480      	push	{r7}
 800bf52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800bf54:	bf00      	nop
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bc80      	pop	{r7}
 800bf5a:	4770      	bx	lr

0800bf5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800bf60:	bf00      	nop
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bc80      	pop	{r7}
 800bf66:	4770      	bx	lr

0800bf68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800bf6c:	f000 fb7a 	bl	800c664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800bf70:	bf00      	nop
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800bf78:	4802      	ldr	r0, [pc, #8]	; (800bf84 <USART1_IRQHandler+0x10>)
 800bf7a:	f004 fecb 	bl	8010d14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800bf7e:	bf00      	nop
 800bf80:	bd80      	pop	{r7, pc}
 800bf82:	bf00      	nop
 800bf84:	200007f0 	.word	0x200007f0

0800bf88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	af00      	add	r7, sp, #0
	return 1;
 800bf8c:	2301      	movs	r3, #1
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bc80      	pop	{r7}
 800bf94:	4770      	bx	lr

0800bf96 <_kill>:

int _kill(int pid, int sig)
{
 800bf96:	b580      	push	{r7, lr}
 800bf98:	b082      	sub	sp, #8
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	6078      	str	r0, [r7, #4]
 800bf9e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800bfa0:	f005 fdf6 	bl	8011b90 <__errno>
 800bfa4:	4602      	mov	r2, r0
 800bfa6:	2316      	movs	r3, #22
 800bfa8:	6013      	str	r3, [r2, #0]
	return -1;
 800bfaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3708      	adds	r7, #8
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}

0800bfb6 <_exit>:

void _exit (int status)
{
 800bfb6:	b580      	push	{r7, lr}
 800bfb8:	b082      	sub	sp, #8
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800bfbe:	f04f 31ff 	mov.w	r1, #4294967295
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f7ff ffe7 	bl	800bf96 <_kill>
	while (1) {}		/* Make sure we hang here */
 800bfc8:	e7fe      	b.n	800bfc8 <_exit+0x12>
	...

0800bfcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b086      	sub	sp, #24
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800bfd4:	4a14      	ldr	r2, [pc, #80]	; (800c028 <_sbrk+0x5c>)
 800bfd6:	4b15      	ldr	r3, [pc, #84]	; (800c02c <_sbrk+0x60>)
 800bfd8:	1ad3      	subs	r3, r2, r3
 800bfda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800bfe0:	4b13      	ldr	r3, [pc, #76]	; (800c030 <_sbrk+0x64>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d102      	bne.n	800bfee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800bfe8:	4b11      	ldr	r3, [pc, #68]	; (800c030 <_sbrk+0x64>)
 800bfea:	4a12      	ldr	r2, [pc, #72]	; (800c034 <_sbrk+0x68>)
 800bfec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800bfee:	4b10      	ldr	r3, [pc, #64]	; (800c030 <_sbrk+0x64>)
 800bff0:	681a      	ldr	r2, [r3, #0]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	4413      	add	r3, r2
 800bff6:	693a      	ldr	r2, [r7, #16]
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d207      	bcs.n	800c00c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800bffc:	f005 fdc8 	bl	8011b90 <__errno>
 800c000:	4602      	mov	r2, r0
 800c002:	230c      	movs	r3, #12
 800c004:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800c006:	f04f 33ff 	mov.w	r3, #4294967295
 800c00a:	e009      	b.n	800c020 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800c00c:	4b08      	ldr	r3, [pc, #32]	; (800c030 <_sbrk+0x64>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800c012:	4b07      	ldr	r3, [pc, #28]	; (800c030 <_sbrk+0x64>)
 800c014:	681a      	ldr	r2, [r3, #0]
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	4413      	add	r3, r2
 800c01a:	4a05      	ldr	r2, [pc, #20]	; (800c030 <_sbrk+0x64>)
 800c01c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800c01e:	68fb      	ldr	r3, [r7, #12]
}
 800c020:	4618      	mov	r0, r3
 800c022:	3718      	adds	r7, #24
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}
 800c028:	20005000 	.word	0x20005000
 800c02c:	00000400 	.word	0x00000400
 800c030:	200006c4 	.word	0x200006c4
 800c034:	20000860 	.word	0x20000860

0800c038 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800c038:	b480      	push	{r7}
 800c03a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800c03c:	4b15      	ldr	r3, [pc, #84]	; (800c094 <SystemInit+0x5c>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	4a14      	ldr	r2, [pc, #80]	; (800c094 <SystemInit+0x5c>)
 800c042:	f043 0301 	orr.w	r3, r3, #1
 800c046:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800c048:	4b12      	ldr	r3, [pc, #72]	; (800c094 <SystemInit+0x5c>)
 800c04a:	685a      	ldr	r2, [r3, #4]
 800c04c:	4911      	ldr	r1, [pc, #68]	; (800c094 <SystemInit+0x5c>)
 800c04e:	4b12      	ldr	r3, [pc, #72]	; (800c098 <SystemInit+0x60>)
 800c050:	4013      	ands	r3, r2
 800c052:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800c054:	4b0f      	ldr	r3, [pc, #60]	; (800c094 <SystemInit+0x5c>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	4a0e      	ldr	r2, [pc, #56]	; (800c094 <SystemInit+0x5c>)
 800c05a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800c05e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c062:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800c064:	4b0b      	ldr	r3, [pc, #44]	; (800c094 <SystemInit+0x5c>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4a0a      	ldr	r2, [pc, #40]	; (800c094 <SystemInit+0x5c>)
 800c06a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c06e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800c070:	4b08      	ldr	r3, [pc, #32]	; (800c094 <SystemInit+0x5c>)
 800c072:	685b      	ldr	r3, [r3, #4]
 800c074:	4a07      	ldr	r2, [pc, #28]	; (800c094 <SystemInit+0x5c>)
 800c076:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800c07a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800c07c:	4b05      	ldr	r3, [pc, #20]	; (800c094 <SystemInit+0x5c>)
 800c07e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800c082:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800c084:	4b05      	ldr	r3, [pc, #20]	; (800c09c <SystemInit+0x64>)
 800c086:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c08a:	609a      	str	r2, [r3, #8]
#endif 
}
 800c08c:	bf00      	nop
 800c08e:	46bd      	mov	sp, r7
 800c090:	bc80      	pop	{r7}
 800c092:	4770      	bx	lr
 800c094:	40021000 	.word	0x40021000
 800c098:	f8ff0000 	.word	0xf8ff0000
 800c09c:	e000ed00 	.word	0xe000ed00

0800c0a0 <_ZN13THERMO_SENSOR12clearI2CBuffEv>:
// HOLD MASTER - SCL line is blocked (controlled by sensor) during measurement
// NO HOLD MASTER - allows other I2C communication tasks while sensor performing
// measurements.

void THERMO_SENSOR::clearI2CBuff()
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
	memset(i2cBuffer, 0x00, BUFFER_LEN);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2220      	movs	r2, #32
 800c0ac:	2100      	movs	r1, #0
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f005 fde9 	bl	8011c86 <memset>
	i2cBufferIndex = 0;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	f883 2020 	strb.w	r2, [r3, #32]
}
 800c0bc:	bf00      	nop
 800c0be:	3708      	adds	r7, #8
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <_ZN13THERMO_SENSOR13readSensor_hmEh>:

uint16_t THERMO_SENSOR::readSensor_hm(uint8_t command)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b086      	sub	sp, #24
 800c0c8:	af02      	add	r7, sp, #8
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	70fb      	strb	r3, [r7, #3]
	uint8_t data[2];
	uint16_t result;
//	uint8_t n = 0;
	uint8_t d;

	if(command == TRIGGER_RH_MEASUREMENT_HM || command == TRIGGER_RH_MEASUREMENT_NHM)
 800c0d0:	78fb      	ldrb	r3, [r7, #3]
 800c0d2:	2be5      	cmp	r3, #229	; 0xe5
 800c0d4:	d002      	beq.n	800c0dc <_ZN13THERMO_SENSOR13readSensor_hmEh+0x18>
 800c0d6:	78fb      	ldrb	r3, [r7, #3]
 800c0d8:	2bf5      	cmp	r3, #245	; 0xf5
 800c0da:	d101      	bne.n	800c0e0 <_ZN13THERMO_SENSOR13readSensor_hmEh+0x1c>
		d = 30;
 800c0dc:	231e      	movs	r3, #30
 800c0de:	737b      	strb	r3, [r7, #13]
	if(command == TRIGGER_T_MEASUREMENT_HM || command == TRIGGER_T_MEASUREMENT_NHM)
 800c0e0:	78fb      	ldrb	r3, [r7, #3]
 800c0e2:	2be3      	cmp	r3, #227	; 0xe3
 800c0e4:	d002      	beq.n	800c0ec <_ZN13THERMO_SENSOR13readSensor_hmEh+0x28>
 800c0e6:	78fb      	ldrb	r3, [r7, #3]
 800c0e8:	2bf3      	cmp	r3, #243	; 0xf3
 800c0ea:	d101      	bne.n	800c0f0 <_ZN13THERMO_SENSOR13readSensor_hmEh+0x2c>
		d = 85;
 800c0ec:	2355      	movs	r3, #85	; 0x55
 800c0ee:	737b      	strb	r3, [r7, #13]

	clearI2CBuff();
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f7ff ffd5 	bl	800c0a0 <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	i2cBuffer[0] = command;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	78fa      	ldrb	r2, [r7, #3]
 800c0fa:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, I2CTEMPADDR, i2cBuffer, 1, 10);
 800c0fc:	687a      	ldr	r2, [r7, #4]
 800c0fe:	230a      	movs	r3, #10
 800c100:	9300      	str	r3, [sp, #0]
 800c102:	2301      	movs	r3, #1
 800c104:	2180      	movs	r1, #128	; 0x80
 800c106:	482d      	ldr	r0, [pc, #180]	; (800c1bc <_ZN13THERMO_SENSOR13readSensor_hmEh+0xf8>)
 800c108:	f001 ff66 	bl	800dfd8 <HAL_I2C_Master_Transmit>
	HAL_Delay(d);
 800c10c:	7b7b      	ldrb	r3, [r7, #13]
 800c10e:	4618      	mov	r0, r3
 800c110:	f000 fac4 	bl	800c69c <HAL_Delay>
	clearI2CBuff();
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f7ff ffc3 	bl	800c0a0 <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	HAL_I2C_Master_Receive(&hi2c1, I2CTEMPADDR, i2cBuffer, 3, 10);
 800c11a:	687a      	ldr	r2, [r7, #4]
 800c11c:	230a      	movs	r3, #10
 800c11e:	9300      	str	r3, [sp, #0]
 800c120:	2303      	movs	r3, #3
 800c122:	2180      	movs	r1, #128	; 0x80
 800c124:	4825      	ldr	r0, [pc, #148]	; (800c1bc <_ZN13THERMO_SENSOR13readSensor_hmEh+0xf8>)
 800c126:	f002 f855 	bl	800e1d4 <HAL_I2C_Master_Receive>
	data[0] = i2cBuffer[i2cBufferIndex++]; 	// read data (MSB)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c130:	1c5a      	adds	r2, r3, #1
 800c132:	b2d1      	uxtb	r1, r2
 800c134:	687a      	ldr	r2, [r7, #4]
 800c136:	f882 1020 	strb.w	r1, [r2, #32]
 800c13a:	461a      	mov	r2, r3
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	5c9b      	ldrb	r3, [r3, r2]
 800c140:	723b      	strb	r3, [r7, #8]
	data[1] = i2cBuffer[i2cBufferIndex++]; 	// read data (LSB)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c148:	1c5a      	adds	r2, r3, #1
 800c14a:	b2d1      	uxtb	r1, r2
 800c14c:	687a      	ldr	r2, [r7, #4]
 800c14e:	f882 1020 	strb.w	r1, [r2, #32]
 800c152:	461a      	mov	r2, r3
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	5c9b      	ldrb	r3, [r3, r2]
 800c158:	727b      	strb	r3, [r7, #9]
	checksum = i2cBuffer[i2cBufferIndex++];	// read checksum
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c160:	1c5a      	adds	r2, r3, #1
 800c162:	b2d1      	uxtb	r1, r2
 800c164:	687a      	ldr	r2, [r7, #4]
 800c166:	f882 1020 	strb.w	r1, [r2, #32]
 800c16a:	461a      	mov	r2, r3
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	5c9b      	ldrb	r3, [r3, r2]
 800c170:	733b      	strb	r3, [r7, #12]
	result = (data[0] << 8);
 800c172:	7a3b      	ldrb	r3, [r7, #8]
 800c174:	b29b      	uxth	r3, r3
 800c176:	021b      	lsls	r3, r3, #8
 800c178:	81fb      	strh	r3, [r7, #14]
	result += data[1];
 800c17a:	7a7b      	ldrb	r3, [r7, #9]
 800c17c:	b29a      	uxth	r2, r3
 800c17e:	89fb      	ldrh	r3, [r7, #14]
 800c180:	4413      	add	r3, r2
 800c182:	81fb      	strh	r3, [r7, #14]
	if(CRC_Checksum (data, 2, checksum))
 800c184:	7b3b      	ldrb	r3, [r7, #12]
 800c186:	f107 0108 	add.w	r1, r7, #8
 800c18a:	2202      	movs	r2, #2
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f000 f87b 	bl	800c288 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh>
 800c192:	4603      	mov	r3, r0
 800c194:	2b00      	cmp	r3, #0
 800c196:	bf14      	ite	ne
 800c198:	2301      	movne	r3, #1
 800c19a:	2300      	moveq	r3, #0
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d004      	beq.n	800c1ac <_ZN13THERMO_SENSOR13readSensor_hmEh+0xe8>
	{
		reset();
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 f8e0 	bl	800c368 <_ZN13THERMO_SENSOR5resetEv>
		result = 1;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	81fb      	strh	r3, [r7, #14]
	}
	clearI2CBuff();
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f7ff ff77 	bl	800c0a0 <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	return result; // @suppress("Return with parenthesis")
 800c1b2:	89fb      	ldrh	r3, [r7, #14]
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3710      	adds	r7, #16
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}
 800c1bc:	20000704 	.word	0x20000704

0800c1c0 <_ZN13THERMO_SENSOR6CalcRHEt>:

float THERMO_SENSOR::CalcRH(uint16_t rh)
{
 800c1c0:	b590      	push	{r4, r7, lr}
 800c1c2:	b083      	sub	sp, #12
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
 800c1c8:	460b      	mov	r3, r1
 800c1ca:	807b      	strh	r3, [r7, #2]
	rh &= ~0x0003;	// clean last two bits
 800c1cc:	887b      	ldrh	r3, [r7, #2]
 800c1ce:	f023 0303 	bic.w	r3, r3, #3
 800c1d2:	807b      	strh	r3, [r7, #2]
  	return (-6.0 + 125.0/65536 * (float)rh); // return relative humidity
 800c1d4:	887b      	ldrh	r3, [r7, #2]
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7f4 fc96 	bl	8000b08 <__aeabi_ui2f>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7f4 f922 	bl	8000428 <__aeabi_f2d>
 800c1e4:	f04f 0200 	mov.w	r2, #0
 800c1e8:	4b0b      	ldr	r3, [pc, #44]	; (800c218 <_ZN13THERMO_SENSOR6CalcRHEt+0x58>)
 800c1ea:	f7f4 f975 	bl	80004d8 <__aeabi_dmul>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	460c      	mov	r4, r1
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	4621      	mov	r1, r4
 800c1f6:	f04f 0200 	mov.w	r2, #0
 800c1fa:	4b08      	ldr	r3, [pc, #32]	; (800c21c <_ZN13THERMO_SENSOR6CalcRHEt+0x5c>)
 800c1fc:	f7f3 ffb4 	bl	8000168 <__aeabi_dsub>
 800c200:	4603      	mov	r3, r0
 800c202:	460c      	mov	r4, r1
 800c204:	4618      	mov	r0, r3
 800c206:	4621      	mov	r1, r4
 800c208:	f7f4 fb78 	bl	80008fc <__aeabi_d2f>
 800c20c:	4603      	mov	r3, r0
}
 800c20e:	4618      	mov	r0, r3
 800c210:	370c      	adds	r7, #12
 800c212:	46bd      	mov	sp, r7
 800c214:	bd90      	pop	{r4, r7, pc}
 800c216:	bf00      	nop
 800c218:	3f5f4000 	.word	0x3f5f4000
 800c21c:	40180000 	.word	0x40180000

0800c220 <_ZN13THERMO_SENSOR5CalcTEt>:

float THERMO_SENSOR::CalcT(uint16_t t)
{
 800c220:	b590      	push	{r4, r7, lr}
 800c222:	b083      	sub	sp, #12
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
 800c228:	460b      	mov	r3, r1
 800c22a:	807b      	strh	r3, [r7, #2]
	t &= ~0x0003;	// clean last two bits
 800c22c:	887b      	ldrh	r3, [r7, #2]
 800c22e:	f023 0303 	bic.w	r3, r3, #3
 800c232:	807b      	strh	r3, [r7, #2]
	return (-46.85 + 175.72/65536 * (float)t);
 800c234:	887b      	ldrh	r3, [r7, #2]
 800c236:	4618      	mov	r0, r3
 800c238:	f7f4 fc66 	bl	8000b08 <__aeabi_ui2f>
 800c23c:	4603      	mov	r3, r0
 800c23e:	4618      	mov	r0, r3
 800c240:	f7f4 f8f2 	bl	8000428 <__aeabi_f2d>
 800c244:	a30c      	add	r3, pc, #48	; (adr r3, 800c278 <_ZN13THERMO_SENSOR5CalcTEt+0x58>)
 800c246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24a:	f7f4 f945 	bl	80004d8 <__aeabi_dmul>
 800c24e:	4603      	mov	r3, r0
 800c250:	460c      	mov	r4, r1
 800c252:	4618      	mov	r0, r3
 800c254:	4621      	mov	r1, r4
 800c256:	a30a      	add	r3, pc, #40	; (adr r3, 800c280 <_ZN13THERMO_SENSOR5CalcTEt+0x60>)
 800c258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25c:	f7f3 ff84 	bl	8000168 <__aeabi_dsub>
 800c260:	4603      	mov	r3, r0
 800c262:	460c      	mov	r4, r1
 800c264:	4618      	mov	r0, r3
 800c266:	4621      	mov	r1, r4
 800c268:	f7f4 fb48 	bl	80008fc <__aeabi_d2f>
 800c26c:	4603      	mov	r3, r0
}
 800c26e:	4618      	mov	r0, r3
 800c270:	370c      	adds	r7, #12
 800c272:	46bd      	mov	sp, r7
 800c274:	bd90      	pop	{r4, r7, pc}
 800c276:	bf00      	nop
 800c278:	3d70a3d7 	.word	0x3d70a3d7
 800c27c:	3f65f70a 	.word	0x3f65f70a
 800c280:	cccccccd 	.word	0xcccccccd
 800c284:	40476ccc 	.word	0x40476ccc

0800c288 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh>:

uint8_t THERMO_SENSOR::CRC_Checksum(uint8_t data[], uint8_t no_of_bytes, uint8_t checksum)
{
 800c288:	b480      	push	{r7}
 800c28a:	b087      	sub	sp, #28
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	60f8      	str	r0, [r7, #12]
 800c290:	60b9      	str	r1, [r7, #8]
 800c292:	4611      	mov	r1, r2
 800c294:	461a      	mov	r2, r3
 800c296:	460b      	mov	r3, r1
 800c298:	71fb      	strb	r3, [r7, #7]
 800c29a:	4613      	mov	r3, r2
 800c29c:	71bb      	strb	r3, [r7, #6]
	uint8_t crc = 0;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	75fb      	strb	r3, [r7, #23]
  	uint8_t byteCtr;
  	uint8_t ret = 0;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	757b      	strb	r3, [r7, #21]

 	 //calculates 8-Bit checksum with given polynomial
  	for (byteCtr = 0; byteCtr < no_of_bytes; ++byteCtr)
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	75bb      	strb	r3, [r7, #22]
 800c2aa:	7dba      	ldrb	r2, [r7, #22]
 800c2ac:	79fb      	ldrb	r3, [r7, #7]
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d222      	bcs.n	800c2f8 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x70>
 	 {
		crc ^= (data[byteCtr]);
 800c2b2:	7dbb      	ldrb	r3, [r7, #22]
 800c2b4:	68ba      	ldr	r2, [r7, #8]
 800c2b6:	4413      	add	r3, r2
 800c2b8:	781a      	ldrb	r2, [r3, #0]
 800c2ba:	7dfb      	ldrb	r3, [r7, #23]
 800c2bc:	4053      	eors	r3, r2
 800c2be:	75fb      	strb	r3, [r7, #23]
		for (uint8_t bit = 8; bit > 0; --bit)
 800c2c0:	2308      	movs	r3, #8
 800c2c2:	753b      	strb	r3, [r7, #20]
 800c2c4:	7d3b      	ldrb	r3, [r7, #20]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d012      	beq.n	800c2f0 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x68>
		{
		   if (crc & 0x80)
 800c2ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	da07      	bge.n	800c2e2 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x5a>
			   crc = (crc << 1) ^ POLYNOMIAL;
 800c2d2:	7dfb      	ldrb	r3, [r7, #23]
 800c2d4:	005b      	lsls	r3, r3, #1
 800c2d6:	b25b      	sxtb	r3, r3
 800c2d8:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800c2dc:	b25b      	sxtb	r3, r3
 800c2de:	75fb      	strb	r3, [r7, #23]
 800c2e0:	e002      	b.n	800c2e8 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x60>
		   else
			   crc = (crc << 1);
 800c2e2:	7dfb      	ldrb	r3, [r7, #23]
 800c2e4:	005b      	lsls	r3, r3, #1
 800c2e6:	75fb      	strb	r3, [r7, #23]
		for (uint8_t bit = 8; bit > 0; --bit)
 800c2e8:	7d3b      	ldrb	r3, [r7, #20]
 800c2ea:	3b01      	subs	r3, #1
 800c2ec:	753b      	strb	r3, [r7, #20]
 800c2ee:	e7e9      	b.n	800c2c4 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x3c>
  	for (byteCtr = 0; byteCtr < no_of_bytes; ++byteCtr)
 800c2f0:	7dbb      	ldrb	r3, [r7, #22]
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	75bb      	strb	r3, [r7, #22]
 800c2f6:	e7d8      	b.n	800c2aa <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x22>
		}
 	 }
 	 if (crc != checksum)
 800c2f8:	7dfa      	ldrb	r2, [r7, #23]
 800c2fa:	79bb      	ldrb	r3, [r7, #6]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d002      	beq.n	800c306 <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x7e>
 		 ret = 1;
 800c300:	2301      	movs	r3, #1
 800c302:	757b      	strb	r3, [r7, #21]
 800c304:	e001      	b.n	800c30a <_ZN13THERMO_SENSOR12CRC_ChecksumEPhhh+0x82>
 	 else
 		 ret = 0;
 800c306:	2300      	movs	r3, #0
 800c308:	757b      	strb	r3, [r7, #21]
 	 return ret;
 800c30a:	7d7b      	ldrb	r3, [r7, #21]
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	371c      	adds	r7, #28
 800c310:	46bd      	mov	sp, r7
 800c312:	bc80      	pop	{r7}
 800c314:	4770      	bx	lr

0800c316 <_ZN13THERMO_SENSOR11getHumidityEv>:
	return SN; // @suppress("Return with parenthesis")

}

float THERMO_SENSOR::getHumidity(void)
{
 800c316:	b580      	push	{r7, lr}
 800c318:	b084      	sub	sp, #16
 800c31a:	af00      	add	r7, sp, #0
 800c31c:	6078      	str	r0, [r7, #4]
	uint16_t result; 	// return variable

	result = readSensor_hm(TRIGGER_RH_MEASUREMENT_NHM);
 800c31e:	21f5      	movs	r1, #245	; 0xf5
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f7ff fecf 	bl	800c0c4 <_ZN13THERMO_SENSOR13readSensor_hmEh>
 800c326:	4603      	mov	r3, r0
 800c328:	81fb      	strh	r3, [r7, #14]

	return CalcRH(result);
 800c32a:	89fb      	ldrh	r3, [r7, #14]
 800c32c:	4619      	mov	r1, r3
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f7ff ff46 	bl	800c1c0 <_ZN13THERMO_SENSOR6CalcRHEt>
 800c334:	4603      	mov	r3, r0
}
 800c336:	4618      	mov	r0, r3
 800c338:	3710      	adds	r7, #16
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}

0800c33e <_ZN13THERMO_SENSOR14getTemperatureEv>:

float THERMO_SENSOR::getTemperature(void)
{
 800c33e:	b580      	push	{r7, lr}
 800c340:	b084      	sub	sp, #16
 800c342:	af00      	add	r7, sp, #0
 800c344:	6078      	str	r0, [r7, #4]
	uint16_t result; 	// return variable

	result = readSensor_hm(TRIGGER_T_MEASUREMENT_NHM);
 800c346:	21f3      	movs	r1, #243	; 0xf3
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f7ff febb 	bl	800c0c4 <_ZN13THERMO_SENSOR13readSensor_hmEh>
 800c34e:	4603      	mov	r3, r0
 800c350:	81fb      	strh	r3, [r7, #14]

	return CalcT(result);
 800c352:	89fb      	ldrh	r3, [r7, #14]
 800c354:	4619      	mov	r1, r3
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f7ff ff62 	bl	800c220 <_ZN13THERMO_SENSOR5CalcTEt>
 800c35c:	4603      	mov	r3, r0
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3710      	adds	r7, #16
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
	...

0800c368 <_ZN13THERMO_SENSOR5resetEv>:

void THERMO_SENSOR::reset()
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b084      	sub	sp, #16
 800c36c:	af02      	add	r7, sp, #8
 800c36e:	6078      	str	r0, [r7, #4]
	clearI2CBuff();
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f7ff fe95 	bl	800c0a0 <_ZN13THERMO_SENSOR12clearI2CBuffEv>
	i2cBuffer[0] = SOFT_RESET;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	22fe      	movs	r2, #254	; 0xfe
 800c37a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, I2CTEMPADDR, i2cBuffer, 1, 10);
 800c37c:	687a      	ldr	r2, [r7, #4]
 800c37e:	230a      	movs	r3, #10
 800c380:	9300      	str	r3, [sp, #0]
 800c382:	2301      	movs	r3, #1
 800c384:	2180      	movs	r1, #128	; 0x80
 800c386:	4806      	ldr	r0, [pc, #24]	; (800c3a0 <_ZN13THERMO_SENSOR5resetEv+0x38>)
 800c388:	f001 fe26 	bl	800dfd8 <HAL_I2C_Master_Transmit>
	HAL_Delay(15);
 800c38c:	200f      	movs	r0, #15
 800c38e:	f000 f985 	bl	800c69c <HAL_Delay>
	clearI2CBuff();
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f7ff fe84 	bl	800c0a0 <_ZN13THERMO_SENSOR12clearI2CBuffEv>
}
 800c398:	bf00      	nop
 800c39a:	3708      	adds	r7, #8
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	20000704 	.word	0x20000704

0800c3a4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b086      	sub	sp, #24
 800c3a8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c3aa:	f107 0308 	add.w	r3, r7, #8
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	601a      	str	r2, [r3, #0]
 800c3b2:	605a      	str	r2, [r3, #4]
 800c3b4:	609a      	str	r2, [r3, #8]
 800c3b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c3b8:	463b      	mov	r3, r7
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	601a      	str	r2, [r3, #0]
 800c3be:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800c3c0:	4b1d      	ldr	r3, [pc, #116]	; (800c438 <MX_TIM2_Init+0x94>)
 800c3c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c3c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800c3c8:	4b1b      	ldr	r3, [pc, #108]	; (800c438 <MX_TIM2_Init+0x94>)
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c3ce:	4b1a      	ldr	r3, [pc, #104]	; (800c438 <MX_TIM2_Init+0x94>)
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535 - 1;
 800c3d4:	4b18      	ldr	r3, [pc, #96]	; (800c438 <MX_TIM2_Init+0x94>)
 800c3d6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c3da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c3dc:	4b16      	ldr	r3, [pc, #88]	; (800c438 <MX_TIM2_Init+0x94>)
 800c3de:	2200      	movs	r2, #0
 800c3e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c3e2:	4b15      	ldr	r3, [pc, #84]	; (800c438 <MX_TIM2_Init+0x94>)
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800c3e8:	4813      	ldr	r0, [pc, #76]	; (800c438 <MX_TIM2_Init+0x94>)
 800c3ea:	f003 fe13 	bl	8010014 <HAL_TIM_Base_Init>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d001      	beq.n	800c3f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800c3f4:	f7ff fcda 	bl	800bdac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c3f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c3fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800c3fe:	f107 0308 	add.w	r3, r7, #8
 800c402:	4619      	mov	r1, r3
 800c404:	480c      	ldr	r0, [pc, #48]	; (800c438 <MX_TIM2_Init+0x94>)
 800c406:	f003 fecf 	bl	80101a8 <HAL_TIM_ConfigClockSource>
 800c40a:	4603      	mov	r3, r0
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d001      	beq.n	800c414 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800c410:	f7ff fccc 	bl	800bdac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c414:	2300      	movs	r3, #0
 800c416:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c418:	2300      	movs	r3, #0
 800c41a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c41c:	463b      	mov	r3, r7
 800c41e:	4619      	mov	r1, r3
 800c420:	4805      	ldr	r0, [pc, #20]	; (800c438 <MX_TIM2_Init+0x94>)
 800c422:	f004 fa4b 	bl	80108bc <HAL_TIMEx_MasterConfigSynchronization>
 800c426:	4603      	mov	r3, r0
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d001      	beq.n	800c430 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800c42c:	f7ff fcbe 	bl	800bdac <Error_Handler>
  }

}
 800c430:	bf00      	nop
 800c432:	3718      	adds	r7, #24
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	200007b0 	.word	0x200007b0

0800c43c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b085      	sub	sp, #20
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c44c:	d10b      	bne.n	800c466 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800c44e:	4b08      	ldr	r3, [pc, #32]	; (800c470 <HAL_TIM_Base_MspInit+0x34>)
 800c450:	69db      	ldr	r3, [r3, #28]
 800c452:	4a07      	ldr	r2, [pc, #28]	; (800c470 <HAL_TIM_Base_MspInit+0x34>)
 800c454:	f043 0301 	orr.w	r3, r3, #1
 800c458:	61d3      	str	r3, [r2, #28]
 800c45a:	4b05      	ldr	r3, [pc, #20]	; (800c470 <HAL_TIM_Base_MspInit+0x34>)
 800c45c:	69db      	ldr	r3, [r3, #28]
 800c45e:	f003 0301 	and.w	r3, r3, #1
 800c462:	60fb      	str	r3, [r7, #12]
 800c464:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800c466:	bf00      	nop
 800c468:	3714      	adds	r7, #20
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bc80      	pop	{r7}
 800c46e:	4770      	bx	lr
 800c470:	40021000 	.word	0x40021000

0800c474 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800c478:	4b11      	ldr	r3, [pc, #68]	; (800c4c0 <MX_USART1_UART_Init+0x4c>)
 800c47a:	4a12      	ldr	r2, [pc, #72]	; (800c4c4 <MX_USART1_UART_Init+0x50>)
 800c47c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800c47e:	4b10      	ldr	r3, [pc, #64]	; (800c4c0 <MX_USART1_UART_Init+0x4c>)
 800c480:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800c484:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c486:	4b0e      	ldr	r3, [pc, #56]	; (800c4c0 <MX_USART1_UART_Init+0x4c>)
 800c488:	2200      	movs	r2, #0
 800c48a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c48c:	4b0c      	ldr	r3, [pc, #48]	; (800c4c0 <MX_USART1_UART_Init+0x4c>)
 800c48e:	2200      	movs	r2, #0
 800c490:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c492:	4b0b      	ldr	r3, [pc, #44]	; (800c4c0 <MX_USART1_UART_Init+0x4c>)
 800c494:	2200      	movs	r2, #0
 800c496:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c498:	4b09      	ldr	r3, [pc, #36]	; (800c4c0 <MX_USART1_UART_Init+0x4c>)
 800c49a:	220c      	movs	r2, #12
 800c49c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c49e:	4b08      	ldr	r3, [pc, #32]	; (800c4c0 <MX_USART1_UART_Init+0x4c>)
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c4a4:	4b06      	ldr	r3, [pc, #24]	; (800c4c0 <MX_USART1_UART_Init+0x4c>)
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c4aa:	4805      	ldr	r0, [pc, #20]	; (800c4c0 <MX_USART1_UART_Init+0x4c>)
 800c4ac:	f004 fa9c 	bl	80109e8 <HAL_UART_Init>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d001      	beq.n	800c4ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800c4b6:	f7ff fc79 	bl	800bdac <Error_Handler>
  }

}
 800c4ba:	bf00      	nop
 800c4bc:	bd80      	pop	{r7, pc}
 800c4be:	bf00      	nop
 800c4c0:	200007f0 	.word	0x200007f0
 800c4c4:	40013800 	.word	0x40013800

0800c4c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b08a      	sub	sp, #40	; 0x28
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c4d0:	f107 0314 	add.w	r3, r7, #20
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	601a      	str	r2, [r3, #0]
 800c4d8:	605a      	str	r2, [r3, #4]
 800c4da:	609a      	str	r2, [r3, #8]
 800c4dc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	4a26      	ldr	r2, [pc, #152]	; (800c57c <HAL_UART_MspInit+0xb4>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d145      	bne.n	800c574 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800c4e8:	4b25      	ldr	r3, [pc, #148]	; (800c580 <HAL_UART_MspInit+0xb8>)
 800c4ea:	699b      	ldr	r3, [r3, #24]
 800c4ec:	4a24      	ldr	r2, [pc, #144]	; (800c580 <HAL_UART_MspInit+0xb8>)
 800c4ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c4f2:	6193      	str	r3, [r2, #24]
 800c4f4:	4b22      	ldr	r3, [pc, #136]	; (800c580 <HAL_UART_MspInit+0xb8>)
 800c4f6:	699b      	ldr	r3, [r3, #24]
 800c4f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c4fc:	613b      	str	r3, [r7, #16]
 800c4fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c500:	4b1f      	ldr	r3, [pc, #124]	; (800c580 <HAL_UART_MspInit+0xb8>)
 800c502:	699b      	ldr	r3, [r3, #24]
 800c504:	4a1e      	ldr	r2, [pc, #120]	; (800c580 <HAL_UART_MspInit+0xb8>)
 800c506:	f043 0308 	orr.w	r3, r3, #8
 800c50a:	6193      	str	r3, [r2, #24]
 800c50c:	4b1c      	ldr	r3, [pc, #112]	; (800c580 <HAL_UART_MspInit+0xb8>)
 800c50e:	699b      	ldr	r3, [r3, #24]
 800c510:	f003 0308 	and.w	r3, r3, #8
 800c514:	60fb      	str	r3, [r7, #12]
 800c516:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 800c518:	2340      	movs	r3, #64	; 0x40
 800c51a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c51c:	2302      	movs	r3, #2
 800c51e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c520:	2303      	movs	r3, #3
 800c522:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 800c524:	f107 0314 	add.w	r3, r7, #20
 800c528:	4619      	mov	r1, r3
 800c52a:	4816      	ldr	r0, [pc, #88]	; (800c584 <HAL_UART_MspInit+0xbc>)
 800c52c:	f001 f8e2 	bl	800d6f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 800c530:	2380      	movs	r3, #128	; 0x80
 800c532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c534:	2300      	movs	r3, #0
 800c536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c538:	2300      	movs	r3, #0
 800c53a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 800c53c:	f107 0314 	add.w	r3, r7, #20
 800c540:	4619      	mov	r1, r3
 800c542:	4810      	ldr	r0, [pc, #64]	; (800c584 <HAL_UART_MspInit+0xbc>)
 800c544:	f001 f8d6 	bl	800d6f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800c548:	4b0f      	ldr	r3, [pc, #60]	; (800c588 <HAL_UART_MspInit+0xc0>)
 800c54a:	685b      	ldr	r3, [r3, #4]
 800c54c:	627b      	str	r3, [r7, #36]	; 0x24
 800c54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c550:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800c554:	627b      	str	r3, [r7, #36]	; 0x24
 800c556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c558:	f043 0304 	orr.w	r3, r3, #4
 800c55c:	627b      	str	r3, [r7, #36]	; 0x24
 800c55e:	4a0a      	ldr	r2, [pc, #40]	; (800c588 <HAL_UART_MspInit+0xc0>)
 800c560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c562:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800c564:	2200      	movs	r2, #0
 800c566:	2100      	movs	r1, #0
 800c568:	2025      	movs	r0, #37	; 0x25
 800c56a:	f000 fd21 	bl	800cfb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800c56e:	2025      	movs	r0, #37	; 0x25
 800c570:	f000 fd4a 	bl	800d008 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800c574:	bf00      	nop
 800c576:	3728      	adds	r7, #40	; 0x28
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}
 800c57c:	40013800 	.word	0x40013800
 800c580:	40021000 	.word	0x40021000
 800c584:	40010c00 	.word	0x40010c00
 800c588:	40010000 	.word	0x40010000

0800c58c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800c58c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800c58e:	e003      	b.n	800c598 <LoopCopyDataInit>

0800c590 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800c590:	4b0b      	ldr	r3, [pc, #44]	; (800c5c0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800c592:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800c594:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800c596:	3104      	adds	r1, #4

0800c598 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800c598:	480a      	ldr	r0, [pc, #40]	; (800c5c4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800c59a:	4b0b      	ldr	r3, [pc, #44]	; (800c5c8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800c59c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800c59e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800c5a0:	d3f6      	bcc.n	800c590 <CopyDataInit>
  ldr r2, =_sbss
 800c5a2:	4a0a      	ldr	r2, [pc, #40]	; (800c5cc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800c5a4:	e002      	b.n	800c5ac <LoopFillZerobss>

0800c5a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800c5a6:	2300      	movs	r3, #0
  str r3, [r2], #4
 800c5a8:	f842 3b04 	str.w	r3, [r2], #4

0800c5ac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800c5ac:	4b08      	ldr	r3, [pc, #32]	; (800c5d0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800c5ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 800c5b0:	d3f9      	bcc.n	800c5a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800c5b2:	f7ff fd41 	bl	800c038 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c5b6:	f005 faf1 	bl	8011b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800c5ba:	f7ff fb57 	bl	800bc6c <main>
  bx lr
 800c5be:	4770      	bx	lr
  ldr r3, =_sidata
 800c5c0:	08015cfc 	.word	0x08015cfc
  ldr r0, =_sdata
 800c5c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800c5c8:	20000288 	.word	0x20000288
  ldr r2, =_sbss
 800c5cc:	20000288 	.word	0x20000288
  ldr r3, = _ebss
 800c5d0:	2000085c 	.word	0x2000085c

0800c5d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800c5d4:	e7fe      	b.n	800c5d4 <ADC1_2_IRQHandler>
	...

0800c5d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c5dc:	4b08      	ldr	r3, [pc, #32]	; (800c600 <HAL_Init+0x28>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	4a07      	ldr	r2, [pc, #28]	; (800c600 <HAL_Init+0x28>)
 800c5e2:	f043 0310 	orr.w	r3, r3, #16
 800c5e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c5e8:	2003      	movs	r0, #3
 800c5ea:	f000 fcc1 	bl	800cf70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800c5ee:	2000      	movs	r0, #0
 800c5f0:	f000 f808 	bl	800c604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800c5f4:	f7ff fc60 	bl	800beb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800c5f8:	2300      	movs	r3, #0
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	bd80      	pop	{r7, pc}
 800c5fe:	bf00      	nop
 800c600:	40022000 	.word	0x40022000

0800c604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b082      	sub	sp, #8
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800c60c:	4b12      	ldr	r3, [pc, #72]	; (800c658 <HAL_InitTick+0x54>)
 800c60e:	681a      	ldr	r2, [r3, #0]
 800c610:	4b12      	ldr	r3, [pc, #72]	; (800c65c <HAL_InitTick+0x58>)
 800c612:	781b      	ldrb	r3, [r3, #0]
 800c614:	4619      	mov	r1, r3
 800c616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c61a:	fbb3 f3f1 	udiv	r3, r3, r1
 800c61e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c622:	4618      	mov	r0, r3
 800c624:	f000 fd0c 	bl	800d040 <HAL_SYSTICK_Config>
 800c628:	4603      	mov	r3, r0
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d001      	beq.n	800c632 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800c62e:	2301      	movs	r3, #1
 800c630:	e00e      	b.n	800c650 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2b0f      	cmp	r3, #15
 800c636:	d80a      	bhi.n	800c64e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800c638:	2200      	movs	r2, #0
 800c63a:	6879      	ldr	r1, [r7, #4]
 800c63c:	f04f 30ff 	mov.w	r0, #4294967295
 800c640:	f000 fcb6 	bl	800cfb0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800c644:	4a06      	ldr	r2, [pc, #24]	; (800c660 <HAL_InitTick+0x5c>)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800c64a:	2300      	movs	r3, #0
 800c64c:	e000      	b.n	800c650 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800c64e:	2301      	movs	r3, #1
}
 800c650:	4618      	mov	r0, r3
 800c652:	3708      	adds	r7, #8
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}
 800c658:	200000ac 	.word	0x200000ac
 800c65c:	200000b4 	.word	0x200000b4
 800c660:	200000b0 	.word	0x200000b0

0800c664 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c664:	b480      	push	{r7}
 800c666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800c668:	4b05      	ldr	r3, [pc, #20]	; (800c680 <HAL_IncTick+0x1c>)
 800c66a:	781b      	ldrb	r3, [r3, #0]
 800c66c:	461a      	mov	r2, r3
 800c66e:	4b05      	ldr	r3, [pc, #20]	; (800c684 <HAL_IncTick+0x20>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	4413      	add	r3, r2
 800c674:	4a03      	ldr	r2, [pc, #12]	; (800c684 <HAL_IncTick+0x20>)
 800c676:	6013      	str	r3, [r2, #0]
}
 800c678:	bf00      	nop
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bc80      	pop	{r7}
 800c67e:	4770      	bx	lr
 800c680:	200000b4 	.word	0x200000b4
 800c684:	20000830 	.word	0x20000830

0800c688 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c688:	b480      	push	{r7}
 800c68a:	af00      	add	r7, sp, #0
  return uwTick;
 800c68c:	4b02      	ldr	r3, [pc, #8]	; (800c698 <HAL_GetTick+0x10>)
 800c68e:	681b      	ldr	r3, [r3, #0]
}
 800c690:	4618      	mov	r0, r3
 800c692:	46bd      	mov	sp, r7
 800c694:	bc80      	pop	{r7}
 800c696:	4770      	bx	lr
 800c698:	20000830 	.word	0x20000830

0800c69c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b084      	sub	sp, #16
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c6a4:	f7ff fff0 	bl	800c688 <HAL_GetTick>
 800c6a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6b4:	d005      	beq.n	800c6c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800c6b6:	4b09      	ldr	r3, [pc, #36]	; (800c6dc <HAL_Delay+0x40>)
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	4413      	add	r3, r2
 800c6c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800c6c2:	bf00      	nop
 800c6c4:	f7ff ffe0 	bl	800c688 <HAL_GetTick>
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	1ad3      	subs	r3, r2, r3
 800c6ce:	68fa      	ldr	r2, [r7, #12]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d8f7      	bhi.n	800c6c4 <HAL_Delay+0x28>
  {
  }
}
 800c6d4:	bf00      	nop
 800c6d6:	3710      	adds	r7, #16
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}
 800c6dc:	200000b4 	.word	0x200000b4

0800c6e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b086      	sub	sp, #24
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d101      	bne.n	800c702 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800c6fe:	2301      	movs	r3, #1
 800c700:	e153      	b.n	800c9aa <HAL_ADC_Init+0x2ca>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	4a9f      	ldr	r2, [pc, #636]	; (800c984 <HAL_ADC_Init+0x2a4>)
 800c708:	4293      	cmp	r3, r2
 800c70a:	d009      	beq.n	800c720 <HAL_ADC_Init+0x40>
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	4a9d      	ldr	r2, [pc, #628]	; (800c988 <HAL_ADC_Init+0x2a8>)
 800c712:	4293      	cmp	r3, r2
 800c714:	d004      	beq.n	800c720 <HAL_ADC_Init+0x40>
 800c716:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c71a:	489c      	ldr	r0, [pc, #624]	; (800c98c <HAL_ADC_Init+0x2ac>)
 800c71c:	f7ff fb4c 	bl	800bdb8 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	685b      	ldr	r3, [r3, #4]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d009      	beq.n	800c73c <HAL_ADC_Init+0x5c>
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	685b      	ldr	r3, [r3, #4]
 800c72c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c730:	d004      	beq.n	800c73c <HAL_ADC_Init+0x5c>
 800c732:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800c736:	4895      	ldr	r0, [pc, #596]	; (800c98c <HAL_ADC_Init+0x2ac>)
 800c738:	f7ff fb3e 	bl	800bdb8 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	689b      	ldr	r3, [r3, #8]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d009      	beq.n	800c758 <HAL_ADC_Init+0x78>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	689b      	ldr	r3, [r3, #8]
 800c748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c74c:	d004      	beq.n	800c758 <HAL_ADC_Init+0x78>
 800c74e:	f240 11b5 	movw	r1, #437	; 0x1b5
 800c752:	488e      	ldr	r0, [pc, #568]	; (800c98c <HAL_ADC_Init+0x2ac>)
 800c754:	f7ff fb30 	bl	800bdb8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	7b1b      	ldrb	r3, [r3, #12]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d008      	beq.n	800c772 <HAL_ADC_Init+0x92>
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	7b1b      	ldrb	r3, [r3, #12]
 800c764:	2b01      	cmp	r3, #1
 800c766:	d004      	beq.n	800c772 <HAL_ADC_Init+0x92>
 800c768:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 800c76c:	4887      	ldr	r0, [pc, #540]	; (800c98c <HAL_ADC_Init+0x2ac>)
 800c76e:	f7ff fb23 	bl	800bdb8 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	69db      	ldr	r3, [r3, #28]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d022      	beq.n	800c7c0 <HAL_ADC_Init+0xe0>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	69db      	ldr	r3, [r3, #28]
 800c77e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c782:	d01d      	beq.n	800c7c0 <HAL_ADC_Init+0xe0>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	69db      	ldr	r3, [r3, #28]
 800c788:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c78c:	d018      	beq.n	800c7c0 <HAL_ADC_Init+0xe0>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	69db      	ldr	r3, [r3, #28]
 800c792:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c796:	d013      	beq.n	800c7c0 <HAL_ADC_Init+0xe0>
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	69db      	ldr	r3, [r3, #28]
 800c79c:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 800c7a0:	d00e      	beq.n	800c7c0 <HAL_ADC_Init+0xe0>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	69db      	ldr	r3, [r3, #28]
 800c7a6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c7aa:	d009      	beq.n	800c7c0 <HAL_ADC_Init+0xe0>
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	69db      	ldr	r3, [r3, #28]
 800c7b0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800c7b4:	d004      	beq.n	800c7c0 <HAL_ADC_Init+0xe0>
 800c7b6:	f240 11b7 	movw	r1, #439	; 0x1b7
 800c7ba:	4874      	ldr	r0, [pc, #464]	; (800c98c <HAL_ADC_Init+0x2ac>)
 800c7bc:	f7ff fafc 	bl	800bdb8 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	689b      	ldr	r3, [r3, #8]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d02a      	beq.n	800c81e <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	691b      	ldr	r3, [r3, #16]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d003      	beq.n	800c7d8 <HAL_ADC_Init+0xf8>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	691b      	ldr	r3, [r3, #16]
 800c7d4:	2b10      	cmp	r3, #16
 800c7d6:	d904      	bls.n	800c7e2 <HAL_ADC_Init+0x102>
 800c7d8:	f240 11bb 	movw	r1, #443	; 0x1bb
 800c7dc:	486b      	ldr	r0, [pc, #428]	; (800c98c <HAL_ADC_Init+0x2ac>)
 800c7de:	f7ff faeb 	bl	800bdb8 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	7d1b      	ldrb	r3, [r3, #20]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d008      	beq.n	800c7fc <HAL_ADC_Init+0x11c>
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	7d1b      	ldrb	r3, [r3, #20]
 800c7ee:	2b01      	cmp	r3, #1
 800c7f0:	d004      	beq.n	800c7fc <HAL_ADC_Init+0x11c>
 800c7f2:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800c7f6:	4865      	ldr	r0, [pc, #404]	; (800c98c <HAL_ADC_Init+0x2ac>)
 800c7f8:	f7ff fade 	bl	800bdb8 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	7d1b      	ldrb	r3, [r3, #20]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d00c      	beq.n	800c81e <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	699b      	ldr	r3, [r3, #24]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d003      	beq.n	800c814 <HAL_ADC_Init+0x134>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	699b      	ldr	r3, [r3, #24]
 800c810:	2b08      	cmp	r3, #8
 800c812:	d904      	bls.n	800c81e <HAL_ADC_Init+0x13e>
 800c814:	f240 11bf 	movw	r1, #447	; 0x1bf
 800c818:	485c      	ldr	r0, [pc, #368]	; (800c98c <HAL_ADC_Init+0x2ac>)
 800c81a:	f7ff facd 	bl	800bdb8 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c822:	2b00      	cmp	r3, #0
 800c824:	d109      	bne.n	800c83a <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2200      	movs	r2, #0
 800c82a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2200      	movs	r2, #0
 800c830:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f7ff f8e7 	bl	800ba08 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f000 fa7e 	bl	800cd3c <ADC_ConversionStop_Disable>
 800c840:	4603      	mov	r3, r0
 800c842:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c848:	f003 0310 	and.w	r3, r3, #16
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	f040 80a3 	bne.w	800c998 <HAL_ADC_Init+0x2b8>
 800c852:	7dfb      	ldrb	r3, [r7, #23]
 800c854:	2b00      	cmp	r3, #0
 800c856:	f040 809f 	bne.w	800c998 <HAL_ADC_Init+0x2b8>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c85e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800c862:	f023 0302 	bic.w	r3, r3, #2
 800c866:	f043 0202 	orr.w	r2, r3, #2
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800c876:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	7b1b      	ldrb	r3, [r3, #12]
 800c87c:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800c87e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800c880:	68ba      	ldr	r2, [r7, #8]
 800c882:	4313      	orrs	r3, r2
 800c884:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	689b      	ldr	r3, [r3, #8]
 800c88a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c88e:	d003      	beq.n	800c898 <HAL_ADC_Init+0x1b8>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	689b      	ldr	r3, [r3, #8]
 800c894:	2b01      	cmp	r3, #1
 800c896:	d102      	bne.n	800c89e <HAL_ADC_Init+0x1be>
 800c898:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c89c:	e000      	b.n	800c8a0 <HAL_ADC_Init+0x1c0>
 800c89e:	2300      	movs	r3, #0
 800c8a0:	693a      	ldr	r2, [r7, #16]
 800c8a2:	4313      	orrs	r3, r2
 800c8a4:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	7d1b      	ldrb	r3, [r3, #20]
 800c8aa:	2b01      	cmp	r3, #1
 800c8ac:	d119      	bne.n	800c8e2 <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	7b1b      	ldrb	r3, [r3, #12]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d109      	bne.n	800c8ca <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	699b      	ldr	r3, [r3, #24]
 800c8ba:	3b01      	subs	r3, #1
 800c8bc:	035a      	lsls	r2, r3, #13
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	4313      	orrs	r3, r2
 800c8c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c8c6:	613b      	str	r3, [r7, #16]
 800c8c8:	e00b      	b.n	800c8e2 <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ce:	f043 0220 	orr.w	r2, r3, #32
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8da:	f043 0201 	orr.w	r2, r3, #1
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	693a      	ldr	r2, [r7, #16]
 800c8f2:	430a      	orrs	r2, r1
 800c8f4:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	689a      	ldr	r2, [r3, #8]
 800c8fc:	4b24      	ldr	r3, [pc, #144]	; (800c990 <HAL_ADC_Init+0x2b0>)
 800c8fe:	4013      	ands	r3, r2
 800c900:	687a      	ldr	r2, [r7, #4]
 800c902:	6812      	ldr	r2, [r2, #0]
 800c904:	68b9      	ldr	r1, [r7, #8]
 800c906:	430b      	orrs	r3, r1
 800c908:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	689b      	ldr	r3, [r3, #8]
 800c90e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c912:	d003      	beq.n	800c91c <HAL_ADC_Init+0x23c>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	689b      	ldr	r3, [r3, #8]
 800c918:	2b01      	cmp	r3, #1
 800c91a:	d104      	bne.n	800c926 <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	691b      	ldr	r3, [r3, #16]
 800c920:	3b01      	subs	r3, #1
 800c922:	051b      	lsls	r3, r3, #20
 800c924:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c92c:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	68fa      	ldr	r2, [r7, #12]
 800c936:	430a      	orrs	r2, r1
 800c938:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	689a      	ldr	r2, [r3, #8]
 800c940:	4b14      	ldr	r3, [pc, #80]	; (800c994 <HAL_ADC_Init+0x2b4>)
 800c942:	4013      	ands	r3, r2
 800c944:	68ba      	ldr	r2, [r7, #8]
 800c946:	429a      	cmp	r2, r3
 800c948:	d10b      	bne.n	800c962 <HAL_ADC_Init+0x282>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2200      	movs	r2, #0
 800c94e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c954:	f023 0303 	bic.w	r3, r3, #3
 800c958:	f043 0201 	orr.w	r2, r3, #1
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800c960:	e022      	b.n	800c9a8 <HAL_ADC_Init+0x2c8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c966:	f023 0312 	bic.w	r3, r3, #18
 800c96a:	f043 0210 	orr.w	r2, r3, #16
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c976:	f043 0201 	orr.w	r2, r3, #1
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800c97e:	2301      	movs	r3, #1
 800c980:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800c982:	e011      	b.n	800c9a8 <HAL_ADC_Init+0x2c8>
 800c984:	40012400 	.word	0x40012400
 800c988:	40012800 	.word	0x40012800
 800c98c:	08012c44 	.word	0x08012c44
 800c990:	ffe1f7fd 	.word	0xffe1f7fd
 800c994:	ff1f0efe 	.word	0xff1f0efe
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c99c:	f043 0210 	orr.w	r2, r3, #16
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800c9a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3718      	adds	r7, #24
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}
 800c9b2:	bf00      	nop

0800c9b4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b084      	sub	sp, #16
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
 800c9bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	4a88      	ldr	r2, [pc, #544]	; (800cbec <HAL_ADC_ConfigChannel+0x238>)
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d009      	beq.n	800c9e4 <HAL_ADC_ConfigChannel+0x30>
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4a86      	ldr	r2, [pc, #536]	; (800cbf0 <HAL_ADC_ConfigChannel+0x23c>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d004      	beq.n	800c9e4 <HAL_ADC_ConfigChannel+0x30>
 800c9da:	f240 71ce 	movw	r1, #1998	; 0x7ce
 800c9de:	4885      	ldr	r0, [pc, #532]	; (800cbf4 <HAL_ADC_ConfigChannel+0x240>)
 800c9e0:	f7ff f9ea 	bl	800bdb8 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d048      	beq.n	800ca7e <HAL_ADC_ConfigChannel+0xca>
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	2b01      	cmp	r3, #1
 800c9f2:	d044      	beq.n	800ca7e <HAL_ADC_ConfigChannel+0xca>
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	2b02      	cmp	r3, #2
 800c9fa:	d040      	beq.n	800ca7e <HAL_ADC_ConfigChannel+0xca>
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	2b03      	cmp	r3, #3
 800ca02:	d03c      	beq.n	800ca7e <HAL_ADC_ConfigChannel+0xca>
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	2b04      	cmp	r3, #4
 800ca0a:	d038      	beq.n	800ca7e <HAL_ADC_ConfigChannel+0xca>
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	2b05      	cmp	r3, #5
 800ca12:	d034      	beq.n	800ca7e <HAL_ADC_ConfigChannel+0xca>
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	2b06      	cmp	r3, #6
 800ca1a:	d030      	beq.n	800ca7e <HAL_ADC_ConfigChannel+0xca>
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	2b07      	cmp	r3, #7
 800ca22:	d02c      	beq.n	800ca7e <HAL_ADC_ConfigChannel+0xca>
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	2b08      	cmp	r3, #8
 800ca2a:	d028      	beq.n	800ca7e <HAL_ADC_ConfigChannel+0xca>
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	2b09      	cmp	r3, #9
 800ca32:	d024      	beq.n	800ca7e <HAL_ADC_ConfigChannel+0xca>
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	2b0a      	cmp	r3, #10
 800ca3a:	d020      	beq.n	800ca7e <HAL_ADC_ConfigChannel+0xca>
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	2b0b      	cmp	r3, #11
 800ca42:	d01c      	beq.n	800ca7e <HAL_ADC_ConfigChannel+0xca>
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	2b0c      	cmp	r3, #12
 800ca4a:	d018      	beq.n	800ca7e <HAL_ADC_ConfigChannel+0xca>
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	2b0d      	cmp	r3, #13
 800ca52:	d014      	beq.n	800ca7e <HAL_ADC_ConfigChannel+0xca>
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	2b0e      	cmp	r3, #14
 800ca5a:	d010      	beq.n	800ca7e <HAL_ADC_ConfigChannel+0xca>
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	2b0f      	cmp	r3, #15
 800ca62:	d00c      	beq.n	800ca7e <HAL_ADC_ConfigChannel+0xca>
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	2b10      	cmp	r3, #16
 800ca6a:	d008      	beq.n	800ca7e <HAL_ADC_ConfigChannel+0xca>
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	2b11      	cmp	r3, #17
 800ca72:	d004      	beq.n	800ca7e <HAL_ADC_ConfigChannel+0xca>
 800ca74:	f240 71cf 	movw	r1, #1999	; 0x7cf
 800ca78:	485e      	ldr	r0, [pc, #376]	; (800cbf4 <HAL_ADC_ConfigChannel+0x240>)
 800ca7a:	f7ff f99d 	bl	800bdb8 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	685b      	ldr	r3, [r3, #4]
 800ca82:	2b01      	cmp	r3, #1
 800ca84:	d040      	beq.n	800cb08 <HAL_ADC_ConfigChannel+0x154>
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	685b      	ldr	r3, [r3, #4]
 800ca8a:	2b02      	cmp	r3, #2
 800ca8c:	d03c      	beq.n	800cb08 <HAL_ADC_ConfigChannel+0x154>
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	2b03      	cmp	r3, #3
 800ca94:	d038      	beq.n	800cb08 <HAL_ADC_ConfigChannel+0x154>
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	685b      	ldr	r3, [r3, #4]
 800ca9a:	2b04      	cmp	r3, #4
 800ca9c:	d034      	beq.n	800cb08 <HAL_ADC_ConfigChannel+0x154>
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	685b      	ldr	r3, [r3, #4]
 800caa2:	2b05      	cmp	r3, #5
 800caa4:	d030      	beq.n	800cb08 <HAL_ADC_ConfigChannel+0x154>
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	685b      	ldr	r3, [r3, #4]
 800caaa:	2b06      	cmp	r3, #6
 800caac:	d02c      	beq.n	800cb08 <HAL_ADC_ConfigChannel+0x154>
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	685b      	ldr	r3, [r3, #4]
 800cab2:	2b07      	cmp	r3, #7
 800cab4:	d028      	beq.n	800cb08 <HAL_ADC_ConfigChannel+0x154>
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	685b      	ldr	r3, [r3, #4]
 800caba:	2b08      	cmp	r3, #8
 800cabc:	d024      	beq.n	800cb08 <HAL_ADC_ConfigChannel+0x154>
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	685b      	ldr	r3, [r3, #4]
 800cac2:	2b09      	cmp	r3, #9
 800cac4:	d020      	beq.n	800cb08 <HAL_ADC_ConfigChannel+0x154>
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	685b      	ldr	r3, [r3, #4]
 800caca:	2b0a      	cmp	r3, #10
 800cacc:	d01c      	beq.n	800cb08 <HAL_ADC_ConfigChannel+0x154>
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	2b0b      	cmp	r3, #11
 800cad4:	d018      	beq.n	800cb08 <HAL_ADC_ConfigChannel+0x154>
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	685b      	ldr	r3, [r3, #4]
 800cada:	2b0c      	cmp	r3, #12
 800cadc:	d014      	beq.n	800cb08 <HAL_ADC_ConfigChannel+0x154>
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	2b0d      	cmp	r3, #13
 800cae4:	d010      	beq.n	800cb08 <HAL_ADC_ConfigChannel+0x154>
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	685b      	ldr	r3, [r3, #4]
 800caea:	2b0e      	cmp	r3, #14
 800caec:	d00c      	beq.n	800cb08 <HAL_ADC_ConfigChannel+0x154>
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	685b      	ldr	r3, [r3, #4]
 800caf2:	2b0f      	cmp	r3, #15
 800caf4:	d008      	beq.n	800cb08 <HAL_ADC_ConfigChannel+0x154>
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	2b10      	cmp	r3, #16
 800cafc:	d004      	beq.n	800cb08 <HAL_ADC_ConfigChannel+0x154>
 800cafe:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800cb02:	483c      	ldr	r0, [pc, #240]	; (800cbf4 <HAL_ADC_ConfigChannel+0x240>)
 800cb04:	f7ff f958 	bl	800bdb8 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	689b      	ldr	r3, [r3, #8]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d020      	beq.n	800cb52 <HAL_ADC_ConfigChannel+0x19e>
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	689b      	ldr	r3, [r3, #8]
 800cb14:	2b01      	cmp	r3, #1
 800cb16:	d01c      	beq.n	800cb52 <HAL_ADC_ConfigChannel+0x19e>
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	689b      	ldr	r3, [r3, #8]
 800cb1c:	2b02      	cmp	r3, #2
 800cb1e:	d018      	beq.n	800cb52 <HAL_ADC_ConfigChannel+0x19e>
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	689b      	ldr	r3, [r3, #8]
 800cb24:	2b03      	cmp	r3, #3
 800cb26:	d014      	beq.n	800cb52 <HAL_ADC_ConfigChannel+0x19e>
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	689b      	ldr	r3, [r3, #8]
 800cb2c:	2b04      	cmp	r3, #4
 800cb2e:	d010      	beq.n	800cb52 <HAL_ADC_ConfigChannel+0x19e>
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	689b      	ldr	r3, [r3, #8]
 800cb34:	2b05      	cmp	r3, #5
 800cb36:	d00c      	beq.n	800cb52 <HAL_ADC_ConfigChannel+0x19e>
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	689b      	ldr	r3, [r3, #8]
 800cb3c:	2b06      	cmp	r3, #6
 800cb3e:	d008      	beq.n	800cb52 <HAL_ADC_ConfigChannel+0x19e>
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	689b      	ldr	r3, [r3, #8]
 800cb44:	2b07      	cmp	r3, #7
 800cb46:	d004      	beq.n	800cb52 <HAL_ADC_ConfigChannel+0x19e>
 800cb48:	f240 71d1 	movw	r1, #2001	; 0x7d1
 800cb4c:	4829      	ldr	r0, [pc, #164]	; (800cbf4 <HAL_ADC_ConfigChannel+0x240>)
 800cb4e:	f7ff f933 	bl	800bdb8 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cb58:	2b01      	cmp	r3, #1
 800cb5a:	d101      	bne.n	800cb60 <HAL_ADC_ConfigChannel+0x1ac>
 800cb5c:	2302      	movs	r3, #2
 800cb5e:	e0e2      	b.n	800cd26 <HAL_ADC_ConfigChannel+0x372>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2201      	movs	r2, #1
 800cb64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	685b      	ldr	r3, [r3, #4]
 800cb6c:	2b06      	cmp	r3, #6
 800cb6e:	d81c      	bhi.n	800cbaa <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	685a      	ldr	r2, [r3, #4]
 800cb7a:	4613      	mov	r3, r2
 800cb7c:	009b      	lsls	r3, r3, #2
 800cb7e:	4413      	add	r3, r2
 800cb80:	3b05      	subs	r3, #5
 800cb82:	221f      	movs	r2, #31
 800cb84:	fa02 f303 	lsl.w	r3, r2, r3
 800cb88:	43db      	mvns	r3, r3
 800cb8a:	4019      	ands	r1, r3
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	6818      	ldr	r0, [r3, #0]
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	685a      	ldr	r2, [r3, #4]
 800cb94:	4613      	mov	r3, r2
 800cb96:	009b      	lsls	r3, r3, #2
 800cb98:	4413      	add	r3, r2
 800cb9a:	3b05      	subs	r3, #5
 800cb9c:	fa00 f203 	lsl.w	r2, r0, r3
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	430a      	orrs	r2, r1
 800cba6:	635a      	str	r2, [r3, #52]	; 0x34
 800cba8:	e042      	b.n	800cc30 <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	2b0c      	cmp	r3, #12
 800cbb0:	d822      	bhi.n	800cbf8 <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	685a      	ldr	r2, [r3, #4]
 800cbbc:	4613      	mov	r3, r2
 800cbbe:	009b      	lsls	r3, r3, #2
 800cbc0:	4413      	add	r3, r2
 800cbc2:	3b23      	subs	r3, #35	; 0x23
 800cbc4:	221f      	movs	r2, #31
 800cbc6:	fa02 f303 	lsl.w	r3, r2, r3
 800cbca:	43db      	mvns	r3, r3
 800cbcc:	4019      	ands	r1, r3
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	6818      	ldr	r0, [r3, #0]
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	685a      	ldr	r2, [r3, #4]
 800cbd6:	4613      	mov	r3, r2
 800cbd8:	009b      	lsls	r3, r3, #2
 800cbda:	4413      	add	r3, r2
 800cbdc:	3b23      	subs	r3, #35	; 0x23
 800cbde:	fa00 f203 	lsl.w	r2, r0, r3
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	430a      	orrs	r2, r1
 800cbe8:	631a      	str	r2, [r3, #48]	; 0x30
 800cbea:	e021      	b.n	800cc30 <HAL_ADC_ConfigChannel+0x27c>
 800cbec:	40012400 	.word	0x40012400
 800cbf0:	40012800 	.word	0x40012800
 800cbf4:	08012c44 	.word	0x08012c44
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	685a      	ldr	r2, [r3, #4]
 800cc02:	4613      	mov	r3, r2
 800cc04:	009b      	lsls	r3, r3, #2
 800cc06:	4413      	add	r3, r2
 800cc08:	3b41      	subs	r3, #65	; 0x41
 800cc0a:	221f      	movs	r2, #31
 800cc0c:	fa02 f303 	lsl.w	r3, r2, r3
 800cc10:	43db      	mvns	r3, r3
 800cc12:	4019      	ands	r1, r3
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	6818      	ldr	r0, [r3, #0]
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	685a      	ldr	r2, [r3, #4]
 800cc1c:	4613      	mov	r3, r2
 800cc1e:	009b      	lsls	r3, r3, #2
 800cc20:	4413      	add	r3, r2
 800cc22:	3b41      	subs	r3, #65	; 0x41
 800cc24:	fa00 f203 	lsl.w	r2, r0, r3
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	430a      	orrs	r2, r1
 800cc2e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	2b09      	cmp	r3, #9
 800cc36:	d91c      	bls.n	800cc72 <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	68d9      	ldr	r1, [r3, #12]
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	681a      	ldr	r2, [r3, #0]
 800cc42:	4613      	mov	r3, r2
 800cc44:	005b      	lsls	r3, r3, #1
 800cc46:	4413      	add	r3, r2
 800cc48:	3b1e      	subs	r3, #30
 800cc4a:	2207      	movs	r2, #7
 800cc4c:	fa02 f303 	lsl.w	r3, r2, r3
 800cc50:	43db      	mvns	r3, r3
 800cc52:	4019      	ands	r1, r3
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	6898      	ldr	r0, [r3, #8]
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	681a      	ldr	r2, [r3, #0]
 800cc5c:	4613      	mov	r3, r2
 800cc5e:	005b      	lsls	r3, r3, #1
 800cc60:	4413      	add	r3, r2
 800cc62:	3b1e      	subs	r3, #30
 800cc64:	fa00 f203 	lsl.w	r2, r0, r3
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	430a      	orrs	r2, r1
 800cc6e:	60da      	str	r2, [r3, #12]
 800cc70:	e019      	b.n	800cca6 <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	6919      	ldr	r1, [r3, #16]
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	681a      	ldr	r2, [r3, #0]
 800cc7c:	4613      	mov	r3, r2
 800cc7e:	005b      	lsls	r3, r3, #1
 800cc80:	4413      	add	r3, r2
 800cc82:	2207      	movs	r2, #7
 800cc84:	fa02 f303 	lsl.w	r3, r2, r3
 800cc88:	43db      	mvns	r3, r3
 800cc8a:	4019      	ands	r1, r3
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	6898      	ldr	r0, [r3, #8]
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	681a      	ldr	r2, [r3, #0]
 800cc94:	4613      	mov	r3, r2
 800cc96:	005b      	lsls	r3, r3, #1
 800cc98:	4413      	add	r3, r2
 800cc9a:	fa00 f203 	lsl.w	r2, r0, r3
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	430a      	orrs	r2, r1
 800cca4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	2b10      	cmp	r3, #16
 800ccac:	d003      	beq.n	800ccb6 <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800ccb2:	2b11      	cmp	r3, #17
 800ccb4:	d132      	bne.n	800cd1c <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	4a1d      	ldr	r2, [pc, #116]	; (800cd30 <HAL_ADC_ConfigChannel+0x37c>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d125      	bne.n	800cd0c <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	689b      	ldr	r3, [r3, #8]
 800ccc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d126      	bne.n	800cd1c <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	689a      	ldr	r2, [r3, #8]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800ccdc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	2b10      	cmp	r3, #16
 800cce4:	d11a      	bne.n	800cd1c <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800cce6:	4b13      	ldr	r3, [pc, #76]	; (800cd34 <HAL_ADC_ConfigChannel+0x380>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	4a13      	ldr	r2, [pc, #76]	; (800cd38 <HAL_ADC_ConfigChannel+0x384>)
 800ccec:	fba2 2303 	umull	r2, r3, r2, r3
 800ccf0:	0c9a      	lsrs	r2, r3, #18
 800ccf2:	4613      	mov	r3, r2
 800ccf4:	009b      	lsls	r3, r3, #2
 800ccf6:	4413      	add	r3, r2
 800ccf8:	005b      	lsls	r3, r3, #1
 800ccfa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800ccfc:	e002      	b.n	800cd04 <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	3b01      	subs	r3, #1
 800cd02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d1f9      	bne.n	800ccfe <HAL_ADC_ConfigChannel+0x34a>
 800cd0a:	e007      	b.n	800cd1c <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd10:	f043 0220 	orr.w	r2, r3, #32
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800cd18:	2301      	movs	r3, #1
 800cd1a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800cd24:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3710      	adds	r7, #16
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	40012400 	.word	0x40012400
 800cd34:	200000ac 	.word	0x200000ac
 800cd38:	431bde83 	.word	0x431bde83

0800cd3c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b084      	sub	sp, #16
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cd44:	2300      	movs	r3, #0
 800cd46:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	689b      	ldr	r3, [r3, #8]
 800cd4e:	f003 0301 	and.w	r3, r3, #1
 800cd52:	2b01      	cmp	r3, #1
 800cd54:	d127      	bne.n	800cda6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	689a      	ldr	r2, [r3, #8]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f022 0201 	bic.w	r2, r2, #1
 800cd64:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800cd66:	f7ff fc8f 	bl	800c688 <HAL_GetTick>
 800cd6a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800cd6c:	e014      	b.n	800cd98 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800cd6e:	f7ff fc8b 	bl	800c688 <HAL_GetTick>
 800cd72:	4602      	mov	r2, r0
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	1ad3      	subs	r3, r2, r3
 800cd78:	2b02      	cmp	r3, #2
 800cd7a:	d90d      	bls.n	800cd98 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd80:	f043 0210 	orr.w	r2, r3, #16
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd8c:	f043 0201 	orr.w	r2, r3, #1
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800cd94:	2301      	movs	r3, #1
 800cd96:	e007      	b.n	800cda8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	689b      	ldr	r3, [r3, #8]
 800cd9e:	f003 0301 	and.w	r3, r3, #1
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	d0e3      	beq.n	800cd6e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800cda6:	2300      	movs	r3, #0
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3710      	adds	r7, #16
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	b085      	sub	sp, #20
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f003 0307 	and.w	r3, r3, #7
 800cdbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800cdc0:	4b0c      	ldr	r3, [pc, #48]	; (800cdf4 <__NVIC_SetPriorityGrouping+0x44>)
 800cdc2:	68db      	ldr	r3, [r3, #12]
 800cdc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800cdc6:	68ba      	ldr	r2, [r7, #8]
 800cdc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800cdcc:	4013      	ands	r3, r2
 800cdce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800cdd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800cddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cde0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800cde2:	4a04      	ldr	r2, [pc, #16]	; (800cdf4 <__NVIC_SetPriorityGrouping+0x44>)
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	60d3      	str	r3, [r2, #12]
}
 800cde8:	bf00      	nop
 800cdea:	3714      	adds	r7, #20
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bc80      	pop	{r7}
 800cdf0:	4770      	bx	lr
 800cdf2:	bf00      	nop
 800cdf4:	e000ed00 	.word	0xe000ed00

0800cdf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800cdfc:	4b04      	ldr	r3, [pc, #16]	; (800ce10 <__NVIC_GetPriorityGrouping+0x18>)
 800cdfe:	68db      	ldr	r3, [r3, #12]
 800ce00:	0a1b      	lsrs	r3, r3, #8
 800ce02:	f003 0307 	and.w	r3, r3, #7
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bc80      	pop	{r7}
 800ce0c:	4770      	bx	lr
 800ce0e:	bf00      	nop
 800ce10:	e000ed00 	.word	0xe000ed00

0800ce14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ce14:	b480      	push	{r7}
 800ce16:	b083      	sub	sp, #12
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ce1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	db0b      	blt.n	800ce3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ce26:	79fb      	ldrb	r3, [r7, #7]
 800ce28:	f003 021f 	and.w	r2, r3, #31
 800ce2c:	4906      	ldr	r1, [pc, #24]	; (800ce48 <__NVIC_EnableIRQ+0x34>)
 800ce2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce32:	095b      	lsrs	r3, r3, #5
 800ce34:	2001      	movs	r0, #1
 800ce36:	fa00 f202 	lsl.w	r2, r0, r2
 800ce3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800ce3e:	bf00      	nop
 800ce40:	370c      	adds	r7, #12
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bc80      	pop	{r7}
 800ce46:	4770      	bx	lr
 800ce48:	e000e100 	.word	0xe000e100

0800ce4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	b083      	sub	sp, #12
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	4603      	mov	r3, r0
 800ce54:	6039      	str	r1, [r7, #0]
 800ce56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ce58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	db0a      	blt.n	800ce76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	b2da      	uxtb	r2, r3
 800ce64:	490c      	ldr	r1, [pc, #48]	; (800ce98 <__NVIC_SetPriority+0x4c>)
 800ce66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce6a:	0112      	lsls	r2, r2, #4
 800ce6c:	b2d2      	uxtb	r2, r2
 800ce6e:	440b      	add	r3, r1
 800ce70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800ce74:	e00a      	b.n	800ce8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	b2da      	uxtb	r2, r3
 800ce7a:	4908      	ldr	r1, [pc, #32]	; (800ce9c <__NVIC_SetPriority+0x50>)
 800ce7c:	79fb      	ldrb	r3, [r7, #7]
 800ce7e:	f003 030f 	and.w	r3, r3, #15
 800ce82:	3b04      	subs	r3, #4
 800ce84:	0112      	lsls	r2, r2, #4
 800ce86:	b2d2      	uxtb	r2, r2
 800ce88:	440b      	add	r3, r1
 800ce8a:	761a      	strb	r2, [r3, #24]
}
 800ce8c:	bf00      	nop
 800ce8e:	370c      	adds	r7, #12
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bc80      	pop	{r7}
 800ce94:	4770      	bx	lr
 800ce96:	bf00      	nop
 800ce98:	e000e100 	.word	0xe000e100
 800ce9c:	e000ed00 	.word	0xe000ed00

0800cea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800cea0:	b480      	push	{r7}
 800cea2:	b089      	sub	sp, #36	; 0x24
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	60f8      	str	r0, [r7, #12]
 800cea8:	60b9      	str	r1, [r7, #8]
 800ceaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	f003 0307 	and.w	r3, r3, #7
 800ceb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ceb4:	69fb      	ldr	r3, [r7, #28]
 800ceb6:	f1c3 0307 	rsb	r3, r3, #7
 800ceba:	2b04      	cmp	r3, #4
 800cebc:	bf28      	it	cs
 800cebe:	2304      	movcs	r3, #4
 800cec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800cec2:	69fb      	ldr	r3, [r7, #28]
 800cec4:	3304      	adds	r3, #4
 800cec6:	2b06      	cmp	r3, #6
 800cec8:	d902      	bls.n	800ced0 <NVIC_EncodePriority+0x30>
 800ceca:	69fb      	ldr	r3, [r7, #28]
 800cecc:	3b03      	subs	r3, #3
 800cece:	e000      	b.n	800ced2 <NVIC_EncodePriority+0x32>
 800ced0:	2300      	movs	r3, #0
 800ced2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ced4:	f04f 32ff 	mov.w	r2, #4294967295
 800ced8:	69bb      	ldr	r3, [r7, #24]
 800ceda:	fa02 f303 	lsl.w	r3, r2, r3
 800cede:	43da      	mvns	r2, r3
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	401a      	ands	r2, r3
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800cee8:	f04f 31ff 	mov.w	r1, #4294967295
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	fa01 f303 	lsl.w	r3, r1, r3
 800cef2:	43d9      	mvns	r1, r3
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cef8:	4313      	orrs	r3, r2
         );
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3724      	adds	r7, #36	; 0x24
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bc80      	pop	{r7}
 800cf02:	4770      	bx	lr

0800cf04 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800cf04:	b480      	push	{r7}
 800cf06:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800cf08:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800cf0c:	4b05      	ldr	r3, [pc, #20]	; (800cf24 <__NVIC_SystemReset+0x20>)
 800cf0e:	68db      	ldr	r3, [r3, #12]
 800cf10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800cf14:	4903      	ldr	r1, [pc, #12]	; (800cf24 <__NVIC_SystemReset+0x20>)
 800cf16:	4b04      	ldr	r3, [pc, #16]	; (800cf28 <__NVIC_SystemReset+0x24>)
 800cf18:	4313      	orrs	r3, r2
 800cf1a:	60cb      	str	r3, [r1, #12]
 800cf1c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800cf20:	bf00      	nop
 800cf22:	e7fd      	b.n	800cf20 <__NVIC_SystemReset+0x1c>
 800cf24:	e000ed00 	.word	0xe000ed00
 800cf28:	05fa0004 	.word	0x05fa0004

0800cf2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b082      	sub	sp, #8
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	3b01      	subs	r3, #1
 800cf38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cf3c:	d301      	bcc.n	800cf42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800cf3e:	2301      	movs	r3, #1
 800cf40:	e00f      	b.n	800cf62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800cf42:	4a0a      	ldr	r2, [pc, #40]	; (800cf6c <SysTick_Config+0x40>)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	3b01      	subs	r3, #1
 800cf48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800cf4a:	210f      	movs	r1, #15
 800cf4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf50:	f7ff ff7c 	bl	800ce4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800cf54:	4b05      	ldr	r3, [pc, #20]	; (800cf6c <SysTick_Config+0x40>)
 800cf56:	2200      	movs	r2, #0
 800cf58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800cf5a:	4b04      	ldr	r3, [pc, #16]	; (800cf6c <SysTick_Config+0x40>)
 800cf5c:	2207      	movs	r2, #7
 800cf5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800cf60:	2300      	movs	r3, #0
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3708      	adds	r7, #8
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}
 800cf6a:	bf00      	nop
 800cf6c:	e000e010 	.word	0xe000e010

0800cf70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b082      	sub	sp, #8
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2b07      	cmp	r3, #7
 800cf7c:	d00f      	beq.n	800cf9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2b06      	cmp	r3, #6
 800cf82:	d00c      	beq.n	800cf9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2b05      	cmp	r3, #5
 800cf88:	d009      	beq.n	800cf9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2b04      	cmp	r3, #4
 800cf8e:	d006      	beq.n	800cf9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2b03      	cmp	r3, #3
 800cf94:	d003      	beq.n	800cf9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800cf96:	2192      	movs	r1, #146	; 0x92
 800cf98:	4804      	ldr	r0, [pc, #16]	; (800cfac <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800cf9a:	f7fe ff0d 	bl	800bdb8 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f7ff ff06 	bl	800cdb0 <__NVIC_SetPriorityGrouping>
}
 800cfa4:	bf00      	nop
 800cfa6:	3708      	adds	r7, #8
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd80      	pop	{r7, pc}
 800cfac:	08012c7c 	.word	0x08012c7c

0800cfb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b086      	sub	sp, #24
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	60b9      	str	r1, [r7, #8]
 800cfba:	607a      	str	r2, [r7, #4]
 800cfbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2b0f      	cmp	r3, #15
 800cfc6:	d903      	bls.n	800cfd0 <HAL_NVIC_SetPriority+0x20>
 800cfc8:	21aa      	movs	r1, #170	; 0xaa
 800cfca:	480e      	ldr	r0, [pc, #56]	; (800d004 <HAL_NVIC_SetPriority+0x54>)
 800cfcc:	f7fe fef4 	bl	800bdb8 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	2b0f      	cmp	r3, #15
 800cfd4:	d903      	bls.n	800cfde <HAL_NVIC_SetPriority+0x2e>
 800cfd6:	21ab      	movs	r1, #171	; 0xab
 800cfd8:	480a      	ldr	r0, [pc, #40]	; (800d004 <HAL_NVIC_SetPriority+0x54>)
 800cfda:	f7fe feed 	bl	800bdb8 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800cfde:	f7ff ff0b 	bl	800cdf8 <__NVIC_GetPriorityGrouping>
 800cfe2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800cfe4:	687a      	ldr	r2, [r7, #4]
 800cfe6:	68b9      	ldr	r1, [r7, #8]
 800cfe8:	6978      	ldr	r0, [r7, #20]
 800cfea:	f7ff ff59 	bl	800cea0 <NVIC_EncodePriority>
 800cfee:	4602      	mov	r2, r0
 800cff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cff4:	4611      	mov	r1, r2
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7ff ff28 	bl	800ce4c <__NVIC_SetPriority>
}
 800cffc:	bf00      	nop
 800cffe:	3718      	adds	r7, #24
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}
 800d004:	08012c7c 	.word	0x08012c7c

0800d008 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b082      	sub	sp, #8
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	4603      	mov	r3, r0
 800d010:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800d012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d016:	2b00      	cmp	r3, #0
 800d018:	da03      	bge.n	800d022 <HAL_NVIC_EnableIRQ+0x1a>
 800d01a:	21be      	movs	r1, #190	; 0xbe
 800d01c:	4805      	ldr	r0, [pc, #20]	; (800d034 <HAL_NVIC_EnableIRQ+0x2c>)
 800d01e:	f7fe fecb 	bl	800bdb8 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d026:	4618      	mov	r0, r3
 800d028:	f7ff fef4 	bl	800ce14 <__NVIC_EnableIRQ>
}
 800d02c:	bf00      	nop
 800d02e:	3708      	adds	r7, #8
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}
 800d034:	08012c7c 	.word	0x08012c7c

0800d038 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800d03c:	f7ff ff62 	bl	800cf04 <__NVIC_SystemReset>

0800d040 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b082      	sub	sp, #8
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f7ff ff6f 	bl	800cf2c <SysTick_Config>
 800d04e:	4603      	mov	r3, r0
}
 800d050:	4618      	mov	r0, r3
 800d052:	3708      	adds	r7, #8
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}

0800d058 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800d058:	b580      	push	{r7, lr}
 800d05a:	b084      	sub	sp, #16
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d060:	2300      	movs	r3, #0
 800d062:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d06a:	2b02      	cmp	r3, #2
 800d06c:	d005      	beq.n	800d07a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2204      	movs	r2, #4
 800d072:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800d074:	2301      	movs	r3, #1
 800d076:	73fb      	strb	r3, [r7, #15]
 800d078:	e051      	b.n	800d11e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	681a      	ldr	r2, [r3, #0]
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	f022 020e 	bic.w	r2, r2, #14
 800d088:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	681a      	ldr	r2, [r3, #0]
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	f022 0201 	bic.w	r2, r2, #1
 800d098:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	4a22      	ldr	r2, [pc, #136]	; (800d128 <HAL_DMA_Abort_IT+0xd0>)
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	d029      	beq.n	800d0f8 <HAL_DMA_Abort_IT+0xa0>
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	4a20      	ldr	r2, [pc, #128]	; (800d12c <HAL_DMA_Abort_IT+0xd4>)
 800d0aa:	4293      	cmp	r3, r2
 800d0ac:	d022      	beq.n	800d0f4 <HAL_DMA_Abort_IT+0x9c>
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	4a1f      	ldr	r2, [pc, #124]	; (800d130 <HAL_DMA_Abort_IT+0xd8>)
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d01a      	beq.n	800d0ee <HAL_DMA_Abort_IT+0x96>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	4a1d      	ldr	r2, [pc, #116]	; (800d134 <HAL_DMA_Abort_IT+0xdc>)
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	d012      	beq.n	800d0e8 <HAL_DMA_Abort_IT+0x90>
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	4a1c      	ldr	r2, [pc, #112]	; (800d138 <HAL_DMA_Abort_IT+0xe0>)
 800d0c8:	4293      	cmp	r3, r2
 800d0ca:	d00a      	beq.n	800d0e2 <HAL_DMA_Abort_IT+0x8a>
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	4a1a      	ldr	r2, [pc, #104]	; (800d13c <HAL_DMA_Abort_IT+0xe4>)
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	d102      	bne.n	800d0dc <HAL_DMA_Abort_IT+0x84>
 800d0d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d0da:	e00e      	b.n	800d0fa <HAL_DMA_Abort_IT+0xa2>
 800d0dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d0e0:	e00b      	b.n	800d0fa <HAL_DMA_Abort_IT+0xa2>
 800d0e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d0e6:	e008      	b.n	800d0fa <HAL_DMA_Abort_IT+0xa2>
 800d0e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d0ec:	e005      	b.n	800d0fa <HAL_DMA_Abort_IT+0xa2>
 800d0ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d0f2:	e002      	b.n	800d0fa <HAL_DMA_Abort_IT+0xa2>
 800d0f4:	2310      	movs	r3, #16
 800d0f6:	e000      	b.n	800d0fa <HAL_DMA_Abort_IT+0xa2>
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	4a11      	ldr	r2, [pc, #68]	; (800d140 <HAL_DMA_Abort_IT+0xe8>)
 800d0fc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2201      	movs	r2, #1
 800d102:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2200      	movs	r2, #0
 800d10a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d112:	2b00      	cmp	r3, #0
 800d114:	d003      	beq.n	800d11e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	4798      	blx	r3
    } 
  }
  return status;
 800d11e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d120:	4618      	mov	r0, r3
 800d122:	3710      	adds	r7, #16
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}
 800d128:	40020008 	.word	0x40020008
 800d12c:	4002001c 	.word	0x4002001c
 800d130:	40020030 	.word	0x40020030
 800d134:	40020044 	.word	0x40020044
 800d138:	40020058 	.word	0x40020058
 800d13c:	4002006c 	.word	0x4002006c
 800d140:	40020000 	.word	0x40020000

0800d144 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800d144:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d146:	b087      	sub	sp, #28
 800d148:	af00      	add	r7, sp, #0
 800d14a:	60f8      	str	r0, [r7, #12]
 800d14c:	60b9      	str	r1, [r7, #8]
 800d14e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d152:	2301      	movs	r3, #1
 800d154:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800d156:	2300      	movs	r3, #0
 800d158:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800d15a:	2300      	movs	r3, #0
 800d15c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d15e:	4b49      	ldr	r3, [pc, #292]	; (800d284 <HAL_FLASH_Program+0x140>)
 800d160:	7e1b      	ldrb	r3, [r3, #24]
 800d162:	2b01      	cmp	r3, #1
 800d164:	d101      	bne.n	800d16a <HAL_FLASH_Program+0x26>
 800d166:	2302      	movs	r3, #2
 800d168:	e088      	b.n	800d27c <HAL_FLASH_Program+0x138>
 800d16a:	4b46      	ldr	r3, [pc, #280]	; (800d284 <HAL_FLASH_Program+0x140>)
 800d16c:	2201      	movs	r2, #1
 800d16e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2b01      	cmp	r3, #1
 800d174:	d009      	beq.n	800d18a <HAL_FLASH_Program+0x46>
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	2b02      	cmp	r3, #2
 800d17a:	d006      	beq.n	800d18a <HAL_FLASH_Program+0x46>
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	2b03      	cmp	r3, #3
 800d180:	d003      	beq.n	800d18a <HAL_FLASH_Program+0x46>
 800d182:	21b2      	movs	r1, #178	; 0xb2
 800d184:	4840      	ldr	r0, [pc, #256]	; (800d288 <HAL_FLASH_Program+0x144>)
 800d186:	f7fe fe17 	bl	800bdb8 <assert_failed>
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d190:	d31e      	bcc.n	800d1d0 <HAL_FLASH_Program+0x8c>
 800d192:	4b3e      	ldr	r3, [pc, #248]	; (800d28c <HAL_FLASH_Program+0x148>)
 800d194:	881b      	ldrh	r3, [r3, #0]
 800d196:	2b80      	cmp	r3, #128	; 0x80
 800d198:	d104      	bne.n	800d1a4 <HAL_FLASH_Program+0x60>
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	4a3c      	ldr	r2, [pc, #240]	; (800d290 <HAL_FLASH_Program+0x14c>)
 800d19e:	4293      	cmp	r3, r2
 800d1a0:	d816      	bhi.n	800d1d0 <HAL_FLASH_Program+0x8c>
 800d1a2:	e019      	b.n	800d1d8 <HAL_FLASH_Program+0x94>
 800d1a4:	4b39      	ldr	r3, [pc, #228]	; (800d28c <HAL_FLASH_Program+0x148>)
 800d1a6:	881b      	ldrh	r3, [r3, #0]
 800d1a8:	2b40      	cmp	r3, #64	; 0x40
 800d1aa:	d104      	bne.n	800d1b6 <HAL_FLASH_Program+0x72>
 800d1ac:	68bb      	ldr	r3, [r7, #8]
 800d1ae:	4a39      	ldr	r2, [pc, #228]	; (800d294 <HAL_FLASH_Program+0x150>)
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	d80d      	bhi.n	800d1d0 <HAL_FLASH_Program+0x8c>
 800d1b4:	e010      	b.n	800d1d8 <HAL_FLASH_Program+0x94>
 800d1b6:	4b35      	ldr	r3, [pc, #212]	; (800d28c <HAL_FLASH_Program+0x148>)
 800d1b8:	881b      	ldrh	r3, [r3, #0]
 800d1ba:	2b20      	cmp	r3, #32
 800d1bc:	d104      	bne.n	800d1c8 <HAL_FLASH_Program+0x84>
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	4a35      	ldr	r2, [pc, #212]	; (800d298 <HAL_FLASH_Program+0x154>)
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	d804      	bhi.n	800d1d0 <HAL_FLASH_Program+0x8c>
 800d1c6:	e007      	b.n	800d1d8 <HAL_FLASH_Program+0x94>
 800d1c8:	68bb      	ldr	r3, [r7, #8]
 800d1ca:	4a34      	ldr	r2, [pc, #208]	; (800d29c <HAL_FLASH_Program+0x158>)
 800d1cc:	4293      	cmp	r3, r2
 800d1ce:	d903      	bls.n	800d1d8 <HAL_FLASH_Program+0x94>
 800d1d0:	21b3      	movs	r1, #179	; 0xb3
 800d1d2:	482d      	ldr	r0, [pc, #180]	; (800d288 <HAL_FLASH_Program+0x144>)
 800d1d4:	f7fe fdf0 	bl	800bdb8 <assert_failed>
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d1d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d1dc:	f000 f8b4 	bl	800d348 <FLASH_WaitForLastOperation>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800d1e4:	7dfb      	ldrb	r3, [r7, #23]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d144      	bne.n	800d274 <HAL_FLASH_Program+0x130>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	2b01      	cmp	r3, #1
 800d1ee:	d102      	bne.n	800d1f6 <HAL_FLASH_Program+0xb2>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	757b      	strb	r3, [r7, #21]
 800d1f4:	e007      	b.n	800d206 <HAL_FLASH_Program+0xc2>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	2b02      	cmp	r3, #2
 800d1fa:	d102      	bne.n	800d202 <HAL_FLASH_Program+0xbe>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800d1fc:	2302      	movs	r3, #2
 800d1fe:	757b      	strb	r3, [r7, #21]
 800d200:	e001      	b.n	800d206 <HAL_FLASH_Program+0xc2>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800d202:	2304      	movs	r3, #4
 800d204:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800d206:	2300      	movs	r3, #0
 800d208:	75bb      	strb	r3, [r7, #22]
 800d20a:	e02d      	b.n	800d268 <HAL_FLASH_Program+0x124>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800d20c:	7dbb      	ldrb	r3, [r7, #22]
 800d20e:	005a      	lsls	r2, r3, #1
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	eb02 0c03 	add.w	ip, r2, r3
 800d216:	7dbb      	ldrb	r3, [r7, #22]
 800d218:	0119      	lsls	r1, r3, #4
 800d21a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d21e:	f1c1 0620 	rsb	r6, r1, #32
 800d222:	f1a1 0020 	sub.w	r0, r1, #32
 800d226:	fa22 f401 	lsr.w	r4, r2, r1
 800d22a:	fa03 f606 	lsl.w	r6, r3, r6
 800d22e:	4334      	orrs	r4, r6
 800d230:	fa23 f000 	lsr.w	r0, r3, r0
 800d234:	4304      	orrs	r4, r0
 800d236:	fa23 f501 	lsr.w	r5, r3, r1
 800d23a:	b2a3      	uxth	r3, r4
 800d23c:	4619      	mov	r1, r3
 800d23e:	4660      	mov	r0, ip
 800d240:	f000 f866 	bl	800d310 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d244:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d248:	f000 f87e 	bl	800d348 <FLASH_WaitForLastOperation>
 800d24c:	4603      	mov	r3, r0
 800d24e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800d250:	4b13      	ldr	r3, [pc, #76]	; (800d2a0 <HAL_FLASH_Program+0x15c>)
 800d252:	691b      	ldr	r3, [r3, #16]
 800d254:	4a12      	ldr	r2, [pc, #72]	; (800d2a0 <HAL_FLASH_Program+0x15c>)
 800d256:	f023 0301 	bic.w	r3, r3, #1
 800d25a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800d25c:	7dfb      	ldrb	r3, [r7, #23]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d107      	bne.n	800d272 <HAL_FLASH_Program+0x12e>
    for (index = 0U; index < nbiterations; index++)
 800d262:	7dbb      	ldrb	r3, [r7, #22]
 800d264:	3301      	adds	r3, #1
 800d266:	75bb      	strb	r3, [r7, #22]
 800d268:	7dba      	ldrb	r2, [r7, #22]
 800d26a:	7d7b      	ldrb	r3, [r7, #21]
 800d26c:	429a      	cmp	r2, r3
 800d26e:	d3cd      	bcc.n	800d20c <HAL_FLASH_Program+0xc8>
 800d270:	e000      	b.n	800d274 <HAL_FLASH_Program+0x130>
      {
        break;
 800d272:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d274:	4b03      	ldr	r3, [pc, #12]	; (800d284 <HAL_FLASH_Program+0x140>)
 800d276:	2200      	movs	r2, #0
 800d278:	761a      	strb	r2, [r3, #24]

  return status;
 800d27a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	371c      	adds	r7, #28
 800d280:	46bd      	mov	sp, r7
 800d282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d284:	20000838 	.word	0x20000838
 800d288:	08012cb8 	.word	0x08012cb8
 800d28c:	1ffff7e0 	.word	0x1ffff7e0
 800d290:	0801ffff 	.word	0x0801ffff
 800d294:	0800ffff 	.word	0x0800ffff
 800d298:	08007fff 	.word	0x08007fff
 800d29c:	08003fff 	.word	0x08003fff
 800d2a0:	40022000 	.word	0x40022000

0800d2a4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800d2a4:	b480      	push	{r7}
 800d2a6:	b083      	sub	sp, #12
 800d2a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800d2ae:	4b0d      	ldr	r3, [pc, #52]	; (800d2e4 <HAL_FLASH_Unlock+0x40>)
 800d2b0:	691b      	ldr	r3, [r3, #16]
 800d2b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d00d      	beq.n	800d2d6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800d2ba:	4b0a      	ldr	r3, [pc, #40]	; (800d2e4 <HAL_FLASH_Unlock+0x40>)
 800d2bc:	4a0a      	ldr	r2, [pc, #40]	; (800d2e8 <HAL_FLASH_Unlock+0x44>)
 800d2be:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800d2c0:	4b08      	ldr	r3, [pc, #32]	; (800d2e4 <HAL_FLASH_Unlock+0x40>)
 800d2c2:	4a0a      	ldr	r2, [pc, #40]	; (800d2ec <HAL_FLASH_Unlock+0x48>)
 800d2c4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800d2c6:	4b07      	ldr	r3, [pc, #28]	; (800d2e4 <HAL_FLASH_Unlock+0x40>)
 800d2c8:	691b      	ldr	r3, [r3, #16]
 800d2ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d001      	beq.n	800d2d6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800d2d6:	79fb      	ldrb	r3, [r7, #7]
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	370c      	adds	r7, #12
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bc80      	pop	{r7}
 800d2e0:	4770      	bx	lr
 800d2e2:	bf00      	nop
 800d2e4:	40022000 	.word	0x40022000
 800d2e8:	45670123 	.word	0x45670123
 800d2ec:	cdef89ab 	.word	0xcdef89ab

0800d2f0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800d2f4:	4b05      	ldr	r3, [pc, #20]	; (800d30c <HAL_FLASH_Lock+0x1c>)
 800d2f6:	691b      	ldr	r3, [r3, #16]
 800d2f8:	4a04      	ldr	r2, [pc, #16]	; (800d30c <HAL_FLASH_Lock+0x1c>)
 800d2fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2fe:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800d300:	2300      	movs	r3, #0
}
 800d302:	4618      	mov	r0, r3
 800d304:	46bd      	mov	sp, r7
 800d306:	bc80      	pop	{r7}
 800d308:	4770      	bx	lr
 800d30a:	bf00      	nop
 800d30c:	40022000 	.word	0x40022000

0800d310 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800d310:	b480      	push	{r7}
 800d312:	b083      	sub	sp, #12
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
 800d318:	460b      	mov	r3, r1
 800d31a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d31c:	4b08      	ldr	r3, [pc, #32]	; (800d340 <FLASH_Program_HalfWord+0x30>)
 800d31e:	2200      	movs	r2, #0
 800d320:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800d322:	4b08      	ldr	r3, [pc, #32]	; (800d344 <FLASH_Program_HalfWord+0x34>)
 800d324:	691b      	ldr	r3, [r3, #16]
 800d326:	4a07      	ldr	r2, [pc, #28]	; (800d344 <FLASH_Program_HalfWord+0x34>)
 800d328:	f043 0301 	orr.w	r3, r3, #1
 800d32c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	887a      	ldrh	r2, [r7, #2]
 800d332:	801a      	strh	r2, [r3, #0]
}
 800d334:	bf00      	nop
 800d336:	370c      	adds	r7, #12
 800d338:	46bd      	mov	sp, r7
 800d33a:	bc80      	pop	{r7}
 800d33c:	4770      	bx	lr
 800d33e:	bf00      	nop
 800d340:	20000838 	.word	0x20000838
 800d344:	40022000 	.word	0x40022000

0800d348 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b084      	sub	sp, #16
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800d350:	f7ff f99a 	bl	800c688 <HAL_GetTick>
 800d354:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800d356:	e010      	b.n	800d37a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d35e:	d00c      	beq.n	800d37a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d007      	beq.n	800d376 <FLASH_WaitForLastOperation+0x2e>
 800d366:	f7ff f98f 	bl	800c688 <HAL_GetTick>
 800d36a:	4602      	mov	r2, r0
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	1ad3      	subs	r3, r2, r3
 800d370:	687a      	ldr	r2, [r7, #4]
 800d372:	429a      	cmp	r2, r3
 800d374:	d201      	bcs.n	800d37a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800d376:	2303      	movs	r3, #3
 800d378:	e025      	b.n	800d3c6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800d37a:	4b15      	ldr	r3, [pc, #84]	; (800d3d0 <FLASH_WaitForLastOperation+0x88>)
 800d37c:	68db      	ldr	r3, [r3, #12]
 800d37e:	f003 0301 	and.w	r3, r3, #1
 800d382:	2b00      	cmp	r3, #0
 800d384:	d1e8      	bne.n	800d358 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800d386:	4b12      	ldr	r3, [pc, #72]	; (800d3d0 <FLASH_WaitForLastOperation+0x88>)
 800d388:	68db      	ldr	r3, [r3, #12]
 800d38a:	f003 0320 	and.w	r3, r3, #32
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d002      	beq.n	800d398 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800d392:	4b0f      	ldr	r3, [pc, #60]	; (800d3d0 <FLASH_WaitForLastOperation+0x88>)
 800d394:	2220      	movs	r2, #32
 800d396:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800d398:	4b0d      	ldr	r3, [pc, #52]	; (800d3d0 <FLASH_WaitForLastOperation+0x88>)
 800d39a:	68db      	ldr	r3, [r3, #12]
 800d39c:	f003 0310 	and.w	r3, r3, #16
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d10b      	bne.n	800d3bc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800d3a4:	4b0a      	ldr	r3, [pc, #40]	; (800d3d0 <FLASH_WaitForLastOperation+0x88>)
 800d3a6:	69db      	ldr	r3, [r3, #28]
 800d3a8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d105      	bne.n	800d3bc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800d3b0:	4b07      	ldr	r3, [pc, #28]	; (800d3d0 <FLASH_WaitForLastOperation+0x88>)
 800d3b2:	68db      	ldr	r3, [r3, #12]
 800d3b4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d003      	beq.n	800d3c4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800d3bc:	f000 f80a 	bl	800d3d4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	e000      	b.n	800d3c6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800d3c4:	2300      	movs	r3, #0
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	3710      	adds	r7, #16
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
 800d3ce:	bf00      	nop
 800d3d0:	40022000 	.word	0x40022000

0800d3d4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b083      	sub	sp, #12
 800d3d8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800d3de:	4b23      	ldr	r3, [pc, #140]	; (800d46c <FLASH_SetErrorCode+0x98>)
 800d3e0:	68db      	ldr	r3, [r3, #12]
 800d3e2:	f003 0310 	and.w	r3, r3, #16
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d009      	beq.n	800d3fe <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800d3ea:	4b21      	ldr	r3, [pc, #132]	; (800d470 <FLASH_SetErrorCode+0x9c>)
 800d3ec:	69db      	ldr	r3, [r3, #28]
 800d3ee:	f043 0302 	orr.w	r3, r3, #2
 800d3f2:	4a1f      	ldr	r2, [pc, #124]	; (800d470 <FLASH_SetErrorCode+0x9c>)
 800d3f4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f043 0310 	orr.w	r3, r3, #16
 800d3fc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800d3fe:	4b1b      	ldr	r3, [pc, #108]	; (800d46c <FLASH_SetErrorCode+0x98>)
 800d400:	68db      	ldr	r3, [r3, #12]
 800d402:	f003 0304 	and.w	r3, r3, #4
 800d406:	2b00      	cmp	r3, #0
 800d408:	d009      	beq.n	800d41e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800d40a:	4b19      	ldr	r3, [pc, #100]	; (800d470 <FLASH_SetErrorCode+0x9c>)
 800d40c:	69db      	ldr	r3, [r3, #28]
 800d40e:	f043 0301 	orr.w	r3, r3, #1
 800d412:	4a17      	ldr	r2, [pc, #92]	; (800d470 <FLASH_SetErrorCode+0x9c>)
 800d414:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f043 0304 	orr.w	r3, r3, #4
 800d41c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800d41e:	4b13      	ldr	r3, [pc, #76]	; (800d46c <FLASH_SetErrorCode+0x98>)
 800d420:	69db      	ldr	r3, [r3, #28]
 800d422:	f003 0301 	and.w	r3, r3, #1
 800d426:	2b00      	cmp	r3, #0
 800d428:	d00b      	beq.n	800d442 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800d42a:	4b11      	ldr	r3, [pc, #68]	; (800d470 <FLASH_SetErrorCode+0x9c>)
 800d42c:	69db      	ldr	r3, [r3, #28]
 800d42e:	f043 0304 	orr.w	r3, r3, #4
 800d432:	4a0f      	ldr	r2, [pc, #60]	; (800d470 <FLASH_SetErrorCode+0x9c>)
 800d434:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800d436:	4b0d      	ldr	r3, [pc, #52]	; (800d46c <FLASH_SetErrorCode+0x98>)
 800d438:	69db      	ldr	r3, [r3, #28]
 800d43a:	4a0c      	ldr	r2, [pc, #48]	; (800d46c <FLASH_SetErrorCode+0x98>)
 800d43c:	f023 0301 	bic.w	r3, r3, #1
 800d440:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	f240 1201 	movw	r2, #257	; 0x101
 800d448:	4293      	cmp	r3, r2
 800d44a:	d106      	bne.n	800d45a <FLASH_SetErrorCode+0x86>
 800d44c:	4b07      	ldr	r3, [pc, #28]	; (800d46c <FLASH_SetErrorCode+0x98>)
 800d44e:	69db      	ldr	r3, [r3, #28]
 800d450:	4a06      	ldr	r2, [pc, #24]	; (800d46c <FLASH_SetErrorCode+0x98>)
 800d452:	f023 0301 	bic.w	r3, r3, #1
 800d456:	61d3      	str	r3, [r2, #28]
}  
 800d458:	e002      	b.n	800d460 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800d45a:	4a04      	ldr	r2, [pc, #16]	; (800d46c <FLASH_SetErrorCode+0x98>)
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	60d3      	str	r3, [r2, #12]
}  
 800d460:	bf00      	nop
 800d462:	370c      	adds	r7, #12
 800d464:	46bd      	mov	sp, r7
 800d466:	bc80      	pop	{r7}
 800d468:	4770      	bx	lr
 800d46a:	bf00      	nop
 800d46c:	40022000 	.word	0x40022000
 800d470:	20000838 	.word	0x20000838

0800d474 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b084      	sub	sp, #16
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d47e:	2301      	movs	r3, #1
 800d480:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800d482:	2300      	movs	r3, #0
 800d484:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d486:	4b70      	ldr	r3, [pc, #448]	; (800d648 <HAL_FLASHEx_Erase+0x1d4>)
 800d488:	7e1b      	ldrb	r3, [r3, #24]
 800d48a:	2b01      	cmp	r3, #1
 800d48c:	d101      	bne.n	800d492 <HAL_FLASHEx_Erase+0x1e>
 800d48e:	2302      	movs	r3, #2
 800d490:	e0d5      	b.n	800d63e <HAL_FLASHEx_Erase+0x1ca>
 800d492:	4b6d      	ldr	r3, [pc, #436]	; (800d648 <HAL_FLASHEx_Erase+0x1d4>)
 800d494:	2201      	movs	r2, #1
 800d496:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d007      	beq.n	800d4b0 <HAL_FLASHEx_Erase+0x3c>
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	2b02      	cmp	r3, #2
 800d4a6:	d003      	beq.n	800d4b0 <HAL_FLASHEx_Erase+0x3c>
 800d4a8:	21a8      	movs	r1, #168	; 0xa8
 800d4aa:	4868      	ldr	r0, [pc, #416]	; (800d64c <HAL_FLASHEx_Erase+0x1d8>)
 800d4ac:	f7fe fc84 	bl	800bdb8 <assert_failed>

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	2b02      	cmp	r3, #2
 800d4b6:	d117      	bne.n	800d4e8 <HAL_FLASHEx_Erase+0x74>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800d4b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d4bc:	f7ff ff44 	bl	800d348 <FLASH_WaitForLastOperation>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	f040 80b7 	bne.w	800d636 <HAL_FLASHEx_Erase+0x1c2>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800d4c8:	2001      	movs	r0, #1
 800d4ca:	f000 f8cd 	bl	800d668 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d4ce:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d4d2:	f7ff ff39 	bl	800d348 <FLASH_WaitForLastOperation>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800d4da:	4b5d      	ldr	r3, [pc, #372]	; (800d650 <HAL_FLASHEx_Erase+0x1dc>)
 800d4dc:	691b      	ldr	r3, [r3, #16]
 800d4de:	4a5c      	ldr	r2, [pc, #368]	; (800d650 <HAL_FLASHEx_Erase+0x1dc>)
 800d4e0:	f023 0304 	bic.w	r3, r3, #4
 800d4e4:	6113      	str	r3, [r2, #16]
 800d4e6:	e0a6      	b.n	800d636 <HAL_FLASHEx_Erase+0x1c2>
  }
  else
  {
    /* Page Erase is requested */
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	689b      	ldr	r3, [r3, #8]
 800d4ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d4f0:	d322      	bcc.n	800d538 <HAL_FLASHEx_Erase+0xc4>
 800d4f2:	4b58      	ldr	r3, [pc, #352]	; (800d654 <HAL_FLASHEx_Erase+0x1e0>)
 800d4f4:	881b      	ldrh	r3, [r3, #0]
 800d4f6:	2b80      	cmp	r3, #128	; 0x80
 800d4f8:	d105      	bne.n	800d506 <HAL_FLASHEx_Erase+0x92>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	689b      	ldr	r3, [r3, #8]
 800d4fe:	4a56      	ldr	r2, [pc, #344]	; (800d658 <HAL_FLASHEx_Erase+0x1e4>)
 800d500:	4293      	cmp	r3, r2
 800d502:	d819      	bhi.n	800d538 <HAL_FLASHEx_Erase+0xc4>
 800d504:	e01c      	b.n	800d540 <HAL_FLASHEx_Erase+0xcc>
 800d506:	4b53      	ldr	r3, [pc, #332]	; (800d654 <HAL_FLASHEx_Erase+0x1e0>)
 800d508:	881b      	ldrh	r3, [r3, #0]
 800d50a:	2b40      	cmp	r3, #64	; 0x40
 800d50c:	d105      	bne.n	800d51a <HAL_FLASHEx_Erase+0xa6>
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	689b      	ldr	r3, [r3, #8]
 800d512:	4a52      	ldr	r2, [pc, #328]	; (800d65c <HAL_FLASHEx_Erase+0x1e8>)
 800d514:	4293      	cmp	r3, r2
 800d516:	d80f      	bhi.n	800d538 <HAL_FLASHEx_Erase+0xc4>
 800d518:	e012      	b.n	800d540 <HAL_FLASHEx_Erase+0xcc>
 800d51a:	4b4e      	ldr	r3, [pc, #312]	; (800d654 <HAL_FLASHEx_Erase+0x1e0>)
 800d51c:	881b      	ldrh	r3, [r3, #0]
 800d51e:	2b20      	cmp	r3, #32
 800d520:	d105      	bne.n	800d52e <HAL_FLASHEx_Erase+0xba>
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	689b      	ldr	r3, [r3, #8]
 800d526:	4a4e      	ldr	r2, [pc, #312]	; (800d660 <HAL_FLASHEx_Erase+0x1ec>)
 800d528:	4293      	cmp	r3, r2
 800d52a:	d805      	bhi.n	800d538 <HAL_FLASHEx_Erase+0xc4>
 800d52c:	e008      	b.n	800d540 <HAL_FLASHEx_Erase+0xcc>
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	689b      	ldr	r3, [r3, #8]
 800d532:	4a4c      	ldr	r2, [pc, #304]	; (800d664 <HAL_FLASHEx_Erase+0x1f0>)
 800d534:	4293      	cmp	r3, r2
 800d536:	d903      	bls.n	800d540 <HAL_FLASHEx_Erase+0xcc>
 800d538:	21e9      	movs	r1, #233	; 0xe9
 800d53a:	4844      	ldr	r0, [pc, #272]	; (800d64c <HAL_FLASHEx_Erase+0x1d8>)
 800d53c:	f7fe fc3c 	bl	800bdb8 <assert_failed>
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
 800d540:	4b44      	ldr	r3, [pc, #272]	; (800d654 <HAL_FLASHEx_Erase+0x1e0>)
 800d542:	881b      	ldrh	r3, [r3, #0]
 800d544:	2b80      	cmp	r3, #128	; 0x80
 800d546:	d10d      	bne.n	800d564 <HAL_FLASHEx_Erase+0xf0>
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	689a      	ldr	r2, [r3, #8]
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	68db      	ldr	r3, [r3, #12]
 800d550:	029b      	lsls	r3, r3, #10
 800d552:	4413      	add	r3, r2
 800d554:	3b01      	subs	r3, #1
 800d556:	4a40      	ldr	r2, [pc, #256]	; (800d658 <HAL_FLASHEx_Erase+0x1e4>)
 800d558:	4293      	cmp	r3, r2
 800d55a:	bf94      	ite	ls
 800d55c:	2301      	movls	r3, #1
 800d55e:	2300      	movhi	r3, #0
 800d560:	b2db      	uxtb	r3, r3
 800d562:	e030      	b.n	800d5c6 <HAL_FLASHEx_Erase+0x152>
 800d564:	4b3b      	ldr	r3, [pc, #236]	; (800d654 <HAL_FLASHEx_Erase+0x1e0>)
 800d566:	881b      	ldrh	r3, [r3, #0]
 800d568:	2b40      	cmp	r3, #64	; 0x40
 800d56a:	d10d      	bne.n	800d588 <HAL_FLASHEx_Erase+0x114>
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	689a      	ldr	r2, [r3, #8]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	68db      	ldr	r3, [r3, #12]
 800d574:	029b      	lsls	r3, r3, #10
 800d576:	4413      	add	r3, r2
 800d578:	3b01      	subs	r3, #1
 800d57a:	4a38      	ldr	r2, [pc, #224]	; (800d65c <HAL_FLASHEx_Erase+0x1e8>)
 800d57c:	4293      	cmp	r3, r2
 800d57e:	bf94      	ite	ls
 800d580:	2301      	movls	r3, #1
 800d582:	2300      	movhi	r3, #0
 800d584:	b2db      	uxtb	r3, r3
 800d586:	e01e      	b.n	800d5c6 <HAL_FLASHEx_Erase+0x152>
 800d588:	4b32      	ldr	r3, [pc, #200]	; (800d654 <HAL_FLASHEx_Erase+0x1e0>)
 800d58a:	881b      	ldrh	r3, [r3, #0]
 800d58c:	2b20      	cmp	r3, #32
 800d58e:	d10d      	bne.n	800d5ac <HAL_FLASHEx_Erase+0x138>
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	689a      	ldr	r2, [r3, #8]
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	68db      	ldr	r3, [r3, #12]
 800d598:	029b      	lsls	r3, r3, #10
 800d59a:	4413      	add	r3, r2
 800d59c:	3b01      	subs	r3, #1
 800d59e:	4a30      	ldr	r2, [pc, #192]	; (800d660 <HAL_FLASHEx_Erase+0x1ec>)
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	bf94      	ite	ls
 800d5a4:	2301      	movls	r3, #1
 800d5a6:	2300      	movhi	r3, #0
 800d5a8:	b2db      	uxtb	r3, r3
 800d5aa:	e00c      	b.n	800d5c6 <HAL_FLASHEx_Erase+0x152>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	689a      	ldr	r2, [r3, #8]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	68db      	ldr	r3, [r3, #12]
 800d5b4:	029b      	lsls	r3, r3, #10
 800d5b6:	4413      	add	r3, r2
 800d5b8:	3b01      	subs	r3, #1
 800d5ba:	4a2a      	ldr	r2, [pc, #168]	; (800d664 <HAL_FLASHEx_Erase+0x1f0>)
 800d5bc:	4293      	cmp	r3, r2
 800d5be:	bf94      	ite	ls
 800d5c0:	2301      	movls	r3, #1
 800d5c2:	2300      	movhi	r3, #0
 800d5c4:	b2db      	uxtb	r3, r3
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d103      	bne.n	800d5d2 <HAL_FLASHEx_Erase+0x15e>
 800d5ca:	21ea      	movs	r1, #234	; 0xea
 800d5cc:	481f      	ldr	r0, [pc, #124]	; (800d64c <HAL_FLASHEx_Erase+0x1d8>)
 800d5ce:	f7fe fbf3 	bl	800bdb8 <assert_failed>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800d5d2:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d5d6:	f7ff feb7 	bl	800d348 <FLASH_WaitForLastOperation>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d12a      	bne.n	800d636 <HAL_FLASHEx_Erase+0x1c2>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	f04f 32ff 	mov.w	r2, #4294967295
 800d5e6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	689b      	ldr	r3, [r3, #8]
 800d5ec:	60bb      	str	r3, [r7, #8]
 800d5ee:	e019      	b.n	800d624 <HAL_FLASHEx_Erase+0x1b0>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800d5f0:	68b8      	ldr	r0, [r7, #8]
 800d5f2:	f000 f85f 	bl	800d6b4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d5f6:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d5fa:	f7ff fea5 	bl	800d348 <FLASH_WaitForLastOperation>
 800d5fe:	4603      	mov	r3, r0
 800d600:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800d602:	4b13      	ldr	r3, [pc, #76]	; (800d650 <HAL_FLASHEx_Erase+0x1dc>)
 800d604:	691b      	ldr	r3, [r3, #16]
 800d606:	4a12      	ldr	r2, [pc, #72]	; (800d650 <HAL_FLASHEx_Erase+0x1dc>)
 800d608:	f023 0302 	bic.w	r3, r3, #2
 800d60c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800d60e:	7bfb      	ldrb	r3, [r7, #15]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d003      	beq.n	800d61c <HAL_FLASHEx_Erase+0x1a8>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	68ba      	ldr	r2, [r7, #8]
 800d618:	601a      	str	r2, [r3, #0]
            break;
 800d61a:	e00c      	b.n	800d636 <HAL_FLASHEx_Erase+0x1c2>
            address += FLASH_PAGE_SIZE)
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d622:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	68db      	ldr	r3, [r3, #12]
 800d628:	029a      	lsls	r2, r3, #10
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	689b      	ldr	r3, [r3, #8]
 800d62e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800d630:	68ba      	ldr	r2, [r7, #8]
 800d632:	429a      	cmp	r2, r3
 800d634:	d3dc      	bcc.n	800d5f0 <HAL_FLASHEx_Erase+0x17c>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d636:	4b04      	ldr	r3, [pc, #16]	; (800d648 <HAL_FLASHEx_Erase+0x1d4>)
 800d638:	2200      	movs	r2, #0
 800d63a:	761a      	strb	r2, [r3, #24]

  return status;
 800d63c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d63e:	4618      	mov	r0, r3
 800d640:	3710      	adds	r7, #16
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}
 800d646:	bf00      	nop
 800d648:	20000838 	.word	0x20000838
 800d64c:	08012cf4 	.word	0x08012cf4
 800d650:	40022000 	.word	0x40022000
 800d654:	1ffff7e0 	.word	0x1ffff7e0
 800d658:	0801ffff 	.word	0x0801ffff
 800d65c:	0800ffff 	.word	0x0800ffff
 800d660:	08007fff 	.word	0x08007fff
 800d664:	08003fff 	.word	0x08003fff

0800d668 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b082      	sub	sp, #8
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2b01      	cmp	r3, #1
 800d674:	d004      	beq.n	800d680 <FLASH_MassErase+0x18>
 800d676:	f240 2156 	movw	r1, #598	; 0x256
 800d67a:	480b      	ldr	r0, [pc, #44]	; (800d6a8 <FLASH_MassErase+0x40>)
 800d67c:	f7fe fb9c 	bl	800bdb8 <assert_failed>

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d680:	4b0a      	ldr	r3, [pc, #40]	; (800d6ac <FLASH_MassErase+0x44>)
 800d682:	2200      	movs	r2, #0
 800d684:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800d686:	4b0a      	ldr	r3, [pc, #40]	; (800d6b0 <FLASH_MassErase+0x48>)
 800d688:	691b      	ldr	r3, [r3, #16]
 800d68a:	4a09      	ldr	r2, [pc, #36]	; (800d6b0 <FLASH_MassErase+0x48>)
 800d68c:	f043 0304 	orr.w	r3, r3, #4
 800d690:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800d692:	4b07      	ldr	r3, [pc, #28]	; (800d6b0 <FLASH_MassErase+0x48>)
 800d694:	691b      	ldr	r3, [r3, #16]
 800d696:	4a06      	ldr	r2, [pc, #24]	; (800d6b0 <FLASH_MassErase+0x48>)
 800d698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d69c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800d69e:	bf00      	nop
 800d6a0:	3708      	adds	r7, #8
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}
 800d6a6:	bf00      	nop
 800d6a8:	08012cf4 	.word	0x08012cf4
 800d6ac:	20000838 	.word	0x20000838
 800d6b0:	40022000 	.word	0x40022000

0800d6b4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800d6b4:	b480      	push	{r7}
 800d6b6:	b083      	sub	sp, #12
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d6bc:	4b0b      	ldr	r3, [pc, #44]	; (800d6ec <FLASH_PageErase+0x38>)
 800d6be:	2200      	movs	r2, #0
 800d6c0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800d6c2:	4b0b      	ldr	r3, [pc, #44]	; (800d6f0 <FLASH_PageErase+0x3c>)
 800d6c4:	691b      	ldr	r3, [r3, #16]
 800d6c6:	4a0a      	ldr	r2, [pc, #40]	; (800d6f0 <FLASH_PageErase+0x3c>)
 800d6c8:	f043 0302 	orr.w	r3, r3, #2
 800d6cc:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800d6ce:	4a08      	ldr	r2, [pc, #32]	; (800d6f0 <FLASH_PageErase+0x3c>)
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800d6d4:	4b06      	ldr	r3, [pc, #24]	; (800d6f0 <FLASH_PageErase+0x3c>)
 800d6d6:	691b      	ldr	r3, [r3, #16]
 800d6d8:	4a05      	ldr	r2, [pc, #20]	; (800d6f0 <FLASH_PageErase+0x3c>)
 800d6da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6de:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800d6e0:	bf00      	nop
 800d6e2:	370c      	adds	r7, #12
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bc80      	pop	{r7}
 800d6e8:	4770      	bx	lr
 800d6ea:	bf00      	nop
 800d6ec:	20000838 	.word	0x20000838
 800d6f0:	40022000 	.word	0x40022000

0800d6f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b08a      	sub	sp, #40	; 0x28
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
 800d6fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800d6fe:	2300      	movs	r3, #0
 800d700:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800d702:	2300      	movs	r3, #0
 800d704:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	4a9c      	ldr	r2, [pc, #624]	; (800d97c <HAL_GPIO_Init+0x288>)
 800d70a:	4293      	cmp	r3, r2
 800d70c:	d013      	beq.n	800d736 <HAL_GPIO_Init+0x42>
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	4a9b      	ldr	r2, [pc, #620]	; (800d980 <HAL_GPIO_Init+0x28c>)
 800d712:	4293      	cmp	r3, r2
 800d714:	d00f      	beq.n	800d736 <HAL_GPIO_Init+0x42>
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	4a9a      	ldr	r2, [pc, #616]	; (800d984 <HAL_GPIO_Init+0x290>)
 800d71a:	4293      	cmp	r3, r2
 800d71c:	d00b      	beq.n	800d736 <HAL_GPIO_Init+0x42>
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	4a99      	ldr	r2, [pc, #612]	; (800d988 <HAL_GPIO_Init+0x294>)
 800d722:	4293      	cmp	r3, r2
 800d724:	d007      	beq.n	800d736 <HAL_GPIO_Init+0x42>
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	4a98      	ldr	r2, [pc, #608]	; (800d98c <HAL_GPIO_Init+0x298>)
 800d72a:	4293      	cmp	r3, r2
 800d72c:	d003      	beq.n	800d736 <HAL_GPIO_Init+0x42>
 800d72e:	21bd      	movs	r1, #189	; 0xbd
 800d730:	4897      	ldr	r0, [pc, #604]	; (800d990 <HAL_GPIO_Init+0x29c>)
 800d732:	f7fe fb41 	bl	800bdb8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	b29b      	uxth	r3, r3
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d005      	beq.n	800d74c <HAL_GPIO_Init+0x58>
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	0c1b      	lsrs	r3, r3, #16
 800d746:	041b      	lsls	r3, r3, #16
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d003      	beq.n	800d754 <HAL_GPIO_Init+0x60>
 800d74c:	21be      	movs	r1, #190	; 0xbe
 800d74e:	4890      	ldr	r0, [pc, #576]	; (800d990 <HAL_GPIO_Init+0x29c>)
 800d750:	f7fe fb32 	bl	800bdb8 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	685b      	ldr	r3, [r3, #4]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	f000 81eb 	beq.w	800db34 <HAL_GPIO_Init+0x440>
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	685b      	ldr	r3, [r3, #4]
 800d762:	2b01      	cmp	r3, #1
 800d764:	f000 81e6 	beq.w	800db34 <HAL_GPIO_Init+0x440>
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	685b      	ldr	r3, [r3, #4]
 800d76c:	2b11      	cmp	r3, #17
 800d76e:	f000 81e1 	beq.w	800db34 <HAL_GPIO_Init+0x440>
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	685b      	ldr	r3, [r3, #4]
 800d776:	2b02      	cmp	r3, #2
 800d778:	f000 81dc 	beq.w	800db34 <HAL_GPIO_Init+0x440>
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	685b      	ldr	r3, [r3, #4]
 800d780:	2b12      	cmp	r3, #18
 800d782:	f000 81d7 	beq.w	800db34 <HAL_GPIO_Init+0x440>
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	685b      	ldr	r3, [r3, #4]
 800d78a:	4a82      	ldr	r2, [pc, #520]	; (800d994 <HAL_GPIO_Init+0x2a0>)
 800d78c:	4293      	cmp	r3, r2
 800d78e:	f000 81d1 	beq.w	800db34 <HAL_GPIO_Init+0x440>
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	685b      	ldr	r3, [r3, #4]
 800d796:	4a80      	ldr	r2, [pc, #512]	; (800d998 <HAL_GPIO_Init+0x2a4>)
 800d798:	4293      	cmp	r3, r2
 800d79a:	f000 81cb 	beq.w	800db34 <HAL_GPIO_Init+0x440>
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	685b      	ldr	r3, [r3, #4]
 800d7a2:	4a7e      	ldr	r2, [pc, #504]	; (800d99c <HAL_GPIO_Init+0x2a8>)
 800d7a4:	4293      	cmp	r3, r2
 800d7a6:	f000 81c5 	beq.w	800db34 <HAL_GPIO_Init+0x440>
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	685b      	ldr	r3, [r3, #4]
 800d7ae:	4a7c      	ldr	r2, [pc, #496]	; (800d9a0 <HAL_GPIO_Init+0x2ac>)
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	f000 81bf 	beq.w	800db34 <HAL_GPIO_Init+0x440>
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	685b      	ldr	r3, [r3, #4]
 800d7ba:	4a7a      	ldr	r2, [pc, #488]	; (800d9a4 <HAL_GPIO_Init+0x2b0>)
 800d7bc:	4293      	cmp	r3, r2
 800d7be:	f000 81b9 	beq.w	800db34 <HAL_GPIO_Init+0x440>
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	685b      	ldr	r3, [r3, #4]
 800d7c6:	4a78      	ldr	r2, [pc, #480]	; (800d9a8 <HAL_GPIO_Init+0x2b4>)
 800d7c8:	4293      	cmp	r3, r2
 800d7ca:	f000 81b3 	beq.w	800db34 <HAL_GPIO_Init+0x440>
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	685b      	ldr	r3, [r3, #4]
 800d7d2:	2b03      	cmp	r3, #3
 800d7d4:	f000 81ae 	beq.w	800db34 <HAL_GPIO_Init+0x440>
 800d7d8:	21bf      	movs	r1, #191	; 0xbf
 800d7da:	486d      	ldr	r0, [pc, #436]	; (800d990 <HAL_GPIO_Init+0x29c>)
 800d7dc:	f7fe faec 	bl	800bdb8 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800d7e0:	e1a8      	b.n	800db34 <HAL_GPIO_Init+0x440>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800d7e2:	2201      	movs	r2, #1
 800d7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e6:	fa02 f303 	lsl.w	r3, r2, r3
 800d7ea:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	69fa      	ldr	r2, [r7, #28]
 800d7f2:	4013      	ands	r3, r2
 800d7f4:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800d7f6:	69ba      	ldr	r2, [r7, #24]
 800d7f8:	69fb      	ldr	r3, [r7, #28]
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	f040 8197 	bne.w	800db2e <HAL_GPIO_Init+0x43a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	4a5e      	ldr	r2, [pc, #376]	; (800d97c <HAL_GPIO_Init+0x288>)
 800d804:	4293      	cmp	r3, r2
 800d806:	d013      	beq.n	800d830 <HAL_GPIO_Init+0x13c>
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	4a5d      	ldr	r2, [pc, #372]	; (800d980 <HAL_GPIO_Init+0x28c>)
 800d80c:	4293      	cmp	r3, r2
 800d80e:	d00f      	beq.n	800d830 <HAL_GPIO_Init+0x13c>
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	4a5c      	ldr	r2, [pc, #368]	; (800d984 <HAL_GPIO_Init+0x290>)
 800d814:	4293      	cmp	r3, r2
 800d816:	d00b      	beq.n	800d830 <HAL_GPIO_Init+0x13c>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	4a5b      	ldr	r2, [pc, #364]	; (800d988 <HAL_GPIO_Init+0x294>)
 800d81c:	4293      	cmp	r3, r2
 800d81e:	d007      	beq.n	800d830 <HAL_GPIO_Init+0x13c>
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	4a5a      	ldr	r2, [pc, #360]	; (800d98c <HAL_GPIO_Init+0x298>)
 800d824:	4293      	cmp	r3, r2
 800d826:	d003      	beq.n	800d830 <HAL_GPIO_Init+0x13c>
 800d828:	21cd      	movs	r1, #205	; 0xcd
 800d82a:	4859      	ldr	r0, [pc, #356]	; (800d990 <HAL_GPIO_Init+0x29c>)
 800d82c:	f7fe fac4 	bl	800bdb8 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	685b      	ldr	r3, [r3, #4]
 800d834:	2b12      	cmp	r3, #18
 800d836:	d065      	beq.n	800d904 <HAL_GPIO_Init+0x210>
 800d838:	2b12      	cmp	r3, #18
 800d83a:	d80e      	bhi.n	800d85a <HAL_GPIO_Init+0x166>
 800d83c:	2b02      	cmp	r3, #2
 800d83e:	d04c      	beq.n	800d8da <HAL_GPIO_Init+0x1e6>
 800d840:	2b02      	cmp	r3, #2
 800d842:	d804      	bhi.n	800d84e <HAL_GPIO_Init+0x15a>
 800d844:	2b00      	cmp	r3, #0
 800d846:	d072      	beq.n	800d92e <HAL_GPIO_Init+0x23a>
 800d848:	2b01      	cmp	r3, #1
 800d84a:	d01d      	beq.n	800d888 <HAL_GPIO_Init+0x194>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800d84c:	e0b1      	b.n	800d9b2 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800d84e:	2b03      	cmp	r3, #3
 800d850:	f000 80ac 	beq.w	800d9ac <HAL_GPIO_Init+0x2b8>
 800d854:	2b11      	cmp	r3, #17
 800d856:	d02b      	beq.n	800d8b0 <HAL_GPIO_Init+0x1bc>
          break;
 800d858:	e0ab      	b.n	800d9b2 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800d85a:	4a4f      	ldr	r2, [pc, #316]	; (800d998 <HAL_GPIO_Init+0x2a4>)
 800d85c:	4293      	cmp	r3, r2
 800d85e:	d066      	beq.n	800d92e <HAL_GPIO_Init+0x23a>
 800d860:	4a4d      	ldr	r2, [pc, #308]	; (800d998 <HAL_GPIO_Init+0x2a4>)
 800d862:	4293      	cmp	r3, r2
 800d864:	d806      	bhi.n	800d874 <HAL_GPIO_Init+0x180>
 800d866:	4a4b      	ldr	r2, [pc, #300]	; (800d994 <HAL_GPIO_Init+0x2a0>)
 800d868:	4293      	cmp	r3, r2
 800d86a:	d060      	beq.n	800d92e <HAL_GPIO_Init+0x23a>
 800d86c:	4a4c      	ldr	r2, [pc, #304]	; (800d9a0 <HAL_GPIO_Init+0x2ac>)
 800d86e:	4293      	cmp	r3, r2
 800d870:	d05d      	beq.n	800d92e <HAL_GPIO_Init+0x23a>
          break;
 800d872:	e09e      	b.n	800d9b2 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800d874:	4a49      	ldr	r2, [pc, #292]	; (800d99c <HAL_GPIO_Init+0x2a8>)
 800d876:	4293      	cmp	r3, r2
 800d878:	d059      	beq.n	800d92e <HAL_GPIO_Init+0x23a>
 800d87a:	4a4b      	ldr	r2, [pc, #300]	; (800d9a8 <HAL_GPIO_Init+0x2b4>)
 800d87c:	4293      	cmp	r3, r2
 800d87e:	d056      	beq.n	800d92e <HAL_GPIO_Init+0x23a>
 800d880:	4a48      	ldr	r2, [pc, #288]	; (800d9a4 <HAL_GPIO_Init+0x2b0>)
 800d882:	4293      	cmp	r3, r2
 800d884:	d053      	beq.n	800d92e <HAL_GPIO_Init+0x23a>
          break;
 800d886:	e094      	b.n	800d9b2 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	68db      	ldr	r3, [r3, #12]
 800d88c:	2b02      	cmp	r3, #2
 800d88e:	d00b      	beq.n	800d8a8 <HAL_GPIO_Init+0x1b4>
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	68db      	ldr	r3, [r3, #12]
 800d894:	2b01      	cmp	r3, #1
 800d896:	d007      	beq.n	800d8a8 <HAL_GPIO_Init+0x1b4>
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	68db      	ldr	r3, [r3, #12]
 800d89c:	2b03      	cmp	r3, #3
 800d89e:	d003      	beq.n	800d8a8 <HAL_GPIO_Init+0x1b4>
 800d8a0:	21d5      	movs	r1, #213	; 0xd5
 800d8a2:	483b      	ldr	r0, [pc, #236]	; (800d990 <HAL_GPIO_Init+0x29c>)
 800d8a4:	f7fe fa88 	bl	800bdb8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	68db      	ldr	r3, [r3, #12]
 800d8ac:	623b      	str	r3, [r7, #32]
          break;
 800d8ae:	e080      	b.n	800d9b2 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	68db      	ldr	r3, [r3, #12]
 800d8b4:	2b02      	cmp	r3, #2
 800d8b6:	d00b      	beq.n	800d8d0 <HAL_GPIO_Init+0x1dc>
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	68db      	ldr	r3, [r3, #12]
 800d8bc:	2b01      	cmp	r3, #1
 800d8be:	d007      	beq.n	800d8d0 <HAL_GPIO_Init+0x1dc>
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	68db      	ldr	r3, [r3, #12]
 800d8c4:	2b03      	cmp	r3, #3
 800d8c6:	d003      	beq.n	800d8d0 <HAL_GPIO_Init+0x1dc>
 800d8c8:	21dc      	movs	r1, #220	; 0xdc
 800d8ca:	4831      	ldr	r0, [pc, #196]	; (800d990 <HAL_GPIO_Init+0x29c>)
 800d8cc:	f7fe fa74 	bl	800bdb8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	68db      	ldr	r3, [r3, #12]
 800d8d4:	3304      	adds	r3, #4
 800d8d6:	623b      	str	r3, [r7, #32]
          break;
 800d8d8:	e06b      	b.n	800d9b2 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	68db      	ldr	r3, [r3, #12]
 800d8de:	2b02      	cmp	r3, #2
 800d8e0:	d00b      	beq.n	800d8fa <HAL_GPIO_Init+0x206>
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	68db      	ldr	r3, [r3, #12]
 800d8e6:	2b01      	cmp	r3, #1
 800d8e8:	d007      	beq.n	800d8fa <HAL_GPIO_Init+0x206>
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	68db      	ldr	r3, [r3, #12]
 800d8ee:	2b03      	cmp	r3, #3
 800d8f0:	d003      	beq.n	800d8fa <HAL_GPIO_Init+0x206>
 800d8f2:	21e3      	movs	r1, #227	; 0xe3
 800d8f4:	4826      	ldr	r0, [pc, #152]	; (800d990 <HAL_GPIO_Init+0x29c>)
 800d8f6:	f7fe fa5f 	bl	800bdb8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	68db      	ldr	r3, [r3, #12]
 800d8fe:	3308      	adds	r3, #8
 800d900:	623b      	str	r3, [r7, #32]
          break;
 800d902:	e056      	b.n	800d9b2 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	68db      	ldr	r3, [r3, #12]
 800d908:	2b02      	cmp	r3, #2
 800d90a:	d00b      	beq.n	800d924 <HAL_GPIO_Init+0x230>
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	68db      	ldr	r3, [r3, #12]
 800d910:	2b01      	cmp	r3, #1
 800d912:	d007      	beq.n	800d924 <HAL_GPIO_Init+0x230>
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	68db      	ldr	r3, [r3, #12]
 800d918:	2b03      	cmp	r3, #3
 800d91a:	d003      	beq.n	800d924 <HAL_GPIO_Init+0x230>
 800d91c:	21ea      	movs	r1, #234	; 0xea
 800d91e:	481c      	ldr	r0, [pc, #112]	; (800d990 <HAL_GPIO_Init+0x29c>)
 800d920:	f7fe fa4a 	bl	800bdb8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	68db      	ldr	r3, [r3, #12]
 800d928:	330c      	adds	r3, #12
 800d92a:	623b      	str	r3, [r7, #32]
          break;
 800d92c:	e041      	b.n	800d9b2 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	689b      	ldr	r3, [r3, #8]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d00b      	beq.n	800d94e <HAL_GPIO_Init+0x25a>
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	689b      	ldr	r3, [r3, #8]
 800d93a:	2b01      	cmp	r3, #1
 800d93c:	d007      	beq.n	800d94e <HAL_GPIO_Init+0x25a>
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	689b      	ldr	r3, [r3, #8]
 800d942:	2b02      	cmp	r3, #2
 800d944:	d003      	beq.n	800d94e <HAL_GPIO_Init+0x25a>
 800d946:	21f7      	movs	r1, #247	; 0xf7
 800d948:	4811      	ldr	r0, [pc, #68]	; (800d990 <HAL_GPIO_Init+0x29c>)
 800d94a:	f7fe fa35 	bl	800bdb8 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	689b      	ldr	r3, [r3, #8]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d102      	bne.n	800d95c <HAL_GPIO_Init+0x268>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800d956:	2304      	movs	r3, #4
 800d958:	623b      	str	r3, [r7, #32]
          break;
 800d95a:	e02a      	b.n	800d9b2 <HAL_GPIO_Init+0x2be>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	689b      	ldr	r3, [r3, #8]
 800d960:	2b01      	cmp	r3, #1
 800d962:	d105      	bne.n	800d970 <HAL_GPIO_Init+0x27c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800d964:	2308      	movs	r3, #8
 800d966:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	69fa      	ldr	r2, [r7, #28]
 800d96c:	611a      	str	r2, [r3, #16]
          break;
 800d96e:	e020      	b.n	800d9b2 <HAL_GPIO_Init+0x2be>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800d970:	2308      	movs	r3, #8
 800d972:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	69fa      	ldr	r2, [r7, #28]
 800d978:	615a      	str	r2, [r3, #20]
          break;
 800d97a:	e01a      	b.n	800d9b2 <HAL_GPIO_Init+0x2be>
 800d97c:	40010800 	.word	0x40010800
 800d980:	40010c00 	.word	0x40010c00
 800d984:	40011000 	.word	0x40011000
 800d988:	40011400 	.word	0x40011400
 800d98c:	40011800 	.word	0x40011800
 800d990:	08012d34 	.word	0x08012d34
 800d994:	10110000 	.word	0x10110000
 800d998:	10210000 	.word	0x10210000
 800d99c:	10310000 	.word	0x10310000
 800d9a0:	10120000 	.word	0x10120000
 800d9a4:	10220000 	.word	0x10220000
 800d9a8:	10320000 	.word	0x10320000
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	623b      	str	r3, [r7, #32]
          break;
 800d9b0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800d9b2:	69bb      	ldr	r3, [r7, #24]
 800d9b4:	2bff      	cmp	r3, #255	; 0xff
 800d9b6:	d801      	bhi.n	800d9bc <HAL_GPIO_Init+0x2c8>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	e001      	b.n	800d9c0 <HAL_GPIO_Init+0x2cc>
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	3304      	adds	r3, #4
 800d9c0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800d9c2:	69bb      	ldr	r3, [r7, #24]
 800d9c4:	2bff      	cmp	r3, #255	; 0xff
 800d9c6:	d802      	bhi.n	800d9ce <HAL_GPIO_Init+0x2da>
 800d9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ca:	009b      	lsls	r3, r3, #2
 800d9cc:	e002      	b.n	800d9d4 <HAL_GPIO_Init+0x2e0>
 800d9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d0:	3b08      	subs	r3, #8
 800d9d2:	009b      	lsls	r3, r3, #2
 800d9d4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	681a      	ldr	r2, [r3, #0]
 800d9da:	210f      	movs	r1, #15
 800d9dc:	693b      	ldr	r3, [r7, #16]
 800d9de:	fa01 f303 	lsl.w	r3, r1, r3
 800d9e2:	43db      	mvns	r3, r3
 800d9e4:	401a      	ands	r2, r3
 800d9e6:	6a39      	ldr	r1, [r7, #32]
 800d9e8:	693b      	ldr	r3, [r7, #16]
 800d9ea:	fa01 f303 	lsl.w	r3, r1, r3
 800d9ee:	431a      	orrs	r2, r3
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	685b      	ldr	r3, [r3, #4]
 800d9f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	f000 8096 	beq.w	800db2e <HAL_GPIO_Init+0x43a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800da02:	4b52      	ldr	r3, [pc, #328]	; (800db4c <HAL_GPIO_Init+0x458>)
 800da04:	699b      	ldr	r3, [r3, #24]
 800da06:	4a51      	ldr	r2, [pc, #324]	; (800db4c <HAL_GPIO_Init+0x458>)
 800da08:	f043 0301 	orr.w	r3, r3, #1
 800da0c:	6193      	str	r3, [r2, #24]
 800da0e:	4b4f      	ldr	r3, [pc, #316]	; (800db4c <HAL_GPIO_Init+0x458>)
 800da10:	699b      	ldr	r3, [r3, #24]
 800da12:	f003 0301 	and.w	r3, r3, #1
 800da16:	60bb      	str	r3, [r7, #8]
 800da18:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800da1a:	4a4d      	ldr	r2, [pc, #308]	; (800db50 <HAL_GPIO_Init+0x45c>)
 800da1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da1e:	089b      	lsrs	r3, r3, #2
 800da20:	3302      	adds	r3, #2
 800da22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da26:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800da28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da2a:	f003 0303 	and.w	r3, r3, #3
 800da2e:	009b      	lsls	r3, r3, #2
 800da30:	220f      	movs	r2, #15
 800da32:	fa02 f303 	lsl.w	r3, r2, r3
 800da36:	43db      	mvns	r3, r3
 800da38:	68fa      	ldr	r2, [r7, #12]
 800da3a:	4013      	ands	r3, r2
 800da3c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	4a44      	ldr	r2, [pc, #272]	; (800db54 <HAL_GPIO_Init+0x460>)
 800da42:	4293      	cmp	r3, r2
 800da44:	d013      	beq.n	800da6e <HAL_GPIO_Init+0x37a>
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	4a43      	ldr	r2, [pc, #268]	; (800db58 <HAL_GPIO_Init+0x464>)
 800da4a:	4293      	cmp	r3, r2
 800da4c:	d00d      	beq.n	800da6a <HAL_GPIO_Init+0x376>
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	4a42      	ldr	r2, [pc, #264]	; (800db5c <HAL_GPIO_Init+0x468>)
 800da52:	4293      	cmp	r3, r2
 800da54:	d007      	beq.n	800da66 <HAL_GPIO_Init+0x372>
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	4a41      	ldr	r2, [pc, #260]	; (800db60 <HAL_GPIO_Init+0x46c>)
 800da5a:	4293      	cmp	r3, r2
 800da5c:	d101      	bne.n	800da62 <HAL_GPIO_Init+0x36e>
 800da5e:	2303      	movs	r3, #3
 800da60:	e006      	b.n	800da70 <HAL_GPIO_Init+0x37c>
 800da62:	2304      	movs	r3, #4
 800da64:	e004      	b.n	800da70 <HAL_GPIO_Init+0x37c>
 800da66:	2302      	movs	r3, #2
 800da68:	e002      	b.n	800da70 <HAL_GPIO_Init+0x37c>
 800da6a:	2301      	movs	r3, #1
 800da6c:	e000      	b.n	800da70 <HAL_GPIO_Init+0x37c>
 800da6e:	2300      	movs	r3, #0
 800da70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da72:	f002 0203 	and.w	r2, r2, #3
 800da76:	0092      	lsls	r2, r2, #2
 800da78:	4093      	lsls	r3, r2
 800da7a:	68fa      	ldr	r2, [r7, #12]
 800da7c:	4313      	orrs	r3, r2
 800da7e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800da80:	4933      	ldr	r1, [pc, #204]	; (800db50 <HAL_GPIO_Init+0x45c>)
 800da82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da84:	089b      	lsrs	r3, r3, #2
 800da86:	3302      	adds	r3, #2
 800da88:	68fa      	ldr	r2, [r7, #12]
 800da8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	685b      	ldr	r3, [r3, #4]
 800da92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800da96:	2b00      	cmp	r3, #0
 800da98:	d006      	beq.n	800daa8 <HAL_GPIO_Init+0x3b4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800da9a:	4b32      	ldr	r3, [pc, #200]	; (800db64 <HAL_GPIO_Init+0x470>)
 800da9c:	681a      	ldr	r2, [r3, #0]
 800da9e:	4931      	ldr	r1, [pc, #196]	; (800db64 <HAL_GPIO_Init+0x470>)
 800daa0:	69bb      	ldr	r3, [r7, #24]
 800daa2:	4313      	orrs	r3, r2
 800daa4:	600b      	str	r3, [r1, #0]
 800daa6:	e006      	b.n	800dab6 <HAL_GPIO_Init+0x3c2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800daa8:	4b2e      	ldr	r3, [pc, #184]	; (800db64 <HAL_GPIO_Init+0x470>)
 800daaa:	681a      	ldr	r2, [r3, #0]
 800daac:	69bb      	ldr	r3, [r7, #24]
 800daae:	43db      	mvns	r3, r3
 800dab0:	492c      	ldr	r1, [pc, #176]	; (800db64 <HAL_GPIO_Init+0x470>)
 800dab2:	4013      	ands	r3, r2
 800dab4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	685b      	ldr	r3, [r3, #4]
 800daba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d006      	beq.n	800dad0 <HAL_GPIO_Init+0x3dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800dac2:	4b28      	ldr	r3, [pc, #160]	; (800db64 <HAL_GPIO_Init+0x470>)
 800dac4:	685a      	ldr	r2, [r3, #4]
 800dac6:	4927      	ldr	r1, [pc, #156]	; (800db64 <HAL_GPIO_Init+0x470>)
 800dac8:	69bb      	ldr	r3, [r7, #24]
 800daca:	4313      	orrs	r3, r2
 800dacc:	604b      	str	r3, [r1, #4]
 800dace:	e006      	b.n	800dade <HAL_GPIO_Init+0x3ea>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800dad0:	4b24      	ldr	r3, [pc, #144]	; (800db64 <HAL_GPIO_Init+0x470>)
 800dad2:	685a      	ldr	r2, [r3, #4]
 800dad4:	69bb      	ldr	r3, [r7, #24]
 800dad6:	43db      	mvns	r3, r3
 800dad8:	4922      	ldr	r1, [pc, #136]	; (800db64 <HAL_GPIO_Init+0x470>)
 800dada:	4013      	ands	r3, r2
 800dadc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	685b      	ldr	r3, [r3, #4]
 800dae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d006      	beq.n	800daf8 <HAL_GPIO_Init+0x404>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800daea:	4b1e      	ldr	r3, [pc, #120]	; (800db64 <HAL_GPIO_Init+0x470>)
 800daec:	689a      	ldr	r2, [r3, #8]
 800daee:	491d      	ldr	r1, [pc, #116]	; (800db64 <HAL_GPIO_Init+0x470>)
 800daf0:	69bb      	ldr	r3, [r7, #24]
 800daf2:	4313      	orrs	r3, r2
 800daf4:	608b      	str	r3, [r1, #8]
 800daf6:	e006      	b.n	800db06 <HAL_GPIO_Init+0x412>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800daf8:	4b1a      	ldr	r3, [pc, #104]	; (800db64 <HAL_GPIO_Init+0x470>)
 800dafa:	689a      	ldr	r2, [r3, #8]
 800dafc:	69bb      	ldr	r3, [r7, #24]
 800dafe:	43db      	mvns	r3, r3
 800db00:	4918      	ldr	r1, [pc, #96]	; (800db64 <HAL_GPIO_Init+0x470>)
 800db02:	4013      	ands	r3, r2
 800db04:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	685b      	ldr	r3, [r3, #4]
 800db0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d006      	beq.n	800db20 <HAL_GPIO_Init+0x42c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800db12:	4b14      	ldr	r3, [pc, #80]	; (800db64 <HAL_GPIO_Init+0x470>)
 800db14:	68da      	ldr	r2, [r3, #12]
 800db16:	4913      	ldr	r1, [pc, #76]	; (800db64 <HAL_GPIO_Init+0x470>)
 800db18:	69bb      	ldr	r3, [r7, #24]
 800db1a:	4313      	orrs	r3, r2
 800db1c:	60cb      	str	r3, [r1, #12]
 800db1e:	e006      	b.n	800db2e <HAL_GPIO_Init+0x43a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800db20:	4b10      	ldr	r3, [pc, #64]	; (800db64 <HAL_GPIO_Init+0x470>)
 800db22:	68da      	ldr	r2, [r3, #12]
 800db24:	69bb      	ldr	r3, [r7, #24]
 800db26:	43db      	mvns	r3, r3
 800db28:	490e      	ldr	r1, [pc, #56]	; (800db64 <HAL_GPIO_Init+0x470>)
 800db2a:	4013      	ands	r3, r2
 800db2c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800db2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db30:	3301      	adds	r3, #1
 800db32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	681a      	ldr	r2, [r3, #0]
 800db38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db3a:	fa22 f303 	lsr.w	r3, r2, r3
 800db3e:	2b00      	cmp	r3, #0
 800db40:	f47f ae4f 	bne.w	800d7e2 <HAL_GPIO_Init+0xee>
  }
}
 800db44:	bf00      	nop
 800db46:	3728      	adds	r7, #40	; 0x28
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}
 800db4c:	40021000 	.word	0x40021000
 800db50:	40010000 	.word	0x40010000
 800db54:	40010800 	.word	0x40010800
 800db58:	40010c00 	.word	0x40010c00
 800db5c:	40011000 	.word	0x40011000
 800db60:	40011400 	.word	0x40011400
 800db64:	40010400 	.word	0x40010400

0800db68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b084      	sub	sp, #16
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
 800db70:	460b      	mov	r3, r1
 800db72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800db74:	887b      	ldrh	r3, [r7, #2]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d004      	beq.n	800db84 <HAL_GPIO_ReadPin+0x1c>
 800db7a:	887b      	ldrh	r3, [r7, #2]
 800db7c:	0c1b      	lsrs	r3, r3, #16
 800db7e:	041b      	lsls	r3, r3, #16
 800db80:	2b00      	cmp	r3, #0
 800db82:	d004      	beq.n	800db8e <HAL_GPIO_ReadPin+0x26>
 800db84:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800db88:	4809      	ldr	r0, [pc, #36]	; (800dbb0 <HAL_GPIO_ReadPin+0x48>)
 800db8a:	f7fe f915 	bl	800bdb8 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	689a      	ldr	r2, [r3, #8]
 800db92:	887b      	ldrh	r3, [r7, #2]
 800db94:	4013      	ands	r3, r2
 800db96:	2b00      	cmp	r3, #0
 800db98:	d002      	beq.n	800dba0 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 800db9a:	2301      	movs	r3, #1
 800db9c:	73fb      	strb	r3, [r7, #15]
 800db9e:	e001      	b.n	800dba4 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800dba0:	2300      	movs	r3, #0
 800dba2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800dba4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dba6:	4618      	mov	r0, r3
 800dba8:	3710      	adds	r7, #16
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	bd80      	pop	{r7, pc}
 800dbae:	bf00      	nop
 800dbb0:	08012d34 	.word	0x08012d34

0800dbb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b082      	sub	sp, #8
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	460b      	mov	r3, r1
 800dbbe:	807b      	strh	r3, [r7, #2]
 800dbc0:	4613      	mov	r3, r2
 800dbc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800dbc4:	887b      	ldrh	r3, [r7, #2]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d004      	beq.n	800dbd4 <HAL_GPIO_WritePin+0x20>
 800dbca:	887b      	ldrh	r3, [r7, #2]
 800dbcc:	0c1b      	lsrs	r3, r3, #16
 800dbce:	041b      	lsls	r3, r3, #16
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d004      	beq.n	800dbde <HAL_GPIO_WritePin+0x2a>
 800dbd4:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800dbd8:	480e      	ldr	r0, [pc, #56]	; (800dc14 <HAL_GPIO_WritePin+0x60>)
 800dbda:	f7fe f8ed 	bl	800bdb8 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800dbde:	787b      	ldrb	r3, [r7, #1]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d007      	beq.n	800dbf4 <HAL_GPIO_WritePin+0x40>
 800dbe4:	787b      	ldrb	r3, [r7, #1]
 800dbe6:	2b01      	cmp	r3, #1
 800dbe8:	d004      	beq.n	800dbf4 <HAL_GPIO_WritePin+0x40>
 800dbea:	f240 11d5 	movw	r1, #469	; 0x1d5
 800dbee:	4809      	ldr	r0, [pc, #36]	; (800dc14 <HAL_GPIO_WritePin+0x60>)
 800dbf0:	f7fe f8e2 	bl	800bdb8 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800dbf4:	787b      	ldrb	r3, [r7, #1]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d003      	beq.n	800dc02 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800dbfa:	887a      	ldrh	r2, [r7, #2]
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800dc00:	e003      	b.n	800dc0a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800dc02:	887b      	ldrh	r3, [r7, #2]
 800dc04:	041a      	lsls	r2, r3, #16
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	611a      	str	r2, [r3, #16]
}
 800dc0a:	bf00      	nop
 800dc0c:	3708      	adds	r7, #8
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}
 800dc12:	bf00      	nop
 800dc14:	08012d34 	.word	0x08012d34

0800dc18 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b082      	sub	sp, #8
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
 800dc20:	460b      	mov	r3, r1
 800dc22:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800dc24:	887b      	ldrh	r3, [r7, #2]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d004      	beq.n	800dc34 <HAL_GPIO_TogglePin+0x1c>
 800dc2a:	887b      	ldrh	r3, [r7, #2]
 800dc2c:	0c1b      	lsrs	r3, r3, #16
 800dc2e:	041b      	lsls	r3, r3, #16
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d004      	beq.n	800dc3e <HAL_GPIO_TogglePin+0x26>
 800dc34:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 800dc38:	4809      	ldr	r0, [pc, #36]	; (800dc60 <HAL_GPIO_TogglePin+0x48>)
 800dc3a:	f7fe f8bd 	bl	800bdb8 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	68da      	ldr	r2, [r3, #12]
 800dc42:	887b      	ldrh	r3, [r7, #2]
 800dc44:	4013      	ands	r3, r2
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d003      	beq.n	800dc52 <HAL_GPIO_TogglePin+0x3a>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800dc4a:	887a      	ldrh	r2, [r7, #2]
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800dc50:	e002      	b.n	800dc58 <HAL_GPIO_TogglePin+0x40>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800dc52:	887a      	ldrh	r2, [r7, #2]
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	611a      	str	r2, [r3, #16]
}
 800dc58:	bf00      	nop
 800dc5a:	3708      	adds	r7, #8
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd80      	pop	{r7, pc}
 800dc60:	08012d34 	.word	0x08012d34

0800dc64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b084      	sub	sp, #16
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d101      	bne.n	800dc76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800dc72:	2301      	movs	r3, #1
 800dc74:	e1ab      	b.n	800dfce <HAL_I2C_Init+0x36a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	4aa0      	ldr	r2, [pc, #640]	; (800defc <HAL_I2C_Init+0x298>)
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	d009      	beq.n	800dc94 <HAL_I2C_Init+0x30>
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	4a9e      	ldr	r2, [pc, #632]	; (800df00 <HAL_I2C_Init+0x29c>)
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d004      	beq.n	800dc94 <HAL_I2C_Init+0x30>
 800dc8a:	f240 11d1 	movw	r1, #465	; 0x1d1
 800dc8e:	489d      	ldr	r0, [pc, #628]	; (800df04 <HAL_I2C_Init+0x2a0>)
 800dc90:	f7fe f892 	bl	800bdb8 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	685b      	ldr	r3, [r3, #4]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d004      	beq.n	800dca6 <HAL_I2C_Init+0x42>
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	685b      	ldr	r3, [r3, #4]
 800dca0:	4a99      	ldr	r2, [pc, #612]	; (800df08 <HAL_I2C_Init+0x2a4>)
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d904      	bls.n	800dcb0 <HAL_I2C_Init+0x4c>
 800dca6:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800dcaa:	4896      	ldr	r0, [pc, #600]	; (800df04 <HAL_I2C_Init+0x2a0>)
 800dcac:	f7fe f884 	bl	800bdb8 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	689b      	ldr	r3, [r3, #8]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d009      	beq.n	800dccc <HAL_I2C_Init+0x68>
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	689b      	ldr	r3, [r3, #8]
 800dcbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dcc0:	d004      	beq.n	800dccc <HAL_I2C_Init+0x68>
 800dcc2:	f240 11d3 	movw	r1, #467	; 0x1d3
 800dcc6:	488f      	ldr	r0, [pc, #572]	; (800df04 <HAL_I2C_Init+0x2a0>)
 800dcc8:	f7fe f876 	bl	800bdb8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	68db      	ldr	r3, [r3, #12]
 800dcd0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800dcd4:	f023 0303 	bic.w	r3, r3, #3
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d004      	beq.n	800dce6 <HAL_I2C_Init+0x82>
 800dcdc:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800dce0:	4888      	ldr	r0, [pc, #544]	; (800df04 <HAL_I2C_Init+0x2a0>)
 800dce2:	f7fe f869 	bl	800bdb8 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	691b      	ldr	r3, [r3, #16]
 800dcea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dcee:	d009      	beq.n	800dd04 <HAL_I2C_Init+0xa0>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	691b      	ldr	r3, [r3, #16]
 800dcf4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800dcf8:	d004      	beq.n	800dd04 <HAL_I2C_Init+0xa0>
 800dcfa:	f240 11d5 	movw	r1, #469	; 0x1d5
 800dcfe:	4881      	ldr	r0, [pc, #516]	; (800df04 <HAL_I2C_Init+0x2a0>)
 800dd00:	f7fe f85a 	bl	800bdb8 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	695b      	ldr	r3, [r3, #20]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d008      	beq.n	800dd1e <HAL_I2C_Init+0xba>
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	695b      	ldr	r3, [r3, #20]
 800dd10:	2b01      	cmp	r3, #1
 800dd12:	d004      	beq.n	800dd1e <HAL_I2C_Init+0xba>
 800dd14:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 800dd18:	487a      	ldr	r0, [pc, #488]	; (800df04 <HAL_I2C_Init+0x2a0>)
 800dd1a:	f7fe f84d 	bl	800bdb8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	699b      	ldr	r3, [r3, #24]
 800dd22:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d004      	beq.n	800dd34 <HAL_I2C_Init+0xd0>
 800dd2a:	f240 11d7 	movw	r1, #471	; 0x1d7
 800dd2e:	4875      	ldr	r0, [pc, #468]	; (800df04 <HAL_I2C_Init+0x2a0>)
 800dd30:	f7fe f842 	bl	800bdb8 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	69db      	ldr	r3, [r3, #28]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d008      	beq.n	800dd4e <HAL_I2C_Init+0xea>
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	69db      	ldr	r3, [r3, #28]
 800dd40:	2b40      	cmp	r3, #64	; 0x40
 800dd42:	d004      	beq.n	800dd4e <HAL_I2C_Init+0xea>
 800dd44:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800dd48:	486e      	ldr	r0, [pc, #440]	; (800df04 <HAL_I2C_Init+0x2a0>)
 800dd4a:	f7fe f835 	bl	800bdb8 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6a1b      	ldr	r3, [r3, #32]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d008      	beq.n	800dd68 <HAL_I2C_Init+0x104>
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	6a1b      	ldr	r3, [r3, #32]
 800dd5a:	2b80      	cmp	r3, #128	; 0x80
 800dd5c:	d004      	beq.n	800dd68 <HAL_I2C_Init+0x104>
 800dd5e:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dd62:	4868      	ldr	r0, [pc, #416]	; (800df04 <HAL_I2C_Init+0x2a0>)
 800dd64:	f7fe f828 	bl	800bdb8 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd6e:	b2db      	uxtb	r3, r3
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d106      	bne.n	800dd82 <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2200      	movs	r2, #0
 800dd78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f7fd ff25 	bl	800bbcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2224      	movs	r2, #36	; 0x24
 800dd86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	681a      	ldr	r2, [r3, #0]
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	f022 0201 	bic.w	r2, r2, #1
 800dd98:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	681a      	ldr	r2, [r3, #0]
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dda8:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	681a      	ldr	r2, [r3, #0]
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ddb8:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800ddba:	f001 fcfd 	bl	800f7b8 <HAL_RCC_GetPCLK1Freq>
 800ddbe:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	685b      	ldr	r3, [r3, #4]
 800ddc4:	4a51      	ldr	r2, [pc, #324]	; (800df0c <HAL_I2C_Init+0x2a8>)
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d807      	bhi.n	800ddda <HAL_I2C_Init+0x176>
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	4a50      	ldr	r2, [pc, #320]	; (800df10 <HAL_I2C_Init+0x2ac>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	bf94      	ite	ls
 800ddd2:	2301      	movls	r3, #1
 800ddd4:	2300      	movhi	r3, #0
 800ddd6:	b2db      	uxtb	r3, r3
 800ddd8:	e006      	b.n	800dde8 <HAL_I2C_Init+0x184>
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	4a4d      	ldr	r2, [pc, #308]	; (800df14 <HAL_I2C_Init+0x2b0>)
 800ddde:	4293      	cmp	r3, r2
 800dde0:	bf94      	ite	ls
 800dde2:	2301      	movls	r3, #1
 800dde4:	2300      	movhi	r3, #0
 800dde6:	b2db      	uxtb	r3, r3
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d001      	beq.n	800ddf0 <HAL_I2C_Init+0x18c>
  {
    return HAL_ERROR;
 800ddec:	2301      	movs	r3, #1
 800ddee:	e0ee      	b.n	800dfce <HAL_I2C_Init+0x36a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	4a49      	ldr	r2, [pc, #292]	; (800df18 <HAL_I2C_Init+0x2b4>)
 800ddf4:	fba2 2303 	umull	r2, r3, r2, r3
 800ddf8:	0c9b      	lsrs	r3, r3, #18
 800ddfa:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	685b      	ldr	r3, [r3, #4]
 800de02:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	68ba      	ldr	r2, [r7, #8]
 800de0c:	430a      	orrs	r2, r1
 800de0e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	6a1b      	ldr	r3, [r3, #32]
 800de16:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	685b      	ldr	r3, [r3, #4]
 800de1e:	4a3b      	ldr	r2, [pc, #236]	; (800df0c <HAL_I2C_Init+0x2a8>)
 800de20:	4293      	cmp	r3, r2
 800de22:	d802      	bhi.n	800de2a <HAL_I2C_Init+0x1c6>
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	3301      	adds	r3, #1
 800de28:	e009      	b.n	800de3e <HAL_I2C_Init+0x1da>
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800de30:	fb02 f303 	mul.w	r3, r2, r3
 800de34:	4a39      	ldr	r2, [pc, #228]	; (800df1c <HAL_I2C_Init+0x2b8>)
 800de36:	fba2 2303 	umull	r2, r3, r2, r3
 800de3a:	099b      	lsrs	r3, r3, #6
 800de3c:	3301      	adds	r3, #1
 800de3e:	687a      	ldr	r2, [r7, #4]
 800de40:	6812      	ldr	r2, [r2, #0]
 800de42:	430b      	orrs	r3, r1
 800de44:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	69db      	ldr	r3, [r3, #28]
 800de4c:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800de50:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	685b      	ldr	r3, [r3, #4]
 800de58:	492c      	ldr	r1, [pc, #176]	; (800df0c <HAL_I2C_Init+0x2a8>)
 800de5a:	428b      	cmp	r3, r1
 800de5c:	d80d      	bhi.n	800de7a <HAL_I2C_Init+0x216>
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	1e59      	subs	r1, r3, #1
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	685b      	ldr	r3, [r3, #4]
 800de66:	005b      	lsls	r3, r3, #1
 800de68:	fbb1 f3f3 	udiv	r3, r1, r3
 800de6c:	3301      	adds	r3, #1
 800de6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800de72:	2b04      	cmp	r3, #4
 800de74:	bf38      	it	cc
 800de76:	2304      	movcc	r3, #4
 800de78:	e062      	b.n	800df40 <HAL_I2C_Init+0x2dc>
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	689b      	ldr	r3, [r3, #8]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d111      	bne.n	800dea6 <HAL_I2C_Init+0x242>
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	1e58      	subs	r0, r3, #1
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6859      	ldr	r1, [r3, #4]
 800de8a:	460b      	mov	r3, r1
 800de8c:	005b      	lsls	r3, r3, #1
 800de8e:	440b      	add	r3, r1
 800de90:	fbb0 f3f3 	udiv	r3, r0, r3
 800de94:	3301      	adds	r3, #1
 800de96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	bf0c      	ite	eq
 800de9e:	2301      	moveq	r3, #1
 800dea0:	2300      	movne	r3, #0
 800dea2:	b2db      	uxtb	r3, r3
 800dea4:	e012      	b.n	800decc <HAL_I2C_Init+0x268>
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	1e58      	subs	r0, r3, #1
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6859      	ldr	r1, [r3, #4]
 800deae:	460b      	mov	r3, r1
 800deb0:	009b      	lsls	r3, r3, #2
 800deb2:	440b      	add	r3, r1
 800deb4:	0099      	lsls	r1, r3, #2
 800deb6:	440b      	add	r3, r1
 800deb8:	fbb0 f3f3 	udiv	r3, r0, r3
 800debc:	3301      	adds	r3, #1
 800debe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	bf0c      	ite	eq
 800dec6:	2301      	moveq	r3, #1
 800dec8:	2300      	movne	r3, #0
 800deca:	b2db      	uxtb	r3, r3
 800decc:	2b00      	cmp	r3, #0
 800dece:	d001      	beq.n	800ded4 <HAL_I2C_Init+0x270>
 800ded0:	2301      	movs	r3, #1
 800ded2:	e035      	b.n	800df40 <HAL_I2C_Init+0x2dc>
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	689b      	ldr	r3, [r3, #8]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d121      	bne.n	800df20 <HAL_I2C_Init+0x2bc>
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	1e58      	subs	r0, r3, #1
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	6859      	ldr	r1, [r3, #4]
 800dee4:	460b      	mov	r3, r1
 800dee6:	005b      	lsls	r3, r3, #1
 800dee8:	440b      	add	r3, r1
 800deea:	fbb0 f3f3 	udiv	r3, r0, r3
 800deee:	3301      	adds	r3, #1
 800def0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800def4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800def8:	e022      	b.n	800df40 <HAL_I2C_Init+0x2dc>
 800defa:	bf00      	nop
 800defc:	40005400 	.word	0x40005400
 800df00:	40005800 	.word	0x40005800
 800df04:	08012d70 	.word	0x08012d70
 800df08:	00061a80 	.word	0x00061a80
 800df0c:	000186a0 	.word	0x000186a0
 800df10:	001e847f 	.word	0x001e847f
 800df14:	003d08ff 	.word	0x003d08ff
 800df18:	431bde83 	.word	0x431bde83
 800df1c:	10624dd3 	.word	0x10624dd3
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	1e58      	subs	r0, r3, #1
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6859      	ldr	r1, [r3, #4]
 800df28:	460b      	mov	r3, r1
 800df2a:	009b      	lsls	r3, r3, #2
 800df2c:	440b      	add	r3, r1
 800df2e:	0099      	lsls	r1, r3, #2
 800df30:	440b      	add	r3, r1
 800df32:	fbb0 f3f3 	udiv	r3, r0, r3
 800df36:	3301      	adds	r3, #1
 800df38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800df3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800df40:	6879      	ldr	r1, [r7, #4]
 800df42:	6809      	ldr	r1, [r1, #0]
 800df44:	4313      	orrs	r3, r2
 800df46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	69da      	ldr	r2, [r3, #28]
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6a1b      	ldr	r3, [r3, #32]
 800df5a:	431a      	orrs	r2, r3
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	430a      	orrs	r2, r1
 800df62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	689b      	ldr	r3, [r3, #8]
 800df6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800df6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800df72:	687a      	ldr	r2, [r7, #4]
 800df74:	6911      	ldr	r1, [r2, #16]
 800df76:	687a      	ldr	r2, [r7, #4]
 800df78:	68d2      	ldr	r2, [r2, #12]
 800df7a:	4311      	orrs	r1, r2
 800df7c:	687a      	ldr	r2, [r7, #4]
 800df7e:	6812      	ldr	r2, [r2, #0]
 800df80:	430b      	orrs	r3, r1
 800df82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	68db      	ldr	r3, [r3, #12]
 800df8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	695a      	ldr	r2, [r3, #20]
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	699b      	ldr	r3, [r3, #24]
 800df96:	431a      	orrs	r2, r3
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	430a      	orrs	r2, r1
 800df9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	681a      	ldr	r2, [r3, #0]
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	f042 0201 	orr.w	r2, r2, #1
 800dfae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2220      	movs	r2, #32
 800dfba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800dfcc:	2300      	movs	r3, #0
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3710      	adds	r7, #16
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}
 800dfd6:	bf00      	nop

0800dfd8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b088      	sub	sp, #32
 800dfdc:	af02      	add	r7, sp, #8
 800dfde:	60f8      	str	r0, [r7, #12]
 800dfe0:	607a      	str	r2, [r7, #4]
 800dfe2:	461a      	mov	r2, r3
 800dfe4:	460b      	mov	r3, r1
 800dfe6:	817b      	strh	r3, [r7, #10]
 800dfe8:	4613      	mov	r3, r2
 800dfea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800dfec:	f7fe fb4c 	bl	800c688 <HAL_GetTick>
 800dff0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dff8:	b2db      	uxtb	r3, r3
 800dffa:	2b20      	cmp	r3, #32
 800dffc:	f040 80e0 	bne.w	800e1c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800e000:	697b      	ldr	r3, [r7, #20]
 800e002:	9300      	str	r3, [sp, #0]
 800e004:	2319      	movs	r3, #25
 800e006:	2201      	movs	r2, #1
 800e008:	4970      	ldr	r1, [pc, #448]	; (800e1cc <HAL_I2C_Master_Transmit+0x1f4>)
 800e00a:	68f8      	ldr	r0, [r7, #12]
 800e00c:	f000 fc8c 	bl	800e928 <I2C_WaitOnFlagUntilTimeout>
 800e010:	4603      	mov	r3, r0
 800e012:	2b00      	cmp	r3, #0
 800e014:	d001      	beq.n	800e01a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800e016:	2302      	movs	r3, #2
 800e018:	e0d3      	b.n	800e1c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e020:	2b01      	cmp	r3, #1
 800e022:	d101      	bne.n	800e028 <HAL_I2C_Master_Transmit+0x50>
 800e024:	2302      	movs	r3, #2
 800e026:	e0cc      	b.n	800e1c2 <HAL_I2C_Master_Transmit+0x1ea>
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	2201      	movs	r2, #1
 800e02c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	f003 0301 	and.w	r3, r3, #1
 800e03a:	2b01      	cmp	r3, #1
 800e03c:	d007      	beq.n	800e04e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	681a      	ldr	r2, [r3, #0]
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	f042 0201 	orr.w	r2, r2, #1
 800e04c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	681a      	ldr	r2, [r3, #0]
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e05c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	2221      	movs	r2, #33	; 0x21
 800e062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	2210      	movs	r2, #16
 800e06a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	2200      	movs	r2, #0
 800e072:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	687a      	ldr	r2, [r7, #4]
 800e078:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	893a      	ldrh	r2, [r7, #8]
 800e07e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e084:	b29a      	uxth	r2, r3
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	4a50      	ldr	r2, [pc, #320]	; (800e1d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800e08e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800e090:	8979      	ldrh	r1, [r7, #10]
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	6a3a      	ldr	r2, [r7, #32]
 800e096:	68f8      	ldr	r0, [r7, #12]
 800e098:	f000 faf6 	bl	800e688 <I2C_MasterRequestWrite>
 800e09c:	4603      	mov	r3, r0
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d001      	beq.n	800e0a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	e08d      	b.n	800e1c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	613b      	str	r3, [r7, #16]
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	695b      	ldr	r3, [r3, #20]
 800e0b0:	613b      	str	r3, [r7, #16]
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	699b      	ldr	r3, [r3, #24]
 800e0b8:	613b      	str	r3, [r7, #16]
 800e0ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800e0bc:	e066      	b.n	800e18c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e0be:	697a      	ldr	r2, [r7, #20]
 800e0c0:	6a39      	ldr	r1, [r7, #32]
 800e0c2:	68f8      	ldr	r0, [r7, #12]
 800e0c4:	f000 fd06 	bl	800ead4 <I2C_WaitOnTXEFlagUntilTimeout>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d00d      	beq.n	800e0ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0d2:	2b04      	cmp	r3, #4
 800e0d4:	d107      	bne.n	800e0e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	681a      	ldr	r2, [r3, #0]
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e0e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	e06b      	b.n	800e1c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ee:	781a      	ldrb	r2, [r3, #0]
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0fa:	1c5a      	adds	r2, r3, #1
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e104:	b29b      	uxth	r3, r3
 800e106:	3b01      	subs	r3, #1
 800e108:	b29a      	uxth	r2, r3
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e112:	3b01      	subs	r3, #1
 800e114:	b29a      	uxth	r2, r3
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	695b      	ldr	r3, [r3, #20]
 800e120:	f003 0304 	and.w	r3, r3, #4
 800e124:	2b04      	cmp	r3, #4
 800e126:	d11b      	bne.n	800e160 <HAL_I2C_Master_Transmit+0x188>
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d017      	beq.n	800e160 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e134:	781a      	ldrb	r2, [r3, #0]
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e140:	1c5a      	adds	r2, r3, #1
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e14a:	b29b      	uxth	r3, r3
 800e14c:	3b01      	subs	r3, #1
 800e14e:	b29a      	uxth	r2, r3
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e158:	3b01      	subs	r3, #1
 800e15a:	b29a      	uxth	r2, r3
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e160:	697a      	ldr	r2, [r7, #20]
 800e162:	6a39      	ldr	r1, [r7, #32]
 800e164:	68f8      	ldr	r0, [r7, #12]
 800e166:	f000 fcf6 	bl	800eb56 <I2C_WaitOnBTFFlagUntilTimeout>
 800e16a:	4603      	mov	r3, r0
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d00d      	beq.n	800e18c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e174:	2b04      	cmp	r3, #4
 800e176:	d107      	bne.n	800e188 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	681a      	ldr	r2, [r3, #0]
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e186:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800e188:	2301      	movs	r3, #1
 800e18a:	e01a      	b.n	800e1c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e190:	2b00      	cmp	r3, #0
 800e192:	d194      	bne.n	800e0be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	681a      	ldr	r2, [r3, #0]
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e1a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	2220      	movs	r2, #32
 800e1a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	e000      	b.n	800e1c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800e1c0:	2302      	movs	r3, #2
  }
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3718      	adds	r7, #24
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}
 800e1ca:	bf00      	nop
 800e1cc:	00100002 	.word	0x00100002
 800e1d0:	ffff0000 	.word	0xffff0000

0800e1d4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b08c      	sub	sp, #48	; 0x30
 800e1d8:	af02      	add	r7, sp, #8
 800e1da:	60f8      	str	r0, [r7, #12]
 800e1dc:	607a      	str	r2, [r7, #4]
 800e1de:	461a      	mov	r2, r3
 800e1e0:	460b      	mov	r3, r1
 800e1e2:	817b      	strh	r3, [r7, #10]
 800e1e4:	4613      	mov	r3, r2
 800e1e6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800e1ec:	f7fe fa4c 	bl	800c688 <HAL_GetTick>
 800e1f0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1f8:	b2db      	uxtb	r3, r3
 800e1fa:	2b20      	cmp	r3, #32
 800e1fc:	f040 8238 	bne.w	800e670 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800e200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e202:	9300      	str	r3, [sp, #0]
 800e204:	2319      	movs	r3, #25
 800e206:	2201      	movs	r2, #1
 800e208:	497e      	ldr	r1, [pc, #504]	; (800e404 <HAL_I2C_Master_Receive+0x230>)
 800e20a:	68f8      	ldr	r0, [r7, #12]
 800e20c:	f000 fb8c 	bl	800e928 <I2C_WaitOnFlagUntilTimeout>
 800e210:	4603      	mov	r3, r0
 800e212:	2b00      	cmp	r3, #0
 800e214:	d001      	beq.n	800e21a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800e216:	2302      	movs	r3, #2
 800e218:	e22b      	b.n	800e672 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e220:	2b01      	cmp	r3, #1
 800e222:	d101      	bne.n	800e228 <HAL_I2C_Master_Receive+0x54>
 800e224:	2302      	movs	r3, #2
 800e226:	e224      	b.n	800e672 <HAL_I2C_Master_Receive+0x49e>
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	2201      	movs	r2, #1
 800e22c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	f003 0301 	and.w	r3, r3, #1
 800e23a:	2b01      	cmp	r3, #1
 800e23c:	d007      	beq.n	800e24e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	681a      	ldr	r2, [r3, #0]
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	f042 0201 	orr.w	r2, r2, #1
 800e24c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	681a      	ldr	r2, [r3, #0]
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e25c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	2222      	movs	r2, #34	; 0x22
 800e262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	2210      	movs	r2, #16
 800e26a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	2200      	movs	r2, #0
 800e272:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	687a      	ldr	r2, [r7, #4]
 800e278:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	893a      	ldrh	r2, [r7, #8]
 800e27e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e284:	b29a      	uxth	r2, r3
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	4a5e      	ldr	r2, [pc, #376]	; (800e408 <HAL_I2C_Master_Receive+0x234>)
 800e28e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800e290:	8979      	ldrh	r1, [r7, #10]
 800e292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e296:	68f8      	ldr	r0, [r7, #12]
 800e298:	f000 fa78 	bl	800e78c <I2C_MasterRequestRead>
 800e29c:	4603      	mov	r3, r0
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d001      	beq.n	800e2a6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800e2a2:	2301      	movs	r3, #1
 800e2a4:	e1e5      	b.n	800e672 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d113      	bne.n	800e2d6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	61fb      	str	r3, [r7, #28]
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	695b      	ldr	r3, [r3, #20]
 800e2b8:	61fb      	str	r3, [r7, #28]
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	699b      	ldr	r3, [r3, #24]
 800e2c0:	61fb      	str	r3, [r7, #28]
 800e2c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	681a      	ldr	r2, [r3, #0]
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e2d2:	601a      	str	r2, [r3, #0]
 800e2d4:	e1b9      	b.n	800e64a <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e2da:	2b01      	cmp	r3, #1
 800e2dc:	d11d      	bne.n	800e31a <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	681a      	ldr	r2, [r3, #0]
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e2ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800e2ee:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	61bb      	str	r3, [r7, #24]
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	695b      	ldr	r3, [r3, #20]
 800e2fa:	61bb      	str	r3, [r7, #24]
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	699b      	ldr	r3, [r3, #24]
 800e302:	61bb      	str	r3, [r7, #24]
 800e304:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	681a      	ldr	r2, [r3, #0]
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e314:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800e316:	b662      	cpsie	i
 800e318:	e197      	b.n	800e64a <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e31e:	2b02      	cmp	r3, #2
 800e320:	d11d      	bne.n	800e35e <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	681a      	ldr	r2, [r3, #0]
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e330:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800e332:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e334:	2300      	movs	r3, #0
 800e336:	617b      	str	r3, [r7, #20]
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	695b      	ldr	r3, [r3, #20]
 800e33e:	617b      	str	r3, [r7, #20]
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	699b      	ldr	r3, [r3, #24]
 800e346:	617b      	str	r3, [r7, #20]
 800e348:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	681a      	ldr	r2, [r3, #0]
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e358:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800e35a:	b662      	cpsie	i
 800e35c:	e175      	b.n	800e64a <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	681a      	ldr	r2, [r3, #0]
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e36c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e36e:	2300      	movs	r3, #0
 800e370:	613b      	str	r3, [r7, #16]
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	695b      	ldr	r3, [r3, #20]
 800e378:	613b      	str	r3, [r7, #16]
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	699b      	ldr	r3, [r3, #24]
 800e380:	613b      	str	r3, [r7, #16]
 800e382:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800e384:	e161      	b.n	800e64a <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e38a:	2b03      	cmp	r3, #3
 800e38c:	f200 811a 	bhi.w	800e5c4 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e394:	2b01      	cmp	r3, #1
 800e396:	d123      	bne.n	800e3e0 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e39a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e39c:	68f8      	ldr	r0, [r7, #12]
 800e39e:	f000 fc1b 	bl	800ebd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d001      	beq.n	800e3ac <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	e162      	b.n	800e672 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	691a      	ldr	r2, [r3, #16]
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3b6:	b2d2      	uxtb	r2, r2
 800e3b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3be:	1c5a      	adds	r2, r3, #1
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e3c8:	3b01      	subs	r3, #1
 800e3ca:	b29a      	uxth	r2, r3
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e3d4:	b29b      	uxth	r3, r3
 800e3d6:	3b01      	subs	r3, #1
 800e3d8:	b29a      	uxth	r2, r3
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e3de:	e134      	b.n	800e64a <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e3e4:	2b02      	cmp	r3, #2
 800e3e6:	d150      	bne.n	800e48a <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800e3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ea:	9300      	str	r3, [sp, #0]
 800e3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	4906      	ldr	r1, [pc, #24]	; (800e40c <HAL_I2C_Master_Receive+0x238>)
 800e3f2:	68f8      	ldr	r0, [r7, #12]
 800e3f4:	f000 fa98 	bl	800e928 <I2C_WaitOnFlagUntilTimeout>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d008      	beq.n	800e410 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 800e3fe:	2301      	movs	r3, #1
 800e400:	e137      	b.n	800e672 <HAL_I2C_Master_Receive+0x49e>
 800e402:	bf00      	nop
 800e404:	00100002 	.word	0x00100002
 800e408:	ffff0000 	.word	0xffff0000
 800e40c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800e410:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	681a      	ldr	r2, [r3, #0]
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e420:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	691a      	ldr	r2, [r3, #16]
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e42c:	b2d2      	uxtb	r2, r2
 800e42e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e434:	1c5a      	adds	r2, r3, #1
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e43e:	3b01      	subs	r3, #1
 800e440:	b29a      	uxth	r2, r3
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e44a:	b29b      	uxth	r3, r3
 800e44c:	3b01      	subs	r3, #1
 800e44e:	b29a      	uxth	r2, r3
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800e454:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	691a      	ldr	r2, [r3, #16]
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e460:	b2d2      	uxtb	r2, r2
 800e462:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e468:	1c5a      	adds	r2, r3, #1
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e472:	3b01      	subs	r3, #1
 800e474:	b29a      	uxth	r2, r3
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e47e:	b29b      	uxth	r3, r3
 800e480:	3b01      	subs	r3, #1
 800e482:	b29a      	uxth	r2, r3
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e488:	e0df      	b.n	800e64a <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800e48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48c:	9300      	str	r3, [sp, #0]
 800e48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e490:	2200      	movs	r2, #0
 800e492:	497a      	ldr	r1, [pc, #488]	; (800e67c <HAL_I2C_Master_Receive+0x4a8>)
 800e494:	68f8      	ldr	r0, [r7, #12]
 800e496:	f000 fa47 	bl	800e928 <I2C_WaitOnFlagUntilTimeout>
 800e49a:	4603      	mov	r3, r0
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d001      	beq.n	800e4a4 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 800e4a0:	2301      	movs	r3, #1
 800e4a2:	e0e6      	b.n	800e672 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	681a      	ldr	r2, [r3, #0]
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e4b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800e4b4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	691a      	ldr	r2, [r3, #16]
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4c0:	b2d2      	uxtb	r2, r2
 800e4c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4c8:	1c5a      	adds	r2, r3, #1
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e4d2:	3b01      	subs	r3, #1
 800e4d4:	b29a      	uxth	r2, r3
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e4de:	b29b      	uxth	r3, r3
 800e4e0:	3b01      	subs	r3, #1
 800e4e2:	b29a      	uxth	r2, r3
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800e4e8:	4b65      	ldr	r3, [pc, #404]	; (800e680 <HAL_I2C_Master_Receive+0x4ac>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	08db      	lsrs	r3, r3, #3
 800e4ee:	4a65      	ldr	r2, [pc, #404]	; (800e684 <HAL_I2C_Master_Receive+0x4b0>)
 800e4f0:	fba2 2303 	umull	r2, r3, r2, r3
 800e4f4:	0a1a      	lsrs	r2, r3, #8
 800e4f6:	4613      	mov	r3, r2
 800e4f8:	009b      	lsls	r3, r3, #2
 800e4fa:	4413      	add	r3, r2
 800e4fc:	00da      	lsls	r2, r3, #3
 800e4fe:	1ad3      	subs	r3, r2, r3
 800e500:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800e502:	6a3b      	ldr	r3, [r7, #32]
 800e504:	3b01      	subs	r3, #1
 800e506:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800e508:	6a3b      	ldr	r3, [r7, #32]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d117      	bne.n	800e53e <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	2200      	movs	r2, #0
 800e512:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	2220      	movs	r2, #32
 800e518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	2200      	movs	r2, #0
 800e520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e528:	f043 0220 	orr.w	r2, r3, #32
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800e530:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	2200      	movs	r2, #0
 800e536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800e53a:	2301      	movs	r3, #1
 800e53c:	e099      	b.n	800e672 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	695b      	ldr	r3, [r3, #20]
 800e544:	f003 0304 	and.w	r3, r3, #4
 800e548:	2b04      	cmp	r3, #4
 800e54a:	d1da      	bne.n	800e502 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	681a      	ldr	r2, [r3, #0]
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e55a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	691a      	ldr	r2, [r3, #16]
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e566:	b2d2      	uxtb	r2, r2
 800e568:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e56e:	1c5a      	adds	r2, r3, #1
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e578:	3b01      	subs	r3, #1
 800e57a:	b29a      	uxth	r2, r3
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e584:	b29b      	uxth	r3, r3
 800e586:	3b01      	subs	r3, #1
 800e588:	b29a      	uxth	r2, r3
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e58e:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	691a      	ldr	r2, [r3, #16]
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e59a:	b2d2      	uxtb	r2, r2
 800e59c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5a2:	1c5a      	adds	r2, r3, #1
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e5ac:	3b01      	subs	r3, #1
 800e5ae:	b29a      	uxth	r2, r3
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e5b8:	b29b      	uxth	r3, r3
 800e5ba:	3b01      	subs	r3, #1
 800e5bc:	b29a      	uxth	r2, r3
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e5c2:	e042      	b.n	800e64a <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e5c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e5c8:	68f8      	ldr	r0, [r7, #12]
 800e5ca:	f000 fb05 	bl	800ebd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d001      	beq.n	800e5d8 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 800e5d4:	2301      	movs	r3, #1
 800e5d6:	e04c      	b.n	800e672 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	691a      	ldr	r2, [r3, #16]
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5e2:	b2d2      	uxtb	r2, r2
 800e5e4:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ea:	1c5a      	adds	r2, r3, #1
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e5f4:	3b01      	subs	r3, #1
 800e5f6:	b29a      	uxth	r2, r3
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e600:	b29b      	uxth	r3, r3
 800e602:	3b01      	subs	r3, #1
 800e604:	b29a      	uxth	r2, r3
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	695b      	ldr	r3, [r3, #20]
 800e610:	f003 0304 	and.w	r3, r3, #4
 800e614:	2b04      	cmp	r3, #4
 800e616:	d118      	bne.n	800e64a <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	691a      	ldr	r2, [r3, #16]
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e622:	b2d2      	uxtb	r2, r2
 800e624:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e62a:	1c5a      	adds	r2, r3, #1
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e634:	3b01      	subs	r3, #1
 800e636:	b29a      	uxth	r2, r3
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e640:	b29b      	uxth	r3, r3
 800e642:	3b01      	subs	r3, #1
 800e644:	b29a      	uxth	r2, r3
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e64e:	2b00      	cmp	r3, #0
 800e650:	f47f ae99 	bne.w	800e386 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	2220      	movs	r2, #32
 800e658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	2200      	movs	r2, #0
 800e660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	2200      	movs	r2, #0
 800e668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800e66c:	2300      	movs	r3, #0
 800e66e:	e000      	b.n	800e672 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 800e670:	2302      	movs	r3, #2
  }
}
 800e672:	4618      	mov	r0, r3
 800e674:	3728      	adds	r7, #40	; 0x28
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}
 800e67a:	bf00      	nop
 800e67c:	00010004 	.word	0x00010004
 800e680:	200000ac 	.word	0x200000ac
 800e684:	14f8b589 	.word	0x14f8b589

0800e688 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b088      	sub	sp, #32
 800e68c:	af02      	add	r7, sp, #8
 800e68e:	60f8      	str	r0, [r7, #12]
 800e690:	607a      	str	r2, [r7, #4]
 800e692:	603b      	str	r3, [r7, #0]
 800e694:	460b      	mov	r3, r1
 800e696:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e69c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	2b08      	cmp	r3, #8
 800e6a2:	d006      	beq.n	800e6b2 <I2C_MasterRequestWrite+0x2a>
 800e6a4:	697b      	ldr	r3, [r7, #20]
 800e6a6:	2b01      	cmp	r3, #1
 800e6a8:	d003      	beq.n	800e6b2 <I2C_MasterRequestWrite+0x2a>
 800e6aa:	697b      	ldr	r3, [r7, #20]
 800e6ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e6b0:	d108      	bne.n	800e6c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	681a      	ldr	r2, [r3, #0]
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e6c0:	601a      	str	r2, [r3, #0]
 800e6c2:	e00b      	b.n	800e6dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6c8:	2b12      	cmp	r3, #18
 800e6ca:	d107      	bne.n	800e6dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	681a      	ldr	r2, [r3, #0]
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e6da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	9300      	str	r3, [sp, #0]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e6e8:	68f8      	ldr	r0, [r7, #12]
 800e6ea:	f000 f91d 	bl	800e928 <I2C_WaitOnFlagUntilTimeout>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d00d      	beq.n	800e710 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e702:	d103      	bne.n	800e70c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e70a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e70c:	2303      	movs	r3, #3
 800e70e:	e035      	b.n	800e77c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	691b      	ldr	r3, [r3, #16]
 800e714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e718:	d108      	bne.n	800e72c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e71a:	897b      	ldrh	r3, [r7, #10]
 800e71c:	b2db      	uxtb	r3, r3
 800e71e:	461a      	mov	r2, r3
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e728:	611a      	str	r2, [r3, #16]
 800e72a:	e01b      	b.n	800e764 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e72c:	897b      	ldrh	r3, [r7, #10]
 800e72e:	11db      	asrs	r3, r3, #7
 800e730:	b2db      	uxtb	r3, r3
 800e732:	f003 0306 	and.w	r3, r3, #6
 800e736:	b2db      	uxtb	r3, r3
 800e738:	f063 030f 	orn	r3, r3, #15
 800e73c:	b2da      	uxtb	r2, r3
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	687a      	ldr	r2, [r7, #4]
 800e748:	490e      	ldr	r1, [pc, #56]	; (800e784 <I2C_MasterRequestWrite+0xfc>)
 800e74a:	68f8      	ldr	r0, [r7, #12]
 800e74c:	f000 f943 	bl	800e9d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e750:	4603      	mov	r3, r0
 800e752:	2b00      	cmp	r3, #0
 800e754:	d001      	beq.n	800e75a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800e756:	2301      	movs	r3, #1
 800e758:	e010      	b.n	800e77c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e75a:	897b      	ldrh	r3, [r7, #10]
 800e75c:	b2da      	uxtb	r2, r3
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	687a      	ldr	r2, [r7, #4]
 800e768:	4907      	ldr	r1, [pc, #28]	; (800e788 <I2C_MasterRequestWrite+0x100>)
 800e76a:	68f8      	ldr	r0, [r7, #12]
 800e76c:	f000 f933 	bl	800e9d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e770:	4603      	mov	r3, r0
 800e772:	2b00      	cmp	r3, #0
 800e774:	d001      	beq.n	800e77a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800e776:	2301      	movs	r3, #1
 800e778:	e000      	b.n	800e77c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800e77a:	2300      	movs	r3, #0
}
 800e77c:	4618      	mov	r0, r3
 800e77e:	3718      	adds	r7, #24
 800e780:	46bd      	mov	sp, r7
 800e782:	bd80      	pop	{r7, pc}
 800e784:	00010008 	.word	0x00010008
 800e788:	00010002 	.word	0x00010002

0800e78c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b088      	sub	sp, #32
 800e790:	af02      	add	r7, sp, #8
 800e792:	60f8      	str	r0, [r7, #12]
 800e794:	607a      	str	r2, [r7, #4]
 800e796:	603b      	str	r3, [r7, #0]
 800e798:	460b      	mov	r3, r1
 800e79a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7a0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	681a      	ldr	r2, [r3, #0]
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e7b0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	2b08      	cmp	r3, #8
 800e7b6:	d006      	beq.n	800e7c6 <I2C_MasterRequestRead+0x3a>
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	2b01      	cmp	r3, #1
 800e7bc:	d003      	beq.n	800e7c6 <I2C_MasterRequestRead+0x3a>
 800e7be:	697b      	ldr	r3, [r7, #20]
 800e7c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e7c4:	d108      	bne.n	800e7d8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	681a      	ldr	r2, [r3, #0]
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e7d4:	601a      	str	r2, [r3, #0]
 800e7d6:	e00b      	b.n	800e7f0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7dc:	2b11      	cmp	r3, #17
 800e7de:	d107      	bne.n	800e7f0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	681a      	ldr	r2, [r3, #0]
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e7ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	9300      	str	r3, [sp, #0]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e7fc:	68f8      	ldr	r0, [r7, #12]
 800e7fe:	f000 f893 	bl	800e928 <I2C_WaitOnFlagUntilTimeout>
 800e802:	4603      	mov	r3, r0
 800e804:	2b00      	cmp	r3, #0
 800e806:	d00d      	beq.n	800e824 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e816:	d103      	bne.n	800e820 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e81e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e820:	2303      	movs	r3, #3
 800e822:	e079      	b.n	800e918 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	691b      	ldr	r3, [r3, #16]
 800e828:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e82c:	d108      	bne.n	800e840 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e82e:	897b      	ldrh	r3, [r7, #10]
 800e830:	b2db      	uxtb	r3, r3
 800e832:	f043 0301 	orr.w	r3, r3, #1
 800e836:	b2da      	uxtb	r2, r3
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	611a      	str	r2, [r3, #16]
 800e83e:	e05f      	b.n	800e900 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e840:	897b      	ldrh	r3, [r7, #10]
 800e842:	11db      	asrs	r3, r3, #7
 800e844:	b2db      	uxtb	r3, r3
 800e846:	f003 0306 	and.w	r3, r3, #6
 800e84a:	b2db      	uxtb	r3, r3
 800e84c:	f063 030f 	orn	r3, r3, #15
 800e850:	b2da      	uxtb	r2, r3
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	687a      	ldr	r2, [r7, #4]
 800e85c:	4930      	ldr	r1, [pc, #192]	; (800e920 <I2C_MasterRequestRead+0x194>)
 800e85e:	68f8      	ldr	r0, [r7, #12]
 800e860:	f000 f8b9 	bl	800e9d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e864:	4603      	mov	r3, r0
 800e866:	2b00      	cmp	r3, #0
 800e868:	d001      	beq.n	800e86e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800e86a:	2301      	movs	r3, #1
 800e86c:	e054      	b.n	800e918 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e86e:	897b      	ldrh	r3, [r7, #10]
 800e870:	b2da      	uxtb	r2, r3
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	687a      	ldr	r2, [r7, #4]
 800e87c:	4929      	ldr	r1, [pc, #164]	; (800e924 <I2C_MasterRequestRead+0x198>)
 800e87e:	68f8      	ldr	r0, [r7, #12]
 800e880:	f000 f8a9 	bl	800e9d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e884:	4603      	mov	r3, r0
 800e886:	2b00      	cmp	r3, #0
 800e888:	d001      	beq.n	800e88e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800e88a:	2301      	movs	r3, #1
 800e88c:	e044      	b.n	800e918 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e88e:	2300      	movs	r3, #0
 800e890:	613b      	str	r3, [r7, #16]
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	695b      	ldr	r3, [r3, #20]
 800e898:	613b      	str	r3, [r7, #16]
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	699b      	ldr	r3, [r3, #24]
 800e8a0:	613b      	str	r3, [r7, #16]
 800e8a2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	681a      	ldr	r2, [r3, #0]
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e8b2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	9300      	str	r3, [sp, #0]
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e8c0:	68f8      	ldr	r0, [r7, #12]
 800e8c2:	f000 f831 	bl	800e928 <I2C_WaitOnFlagUntilTimeout>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d00d      	beq.n	800e8e8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e8d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e8da:	d103      	bne.n	800e8e4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e8e2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800e8e4:	2303      	movs	r3, #3
 800e8e6:	e017      	b.n	800e918 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800e8e8:	897b      	ldrh	r3, [r7, #10]
 800e8ea:	11db      	asrs	r3, r3, #7
 800e8ec:	b2db      	uxtb	r3, r3
 800e8ee:	f003 0306 	and.w	r3, r3, #6
 800e8f2:	b2db      	uxtb	r3, r3
 800e8f4:	f063 030e 	orn	r3, r3, #14
 800e8f8:	b2da      	uxtb	r2, r3
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	687a      	ldr	r2, [r7, #4]
 800e904:	4907      	ldr	r1, [pc, #28]	; (800e924 <I2C_MasterRequestRead+0x198>)
 800e906:	68f8      	ldr	r0, [r7, #12]
 800e908:	f000 f865 	bl	800e9d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e90c:	4603      	mov	r3, r0
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d001      	beq.n	800e916 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800e912:	2301      	movs	r3, #1
 800e914:	e000      	b.n	800e918 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800e916:	2300      	movs	r3, #0
}
 800e918:	4618      	mov	r0, r3
 800e91a:	3718      	adds	r7, #24
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}
 800e920:	00010008 	.word	0x00010008
 800e924:	00010002 	.word	0x00010002

0800e928 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b084      	sub	sp, #16
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	60f8      	str	r0, [r7, #12]
 800e930:	60b9      	str	r1, [r7, #8]
 800e932:	603b      	str	r3, [r7, #0]
 800e934:	4613      	mov	r3, r2
 800e936:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e938:	e025      	b.n	800e986 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e940:	d021      	beq.n	800e986 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e942:	f7fd fea1 	bl	800c688 <HAL_GetTick>
 800e946:	4602      	mov	r2, r0
 800e948:	69bb      	ldr	r3, [r7, #24]
 800e94a:	1ad3      	subs	r3, r2, r3
 800e94c:	683a      	ldr	r2, [r7, #0]
 800e94e:	429a      	cmp	r2, r3
 800e950:	d302      	bcc.n	800e958 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d116      	bne.n	800e986 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	2200      	movs	r2, #0
 800e95c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	2220      	movs	r2, #32
 800e962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	2200      	movs	r2, #0
 800e96a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e972:	f043 0220 	orr.w	r2, r3, #32
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	2200      	movs	r2, #0
 800e97e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e982:	2301      	movs	r3, #1
 800e984:	e023      	b.n	800e9ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	0c1b      	lsrs	r3, r3, #16
 800e98a:	b2db      	uxtb	r3, r3
 800e98c:	2b01      	cmp	r3, #1
 800e98e:	d10d      	bne.n	800e9ac <I2C_WaitOnFlagUntilTimeout+0x84>
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	695b      	ldr	r3, [r3, #20]
 800e996:	43da      	mvns	r2, r3
 800e998:	68bb      	ldr	r3, [r7, #8]
 800e99a:	4013      	ands	r3, r2
 800e99c:	b29b      	uxth	r3, r3
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	bf0c      	ite	eq
 800e9a2:	2301      	moveq	r3, #1
 800e9a4:	2300      	movne	r3, #0
 800e9a6:	b2db      	uxtb	r3, r3
 800e9a8:	461a      	mov	r2, r3
 800e9aa:	e00c      	b.n	800e9c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	699b      	ldr	r3, [r3, #24]
 800e9b2:	43da      	mvns	r2, r3
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	4013      	ands	r3, r2
 800e9b8:	b29b      	uxth	r3, r3
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	bf0c      	ite	eq
 800e9be:	2301      	moveq	r3, #1
 800e9c0:	2300      	movne	r3, #0
 800e9c2:	b2db      	uxtb	r3, r3
 800e9c4:	461a      	mov	r2, r3
 800e9c6:	79fb      	ldrb	r3, [r7, #7]
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d0b6      	beq.n	800e93a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e9cc:	2300      	movs	r3, #0
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	3710      	adds	r7, #16
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}

0800e9d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800e9d6:	b580      	push	{r7, lr}
 800e9d8:	b084      	sub	sp, #16
 800e9da:	af00      	add	r7, sp, #0
 800e9dc:	60f8      	str	r0, [r7, #12]
 800e9de:	60b9      	str	r1, [r7, #8]
 800e9e0:	607a      	str	r2, [r7, #4]
 800e9e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e9e4:	e051      	b.n	800ea8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	695b      	ldr	r3, [r3, #20]
 800e9ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e9f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e9f4:	d123      	bne.n	800ea3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	681a      	ldr	r2, [r3, #0]
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ea04:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ea0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	2200      	movs	r2, #0
 800ea14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	2220      	movs	r2, #32
 800ea1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	2200      	movs	r2, #0
 800ea22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea2a:	f043 0204 	orr.w	r2, r3, #4
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	2200      	movs	r2, #0
 800ea36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	e046      	b.n	800eacc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea44:	d021      	beq.n	800ea8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ea46:	f7fd fe1f 	bl	800c688 <HAL_GetTick>
 800ea4a:	4602      	mov	r2, r0
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	1ad3      	subs	r3, r2, r3
 800ea50:	687a      	ldr	r2, [r7, #4]
 800ea52:	429a      	cmp	r2, r3
 800ea54:	d302      	bcc.n	800ea5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d116      	bne.n	800ea8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	2200      	movs	r2, #0
 800ea60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	2220      	movs	r2, #32
 800ea66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea76:	f043 0220 	orr.w	r2, r3, #32
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	2200      	movs	r2, #0
 800ea82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ea86:	2301      	movs	r3, #1
 800ea88:	e020      	b.n	800eacc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	0c1b      	lsrs	r3, r3, #16
 800ea8e:	b2db      	uxtb	r3, r3
 800ea90:	2b01      	cmp	r3, #1
 800ea92:	d10c      	bne.n	800eaae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	695b      	ldr	r3, [r3, #20]
 800ea9a:	43da      	mvns	r2, r3
 800ea9c:	68bb      	ldr	r3, [r7, #8]
 800ea9e:	4013      	ands	r3, r2
 800eaa0:	b29b      	uxth	r3, r3
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	bf14      	ite	ne
 800eaa6:	2301      	movne	r3, #1
 800eaa8:	2300      	moveq	r3, #0
 800eaaa:	b2db      	uxtb	r3, r3
 800eaac:	e00b      	b.n	800eac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	699b      	ldr	r3, [r3, #24]
 800eab4:	43da      	mvns	r2, r3
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	4013      	ands	r3, r2
 800eaba:	b29b      	uxth	r3, r3
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	bf14      	ite	ne
 800eac0:	2301      	movne	r3, #1
 800eac2:	2300      	moveq	r3, #0
 800eac4:	b2db      	uxtb	r3, r3
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d18d      	bne.n	800e9e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800eaca:	2300      	movs	r3, #0
}
 800eacc:	4618      	mov	r0, r3
 800eace:	3710      	adds	r7, #16
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}

0800ead4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b084      	sub	sp, #16
 800ead8:	af00      	add	r7, sp, #0
 800eada:	60f8      	str	r0, [r7, #12]
 800eadc:	60b9      	str	r1, [r7, #8]
 800eade:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800eae0:	e02d      	b.n	800eb3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800eae2:	68f8      	ldr	r0, [r7, #12]
 800eae4:	f000 f8ce 	bl	800ec84 <I2C_IsAcknowledgeFailed>
 800eae8:	4603      	mov	r3, r0
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d001      	beq.n	800eaf2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800eaee:	2301      	movs	r3, #1
 800eaf0:	e02d      	b.n	800eb4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaf8:	d021      	beq.n	800eb3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eafa:	f7fd fdc5 	bl	800c688 <HAL_GetTick>
 800eafe:	4602      	mov	r2, r0
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	1ad3      	subs	r3, r2, r3
 800eb04:	68ba      	ldr	r2, [r7, #8]
 800eb06:	429a      	cmp	r2, r3
 800eb08:	d302      	bcc.n	800eb10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d116      	bne.n	800eb3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	2200      	movs	r2, #0
 800eb14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	2220      	movs	r2, #32
 800eb1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	2200      	movs	r2, #0
 800eb22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb2a:	f043 0220 	orr.w	r2, r3, #32
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	2200      	movs	r2, #0
 800eb36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800eb3a:	2301      	movs	r3, #1
 800eb3c:	e007      	b.n	800eb4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	695b      	ldr	r3, [r3, #20]
 800eb44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb48:	2b80      	cmp	r3, #128	; 0x80
 800eb4a:	d1ca      	bne.n	800eae2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800eb4c:	2300      	movs	r3, #0
}
 800eb4e:	4618      	mov	r0, r3
 800eb50:	3710      	adds	r7, #16
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}

0800eb56 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800eb56:	b580      	push	{r7, lr}
 800eb58:	b084      	sub	sp, #16
 800eb5a:	af00      	add	r7, sp, #0
 800eb5c:	60f8      	str	r0, [r7, #12]
 800eb5e:	60b9      	str	r1, [r7, #8]
 800eb60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800eb62:	e02d      	b.n	800ebc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800eb64:	68f8      	ldr	r0, [r7, #12]
 800eb66:	f000 f88d 	bl	800ec84 <I2C_IsAcknowledgeFailed>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d001      	beq.n	800eb74 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800eb70:	2301      	movs	r3, #1
 800eb72:	e02d      	b.n	800ebd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb7a:	d021      	beq.n	800ebc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eb7c:	f7fd fd84 	bl	800c688 <HAL_GetTick>
 800eb80:	4602      	mov	r2, r0
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	1ad3      	subs	r3, r2, r3
 800eb86:	68ba      	ldr	r2, [r7, #8]
 800eb88:	429a      	cmp	r2, r3
 800eb8a:	d302      	bcc.n	800eb92 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d116      	bne.n	800ebc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	2200      	movs	r2, #0
 800eb96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	2220      	movs	r2, #32
 800eb9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	2200      	movs	r2, #0
 800eba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebac:	f043 0220 	orr.w	r2, r3, #32
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ebbc:	2301      	movs	r3, #1
 800ebbe:	e007      	b.n	800ebd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	695b      	ldr	r3, [r3, #20]
 800ebc6:	f003 0304 	and.w	r3, r3, #4
 800ebca:	2b04      	cmp	r3, #4
 800ebcc:	d1ca      	bne.n	800eb64 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ebce:	2300      	movs	r3, #0
}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3710      	adds	r7, #16
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}

0800ebd8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b084      	sub	sp, #16
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	60f8      	str	r0, [r7, #12]
 800ebe0:	60b9      	str	r1, [r7, #8]
 800ebe2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ebe4:	e042      	b.n	800ec6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	695b      	ldr	r3, [r3, #20]
 800ebec:	f003 0310 	and.w	r3, r3, #16
 800ebf0:	2b10      	cmp	r3, #16
 800ebf2:	d119      	bne.n	800ec28 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	f06f 0210 	mvn.w	r2, #16
 800ebfc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	2200      	movs	r2, #0
 800ec02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	2220      	movs	r2, #32
 800ec08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	2200      	movs	r2, #0
 800ec10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	2200      	movs	r2, #0
 800ec20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ec24:	2301      	movs	r3, #1
 800ec26:	e029      	b.n	800ec7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ec28:	f7fd fd2e 	bl	800c688 <HAL_GetTick>
 800ec2c:	4602      	mov	r2, r0
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	1ad3      	subs	r3, r2, r3
 800ec32:	68ba      	ldr	r2, [r7, #8]
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d302      	bcc.n	800ec3e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ec38:	68bb      	ldr	r3, [r7, #8]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d116      	bne.n	800ec6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	2200      	movs	r2, #0
 800ec42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	2220      	movs	r2, #32
 800ec48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	2200      	movs	r2, #0
 800ec50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec58:	f043 0220 	orr.w	r2, r3, #32
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	2200      	movs	r2, #0
 800ec64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ec68:	2301      	movs	r3, #1
 800ec6a:	e007      	b.n	800ec7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	695b      	ldr	r3, [r3, #20]
 800ec72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec76:	2b40      	cmp	r3, #64	; 0x40
 800ec78:	d1b5      	bne.n	800ebe6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ec7a:	2300      	movs	r3, #0
}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	3710      	adds	r7, #16
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd80      	pop	{r7, pc}

0800ec84 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ec84:	b480      	push	{r7}
 800ec86:	b083      	sub	sp, #12
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	695b      	ldr	r3, [r3, #20]
 800ec92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ec96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ec9a:	d11b      	bne.n	800ecd4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800eca4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2200      	movs	r2, #0
 800ecaa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2220      	movs	r2, #32
 800ecb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecc0:	f043 0204 	orr.w	r2, r3, #4
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2200      	movs	r2, #0
 800eccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	e000      	b.n	800ecd6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ecd4:	2300      	movs	r3, #0
}
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	370c      	adds	r7, #12
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bc80      	pop	{r7}
 800ecde:	4770      	bx	lr

0800ece0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b086      	sub	sp, #24
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d101      	bne.n	800ecf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ecee:	2301      	movs	r3, #1
 800ecf0:	e35c      	b.n	800f3ac <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d01c      	beq.n	800ed34 <HAL_RCC_OscConfig+0x54>
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	f003 0301 	and.w	r3, r3, #1
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d116      	bne.n	800ed34 <HAL_RCC_OscConfig+0x54>
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	f003 0302 	and.w	r3, r3, #2
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d110      	bne.n	800ed34 <HAL_RCC_OscConfig+0x54>
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	f003 0308 	and.w	r3, r3, #8
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d10a      	bne.n	800ed34 <HAL_RCC_OscConfig+0x54>
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	f003 0304 	and.w	r3, r3, #4
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d104      	bne.n	800ed34 <HAL_RCC_OscConfig+0x54>
 800ed2a:	f240 1167 	movw	r1, #359	; 0x167
 800ed2e:	48a5      	ldr	r0, [pc, #660]	; (800efc4 <HAL_RCC_OscConfig+0x2e4>)
 800ed30:	f7fd f842 	bl	800bdb8 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	f003 0301 	and.w	r3, r3, #1
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	f000 809a 	beq.w	800ee76 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	685b      	ldr	r3, [r3, #4]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d00e      	beq.n	800ed68 <HAL_RCC_OscConfig+0x88>
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	685b      	ldr	r3, [r3, #4]
 800ed4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed52:	d009      	beq.n	800ed68 <HAL_RCC_OscConfig+0x88>
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	685b      	ldr	r3, [r3, #4]
 800ed58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ed5c:	d004      	beq.n	800ed68 <HAL_RCC_OscConfig+0x88>
 800ed5e:	f240 116d 	movw	r1, #365	; 0x16d
 800ed62:	4898      	ldr	r0, [pc, #608]	; (800efc4 <HAL_RCC_OscConfig+0x2e4>)
 800ed64:	f7fd f828 	bl	800bdb8 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ed68:	4b97      	ldr	r3, [pc, #604]	; (800efc8 <HAL_RCC_OscConfig+0x2e8>)
 800ed6a:	685b      	ldr	r3, [r3, #4]
 800ed6c:	f003 030c 	and.w	r3, r3, #12
 800ed70:	2b04      	cmp	r3, #4
 800ed72:	d00c      	beq.n	800ed8e <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800ed74:	4b94      	ldr	r3, [pc, #592]	; (800efc8 <HAL_RCC_OscConfig+0x2e8>)
 800ed76:	685b      	ldr	r3, [r3, #4]
 800ed78:	f003 030c 	and.w	r3, r3, #12
 800ed7c:	2b08      	cmp	r3, #8
 800ed7e:	d112      	bne.n	800eda6 <HAL_RCC_OscConfig+0xc6>
 800ed80:	4b91      	ldr	r3, [pc, #580]	; (800efc8 <HAL_RCC_OscConfig+0x2e8>)
 800ed82:	685b      	ldr	r3, [r3, #4]
 800ed84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ed88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed8c:	d10b      	bne.n	800eda6 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ed8e:	4b8e      	ldr	r3, [pc, #568]	; (800efc8 <HAL_RCC_OscConfig+0x2e8>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d06c      	beq.n	800ee74 <HAL_RCC_OscConfig+0x194>
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	685b      	ldr	r3, [r3, #4]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d168      	bne.n	800ee74 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800eda2:	2301      	movs	r3, #1
 800eda4:	e302      	b.n	800f3ac <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	685b      	ldr	r3, [r3, #4]
 800edaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800edae:	d106      	bne.n	800edbe <HAL_RCC_OscConfig+0xde>
 800edb0:	4b85      	ldr	r3, [pc, #532]	; (800efc8 <HAL_RCC_OscConfig+0x2e8>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	4a84      	ldr	r2, [pc, #528]	; (800efc8 <HAL_RCC_OscConfig+0x2e8>)
 800edb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800edba:	6013      	str	r3, [r2, #0]
 800edbc:	e02e      	b.n	800ee1c <HAL_RCC_OscConfig+0x13c>
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	685b      	ldr	r3, [r3, #4]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d10c      	bne.n	800ede0 <HAL_RCC_OscConfig+0x100>
 800edc6:	4b80      	ldr	r3, [pc, #512]	; (800efc8 <HAL_RCC_OscConfig+0x2e8>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	4a7f      	ldr	r2, [pc, #508]	; (800efc8 <HAL_RCC_OscConfig+0x2e8>)
 800edcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800edd0:	6013      	str	r3, [r2, #0]
 800edd2:	4b7d      	ldr	r3, [pc, #500]	; (800efc8 <HAL_RCC_OscConfig+0x2e8>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	4a7c      	ldr	r2, [pc, #496]	; (800efc8 <HAL_RCC_OscConfig+0x2e8>)
 800edd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800eddc:	6013      	str	r3, [r2, #0]
 800edde:	e01d      	b.n	800ee1c <HAL_RCC_OscConfig+0x13c>
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	685b      	ldr	r3, [r3, #4]
 800ede4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ede8:	d10c      	bne.n	800ee04 <HAL_RCC_OscConfig+0x124>
 800edea:	4b77      	ldr	r3, [pc, #476]	; (800efc8 <HAL_RCC_OscConfig+0x2e8>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	4a76      	ldr	r2, [pc, #472]	; (800efc8 <HAL_RCC_OscConfig+0x2e8>)
 800edf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800edf4:	6013      	str	r3, [r2, #0]
 800edf6:	4b74      	ldr	r3, [pc, #464]	; (800efc8 <HAL_RCC_OscConfig+0x2e8>)
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	4a73      	ldr	r2, [pc, #460]	; (800efc8 <HAL_RCC_OscConfig+0x2e8>)
 800edfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ee00:	6013      	str	r3, [r2, #0]
 800ee02:	e00b      	b.n	800ee1c <HAL_RCC_OscConfig+0x13c>
 800ee04:	4b70      	ldr	r3, [pc, #448]	; (800efc8 <HAL_RCC_OscConfig+0x2e8>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	4a6f      	ldr	r2, [pc, #444]	; (800efc8 <HAL_RCC_OscConfig+0x2e8>)
 800ee0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ee0e:	6013      	str	r3, [r2, #0]
 800ee10:	4b6d      	ldr	r3, [pc, #436]	; (800efc8 <HAL_RCC_OscConfig+0x2e8>)
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	4a6c      	ldr	r2, [pc, #432]	; (800efc8 <HAL_RCC_OscConfig+0x2e8>)
 800ee16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ee1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	685b      	ldr	r3, [r3, #4]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d013      	beq.n	800ee4c <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ee24:	f7fd fc30 	bl	800c688 <HAL_GetTick>
 800ee28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ee2a:	e008      	b.n	800ee3e <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ee2c:	f7fd fc2c 	bl	800c688 <HAL_GetTick>
 800ee30:	4602      	mov	r2, r0
 800ee32:	693b      	ldr	r3, [r7, #16]
 800ee34:	1ad3      	subs	r3, r2, r3
 800ee36:	2b64      	cmp	r3, #100	; 0x64
 800ee38:	d901      	bls.n	800ee3e <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 800ee3a:	2303      	movs	r3, #3
 800ee3c:	e2b6      	b.n	800f3ac <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ee3e:	4b62      	ldr	r3, [pc, #392]	; (800efc8 <HAL_RCC_OscConfig+0x2e8>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d0f0      	beq.n	800ee2c <HAL_RCC_OscConfig+0x14c>
 800ee4a:	e014      	b.n	800ee76 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ee4c:	f7fd fc1c 	bl	800c688 <HAL_GetTick>
 800ee50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ee52:	e008      	b.n	800ee66 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ee54:	f7fd fc18 	bl	800c688 <HAL_GetTick>
 800ee58:	4602      	mov	r2, r0
 800ee5a:	693b      	ldr	r3, [r7, #16]
 800ee5c:	1ad3      	subs	r3, r2, r3
 800ee5e:	2b64      	cmp	r3, #100	; 0x64
 800ee60:	d901      	bls.n	800ee66 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800ee62:	2303      	movs	r3, #3
 800ee64:	e2a2      	b.n	800f3ac <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ee66:	4b58      	ldr	r3, [pc, #352]	; (800efc8 <HAL_RCC_OscConfig+0x2e8>)
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d1f0      	bne.n	800ee54 <HAL_RCC_OscConfig+0x174>
 800ee72:	e000      	b.n	800ee76 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ee74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	f003 0302 	and.w	r3, r3, #2
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d079      	beq.n	800ef76 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	691b      	ldr	r3, [r3, #16]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d008      	beq.n	800ee9c <HAL_RCC_OscConfig+0x1bc>
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	691b      	ldr	r3, [r3, #16]
 800ee8e:	2b01      	cmp	r3, #1
 800ee90:	d004      	beq.n	800ee9c <HAL_RCC_OscConfig+0x1bc>
 800ee92:	f240 11a1 	movw	r1, #417	; 0x1a1
 800ee96:	484b      	ldr	r0, [pc, #300]	; (800efc4 <HAL_RCC_OscConfig+0x2e4>)
 800ee98:	f7fc ff8e 	bl	800bdb8 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	695b      	ldr	r3, [r3, #20]
 800eea0:	2b1f      	cmp	r3, #31
 800eea2:	d904      	bls.n	800eeae <HAL_RCC_OscConfig+0x1ce>
 800eea4:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 800eea8:	4846      	ldr	r0, [pc, #280]	; (800efc4 <HAL_RCC_OscConfig+0x2e4>)
 800eeaa:	f7fc ff85 	bl	800bdb8 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800eeae:	4b46      	ldr	r3, [pc, #280]	; (800efc8 <HAL_RCC_OscConfig+0x2e8>)
 800eeb0:	685b      	ldr	r3, [r3, #4]
 800eeb2:	f003 030c 	and.w	r3, r3, #12
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d00b      	beq.n	800eed2 <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800eeba:	4b43      	ldr	r3, [pc, #268]	; (800efc8 <HAL_RCC_OscConfig+0x2e8>)
 800eebc:	685b      	ldr	r3, [r3, #4]
 800eebe:	f003 030c 	and.w	r3, r3, #12
 800eec2:	2b08      	cmp	r3, #8
 800eec4:	d11c      	bne.n	800ef00 <HAL_RCC_OscConfig+0x220>
 800eec6:	4b40      	ldr	r3, [pc, #256]	; (800efc8 <HAL_RCC_OscConfig+0x2e8>)
 800eec8:	685b      	ldr	r3, [r3, #4]
 800eeca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d116      	bne.n	800ef00 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800eed2:	4b3d      	ldr	r3, [pc, #244]	; (800efc8 <HAL_RCC_OscConfig+0x2e8>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	f003 0302 	and.w	r3, r3, #2
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d005      	beq.n	800eeea <HAL_RCC_OscConfig+0x20a>
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	691b      	ldr	r3, [r3, #16]
 800eee2:	2b01      	cmp	r3, #1
 800eee4:	d001      	beq.n	800eeea <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 800eee6:	2301      	movs	r3, #1
 800eee8:	e260      	b.n	800f3ac <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800eeea:	4b37      	ldr	r3, [pc, #220]	; (800efc8 <HAL_RCC_OscConfig+0x2e8>)
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	695b      	ldr	r3, [r3, #20]
 800eef6:	00db      	lsls	r3, r3, #3
 800eef8:	4933      	ldr	r1, [pc, #204]	; (800efc8 <HAL_RCC_OscConfig+0x2e8>)
 800eefa:	4313      	orrs	r3, r2
 800eefc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800eefe:	e03a      	b.n	800ef76 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	691b      	ldr	r3, [r3, #16]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d020      	beq.n	800ef4a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ef08:	4b30      	ldr	r3, [pc, #192]	; (800efcc <HAL_RCC_OscConfig+0x2ec>)
 800ef0a:	2201      	movs	r2, #1
 800ef0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ef0e:	f7fd fbbb 	bl	800c688 <HAL_GetTick>
 800ef12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ef14:	e008      	b.n	800ef28 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ef16:	f7fd fbb7 	bl	800c688 <HAL_GetTick>
 800ef1a:	4602      	mov	r2, r0
 800ef1c:	693b      	ldr	r3, [r7, #16]
 800ef1e:	1ad3      	subs	r3, r2, r3
 800ef20:	2b02      	cmp	r3, #2
 800ef22:	d901      	bls.n	800ef28 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800ef24:	2303      	movs	r3, #3
 800ef26:	e241      	b.n	800f3ac <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ef28:	4b27      	ldr	r3, [pc, #156]	; (800efc8 <HAL_RCC_OscConfig+0x2e8>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	f003 0302 	and.w	r3, r3, #2
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d0f0      	beq.n	800ef16 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ef34:	4b24      	ldr	r3, [pc, #144]	; (800efc8 <HAL_RCC_OscConfig+0x2e8>)
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	695b      	ldr	r3, [r3, #20]
 800ef40:	00db      	lsls	r3, r3, #3
 800ef42:	4921      	ldr	r1, [pc, #132]	; (800efc8 <HAL_RCC_OscConfig+0x2e8>)
 800ef44:	4313      	orrs	r3, r2
 800ef46:	600b      	str	r3, [r1, #0]
 800ef48:	e015      	b.n	800ef76 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ef4a:	4b20      	ldr	r3, [pc, #128]	; (800efcc <HAL_RCC_OscConfig+0x2ec>)
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ef50:	f7fd fb9a 	bl	800c688 <HAL_GetTick>
 800ef54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ef56:	e008      	b.n	800ef6a <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ef58:	f7fd fb96 	bl	800c688 <HAL_GetTick>
 800ef5c:	4602      	mov	r2, r0
 800ef5e:	693b      	ldr	r3, [r7, #16]
 800ef60:	1ad3      	subs	r3, r2, r3
 800ef62:	2b02      	cmp	r3, #2
 800ef64:	d901      	bls.n	800ef6a <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 800ef66:	2303      	movs	r3, #3
 800ef68:	e220      	b.n	800f3ac <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ef6a:	4b17      	ldr	r3, [pc, #92]	; (800efc8 <HAL_RCC_OscConfig+0x2e8>)
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	f003 0302 	and.w	r3, r3, #2
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d1f0      	bne.n	800ef58 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	f003 0308 	and.w	r3, r3, #8
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d048      	beq.n	800f014 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	699b      	ldr	r3, [r3, #24]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d008      	beq.n	800ef9c <HAL_RCC_OscConfig+0x2bc>
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	699b      	ldr	r3, [r3, #24]
 800ef8e:	2b01      	cmp	r3, #1
 800ef90:	d004      	beq.n	800ef9c <HAL_RCC_OscConfig+0x2bc>
 800ef92:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800ef96:	480b      	ldr	r0, [pc, #44]	; (800efc4 <HAL_RCC_OscConfig+0x2e4>)
 800ef98:	f7fc ff0e 	bl	800bdb8 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	699b      	ldr	r3, [r3, #24]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d021      	beq.n	800efe8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800efa4:	4b0a      	ldr	r3, [pc, #40]	; (800efd0 <HAL_RCC_OscConfig+0x2f0>)
 800efa6:	2201      	movs	r2, #1
 800efa8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800efaa:	f7fd fb6d 	bl	800c688 <HAL_GetTick>
 800efae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800efb0:	e010      	b.n	800efd4 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800efb2:	f7fd fb69 	bl	800c688 <HAL_GetTick>
 800efb6:	4602      	mov	r2, r0
 800efb8:	693b      	ldr	r3, [r7, #16]
 800efba:	1ad3      	subs	r3, r2, r3
 800efbc:	2b02      	cmp	r3, #2
 800efbe:	d909      	bls.n	800efd4 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 800efc0:	2303      	movs	r3, #3
 800efc2:	e1f3      	b.n	800f3ac <HAL_RCC_OscConfig+0x6cc>
 800efc4:	08012da8 	.word	0x08012da8
 800efc8:	40021000 	.word	0x40021000
 800efcc:	42420000 	.word	0x42420000
 800efd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800efd4:	4b67      	ldr	r3, [pc, #412]	; (800f174 <HAL_RCC_OscConfig+0x494>)
 800efd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efd8:	f003 0302 	and.w	r3, r3, #2
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d0e8      	beq.n	800efb2 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800efe0:	2001      	movs	r0, #1
 800efe2:	f000 fc11 	bl	800f808 <RCC_Delay>
 800efe6:	e015      	b.n	800f014 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800efe8:	4b63      	ldr	r3, [pc, #396]	; (800f178 <HAL_RCC_OscConfig+0x498>)
 800efea:	2200      	movs	r2, #0
 800efec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800efee:	f7fd fb4b 	bl	800c688 <HAL_GetTick>
 800eff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800eff4:	e008      	b.n	800f008 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800eff6:	f7fd fb47 	bl	800c688 <HAL_GetTick>
 800effa:	4602      	mov	r2, r0
 800effc:	693b      	ldr	r3, [r7, #16]
 800effe:	1ad3      	subs	r3, r2, r3
 800f000:	2b02      	cmp	r3, #2
 800f002:	d901      	bls.n	800f008 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 800f004:	2303      	movs	r3, #3
 800f006:	e1d1      	b.n	800f3ac <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f008:	4b5a      	ldr	r3, [pc, #360]	; (800f174 <HAL_RCC_OscConfig+0x494>)
 800f00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f00c:	f003 0302 	and.w	r3, r3, #2
 800f010:	2b00      	cmp	r3, #0
 800f012:	d1f0      	bne.n	800eff6 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	f003 0304 	and.w	r3, r3, #4
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	f000 80c0 	beq.w	800f1a2 <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f022:	2300      	movs	r3, #0
 800f024:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	68db      	ldr	r3, [r3, #12]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d00c      	beq.n	800f048 <HAL_RCC_OscConfig+0x368>
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	68db      	ldr	r3, [r3, #12]
 800f032:	2b01      	cmp	r3, #1
 800f034:	d008      	beq.n	800f048 <HAL_RCC_OscConfig+0x368>
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	68db      	ldr	r3, [r3, #12]
 800f03a:	2b05      	cmp	r3, #5
 800f03c:	d004      	beq.n	800f048 <HAL_RCC_OscConfig+0x368>
 800f03e:	f240 2111 	movw	r1, #529	; 0x211
 800f042:	484e      	ldr	r0, [pc, #312]	; (800f17c <HAL_RCC_OscConfig+0x49c>)
 800f044:	f7fc feb8 	bl	800bdb8 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f048:	4b4a      	ldr	r3, [pc, #296]	; (800f174 <HAL_RCC_OscConfig+0x494>)
 800f04a:	69db      	ldr	r3, [r3, #28]
 800f04c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f050:	2b00      	cmp	r3, #0
 800f052:	d10d      	bne.n	800f070 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f054:	4b47      	ldr	r3, [pc, #284]	; (800f174 <HAL_RCC_OscConfig+0x494>)
 800f056:	69db      	ldr	r3, [r3, #28]
 800f058:	4a46      	ldr	r2, [pc, #280]	; (800f174 <HAL_RCC_OscConfig+0x494>)
 800f05a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f05e:	61d3      	str	r3, [r2, #28]
 800f060:	4b44      	ldr	r3, [pc, #272]	; (800f174 <HAL_RCC_OscConfig+0x494>)
 800f062:	69db      	ldr	r3, [r3, #28]
 800f064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f068:	60bb      	str	r3, [r7, #8]
 800f06a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f06c:	2301      	movs	r3, #1
 800f06e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f070:	4b43      	ldr	r3, [pc, #268]	; (800f180 <HAL_RCC_OscConfig+0x4a0>)
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d118      	bne.n	800f0ae <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f07c:	4b40      	ldr	r3, [pc, #256]	; (800f180 <HAL_RCC_OscConfig+0x4a0>)
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	4a3f      	ldr	r2, [pc, #252]	; (800f180 <HAL_RCC_OscConfig+0x4a0>)
 800f082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f086:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f088:	f7fd fafe 	bl	800c688 <HAL_GetTick>
 800f08c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f08e:	e008      	b.n	800f0a2 <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f090:	f7fd fafa 	bl	800c688 <HAL_GetTick>
 800f094:	4602      	mov	r2, r0
 800f096:	693b      	ldr	r3, [r7, #16]
 800f098:	1ad3      	subs	r3, r2, r3
 800f09a:	2b64      	cmp	r3, #100	; 0x64
 800f09c:	d901      	bls.n	800f0a2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800f09e:	2303      	movs	r3, #3
 800f0a0:	e184      	b.n	800f3ac <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f0a2:	4b37      	ldr	r3, [pc, #220]	; (800f180 <HAL_RCC_OscConfig+0x4a0>)
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d0f0      	beq.n	800f090 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	68db      	ldr	r3, [r3, #12]
 800f0b2:	2b01      	cmp	r3, #1
 800f0b4:	d106      	bne.n	800f0c4 <HAL_RCC_OscConfig+0x3e4>
 800f0b6:	4b2f      	ldr	r3, [pc, #188]	; (800f174 <HAL_RCC_OscConfig+0x494>)
 800f0b8:	6a1b      	ldr	r3, [r3, #32]
 800f0ba:	4a2e      	ldr	r2, [pc, #184]	; (800f174 <HAL_RCC_OscConfig+0x494>)
 800f0bc:	f043 0301 	orr.w	r3, r3, #1
 800f0c0:	6213      	str	r3, [r2, #32]
 800f0c2:	e02d      	b.n	800f120 <HAL_RCC_OscConfig+0x440>
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	68db      	ldr	r3, [r3, #12]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d10c      	bne.n	800f0e6 <HAL_RCC_OscConfig+0x406>
 800f0cc:	4b29      	ldr	r3, [pc, #164]	; (800f174 <HAL_RCC_OscConfig+0x494>)
 800f0ce:	6a1b      	ldr	r3, [r3, #32]
 800f0d0:	4a28      	ldr	r2, [pc, #160]	; (800f174 <HAL_RCC_OscConfig+0x494>)
 800f0d2:	f023 0301 	bic.w	r3, r3, #1
 800f0d6:	6213      	str	r3, [r2, #32]
 800f0d8:	4b26      	ldr	r3, [pc, #152]	; (800f174 <HAL_RCC_OscConfig+0x494>)
 800f0da:	6a1b      	ldr	r3, [r3, #32]
 800f0dc:	4a25      	ldr	r2, [pc, #148]	; (800f174 <HAL_RCC_OscConfig+0x494>)
 800f0de:	f023 0304 	bic.w	r3, r3, #4
 800f0e2:	6213      	str	r3, [r2, #32]
 800f0e4:	e01c      	b.n	800f120 <HAL_RCC_OscConfig+0x440>
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	68db      	ldr	r3, [r3, #12]
 800f0ea:	2b05      	cmp	r3, #5
 800f0ec:	d10c      	bne.n	800f108 <HAL_RCC_OscConfig+0x428>
 800f0ee:	4b21      	ldr	r3, [pc, #132]	; (800f174 <HAL_RCC_OscConfig+0x494>)
 800f0f0:	6a1b      	ldr	r3, [r3, #32]
 800f0f2:	4a20      	ldr	r2, [pc, #128]	; (800f174 <HAL_RCC_OscConfig+0x494>)
 800f0f4:	f043 0304 	orr.w	r3, r3, #4
 800f0f8:	6213      	str	r3, [r2, #32]
 800f0fa:	4b1e      	ldr	r3, [pc, #120]	; (800f174 <HAL_RCC_OscConfig+0x494>)
 800f0fc:	6a1b      	ldr	r3, [r3, #32]
 800f0fe:	4a1d      	ldr	r2, [pc, #116]	; (800f174 <HAL_RCC_OscConfig+0x494>)
 800f100:	f043 0301 	orr.w	r3, r3, #1
 800f104:	6213      	str	r3, [r2, #32]
 800f106:	e00b      	b.n	800f120 <HAL_RCC_OscConfig+0x440>
 800f108:	4b1a      	ldr	r3, [pc, #104]	; (800f174 <HAL_RCC_OscConfig+0x494>)
 800f10a:	6a1b      	ldr	r3, [r3, #32]
 800f10c:	4a19      	ldr	r2, [pc, #100]	; (800f174 <HAL_RCC_OscConfig+0x494>)
 800f10e:	f023 0301 	bic.w	r3, r3, #1
 800f112:	6213      	str	r3, [r2, #32]
 800f114:	4b17      	ldr	r3, [pc, #92]	; (800f174 <HAL_RCC_OscConfig+0x494>)
 800f116:	6a1b      	ldr	r3, [r3, #32]
 800f118:	4a16      	ldr	r2, [pc, #88]	; (800f174 <HAL_RCC_OscConfig+0x494>)
 800f11a:	f023 0304 	bic.w	r3, r3, #4
 800f11e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	68db      	ldr	r3, [r3, #12]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d015      	beq.n	800f154 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f128:	f7fd faae 	bl	800c688 <HAL_GetTick>
 800f12c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f12e:	e00a      	b.n	800f146 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f130:	f7fd faaa 	bl	800c688 <HAL_GetTick>
 800f134:	4602      	mov	r2, r0
 800f136:	693b      	ldr	r3, [r7, #16]
 800f138:	1ad3      	subs	r3, r2, r3
 800f13a:	f241 3288 	movw	r2, #5000	; 0x1388
 800f13e:	4293      	cmp	r3, r2
 800f140:	d901      	bls.n	800f146 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800f142:	2303      	movs	r3, #3
 800f144:	e132      	b.n	800f3ac <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f146:	4b0b      	ldr	r3, [pc, #44]	; (800f174 <HAL_RCC_OscConfig+0x494>)
 800f148:	6a1b      	ldr	r3, [r3, #32]
 800f14a:	f003 0302 	and.w	r3, r3, #2
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d0ee      	beq.n	800f130 <HAL_RCC_OscConfig+0x450>
 800f152:	e01d      	b.n	800f190 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f154:	f7fd fa98 	bl	800c688 <HAL_GetTick>
 800f158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f15a:	e013      	b.n	800f184 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f15c:	f7fd fa94 	bl	800c688 <HAL_GetTick>
 800f160:	4602      	mov	r2, r0
 800f162:	693b      	ldr	r3, [r7, #16]
 800f164:	1ad3      	subs	r3, r2, r3
 800f166:	f241 3288 	movw	r2, #5000	; 0x1388
 800f16a:	4293      	cmp	r3, r2
 800f16c:	d90a      	bls.n	800f184 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800f16e:	2303      	movs	r3, #3
 800f170:	e11c      	b.n	800f3ac <HAL_RCC_OscConfig+0x6cc>
 800f172:	bf00      	nop
 800f174:	40021000 	.word	0x40021000
 800f178:	42420480 	.word	0x42420480
 800f17c:	08012da8 	.word	0x08012da8
 800f180:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f184:	4b8b      	ldr	r3, [pc, #556]	; (800f3b4 <HAL_RCC_OscConfig+0x6d4>)
 800f186:	6a1b      	ldr	r3, [r3, #32]
 800f188:	f003 0302 	and.w	r3, r3, #2
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d1e5      	bne.n	800f15c <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800f190:	7dfb      	ldrb	r3, [r7, #23]
 800f192:	2b01      	cmp	r3, #1
 800f194:	d105      	bne.n	800f1a2 <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f196:	4b87      	ldr	r3, [pc, #540]	; (800f3b4 <HAL_RCC_OscConfig+0x6d4>)
 800f198:	69db      	ldr	r3, [r3, #28]
 800f19a:	4a86      	ldr	r2, [pc, #536]	; (800f3b4 <HAL_RCC_OscConfig+0x6d4>)
 800f19c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f1a0:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	69db      	ldr	r3, [r3, #28]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d00c      	beq.n	800f1c4 <HAL_RCC_OscConfig+0x4e4>
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	69db      	ldr	r3, [r3, #28]
 800f1ae:	2b01      	cmp	r3, #1
 800f1b0:	d008      	beq.n	800f1c4 <HAL_RCC_OscConfig+0x4e4>
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	69db      	ldr	r3, [r3, #28]
 800f1b6:	2b02      	cmp	r3, #2
 800f1b8:	d004      	beq.n	800f1c4 <HAL_RCC_OscConfig+0x4e4>
 800f1ba:	f240 21af 	movw	r1, #687	; 0x2af
 800f1be:	487e      	ldr	r0, [pc, #504]	; (800f3b8 <HAL_RCC_OscConfig+0x6d8>)
 800f1c0:	f7fc fdfa 	bl	800bdb8 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	69db      	ldr	r3, [r3, #28]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	f000 80ee 	beq.w	800f3aa <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f1ce:	4b79      	ldr	r3, [pc, #484]	; (800f3b4 <HAL_RCC_OscConfig+0x6d4>)
 800f1d0:	685b      	ldr	r3, [r3, #4]
 800f1d2:	f003 030c 	and.w	r3, r3, #12
 800f1d6:	2b08      	cmp	r3, #8
 800f1d8:	f000 80ce 	beq.w	800f378 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	69db      	ldr	r3, [r3, #28]
 800f1e0:	2b02      	cmp	r3, #2
 800f1e2:	f040 80b2 	bne.w	800f34a <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	6a1b      	ldr	r3, [r3, #32]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d009      	beq.n	800f202 <HAL_RCC_OscConfig+0x522>
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	6a1b      	ldr	r3, [r3, #32]
 800f1f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f1f6:	d004      	beq.n	800f202 <HAL_RCC_OscConfig+0x522>
 800f1f8:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 800f1fc:	486e      	ldr	r0, [pc, #440]	; (800f3b8 <HAL_RCC_OscConfig+0x6d8>)
 800f1fe:	f7fc fddb 	bl	800bdb8 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f206:	2b00      	cmp	r3, #0
 800f208:	d04a      	beq.n	800f2a0 <HAL_RCC_OscConfig+0x5c0>
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f20e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f212:	d045      	beq.n	800f2a0 <HAL_RCC_OscConfig+0x5c0>
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f218:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800f21c:	d040      	beq.n	800f2a0 <HAL_RCC_OscConfig+0x5c0>
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f222:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800f226:	d03b      	beq.n	800f2a0 <HAL_RCC_OscConfig+0x5c0>
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f22c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f230:	d036      	beq.n	800f2a0 <HAL_RCC_OscConfig+0x5c0>
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f236:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800f23a:	d031      	beq.n	800f2a0 <HAL_RCC_OscConfig+0x5c0>
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f240:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800f244:	d02c      	beq.n	800f2a0 <HAL_RCC_OscConfig+0x5c0>
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f24a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800f24e:	d027      	beq.n	800f2a0 <HAL_RCC_OscConfig+0x5c0>
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f254:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f258:	d022      	beq.n	800f2a0 <HAL_RCC_OscConfig+0x5c0>
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f25e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800f262:	d01d      	beq.n	800f2a0 <HAL_RCC_OscConfig+0x5c0>
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f268:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800f26c:	d018      	beq.n	800f2a0 <HAL_RCC_OscConfig+0x5c0>
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f272:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800f276:	d013      	beq.n	800f2a0 <HAL_RCC_OscConfig+0x5c0>
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f27c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f280:	d00e      	beq.n	800f2a0 <HAL_RCC_OscConfig+0x5c0>
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f286:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 800f28a:	d009      	beq.n	800f2a0 <HAL_RCC_OscConfig+0x5c0>
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f290:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800f294:	d004      	beq.n	800f2a0 <HAL_RCC_OscConfig+0x5c0>
 800f296:	f240 21b9 	movw	r1, #697	; 0x2b9
 800f29a:	4847      	ldr	r0, [pc, #284]	; (800f3b8 <HAL_RCC_OscConfig+0x6d8>)
 800f29c:	f7fc fd8c 	bl	800bdb8 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f2a0:	4b46      	ldr	r3, [pc, #280]	; (800f3bc <HAL_RCC_OscConfig+0x6dc>)
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f2a6:	f7fd f9ef 	bl	800c688 <HAL_GetTick>
 800f2aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800f2ac:	e008      	b.n	800f2c0 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f2ae:	f7fd f9eb 	bl	800c688 <HAL_GetTick>
 800f2b2:	4602      	mov	r2, r0
 800f2b4:	693b      	ldr	r3, [r7, #16]
 800f2b6:	1ad3      	subs	r3, r2, r3
 800f2b8:	2b02      	cmp	r3, #2
 800f2ba:	d901      	bls.n	800f2c0 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800f2bc:	2303      	movs	r3, #3
 800f2be:	e075      	b.n	800f3ac <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800f2c0:	4b3c      	ldr	r3, [pc, #240]	; (800f3b4 <HAL_RCC_OscConfig+0x6d4>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d1f0      	bne.n	800f2ae <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	6a1b      	ldr	r3, [r3, #32]
 800f2d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f2d4:	d116      	bne.n	800f304 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	689b      	ldr	r3, [r3, #8]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d009      	beq.n	800f2f2 <HAL_RCC_OscConfig+0x612>
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	689b      	ldr	r3, [r3, #8]
 800f2e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f2e6:	d004      	beq.n	800f2f2 <HAL_RCC_OscConfig+0x612>
 800f2e8:	f240 21cf 	movw	r1, #719	; 0x2cf
 800f2ec:	4832      	ldr	r0, [pc, #200]	; (800f3b8 <HAL_RCC_OscConfig+0x6d8>)
 800f2ee:	f7fc fd63 	bl	800bdb8 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800f2f2:	4b30      	ldr	r3, [pc, #192]	; (800f3b4 <HAL_RCC_OscConfig+0x6d4>)
 800f2f4:	685b      	ldr	r3, [r3, #4]
 800f2f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	689b      	ldr	r3, [r3, #8]
 800f2fe:	492d      	ldr	r1, [pc, #180]	; (800f3b4 <HAL_RCC_OscConfig+0x6d4>)
 800f300:	4313      	orrs	r3, r2
 800f302:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f304:	4b2b      	ldr	r3, [pc, #172]	; (800f3b4 <HAL_RCC_OscConfig+0x6d4>)
 800f306:	685b      	ldr	r3, [r3, #4]
 800f308:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	6a19      	ldr	r1, [r3, #32]
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f314:	430b      	orrs	r3, r1
 800f316:	4927      	ldr	r1, [pc, #156]	; (800f3b4 <HAL_RCC_OscConfig+0x6d4>)
 800f318:	4313      	orrs	r3, r2
 800f31a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f31c:	4b27      	ldr	r3, [pc, #156]	; (800f3bc <HAL_RCC_OscConfig+0x6dc>)
 800f31e:	2201      	movs	r2, #1
 800f320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f322:	f7fd f9b1 	bl	800c688 <HAL_GetTick>
 800f326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800f328:	e008      	b.n	800f33c <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f32a:	f7fd f9ad 	bl	800c688 <HAL_GetTick>
 800f32e:	4602      	mov	r2, r0
 800f330:	693b      	ldr	r3, [r7, #16]
 800f332:	1ad3      	subs	r3, r2, r3
 800f334:	2b02      	cmp	r3, #2
 800f336:	d901      	bls.n	800f33c <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 800f338:	2303      	movs	r3, #3
 800f33a:	e037      	b.n	800f3ac <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800f33c:	4b1d      	ldr	r3, [pc, #116]	; (800f3b4 <HAL_RCC_OscConfig+0x6d4>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f344:	2b00      	cmp	r3, #0
 800f346:	d0f0      	beq.n	800f32a <HAL_RCC_OscConfig+0x64a>
 800f348:	e02f      	b.n	800f3aa <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f34a:	4b1c      	ldr	r3, [pc, #112]	; (800f3bc <HAL_RCC_OscConfig+0x6dc>)
 800f34c:	2200      	movs	r2, #0
 800f34e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f350:	f7fd f99a 	bl	800c688 <HAL_GetTick>
 800f354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800f356:	e008      	b.n	800f36a <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f358:	f7fd f996 	bl	800c688 <HAL_GetTick>
 800f35c:	4602      	mov	r2, r0
 800f35e:	693b      	ldr	r3, [r7, #16]
 800f360:	1ad3      	subs	r3, r2, r3
 800f362:	2b02      	cmp	r3, #2
 800f364:	d901      	bls.n	800f36a <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 800f366:	2303      	movs	r3, #3
 800f368:	e020      	b.n	800f3ac <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800f36a:	4b12      	ldr	r3, [pc, #72]	; (800f3b4 <HAL_RCC_OscConfig+0x6d4>)
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f372:	2b00      	cmp	r3, #0
 800f374:	d1f0      	bne.n	800f358 <HAL_RCC_OscConfig+0x678>
 800f376:	e018      	b.n	800f3aa <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	69db      	ldr	r3, [r3, #28]
 800f37c:	2b01      	cmp	r3, #1
 800f37e:	d101      	bne.n	800f384 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 800f380:	2301      	movs	r3, #1
 800f382:	e013      	b.n	800f3ac <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800f384:	4b0b      	ldr	r3, [pc, #44]	; (800f3b4 <HAL_RCC_OscConfig+0x6d4>)
 800f386:	685b      	ldr	r3, [r3, #4]
 800f388:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	6a1b      	ldr	r3, [r3, #32]
 800f394:	429a      	cmp	r2, r3
 800f396:	d106      	bne.n	800f3a6 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f3a2:	429a      	cmp	r2, r3
 800f3a4:	d001      	beq.n	800f3aa <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 800f3a6:	2301      	movs	r3, #1
 800f3a8:	e000      	b.n	800f3ac <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 800f3aa:	2300      	movs	r3, #0
}
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	3718      	adds	r7, #24
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	bd80      	pop	{r7, pc}
 800f3b4:	40021000 	.word	0x40021000
 800f3b8:	08012da8 	.word	0x08012da8
 800f3bc:	42420060 	.word	0x42420060

0800f3c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b084      	sub	sp, #16
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
 800f3c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d101      	bne.n	800f3d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f3d0:	2301      	movs	r3, #1
 800f3d2:	e176      	b.n	800f6c2 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	f003 0301 	and.w	r3, r3, #1
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d116      	bne.n	800f40e <HAL_RCC_ClockConfig+0x4e>
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	f003 0302 	and.w	r3, r3, #2
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d110      	bne.n	800f40e <HAL_RCC_ClockConfig+0x4e>
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	f003 0304 	and.w	r3, r3, #4
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d10a      	bne.n	800f40e <HAL_RCC_ClockConfig+0x4e>
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	f003 0308 	and.w	r3, r3, #8
 800f400:	2b00      	cmp	r3, #0
 800f402:	d104      	bne.n	800f40e <HAL_RCC_ClockConfig+0x4e>
 800f404:	f44f 714e 	mov.w	r1, #824	; 0x338
 800f408:	4874      	ldr	r0, [pc, #464]	; (800f5dc <HAL_RCC_ClockConfig+0x21c>)
 800f40a:	f7fc fcd5 	bl	800bdb8 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d00a      	beq.n	800f42a <HAL_RCC_ClockConfig+0x6a>
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	2b01      	cmp	r3, #1
 800f418:	d007      	beq.n	800f42a <HAL_RCC_ClockConfig+0x6a>
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	2b02      	cmp	r3, #2
 800f41e:	d004      	beq.n	800f42a <HAL_RCC_ClockConfig+0x6a>
 800f420:	f240 3139 	movw	r1, #825	; 0x339
 800f424:	486d      	ldr	r0, [pc, #436]	; (800f5dc <HAL_RCC_ClockConfig+0x21c>)
 800f426:	f7fc fcc7 	bl	800bdb8 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800f42a:	4b6d      	ldr	r3, [pc, #436]	; (800f5e0 <HAL_RCC_ClockConfig+0x220>)
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	f003 0307 	and.w	r3, r3, #7
 800f432:	683a      	ldr	r2, [r7, #0]
 800f434:	429a      	cmp	r2, r3
 800f436:	d910      	bls.n	800f45a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f438:	4b69      	ldr	r3, [pc, #420]	; (800f5e0 <HAL_RCC_ClockConfig+0x220>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	f023 0207 	bic.w	r2, r3, #7
 800f440:	4967      	ldr	r1, [pc, #412]	; (800f5e0 <HAL_RCC_ClockConfig+0x220>)
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	4313      	orrs	r3, r2
 800f446:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f448:	4b65      	ldr	r3, [pc, #404]	; (800f5e0 <HAL_RCC_ClockConfig+0x220>)
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	f003 0307 	and.w	r3, r3, #7
 800f450:	683a      	ldr	r2, [r7, #0]
 800f452:	429a      	cmp	r2, r3
 800f454:	d001      	beq.n	800f45a <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 800f456:	2301      	movs	r3, #1
 800f458:	e133      	b.n	800f6c2 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	f003 0302 	and.w	r3, r3, #2
 800f462:	2b00      	cmp	r3, #0
 800f464:	d049      	beq.n	800f4fa <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	f003 0304 	and.w	r3, r3, #4
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d005      	beq.n	800f47e <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f472:	4b5c      	ldr	r3, [pc, #368]	; (800f5e4 <HAL_RCC_ClockConfig+0x224>)
 800f474:	685b      	ldr	r3, [r3, #4]
 800f476:	4a5b      	ldr	r2, [pc, #364]	; (800f5e4 <HAL_RCC_ClockConfig+0x224>)
 800f478:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800f47c:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	f003 0308 	and.w	r3, r3, #8
 800f486:	2b00      	cmp	r3, #0
 800f488:	d005      	beq.n	800f496 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f48a:	4b56      	ldr	r3, [pc, #344]	; (800f5e4 <HAL_RCC_ClockConfig+0x224>)
 800f48c:	685b      	ldr	r3, [r3, #4]
 800f48e:	4a55      	ldr	r2, [pc, #340]	; (800f5e4 <HAL_RCC_ClockConfig+0x224>)
 800f490:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800f494:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	689b      	ldr	r3, [r3, #8]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d024      	beq.n	800f4e8 <HAL_RCC_ClockConfig+0x128>
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	689b      	ldr	r3, [r3, #8]
 800f4a2:	2b80      	cmp	r3, #128	; 0x80
 800f4a4:	d020      	beq.n	800f4e8 <HAL_RCC_ClockConfig+0x128>
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	689b      	ldr	r3, [r3, #8]
 800f4aa:	2b90      	cmp	r3, #144	; 0x90
 800f4ac:	d01c      	beq.n	800f4e8 <HAL_RCC_ClockConfig+0x128>
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	689b      	ldr	r3, [r3, #8]
 800f4b2:	2ba0      	cmp	r3, #160	; 0xa0
 800f4b4:	d018      	beq.n	800f4e8 <HAL_RCC_ClockConfig+0x128>
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	689b      	ldr	r3, [r3, #8]
 800f4ba:	2bb0      	cmp	r3, #176	; 0xb0
 800f4bc:	d014      	beq.n	800f4e8 <HAL_RCC_ClockConfig+0x128>
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	689b      	ldr	r3, [r3, #8]
 800f4c2:	2bc0      	cmp	r3, #192	; 0xc0
 800f4c4:	d010      	beq.n	800f4e8 <HAL_RCC_ClockConfig+0x128>
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	689b      	ldr	r3, [r3, #8]
 800f4ca:	2bd0      	cmp	r3, #208	; 0xd0
 800f4cc:	d00c      	beq.n	800f4e8 <HAL_RCC_ClockConfig+0x128>
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	689b      	ldr	r3, [r3, #8]
 800f4d2:	2be0      	cmp	r3, #224	; 0xe0
 800f4d4:	d008      	beq.n	800f4e8 <HAL_RCC_ClockConfig+0x128>
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	689b      	ldr	r3, [r3, #8]
 800f4da:	2bf0      	cmp	r3, #240	; 0xf0
 800f4dc:	d004      	beq.n	800f4e8 <HAL_RCC_ClockConfig+0x128>
 800f4de:	f240 315f 	movw	r1, #863	; 0x35f
 800f4e2:	483e      	ldr	r0, [pc, #248]	; (800f5dc <HAL_RCC_ClockConfig+0x21c>)
 800f4e4:	f7fc fc68 	bl	800bdb8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f4e8:	4b3e      	ldr	r3, [pc, #248]	; (800f5e4 <HAL_RCC_ClockConfig+0x224>)
 800f4ea:	685b      	ldr	r3, [r3, #4]
 800f4ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	689b      	ldr	r3, [r3, #8]
 800f4f4:	493b      	ldr	r1, [pc, #236]	; (800f5e4 <HAL_RCC_ClockConfig+0x224>)
 800f4f6:	4313      	orrs	r3, r2
 800f4f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	f003 0301 	and.w	r3, r3, #1
 800f502:	2b00      	cmp	r3, #0
 800f504:	d051      	beq.n	800f5aa <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	685b      	ldr	r3, [r3, #4]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d00c      	beq.n	800f528 <HAL_RCC_ClockConfig+0x168>
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	685b      	ldr	r3, [r3, #4]
 800f512:	2b01      	cmp	r3, #1
 800f514:	d008      	beq.n	800f528 <HAL_RCC_ClockConfig+0x168>
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	685b      	ldr	r3, [r3, #4]
 800f51a:	2b02      	cmp	r3, #2
 800f51c:	d004      	beq.n	800f528 <HAL_RCC_ClockConfig+0x168>
 800f51e:	f240 3166 	movw	r1, #870	; 0x366
 800f522:	482e      	ldr	r0, [pc, #184]	; (800f5dc <HAL_RCC_ClockConfig+0x21c>)
 800f524:	f7fc fc48 	bl	800bdb8 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	685b      	ldr	r3, [r3, #4]
 800f52c:	2b01      	cmp	r3, #1
 800f52e:	d107      	bne.n	800f540 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f530:	4b2c      	ldr	r3, [pc, #176]	; (800f5e4 <HAL_RCC_ClockConfig+0x224>)
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d115      	bne.n	800f568 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800f53c:	2301      	movs	r3, #1
 800f53e:	e0c0      	b.n	800f6c2 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	685b      	ldr	r3, [r3, #4]
 800f544:	2b02      	cmp	r3, #2
 800f546:	d107      	bne.n	800f558 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f548:	4b26      	ldr	r3, [pc, #152]	; (800f5e4 <HAL_RCC_ClockConfig+0x224>)
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f550:	2b00      	cmp	r3, #0
 800f552:	d109      	bne.n	800f568 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800f554:	2301      	movs	r3, #1
 800f556:	e0b4      	b.n	800f6c2 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f558:	4b22      	ldr	r3, [pc, #136]	; (800f5e4 <HAL_RCC_ClockConfig+0x224>)
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	f003 0302 	and.w	r3, r3, #2
 800f560:	2b00      	cmp	r3, #0
 800f562:	d101      	bne.n	800f568 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800f564:	2301      	movs	r3, #1
 800f566:	e0ac      	b.n	800f6c2 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f568:	4b1e      	ldr	r3, [pc, #120]	; (800f5e4 <HAL_RCC_ClockConfig+0x224>)
 800f56a:	685b      	ldr	r3, [r3, #4]
 800f56c:	f023 0203 	bic.w	r2, r3, #3
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	685b      	ldr	r3, [r3, #4]
 800f574:	491b      	ldr	r1, [pc, #108]	; (800f5e4 <HAL_RCC_ClockConfig+0x224>)
 800f576:	4313      	orrs	r3, r2
 800f578:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f57a:	f7fd f885 	bl	800c688 <HAL_GetTick>
 800f57e:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f580:	e00a      	b.n	800f598 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f582:	f7fd f881 	bl	800c688 <HAL_GetTick>
 800f586:	4602      	mov	r2, r0
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	1ad3      	subs	r3, r2, r3
 800f58c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f590:	4293      	cmp	r3, r2
 800f592:	d901      	bls.n	800f598 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 800f594:	2303      	movs	r3, #3
 800f596:	e094      	b.n	800f6c2 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f598:	4b12      	ldr	r3, [pc, #72]	; (800f5e4 <HAL_RCC_ClockConfig+0x224>)
 800f59a:	685b      	ldr	r3, [r3, #4]
 800f59c:	f003 020c 	and.w	r2, r3, #12
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	685b      	ldr	r3, [r3, #4]
 800f5a4:	009b      	lsls	r3, r3, #2
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d1eb      	bne.n	800f582 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800f5aa:	4b0d      	ldr	r3, [pc, #52]	; (800f5e0 <HAL_RCC_ClockConfig+0x220>)
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	f003 0307 	and.w	r3, r3, #7
 800f5b2:	683a      	ldr	r2, [r7, #0]
 800f5b4:	429a      	cmp	r2, r3
 800f5b6:	d217      	bcs.n	800f5e8 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f5b8:	4b09      	ldr	r3, [pc, #36]	; (800f5e0 <HAL_RCC_ClockConfig+0x220>)
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	f023 0207 	bic.w	r2, r3, #7
 800f5c0:	4907      	ldr	r1, [pc, #28]	; (800f5e0 <HAL_RCC_ClockConfig+0x220>)
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	4313      	orrs	r3, r2
 800f5c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f5c8:	4b05      	ldr	r3, [pc, #20]	; (800f5e0 <HAL_RCC_ClockConfig+0x220>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	f003 0307 	and.w	r3, r3, #7
 800f5d0:	683a      	ldr	r2, [r7, #0]
 800f5d2:	429a      	cmp	r2, r3
 800f5d4:	d008      	beq.n	800f5e8 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 800f5d6:	2301      	movs	r3, #1
 800f5d8:	e073      	b.n	800f6c2 <HAL_RCC_ClockConfig+0x302>
 800f5da:	bf00      	nop
 800f5dc:	08012da8 	.word	0x08012da8
 800f5e0:	40022000 	.word	0x40022000
 800f5e4:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	f003 0304 	and.w	r3, r3, #4
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d025      	beq.n	800f640 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	68db      	ldr	r3, [r3, #12]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d018      	beq.n	800f62e <HAL_RCC_ClockConfig+0x26e>
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	68db      	ldr	r3, [r3, #12]
 800f600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f604:	d013      	beq.n	800f62e <HAL_RCC_ClockConfig+0x26e>
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	68db      	ldr	r3, [r3, #12]
 800f60a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800f60e:	d00e      	beq.n	800f62e <HAL_RCC_ClockConfig+0x26e>
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	68db      	ldr	r3, [r3, #12]
 800f614:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f618:	d009      	beq.n	800f62e <HAL_RCC_ClockConfig+0x26e>
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	68db      	ldr	r3, [r3, #12]
 800f61e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f622:	d004      	beq.n	800f62e <HAL_RCC_ClockConfig+0x26e>
 800f624:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 800f628:	4828      	ldr	r0, [pc, #160]	; (800f6cc <HAL_RCC_ClockConfig+0x30c>)
 800f62a:	f7fc fbc5 	bl	800bdb8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f62e:	4b28      	ldr	r3, [pc, #160]	; (800f6d0 <HAL_RCC_ClockConfig+0x310>)
 800f630:	685b      	ldr	r3, [r3, #4]
 800f632:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	68db      	ldr	r3, [r3, #12]
 800f63a:	4925      	ldr	r1, [pc, #148]	; (800f6d0 <HAL_RCC_ClockConfig+0x310>)
 800f63c:	4313      	orrs	r3, r2
 800f63e:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	f003 0308 	and.w	r3, r3, #8
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d026      	beq.n	800f69a <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	691b      	ldr	r3, [r3, #16]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d018      	beq.n	800f686 <HAL_RCC_ClockConfig+0x2c6>
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	691b      	ldr	r3, [r3, #16]
 800f658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f65c:	d013      	beq.n	800f686 <HAL_RCC_ClockConfig+0x2c6>
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	691b      	ldr	r3, [r3, #16]
 800f662:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800f666:	d00e      	beq.n	800f686 <HAL_RCC_ClockConfig+0x2c6>
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	691b      	ldr	r3, [r3, #16]
 800f66c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f670:	d009      	beq.n	800f686 <HAL_RCC_ClockConfig+0x2c6>
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	691b      	ldr	r3, [r3, #16]
 800f676:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f67a:	d004      	beq.n	800f686 <HAL_RCC_ClockConfig+0x2c6>
 800f67c:	f240 31ab 	movw	r1, #939	; 0x3ab
 800f680:	4812      	ldr	r0, [pc, #72]	; (800f6cc <HAL_RCC_ClockConfig+0x30c>)
 800f682:	f7fc fb99 	bl	800bdb8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800f686:	4b12      	ldr	r3, [pc, #72]	; (800f6d0 <HAL_RCC_ClockConfig+0x310>)
 800f688:	685b      	ldr	r3, [r3, #4]
 800f68a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	691b      	ldr	r3, [r3, #16]
 800f692:	00db      	lsls	r3, r3, #3
 800f694:	490e      	ldr	r1, [pc, #56]	; (800f6d0 <HAL_RCC_ClockConfig+0x310>)
 800f696:	4313      	orrs	r3, r2
 800f698:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800f69a:	f000 f821 	bl	800f6e0 <HAL_RCC_GetSysClockFreq>
 800f69e:	4601      	mov	r1, r0
 800f6a0:	4b0b      	ldr	r3, [pc, #44]	; (800f6d0 <HAL_RCC_ClockConfig+0x310>)
 800f6a2:	685b      	ldr	r3, [r3, #4]
 800f6a4:	091b      	lsrs	r3, r3, #4
 800f6a6:	f003 030f 	and.w	r3, r3, #15
 800f6aa:	4a0a      	ldr	r2, [pc, #40]	; (800f6d4 <HAL_RCC_ClockConfig+0x314>)
 800f6ac:	5cd3      	ldrb	r3, [r2, r3]
 800f6ae:	fa21 f303 	lsr.w	r3, r1, r3
 800f6b2:	4a09      	ldr	r2, [pc, #36]	; (800f6d8 <HAL_RCC_ClockConfig+0x318>)
 800f6b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800f6b6:	4b09      	ldr	r3, [pc, #36]	; (800f6dc <HAL_RCC_ClockConfig+0x31c>)
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f7fc ffa2 	bl	800c604 <HAL_InitTick>

  return HAL_OK;
 800f6c0:	2300      	movs	r3, #0
}
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	3710      	adds	r7, #16
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd80      	pop	{r7, pc}
 800f6ca:	bf00      	nop
 800f6cc:	08012da8 	.word	0x08012da8
 800f6d0:	40021000 	.word	0x40021000
 800f6d4:	08015a08 	.word	0x08015a08
 800f6d8:	200000ac 	.word	0x200000ac
 800f6dc:	200000b0 	.word	0x200000b0

0800f6e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f6e0:	b490      	push	{r4, r7}
 800f6e2:	b08a      	sub	sp, #40	; 0x28
 800f6e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800f6e6:	4b2a      	ldr	r3, [pc, #168]	; (800f790 <HAL_RCC_GetSysClockFreq+0xb0>)
 800f6e8:	1d3c      	adds	r4, r7, #4
 800f6ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f6ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800f6f0:	4b28      	ldr	r3, [pc, #160]	; (800f794 <HAL_RCC_GetSysClockFreq+0xb4>)
 800f6f2:	881b      	ldrh	r3, [r3, #0]
 800f6f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	61fb      	str	r3, [r7, #28]
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	61bb      	str	r3, [r7, #24]
 800f6fe:	2300      	movs	r3, #0
 800f700:	627b      	str	r3, [r7, #36]	; 0x24
 800f702:	2300      	movs	r3, #0
 800f704:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800f706:	2300      	movs	r3, #0
 800f708:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800f70a:	4b23      	ldr	r3, [pc, #140]	; (800f798 <HAL_RCC_GetSysClockFreq+0xb8>)
 800f70c:	685b      	ldr	r3, [r3, #4]
 800f70e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800f710:	69fb      	ldr	r3, [r7, #28]
 800f712:	f003 030c 	and.w	r3, r3, #12
 800f716:	2b04      	cmp	r3, #4
 800f718:	d002      	beq.n	800f720 <HAL_RCC_GetSysClockFreq+0x40>
 800f71a:	2b08      	cmp	r3, #8
 800f71c:	d003      	beq.n	800f726 <HAL_RCC_GetSysClockFreq+0x46>
 800f71e:	e02d      	b.n	800f77c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800f720:	4b1e      	ldr	r3, [pc, #120]	; (800f79c <HAL_RCC_GetSysClockFreq+0xbc>)
 800f722:	623b      	str	r3, [r7, #32]
      break;
 800f724:	e02d      	b.n	800f782 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800f726:	69fb      	ldr	r3, [r7, #28]
 800f728:	0c9b      	lsrs	r3, r3, #18
 800f72a:	f003 030f 	and.w	r3, r3, #15
 800f72e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f732:	4413      	add	r3, r2
 800f734:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800f738:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800f73a:	69fb      	ldr	r3, [r7, #28]
 800f73c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f740:	2b00      	cmp	r3, #0
 800f742:	d013      	beq.n	800f76c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800f744:	4b14      	ldr	r3, [pc, #80]	; (800f798 <HAL_RCC_GetSysClockFreq+0xb8>)
 800f746:	685b      	ldr	r3, [r3, #4]
 800f748:	0c5b      	lsrs	r3, r3, #17
 800f74a:	f003 0301 	and.w	r3, r3, #1
 800f74e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f752:	4413      	add	r3, r2
 800f754:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800f758:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800f75a:	697b      	ldr	r3, [r7, #20]
 800f75c:	4a0f      	ldr	r2, [pc, #60]	; (800f79c <HAL_RCC_GetSysClockFreq+0xbc>)
 800f75e:	fb02 f203 	mul.w	r2, r2, r3
 800f762:	69bb      	ldr	r3, [r7, #24]
 800f764:	fbb2 f3f3 	udiv	r3, r2, r3
 800f768:	627b      	str	r3, [r7, #36]	; 0x24
 800f76a:	e004      	b.n	800f776 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800f76c:	697b      	ldr	r3, [r7, #20]
 800f76e:	4a0c      	ldr	r2, [pc, #48]	; (800f7a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800f770:	fb02 f303 	mul.w	r3, r2, r3
 800f774:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800f776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f778:	623b      	str	r3, [r7, #32]
      break;
 800f77a:	e002      	b.n	800f782 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800f77c:	4b07      	ldr	r3, [pc, #28]	; (800f79c <HAL_RCC_GetSysClockFreq+0xbc>)
 800f77e:	623b      	str	r3, [r7, #32]
      break;
 800f780:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f782:	6a3b      	ldr	r3, [r7, #32]
}
 800f784:	4618      	mov	r0, r3
 800f786:	3728      	adds	r7, #40	; 0x28
 800f788:	46bd      	mov	sp, r7
 800f78a:	bc90      	pop	{r4, r7}
 800f78c:	4770      	bx	lr
 800f78e:	bf00      	nop
 800f790:	08012de0 	.word	0x08012de0
 800f794:	08012df0 	.word	0x08012df0
 800f798:	40021000 	.word	0x40021000
 800f79c:	007a1200 	.word	0x007a1200
 800f7a0:	003d0900 	.word	0x003d0900

0800f7a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f7a8:	4b02      	ldr	r3, [pc, #8]	; (800f7b4 <HAL_RCC_GetHCLKFreq+0x10>)
 800f7aa:	681b      	ldr	r3, [r3, #0]
}
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bc80      	pop	{r7}
 800f7b2:	4770      	bx	lr
 800f7b4:	200000ac 	.word	0x200000ac

0800f7b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800f7bc:	f7ff fff2 	bl	800f7a4 <HAL_RCC_GetHCLKFreq>
 800f7c0:	4601      	mov	r1, r0
 800f7c2:	4b05      	ldr	r3, [pc, #20]	; (800f7d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f7c4:	685b      	ldr	r3, [r3, #4]
 800f7c6:	0a1b      	lsrs	r3, r3, #8
 800f7c8:	f003 0307 	and.w	r3, r3, #7
 800f7cc:	4a03      	ldr	r2, [pc, #12]	; (800f7dc <HAL_RCC_GetPCLK1Freq+0x24>)
 800f7ce:	5cd3      	ldrb	r3, [r2, r3]
 800f7d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	bd80      	pop	{r7, pc}
 800f7d8:	40021000 	.word	0x40021000
 800f7dc:	08015a18 	.word	0x08015a18

0800f7e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800f7e4:	f7ff ffde 	bl	800f7a4 <HAL_RCC_GetHCLKFreq>
 800f7e8:	4601      	mov	r1, r0
 800f7ea:	4b05      	ldr	r3, [pc, #20]	; (800f800 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f7ec:	685b      	ldr	r3, [r3, #4]
 800f7ee:	0adb      	lsrs	r3, r3, #11
 800f7f0:	f003 0307 	and.w	r3, r3, #7
 800f7f4:	4a03      	ldr	r2, [pc, #12]	; (800f804 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f7f6:	5cd3      	ldrb	r3, [r2, r3]
 800f7f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	bd80      	pop	{r7, pc}
 800f800:	40021000 	.word	0x40021000
 800f804:	08015a18 	.word	0x08015a18

0800f808 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800f808:	b480      	push	{r7}
 800f80a:	b085      	sub	sp, #20
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800f810:	4b0a      	ldr	r3, [pc, #40]	; (800f83c <RCC_Delay+0x34>)
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	4a0a      	ldr	r2, [pc, #40]	; (800f840 <RCC_Delay+0x38>)
 800f816:	fba2 2303 	umull	r2, r3, r2, r3
 800f81a:	0a5b      	lsrs	r3, r3, #9
 800f81c:	687a      	ldr	r2, [r7, #4]
 800f81e:	fb02 f303 	mul.w	r3, r2, r3
 800f822:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800f824:	bf00      	nop
  }
  while (Delay --);
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	1e5a      	subs	r2, r3, #1
 800f82a:	60fa      	str	r2, [r7, #12]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d1f9      	bne.n	800f824 <RCC_Delay+0x1c>
}
 800f830:	bf00      	nop
 800f832:	3714      	adds	r7, #20
 800f834:	46bd      	mov	sp, r7
 800f836:	bc80      	pop	{r7}
 800f838:	4770      	bx	lr
 800f83a:	bf00      	nop
 800f83c:	200000ac 	.word	0x200000ac
 800f840:	10624dd3 	.word	0x10624dd3

0800f844 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b086      	sub	sp, #24
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800f84c:	2300      	movs	r3, #0
 800f84e:	613b      	str	r3, [r7, #16]
 800f850:	2300      	movs	r3, #0
 800f852:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	f003 0301 	and.w	r3, r3, #1
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d10f      	bne.n	800f880 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	f003 0302 	and.w	r3, r3, #2
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d109      	bne.n	800f880 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	f003 0310 	and.w	r3, r3, #16
 800f874:	2b00      	cmp	r3, #0
 800f876:	d103      	bne.n	800f880 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800f878:	216c      	movs	r1, #108	; 0x6c
 800f87a:	4873      	ldr	r0, [pc, #460]	; (800fa48 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800f87c:	f7fc fa9c 	bl	800bdb8 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	f003 0301 	and.w	r3, r3, #1
 800f888:	2b00      	cmp	r3, #0
 800f88a:	f000 8095 	beq.w	800f9b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	685b      	ldr	r3, [r3, #4]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d012      	beq.n	800f8bc <HAL_RCCEx_PeriphCLKConfig+0x78>
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	685b      	ldr	r3, [r3, #4]
 800f89a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f89e:	d00d      	beq.n	800f8bc <HAL_RCCEx_PeriphCLKConfig+0x78>
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	685b      	ldr	r3, [r3, #4]
 800f8a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f8a8:	d008      	beq.n	800f8bc <HAL_RCCEx_PeriphCLKConfig+0x78>
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	685b      	ldr	r3, [r3, #4]
 800f8ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f8b2:	d003      	beq.n	800f8bc <HAL_RCCEx_PeriphCLKConfig+0x78>
 800f8b4:	2172      	movs	r1, #114	; 0x72
 800f8b6:	4864      	ldr	r0, [pc, #400]	; (800fa48 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800f8b8:	f7fc fa7e 	bl	800bdb8 <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 800f8bc:	2300      	movs	r3, #0
 800f8be:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f8c0:	4b62      	ldr	r3, [pc, #392]	; (800fa4c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f8c2:	69db      	ldr	r3, [r3, #28]
 800f8c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d10d      	bne.n	800f8e8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f8cc:	4b5f      	ldr	r3, [pc, #380]	; (800fa4c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f8ce:	69db      	ldr	r3, [r3, #28]
 800f8d0:	4a5e      	ldr	r2, [pc, #376]	; (800fa4c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f8d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f8d6:	61d3      	str	r3, [r2, #28]
 800f8d8:	4b5c      	ldr	r3, [pc, #368]	; (800fa4c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f8da:	69db      	ldr	r3, [r3, #28]
 800f8dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f8e0:	60bb      	str	r3, [r7, #8]
 800f8e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f8e4:	2301      	movs	r3, #1
 800f8e6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f8e8:	4b59      	ldr	r3, [pc, #356]	; (800fa50 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d118      	bne.n	800f926 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f8f4:	4b56      	ldr	r3, [pc, #344]	; (800fa50 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	4a55      	ldr	r2, [pc, #340]	; (800fa50 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800f8fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f8fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f900:	f7fc fec2 	bl	800c688 <HAL_GetTick>
 800f904:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f906:	e008      	b.n	800f91a <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f908:	f7fc febe 	bl	800c688 <HAL_GetTick>
 800f90c:	4602      	mov	r2, r0
 800f90e:	693b      	ldr	r3, [r7, #16]
 800f910:	1ad3      	subs	r3, r2, r3
 800f912:	2b64      	cmp	r3, #100	; 0x64
 800f914:	d901      	bls.n	800f91a <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 800f916:	2303      	movs	r3, #3
 800f918:	e092      	b.n	800fa40 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f91a:	4b4d      	ldr	r3, [pc, #308]	; (800fa50 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f922:	2b00      	cmp	r3, #0
 800f924:	d0f0      	beq.n	800f908 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800f926:	4b49      	ldr	r3, [pc, #292]	; (800fa4c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f928:	6a1b      	ldr	r3, [r3, #32]
 800f92a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f92e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d02e      	beq.n	800f994 <HAL_RCCEx_PeriphCLKConfig+0x150>
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	685b      	ldr	r3, [r3, #4]
 800f93a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f93e:	68fa      	ldr	r2, [r7, #12]
 800f940:	429a      	cmp	r2, r3
 800f942:	d027      	beq.n	800f994 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f944:	4b41      	ldr	r3, [pc, #260]	; (800fa4c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f946:	6a1b      	ldr	r3, [r3, #32]
 800f948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f94c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800f94e:	4b41      	ldr	r3, [pc, #260]	; (800fa54 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800f950:	2201      	movs	r2, #1
 800f952:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800f954:	4b3f      	ldr	r3, [pc, #252]	; (800fa54 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800f956:	2200      	movs	r2, #0
 800f958:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800f95a:	4a3c      	ldr	r2, [pc, #240]	; (800fa4c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	f003 0301 	and.w	r3, r3, #1
 800f966:	2b00      	cmp	r3, #0
 800f968:	d014      	beq.n	800f994 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f96a:	f7fc fe8d 	bl	800c688 <HAL_GetTick>
 800f96e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f970:	e00a      	b.n	800f988 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f972:	f7fc fe89 	bl	800c688 <HAL_GetTick>
 800f976:	4602      	mov	r2, r0
 800f978:	693b      	ldr	r3, [r7, #16]
 800f97a:	1ad3      	subs	r3, r2, r3
 800f97c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f980:	4293      	cmp	r3, r2
 800f982:	d901      	bls.n	800f988 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 800f984:	2303      	movs	r3, #3
 800f986:	e05b      	b.n	800fa40 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f988:	4b30      	ldr	r3, [pc, #192]	; (800fa4c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f98a:	6a1b      	ldr	r3, [r3, #32]
 800f98c:	f003 0302 	and.w	r3, r3, #2
 800f990:	2b00      	cmp	r3, #0
 800f992:	d0ee      	beq.n	800f972 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f994:	4b2d      	ldr	r3, [pc, #180]	; (800fa4c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f996:	6a1b      	ldr	r3, [r3, #32]
 800f998:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	685b      	ldr	r3, [r3, #4]
 800f9a0:	492a      	ldr	r1, [pc, #168]	; (800fa4c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f9a2:	4313      	orrs	r3, r2
 800f9a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800f9a6:	7dfb      	ldrb	r3, [r7, #23]
 800f9a8:	2b01      	cmp	r3, #1
 800f9aa:	d105      	bne.n	800f9b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f9ac:	4b27      	ldr	r3, [pc, #156]	; (800fa4c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f9ae:	69db      	ldr	r3, [r3, #28]
 800f9b0:	4a26      	ldr	r2, [pc, #152]	; (800fa4c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f9b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f9b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	f003 0302 	and.w	r3, r3, #2
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d01f      	beq.n	800fa04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	689b      	ldr	r3, [r3, #8]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d012      	beq.n	800f9f2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	689b      	ldr	r3, [r3, #8]
 800f9d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f9d4:	d00d      	beq.n	800f9f2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	689b      	ldr	r3, [r3, #8]
 800f9da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f9de:	d008      	beq.n	800f9f2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	689b      	ldr	r3, [r3, #8]
 800f9e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f9e8:	d003      	beq.n	800f9f2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800f9ea:	21b9      	movs	r1, #185	; 0xb9
 800f9ec:	4816      	ldr	r0, [pc, #88]	; (800fa48 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800f9ee:	f7fc f9e3 	bl	800bdb8 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f9f2:	4b16      	ldr	r3, [pc, #88]	; (800fa4c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800f9f4:	685b      	ldr	r3, [r3, #4]
 800f9f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	689b      	ldr	r3, [r3, #8]
 800f9fe:	4913      	ldr	r1, [pc, #76]	; (800fa4c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800fa00:	4313      	orrs	r3, r2
 800fa02:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	f003 0310 	and.w	r3, r3, #16
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d016      	beq.n	800fa3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	68db      	ldr	r3, [r3, #12]
 800fa14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fa18:	d008      	beq.n	800fa2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	68db      	ldr	r3, [r3, #12]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d004      	beq.n	800fa2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800fa22:	f240 1115 	movw	r1, #277	; 0x115
 800fa26:	4808      	ldr	r0, [pc, #32]	; (800fa48 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800fa28:	f7fc f9c6 	bl	800bdb8 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800fa2c:	4b07      	ldr	r3, [pc, #28]	; (800fa4c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800fa2e:	685b      	ldr	r3, [r3, #4]
 800fa30:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	68db      	ldr	r3, [r3, #12]
 800fa38:	4904      	ldr	r1, [pc, #16]	; (800fa4c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800fa3a:	4313      	orrs	r3, r2
 800fa3c:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800fa3e:	2300      	movs	r3, #0
}
 800fa40:	4618      	mov	r0, r3
 800fa42:	3718      	adds	r7, #24
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}
 800fa48:	08012df4 	.word	0x08012df4
 800fa4c:	40021000 	.word	0x40021000
 800fa50:	40007000 	.word	0x40007000
 800fa54:	42420440 	.word	0x42420440

0800fa58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b082      	sub	sp, #8
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d101      	bne.n	800fa6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800fa66:	2301      	movs	r3, #1
 800fa68:	e0fd      	b.n	800fc66 <HAL_SPI_Init+0x20e>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	4a80      	ldr	r2, [pc, #512]	; (800fc70 <HAL_SPI_Init+0x218>)
 800fa70:	4293      	cmp	r3, r2
 800fa72:	d009      	beq.n	800fa88 <HAL_SPI_Init+0x30>
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	4a7e      	ldr	r2, [pc, #504]	; (800fc74 <HAL_SPI_Init+0x21c>)
 800fa7a:	4293      	cmp	r3, r2
 800fa7c:	d004      	beq.n	800fa88 <HAL_SPI_Init+0x30>
 800fa7e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800fa82:	487d      	ldr	r0, [pc, #500]	; (800fc78 <HAL_SPI_Init+0x220>)
 800fa84:	f7fc f998 	bl	800bdb8 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	685b      	ldr	r3, [r3, #4]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d009      	beq.n	800faa4 <HAL_SPI_Init+0x4c>
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	685b      	ldr	r3, [r3, #4]
 800fa94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fa98:	d004      	beq.n	800faa4 <HAL_SPI_Init+0x4c>
 800fa9a:	f240 1159 	movw	r1, #345	; 0x159
 800fa9e:	4876      	ldr	r0, [pc, #472]	; (800fc78 <HAL_SPI_Init+0x220>)
 800faa0:	f7fc f98a 	bl	800bdb8 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	689b      	ldr	r3, [r3, #8]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d00e      	beq.n	800faca <HAL_SPI_Init+0x72>
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	689b      	ldr	r3, [r3, #8]
 800fab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fab4:	d009      	beq.n	800faca <HAL_SPI_Init+0x72>
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	689b      	ldr	r3, [r3, #8]
 800faba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fabe:	d004      	beq.n	800faca <HAL_SPI_Init+0x72>
 800fac0:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 800fac4:	486c      	ldr	r0, [pc, #432]	; (800fc78 <HAL_SPI_Init+0x220>)
 800fac6:	f7fc f977 	bl	800bdb8 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	68db      	ldr	r3, [r3, #12]
 800face:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fad2:	d008      	beq.n	800fae6 <HAL_SPI_Init+0x8e>
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	68db      	ldr	r3, [r3, #12]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d004      	beq.n	800fae6 <HAL_SPI_Init+0x8e>
 800fadc:	f240 115b 	movw	r1, #347	; 0x15b
 800fae0:	4865      	ldr	r0, [pc, #404]	; (800fc78 <HAL_SPI_Init+0x220>)
 800fae2:	f7fc f969 	bl	800bdb8 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	699b      	ldr	r3, [r3, #24]
 800faea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800faee:	d00d      	beq.n	800fb0c <HAL_SPI_Init+0xb4>
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	699b      	ldr	r3, [r3, #24]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d009      	beq.n	800fb0c <HAL_SPI_Init+0xb4>
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	699b      	ldr	r3, [r3, #24]
 800fafc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800fb00:	d004      	beq.n	800fb0c <HAL_SPI_Init+0xb4>
 800fb02:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800fb06:	485c      	ldr	r0, [pc, #368]	; (800fc78 <HAL_SPI_Init+0x220>)
 800fb08:	f7fc f956 	bl	800bdb8 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	69db      	ldr	r3, [r3, #28]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d020      	beq.n	800fb56 <HAL_SPI_Init+0xfe>
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	69db      	ldr	r3, [r3, #28]
 800fb18:	2b08      	cmp	r3, #8
 800fb1a:	d01c      	beq.n	800fb56 <HAL_SPI_Init+0xfe>
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	69db      	ldr	r3, [r3, #28]
 800fb20:	2b10      	cmp	r3, #16
 800fb22:	d018      	beq.n	800fb56 <HAL_SPI_Init+0xfe>
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	69db      	ldr	r3, [r3, #28]
 800fb28:	2b18      	cmp	r3, #24
 800fb2a:	d014      	beq.n	800fb56 <HAL_SPI_Init+0xfe>
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	69db      	ldr	r3, [r3, #28]
 800fb30:	2b20      	cmp	r3, #32
 800fb32:	d010      	beq.n	800fb56 <HAL_SPI_Init+0xfe>
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	69db      	ldr	r3, [r3, #28]
 800fb38:	2b28      	cmp	r3, #40	; 0x28
 800fb3a:	d00c      	beq.n	800fb56 <HAL_SPI_Init+0xfe>
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	69db      	ldr	r3, [r3, #28]
 800fb40:	2b30      	cmp	r3, #48	; 0x30
 800fb42:	d008      	beq.n	800fb56 <HAL_SPI_Init+0xfe>
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	69db      	ldr	r3, [r3, #28]
 800fb48:	2b38      	cmp	r3, #56	; 0x38
 800fb4a:	d004      	beq.n	800fb56 <HAL_SPI_Init+0xfe>
 800fb4c:	f240 115d 	movw	r1, #349	; 0x15d
 800fb50:	4849      	ldr	r0, [pc, #292]	; (800fc78 <HAL_SPI_Init+0x220>)
 800fb52:	f7fc f931 	bl	800bdb8 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	6a1b      	ldr	r3, [r3, #32]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d008      	beq.n	800fb70 <HAL_SPI_Init+0x118>
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	6a1b      	ldr	r3, [r3, #32]
 800fb62:	2b80      	cmp	r3, #128	; 0x80
 800fb64:	d004      	beq.n	800fb70 <HAL_SPI_Init+0x118>
 800fb66:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800fb6a:	4843      	ldr	r0, [pc, #268]	; (800fc78 <HAL_SPI_Init+0x220>)
 800fb6c:	f7fc f924 	bl	800bdb8 <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d004      	beq.n	800fb82 <HAL_SPI_Init+0x12a>
 800fb78:	f240 1161 	movw	r1, #353	; 0x161
 800fb7c:	483e      	ldr	r0, [pc, #248]	; (800fc78 <HAL_SPI_Init+0x220>)
 800fb7e:	f7fc f91b 	bl	800bdb8 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d119      	bne.n	800fbbe <HAL_SPI_Init+0x166>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	691b      	ldr	r3, [r3, #16]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d008      	beq.n	800fba4 <HAL_SPI_Init+0x14c>
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	691b      	ldr	r3, [r3, #16]
 800fb96:	2b02      	cmp	r3, #2
 800fb98:	d004      	beq.n	800fba4 <HAL_SPI_Init+0x14c>
 800fb9a:	f44f 71b2 	mov.w	r1, #356	; 0x164
 800fb9e:	4836      	ldr	r0, [pc, #216]	; (800fc78 <HAL_SPI_Init+0x220>)
 800fba0:	f7fc f90a 	bl	800bdb8 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	695b      	ldr	r3, [r3, #20]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d008      	beq.n	800fbbe <HAL_SPI_Init+0x166>
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	695b      	ldr	r3, [r3, #20]
 800fbb0:	2b01      	cmp	r3, #1
 800fbb2:	d004      	beq.n	800fbbe <HAL_SPI_Init+0x166>
 800fbb4:	f240 1165 	movw	r1, #357	; 0x165
 800fbb8:	482f      	ldr	r0, [pc, #188]	; (800fc78 <HAL_SPI_Init+0x220>)
 800fbba:	f7fc f8fd 	bl	800bdb8 <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fbca:	b2db      	uxtb	r3, r3
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d106      	bne.n	800fbde <HAL_SPI_Init+0x186>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f7fc f92f 	bl	800be3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	2202      	movs	r2, #2
 800fbe2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	681a      	ldr	r2, [r3, #0]
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fbf4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	685a      	ldr	r2, [r3, #4]
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	689b      	ldr	r3, [r3, #8]
 800fbfe:	431a      	orrs	r2, r3
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	68db      	ldr	r3, [r3, #12]
 800fc04:	431a      	orrs	r2, r3
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	691b      	ldr	r3, [r3, #16]
 800fc0a:	431a      	orrs	r2, r3
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	695b      	ldr	r3, [r3, #20]
 800fc10:	431a      	orrs	r2, r3
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	699b      	ldr	r3, [r3, #24]
 800fc16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fc1a:	431a      	orrs	r2, r3
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	69db      	ldr	r3, [r3, #28]
 800fc20:	431a      	orrs	r2, r3
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	6a1b      	ldr	r3, [r3, #32]
 800fc26:	ea42 0103 	orr.w	r1, r2, r3
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	430a      	orrs	r2, r1
 800fc34:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	699b      	ldr	r3, [r3, #24]
 800fc3a:	0c1a      	lsrs	r2, r3, #16
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	f002 0204 	and.w	r2, r2, #4
 800fc44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	69da      	ldr	r2, [r3, #28]
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fc54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	2200      	movs	r2, #0
 800fc5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2201      	movs	r2, #1
 800fc60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800fc64:	2300      	movs	r3, #0
}
 800fc66:	4618      	mov	r0, r3
 800fc68:	3708      	adds	r7, #8
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	bd80      	pop	{r7, pc}
 800fc6e:	bf00      	nop
 800fc70:	40013000 	.word	0x40013000
 800fc74:	40003800 	.word	0x40003800
 800fc78:	08012e44 	.word	0x08012e44

0800fc7c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b088      	sub	sp, #32
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	60f8      	str	r0, [r7, #12]
 800fc84:	60b9      	str	r1, [r7, #8]
 800fc86:	603b      	str	r3, [r7, #0]
 800fc88:	4613      	mov	r3, r2
 800fc8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	689b      	ldr	r3, [r3, #8]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d009      	beq.n	800fcac <HAL_SPI_Transmit+0x30>
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	689b      	ldr	r3, [r3, #8]
 800fc9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fca0:	d004      	beq.n	800fcac <HAL_SPI_Transmit+0x30>
 800fca2:	f240 310a 	movw	r1, #778	; 0x30a
 800fca6:	4896      	ldr	r0, [pc, #600]	; (800ff00 <HAL_SPI_Transmit+0x284>)
 800fca8:	f7fc f886 	bl	800bdb8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800fcb2:	2b01      	cmp	r3, #1
 800fcb4:	d101      	bne.n	800fcba <HAL_SPI_Transmit+0x3e>
 800fcb6:	2302      	movs	r3, #2
 800fcb8:	e11e      	b.n	800fef8 <HAL_SPI_Transmit+0x27c>
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	2201      	movs	r2, #1
 800fcbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fcc2:	f7fc fce1 	bl	800c688 <HAL_GetTick>
 800fcc6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800fcc8:	88fb      	ldrh	r3, [r7, #6]
 800fcca:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fcd2:	b2db      	uxtb	r3, r3
 800fcd4:	2b01      	cmp	r3, #1
 800fcd6:	d002      	beq.n	800fcde <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 800fcd8:	2302      	movs	r3, #2
 800fcda:	77fb      	strb	r3, [r7, #31]
    goto error;
 800fcdc:	e103      	b.n	800fee6 <HAL_SPI_Transmit+0x26a>
  }

  if ((pData == NULL) || (Size == 0U))
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d002      	beq.n	800fcea <HAL_SPI_Transmit+0x6e>
 800fce4:	88fb      	ldrh	r3, [r7, #6]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d102      	bne.n	800fcf0 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 800fcea:	2301      	movs	r3, #1
 800fcec:	77fb      	strb	r3, [r7, #31]
    goto error;
 800fcee:	e0fa      	b.n	800fee6 <HAL_SPI_Transmit+0x26a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	2203      	movs	r2, #3
 800fcf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	68ba      	ldr	r2, [r7, #8]
 800fd02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	88fa      	ldrh	r2, [r7, #6]
 800fd08:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	88fa      	ldrh	r2, [r7, #6]
 800fd0e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	2200      	movs	r2, #0
 800fd14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	2200      	movs	r2, #0
 800fd1a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	2200      	movs	r2, #0
 800fd20:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	2200      	movs	r2, #0
 800fd26:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	689b      	ldr	r3, [r3, #8]
 800fd32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fd36:	d107      	bne.n	800fd48 <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	681a      	ldr	r2, [r3, #0]
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fd46:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd52:	2b40      	cmp	r3, #64	; 0x40
 800fd54:	d007      	beq.n	800fd66 <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	681a      	ldr	r2, [r3, #0]
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fd64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	68db      	ldr	r3, [r3, #12]
 800fd6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fd6e:	d14b      	bne.n	800fe08 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	685b      	ldr	r3, [r3, #4]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d002      	beq.n	800fd7e <HAL_SPI_Transmit+0x102>
 800fd78:	8afb      	ldrh	r3, [r7, #22]
 800fd7a:	2b01      	cmp	r3, #1
 800fd7c:	d13e      	bne.n	800fdfc <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd82:	881a      	ldrh	r2, [r3, #0]
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd8e:	1c9a      	adds	r2, r3, #2
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fd98:	b29b      	uxth	r3, r3
 800fd9a:	3b01      	subs	r3, #1
 800fd9c:	b29a      	uxth	r2, r3
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800fda2:	e02b      	b.n	800fdfc <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	689b      	ldr	r3, [r3, #8]
 800fdaa:	f003 0302 	and.w	r3, r3, #2
 800fdae:	2b02      	cmp	r3, #2
 800fdb0:	d112      	bne.n	800fdd8 <HAL_SPI_Transmit+0x15c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdb6:	881a      	ldrh	r2, [r3, #0]
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdc2:	1c9a      	adds	r2, r3, #2
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fdcc:	b29b      	uxth	r3, r3
 800fdce:	3b01      	subs	r3, #1
 800fdd0:	b29a      	uxth	r2, r3
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	86da      	strh	r2, [r3, #54]	; 0x36
 800fdd6:	e011      	b.n	800fdfc <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fdd8:	f7fc fc56 	bl	800c688 <HAL_GetTick>
 800fddc:	4602      	mov	r2, r0
 800fdde:	69bb      	ldr	r3, [r7, #24]
 800fde0:	1ad3      	subs	r3, r2, r3
 800fde2:	683a      	ldr	r2, [r7, #0]
 800fde4:	429a      	cmp	r2, r3
 800fde6:	d803      	bhi.n	800fdf0 <HAL_SPI_Transmit+0x174>
 800fde8:	683b      	ldr	r3, [r7, #0]
 800fdea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdee:	d102      	bne.n	800fdf6 <HAL_SPI_Transmit+0x17a>
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d102      	bne.n	800fdfc <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800fdf6:	2303      	movs	r3, #3
 800fdf8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800fdfa:	e074      	b.n	800fee6 <HAL_SPI_Transmit+0x26a>
    while (hspi->TxXferCount > 0U)
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fe00:	b29b      	uxth	r3, r3
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d1ce      	bne.n	800fda4 <HAL_SPI_Transmit+0x128>
 800fe06:	e04c      	b.n	800fea2 <HAL_SPI_Transmit+0x226>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	685b      	ldr	r3, [r3, #4]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d002      	beq.n	800fe16 <HAL_SPI_Transmit+0x19a>
 800fe10:	8afb      	ldrh	r3, [r7, #22]
 800fe12:	2b01      	cmp	r3, #1
 800fe14:	d140      	bne.n	800fe98 <HAL_SPI_Transmit+0x21c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	330c      	adds	r3, #12
 800fe20:	7812      	ldrb	r2, [r2, #0]
 800fe22:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe28:	1c5a      	adds	r2, r3, #1
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fe32:	b29b      	uxth	r3, r3
 800fe34:	3b01      	subs	r3, #1
 800fe36:	b29a      	uxth	r2, r3
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800fe3c:	e02c      	b.n	800fe98 <HAL_SPI_Transmit+0x21c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	689b      	ldr	r3, [r3, #8]
 800fe44:	f003 0302 	and.w	r3, r3, #2
 800fe48:	2b02      	cmp	r3, #2
 800fe4a:	d113      	bne.n	800fe74 <HAL_SPI_Transmit+0x1f8>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	330c      	adds	r3, #12
 800fe56:	7812      	ldrb	r2, [r2, #0]
 800fe58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe5e:	1c5a      	adds	r2, r3, #1
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fe68:	b29b      	uxth	r3, r3
 800fe6a:	3b01      	subs	r3, #1
 800fe6c:	b29a      	uxth	r2, r3
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	86da      	strh	r2, [r3, #54]	; 0x36
 800fe72:	e011      	b.n	800fe98 <HAL_SPI_Transmit+0x21c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fe74:	f7fc fc08 	bl	800c688 <HAL_GetTick>
 800fe78:	4602      	mov	r2, r0
 800fe7a:	69bb      	ldr	r3, [r7, #24]
 800fe7c:	1ad3      	subs	r3, r2, r3
 800fe7e:	683a      	ldr	r2, [r7, #0]
 800fe80:	429a      	cmp	r2, r3
 800fe82:	d803      	bhi.n	800fe8c <HAL_SPI_Transmit+0x210>
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe8a:	d102      	bne.n	800fe92 <HAL_SPI_Transmit+0x216>
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d102      	bne.n	800fe98 <HAL_SPI_Transmit+0x21c>
        {
          errorcode = HAL_TIMEOUT;
 800fe92:	2303      	movs	r3, #3
 800fe94:	77fb      	strb	r3, [r7, #31]
          goto error;
 800fe96:	e026      	b.n	800fee6 <HAL_SPI_Transmit+0x26a>
    while (hspi->TxXferCount > 0U)
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fe9c:	b29b      	uxth	r3, r3
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d1cd      	bne.n	800fe3e <HAL_SPI_Transmit+0x1c2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800fea2:	69ba      	ldr	r2, [r7, #24]
 800fea4:	6839      	ldr	r1, [r7, #0]
 800fea6:	68f8      	ldr	r0, [r7, #12]
 800fea8:	f000 f896 	bl	800ffd8 <SPI_EndRxTxTransaction>
 800feac:	4603      	mov	r3, r0
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d002      	beq.n	800feb8 <HAL_SPI_Transmit+0x23c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	2220      	movs	r2, #32
 800feb6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	689b      	ldr	r3, [r3, #8]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d10a      	bne.n	800fed6 <HAL_SPI_Transmit+0x25a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fec0:	2300      	movs	r3, #0
 800fec2:	613b      	str	r3, [r7, #16]
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	68db      	ldr	r3, [r3, #12]
 800feca:	613b      	str	r3, [r7, #16]
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	689b      	ldr	r3, [r3, #8]
 800fed2:	613b      	str	r3, [r7, #16]
 800fed4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d002      	beq.n	800fee4 <HAL_SPI_Transmit+0x268>
  {
    errorcode = HAL_ERROR;
 800fede:	2301      	movs	r3, #1
 800fee0:	77fb      	strb	r3, [r7, #31]
 800fee2:	e000      	b.n	800fee6 <HAL_SPI_Transmit+0x26a>
  }

error:
 800fee4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	2201      	movs	r2, #1
 800feea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	2200      	movs	r2, #0
 800fef2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800fef6:	7ffb      	ldrb	r3, [r7, #31]
}
 800fef8:	4618      	mov	r0, r3
 800fefa:	3720      	adds	r7, #32
 800fefc:	46bd      	mov	sp, r7
 800fefe:	bd80      	pop	{r7, pc}
 800ff00:	08012e44 	.word	0x08012e44

0800ff04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b084      	sub	sp, #16
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	60f8      	str	r0, [r7, #12]
 800ff0c:	60b9      	str	r1, [r7, #8]
 800ff0e:	603b      	str	r3, [r7, #0]
 800ff10:	4613      	mov	r3, r2
 800ff12:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ff14:	e04c      	b.n	800ffb0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ff16:	683b      	ldr	r3, [r7, #0]
 800ff18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff1c:	d048      	beq.n	800ffb0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ff1e:	f7fc fbb3 	bl	800c688 <HAL_GetTick>
 800ff22:	4602      	mov	r2, r0
 800ff24:	69bb      	ldr	r3, [r7, #24]
 800ff26:	1ad3      	subs	r3, r2, r3
 800ff28:	683a      	ldr	r2, [r7, #0]
 800ff2a:	429a      	cmp	r2, r3
 800ff2c:	d902      	bls.n	800ff34 <SPI_WaitFlagStateUntilTimeout+0x30>
 800ff2e:	683b      	ldr	r3, [r7, #0]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d13d      	bne.n	800ffb0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	685a      	ldr	r2, [r3, #4]
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ff42:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	685b      	ldr	r3, [r3, #4]
 800ff48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ff4c:	d111      	bne.n	800ff72 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	689b      	ldr	r3, [r3, #8]
 800ff52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ff56:	d004      	beq.n	800ff62 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	689b      	ldr	r3, [r3, #8]
 800ff5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ff60:	d107      	bne.n	800ff72 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	681a      	ldr	r2, [r3, #0]
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ff70:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ff7a:	d10f      	bne.n	800ff9c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	681a      	ldr	r2, [r3, #0]
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ff8a:	601a      	str	r2, [r3, #0]
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	681a      	ldr	r2, [r3, #0]
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ff9a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	2201      	movs	r2, #1
 800ffa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ffac:	2303      	movs	r3, #3
 800ffae:	e00f      	b.n	800ffd0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	689a      	ldr	r2, [r3, #8]
 800ffb6:	68bb      	ldr	r3, [r7, #8]
 800ffb8:	4013      	ands	r3, r2
 800ffba:	68ba      	ldr	r2, [r7, #8]
 800ffbc:	429a      	cmp	r2, r3
 800ffbe:	bf0c      	ite	eq
 800ffc0:	2301      	moveq	r3, #1
 800ffc2:	2300      	movne	r3, #0
 800ffc4:	b2db      	uxtb	r3, r3
 800ffc6:	461a      	mov	r2, r3
 800ffc8:	79fb      	ldrb	r3, [r7, #7]
 800ffca:	429a      	cmp	r2, r3
 800ffcc:	d1a3      	bne.n	800ff16 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800ffce:	2300      	movs	r3, #0
}
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	3710      	adds	r7, #16
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	bd80      	pop	{r7, pc}

0800ffd8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b086      	sub	sp, #24
 800ffdc:	af02      	add	r7, sp, #8
 800ffde:	60f8      	str	r0, [r7, #12]
 800ffe0:	60b9      	str	r1, [r7, #8]
 800ffe2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	9300      	str	r3, [sp, #0]
 800ffe8:	68bb      	ldr	r3, [r7, #8]
 800ffea:	2200      	movs	r2, #0
 800ffec:	2180      	movs	r1, #128	; 0x80
 800ffee:	68f8      	ldr	r0, [r7, #12]
 800fff0:	f7ff ff88 	bl	800ff04 <SPI_WaitFlagStateUntilTimeout>
 800fff4:	4603      	mov	r3, r0
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d007      	beq.n	801000a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fffe:	f043 0220 	orr.w	r2, r3, #32
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8010006:	2303      	movs	r3, #3
 8010008:	e000      	b.n	801000c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 801000a:	2300      	movs	r3, #0
}
 801000c:	4618      	mov	r0, r3
 801000e:	3710      	adds	r7, #16
 8010010:	46bd      	mov	sp, r7
 8010012:	bd80      	pop	{r7, pc}

08010014 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b082      	sub	sp, #8
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d101      	bne.n	8010026 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010022:	2301      	movs	r3, #1
 8010024:	e06f      	b.n	8010106 <HAL_TIM_Base_Init+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	4a39      	ldr	r2, [pc, #228]	; (8010110 <HAL_TIM_Base_Init+0xfc>)
 801002c:	4293      	cmp	r3, r2
 801002e:	d013      	beq.n	8010058 <HAL_TIM_Base_Init+0x44>
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010038:	d00e      	beq.n	8010058 <HAL_TIM_Base_Init+0x44>
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	4a35      	ldr	r2, [pc, #212]	; (8010114 <HAL_TIM_Base_Init+0x100>)
 8010040:	4293      	cmp	r3, r2
 8010042:	d009      	beq.n	8010058 <HAL_TIM_Base_Init+0x44>
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	4a33      	ldr	r2, [pc, #204]	; (8010118 <HAL_TIM_Base_Init+0x104>)
 801004a:	4293      	cmp	r3, r2
 801004c:	d004      	beq.n	8010058 <HAL_TIM_Base_Init+0x44>
 801004e:	f44f 7189 	mov.w	r1, #274	; 0x112
 8010052:	4832      	ldr	r0, [pc, #200]	; (801011c <HAL_TIM_Base_Init+0x108>)
 8010054:	f7fb feb0 	bl	800bdb8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	689b      	ldr	r3, [r3, #8]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d014      	beq.n	801008a <HAL_TIM_Base_Init+0x76>
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	689b      	ldr	r3, [r3, #8]
 8010064:	2b10      	cmp	r3, #16
 8010066:	d010      	beq.n	801008a <HAL_TIM_Base_Init+0x76>
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	689b      	ldr	r3, [r3, #8]
 801006c:	2b20      	cmp	r3, #32
 801006e:	d00c      	beq.n	801008a <HAL_TIM_Base_Init+0x76>
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	689b      	ldr	r3, [r3, #8]
 8010074:	2b40      	cmp	r3, #64	; 0x40
 8010076:	d008      	beq.n	801008a <HAL_TIM_Base_Init+0x76>
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	689b      	ldr	r3, [r3, #8]
 801007c:	2b60      	cmp	r3, #96	; 0x60
 801007e:	d004      	beq.n	801008a <HAL_TIM_Base_Init+0x76>
 8010080:	f240 1113 	movw	r1, #275	; 0x113
 8010084:	4825      	ldr	r0, [pc, #148]	; (801011c <HAL_TIM_Base_Init+0x108>)
 8010086:	f7fb fe97 	bl	800bdb8 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	691b      	ldr	r3, [r3, #16]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d00e      	beq.n	80100b0 <HAL_TIM_Base_Init+0x9c>
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	691b      	ldr	r3, [r3, #16]
 8010096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801009a:	d009      	beq.n	80100b0 <HAL_TIM_Base_Init+0x9c>
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	691b      	ldr	r3, [r3, #16]
 80100a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80100a4:	d004      	beq.n	80100b0 <HAL_TIM_Base_Init+0x9c>
 80100a6:	f44f 718a 	mov.w	r1, #276	; 0x114
 80100aa:	481c      	ldr	r0, [pc, #112]	; (801011c <HAL_TIM_Base_Init+0x108>)
 80100ac:	f7fb fe84 	bl	800bdb8 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	699b      	ldr	r3, [r3, #24]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d008      	beq.n	80100ca <HAL_TIM_Base_Init+0xb6>
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	699b      	ldr	r3, [r3, #24]
 80100bc:	2b80      	cmp	r3, #128	; 0x80
 80100be:	d004      	beq.n	80100ca <HAL_TIM_Base_Init+0xb6>
 80100c0:	f240 1115 	movw	r1, #277	; 0x115
 80100c4:	4815      	ldr	r0, [pc, #84]	; (801011c <HAL_TIM_Base_Init+0x108>)
 80100c6:	f7fb fe77 	bl	800bdb8 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80100d0:	b2db      	uxtb	r3, r3
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d106      	bne.n	80100e4 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	2200      	movs	r2, #0
 80100da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80100de:	6878      	ldr	r0, [r7, #4]
 80100e0:	f7fc f9ac 	bl	800c43c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2202      	movs	r2, #2
 80100e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681a      	ldr	r2, [r3, #0]
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	3304      	adds	r3, #4
 80100f4:	4619      	mov	r1, r3
 80100f6:	4610      	mov	r0, r2
 80100f8:	f000 fae8 	bl	80106cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2201      	movs	r2, #1
 8010100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010104:	2300      	movs	r3, #0
}
 8010106:	4618      	mov	r0, r3
 8010108:	3708      	adds	r7, #8
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}
 801010e:	bf00      	nop
 8010110:	40012c00 	.word	0x40012c00
 8010114:	40000400 	.word	0x40000400
 8010118:	40000800 	.word	0x40000800
 801011c:	08012e7c 	.word	0x08012e7c

08010120 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b084      	sub	sp, #16
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	4a1a      	ldr	r2, [pc, #104]	; (8010198 <HAL_TIM_Base_Start+0x78>)
 801012e:	4293      	cmp	r3, r2
 8010130:	d013      	beq.n	801015a <HAL_TIM_Base_Start+0x3a>
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801013a:	d00e      	beq.n	801015a <HAL_TIM_Base_Start+0x3a>
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	4a16      	ldr	r2, [pc, #88]	; (801019c <HAL_TIM_Base_Start+0x7c>)
 8010142:	4293      	cmp	r3, r2
 8010144:	d009      	beq.n	801015a <HAL_TIM_Base_Start+0x3a>
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	4a15      	ldr	r2, [pc, #84]	; (80101a0 <HAL_TIM_Base_Start+0x80>)
 801014c:	4293      	cmp	r3, r2
 801014e:	d004      	beq.n	801015a <HAL_TIM_Base_Start+0x3a>
 8010150:	f240 1185 	movw	r1, #389	; 0x185
 8010154:	4813      	ldr	r0, [pc, #76]	; (80101a4 <HAL_TIM_Base_Start+0x84>)
 8010156:	f7fb fe2f 	bl	800bdb8 <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	2202      	movs	r2, #2
 801015e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	689b      	ldr	r3, [r3, #8]
 8010168:	f003 0307 	and.w	r3, r3, #7
 801016c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	2b06      	cmp	r3, #6
 8010172:	d007      	beq.n	8010184 <HAL_TIM_Base_Start+0x64>
  {
    __HAL_TIM_ENABLE(htim);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	681a      	ldr	r2, [r3, #0]
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	f042 0201 	orr.w	r2, r2, #1
 8010182:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	2201      	movs	r2, #1
 8010188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801018c:	2300      	movs	r3, #0
}
 801018e:	4618      	mov	r0, r3
 8010190:	3710      	adds	r7, #16
 8010192:	46bd      	mov	sp, r7
 8010194:	bd80      	pop	{r7, pc}
 8010196:	bf00      	nop
 8010198:	40012c00 	.word	0x40012c00
 801019c:	40000400 	.word	0x40000400
 80101a0:	40000800 	.word	0x40000800
 80101a4:	08012e7c 	.word	0x08012e7c

080101a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b084      	sub	sp, #16
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
 80101b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80101b8:	2b01      	cmp	r3, #1
 80101ba:	d101      	bne.n	80101c0 <HAL_TIM_ConfigClockSource+0x18>
 80101bc:	2302      	movs	r3, #2
 80101be:	e279      	b.n	80106b4 <HAL_TIM_ConfigClockSource+0x50c>
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	2201      	movs	r2, #1
 80101c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	2202      	movs	r2, #2
 80101cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80101d0:	683b      	ldr	r3, [r7, #0]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80101d8:	d029      	beq.n	801022e <HAL_TIM_ConfigClockSource+0x86>
 80101da:	683b      	ldr	r3, [r7, #0]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80101e2:	d024      	beq.n	801022e <HAL_TIM_ConfigClockSource+0x86>
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d020      	beq.n	801022e <HAL_TIM_ConfigClockSource+0x86>
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	2b10      	cmp	r3, #16
 80101f2:	d01c      	beq.n	801022e <HAL_TIM_ConfigClockSource+0x86>
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	2b20      	cmp	r3, #32
 80101fa:	d018      	beq.n	801022e <HAL_TIM_ConfigClockSource+0x86>
 80101fc:	683b      	ldr	r3, [r7, #0]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	2b30      	cmp	r3, #48	; 0x30
 8010202:	d014      	beq.n	801022e <HAL_TIM_ConfigClockSource+0x86>
 8010204:	683b      	ldr	r3, [r7, #0]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	2b40      	cmp	r3, #64	; 0x40
 801020a:	d010      	beq.n	801022e <HAL_TIM_ConfigClockSource+0x86>
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	2b50      	cmp	r3, #80	; 0x50
 8010212:	d00c      	beq.n	801022e <HAL_TIM_ConfigClockSource+0x86>
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	2b60      	cmp	r3, #96	; 0x60
 801021a:	d008      	beq.n	801022e <HAL_TIM_ConfigClockSource+0x86>
 801021c:	683b      	ldr	r3, [r7, #0]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	2b70      	cmp	r3, #112	; 0x70
 8010222:	d004      	beq.n	801022e <HAL_TIM_ConfigClockSource+0x86>
 8010224:	f241 118a 	movw	r1, #4490	; 0x118a
 8010228:	4896      	ldr	r0, [pc, #600]	; (8010484 <HAL_TIM_ConfigClockSource+0x2dc>)
 801022a:	f7fb fdc5 	bl	800bdb8 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	689b      	ldr	r3, [r3, #8]
 8010234:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801023c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010244:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	68fa      	ldr	r2, [r7, #12]
 801024c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801024e:	683b      	ldr	r3, [r7, #0]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	2b40      	cmp	r3, #64	; 0x40
 8010254:	f000 81b6 	beq.w	80105c4 <HAL_TIM_ConfigClockSource+0x41c>
 8010258:	2b40      	cmp	r3, #64	; 0x40
 801025a:	d80f      	bhi.n	801027c <HAL_TIM_ConfigClockSource+0xd4>
 801025c:	2b10      	cmp	r3, #16
 801025e:	f000 81fd 	beq.w	801065c <HAL_TIM_ConfigClockSource+0x4b4>
 8010262:	2b10      	cmp	r3, #16
 8010264:	d803      	bhi.n	801026e <HAL_TIM_ConfigClockSource+0xc6>
 8010266:	2b00      	cmp	r3, #0
 8010268:	f000 81f8 	beq.w	801065c <HAL_TIM_ConfigClockSource+0x4b4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 801026c:	e219      	b.n	80106a2 <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 801026e:	2b20      	cmp	r3, #32
 8010270:	f000 81f4 	beq.w	801065c <HAL_TIM_ConfigClockSource+0x4b4>
 8010274:	2b30      	cmp	r3, #48	; 0x30
 8010276:	f000 81f1 	beq.w	801065c <HAL_TIM_ConfigClockSource+0x4b4>
      break;
 801027a:	e212      	b.n	80106a2 <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 801027c:	2b70      	cmp	r3, #112	; 0x70
 801027e:	d02e      	beq.n	80102de <HAL_TIM_ConfigClockSource+0x136>
 8010280:	2b70      	cmp	r3, #112	; 0x70
 8010282:	d806      	bhi.n	8010292 <HAL_TIM_ConfigClockSource+0xea>
 8010284:	2b50      	cmp	r3, #80	; 0x50
 8010286:	f000 8105 	beq.w	8010494 <HAL_TIM_ConfigClockSource+0x2ec>
 801028a:	2b60      	cmp	r3, #96	; 0x60
 801028c:	f000 814e 	beq.w	801052c <HAL_TIM_ConfigClockSource+0x384>
      break;
 8010290:	e207      	b.n	80106a2 <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 8010292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010296:	d004      	beq.n	80102a2 <HAL_TIM_ConfigClockSource+0xfa>
 8010298:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801029c:	f000 808a 	beq.w	80103b4 <HAL_TIM_ConfigClockSource+0x20c>
      break;
 80102a0:	e1ff      	b.n	80106a2 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	4a78      	ldr	r2, [pc, #480]	; (8010488 <HAL_TIM_ConfigClockSource+0x2e0>)
 80102a8:	4293      	cmp	r3, r2
 80102aa:	f000 81f9 	beq.w	80106a0 <HAL_TIM_ConfigClockSource+0x4f8>
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80102b6:	f000 81f3 	beq.w	80106a0 <HAL_TIM_ConfigClockSource+0x4f8>
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	4a73      	ldr	r2, [pc, #460]	; (801048c <HAL_TIM_ConfigClockSource+0x2e4>)
 80102c0:	4293      	cmp	r3, r2
 80102c2:	f000 81ed 	beq.w	80106a0 <HAL_TIM_ConfigClockSource+0x4f8>
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	4a71      	ldr	r2, [pc, #452]	; (8010490 <HAL_TIM_ConfigClockSource+0x2e8>)
 80102cc:	4293      	cmp	r3, r2
 80102ce:	f000 81e7 	beq.w	80106a0 <HAL_TIM_ConfigClockSource+0x4f8>
 80102d2:	f241 1196 	movw	r1, #4502	; 0x1196
 80102d6:	486b      	ldr	r0, [pc, #428]	; (8010484 <HAL_TIM_ConfigClockSource+0x2dc>)
 80102d8:	f7fb fd6e 	bl	800bdb8 <assert_failed>
      break;
 80102dc:	e1e0      	b.n	80106a0 <HAL_TIM_ConfigClockSource+0x4f8>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	4a69      	ldr	r2, [pc, #420]	; (8010488 <HAL_TIM_ConfigClockSource+0x2e0>)
 80102e4:	4293      	cmp	r3, r2
 80102e6:	d013      	beq.n	8010310 <HAL_TIM_ConfigClockSource+0x168>
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80102f0:	d00e      	beq.n	8010310 <HAL_TIM_ConfigClockSource+0x168>
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	4a65      	ldr	r2, [pc, #404]	; (801048c <HAL_TIM_ConfigClockSource+0x2e4>)
 80102f8:	4293      	cmp	r3, r2
 80102fa:	d009      	beq.n	8010310 <HAL_TIM_ConfigClockSource+0x168>
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	4a63      	ldr	r2, [pc, #396]	; (8010490 <HAL_TIM_ConfigClockSource+0x2e8>)
 8010302:	4293      	cmp	r3, r2
 8010304:	d004      	beq.n	8010310 <HAL_TIM_ConfigClockSource+0x168>
 8010306:	f241 119d 	movw	r1, #4509	; 0x119d
 801030a:	485e      	ldr	r0, [pc, #376]	; (8010484 <HAL_TIM_ConfigClockSource+0x2dc>)
 801030c:	f7fb fd54 	bl	800bdb8 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8010310:	683b      	ldr	r3, [r7, #0]
 8010312:	689b      	ldr	r3, [r3, #8]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d013      	beq.n	8010340 <HAL_TIM_ConfigClockSource+0x198>
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	689b      	ldr	r3, [r3, #8]
 801031c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010320:	d00e      	beq.n	8010340 <HAL_TIM_ConfigClockSource+0x198>
 8010322:	683b      	ldr	r3, [r7, #0]
 8010324:	689b      	ldr	r3, [r3, #8]
 8010326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801032a:	d009      	beq.n	8010340 <HAL_TIM_ConfigClockSource+0x198>
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	689b      	ldr	r3, [r3, #8]
 8010330:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010334:	d004      	beq.n	8010340 <HAL_TIM_ConfigClockSource+0x198>
 8010336:	f44f 518d 	mov.w	r1, #4512	; 0x11a0
 801033a:	4852      	ldr	r0, [pc, #328]	; (8010484 <HAL_TIM_ConfigClockSource+0x2dc>)
 801033c:	f7fb fd3c 	bl	800bdb8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010340:	683b      	ldr	r3, [r7, #0]
 8010342:	685b      	ldr	r3, [r3, #4]
 8010344:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010348:	d014      	beq.n	8010374 <HAL_TIM_ConfigClockSource+0x1cc>
 801034a:	683b      	ldr	r3, [r7, #0]
 801034c:	685b      	ldr	r3, [r3, #4]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d010      	beq.n	8010374 <HAL_TIM_ConfigClockSource+0x1cc>
 8010352:	683b      	ldr	r3, [r7, #0]
 8010354:	685b      	ldr	r3, [r3, #4]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d00c      	beq.n	8010374 <HAL_TIM_ConfigClockSource+0x1cc>
 801035a:	683b      	ldr	r3, [r7, #0]
 801035c:	685b      	ldr	r3, [r3, #4]
 801035e:	2b02      	cmp	r3, #2
 8010360:	d008      	beq.n	8010374 <HAL_TIM_ConfigClockSource+0x1cc>
 8010362:	683b      	ldr	r3, [r7, #0]
 8010364:	685b      	ldr	r3, [r3, #4]
 8010366:	2b0a      	cmp	r3, #10
 8010368:	d004      	beq.n	8010374 <HAL_TIM_ConfigClockSource+0x1cc>
 801036a:	f241 11a1 	movw	r1, #4513	; 0x11a1
 801036e:	4845      	ldr	r0, [pc, #276]	; (8010484 <HAL_TIM_ConfigClockSource+0x2dc>)
 8010370:	f7fb fd22 	bl	800bdb8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010374:	683b      	ldr	r3, [r7, #0]
 8010376:	68db      	ldr	r3, [r3, #12]
 8010378:	2b0f      	cmp	r3, #15
 801037a:	d904      	bls.n	8010386 <HAL_TIM_ConfigClockSource+0x1de>
 801037c:	f241 11a2 	movw	r1, #4514	; 0x11a2
 8010380:	4840      	ldr	r0, [pc, #256]	; (8010484 <HAL_TIM_ConfigClockSource+0x2dc>)
 8010382:	f7fb fd19 	bl	800bdb8 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	6818      	ldr	r0, [r3, #0]
 801038a:	683b      	ldr	r3, [r7, #0]
 801038c:	6899      	ldr	r1, [r3, #8]
 801038e:	683b      	ldr	r3, [r7, #0]
 8010390:	685a      	ldr	r2, [r3, #4]
 8010392:	683b      	ldr	r3, [r7, #0]
 8010394:	68db      	ldr	r3, [r3, #12]
 8010396:	f000 fa72 	bl	801087e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	689b      	ldr	r3, [r3, #8]
 80103a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80103a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	68fa      	ldr	r2, [r7, #12]
 80103b0:	609a      	str	r2, [r3, #8]
      break;
 80103b2:	e176      	b.n	80106a2 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	4a33      	ldr	r2, [pc, #204]	; (8010488 <HAL_TIM_ConfigClockSource+0x2e0>)
 80103ba:	4293      	cmp	r3, r2
 80103bc:	d013      	beq.n	80103e6 <HAL_TIM_ConfigClockSource+0x23e>
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80103c6:	d00e      	beq.n	80103e6 <HAL_TIM_ConfigClockSource+0x23e>
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	4a2f      	ldr	r2, [pc, #188]	; (801048c <HAL_TIM_ConfigClockSource+0x2e4>)
 80103ce:	4293      	cmp	r3, r2
 80103d0:	d009      	beq.n	80103e6 <HAL_TIM_ConfigClockSource+0x23e>
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	4a2e      	ldr	r2, [pc, #184]	; (8010490 <HAL_TIM_ConfigClockSource+0x2e8>)
 80103d8:	4293      	cmp	r3, r2
 80103da:	d004      	beq.n	80103e6 <HAL_TIM_ConfigClockSource+0x23e>
 80103dc:	f241 11b5 	movw	r1, #4533	; 0x11b5
 80103e0:	4828      	ldr	r0, [pc, #160]	; (8010484 <HAL_TIM_ConfigClockSource+0x2dc>)
 80103e2:	f7fb fce9 	bl	800bdb8 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80103e6:	683b      	ldr	r3, [r7, #0]
 80103e8:	689b      	ldr	r3, [r3, #8]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d013      	beq.n	8010416 <HAL_TIM_ConfigClockSource+0x26e>
 80103ee:	683b      	ldr	r3, [r7, #0]
 80103f0:	689b      	ldr	r3, [r3, #8]
 80103f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80103f6:	d00e      	beq.n	8010416 <HAL_TIM_ConfigClockSource+0x26e>
 80103f8:	683b      	ldr	r3, [r7, #0]
 80103fa:	689b      	ldr	r3, [r3, #8]
 80103fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010400:	d009      	beq.n	8010416 <HAL_TIM_ConfigClockSource+0x26e>
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	689b      	ldr	r3, [r3, #8]
 8010406:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801040a:	d004      	beq.n	8010416 <HAL_TIM_ConfigClockSource+0x26e>
 801040c:	f241 11b8 	movw	r1, #4536	; 0x11b8
 8010410:	481c      	ldr	r0, [pc, #112]	; (8010484 <HAL_TIM_ConfigClockSource+0x2dc>)
 8010412:	f7fb fcd1 	bl	800bdb8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8010416:	683b      	ldr	r3, [r7, #0]
 8010418:	685b      	ldr	r3, [r3, #4]
 801041a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801041e:	d014      	beq.n	801044a <HAL_TIM_ConfigClockSource+0x2a2>
 8010420:	683b      	ldr	r3, [r7, #0]
 8010422:	685b      	ldr	r3, [r3, #4]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d010      	beq.n	801044a <HAL_TIM_ConfigClockSource+0x2a2>
 8010428:	683b      	ldr	r3, [r7, #0]
 801042a:	685b      	ldr	r3, [r3, #4]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d00c      	beq.n	801044a <HAL_TIM_ConfigClockSource+0x2a2>
 8010430:	683b      	ldr	r3, [r7, #0]
 8010432:	685b      	ldr	r3, [r3, #4]
 8010434:	2b02      	cmp	r3, #2
 8010436:	d008      	beq.n	801044a <HAL_TIM_ConfigClockSource+0x2a2>
 8010438:	683b      	ldr	r3, [r7, #0]
 801043a:	685b      	ldr	r3, [r3, #4]
 801043c:	2b0a      	cmp	r3, #10
 801043e:	d004      	beq.n	801044a <HAL_TIM_ConfigClockSource+0x2a2>
 8010440:	f241 11b9 	movw	r1, #4537	; 0x11b9
 8010444:	480f      	ldr	r0, [pc, #60]	; (8010484 <HAL_TIM_ConfigClockSource+0x2dc>)
 8010446:	f7fb fcb7 	bl	800bdb8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 801044a:	683b      	ldr	r3, [r7, #0]
 801044c:	68db      	ldr	r3, [r3, #12]
 801044e:	2b0f      	cmp	r3, #15
 8010450:	d904      	bls.n	801045c <HAL_TIM_ConfigClockSource+0x2b4>
 8010452:	f241 11ba 	movw	r1, #4538	; 0x11ba
 8010456:	480b      	ldr	r0, [pc, #44]	; (8010484 <HAL_TIM_ConfigClockSource+0x2dc>)
 8010458:	f7fb fcae 	bl	800bdb8 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	6818      	ldr	r0, [r3, #0]
 8010460:	683b      	ldr	r3, [r7, #0]
 8010462:	6899      	ldr	r1, [r3, #8]
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	685a      	ldr	r2, [r3, #4]
 8010468:	683b      	ldr	r3, [r7, #0]
 801046a:	68db      	ldr	r3, [r3, #12]
 801046c:	f000 fa07 	bl	801087e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	689a      	ldr	r2, [r3, #8]
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801047e:	609a      	str	r2, [r3, #8]
      break;
 8010480:	e10f      	b.n	80106a2 <HAL_TIM_ConfigClockSource+0x4fa>
 8010482:	bf00      	nop
 8010484:	08012e7c 	.word	0x08012e7c
 8010488:	40012c00 	.word	0x40012c00
 801048c:	40000400 	.word	0x40000400
 8010490:	40000800 	.word	0x40000800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	4a88      	ldr	r2, [pc, #544]	; (80106bc <HAL_TIM_ConfigClockSource+0x514>)
 801049a:	4293      	cmp	r3, r2
 801049c:	d013      	beq.n	80104c6 <HAL_TIM_ConfigClockSource+0x31e>
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80104a6:	d00e      	beq.n	80104c6 <HAL_TIM_ConfigClockSource+0x31e>
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	4a84      	ldr	r2, [pc, #528]	; (80106c0 <HAL_TIM_ConfigClockSource+0x518>)
 80104ae:	4293      	cmp	r3, r2
 80104b0:	d009      	beq.n	80104c6 <HAL_TIM_ConfigClockSource+0x31e>
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	4a83      	ldr	r2, [pc, #524]	; (80106c4 <HAL_TIM_ConfigClockSource+0x51c>)
 80104b8:	4293      	cmp	r3, r2
 80104ba:	d004      	beq.n	80104c6 <HAL_TIM_ConfigClockSource+0x31e>
 80104bc:	f241 11c9 	movw	r1, #4553	; 0x11c9
 80104c0:	4881      	ldr	r0, [pc, #516]	; (80106c8 <HAL_TIM_ConfigClockSource+0x520>)
 80104c2:	f7fb fc79 	bl	800bdb8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80104c6:	683b      	ldr	r3, [r7, #0]
 80104c8:	685b      	ldr	r3, [r3, #4]
 80104ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80104ce:	d014      	beq.n	80104fa <HAL_TIM_ConfigClockSource+0x352>
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	685b      	ldr	r3, [r3, #4]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d010      	beq.n	80104fa <HAL_TIM_ConfigClockSource+0x352>
 80104d8:	683b      	ldr	r3, [r7, #0]
 80104da:	685b      	ldr	r3, [r3, #4]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d00c      	beq.n	80104fa <HAL_TIM_ConfigClockSource+0x352>
 80104e0:	683b      	ldr	r3, [r7, #0]
 80104e2:	685b      	ldr	r3, [r3, #4]
 80104e4:	2b02      	cmp	r3, #2
 80104e6:	d008      	beq.n	80104fa <HAL_TIM_ConfigClockSource+0x352>
 80104e8:	683b      	ldr	r3, [r7, #0]
 80104ea:	685b      	ldr	r3, [r3, #4]
 80104ec:	2b0a      	cmp	r3, #10
 80104ee:	d004      	beq.n	80104fa <HAL_TIM_ConfigClockSource+0x352>
 80104f0:	f241 11cc 	movw	r1, #4556	; 0x11cc
 80104f4:	4874      	ldr	r0, [pc, #464]	; (80106c8 <HAL_TIM_ConfigClockSource+0x520>)
 80104f6:	f7fb fc5f 	bl	800bdb8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80104fa:	683b      	ldr	r3, [r7, #0]
 80104fc:	68db      	ldr	r3, [r3, #12]
 80104fe:	2b0f      	cmp	r3, #15
 8010500:	d904      	bls.n	801050c <HAL_TIM_ConfigClockSource+0x364>
 8010502:	f241 11cd 	movw	r1, #4557	; 0x11cd
 8010506:	4870      	ldr	r0, [pc, #448]	; (80106c8 <HAL_TIM_ConfigClockSource+0x520>)
 8010508:	f7fb fc56 	bl	800bdb8 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	6818      	ldr	r0, [r3, #0]
 8010510:	683b      	ldr	r3, [r7, #0]
 8010512:	6859      	ldr	r1, [r3, #4]
 8010514:	683b      	ldr	r3, [r7, #0]
 8010516:	68db      	ldr	r3, [r3, #12]
 8010518:	461a      	mov	r2, r3
 801051a:	f000 f939 	bl	8010790 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	2150      	movs	r1, #80	; 0x50
 8010524:	4618      	mov	r0, r3
 8010526:	f000 f990 	bl	801084a <TIM_ITRx_SetConfig>
      break;
 801052a:	e0ba      	b.n	80106a2 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	4a62      	ldr	r2, [pc, #392]	; (80106bc <HAL_TIM_ConfigClockSource+0x514>)
 8010532:	4293      	cmp	r3, r2
 8010534:	d013      	beq.n	801055e <HAL_TIM_ConfigClockSource+0x3b6>
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801053e:	d00e      	beq.n	801055e <HAL_TIM_ConfigClockSource+0x3b6>
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	4a5e      	ldr	r2, [pc, #376]	; (80106c0 <HAL_TIM_ConfigClockSource+0x518>)
 8010546:	4293      	cmp	r3, r2
 8010548:	d009      	beq.n	801055e <HAL_TIM_ConfigClockSource+0x3b6>
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	4a5d      	ldr	r2, [pc, #372]	; (80106c4 <HAL_TIM_ConfigClockSource+0x51c>)
 8010550:	4293      	cmp	r3, r2
 8010552:	d004      	beq.n	801055e <HAL_TIM_ConfigClockSource+0x3b6>
 8010554:	f241 11d9 	movw	r1, #4569	; 0x11d9
 8010558:	485b      	ldr	r0, [pc, #364]	; (80106c8 <HAL_TIM_ConfigClockSource+0x520>)
 801055a:	f7fb fc2d 	bl	800bdb8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 801055e:	683b      	ldr	r3, [r7, #0]
 8010560:	685b      	ldr	r3, [r3, #4]
 8010562:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010566:	d014      	beq.n	8010592 <HAL_TIM_ConfigClockSource+0x3ea>
 8010568:	683b      	ldr	r3, [r7, #0]
 801056a:	685b      	ldr	r3, [r3, #4]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d010      	beq.n	8010592 <HAL_TIM_ConfigClockSource+0x3ea>
 8010570:	683b      	ldr	r3, [r7, #0]
 8010572:	685b      	ldr	r3, [r3, #4]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d00c      	beq.n	8010592 <HAL_TIM_ConfigClockSource+0x3ea>
 8010578:	683b      	ldr	r3, [r7, #0]
 801057a:	685b      	ldr	r3, [r3, #4]
 801057c:	2b02      	cmp	r3, #2
 801057e:	d008      	beq.n	8010592 <HAL_TIM_ConfigClockSource+0x3ea>
 8010580:	683b      	ldr	r3, [r7, #0]
 8010582:	685b      	ldr	r3, [r3, #4]
 8010584:	2b0a      	cmp	r3, #10
 8010586:	d004      	beq.n	8010592 <HAL_TIM_ConfigClockSource+0x3ea>
 8010588:	f241 11dc 	movw	r1, #4572	; 0x11dc
 801058c:	484e      	ldr	r0, [pc, #312]	; (80106c8 <HAL_TIM_ConfigClockSource+0x520>)
 801058e:	f7fb fc13 	bl	800bdb8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8010592:	683b      	ldr	r3, [r7, #0]
 8010594:	68db      	ldr	r3, [r3, #12]
 8010596:	2b0f      	cmp	r3, #15
 8010598:	d904      	bls.n	80105a4 <HAL_TIM_ConfigClockSource+0x3fc>
 801059a:	f241 11dd 	movw	r1, #4573	; 0x11dd
 801059e:	484a      	ldr	r0, [pc, #296]	; (80106c8 <HAL_TIM_ConfigClockSource+0x520>)
 80105a0:	f7fb fc0a 	bl	800bdb8 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	6818      	ldr	r0, [r3, #0]
 80105a8:	683b      	ldr	r3, [r7, #0]
 80105aa:	6859      	ldr	r1, [r3, #4]
 80105ac:	683b      	ldr	r3, [r7, #0]
 80105ae:	68db      	ldr	r3, [r3, #12]
 80105b0:	461a      	mov	r2, r3
 80105b2:	f000 f91b 	bl	80107ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	2160      	movs	r1, #96	; 0x60
 80105bc:	4618      	mov	r0, r3
 80105be:	f000 f944 	bl	801084a <TIM_ITRx_SetConfig>
      break;
 80105c2:	e06e      	b.n	80106a2 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	4a3c      	ldr	r2, [pc, #240]	; (80106bc <HAL_TIM_ConfigClockSource+0x514>)
 80105ca:	4293      	cmp	r3, r2
 80105cc:	d013      	beq.n	80105f6 <HAL_TIM_ConfigClockSource+0x44e>
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80105d6:	d00e      	beq.n	80105f6 <HAL_TIM_ConfigClockSource+0x44e>
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	4a38      	ldr	r2, [pc, #224]	; (80106c0 <HAL_TIM_ConfigClockSource+0x518>)
 80105de:	4293      	cmp	r3, r2
 80105e0:	d009      	beq.n	80105f6 <HAL_TIM_ConfigClockSource+0x44e>
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	4a37      	ldr	r2, [pc, #220]	; (80106c4 <HAL_TIM_ConfigClockSource+0x51c>)
 80105e8:	4293      	cmp	r3, r2
 80105ea:	d004      	beq.n	80105f6 <HAL_TIM_ConfigClockSource+0x44e>
 80105ec:	f241 11e9 	movw	r1, #4585	; 0x11e9
 80105f0:	4835      	ldr	r0, [pc, #212]	; (80106c8 <HAL_TIM_ConfigClockSource+0x520>)
 80105f2:	f7fb fbe1 	bl	800bdb8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80105f6:	683b      	ldr	r3, [r7, #0]
 80105f8:	685b      	ldr	r3, [r3, #4]
 80105fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80105fe:	d014      	beq.n	801062a <HAL_TIM_ConfigClockSource+0x482>
 8010600:	683b      	ldr	r3, [r7, #0]
 8010602:	685b      	ldr	r3, [r3, #4]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d010      	beq.n	801062a <HAL_TIM_ConfigClockSource+0x482>
 8010608:	683b      	ldr	r3, [r7, #0]
 801060a:	685b      	ldr	r3, [r3, #4]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d00c      	beq.n	801062a <HAL_TIM_ConfigClockSource+0x482>
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	685b      	ldr	r3, [r3, #4]
 8010614:	2b02      	cmp	r3, #2
 8010616:	d008      	beq.n	801062a <HAL_TIM_ConfigClockSource+0x482>
 8010618:	683b      	ldr	r3, [r7, #0]
 801061a:	685b      	ldr	r3, [r3, #4]
 801061c:	2b0a      	cmp	r3, #10
 801061e:	d004      	beq.n	801062a <HAL_TIM_ConfigClockSource+0x482>
 8010620:	f241 11ec 	movw	r1, #4588	; 0x11ec
 8010624:	4828      	ldr	r0, [pc, #160]	; (80106c8 <HAL_TIM_ConfigClockSource+0x520>)
 8010626:	f7fb fbc7 	bl	800bdb8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 801062a:	683b      	ldr	r3, [r7, #0]
 801062c:	68db      	ldr	r3, [r3, #12]
 801062e:	2b0f      	cmp	r3, #15
 8010630:	d904      	bls.n	801063c <HAL_TIM_ConfigClockSource+0x494>
 8010632:	f241 11ed 	movw	r1, #4589	; 0x11ed
 8010636:	4824      	ldr	r0, [pc, #144]	; (80106c8 <HAL_TIM_ConfigClockSource+0x520>)
 8010638:	f7fb fbbe 	bl	800bdb8 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	6818      	ldr	r0, [r3, #0]
 8010640:	683b      	ldr	r3, [r7, #0]
 8010642:	6859      	ldr	r1, [r3, #4]
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	68db      	ldr	r3, [r3, #12]
 8010648:	461a      	mov	r2, r3
 801064a:	f000 f8a1 	bl	8010790 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	2140      	movs	r1, #64	; 0x40
 8010654:	4618      	mov	r0, r3
 8010656:	f000 f8f8 	bl	801084a <TIM_ITRx_SetConfig>
      break;
 801065a:	e022      	b.n	80106a2 <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	4a16      	ldr	r2, [pc, #88]	; (80106bc <HAL_TIM_ConfigClockSource+0x514>)
 8010662:	4293      	cmp	r3, r2
 8010664:	d013      	beq.n	801068e <HAL_TIM_ConfigClockSource+0x4e6>
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801066e:	d00e      	beq.n	801068e <HAL_TIM_ConfigClockSource+0x4e6>
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	4a12      	ldr	r2, [pc, #72]	; (80106c0 <HAL_TIM_ConfigClockSource+0x518>)
 8010676:	4293      	cmp	r3, r2
 8010678:	d009      	beq.n	801068e <HAL_TIM_ConfigClockSource+0x4e6>
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	4a11      	ldr	r2, [pc, #68]	; (80106c4 <HAL_TIM_ConfigClockSource+0x51c>)
 8010680:	4293      	cmp	r3, r2
 8010682:	d004      	beq.n	801068e <HAL_TIM_ConfigClockSource+0x4e6>
 8010684:	f241 11fc 	movw	r1, #4604	; 0x11fc
 8010688:	480f      	ldr	r0, [pc, #60]	; (80106c8 <HAL_TIM_ConfigClockSource+0x520>)
 801068a:	f7fb fb95 	bl	800bdb8 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	681a      	ldr	r2, [r3, #0]
 8010692:	683b      	ldr	r3, [r7, #0]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	4619      	mov	r1, r3
 8010698:	4610      	mov	r0, r2
 801069a:	f000 f8d6 	bl	801084a <TIM_ITRx_SetConfig>
      break;
 801069e:	e000      	b.n	80106a2 <HAL_TIM_ConfigClockSource+0x4fa>
      break;
 80106a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2201      	movs	r2, #1
 80106a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	2200      	movs	r2, #0
 80106ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80106b2:	2300      	movs	r3, #0
}
 80106b4:	4618      	mov	r0, r3
 80106b6:	3710      	adds	r7, #16
 80106b8:	46bd      	mov	sp, r7
 80106ba:	bd80      	pop	{r7, pc}
 80106bc:	40012c00 	.word	0x40012c00
 80106c0:	40000400 	.word	0x40000400
 80106c4:	40000800 	.word	0x40000800
 80106c8:	08012e7c 	.word	0x08012e7c

080106cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80106cc:	b480      	push	{r7}
 80106ce:	b085      	sub	sp, #20
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
 80106d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	4a29      	ldr	r2, [pc, #164]	; (8010784 <TIM_Base_SetConfig+0xb8>)
 80106e0:	4293      	cmp	r3, r2
 80106e2:	d00b      	beq.n	80106fc <TIM_Base_SetConfig+0x30>
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80106ea:	d007      	beq.n	80106fc <TIM_Base_SetConfig+0x30>
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	4a26      	ldr	r2, [pc, #152]	; (8010788 <TIM_Base_SetConfig+0xbc>)
 80106f0:	4293      	cmp	r3, r2
 80106f2:	d003      	beq.n	80106fc <TIM_Base_SetConfig+0x30>
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	4a25      	ldr	r2, [pc, #148]	; (801078c <TIM_Base_SetConfig+0xc0>)
 80106f8:	4293      	cmp	r3, r2
 80106fa:	d108      	bne.n	801070e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010702:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010704:	683b      	ldr	r3, [r7, #0]
 8010706:	685b      	ldr	r3, [r3, #4]
 8010708:	68fa      	ldr	r2, [r7, #12]
 801070a:	4313      	orrs	r3, r2
 801070c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	4a1c      	ldr	r2, [pc, #112]	; (8010784 <TIM_Base_SetConfig+0xb8>)
 8010712:	4293      	cmp	r3, r2
 8010714:	d00b      	beq.n	801072e <TIM_Base_SetConfig+0x62>
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801071c:	d007      	beq.n	801072e <TIM_Base_SetConfig+0x62>
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	4a19      	ldr	r2, [pc, #100]	; (8010788 <TIM_Base_SetConfig+0xbc>)
 8010722:	4293      	cmp	r3, r2
 8010724:	d003      	beq.n	801072e <TIM_Base_SetConfig+0x62>
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	4a18      	ldr	r2, [pc, #96]	; (801078c <TIM_Base_SetConfig+0xc0>)
 801072a:	4293      	cmp	r3, r2
 801072c:	d108      	bne.n	8010740 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010736:	683b      	ldr	r3, [r7, #0]
 8010738:	68db      	ldr	r3, [r3, #12]
 801073a:	68fa      	ldr	r2, [r7, #12]
 801073c:	4313      	orrs	r3, r2
 801073e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010746:	683b      	ldr	r3, [r7, #0]
 8010748:	695b      	ldr	r3, [r3, #20]
 801074a:	4313      	orrs	r3, r2
 801074c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	68fa      	ldr	r2, [r7, #12]
 8010752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010754:	683b      	ldr	r3, [r7, #0]
 8010756:	689a      	ldr	r2, [r3, #8]
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801075c:	683b      	ldr	r3, [r7, #0]
 801075e:	681a      	ldr	r2, [r3, #0]
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	4a07      	ldr	r2, [pc, #28]	; (8010784 <TIM_Base_SetConfig+0xb8>)
 8010768:	4293      	cmp	r3, r2
 801076a:	d103      	bne.n	8010774 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801076c:	683b      	ldr	r3, [r7, #0]
 801076e:	691a      	ldr	r2, [r3, #16]
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	2201      	movs	r2, #1
 8010778:	615a      	str	r2, [r3, #20]
}
 801077a:	bf00      	nop
 801077c:	3714      	adds	r7, #20
 801077e:	46bd      	mov	sp, r7
 8010780:	bc80      	pop	{r7}
 8010782:	4770      	bx	lr
 8010784:	40012c00 	.word	0x40012c00
 8010788:	40000400 	.word	0x40000400
 801078c:	40000800 	.word	0x40000800

08010790 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010790:	b480      	push	{r7}
 8010792:	b087      	sub	sp, #28
 8010794:	af00      	add	r7, sp, #0
 8010796:	60f8      	str	r0, [r7, #12]
 8010798:	60b9      	str	r1, [r7, #8]
 801079a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	6a1b      	ldr	r3, [r3, #32]
 80107a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	6a1b      	ldr	r3, [r3, #32]
 80107a6:	f023 0201 	bic.w	r2, r3, #1
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	699b      	ldr	r3, [r3, #24]
 80107b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80107b4:	693b      	ldr	r3, [r7, #16]
 80107b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80107ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	011b      	lsls	r3, r3, #4
 80107c0:	693a      	ldr	r2, [r7, #16]
 80107c2:	4313      	orrs	r3, r2
 80107c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80107c6:	697b      	ldr	r3, [r7, #20]
 80107c8:	f023 030a 	bic.w	r3, r3, #10
 80107cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80107ce:	697a      	ldr	r2, [r7, #20]
 80107d0:	68bb      	ldr	r3, [r7, #8]
 80107d2:	4313      	orrs	r3, r2
 80107d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	693a      	ldr	r2, [r7, #16]
 80107da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	697a      	ldr	r2, [r7, #20]
 80107e0:	621a      	str	r2, [r3, #32]
}
 80107e2:	bf00      	nop
 80107e4:	371c      	adds	r7, #28
 80107e6:	46bd      	mov	sp, r7
 80107e8:	bc80      	pop	{r7}
 80107ea:	4770      	bx	lr

080107ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80107ec:	b480      	push	{r7}
 80107ee:	b087      	sub	sp, #28
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	60f8      	str	r0, [r7, #12]
 80107f4:	60b9      	str	r1, [r7, #8]
 80107f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	6a1b      	ldr	r3, [r3, #32]
 80107fc:	f023 0210 	bic.w	r2, r3, #16
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	699b      	ldr	r3, [r3, #24]
 8010808:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	6a1b      	ldr	r3, [r3, #32]
 801080e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010810:	697b      	ldr	r3, [r7, #20]
 8010812:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010816:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	031b      	lsls	r3, r3, #12
 801081c:	697a      	ldr	r2, [r7, #20]
 801081e:	4313      	orrs	r3, r2
 8010820:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010822:	693b      	ldr	r3, [r7, #16]
 8010824:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010828:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801082a:	68bb      	ldr	r3, [r7, #8]
 801082c:	011b      	lsls	r3, r3, #4
 801082e:	693a      	ldr	r2, [r7, #16]
 8010830:	4313      	orrs	r3, r2
 8010832:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	697a      	ldr	r2, [r7, #20]
 8010838:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	693a      	ldr	r2, [r7, #16]
 801083e:	621a      	str	r2, [r3, #32]
}
 8010840:	bf00      	nop
 8010842:	371c      	adds	r7, #28
 8010844:	46bd      	mov	sp, r7
 8010846:	bc80      	pop	{r7}
 8010848:	4770      	bx	lr

0801084a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801084a:	b480      	push	{r7}
 801084c:	b085      	sub	sp, #20
 801084e:	af00      	add	r7, sp, #0
 8010850:	6078      	str	r0, [r7, #4]
 8010852:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	689b      	ldr	r3, [r3, #8]
 8010858:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010860:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010862:	683a      	ldr	r2, [r7, #0]
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	4313      	orrs	r3, r2
 8010868:	f043 0307 	orr.w	r3, r3, #7
 801086c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	68fa      	ldr	r2, [r7, #12]
 8010872:	609a      	str	r2, [r3, #8]
}
 8010874:	bf00      	nop
 8010876:	3714      	adds	r7, #20
 8010878:	46bd      	mov	sp, r7
 801087a:	bc80      	pop	{r7}
 801087c:	4770      	bx	lr

0801087e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801087e:	b480      	push	{r7}
 8010880:	b087      	sub	sp, #28
 8010882:	af00      	add	r7, sp, #0
 8010884:	60f8      	str	r0, [r7, #12]
 8010886:	60b9      	str	r1, [r7, #8]
 8010888:	607a      	str	r2, [r7, #4]
 801088a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	689b      	ldr	r3, [r3, #8]
 8010890:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010892:	697b      	ldr	r3, [r7, #20]
 8010894:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010898:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	021a      	lsls	r2, r3, #8
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	431a      	orrs	r2, r3
 80108a2:	68bb      	ldr	r3, [r7, #8]
 80108a4:	4313      	orrs	r3, r2
 80108a6:	697a      	ldr	r2, [r7, #20]
 80108a8:	4313      	orrs	r3, r2
 80108aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	697a      	ldr	r2, [r7, #20]
 80108b0:	609a      	str	r2, [r3, #8]
}
 80108b2:	bf00      	nop
 80108b4:	371c      	adds	r7, #28
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bc80      	pop	{r7}
 80108ba:	4770      	bx	lr

080108bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80108bc:	b580      	push	{r7, lr}
 80108be:	b084      	sub	sp, #16
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
 80108c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	4a43      	ldr	r2, [pc, #268]	; (80109d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80108cc:	4293      	cmp	r3, r2
 80108ce:	d013      	beq.n	80108f8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80108d8:	d00e      	beq.n	80108f8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	4a3f      	ldr	r2, [pc, #252]	; (80109dc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80108e0:	4293      	cmp	r3, r2
 80108e2:	d009      	beq.n	80108f8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	4a3d      	ldr	r2, [pc, #244]	; (80109e0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80108ea:	4293      	cmp	r3, r2
 80108ec:	d004      	beq.n	80108f8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80108ee:	f240 6164 	movw	r1, #1636	; 0x664
 80108f2:	483c      	ldr	r0, [pc, #240]	; (80109e4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80108f4:	f7fb fa60 	bl	800bdb8 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80108f8:	683b      	ldr	r3, [r7, #0]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d020      	beq.n	8010942 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010900:	683b      	ldr	r3, [r7, #0]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	2b10      	cmp	r3, #16
 8010906:	d01c      	beq.n	8010942 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010908:	683b      	ldr	r3, [r7, #0]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	2b20      	cmp	r3, #32
 801090e:	d018      	beq.n	8010942 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010910:	683b      	ldr	r3, [r7, #0]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	2b30      	cmp	r3, #48	; 0x30
 8010916:	d014      	beq.n	8010942 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	2b40      	cmp	r3, #64	; 0x40
 801091e:	d010      	beq.n	8010942 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010920:	683b      	ldr	r3, [r7, #0]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	2b50      	cmp	r3, #80	; 0x50
 8010926:	d00c      	beq.n	8010942 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010928:	683b      	ldr	r3, [r7, #0]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	2b60      	cmp	r3, #96	; 0x60
 801092e:	d008      	beq.n	8010942 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010930:	683b      	ldr	r3, [r7, #0]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	2b70      	cmp	r3, #112	; 0x70
 8010936:	d004      	beq.n	8010942 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8010938:	f240 6165 	movw	r1, #1637	; 0x665
 801093c:	4829      	ldr	r0, [pc, #164]	; (80109e4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 801093e:	f7fb fa3b 	bl	800bdb8 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8010942:	683b      	ldr	r3, [r7, #0]
 8010944:	685b      	ldr	r3, [r3, #4]
 8010946:	2b80      	cmp	r3, #128	; 0x80
 8010948:	d008      	beq.n	801095c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 801094a:	683b      	ldr	r3, [r7, #0]
 801094c:	685b      	ldr	r3, [r3, #4]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d004      	beq.n	801095c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8010952:	f240 6166 	movw	r1, #1638	; 0x666
 8010956:	4823      	ldr	r0, [pc, #140]	; (80109e4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8010958:	f7fb fa2e 	bl	800bdb8 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010962:	2b01      	cmp	r3, #1
 8010964:	d101      	bne.n	801096a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8010966:	2302      	movs	r3, #2
 8010968:	e032      	b.n	80109d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	2201      	movs	r2, #1
 801096e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	2202      	movs	r2, #2
 8010976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	685b      	ldr	r3, [r3, #4]
 8010980:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	689b      	ldr	r3, [r3, #8]
 8010988:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010990:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010992:	683b      	ldr	r3, [r7, #0]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	68fa      	ldr	r2, [r7, #12]
 8010998:	4313      	orrs	r3, r2
 801099a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 801099c:	68bb      	ldr	r3, [r7, #8]
 801099e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80109a2:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80109a4:	683b      	ldr	r3, [r7, #0]
 80109a6:	685b      	ldr	r3, [r3, #4]
 80109a8:	68ba      	ldr	r2, [r7, #8]
 80109aa:	4313      	orrs	r3, r2
 80109ac:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	68fa      	ldr	r2, [r7, #12]
 80109b4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	68ba      	ldr	r2, [r7, #8]
 80109bc:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	2201      	movs	r2, #1
 80109c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	2200      	movs	r2, #0
 80109ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80109ce:	2300      	movs	r3, #0
}
 80109d0:	4618      	mov	r0, r3
 80109d2:	3710      	adds	r7, #16
 80109d4:	46bd      	mov	sp, r7
 80109d6:	bd80      	pop	{r7, pc}
 80109d8:	40012c00 	.word	0x40012c00
 80109dc:	40000400 	.word	0x40000400
 80109e0:	40000800 	.word	0x40000800
 80109e4:	08012eb4 	.word	0x08012eb4

080109e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b082      	sub	sp, #8
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d101      	bne.n	80109fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80109f6:	2301      	movs	r3, #1
 80109f8:	e092      	b.n	8010b20 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	699b      	ldr	r3, [r3, #24]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d02c      	beq.n	8010a5c <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	4a48      	ldr	r2, [pc, #288]	; (8010b28 <HAL_UART_Init+0x140>)
 8010a08:	4293      	cmp	r3, r2
 8010a0a:	d00e      	beq.n	8010a2a <HAL_UART_Init+0x42>
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	4a46      	ldr	r2, [pc, #280]	; (8010b2c <HAL_UART_Init+0x144>)
 8010a12:	4293      	cmp	r3, r2
 8010a14:	d009      	beq.n	8010a2a <HAL_UART_Init+0x42>
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	4a45      	ldr	r2, [pc, #276]	; (8010b30 <HAL_UART_Init+0x148>)
 8010a1c:	4293      	cmp	r3, r2
 8010a1e:	d004      	beq.n	8010a2a <HAL_UART_Init+0x42>
 8010a20:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8010a24:	4843      	ldr	r0, [pc, #268]	; (8010b34 <HAL_UART_Init+0x14c>)
 8010a26:	f7fb f9c7 	bl	800bdb8 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	699b      	ldr	r3, [r3, #24]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d028      	beq.n	8010a84 <HAL_UART_Init+0x9c>
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	699b      	ldr	r3, [r3, #24]
 8010a36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a3a:	d023      	beq.n	8010a84 <HAL_UART_Init+0x9c>
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	699b      	ldr	r3, [r3, #24]
 8010a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010a44:	d01e      	beq.n	8010a84 <HAL_UART_Init+0x9c>
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	699b      	ldr	r3, [r3, #24]
 8010a4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010a4e:	d019      	beq.n	8010a84 <HAL_UART_Init+0x9c>
 8010a50:	f240 1147 	movw	r1, #327	; 0x147
 8010a54:	4837      	ldr	r0, [pc, #220]	; (8010b34 <HAL_UART_Init+0x14c>)
 8010a56:	f7fb f9af 	bl	800bdb8 <assert_failed>
 8010a5a:	e013      	b.n	8010a84 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	4a31      	ldr	r2, [pc, #196]	; (8010b28 <HAL_UART_Init+0x140>)
 8010a62:	4293      	cmp	r3, r2
 8010a64:	d00e      	beq.n	8010a84 <HAL_UART_Init+0x9c>
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	4a30      	ldr	r2, [pc, #192]	; (8010b2c <HAL_UART_Init+0x144>)
 8010a6c:	4293      	cmp	r3, r2
 8010a6e:	d009      	beq.n	8010a84 <HAL_UART_Init+0x9c>
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	4a2e      	ldr	r2, [pc, #184]	; (8010b30 <HAL_UART_Init+0x148>)
 8010a76:	4293      	cmp	r3, r2
 8010a78:	d004      	beq.n	8010a84 <HAL_UART_Init+0x9c>
 8010a7a:	f240 114b 	movw	r1, #331	; 0x14b
 8010a7e:	482d      	ldr	r0, [pc, #180]	; (8010b34 <HAL_UART_Init+0x14c>)
 8010a80:	f7fb f99a 	bl	800bdb8 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	689b      	ldr	r3, [r3, #8]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d009      	beq.n	8010aa0 <HAL_UART_Init+0xb8>
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	689b      	ldr	r3, [r3, #8]
 8010a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010a94:	d004      	beq.n	8010aa0 <HAL_UART_Init+0xb8>
 8010a96:	f240 114d 	movw	r1, #333	; 0x14d
 8010a9a:	4826      	ldr	r0, [pc, #152]	; (8010b34 <HAL_UART_Init+0x14c>)
 8010a9c:	f7fb f98c 	bl	800bdb8 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010aa6:	b2db      	uxtb	r3, r3
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d106      	bne.n	8010aba <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2200      	movs	r2, #0
 8010ab0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010ab4:	6878      	ldr	r0, [r7, #4]
 8010ab6:	f7fb fd07 	bl	800c4c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	2224      	movs	r2, #36	; 0x24
 8010abe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	68da      	ldr	r2, [r3, #12]
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010ad0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010ad2:	6878      	ldr	r0, [r7, #4]
 8010ad4:	f000 fb8c 	bl	80111f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	691a      	ldr	r2, [r3, #16]
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010ae6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	695a      	ldr	r2, [r3, #20]
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010af6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	68da      	ldr	r2, [r3, #12]
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010b06:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	2220      	movs	r2, #32
 8010b12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	2220      	movs	r2, #32
 8010b1a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8010b1e:	2300      	movs	r3, #0
}
 8010b20:	4618      	mov	r0, r3
 8010b22:	3708      	adds	r7, #8
 8010b24:	46bd      	mov	sp, r7
 8010b26:	bd80      	pop	{r7, pc}
 8010b28:	40013800 	.word	0x40013800
 8010b2c:	40004400 	.word	0x40004400
 8010b30:	40004800 	.word	0x40004800
 8010b34:	08012ef0 	.word	0x08012ef0

08010b38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b088      	sub	sp, #32
 8010b3c:	af02      	add	r7, sp, #8
 8010b3e:	60f8      	str	r0, [r7, #12]
 8010b40:	60b9      	str	r1, [r7, #8]
 8010b42:	603b      	str	r3, [r7, #0]
 8010b44:	4613      	mov	r3, r2
 8010b46:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8010b48:	2300      	movs	r3, #0
 8010b4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010b52:	b2db      	uxtb	r3, r3
 8010b54:	2b20      	cmp	r3, #32
 8010b56:	f040 8083 	bne.w	8010c60 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8010b5a:	68bb      	ldr	r3, [r7, #8]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d002      	beq.n	8010b66 <HAL_UART_Transmit+0x2e>
 8010b60:	88fb      	ldrh	r3, [r7, #6]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d101      	bne.n	8010b6a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8010b66:	2301      	movs	r3, #1
 8010b68:	e07b      	b.n	8010c62 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010b70:	2b01      	cmp	r3, #1
 8010b72:	d101      	bne.n	8010b78 <HAL_UART_Transmit+0x40>
 8010b74:	2302      	movs	r3, #2
 8010b76:	e074      	b.n	8010c62 <HAL_UART_Transmit+0x12a>
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	2201      	movs	r2, #1
 8010b7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	2200      	movs	r2, #0
 8010b84:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	2221      	movs	r2, #33	; 0x21
 8010b8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8010b8e:	f7fb fd7b 	bl	800c688 <HAL_GetTick>
 8010b92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	88fa      	ldrh	r2, [r7, #6]
 8010b98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	88fa      	ldrh	r2, [r7, #6]
 8010b9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8010ba0:	e042      	b.n	8010c28 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010ba6:	b29b      	uxth	r3, r3
 8010ba8:	3b01      	subs	r3, #1
 8010baa:	b29a      	uxth	r2, r3
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	689b      	ldr	r3, [r3, #8]
 8010bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010bb8:	d122      	bne.n	8010c00 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	9300      	str	r3, [sp, #0]
 8010bbe:	697b      	ldr	r3, [r7, #20]
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	2180      	movs	r1, #128	; 0x80
 8010bc4:	68f8      	ldr	r0, [r7, #12]
 8010bc6:	f000 f9aa 	bl	8010f1e <UART_WaitOnFlagUntilTimeout>
 8010bca:	4603      	mov	r3, r0
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d001      	beq.n	8010bd4 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8010bd0:	2303      	movs	r3, #3
 8010bd2:	e046      	b.n	8010c62 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8010bd4:	68bb      	ldr	r3, [r7, #8]
 8010bd6:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8010bd8:	693b      	ldr	r3, [r7, #16]
 8010bda:	881b      	ldrh	r3, [r3, #0]
 8010bdc:	461a      	mov	r2, r3
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010be6:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	691b      	ldr	r3, [r3, #16]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d103      	bne.n	8010bf8 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8010bf0:	68bb      	ldr	r3, [r7, #8]
 8010bf2:	3302      	adds	r3, #2
 8010bf4:	60bb      	str	r3, [r7, #8]
 8010bf6:	e017      	b.n	8010c28 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8010bf8:	68bb      	ldr	r3, [r7, #8]
 8010bfa:	3301      	adds	r3, #1
 8010bfc:	60bb      	str	r3, [r7, #8]
 8010bfe:	e013      	b.n	8010c28 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010c00:	683b      	ldr	r3, [r7, #0]
 8010c02:	9300      	str	r3, [sp, #0]
 8010c04:	697b      	ldr	r3, [r7, #20]
 8010c06:	2200      	movs	r2, #0
 8010c08:	2180      	movs	r1, #128	; 0x80
 8010c0a:	68f8      	ldr	r0, [r7, #12]
 8010c0c:	f000 f987 	bl	8010f1e <UART_WaitOnFlagUntilTimeout>
 8010c10:	4603      	mov	r3, r0
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d001      	beq.n	8010c1a <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8010c16:	2303      	movs	r3, #3
 8010c18:	e023      	b.n	8010c62 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8010c1a:	68bb      	ldr	r3, [r7, #8]
 8010c1c:	1c5a      	adds	r2, r3, #1
 8010c1e:	60ba      	str	r2, [r7, #8]
 8010c20:	781a      	ldrb	r2, [r3, #0]
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010c2c:	b29b      	uxth	r3, r3
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d1b7      	bne.n	8010ba2 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010c32:	683b      	ldr	r3, [r7, #0]
 8010c34:	9300      	str	r3, [sp, #0]
 8010c36:	697b      	ldr	r3, [r7, #20]
 8010c38:	2200      	movs	r2, #0
 8010c3a:	2140      	movs	r1, #64	; 0x40
 8010c3c:	68f8      	ldr	r0, [r7, #12]
 8010c3e:	f000 f96e 	bl	8010f1e <UART_WaitOnFlagUntilTimeout>
 8010c42:	4603      	mov	r3, r0
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d001      	beq.n	8010c4c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8010c48:	2303      	movs	r3, #3
 8010c4a:	e00a      	b.n	8010c62 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	2220      	movs	r2, #32
 8010c50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	2200      	movs	r2, #0
 8010c58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	e000      	b.n	8010c62 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8010c60:	2302      	movs	r3, #2
  }
}
 8010c62:	4618      	mov	r0, r3
 8010c64:	3718      	adds	r7, #24
 8010c66:	46bd      	mov	sp, r7
 8010c68:	bd80      	pop	{r7, pc}

08010c6a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010c6a:	b480      	push	{r7}
 8010c6c:	b085      	sub	sp, #20
 8010c6e:	af00      	add	r7, sp, #0
 8010c70:	60f8      	str	r0, [r7, #12]
 8010c72:	60b9      	str	r1, [r7, #8]
 8010c74:	4613      	mov	r3, r2
 8010c76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010c7e:	b2db      	uxtb	r3, r3
 8010c80:	2b20      	cmp	r3, #32
 8010c82:	d140      	bne.n	8010d06 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8010c84:	68bb      	ldr	r3, [r7, #8]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d002      	beq.n	8010c90 <HAL_UART_Receive_IT+0x26>
 8010c8a:	88fb      	ldrh	r3, [r7, #6]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d101      	bne.n	8010c94 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8010c90:	2301      	movs	r3, #1
 8010c92:	e039      	b.n	8010d08 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010c9a:	2b01      	cmp	r3, #1
 8010c9c:	d101      	bne.n	8010ca2 <HAL_UART_Receive_IT+0x38>
 8010c9e:	2302      	movs	r3, #2
 8010ca0:	e032      	b.n	8010d08 <HAL_UART_Receive_IT+0x9e>
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	2201      	movs	r2, #1
 8010ca6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	68ba      	ldr	r2, [r7, #8]
 8010cae:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	88fa      	ldrh	r2, [r7, #6]
 8010cb4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	88fa      	ldrh	r2, [r7, #6]
 8010cba:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	2222      	movs	r2, #34	; 0x22
 8010cc6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	2200      	movs	r2, #0
 8010cce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	68da      	ldr	r2, [r3, #12]
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010ce0:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	695a      	ldr	r2, [r3, #20]
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	f042 0201 	orr.w	r2, r2, #1
 8010cf0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	68da      	ldr	r2, [r3, #12]
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	f042 0220 	orr.w	r2, r2, #32
 8010d00:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8010d02:	2300      	movs	r3, #0
 8010d04:	e000      	b.n	8010d08 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8010d06:	2302      	movs	r3, #2
  }
}
 8010d08:	4618      	mov	r0, r3
 8010d0a:	3714      	adds	r7, #20
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	bc80      	pop	{r7}
 8010d10:	4770      	bx	lr
	...

08010d14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b088      	sub	sp, #32
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	68db      	ldr	r3, [r3, #12]
 8010d2a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	695b      	ldr	r3, [r3, #20]
 8010d32:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8010d34:	2300      	movs	r3, #0
 8010d36:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8010d38:	2300      	movs	r3, #0
 8010d3a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8010d3c:	69fb      	ldr	r3, [r7, #28]
 8010d3e:	f003 030f 	and.w	r3, r3, #15
 8010d42:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8010d44:	693b      	ldr	r3, [r7, #16]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d10d      	bne.n	8010d66 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010d4a:	69fb      	ldr	r3, [r7, #28]
 8010d4c:	f003 0320 	and.w	r3, r3, #32
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d008      	beq.n	8010d66 <HAL_UART_IRQHandler+0x52>
 8010d54:	69bb      	ldr	r3, [r7, #24]
 8010d56:	f003 0320 	and.w	r3, r3, #32
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d003      	beq.n	8010d66 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8010d5e:	6878      	ldr	r0, [r7, #4]
 8010d60:	f000 f9c5 	bl	80110ee <UART_Receive_IT>
      return;
 8010d64:	e0cc      	b.n	8010f00 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8010d66:	693b      	ldr	r3, [r7, #16]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	f000 80ab 	beq.w	8010ec4 <HAL_UART_IRQHandler+0x1b0>
 8010d6e:	697b      	ldr	r3, [r7, #20]
 8010d70:	f003 0301 	and.w	r3, r3, #1
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d105      	bne.n	8010d84 <HAL_UART_IRQHandler+0x70>
 8010d78:	69bb      	ldr	r3, [r7, #24]
 8010d7a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	f000 80a0 	beq.w	8010ec4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8010d84:	69fb      	ldr	r3, [r7, #28]
 8010d86:	f003 0301 	and.w	r3, r3, #1
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d00a      	beq.n	8010da4 <HAL_UART_IRQHandler+0x90>
 8010d8e:	69bb      	ldr	r3, [r7, #24]
 8010d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d005      	beq.n	8010da4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d9c:	f043 0201 	orr.w	r2, r3, #1
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010da4:	69fb      	ldr	r3, [r7, #28]
 8010da6:	f003 0304 	and.w	r3, r3, #4
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d00a      	beq.n	8010dc4 <HAL_UART_IRQHandler+0xb0>
 8010dae:	697b      	ldr	r3, [r7, #20]
 8010db0:	f003 0301 	and.w	r3, r3, #1
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d005      	beq.n	8010dc4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010dbc:	f043 0202 	orr.w	r2, r3, #2
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010dc4:	69fb      	ldr	r3, [r7, #28]
 8010dc6:	f003 0302 	and.w	r3, r3, #2
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d00a      	beq.n	8010de4 <HAL_UART_IRQHandler+0xd0>
 8010dce:	697b      	ldr	r3, [r7, #20]
 8010dd0:	f003 0301 	and.w	r3, r3, #1
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d005      	beq.n	8010de4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ddc:	f043 0204 	orr.w	r2, r3, #4
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010de4:	69fb      	ldr	r3, [r7, #28]
 8010de6:	f003 0308 	and.w	r3, r3, #8
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d00a      	beq.n	8010e04 <HAL_UART_IRQHandler+0xf0>
 8010dee:	697b      	ldr	r3, [r7, #20]
 8010df0:	f003 0301 	and.w	r3, r3, #1
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d005      	beq.n	8010e04 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010dfc:	f043 0208 	orr.w	r2, r3, #8
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d078      	beq.n	8010efe <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010e0c:	69fb      	ldr	r3, [r7, #28]
 8010e0e:	f003 0320 	and.w	r3, r3, #32
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d007      	beq.n	8010e26 <HAL_UART_IRQHandler+0x112>
 8010e16:	69bb      	ldr	r3, [r7, #24]
 8010e18:	f003 0320 	and.w	r3, r3, #32
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d002      	beq.n	8010e26 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8010e20:	6878      	ldr	r0, [r7, #4]
 8010e22:	f000 f964 	bl	80110ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	695b      	ldr	r3, [r3, #20]
 8010e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	bf14      	ite	ne
 8010e34:	2301      	movne	r3, #1
 8010e36:	2300      	moveq	r3, #0
 8010e38:	b2db      	uxtb	r3, r3
 8010e3a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e40:	f003 0308 	and.w	r3, r3, #8
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d102      	bne.n	8010e4e <HAL_UART_IRQHandler+0x13a>
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d031      	beq.n	8010eb2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010e4e:	6878      	ldr	r0, [r7, #4]
 8010e50:	f000 f8af 	bl	8010fb2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	695b      	ldr	r3, [r3, #20]
 8010e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d023      	beq.n	8010eaa <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	695a      	ldr	r2, [r3, #20]
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010e70:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d013      	beq.n	8010ea2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e7e:	4a22      	ldr	r2, [pc, #136]	; (8010f08 <HAL_UART_IRQHandler+0x1f4>)
 8010e80:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e86:	4618      	mov	r0, r3
 8010e88:	f7fc f8e6 	bl	800d058 <HAL_DMA_Abort_IT>
 8010e8c:	4603      	mov	r3, r0
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d016      	beq.n	8010ec0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e98:	687a      	ldr	r2, [r7, #4]
 8010e9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010e9c:	4610      	mov	r0, r2
 8010e9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ea0:	e00e      	b.n	8010ec0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010ea2:	6878      	ldr	r0, [r7, #4]
 8010ea4:	f7f4 fc68 	bl	8005778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ea8:	e00a      	b.n	8010ec0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010eaa:	6878      	ldr	r0, [r7, #4]
 8010eac:	f7f4 fc64 	bl	8005778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010eb0:	e006      	b.n	8010ec0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010eb2:	6878      	ldr	r0, [r7, #4]
 8010eb4:	f7f4 fc60 	bl	8005778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	2200      	movs	r2, #0
 8010ebc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8010ebe:	e01e      	b.n	8010efe <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ec0:	bf00      	nop
    return;
 8010ec2:	e01c      	b.n	8010efe <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010ec4:	69fb      	ldr	r3, [r7, #28]
 8010ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d008      	beq.n	8010ee0 <HAL_UART_IRQHandler+0x1cc>
 8010ece:	69bb      	ldr	r3, [r7, #24]
 8010ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d003      	beq.n	8010ee0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8010ed8:	6878      	ldr	r0, [r7, #4]
 8010eda:	f000 f89b 	bl	8011014 <UART_Transmit_IT>
    return;
 8010ede:	e00f      	b.n	8010f00 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8010ee0:	69fb      	ldr	r3, [r7, #28]
 8010ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d00a      	beq.n	8010f00 <HAL_UART_IRQHandler+0x1ec>
 8010eea:	69bb      	ldr	r3, [r7, #24]
 8010eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d005      	beq.n	8010f00 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8010ef4:	6878      	ldr	r0, [r7, #4]
 8010ef6:	f000 f8e2 	bl	80110be <UART_EndTransmit_IT>
    return;
 8010efa:	bf00      	nop
 8010efc:	e000      	b.n	8010f00 <HAL_UART_IRQHandler+0x1ec>
    return;
 8010efe:	bf00      	nop
  }
}
 8010f00:	3720      	adds	r7, #32
 8010f02:	46bd      	mov	sp, r7
 8010f04:	bd80      	pop	{r7, pc}
 8010f06:	bf00      	nop
 8010f08:	08010fed 	.word	0x08010fed

08010f0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010f0c:	b480      	push	{r7}
 8010f0e:	b083      	sub	sp, #12
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8010f14:	bf00      	nop
 8010f16:	370c      	adds	r7, #12
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	bc80      	pop	{r7}
 8010f1c:	4770      	bx	lr

08010f1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8010f1e:	b580      	push	{r7, lr}
 8010f20:	b084      	sub	sp, #16
 8010f22:	af00      	add	r7, sp, #0
 8010f24:	60f8      	str	r0, [r7, #12]
 8010f26:	60b9      	str	r1, [r7, #8]
 8010f28:	603b      	str	r3, [r7, #0]
 8010f2a:	4613      	mov	r3, r2
 8010f2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010f2e:	e02c      	b.n	8010f8a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010f30:	69bb      	ldr	r3, [r7, #24]
 8010f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f36:	d028      	beq.n	8010f8a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8010f38:	69bb      	ldr	r3, [r7, #24]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d007      	beq.n	8010f4e <UART_WaitOnFlagUntilTimeout+0x30>
 8010f3e:	f7fb fba3 	bl	800c688 <HAL_GetTick>
 8010f42:	4602      	mov	r2, r0
 8010f44:	683b      	ldr	r3, [r7, #0]
 8010f46:	1ad3      	subs	r3, r2, r3
 8010f48:	69ba      	ldr	r2, [r7, #24]
 8010f4a:	429a      	cmp	r2, r3
 8010f4c:	d21d      	bcs.n	8010f8a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	68da      	ldr	r2, [r3, #12]
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010f5c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	695a      	ldr	r2, [r3, #20]
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	f022 0201 	bic.w	r2, r2, #1
 8010f6c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	2220      	movs	r2, #32
 8010f72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	2220      	movs	r2, #32
 8010f7a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	2200      	movs	r2, #0
 8010f82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8010f86:	2303      	movs	r3, #3
 8010f88:	e00f      	b.n	8010faa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	681a      	ldr	r2, [r3, #0]
 8010f90:	68bb      	ldr	r3, [r7, #8]
 8010f92:	4013      	ands	r3, r2
 8010f94:	68ba      	ldr	r2, [r7, #8]
 8010f96:	429a      	cmp	r2, r3
 8010f98:	bf0c      	ite	eq
 8010f9a:	2301      	moveq	r3, #1
 8010f9c:	2300      	movne	r3, #0
 8010f9e:	b2db      	uxtb	r3, r3
 8010fa0:	461a      	mov	r2, r3
 8010fa2:	79fb      	ldrb	r3, [r7, #7]
 8010fa4:	429a      	cmp	r2, r3
 8010fa6:	d0c3      	beq.n	8010f30 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010fa8:	2300      	movs	r3, #0
}
 8010faa:	4618      	mov	r0, r3
 8010fac:	3710      	adds	r7, #16
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	bd80      	pop	{r7, pc}

08010fb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010fb2:	b480      	push	{r7}
 8010fb4:	b083      	sub	sp, #12
 8010fb6:	af00      	add	r7, sp, #0
 8010fb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	68da      	ldr	r2, [r3, #12]
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010fc8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	695a      	ldr	r2, [r3, #20]
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	f022 0201 	bic.w	r2, r2, #1
 8010fd8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	2220      	movs	r2, #32
 8010fde:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8010fe2:	bf00      	nop
 8010fe4:	370c      	adds	r7, #12
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	bc80      	pop	{r7}
 8010fea:	4770      	bx	lr

08010fec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b084      	sub	sp, #16
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ff8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	2200      	movs	r2, #0
 8011004:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011006:	68f8      	ldr	r0, [r7, #12]
 8011008:	f7f4 fbb6 	bl	8005778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801100c:	bf00      	nop
 801100e:	3710      	adds	r7, #16
 8011010:	46bd      	mov	sp, r7
 8011012:	bd80      	pop	{r7, pc}

08011014 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8011014:	b480      	push	{r7}
 8011016:	b085      	sub	sp, #20
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8011022:	b2db      	uxtb	r3, r3
 8011024:	2b21      	cmp	r3, #33	; 0x21
 8011026:	d144      	bne.n	80110b2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	689b      	ldr	r3, [r3, #8]
 801102c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011030:	d11a      	bne.n	8011068 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	6a1b      	ldr	r3, [r3, #32]
 8011036:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	881b      	ldrh	r3, [r3, #0]
 801103c:	461a      	mov	r2, r3
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011046:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	691b      	ldr	r3, [r3, #16]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d105      	bne.n	801105c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	6a1b      	ldr	r3, [r3, #32]
 8011054:	1c9a      	adds	r2, r3, #2
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	621a      	str	r2, [r3, #32]
 801105a:	e00e      	b.n	801107a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	6a1b      	ldr	r3, [r3, #32]
 8011060:	1c5a      	adds	r2, r3, #1
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	621a      	str	r2, [r3, #32]
 8011066:	e008      	b.n	801107a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	6a1b      	ldr	r3, [r3, #32]
 801106c:	1c59      	adds	r1, r3, #1
 801106e:	687a      	ldr	r2, [r7, #4]
 8011070:	6211      	str	r1, [r2, #32]
 8011072:	781a      	ldrb	r2, [r3, #0]
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801107e:	b29b      	uxth	r3, r3
 8011080:	3b01      	subs	r3, #1
 8011082:	b29b      	uxth	r3, r3
 8011084:	687a      	ldr	r2, [r7, #4]
 8011086:	4619      	mov	r1, r3
 8011088:	84d1      	strh	r1, [r2, #38]	; 0x26
 801108a:	2b00      	cmp	r3, #0
 801108c:	d10f      	bne.n	80110ae <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	68da      	ldr	r2, [r3, #12]
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801109c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	68da      	ldr	r2, [r3, #12]
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80110ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80110ae:	2300      	movs	r3, #0
 80110b0:	e000      	b.n	80110b4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80110b2:	2302      	movs	r3, #2
  }
}
 80110b4:	4618      	mov	r0, r3
 80110b6:	3714      	adds	r7, #20
 80110b8:	46bd      	mov	sp, r7
 80110ba:	bc80      	pop	{r7}
 80110bc:	4770      	bx	lr

080110be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80110be:	b580      	push	{r7, lr}
 80110c0:	b082      	sub	sp, #8
 80110c2:	af00      	add	r7, sp, #0
 80110c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	68da      	ldr	r2, [r3, #12]
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80110d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	2220      	movs	r2, #32
 80110da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f7ff ff14 	bl	8010f0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80110e4:	2300      	movs	r3, #0
}
 80110e6:	4618      	mov	r0, r3
 80110e8:	3708      	adds	r7, #8
 80110ea:	46bd      	mov	sp, r7
 80110ec:	bd80      	pop	{r7, pc}

080110ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80110ee:	b580      	push	{r7, lr}
 80110f0:	b084      	sub	sp, #16
 80110f2:	af00      	add	r7, sp, #0
 80110f4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80110fc:	b2db      	uxtb	r3, r3
 80110fe:	2b22      	cmp	r3, #34	; 0x22
 8011100:	d171      	bne.n	80111e6 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	689b      	ldr	r3, [r3, #8]
 8011106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801110a:	d123      	bne.n	8011154 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011110:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	691b      	ldr	r3, [r3, #16]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d10e      	bne.n	8011138 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	685b      	ldr	r3, [r3, #4]
 8011120:	b29b      	uxth	r3, r3
 8011122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011126:	b29a      	uxth	r2, r3
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011130:	1c9a      	adds	r2, r3, #2
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	629a      	str	r2, [r3, #40]	; 0x28
 8011136:	e029      	b.n	801118c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	685b      	ldr	r3, [r3, #4]
 801113e:	b29b      	uxth	r3, r3
 8011140:	b2db      	uxtb	r3, r3
 8011142:	b29a      	uxth	r2, r3
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801114c:	1c5a      	adds	r2, r3, #1
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	629a      	str	r2, [r3, #40]	; 0x28
 8011152:	e01b      	b.n	801118c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	691b      	ldr	r3, [r3, #16]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d10a      	bne.n	8011172 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	6858      	ldr	r0, [r3, #4]
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011166:	1c59      	adds	r1, r3, #1
 8011168:	687a      	ldr	r2, [r7, #4]
 801116a:	6291      	str	r1, [r2, #40]	; 0x28
 801116c:	b2c2      	uxtb	r2, r0
 801116e:	701a      	strb	r2, [r3, #0]
 8011170:	e00c      	b.n	801118c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	685b      	ldr	r3, [r3, #4]
 8011178:	b2da      	uxtb	r2, r3
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801117e:	1c58      	adds	r0, r3, #1
 8011180:	6879      	ldr	r1, [r7, #4]
 8011182:	6288      	str	r0, [r1, #40]	; 0x28
 8011184:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8011188:	b2d2      	uxtb	r2, r2
 801118a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011190:	b29b      	uxth	r3, r3
 8011192:	3b01      	subs	r3, #1
 8011194:	b29b      	uxth	r3, r3
 8011196:	687a      	ldr	r2, [r7, #4]
 8011198:	4619      	mov	r1, r3
 801119a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801119c:	2b00      	cmp	r3, #0
 801119e:	d120      	bne.n	80111e2 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	68da      	ldr	r2, [r3, #12]
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	f022 0220 	bic.w	r2, r2, #32
 80111ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	68da      	ldr	r2, [r3, #12]
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80111be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	695a      	ldr	r2, [r3, #20]
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	f022 0201 	bic.w	r2, r2, #1
 80111ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	2220      	movs	r2, #32
 80111d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80111d8:	6878      	ldr	r0, [r7, #4]
 80111da:	f7f4 faab 	bl	8005734 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80111de:	2300      	movs	r3, #0
 80111e0:	e002      	b.n	80111e8 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80111e2:	2300      	movs	r3, #0
 80111e4:	e000      	b.n	80111e8 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80111e6:	2302      	movs	r3, #2
  }
}
 80111e8:	4618      	mov	r0, r3
 80111ea:	3710      	adds	r7, #16
 80111ec:	46bd      	mov	sp, r7
 80111ee:	bd80      	pop	{r7, pc}

080111f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b084      	sub	sp, #16
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	685b      	ldr	r3, [r3, #4]
 80111fc:	4a84      	ldr	r2, [pc, #528]	; (8011410 <UART_SetConfig+0x220>)
 80111fe:	4293      	cmp	r3, r2
 8011200:	d904      	bls.n	801120c <UART_SetConfig+0x1c>
 8011202:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8011206:	4883      	ldr	r0, [pc, #524]	; (8011414 <UART_SetConfig+0x224>)
 8011208:	f7fa fdd6 	bl	800bdb8 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	68db      	ldr	r3, [r3, #12]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d009      	beq.n	8011228 <UART_SetConfig+0x38>
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	68db      	ldr	r3, [r3, #12]
 8011218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801121c:	d004      	beq.n	8011228 <UART_SetConfig+0x38>
 801121e:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8011222:	487c      	ldr	r0, [pc, #496]	; (8011414 <UART_SetConfig+0x224>)
 8011224:	f7fa fdc8 	bl	800bdb8 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	691b      	ldr	r3, [r3, #16]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d00e      	beq.n	801124e <UART_SetConfig+0x5e>
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	691b      	ldr	r3, [r3, #16]
 8011234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011238:	d009      	beq.n	801124e <UART_SetConfig+0x5e>
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	691b      	ldr	r3, [r3, #16]
 801123e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8011242:	d004      	beq.n	801124e <UART_SetConfig+0x5e>
 8011244:	f640 31ff 	movw	r1, #3071	; 0xbff
 8011248:	4872      	ldr	r0, [pc, #456]	; (8011414 <UART_SetConfig+0x224>)
 801124a:	f7fa fdb5 	bl	800bdb8 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	695a      	ldr	r2, [r3, #20]
 8011252:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8011256:	4013      	ands	r3, r2
 8011258:	2b00      	cmp	r3, #0
 801125a:	d103      	bne.n	8011264 <UART_SetConfig+0x74>
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	695b      	ldr	r3, [r3, #20]
 8011260:	2b00      	cmp	r3, #0
 8011262:	d104      	bne.n	801126e <UART_SetConfig+0x7e>
 8011264:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8011268:	486a      	ldr	r0, [pc, #424]	; (8011414 <UART_SetConfig+0x224>)
 801126a:	f7fa fda5 	bl	800bdb8 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	691b      	ldr	r3, [r3, #16]
 8011274:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	68da      	ldr	r2, [r3, #12]
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	430a      	orrs	r2, r1
 8011282:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	689a      	ldr	r2, [r3, #8]
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	691b      	ldr	r3, [r3, #16]
 801128c:	431a      	orrs	r2, r3
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	695b      	ldr	r3, [r3, #20]
 8011292:	4313      	orrs	r3, r2
 8011294:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	68db      	ldr	r3, [r3, #12]
 801129c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80112a0:	f023 030c 	bic.w	r3, r3, #12
 80112a4:	687a      	ldr	r2, [r7, #4]
 80112a6:	6812      	ldr	r2, [r2, #0]
 80112a8:	68f9      	ldr	r1, [r7, #12]
 80112aa:	430b      	orrs	r3, r1
 80112ac:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	695b      	ldr	r3, [r3, #20]
 80112b4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	699a      	ldr	r2, [r3, #24]
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	430a      	orrs	r2, r1
 80112c2:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	4a53      	ldr	r2, [pc, #332]	; (8011418 <UART_SetConfig+0x228>)
 80112ca:	4293      	cmp	r3, r2
 80112cc:	d14e      	bne.n	801136c <UART_SetConfig+0x17c>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80112ce:	f7fe fa87 	bl	800f7e0 <HAL_RCC_GetPCLK2Freq>
 80112d2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80112d4:	68ba      	ldr	r2, [r7, #8]
 80112d6:	4613      	mov	r3, r2
 80112d8:	009b      	lsls	r3, r3, #2
 80112da:	4413      	add	r3, r2
 80112dc:	009a      	lsls	r2, r3, #2
 80112de:	441a      	add	r2, r3
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	685b      	ldr	r3, [r3, #4]
 80112e4:	009b      	lsls	r3, r3, #2
 80112e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80112ea:	4a4c      	ldr	r2, [pc, #304]	; (801141c <UART_SetConfig+0x22c>)
 80112ec:	fba2 2303 	umull	r2, r3, r2, r3
 80112f0:	095b      	lsrs	r3, r3, #5
 80112f2:	0119      	lsls	r1, r3, #4
 80112f4:	68ba      	ldr	r2, [r7, #8]
 80112f6:	4613      	mov	r3, r2
 80112f8:	009b      	lsls	r3, r3, #2
 80112fa:	4413      	add	r3, r2
 80112fc:	009a      	lsls	r2, r3, #2
 80112fe:	441a      	add	r2, r3
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	685b      	ldr	r3, [r3, #4]
 8011304:	009b      	lsls	r3, r3, #2
 8011306:	fbb2 f2f3 	udiv	r2, r2, r3
 801130a:	4b44      	ldr	r3, [pc, #272]	; (801141c <UART_SetConfig+0x22c>)
 801130c:	fba3 0302 	umull	r0, r3, r3, r2
 8011310:	095b      	lsrs	r3, r3, #5
 8011312:	2064      	movs	r0, #100	; 0x64
 8011314:	fb00 f303 	mul.w	r3, r0, r3
 8011318:	1ad3      	subs	r3, r2, r3
 801131a:	011b      	lsls	r3, r3, #4
 801131c:	3332      	adds	r3, #50	; 0x32
 801131e:	4a3f      	ldr	r2, [pc, #252]	; (801141c <UART_SetConfig+0x22c>)
 8011320:	fba2 2303 	umull	r2, r3, r2, r3
 8011324:	095b      	lsrs	r3, r3, #5
 8011326:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801132a:	4419      	add	r1, r3
 801132c:	68ba      	ldr	r2, [r7, #8]
 801132e:	4613      	mov	r3, r2
 8011330:	009b      	lsls	r3, r3, #2
 8011332:	4413      	add	r3, r2
 8011334:	009a      	lsls	r2, r3, #2
 8011336:	441a      	add	r2, r3
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	685b      	ldr	r3, [r3, #4]
 801133c:	009b      	lsls	r3, r3, #2
 801133e:	fbb2 f2f3 	udiv	r2, r2, r3
 8011342:	4b36      	ldr	r3, [pc, #216]	; (801141c <UART_SetConfig+0x22c>)
 8011344:	fba3 0302 	umull	r0, r3, r3, r2
 8011348:	095b      	lsrs	r3, r3, #5
 801134a:	2064      	movs	r0, #100	; 0x64
 801134c:	fb00 f303 	mul.w	r3, r0, r3
 8011350:	1ad3      	subs	r3, r2, r3
 8011352:	011b      	lsls	r3, r3, #4
 8011354:	3332      	adds	r3, #50	; 0x32
 8011356:	4a31      	ldr	r2, [pc, #196]	; (801141c <UART_SetConfig+0x22c>)
 8011358:	fba2 2303 	umull	r2, r3, r2, r3
 801135c:	095b      	lsrs	r3, r3, #5
 801135e:	f003 020f 	and.w	r2, r3, #15
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	440a      	add	r2, r1
 8011368:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 801136a:	e04d      	b.n	8011408 <UART_SetConfig+0x218>
    pclk = HAL_RCC_GetPCLK1Freq();
 801136c:	f7fe fa24 	bl	800f7b8 <HAL_RCC_GetPCLK1Freq>
 8011370:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011372:	68ba      	ldr	r2, [r7, #8]
 8011374:	4613      	mov	r3, r2
 8011376:	009b      	lsls	r3, r3, #2
 8011378:	4413      	add	r3, r2
 801137a:	009a      	lsls	r2, r3, #2
 801137c:	441a      	add	r2, r3
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	685b      	ldr	r3, [r3, #4]
 8011382:	009b      	lsls	r3, r3, #2
 8011384:	fbb2 f3f3 	udiv	r3, r2, r3
 8011388:	4a24      	ldr	r2, [pc, #144]	; (801141c <UART_SetConfig+0x22c>)
 801138a:	fba2 2303 	umull	r2, r3, r2, r3
 801138e:	095b      	lsrs	r3, r3, #5
 8011390:	0119      	lsls	r1, r3, #4
 8011392:	68ba      	ldr	r2, [r7, #8]
 8011394:	4613      	mov	r3, r2
 8011396:	009b      	lsls	r3, r3, #2
 8011398:	4413      	add	r3, r2
 801139a:	009a      	lsls	r2, r3, #2
 801139c:	441a      	add	r2, r3
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	685b      	ldr	r3, [r3, #4]
 80113a2:	009b      	lsls	r3, r3, #2
 80113a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80113a8:	4b1c      	ldr	r3, [pc, #112]	; (801141c <UART_SetConfig+0x22c>)
 80113aa:	fba3 0302 	umull	r0, r3, r3, r2
 80113ae:	095b      	lsrs	r3, r3, #5
 80113b0:	2064      	movs	r0, #100	; 0x64
 80113b2:	fb00 f303 	mul.w	r3, r0, r3
 80113b6:	1ad3      	subs	r3, r2, r3
 80113b8:	011b      	lsls	r3, r3, #4
 80113ba:	3332      	adds	r3, #50	; 0x32
 80113bc:	4a17      	ldr	r2, [pc, #92]	; (801141c <UART_SetConfig+0x22c>)
 80113be:	fba2 2303 	umull	r2, r3, r2, r3
 80113c2:	095b      	lsrs	r3, r3, #5
 80113c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80113c8:	4419      	add	r1, r3
 80113ca:	68ba      	ldr	r2, [r7, #8]
 80113cc:	4613      	mov	r3, r2
 80113ce:	009b      	lsls	r3, r3, #2
 80113d0:	4413      	add	r3, r2
 80113d2:	009a      	lsls	r2, r3, #2
 80113d4:	441a      	add	r2, r3
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	685b      	ldr	r3, [r3, #4]
 80113da:	009b      	lsls	r3, r3, #2
 80113dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80113e0:	4b0e      	ldr	r3, [pc, #56]	; (801141c <UART_SetConfig+0x22c>)
 80113e2:	fba3 0302 	umull	r0, r3, r3, r2
 80113e6:	095b      	lsrs	r3, r3, #5
 80113e8:	2064      	movs	r0, #100	; 0x64
 80113ea:	fb00 f303 	mul.w	r3, r0, r3
 80113ee:	1ad3      	subs	r3, r2, r3
 80113f0:	011b      	lsls	r3, r3, #4
 80113f2:	3332      	adds	r3, #50	; 0x32
 80113f4:	4a09      	ldr	r2, [pc, #36]	; (801141c <UART_SetConfig+0x22c>)
 80113f6:	fba2 2303 	umull	r2, r3, r2, r3
 80113fa:	095b      	lsrs	r3, r3, #5
 80113fc:	f003 020f 	and.w	r2, r3, #15
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	440a      	add	r2, r1
 8011406:	609a      	str	r2, [r3, #8]
}
 8011408:	bf00      	nop
 801140a:	3710      	adds	r7, #16
 801140c:	46bd      	mov	sp, r7
 801140e:	bd80      	pop	{r7, pc}
 8011410:	0044aa20 	.word	0x0044aa20
 8011414:	08012ef0 	.word	0x08012ef0
 8011418:	40013800 	.word	0x40013800
 801141c:	51eb851f 	.word	0x51eb851f

08011420 <_Znaj>:
 8011420:	f000 b800 	b.w	8011424 <_Znwj>

08011424 <_Znwj>:
 8011424:	b510      	push	{r4, lr}
 8011426:	2800      	cmp	r0, #0
 8011428:	bf14      	ite	ne
 801142a:	4604      	movne	r4, r0
 801142c:	2401      	moveq	r4, #1
 801142e:	4620      	mov	r0, r4
 8011430:	f000 fbd8 	bl	8011be4 <malloc>
 8011434:	b930      	cbnz	r0, 8011444 <_Znwj+0x20>
 8011436:	f000 f807 	bl	8011448 <_ZSt15get_new_handlerv>
 801143a:	b908      	cbnz	r0, 8011440 <_Znwj+0x1c>
 801143c:	f000 fba0 	bl	8011b80 <abort>
 8011440:	4780      	blx	r0
 8011442:	e7f4      	b.n	801142e <_Znwj+0xa>
 8011444:	bd10      	pop	{r4, pc}
	...

08011448 <_ZSt15get_new_handlerv>:
 8011448:	4b02      	ldr	r3, [pc, #8]	; (8011454 <_ZSt15get_new_handlerv+0xc>)
 801144a:	6818      	ldr	r0, [r3, #0]
 801144c:	f3bf 8f5b 	dmb	ish
 8011450:	4770      	bx	lr
 8011452:	bf00      	nop
 8011454:	200006c8 	.word	0x200006c8

08011458 <_ZdlPv>:
 8011458:	f000 bbcc 	b.w	8011bf4 <free>

0801145c <_ZNSaIcEC1Ev>:
 801145c:	4770      	bx	lr

0801145e <_ZNSaIcED1Ev>:
 801145e:	4770      	bx	lr

08011460 <_ZSt17__throw_bad_allocv>:
 8011460:	b508      	push	{r3, lr}
 8011462:	f000 fb8d 	bl	8011b80 <abort>

08011466 <_ZSt19__throw_logic_errorPKc>:
 8011466:	b508      	push	{r3, lr}
 8011468:	f000 fb8a 	bl	8011b80 <abort>

0801146c <_ZSt24__throw_invalid_argumentPKc>:
 801146c:	b508      	push	{r3, lr}
 801146e:	f000 fb87 	bl	8011b80 <abort>

08011472 <_ZSt20__throw_length_errorPKc>:
 8011472:	b508      	push	{r3, lr}
 8011474:	f000 fb84 	bl	8011b80 <abort>

08011478 <_ZSt20__throw_out_of_rangePKc>:
 8011478:	b508      	push	{r3, lr}
 801147a:	f000 fb81 	bl	8011b80 <abort>

0801147e <_ZSt24__throw_out_of_range_fmtPKcz>:
 801147e:	b40f      	push	{r0, r1, r2, r3}
 8011480:	b580      	push	{r7, lr}
 8011482:	b082      	sub	sp, #8
 8011484:	af00      	add	r7, sp, #0
 8011486:	f107 0410 	add.w	r4, r7, #16
 801148a:	f854 5b04 	ldr.w	r5, [r4], #4
 801148e:	4628      	mov	r0, r5
 8011490:	f7ee fe5e 	bl	8000150 <strlen>
 8011494:	f200 230e 	addw	r3, r0, #526	; 0x20e
 8011498:	f023 0307 	bic.w	r3, r3, #7
 801149c:	ebad 0d03 	sub.w	sp, sp, r3
 80114a0:	f500 7100 	add.w	r1, r0, #512	; 0x200
 80114a4:	4623      	mov	r3, r4
 80114a6:	462a      	mov	r2, r5
 80114a8:	4668      	mov	r0, sp
 80114aa:	607c      	str	r4, [r7, #4]
 80114ac:	f000 fb02 	bl	8011ab4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 80114b0:	f000 fb66 	bl	8011b80 <abort>

080114b4 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 80114b4:	b10a      	cbz	r2, 80114ba <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 80114b6:	f000 bbb3 	b.w	8011c20 <memcmp>
 80114ba:	4610      	mov	r0, r2
 80114bc:	4770      	bx	lr

080114be <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 80114be:	b10a      	cbz	r2, 80114c4 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 80114c0:	f000 bbbd 	b.w	8011c3e <memcpy>
 80114c4:	4770      	bx	lr

080114c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 80114c6:	6001      	str	r1, [r0, #0]
 80114c8:	4770      	bx	lr

080114ca <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 80114ca:	6800      	ldr	r0, [r0, #0]
 80114cc:	4770      	bx	lr

080114ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 80114ce:	3008      	adds	r0, #8
 80114d0:	4770      	bx	lr

080114d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 80114d2:	6081      	str	r1, [r0, #8]
 80114d4:	4770      	bx	lr

080114d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 80114d6:	2200      	movs	r2, #0
 80114d8:	6803      	ldr	r3, [r0, #0]
 80114da:	6041      	str	r1, [r0, #4]
 80114dc:	545a      	strb	r2, [r3, r1]
 80114de:	4770      	bx	lr

080114e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80114e0:	b508      	push	{r3, lr}
 80114e2:	680b      	ldr	r3, [r1, #0]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	da02      	bge.n	80114ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 80114e8:	4809      	ldr	r0, [pc, #36]	; (8011510 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 80114ea:	f7ff ffc2 	bl	8011472 <_ZSt20__throw_length_errorPKc>
 80114ee:	4293      	cmp	r3, r2
 80114f0:	d908      	bls.n	8011504 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 80114f2:	0052      	lsls	r2, r2, #1
 80114f4:	4293      	cmp	r3, r2
 80114f6:	d205      	bcs.n	8011504 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 80114f8:	2a00      	cmp	r2, #0
 80114fa:	bfb6      	itet	lt
 80114fc:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8011500:	600a      	strge	r2, [r1, #0]
 8011502:	600b      	strlt	r3, [r1, #0]
 8011504:	6808      	ldr	r0, [r1, #0]
 8011506:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801150a:	3001      	adds	r0, #1
 801150c:	f7ff bf8a 	b.w	8011424 <_Znwj>
 8011510:	08015ac5 	.word	0x08015ac5

08011514 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8011514:	4603      	mov	r3, r0
 8011516:	f853 0b08 	ldr.w	r0, [r3], #8
 801151a:	4298      	cmp	r0, r3
 801151c:	d001      	beq.n	8011522 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 801151e:	f7ff bf9b 	b.w	8011458 <_ZdlPv>
 8011522:	4770      	bx	lr

08011524 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8011524:	b510      	push	{r4, lr}
 8011526:	6843      	ldr	r3, [r0, #4]
 8011528:	4614      	mov	r4, r2
 801152a:	4299      	cmp	r1, r3
 801152c:	d904      	bls.n	8011538 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x14>
 801152e:	460a      	mov	r2, r1
 8011530:	4802      	ldr	r0, [pc, #8]	; (801153c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 8011532:	4621      	mov	r1, r4
 8011534:	f7ff ffa3 	bl	801147e <_ZSt24__throw_out_of_range_fmtPKcz>
 8011538:	4608      	mov	r0, r1
 801153a:	bd10      	pop	{r4, pc}
 801153c:	08015a20 	.word	0x08015a20

08011540 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8011540:	b508      	push	{r3, lr}
 8011542:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8011546:	6840      	ldr	r0, [r0, #4]
 8011548:	3901      	subs	r1, #1
 801154a:	1a09      	subs	r1, r1, r0
 801154c:	4291      	cmp	r1, r2
 801154e:	d202      	bcs.n	8011556 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8011550:	4618      	mov	r0, r3
 8011552:	f7ff ff8e 	bl	8011472 <_ZSt20__throw_length_errorPKc>
 8011556:	bd08      	pop	{r3, pc}

08011558 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8011558:	6803      	ldr	r3, [r0, #0]
 801155a:	428b      	cmp	r3, r1
 801155c:	d806      	bhi.n	801156c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 801155e:	6840      	ldr	r0, [r0, #4]
 8011560:	4418      	add	r0, r3
 8011562:	4281      	cmp	r1, r0
 8011564:	bf94      	ite	ls
 8011566:	2000      	movls	r0, #0
 8011568:	2001      	movhi	r0, #1
 801156a:	4770      	bx	lr
 801156c:	2001      	movs	r0, #1
 801156e:	4770      	bx	lr

08011570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8011570:	2a01      	cmp	r2, #1
 8011572:	b510      	push	{r4, lr}
 8011574:	d102      	bne.n	801157c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8011576:	780a      	ldrb	r2, [r1, #0]
 8011578:	7002      	strb	r2, [r0, #0]
 801157a:	bd10      	pop	{r4, pc}
 801157c:	f7ff ff9f 	bl	80114be <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8011580:	e7fb      	b.n	801157a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08011582 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8011582:	2a01      	cmp	r2, #1
 8011584:	b430      	push	{r4, r5}
 8011586:	d103      	bne.n	8011590 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8011588:	780b      	ldrb	r3, [r1, #0]
 801158a:	7003      	strb	r3, [r0, #0]
 801158c:	bc30      	pop	{r4, r5}
 801158e:	4770      	bx	lr
 8011590:	2a00      	cmp	r2, #0
 8011592:	d0fb      	beq.n	801158c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8011594:	bc30      	pop	{r4, r5}
 8011596:	f000 bb5d 	b.w	8011c54 <memmove>

0801159a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 801159a:	b508      	push	{r3, lr}
 801159c:	1a52      	subs	r2, r2, r1
 801159e:	f7ff ffe7 	bl	8011570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80115a2:	bd08      	pop	{r3, pc}

080115a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80115a4:	b508      	push	{r3, lr}
 80115a6:	1a52      	subs	r2, r2, r1
 80115a8:	f7ff ffe2 	bl	8011570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80115ac:	bd08      	pop	{r3, pc}

080115ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 80115ae:	4288      	cmp	r0, r1
 80115b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80115b2:	4604      	mov	r4, r0
 80115b4:	460e      	mov	r6, r1
 80115b6:	d020      	beq.n	80115fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4c>
 80115b8:	6802      	ldr	r2, [r0, #0]
 80115ba:	f100 0308 	add.w	r3, r0, #8
 80115be:	429a      	cmp	r2, r3
 80115c0:	bf08      	it	eq
 80115c2:	220f      	moveq	r2, #15
 80115c4:	684d      	ldr	r5, [r1, #4]
 80115c6:	bf18      	it	ne
 80115c8:	6882      	ldrne	r2, [r0, #8]
 80115ca:	42aa      	cmp	r2, r5
 80115cc:	d20b      	bcs.n	80115e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x38>
 80115ce:	a902      	add	r1, sp, #8
 80115d0:	f841 5d04 	str.w	r5, [r1, #-4]!
 80115d4:	f7ff ff84 	bl	80114e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80115d8:	4607      	mov	r7, r0
 80115da:	4620      	mov	r0, r4
 80115dc:	f7ff ff9a 	bl	8011514 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80115e0:	9b01      	ldr	r3, [sp, #4]
 80115e2:	6027      	str	r7, [r4, #0]
 80115e4:	60a3      	str	r3, [r4, #8]
 80115e6:	b125      	cbz	r5, 80115f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x44>
 80115e8:	462a      	mov	r2, r5
 80115ea:	6831      	ldr	r1, [r6, #0]
 80115ec:	6820      	ldr	r0, [r4, #0]
 80115ee:	f7ff ffbf 	bl	8011570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80115f2:	2200      	movs	r2, #0
 80115f4:	6823      	ldr	r3, [r4, #0]
 80115f6:	6065      	str	r5, [r4, #4]
 80115f8:	555a      	strb	r2, [r3, r5]
 80115fa:	b003      	add	sp, #12
 80115fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080115fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80115fe:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8011602:	4616      	mov	r6, r2
 8011604:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8011608:	6842      	ldr	r2, [r0, #4]
 801160a:	469a      	mov	sl, r3
 801160c:	eba8 0306 	sub.w	r3, r8, r6
 8011610:	1a57      	subs	r7, r2, r1
 8011612:	4413      	add	r3, r2
 8011614:	6802      	ldr	r2, [r0, #0]
 8011616:	9301      	str	r3, [sp, #4]
 8011618:	f100 0308 	add.w	r3, r0, #8
 801161c:	429a      	cmp	r2, r3
 801161e:	460d      	mov	r5, r1
 8011620:	bf14      	ite	ne
 8011622:	6882      	ldrne	r2, [r0, #8]
 8011624:	220f      	moveq	r2, #15
 8011626:	a901      	add	r1, sp, #4
 8011628:	4604      	mov	r4, r0
 801162a:	f7ff ff59 	bl	80114e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801162e:	1bbf      	subs	r7, r7, r6
 8011630:	4681      	mov	r9, r0
 8011632:	b11d      	cbz	r5, 801163c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8011634:	462a      	mov	r2, r5
 8011636:	6821      	ldr	r1, [r4, #0]
 8011638:	f7ff ff9a 	bl	8011570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801163c:	f1ba 0f00 	cmp.w	sl, #0
 8011640:	d008      	beq.n	8011654 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 8011642:	f1b8 0f00 	cmp.w	r8, #0
 8011646:	d005      	beq.n	8011654 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 8011648:	4642      	mov	r2, r8
 801164a:	4651      	mov	r1, sl
 801164c:	eb09 0005 	add.w	r0, r9, r5
 8011650:	f7ff ff8e 	bl	8011570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011654:	b147      	cbz	r7, 8011668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 8011656:	6821      	ldr	r1, [r4, #0]
 8011658:	442e      	add	r6, r5
 801165a:	eb05 0008 	add.w	r0, r5, r8
 801165e:	463a      	mov	r2, r7
 8011660:	4431      	add	r1, r6
 8011662:	4448      	add	r0, r9
 8011664:	f7ff ff84 	bl	8011570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011668:	4620      	mov	r0, r4
 801166a:	f7ff ff53 	bl	8011514 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801166e:	9b01      	ldr	r3, [sp, #4]
 8011670:	f8c4 9000 	str.w	r9, [r4]
 8011674:	60a3      	str	r3, [r4, #8]
 8011676:	b002      	add	sp, #8
 8011678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801167c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 801167c:	f100 0208 	add.w	r2, r0, #8
 8011680:	6002      	str	r2, [r0, #0]
 8011682:	2200      	movs	r2, #0
 8011684:	6042      	str	r2, [r0, #4]
 8011686:	7202      	strb	r2, [r0, #8]
 8011688:	4770      	bx	lr

0801168a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 801168a:	b570      	push	{r4, r5, r6, lr}
 801168c:	4604      	mov	r4, r0
 801168e:	460e      	mov	r6, r1
 8011690:	3008      	adds	r0, #8
 8011692:	6020      	str	r0, [r4, #0]
 8011694:	f856 3b08 	ldr.w	r3, [r6], #8
 8011698:	460d      	mov	r5, r1
 801169a:	429e      	cmp	r6, r3
 801169c:	d10b      	bne.n	80116b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 801169e:	2210      	movs	r2, #16
 80116a0:	4631      	mov	r1, r6
 80116a2:	f7ff ff0c 	bl	80114be <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80116a6:	686b      	ldr	r3, [r5, #4]
 80116a8:	4620      	mov	r0, r4
 80116aa:	6063      	str	r3, [r4, #4]
 80116ac:	2300      	movs	r3, #0
 80116ae:	602e      	str	r6, [r5, #0]
 80116b0:	606b      	str	r3, [r5, #4]
 80116b2:	722b      	strb	r3, [r5, #8]
 80116b4:	bd70      	pop	{r4, r5, r6, pc}
 80116b6:	6023      	str	r3, [r4, #0]
 80116b8:	688b      	ldr	r3, [r1, #8]
 80116ba:	60a3      	str	r3, [r4, #8]
 80116bc:	e7f3      	b.n	80116a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

080116be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80116be:	b510      	push	{r4, lr}
 80116c0:	4604      	mov	r4, r0
 80116c2:	f7ff ff27 	bl	8011514 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80116c6:	4620      	mov	r0, r4
 80116c8:	bd10      	pop	{r4, pc}

080116ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 80116ca:	b510      	push	{r4, lr}
 80116cc:	4604      	mov	r4, r0
 80116ce:	f7ff ff6e 	bl	80115ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 80116d2:	4620      	mov	r0, r4
 80116d4:	bd10      	pop	{r4, pc}

080116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 80116d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116d8:	460b      	mov	r3, r1
 80116da:	4606      	mov	r6, r0
 80116dc:	f853 7b08 	ldr.w	r7, [r3], #8
 80116e0:	4605      	mov	r5, r0
 80116e2:	42bb      	cmp	r3, r7
 80116e4:	460c      	mov	r4, r1
 80116e6:	f856 2b08 	ldr.w	r2, [r6], #8
 80116ea:	d016      	beq.n	801171a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x44>
 80116ec:	4296      	cmp	r6, r2
 80116ee:	bf08      	it	eq
 80116f0:	2200      	moveq	r2, #0
 80116f2:	6007      	str	r7, [r0, #0]
 80116f4:	6849      	ldr	r1, [r1, #4]
 80116f6:	bf18      	it	ne
 80116f8:	f8d0 c008 	ldrne.w	ip, [r0, #8]
 80116fc:	6041      	str	r1, [r0, #4]
 80116fe:	68a1      	ldr	r1, [r4, #8]
 8011700:	6081      	str	r1, [r0, #8]
 8011702:	b142      	cbz	r2, 8011716 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 8011704:	6022      	str	r2, [r4, #0]
 8011706:	f8c4 c008 	str.w	ip, [r4, #8]
 801170a:	2300      	movs	r3, #0
 801170c:	6822      	ldr	r2, [r4, #0]
 801170e:	6063      	str	r3, [r4, #4]
 8011710:	7013      	strb	r3, [r2, #0]
 8011712:	4628      	mov	r0, r5
 8011714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011716:	6023      	str	r3, [r4, #0]
 8011718:	e7f7      	b.n	801170a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>
 801171a:	f7ff ff48 	bl	80115ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 801171e:	e7f4      	b.n	801170a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>

08011720 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8011720:	6840      	ldr	r0, [r0, #4]
 8011722:	4770      	bx	lr

08011724 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 8011724:	6840      	ldr	r0, [r0, #4]
 8011726:	4770      	bx	lr

08011728 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
 8011728:	6840      	ldr	r0, [r0, #4]
 801172a:	fab0 f080 	clz	r0, r0
 801172e:	0940      	lsrs	r0, r0, #5
 8011730:	4770      	bx	lr

08011732 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8011732:	6800      	ldr	r0, [r0, #0]
 8011734:	4408      	add	r0, r1
 8011736:	4770      	bx	lr

08011738 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 8011738:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801173a:	6802      	ldr	r2, [r0, #0]
 801173c:	f100 0308 	add.w	r3, r0, #8
 8011740:	429a      	cmp	r2, r3
 8011742:	bf08      	it	eq
 8011744:	230f      	moveq	r3, #15
 8011746:	6846      	ldr	r6, [r0, #4]
 8011748:	bf18      	it	ne
 801174a:	6883      	ldrne	r3, [r0, #8]
 801174c:	1c75      	adds	r5, r6, #1
 801174e:	429d      	cmp	r5, r3
 8011750:	4604      	mov	r4, r0
 8011752:	460f      	mov	r7, r1
 8011754:	d906      	bls.n	8011764 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2c>
 8011756:	2301      	movs	r3, #1
 8011758:	9300      	str	r3, [sp, #0]
 801175a:	2300      	movs	r3, #0
 801175c:	4631      	mov	r1, r6
 801175e:	461a      	mov	r2, r3
 8011760:	f7ff ff4d 	bl	80115fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8011764:	2200      	movs	r2, #0
 8011766:	6823      	ldr	r3, [r4, #0]
 8011768:	559f      	strb	r7, [r3, r6]
 801176a:	6823      	ldr	r3, [r4, #0]
 801176c:	6065      	str	r5, [r4, #4]
 801176e:	555a      	strb	r2, [r3, r5]
 8011770:	b003      	add	sp, #12
 8011772:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011774 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8011774:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011778:	4614      	mov	r4, r2
 801177a:	4681      	mov	r9, r0
 801177c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801177e:	460f      	mov	r7, r1
 8011780:	462a      	mov	r2, r5
 8011782:	4698      	mov	r8, r3
 8011784:	4621      	mov	r1, r4
 8011786:	4b37      	ldr	r3, [pc, #220]	; (8011864 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf0>)
 8011788:	f7ff feda 	bl	8011540 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 801178c:	464a      	mov	r2, r9
 801178e:	f852 6b08 	ldr.w	r6, [r2], #8
 8011792:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8011796:	4296      	cmp	r6, r2
 8011798:	bf08      	it	eq
 801179a:	220f      	moveq	r2, #15
 801179c:	eba5 0b04 	sub.w	fp, r5, r4
 80117a0:	bf18      	it	ne
 80117a2:	f8d9 2008 	ldrne.w	r2, [r9, #8]
 80117a6:	eb03 0a0b 	add.w	sl, r3, fp
 80117aa:	4552      	cmp	r2, sl
 80117ac:	d34e      	bcc.n	801184c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 80117ae:	443e      	add	r6, r7
 80117b0:	4641      	mov	r1, r8
 80117b2:	1bdf      	subs	r7, r3, r7
 80117b4:	4648      	mov	r0, r9
 80117b6:	1b3f      	subs	r7, r7, r4
 80117b8:	f7ff fece 	bl	8011558 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 80117bc:	b170      	cbz	r0, 80117dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 80117be:	b137      	cbz	r7, 80117ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 80117c0:	42ac      	cmp	r4, r5
 80117c2:	d004      	beq.n	80117ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 80117c4:	463a      	mov	r2, r7
 80117c6:	1931      	adds	r1, r6, r4
 80117c8:	1970      	adds	r0, r6, r5
 80117ca:	f7ff feda 	bl	8011582 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80117ce:	b30d      	cbz	r5, 8011814 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80117d0:	462a      	mov	r2, r5
 80117d2:	4641      	mov	r1, r8
 80117d4:	4630      	mov	r0, r6
 80117d6:	f7ff fecb 	bl	8011570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80117da:	e01b      	b.n	8011814 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80117dc:	b135      	cbz	r5, 80117ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x78>
 80117de:	42ac      	cmp	r4, r5
 80117e0:	d33c      	bcc.n	801185c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xe8>
 80117e2:	462a      	mov	r2, r5
 80117e4:	4641      	mov	r1, r8
 80117e6:	4630      	mov	r0, r6
 80117e8:	f7ff fecb 	bl	8011582 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80117ec:	b197      	cbz	r7, 8011814 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80117ee:	42ac      	cmp	r4, r5
 80117f0:	d010      	beq.n	8011814 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80117f2:	463a      	mov	r2, r7
 80117f4:	1931      	adds	r1, r6, r4
 80117f6:	1970      	adds	r0, r6, r5
 80117f8:	f7ff fec3 	bl	8011582 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80117fc:	42ac      	cmp	r4, r5
 80117fe:	d209      	bcs.n	8011814 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8011800:	4434      	add	r4, r6
 8011802:	eb08 0305 	add.w	r3, r8, r5
 8011806:	429c      	cmp	r4, r3
 8011808:	d30f      	bcc.n	801182a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 801180a:	462a      	mov	r2, r5
 801180c:	4641      	mov	r1, r8
 801180e:	4630      	mov	r0, r6
 8011810:	f7ff feb7 	bl	8011582 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8011814:	2200      	movs	r2, #0
 8011816:	4648      	mov	r0, r9
 8011818:	f8d9 3000 	ldr.w	r3, [r9]
 801181c:	f8c9 a004 	str.w	sl, [r9, #4]
 8011820:	f803 200a 	strb.w	r2, [r3, sl]
 8011824:	b003      	add	sp, #12
 8011826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801182a:	4544      	cmp	r4, r8
 801182c:	d803      	bhi.n	8011836 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc2>
 801182e:	462a      	mov	r2, r5
 8011830:	eb08 010b 	add.w	r1, r8, fp
 8011834:	e7ce      	b.n	80117d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8011836:	eba4 0408 	sub.w	r4, r4, r8
 801183a:	4622      	mov	r2, r4
 801183c:	4641      	mov	r1, r8
 801183e:	4630      	mov	r0, r6
 8011840:	f7ff fe9f 	bl	8011582 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8011844:	1b2a      	subs	r2, r5, r4
 8011846:	1971      	adds	r1, r6, r5
 8011848:	1930      	adds	r0, r6, r4
 801184a:	e7c4      	b.n	80117d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x62>
 801184c:	9500      	str	r5, [sp, #0]
 801184e:	4643      	mov	r3, r8
 8011850:	4622      	mov	r2, r4
 8011852:	4639      	mov	r1, r7
 8011854:	4648      	mov	r0, r9
 8011856:	f7ff fed2 	bl	80115fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 801185a:	e7db      	b.n	8011814 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 801185c:	2f00      	cmp	r7, #0
 801185e:	d0cf      	beq.n	8011800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x8c>
 8011860:	e7c7      	b.n	80117f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 8011862:	bf00      	nop
 8011864:	08015a57 	.word	0x08015a57

08011868 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 8011868:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801186a:	4604      	mov	r4, r0
 801186c:	4608      	mov	r0, r1
 801186e:	460d      	mov	r5, r1
 8011870:	f7ee fc6e 	bl	8000150 <strlen>
 8011874:	462b      	mov	r3, r5
 8011876:	9000      	str	r0, [sp, #0]
 8011878:	6862      	ldr	r2, [r4, #4]
 801187a:	2100      	movs	r1, #0
 801187c:	4620      	mov	r0, r4
 801187e:	f7ff ff79 	bl	8011774 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8011882:	b003      	add	sp, #12
 8011884:	bd30      	pop	{r4, r5, pc}

08011886 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 8011886:	b508      	push	{r3, lr}
 8011888:	f7ff ffee 	bl	8011868 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 801188c:	bd08      	pop	{r3, pc}
	...

08011890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 8011890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011892:	4604      	mov	r4, r0
 8011894:	460f      	mov	r7, r1
 8011896:	4615      	mov	r5, r2
 8011898:	4a08      	ldr	r2, [pc, #32]	; (80118bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 801189a:	461e      	mov	r6, r3
 801189c:	f7ff fe42 	bl	8011524 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80118a0:	6862      	ldr	r2, [r4, #4]
 80118a2:	9b08      	ldr	r3, [sp, #32]
 80118a4:	1bd2      	subs	r2, r2, r7
 80118a6:	42aa      	cmp	r2, r5
 80118a8:	9300      	str	r3, [sp, #0]
 80118aa:	4601      	mov	r1, r0
 80118ac:	4633      	mov	r3, r6
 80118ae:	bf28      	it	cs
 80118b0:	462a      	movcs	r2, r5
 80118b2:	4620      	mov	r0, r4
 80118b4:	f7ff ff5e 	bl	8011774 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 80118b8:	b003      	add	sp, #12
 80118ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118bc:	08015aaf 	.word	0x08015aaf

080118c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 80118c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80118c2:	4605      	mov	r5, r0
 80118c4:	4610      	mov	r0, r2
 80118c6:	4614      	mov	r4, r2
 80118c8:	460e      	mov	r6, r1
 80118ca:	f7ee fc41 	bl	8000150 <strlen>
 80118ce:	4623      	mov	r3, r4
 80118d0:	9000      	str	r0, [sp, #0]
 80118d2:	2200      	movs	r2, #0
 80118d4:	4631      	mov	r1, r6
 80118d6:	4628      	mov	r0, r5
 80118d8:	f7ff ffda 	bl	8011890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 80118dc:	b002      	add	sp, #8
 80118de:	bd70      	pop	{r4, r5, r6, pc}

080118e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 80118e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80118e2:	4604      	mov	r4, r0
 80118e4:	4626      	mov	r6, r4
 80118e6:	f856 3b08 	ldr.w	r3, [r6], #8
 80118ea:	6840      	ldr	r0, [r0, #4]
 80118ec:	42b3      	cmp	r3, r6
 80118ee:	bf0c      	ite	eq
 80118f0:	260f      	moveq	r6, #15
 80118f2:	68a6      	ldrne	r6, [r4, #8]
 80118f4:	1885      	adds	r5, r0, r2
 80118f6:	42b5      	cmp	r5, r6
 80118f8:	d80a      	bhi.n	8011910 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x30>
 80118fa:	b112      	cbz	r2, 8011902 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>
 80118fc:	4418      	add	r0, r3
 80118fe:	f7ff fe37 	bl	8011570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011902:	2200      	movs	r2, #0
 8011904:	4620      	mov	r0, r4
 8011906:	6823      	ldr	r3, [r4, #0]
 8011908:	6065      	str	r5, [r4, #4]
 801190a:	555a      	strb	r2, [r3, r5]
 801190c:	b002      	add	sp, #8
 801190e:	bd70      	pop	{r4, r5, r6, pc}
 8011910:	9200      	str	r2, [sp, #0]
 8011912:	460b      	mov	r3, r1
 8011914:	2200      	movs	r2, #0
 8011916:	4601      	mov	r1, r0
 8011918:	4620      	mov	r0, r4
 801191a:	f7ff fe70 	bl	80115fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 801191e:	e7f0      	b.n	8011902 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x22>

08011920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 8011920:	b508      	push	{r3, lr}
 8011922:	e9d1 1200 	ldrd	r1, r2, [r1]
 8011926:	f7ff ffdb 	bl	80118e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 801192a:	bd08      	pop	{r3, pc}

0801192c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 801192c:	b570      	push	{r4, r5, r6, lr}
 801192e:	4604      	mov	r4, r0
 8011930:	4608      	mov	r0, r1
 8011932:	460d      	mov	r5, r1
 8011934:	f7ee fc0c 	bl	8000150 <strlen>
 8011938:	4606      	mov	r6, r0
 801193a:	4602      	mov	r2, r0
 801193c:	4b05      	ldr	r3, [pc, #20]	; (8011954 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 801193e:	4620      	mov	r0, r4
 8011940:	2100      	movs	r1, #0
 8011942:	f7ff fdfd 	bl	8011540 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8011946:	4632      	mov	r2, r6
 8011948:	4629      	mov	r1, r5
 801194a:	4620      	mov	r0, r4
 801194c:	f7ff ffc8 	bl	80118e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8011950:	bd70      	pop	{r4, r5, r6, pc}
 8011952:	bf00      	nop
 8011954:	08015a9a 	.word	0x08015a9a

08011958 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8011958:	6800      	ldr	r0, [r0, #0]
 801195a:	4770      	bx	lr

0801195c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 801195c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801195e:	4606      	mov	r6, r0
 8011960:	6845      	ldr	r5, [r0, #4]
 8011962:	4608      	mov	r0, r1
 8011964:	460f      	mov	r7, r1
 8011966:	f7ee fbf3 	bl	8000150 <strlen>
 801196a:	4285      	cmp	r5, r0
 801196c:	4604      	mov	r4, r0
 801196e:	462a      	mov	r2, r5
 8011970:	4639      	mov	r1, r7
 8011972:	bf28      	it	cs
 8011974:	4602      	movcs	r2, r0
 8011976:	6830      	ldr	r0, [r6, #0]
 8011978:	f7ff fd9c 	bl	80114b4 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 801197c:	b900      	cbnz	r0, 8011980 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 801197e:	1b28      	subs	r0, r5, r4
 8011980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8011982:	6001      	str	r1, [r0, #0]
 8011984:	4770      	bx	lr

08011986 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8011986:	b510      	push	{r4, lr}
 8011988:	4604      	mov	r4, r0
 801198a:	f100 0208 	add.w	r2, r0, #8
 801198e:	6002      	str	r2, [r0, #0]
 8011990:	e9d1 1200 	ldrd	r1, r2, [r1]
 8011994:	f04f 0300 	mov.w	r3, #0
 8011998:	440a      	add	r2, r1
 801199a:	f7f2 fc15 	bl	80041c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 801199e:	4620      	mov	r0, r4
 80119a0:	bd10      	pop	{r4, pc}
	...

080119a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80119a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80119a6:	4604      	mov	r4, r0
 80119a8:	4616      	mov	r6, r2
 80119aa:	460d      	mov	r5, r1
 80119ac:	b919      	cbnz	r1, 80119b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80119ae:	b112      	cbz	r2, 80119b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80119b0:	480d      	ldr	r0, [pc, #52]	; (80119e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 80119b2:	f7ff fd58 	bl	8011466 <_ZSt19__throw_logic_errorPKc>
 80119b6:	1b73      	subs	r3, r6, r5
 80119b8:	2b0f      	cmp	r3, #15
 80119ba:	9301      	str	r3, [sp, #4]
 80119bc:	d907      	bls.n	80119ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 80119be:	2200      	movs	r2, #0
 80119c0:	a901      	add	r1, sp, #4
 80119c2:	4620      	mov	r0, r4
 80119c4:	f7ff fd8c 	bl	80114e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80119c8:	9b01      	ldr	r3, [sp, #4]
 80119ca:	6020      	str	r0, [r4, #0]
 80119cc:	60a3      	str	r3, [r4, #8]
 80119ce:	4632      	mov	r2, r6
 80119d0:	4629      	mov	r1, r5
 80119d2:	6820      	ldr	r0, [r4, #0]
 80119d4:	f7ff fde6 	bl	80115a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80119d8:	2100      	movs	r1, #0
 80119da:	9b01      	ldr	r3, [sp, #4]
 80119dc:	6822      	ldr	r2, [r4, #0]
 80119de:	6063      	str	r3, [r4, #4]
 80119e0:	54d1      	strb	r1, [r2, r3]
 80119e2:	b002      	add	sp, #8
 80119e4:	bd70      	pop	{r4, r5, r6, pc}
 80119e6:	bf00      	nop
 80119e8:	08015a70 	.word	0x08015a70

080119ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 80119ec:	b538      	push	{r3, r4, r5, lr}
 80119ee:	f100 0308 	add.w	r3, r0, #8
 80119f2:	4604      	mov	r4, r0
 80119f4:	6003      	str	r3, [r0, #0]
 80119f6:	460d      	mov	r5, r1
 80119f8:	b159      	cbz	r1, 8011a12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 80119fa:	4608      	mov	r0, r1
 80119fc:	f7ee fba8 	bl	8000150 <strlen>
 8011a00:	182a      	adds	r2, r5, r0
 8011a02:	4620      	mov	r0, r4
 8011a04:	f04f 0300 	mov.w	r3, #0
 8011a08:	4629      	mov	r1, r5
 8011a0a:	f7ff ffcb 	bl	80119a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8011a0e:	4620      	mov	r0, r4
 8011a10:	bd38      	pop	{r3, r4, r5, pc}
 8011a12:	f04f 32ff 	mov.w	r2, #4294967295
 8011a16:	e7f4      	b.n	8011a02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08011a18 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b09c      	sub	sp, #112	; 0x70
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	1a0e      	subs	r6, r1, r0
 8011a20:	4680      	mov	r8, r0
 8011a22:	2269      	movs	r2, #105	; 0x69
 8011a24:	490e      	ldr	r1, [pc, #56]	; (8011a60 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8011a26:	1d38      	adds	r0, r7, #4
 8011a28:	f000 f909 	bl	8011c3e <memcpy>
 8011a2c:	f106 0377 	add.w	r3, r6, #119	; 0x77
 8011a30:	f023 0307 	bic.w	r3, r3, #7
 8011a34:	ebad 0d03 	sub.w	sp, sp, r3
 8011a38:	466c      	mov	r4, sp
 8011a3a:	2268      	movs	r2, #104	; 0x68
 8011a3c:	1d39      	adds	r1, r7, #4
 8011a3e:	4620      	mov	r0, r4
 8011a40:	f000 f8fd 	bl	8011c3e <memcpy>
 8011a44:	4632      	mov	r2, r6
 8011a46:	4641      	mov	r1, r8
 8011a48:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011a4c:	f000 f8f7 	bl	8011c3e <memcpy>
 8011a50:	2300      	movs	r3, #0
 8011a52:	1c75      	adds	r5, r6, #1
 8011a54:	4425      	add	r5, r4
 8011a56:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 8011a5a:	4620      	mov	r0, r4
 8011a5c:	f7ff fd03 	bl	8011466 <_ZSt19__throw_logic_errorPKc>
 8011a60:	08015ae8 	.word	0x08015ae8

08011a64 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8011a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a66:	af00      	add	r7, sp, #0
 8011a68:	b086      	sub	sp, #24
 8011a6a:	466d      	mov	r5, sp
 8011a6c:	f105 040c 	add.w	r4, r5, #12
 8011a70:	4623      	mov	r3, r4
 8011a72:	f04f 0c0a 	mov.w	ip, #10
 8011a76:	f8df e038 	ldr.w	lr, [pc, #56]	; 8011ab0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8011a7a:	fbb2 f6fc 	udiv	r6, r2, ip
 8011a7e:	fb0c 2216 	mls	r2, ip, r6, r2
 8011a82:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8011a86:	f803 2d01 	strb.w	r2, [r3, #-1]!
 8011a8a:	4632      	mov	r2, r6
 8011a8c:	2e00      	cmp	r6, #0
 8011a8e:	d1f4      	bne.n	8011a7a <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 8011a90:	1ae4      	subs	r4, r4, r3
 8011a92:	428c      	cmp	r4, r1
 8011a94:	d808      	bhi.n	8011aa8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 8011a96:	f1c4 010c 	rsb	r1, r4, #12
 8011a9a:	4622      	mov	r2, r4
 8011a9c:	4429      	add	r1, r5
 8011a9e:	f000 f8ce 	bl	8011c3e <memcpy>
 8011aa2:	4620      	mov	r0, r4
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011aa8:	f04f 34ff 	mov.w	r4, #4294967295
 8011aac:	e7f9      	b.n	8011aa2 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 8011aae:	bf00      	nop
 8011ab0:	08015add 	.word	0x08015add

08011ab4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8011ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ab8:	4606      	mov	r6, r0
 8011aba:	4615      	mov	r5, r2
 8011abc:	4604      	mov	r4, r0
 8011abe:	3901      	subs	r1, #1
 8011ac0:	1847      	adds	r7, r0, r1
 8011ac2:	782a      	ldrb	r2, [r5, #0]
 8011ac4:	b39a      	cbz	r2, 8011b2e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 8011ac6:	42bc      	cmp	r4, r7
 8011ac8:	d22d      	bcs.n	8011b26 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 8011aca:	2a25      	cmp	r2, #37	; 0x25
 8011acc:	d107      	bne.n	8011ade <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8011ace:	786a      	ldrb	r2, [r5, #1]
 8011ad0:	2a73      	cmp	r2, #115	; 0x73
 8011ad2:	d00a      	beq.n	8011aea <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 8011ad4:	2a7a      	cmp	r2, #122	; 0x7a
 8011ad6:	d013      	beq.n	8011b00 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 8011ad8:	2a25      	cmp	r2, #37	; 0x25
 8011ada:	d100      	bne.n	8011ade <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8011adc:	3501      	adds	r5, #1
 8011ade:	782a      	ldrb	r2, [r5, #0]
 8011ae0:	3401      	adds	r4, #1
 8011ae2:	f804 2c01 	strb.w	r2, [r4, #-1]
 8011ae6:	3501      	adds	r5, #1
 8011ae8:	e7eb      	b.n	8011ac2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8011aea:	1d19      	adds	r1, r3, #4
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	3b01      	subs	r3, #1
 8011af0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8011af4:	b1a2      	cbz	r2, 8011b20 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6c>
 8011af6:	42bc      	cmp	r4, r7
 8011af8:	d015      	beq.n	8011b26 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 8011afa:	f804 2b01 	strb.w	r2, [r4], #1
 8011afe:	e7f7      	b.n	8011af0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 8011b00:	78aa      	ldrb	r2, [r5, #2]
 8011b02:	2a75      	cmp	r2, #117	; 0x75
 8011b04:	d1eb      	bne.n	8011ade <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 8011b06:	681a      	ldr	r2, [r3, #0]
 8011b08:	1b39      	subs	r1, r7, r4
 8011b0a:	4620      	mov	r0, r4
 8011b0c:	f103 0804 	add.w	r8, r3, #4
 8011b10:	f7ff ffa8 	bl	8011a64 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8011b14:	2800      	cmp	r0, #0
 8011b16:	dd06      	ble.n	8011b26 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
 8011b18:	4404      	add	r4, r0
 8011b1a:	3503      	adds	r5, #3
 8011b1c:	4643      	mov	r3, r8
 8011b1e:	e7d0      	b.n	8011ac2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8011b20:	3502      	adds	r5, #2
 8011b22:	460b      	mov	r3, r1
 8011b24:	e7cd      	b.n	8011ac2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 8011b26:	4621      	mov	r1, r4
 8011b28:	4630      	mov	r0, r6
 8011b2a:	f7ff ff75 	bl	8011a18 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8011b2e:	7022      	strb	r2, [r4, #0]
 8011b30:	1ba0      	subs	r0, r4, r6
 8011b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08011b38 <roundf>:
 8011b38:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8011b3c:	3b7f      	subs	r3, #127	; 0x7f
 8011b3e:	2b16      	cmp	r3, #22
 8011b40:	b510      	push	{r4, lr}
 8011b42:	4601      	mov	r1, r0
 8011b44:	dc14      	bgt.n	8011b70 <roundf+0x38>
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	da07      	bge.n	8011b5a <roundf+0x22>
 8011b4a:	3301      	adds	r3, #1
 8011b4c:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 8011b50:	d101      	bne.n	8011b56 <roundf+0x1e>
 8011b52:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 8011b56:	4608      	mov	r0, r1
 8011b58:	bd10      	pop	{r4, pc}
 8011b5a:	4a08      	ldr	r2, [pc, #32]	; (8011b7c <roundf+0x44>)
 8011b5c:	411a      	asrs	r2, r3
 8011b5e:	4210      	tst	r0, r2
 8011b60:	d0f9      	beq.n	8011b56 <roundf+0x1e>
 8011b62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011b66:	4119      	asrs	r1, r3
 8011b68:	4401      	add	r1, r0
 8011b6a:	ea21 0102 	bic.w	r1, r1, r2
 8011b6e:	e7f2      	b.n	8011b56 <roundf+0x1e>
 8011b70:	2b80      	cmp	r3, #128	; 0x80
 8011b72:	d1f0      	bne.n	8011b56 <roundf+0x1e>
 8011b74:	f7ee ff18 	bl	80009a8 <__addsf3>
 8011b78:	4601      	mov	r1, r0
 8011b7a:	e7ec      	b.n	8011b56 <roundf+0x1e>
 8011b7c:	007fffff 	.word	0x007fffff

08011b80 <abort>:
 8011b80:	b508      	push	{r3, lr}
 8011b82:	2006      	movs	r0, #6
 8011b84:	f000 f966 	bl	8011e54 <raise>
 8011b88:	2001      	movs	r0, #1
 8011b8a:	f7fa fa14 	bl	800bfb6 <_exit>
	...

08011b90 <__errno>:
 8011b90:	4b01      	ldr	r3, [pc, #4]	; (8011b98 <__errno+0x8>)
 8011b92:	6818      	ldr	r0, [r3, #0]
 8011b94:	4770      	bx	lr
 8011b96:	bf00      	nop
 8011b98:	200000b8 	.word	0x200000b8

08011b9c <__libc_init_array>:
 8011b9c:	b570      	push	{r4, r5, r6, lr}
 8011b9e:	2500      	movs	r5, #0
 8011ba0:	4e0c      	ldr	r6, [pc, #48]	; (8011bd4 <__libc_init_array+0x38>)
 8011ba2:	4c0d      	ldr	r4, [pc, #52]	; (8011bd8 <__libc_init_array+0x3c>)
 8011ba4:	1ba4      	subs	r4, r4, r6
 8011ba6:	10a4      	asrs	r4, r4, #2
 8011ba8:	42a5      	cmp	r5, r4
 8011baa:	d109      	bne.n	8011bc0 <__libc_init_array+0x24>
 8011bac:	f000 fd9a 	bl	80126e4 <_init>
 8011bb0:	2500      	movs	r5, #0
 8011bb2:	4e0a      	ldr	r6, [pc, #40]	; (8011bdc <__libc_init_array+0x40>)
 8011bb4:	4c0a      	ldr	r4, [pc, #40]	; (8011be0 <__libc_init_array+0x44>)
 8011bb6:	1ba4      	subs	r4, r4, r6
 8011bb8:	10a4      	asrs	r4, r4, #2
 8011bba:	42a5      	cmp	r5, r4
 8011bbc:	d105      	bne.n	8011bca <__libc_init_array+0x2e>
 8011bbe:	bd70      	pop	{r4, r5, r6, pc}
 8011bc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011bc4:	4798      	blx	r3
 8011bc6:	3501      	adds	r5, #1
 8011bc8:	e7ee      	b.n	8011ba8 <__libc_init_array+0xc>
 8011bca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011bce:	4798      	blx	r3
 8011bd0:	3501      	adds	r5, #1
 8011bd2:	e7f2      	b.n	8011bba <__libc_init_array+0x1e>
 8011bd4:	08015cf4 	.word	0x08015cf4
 8011bd8:	08015cf4 	.word	0x08015cf4
 8011bdc:	08015cf4 	.word	0x08015cf4
 8011be0:	08015cf8 	.word	0x08015cf8

08011be4 <malloc>:
 8011be4:	4b02      	ldr	r3, [pc, #8]	; (8011bf0 <malloc+0xc>)
 8011be6:	4601      	mov	r1, r0
 8011be8:	6818      	ldr	r0, [r3, #0]
 8011bea:	f000 b8a1 	b.w	8011d30 <_malloc_r>
 8011bee:	bf00      	nop
 8011bf0:	200000b8 	.word	0x200000b8

08011bf4 <free>:
 8011bf4:	4b02      	ldr	r3, [pc, #8]	; (8011c00 <free+0xc>)
 8011bf6:	4601      	mov	r1, r0
 8011bf8:	6818      	ldr	r0, [r3, #0]
 8011bfa:	f000 b84d 	b.w	8011c98 <_free_r>
 8011bfe:	bf00      	nop
 8011c00:	200000b8 	.word	0x200000b8

08011c04 <memchr>:
 8011c04:	b510      	push	{r4, lr}
 8011c06:	b2c9      	uxtb	r1, r1
 8011c08:	4402      	add	r2, r0
 8011c0a:	4290      	cmp	r0, r2
 8011c0c:	4603      	mov	r3, r0
 8011c0e:	d101      	bne.n	8011c14 <memchr+0x10>
 8011c10:	2300      	movs	r3, #0
 8011c12:	e003      	b.n	8011c1c <memchr+0x18>
 8011c14:	781c      	ldrb	r4, [r3, #0]
 8011c16:	3001      	adds	r0, #1
 8011c18:	428c      	cmp	r4, r1
 8011c1a:	d1f6      	bne.n	8011c0a <memchr+0x6>
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	bd10      	pop	{r4, pc}

08011c20 <memcmp>:
 8011c20:	b530      	push	{r4, r5, lr}
 8011c22:	2400      	movs	r4, #0
 8011c24:	42a2      	cmp	r2, r4
 8011c26:	d101      	bne.n	8011c2c <memcmp+0xc>
 8011c28:	2000      	movs	r0, #0
 8011c2a:	e007      	b.n	8011c3c <memcmp+0x1c>
 8011c2c:	5d03      	ldrb	r3, [r0, r4]
 8011c2e:	3401      	adds	r4, #1
 8011c30:	190d      	adds	r5, r1, r4
 8011c32:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8011c36:	42ab      	cmp	r3, r5
 8011c38:	d0f4      	beq.n	8011c24 <memcmp+0x4>
 8011c3a:	1b58      	subs	r0, r3, r5
 8011c3c:	bd30      	pop	{r4, r5, pc}

08011c3e <memcpy>:
 8011c3e:	b510      	push	{r4, lr}
 8011c40:	1e43      	subs	r3, r0, #1
 8011c42:	440a      	add	r2, r1
 8011c44:	4291      	cmp	r1, r2
 8011c46:	d100      	bne.n	8011c4a <memcpy+0xc>
 8011c48:	bd10      	pop	{r4, pc}
 8011c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011c52:	e7f7      	b.n	8011c44 <memcpy+0x6>

08011c54 <memmove>:
 8011c54:	4288      	cmp	r0, r1
 8011c56:	b510      	push	{r4, lr}
 8011c58:	eb01 0302 	add.w	r3, r1, r2
 8011c5c:	d807      	bhi.n	8011c6e <memmove+0x1a>
 8011c5e:	1e42      	subs	r2, r0, #1
 8011c60:	4299      	cmp	r1, r3
 8011c62:	d00a      	beq.n	8011c7a <memmove+0x26>
 8011c64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011c68:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011c6c:	e7f8      	b.n	8011c60 <memmove+0xc>
 8011c6e:	4283      	cmp	r3, r0
 8011c70:	d9f5      	bls.n	8011c5e <memmove+0xa>
 8011c72:	1881      	adds	r1, r0, r2
 8011c74:	1ad2      	subs	r2, r2, r3
 8011c76:	42d3      	cmn	r3, r2
 8011c78:	d100      	bne.n	8011c7c <memmove+0x28>
 8011c7a:	bd10      	pop	{r4, pc}
 8011c7c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011c80:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011c84:	e7f7      	b.n	8011c76 <memmove+0x22>

08011c86 <memset>:
 8011c86:	4603      	mov	r3, r0
 8011c88:	4402      	add	r2, r0
 8011c8a:	4293      	cmp	r3, r2
 8011c8c:	d100      	bne.n	8011c90 <memset+0xa>
 8011c8e:	4770      	bx	lr
 8011c90:	f803 1b01 	strb.w	r1, [r3], #1
 8011c94:	e7f9      	b.n	8011c8a <memset+0x4>
	...

08011c98 <_free_r>:
 8011c98:	b538      	push	{r3, r4, r5, lr}
 8011c9a:	4605      	mov	r5, r0
 8011c9c:	2900      	cmp	r1, #0
 8011c9e:	d043      	beq.n	8011d28 <_free_r+0x90>
 8011ca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ca4:	1f0c      	subs	r4, r1, #4
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	bfb8      	it	lt
 8011caa:	18e4      	addlt	r4, r4, r3
 8011cac:	f000 fa01 	bl	80120b2 <__malloc_lock>
 8011cb0:	4a1e      	ldr	r2, [pc, #120]	; (8011d2c <_free_r+0x94>)
 8011cb2:	6813      	ldr	r3, [r2, #0]
 8011cb4:	4610      	mov	r0, r2
 8011cb6:	b933      	cbnz	r3, 8011cc6 <_free_r+0x2e>
 8011cb8:	6063      	str	r3, [r4, #4]
 8011cba:	6014      	str	r4, [r2, #0]
 8011cbc:	4628      	mov	r0, r5
 8011cbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011cc2:	f000 b9f7 	b.w	80120b4 <__malloc_unlock>
 8011cc6:	42a3      	cmp	r3, r4
 8011cc8:	d90b      	bls.n	8011ce2 <_free_r+0x4a>
 8011cca:	6821      	ldr	r1, [r4, #0]
 8011ccc:	1862      	adds	r2, r4, r1
 8011cce:	4293      	cmp	r3, r2
 8011cd0:	bf01      	itttt	eq
 8011cd2:	681a      	ldreq	r2, [r3, #0]
 8011cd4:	685b      	ldreq	r3, [r3, #4]
 8011cd6:	1852      	addeq	r2, r2, r1
 8011cd8:	6022      	streq	r2, [r4, #0]
 8011cda:	6063      	str	r3, [r4, #4]
 8011cdc:	6004      	str	r4, [r0, #0]
 8011cde:	e7ed      	b.n	8011cbc <_free_r+0x24>
 8011ce0:	4613      	mov	r3, r2
 8011ce2:	685a      	ldr	r2, [r3, #4]
 8011ce4:	b10a      	cbz	r2, 8011cea <_free_r+0x52>
 8011ce6:	42a2      	cmp	r2, r4
 8011ce8:	d9fa      	bls.n	8011ce0 <_free_r+0x48>
 8011cea:	6819      	ldr	r1, [r3, #0]
 8011cec:	1858      	adds	r0, r3, r1
 8011cee:	42a0      	cmp	r0, r4
 8011cf0:	d10b      	bne.n	8011d0a <_free_r+0x72>
 8011cf2:	6820      	ldr	r0, [r4, #0]
 8011cf4:	4401      	add	r1, r0
 8011cf6:	1858      	adds	r0, r3, r1
 8011cf8:	4282      	cmp	r2, r0
 8011cfa:	6019      	str	r1, [r3, #0]
 8011cfc:	d1de      	bne.n	8011cbc <_free_r+0x24>
 8011cfe:	6810      	ldr	r0, [r2, #0]
 8011d00:	6852      	ldr	r2, [r2, #4]
 8011d02:	4401      	add	r1, r0
 8011d04:	6019      	str	r1, [r3, #0]
 8011d06:	605a      	str	r2, [r3, #4]
 8011d08:	e7d8      	b.n	8011cbc <_free_r+0x24>
 8011d0a:	d902      	bls.n	8011d12 <_free_r+0x7a>
 8011d0c:	230c      	movs	r3, #12
 8011d0e:	602b      	str	r3, [r5, #0]
 8011d10:	e7d4      	b.n	8011cbc <_free_r+0x24>
 8011d12:	6820      	ldr	r0, [r4, #0]
 8011d14:	1821      	adds	r1, r4, r0
 8011d16:	428a      	cmp	r2, r1
 8011d18:	bf01      	itttt	eq
 8011d1a:	6811      	ldreq	r1, [r2, #0]
 8011d1c:	6852      	ldreq	r2, [r2, #4]
 8011d1e:	1809      	addeq	r1, r1, r0
 8011d20:	6021      	streq	r1, [r4, #0]
 8011d22:	6062      	str	r2, [r4, #4]
 8011d24:	605c      	str	r4, [r3, #4]
 8011d26:	e7c9      	b.n	8011cbc <_free_r+0x24>
 8011d28:	bd38      	pop	{r3, r4, r5, pc}
 8011d2a:	bf00      	nop
 8011d2c:	200006cc 	.word	0x200006cc

08011d30 <_malloc_r>:
 8011d30:	b570      	push	{r4, r5, r6, lr}
 8011d32:	1ccd      	adds	r5, r1, #3
 8011d34:	f025 0503 	bic.w	r5, r5, #3
 8011d38:	3508      	adds	r5, #8
 8011d3a:	2d0c      	cmp	r5, #12
 8011d3c:	bf38      	it	cc
 8011d3e:	250c      	movcc	r5, #12
 8011d40:	2d00      	cmp	r5, #0
 8011d42:	4606      	mov	r6, r0
 8011d44:	db01      	blt.n	8011d4a <_malloc_r+0x1a>
 8011d46:	42a9      	cmp	r1, r5
 8011d48:	d903      	bls.n	8011d52 <_malloc_r+0x22>
 8011d4a:	230c      	movs	r3, #12
 8011d4c:	6033      	str	r3, [r6, #0]
 8011d4e:	2000      	movs	r0, #0
 8011d50:	bd70      	pop	{r4, r5, r6, pc}
 8011d52:	f000 f9ae 	bl	80120b2 <__malloc_lock>
 8011d56:	4a21      	ldr	r2, [pc, #132]	; (8011ddc <_malloc_r+0xac>)
 8011d58:	6814      	ldr	r4, [r2, #0]
 8011d5a:	4621      	mov	r1, r4
 8011d5c:	b991      	cbnz	r1, 8011d84 <_malloc_r+0x54>
 8011d5e:	4c20      	ldr	r4, [pc, #128]	; (8011de0 <_malloc_r+0xb0>)
 8011d60:	6823      	ldr	r3, [r4, #0]
 8011d62:	b91b      	cbnz	r3, 8011d6c <_malloc_r+0x3c>
 8011d64:	4630      	mov	r0, r6
 8011d66:	f000 f83d 	bl	8011de4 <_sbrk_r>
 8011d6a:	6020      	str	r0, [r4, #0]
 8011d6c:	4629      	mov	r1, r5
 8011d6e:	4630      	mov	r0, r6
 8011d70:	f000 f838 	bl	8011de4 <_sbrk_r>
 8011d74:	1c43      	adds	r3, r0, #1
 8011d76:	d124      	bne.n	8011dc2 <_malloc_r+0x92>
 8011d78:	230c      	movs	r3, #12
 8011d7a:	4630      	mov	r0, r6
 8011d7c:	6033      	str	r3, [r6, #0]
 8011d7e:	f000 f999 	bl	80120b4 <__malloc_unlock>
 8011d82:	e7e4      	b.n	8011d4e <_malloc_r+0x1e>
 8011d84:	680b      	ldr	r3, [r1, #0]
 8011d86:	1b5b      	subs	r3, r3, r5
 8011d88:	d418      	bmi.n	8011dbc <_malloc_r+0x8c>
 8011d8a:	2b0b      	cmp	r3, #11
 8011d8c:	d90f      	bls.n	8011dae <_malloc_r+0x7e>
 8011d8e:	600b      	str	r3, [r1, #0]
 8011d90:	18cc      	adds	r4, r1, r3
 8011d92:	50cd      	str	r5, [r1, r3]
 8011d94:	4630      	mov	r0, r6
 8011d96:	f000 f98d 	bl	80120b4 <__malloc_unlock>
 8011d9a:	f104 000b 	add.w	r0, r4, #11
 8011d9e:	1d23      	adds	r3, r4, #4
 8011da0:	f020 0007 	bic.w	r0, r0, #7
 8011da4:	1ac3      	subs	r3, r0, r3
 8011da6:	d0d3      	beq.n	8011d50 <_malloc_r+0x20>
 8011da8:	425a      	negs	r2, r3
 8011daa:	50e2      	str	r2, [r4, r3]
 8011dac:	e7d0      	b.n	8011d50 <_malloc_r+0x20>
 8011dae:	684b      	ldr	r3, [r1, #4]
 8011db0:	428c      	cmp	r4, r1
 8011db2:	bf16      	itet	ne
 8011db4:	6063      	strne	r3, [r4, #4]
 8011db6:	6013      	streq	r3, [r2, #0]
 8011db8:	460c      	movne	r4, r1
 8011dba:	e7eb      	b.n	8011d94 <_malloc_r+0x64>
 8011dbc:	460c      	mov	r4, r1
 8011dbe:	6849      	ldr	r1, [r1, #4]
 8011dc0:	e7cc      	b.n	8011d5c <_malloc_r+0x2c>
 8011dc2:	1cc4      	adds	r4, r0, #3
 8011dc4:	f024 0403 	bic.w	r4, r4, #3
 8011dc8:	42a0      	cmp	r0, r4
 8011dca:	d005      	beq.n	8011dd8 <_malloc_r+0xa8>
 8011dcc:	1a21      	subs	r1, r4, r0
 8011dce:	4630      	mov	r0, r6
 8011dd0:	f000 f808 	bl	8011de4 <_sbrk_r>
 8011dd4:	3001      	adds	r0, #1
 8011dd6:	d0cf      	beq.n	8011d78 <_malloc_r+0x48>
 8011dd8:	6025      	str	r5, [r4, #0]
 8011dda:	e7db      	b.n	8011d94 <_malloc_r+0x64>
 8011ddc:	200006cc 	.word	0x200006cc
 8011de0:	200006d0 	.word	0x200006d0

08011de4 <_sbrk_r>:
 8011de4:	b538      	push	{r3, r4, r5, lr}
 8011de6:	2300      	movs	r3, #0
 8011de8:	4c05      	ldr	r4, [pc, #20]	; (8011e00 <_sbrk_r+0x1c>)
 8011dea:	4605      	mov	r5, r0
 8011dec:	4608      	mov	r0, r1
 8011dee:	6023      	str	r3, [r4, #0]
 8011df0:	f7fa f8ec 	bl	800bfcc <_sbrk>
 8011df4:	1c43      	adds	r3, r0, #1
 8011df6:	d102      	bne.n	8011dfe <_sbrk_r+0x1a>
 8011df8:	6823      	ldr	r3, [r4, #0]
 8011dfa:	b103      	cbz	r3, 8011dfe <_sbrk_r+0x1a>
 8011dfc:	602b      	str	r3, [r5, #0]
 8011dfe:	bd38      	pop	{r3, r4, r5, pc}
 8011e00:	20000858 	.word	0x20000858

08011e04 <_raise_r>:
 8011e04:	291f      	cmp	r1, #31
 8011e06:	b538      	push	{r3, r4, r5, lr}
 8011e08:	4604      	mov	r4, r0
 8011e0a:	460d      	mov	r5, r1
 8011e0c:	d904      	bls.n	8011e18 <_raise_r+0x14>
 8011e0e:	2316      	movs	r3, #22
 8011e10:	6003      	str	r3, [r0, #0]
 8011e12:	f04f 30ff 	mov.w	r0, #4294967295
 8011e16:	bd38      	pop	{r3, r4, r5, pc}
 8011e18:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011e1a:	b112      	cbz	r2, 8011e22 <_raise_r+0x1e>
 8011e1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011e20:	b94b      	cbnz	r3, 8011e36 <_raise_r+0x32>
 8011e22:	4620      	mov	r0, r4
 8011e24:	f000 f830 	bl	8011e88 <_getpid_r>
 8011e28:	462a      	mov	r2, r5
 8011e2a:	4601      	mov	r1, r0
 8011e2c:	4620      	mov	r0, r4
 8011e2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e32:	f000 b817 	b.w	8011e64 <_kill_r>
 8011e36:	2b01      	cmp	r3, #1
 8011e38:	d00a      	beq.n	8011e50 <_raise_r+0x4c>
 8011e3a:	1c59      	adds	r1, r3, #1
 8011e3c:	d103      	bne.n	8011e46 <_raise_r+0x42>
 8011e3e:	2316      	movs	r3, #22
 8011e40:	6003      	str	r3, [r0, #0]
 8011e42:	2001      	movs	r0, #1
 8011e44:	e7e7      	b.n	8011e16 <_raise_r+0x12>
 8011e46:	2400      	movs	r4, #0
 8011e48:	4628      	mov	r0, r5
 8011e4a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011e4e:	4798      	blx	r3
 8011e50:	2000      	movs	r0, #0
 8011e52:	e7e0      	b.n	8011e16 <_raise_r+0x12>

08011e54 <raise>:
 8011e54:	4b02      	ldr	r3, [pc, #8]	; (8011e60 <raise+0xc>)
 8011e56:	4601      	mov	r1, r0
 8011e58:	6818      	ldr	r0, [r3, #0]
 8011e5a:	f7ff bfd3 	b.w	8011e04 <_raise_r>
 8011e5e:	bf00      	nop
 8011e60:	200000b8 	.word	0x200000b8

08011e64 <_kill_r>:
 8011e64:	b538      	push	{r3, r4, r5, lr}
 8011e66:	2300      	movs	r3, #0
 8011e68:	4c06      	ldr	r4, [pc, #24]	; (8011e84 <_kill_r+0x20>)
 8011e6a:	4605      	mov	r5, r0
 8011e6c:	4608      	mov	r0, r1
 8011e6e:	4611      	mov	r1, r2
 8011e70:	6023      	str	r3, [r4, #0]
 8011e72:	f7fa f890 	bl	800bf96 <_kill>
 8011e76:	1c43      	adds	r3, r0, #1
 8011e78:	d102      	bne.n	8011e80 <_kill_r+0x1c>
 8011e7a:	6823      	ldr	r3, [r4, #0]
 8011e7c:	b103      	cbz	r3, 8011e80 <_kill_r+0x1c>
 8011e7e:	602b      	str	r3, [r5, #0]
 8011e80:	bd38      	pop	{r3, r4, r5, pc}
 8011e82:	bf00      	nop
 8011e84:	20000858 	.word	0x20000858

08011e88 <_getpid_r>:
 8011e88:	f7fa b87e 	b.w	800bf88 <_getpid>

08011e8c <sniprintf>:
 8011e8c:	b40c      	push	{r2, r3}
 8011e8e:	b530      	push	{r4, r5, lr}
 8011e90:	4b17      	ldr	r3, [pc, #92]	; (8011ef0 <sniprintf+0x64>)
 8011e92:	1e0c      	subs	r4, r1, #0
 8011e94:	b09d      	sub	sp, #116	; 0x74
 8011e96:	681d      	ldr	r5, [r3, #0]
 8011e98:	da08      	bge.n	8011eac <sniprintf+0x20>
 8011e9a:	238b      	movs	r3, #139	; 0x8b
 8011e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8011ea0:	602b      	str	r3, [r5, #0]
 8011ea2:	b01d      	add	sp, #116	; 0x74
 8011ea4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011ea8:	b002      	add	sp, #8
 8011eaa:	4770      	bx	lr
 8011eac:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011eb0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011eb4:	bf0c      	ite	eq
 8011eb6:	4623      	moveq	r3, r4
 8011eb8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011ebc:	9304      	str	r3, [sp, #16]
 8011ebe:	9307      	str	r3, [sp, #28]
 8011ec0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011ec4:	9002      	str	r0, [sp, #8]
 8011ec6:	9006      	str	r0, [sp, #24]
 8011ec8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011ecc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011ece:	ab21      	add	r3, sp, #132	; 0x84
 8011ed0:	a902      	add	r1, sp, #8
 8011ed2:	4628      	mov	r0, r5
 8011ed4:	9301      	str	r3, [sp, #4]
 8011ed6:	f000 f949 	bl	801216c <_svfiprintf_r>
 8011eda:	1c43      	adds	r3, r0, #1
 8011edc:	bfbc      	itt	lt
 8011ede:	238b      	movlt	r3, #139	; 0x8b
 8011ee0:	602b      	strlt	r3, [r5, #0]
 8011ee2:	2c00      	cmp	r4, #0
 8011ee4:	d0dd      	beq.n	8011ea2 <sniprintf+0x16>
 8011ee6:	2200      	movs	r2, #0
 8011ee8:	9b02      	ldr	r3, [sp, #8]
 8011eea:	701a      	strb	r2, [r3, #0]
 8011eec:	e7d9      	b.n	8011ea2 <sniprintf+0x16>
 8011eee:	bf00      	nop
 8011ef0:	200000b8 	.word	0x200000b8

08011ef4 <_strtoul_l.isra.0>:
 8011ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ef8:	4680      	mov	r8, r0
 8011efa:	4689      	mov	r9, r1
 8011efc:	4692      	mov	sl, r2
 8011efe:	461e      	mov	r6, r3
 8011f00:	460f      	mov	r7, r1
 8011f02:	463d      	mov	r5, r7
 8011f04:	9808      	ldr	r0, [sp, #32]
 8011f06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011f0a:	f000 f8bd 	bl	8012088 <__locale_ctype_ptr_l>
 8011f0e:	4420      	add	r0, r4
 8011f10:	7843      	ldrb	r3, [r0, #1]
 8011f12:	f013 0308 	ands.w	r3, r3, #8
 8011f16:	d130      	bne.n	8011f7a <_strtoul_l.isra.0+0x86>
 8011f18:	2c2d      	cmp	r4, #45	; 0x2d
 8011f1a:	d130      	bne.n	8011f7e <_strtoul_l.isra.0+0x8a>
 8011f1c:	2101      	movs	r1, #1
 8011f1e:	787c      	ldrb	r4, [r7, #1]
 8011f20:	1cbd      	adds	r5, r7, #2
 8011f22:	2e00      	cmp	r6, #0
 8011f24:	d05c      	beq.n	8011fe0 <_strtoul_l.isra.0+0xec>
 8011f26:	2e10      	cmp	r6, #16
 8011f28:	d109      	bne.n	8011f3e <_strtoul_l.isra.0+0x4a>
 8011f2a:	2c30      	cmp	r4, #48	; 0x30
 8011f2c:	d107      	bne.n	8011f3e <_strtoul_l.isra.0+0x4a>
 8011f2e:	782b      	ldrb	r3, [r5, #0]
 8011f30:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011f34:	2b58      	cmp	r3, #88	; 0x58
 8011f36:	d14e      	bne.n	8011fd6 <_strtoul_l.isra.0+0xe2>
 8011f38:	2610      	movs	r6, #16
 8011f3a:	786c      	ldrb	r4, [r5, #1]
 8011f3c:	3502      	adds	r5, #2
 8011f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8011f42:	fbb2 f2f6 	udiv	r2, r2, r6
 8011f46:	2300      	movs	r3, #0
 8011f48:	fb06 fc02 	mul.w	ip, r6, r2
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	ea6f 0c0c 	mvn.w	ip, ip
 8011f52:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8011f56:	2f09      	cmp	r7, #9
 8011f58:	d817      	bhi.n	8011f8a <_strtoul_l.isra.0+0x96>
 8011f5a:	463c      	mov	r4, r7
 8011f5c:	42a6      	cmp	r6, r4
 8011f5e:	dd23      	ble.n	8011fa8 <_strtoul_l.isra.0+0xb4>
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	db1e      	blt.n	8011fa2 <_strtoul_l.isra.0+0xae>
 8011f64:	4282      	cmp	r2, r0
 8011f66:	d31c      	bcc.n	8011fa2 <_strtoul_l.isra.0+0xae>
 8011f68:	d101      	bne.n	8011f6e <_strtoul_l.isra.0+0x7a>
 8011f6a:	45a4      	cmp	ip, r4
 8011f6c:	db19      	blt.n	8011fa2 <_strtoul_l.isra.0+0xae>
 8011f6e:	2301      	movs	r3, #1
 8011f70:	fb00 4006 	mla	r0, r0, r6, r4
 8011f74:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011f78:	e7eb      	b.n	8011f52 <_strtoul_l.isra.0+0x5e>
 8011f7a:	462f      	mov	r7, r5
 8011f7c:	e7c1      	b.n	8011f02 <_strtoul_l.isra.0+0xe>
 8011f7e:	2c2b      	cmp	r4, #43	; 0x2b
 8011f80:	bf04      	itt	eq
 8011f82:	1cbd      	addeq	r5, r7, #2
 8011f84:	787c      	ldrbeq	r4, [r7, #1]
 8011f86:	4619      	mov	r1, r3
 8011f88:	e7cb      	b.n	8011f22 <_strtoul_l.isra.0+0x2e>
 8011f8a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8011f8e:	2f19      	cmp	r7, #25
 8011f90:	d801      	bhi.n	8011f96 <_strtoul_l.isra.0+0xa2>
 8011f92:	3c37      	subs	r4, #55	; 0x37
 8011f94:	e7e2      	b.n	8011f5c <_strtoul_l.isra.0+0x68>
 8011f96:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8011f9a:	2f19      	cmp	r7, #25
 8011f9c:	d804      	bhi.n	8011fa8 <_strtoul_l.isra.0+0xb4>
 8011f9e:	3c57      	subs	r4, #87	; 0x57
 8011fa0:	e7dc      	b.n	8011f5c <_strtoul_l.isra.0+0x68>
 8011fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8011fa6:	e7e5      	b.n	8011f74 <_strtoul_l.isra.0+0x80>
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	da09      	bge.n	8011fc0 <_strtoul_l.isra.0+0xcc>
 8011fac:	2322      	movs	r3, #34	; 0x22
 8011fae:	f04f 30ff 	mov.w	r0, #4294967295
 8011fb2:	f8c8 3000 	str.w	r3, [r8]
 8011fb6:	f1ba 0f00 	cmp.w	sl, #0
 8011fba:	d107      	bne.n	8011fcc <_strtoul_l.isra.0+0xd8>
 8011fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fc0:	b101      	cbz	r1, 8011fc4 <_strtoul_l.isra.0+0xd0>
 8011fc2:	4240      	negs	r0, r0
 8011fc4:	f1ba 0f00 	cmp.w	sl, #0
 8011fc8:	d0f8      	beq.n	8011fbc <_strtoul_l.isra.0+0xc8>
 8011fca:	b10b      	cbz	r3, 8011fd0 <_strtoul_l.isra.0+0xdc>
 8011fcc:	f105 39ff 	add.w	r9, r5, #4294967295
 8011fd0:	f8ca 9000 	str.w	r9, [sl]
 8011fd4:	e7f2      	b.n	8011fbc <_strtoul_l.isra.0+0xc8>
 8011fd6:	2430      	movs	r4, #48	; 0x30
 8011fd8:	2e00      	cmp	r6, #0
 8011fda:	d1b0      	bne.n	8011f3e <_strtoul_l.isra.0+0x4a>
 8011fdc:	2608      	movs	r6, #8
 8011fde:	e7ae      	b.n	8011f3e <_strtoul_l.isra.0+0x4a>
 8011fe0:	2c30      	cmp	r4, #48	; 0x30
 8011fe2:	d0a4      	beq.n	8011f2e <_strtoul_l.isra.0+0x3a>
 8011fe4:	260a      	movs	r6, #10
 8011fe6:	e7aa      	b.n	8011f3e <_strtoul_l.isra.0+0x4a>

08011fe8 <strtoul>:
 8011fe8:	4b08      	ldr	r3, [pc, #32]	; (801200c <strtoul+0x24>)
 8011fea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011fec:	681c      	ldr	r4, [r3, #0]
 8011fee:	4d08      	ldr	r5, [pc, #32]	; (8012010 <strtoul+0x28>)
 8011ff0:	6a23      	ldr	r3, [r4, #32]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	bf08      	it	eq
 8011ff6:	462b      	moveq	r3, r5
 8011ff8:	9300      	str	r3, [sp, #0]
 8011ffa:	4613      	mov	r3, r2
 8011ffc:	460a      	mov	r2, r1
 8011ffe:	4601      	mov	r1, r0
 8012000:	4620      	mov	r0, r4
 8012002:	f7ff ff77 	bl	8011ef4 <_strtoul_l.isra.0>
 8012006:	b003      	add	sp, #12
 8012008:	bd30      	pop	{r4, r5, pc}
 801200a:	bf00      	nop
 801200c:	200000b8 	.word	0x200000b8
 8012010:	2000011c 	.word	0x2000011c

08012014 <_vsniprintf_r>:
 8012014:	b530      	push	{r4, r5, lr}
 8012016:	1e14      	subs	r4, r2, #0
 8012018:	4605      	mov	r5, r0
 801201a:	b09b      	sub	sp, #108	; 0x6c
 801201c:	4618      	mov	r0, r3
 801201e:	da05      	bge.n	801202c <_vsniprintf_r+0x18>
 8012020:	238b      	movs	r3, #139	; 0x8b
 8012022:	f04f 30ff 	mov.w	r0, #4294967295
 8012026:	602b      	str	r3, [r5, #0]
 8012028:	b01b      	add	sp, #108	; 0x6c
 801202a:	bd30      	pop	{r4, r5, pc}
 801202c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012030:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012034:	bf0c      	ite	eq
 8012036:	4623      	moveq	r3, r4
 8012038:	f104 33ff 	addne.w	r3, r4, #4294967295
 801203c:	9302      	str	r3, [sp, #8]
 801203e:	9305      	str	r3, [sp, #20]
 8012040:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012044:	9100      	str	r1, [sp, #0]
 8012046:	9104      	str	r1, [sp, #16]
 8012048:	f8ad 300e 	strh.w	r3, [sp, #14]
 801204c:	4602      	mov	r2, r0
 801204e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012050:	4669      	mov	r1, sp
 8012052:	4628      	mov	r0, r5
 8012054:	f000 f88a 	bl	801216c <_svfiprintf_r>
 8012058:	1c43      	adds	r3, r0, #1
 801205a:	bfbc      	itt	lt
 801205c:	238b      	movlt	r3, #139	; 0x8b
 801205e:	602b      	strlt	r3, [r5, #0]
 8012060:	2c00      	cmp	r4, #0
 8012062:	d0e1      	beq.n	8012028 <_vsniprintf_r+0x14>
 8012064:	2200      	movs	r2, #0
 8012066:	9b00      	ldr	r3, [sp, #0]
 8012068:	701a      	strb	r2, [r3, #0]
 801206a:	e7dd      	b.n	8012028 <_vsniprintf_r+0x14>

0801206c <vsniprintf>:
 801206c:	b507      	push	{r0, r1, r2, lr}
 801206e:	9300      	str	r3, [sp, #0]
 8012070:	4613      	mov	r3, r2
 8012072:	460a      	mov	r2, r1
 8012074:	4601      	mov	r1, r0
 8012076:	4803      	ldr	r0, [pc, #12]	; (8012084 <vsniprintf+0x18>)
 8012078:	6800      	ldr	r0, [r0, #0]
 801207a:	f7ff ffcb 	bl	8012014 <_vsniprintf_r>
 801207e:	b003      	add	sp, #12
 8012080:	f85d fb04 	ldr.w	pc, [sp], #4
 8012084:	200000b8 	.word	0x200000b8

08012088 <__locale_ctype_ptr_l>:
 8012088:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801208c:	4770      	bx	lr

0801208e <__ascii_mbtowc>:
 801208e:	b082      	sub	sp, #8
 8012090:	b901      	cbnz	r1, 8012094 <__ascii_mbtowc+0x6>
 8012092:	a901      	add	r1, sp, #4
 8012094:	b142      	cbz	r2, 80120a8 <__ascii_mbtowc+0x1a>
 8012096:	b14b      	cbz	r3, 80120ac <__ascii_mbtowc+0x1e>
 8012098:	7813      	ldrb	r3, [r2, #0]
 801209a:	600b      	str	r3, [r1, #0]
 801209c:	7812      	ldrb	r2, [r2, #0]
 801209e:	1c10      	adds	r0, r2, #0
 80120a0:	bf18      	it	ne
 80120a2:	2001      	movne	r0, #1
 80120a4:	b002      	add	sp, #8
 80120a6:	4770      	bx	lr
 80120a8:	4610      	mov	r0, r2
 80120aa:	e7fb      	b.n	80120a4 <__ascii_mbtowc+0x16>
 80120ac:	f06f 0001 	mvn.w	r0, #1
 80120b0:	e7f8      	b.n	80120a4 <__ascii_mbtowc+0x16>

080120b2 <__malloc_lock>:
 80120b2:	4770      	bx	lr

080120b4 <__malloc_unlock>:
 80120b4:	4770      	bx	lr

080120b6 <__ssputs_r>:
 80120b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120ba:	688e      	ldr	r6, [r1, #8]
 80120bc:	4682      	mov	sl, r0
 80120be:	429e      	cmp	r6, r3
 80120c0:	460c      	mov	r4, r1
 80120c2:	4690      	mov	r8, r2
 80120c4:	4699      	mov	r9, r3
 80120c6:	d837      	bhi.n	8012138 <__ssputs_r+0x82>
 80120c8:	898a      	ldrh	r2, [r1, #12]
 80120ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80120ce:	d031      	beq.n	8012134 <__ssputs_r+0x7e>
 80120d0:	2302      	movs	r3, #2
 80120d2:	6825      	ldr	r5, [r4, #0]
 80120d4:	6909      	ldr	r1, [r1, #16]
 80120d6:	1a6f      	subs	r7, r5, r1
 80120d8:	6965      	ldr	r5, [r4, #20]
 80120da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80120de:	fb95 f5f3 	sdiv	r5, r5, r3
 80120e2:	f109 0301 	add.w	r3, r9, #1
 80120e6:	443b      	add	r3, r7
 80120e8:	429d      	cmp	r5, r3
 80120ea:	bf38      	it	cc
 80120ec:	461d      	movcc	r5, r3
 80120ee:	0553      	lsls	r3, r2, #21
 80120f0:	d530      	bpl.n	8012154 <__ssputs_r+0x9e>
 80120f2:	4629      	mov	r1, r5
 80120f4:	f7ff fe1c 	bl	8011d30 <_malloc_r>
 80120f8:	4606      	mov	r6, r0
 80120fa:	b950      	cbnz	r0, 8012112 <__ssputs_r+0x5c>
 80120fc:	230c      	movs	r3, #12
 80120fe:	f04f 30ff 	mov.w	r0, #4294967295
 8012102:	f8ca 3000 	str.w	r3, [sl]
 8012106:	89a3      	ldrh	r3, [r4, #12]
 8012108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801210c:	81a3      	strh	r3, [r4, #12]
 801210e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012112:	463a      	mov	r2, r7
 8012114:	6921      	ldr	r1, [r4, #16]
 8012116:	f7ff fd92 	bl	8011c3e <memcpy>
 801211a:	89a3      	ldrh	r3, [r4, #12]
 801211c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012124:	81a3      	strh	r3, [r4, #12]
 8012126:	6126      	str	r6, [r4, #16]
 8012128:	443e      	add	r6, r7
 801212a:	6026      	str	r6, [r4, #0]
 801212c:	464e      	mov	r6, r9
 801212e:	6165      	str	r5, [r4, #20]
 8012130:	1bed      	subs	r5, r5, r7
 8012132:	60a5      	str	r5, [r4, #8]
 8012134:	454e      	cmp	r6, r9
 8012136:	d900      	bls.n	801213a <__ssputs_r+0x84>
 8012138:	464e      	mov	r6, r9
 801213a:	4632      	mov	r2, r6
 801213c:	4641      	mov	r1, r8
 801213e:	6820      	ldr	r0, [r4, #0]
 8012140:	f7ff fd88 	bl	8011c54 <memmove>
 8012144:	68a3      	ldr	r3, [r4, #8]
 8012146:	2000      	movs	r0, #0
 8012148:	1b9b      	subs	r3, r3, r6
 801214a:	60a3      	str	r3, [r4, #8]
 801214c:	6823      	ldr	r3, [r4, #0]
 801214e:	441e      	add	r6, r3
 8012150:	6026      	str	r6, [r4, #0]
 8012152:	e7dc      	b.n	801210e <__ssputs_r+0x58>
 8012154:	462a      	mov	r2, r5
 8012156:	f000 fa96 	bl	8012686 <_realloc_r>
 801215a:	4606      	mov	r6, r0
 801215c:	2800      	cmp	r0, #0
 801215e:	d1e2      	bne.n	8012126 <__ssputs_r+0x70>
 8012160:	6921      	ldr	r1, [r4, #16]
 8012162:	4650      	mov	r0, sl
 8012164:	f7ff fd98 	bl	8011c98 <_free_r>
 8012168:	e7c8      	b.n	80120fc <__ssputs_r+0x46>
	...

0801216c <_svfiprintf_r>:
 801216c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012170:	461d      	mov	r5, r3
 8012172:	898b      	ldrh	r3, [r1, #12]
 8012174:	b09d      	sub	sp, #116	; 0x74
 8012176:	061f      	lsls	r7, r3, #24
 8012178:	4680      	mov	r8, r0
 801217a:	460c      	mov	r4, r1
 801217c:	4616      	mov	r6, r2
 801217e:	d50f      	bpl.n	80121a0 <_svfiprintf_r+0x34>
 8012180:	690b      	ldr	r3, [r1, #16]
 8012182:	b96b      	cbnz	r3, 80121a0 <_svfiprintf_r+0x34>
 8012184:	2140      	movs	r1, #64	; 0x40
 8012186:	f7ff fdd3 	bl	8011d30 <_malloc_r>
 801218a:	6020      	str	r0, [r4, #0]
 801218c:	6120      	str	r0, [r4, #16]
 801218e:	b928      	cbnz	r0, 801219c <_svfiprintf_r+0x30>
 8012190:	230c      	movs	r3, #12
 8012192:	f8c8 3000 	str.w	r3, [r8]
 8012196:	f04f 30ff 	mov.w	r0, #4294967295
 801219a:	e0c8      	b.n	801232e <_svfiprintf_r+0x1c2>
 801219c:	2340      	movs	r3, #64	; 0x40
 801219e:	6163      	str	r3, [r4, #20]
 80121a0:	2300      	movs	r3, #0
 80121a2:	9309      	str	r3, [sp, #36]	; 0x24
 80121a4:	2320      	movs	r3, #32
 80121a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80121aa:	2330      	movs	r3, #48	; 0x30
 80121ac:	f04f 0b01 	mov.w	fp, #1
 80121b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80121b4:	9503      	str	r5, [sp, #12]
 80121b6:	4637      	mov	r7, r6
 80121b8:	463d      	mov	r5, r7
 80121ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80121be:	b10b      	cbz	r3, 80121c4 <_svfiprintf_r+0x58>
 80121c0:	2b25      	cmp	r3, #37	; 0x25
 80121c2:	d13e      	bne.n	8012242 <_svfiprintf_r+0xd6>
 80121c4:	ebb7 0a06 	subs.w	sl, r7, r6
 80121c8:	d00b      	beq.n	80121e2 <_svfiprintf_r+0x76>
 80121ca:	4653      	mov	r3, sl
 80121cc:	4632      	mov	r2, r6
 80121ce:	4621      	mov	r1, r4
 80121d0:	4640      	mov	r0, r8
 80121d2:	f7ff ff70 	bl	80120b6 <__ssputs_r>
 80121d6:	3001      	adds	r0, #1
 80121d8:	f000 80a4 	beq.w	8012324 <_svfiprintf_r+0x1b8>
 80121dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121de:	4453      	add	r3, sl
 80121e0:	9309      	str	r3, [sp, #36]	; 0x24
 80121e2:	783b      	ldrb	r3, [r7, #0]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	f000 809d 	beq.w	8012324 <_svfiprintf_r+0x1b8>
 80121ea:	2300      	movs	r3, #0
 80121ec:	f04f 32ff 	mov.w	r2, #4294967295
 80121f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80121f4:	9304      	str	r3, [sp, #16]
 80121f6:	9307      	str	r3, [sp, #28]
 80121f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80121fc:	931a      	str	r3, [sp, #104]	; 0x68
 80121fe:	462f      	mov	r7, r5
 8012200:	2205      	movs	r2, #5
 8012202:	f817 1b01 	ldrb.w	r1, [r7], #1
 8012206:	4850      	ldr	r0, [pc, #320]	; (8012348 <_svfiprintf_r+0x1dc>)
 8012208:	f7ff fcfc 	bl	8011c04 <memchr>
 801220c:	9b04      	ldr	r3, [sp, #16]
 801220e:	b9d0      	cbnz	r0, 8012246 <_svfiprintf_r+0xda>
 8012210:	06d9      	lsls	r1, r3, #27
 8012212:	bf44      	itt	mi
 8012214:	2220      	movmi	r2, #32
 8012216:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801221a:	071a      	lsls	r2, r3, #28
 801221c:	bf44      	itt	mi
 801221e:	222b      	movmi	r2, #43	; 0x2b
 8012220:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012224:	782a      	ldrb	r2, [r5, #0]
 8012226:	2a2a      	cmp	r2, #42	; 0x2a
 8012228:	d015      	beq.n	8012256 <_svfiprintf_r+0xea>
 801222a:	462f      	mov	r7, r5
 801222c:	2000      	movs	r0, #0
 801222e:	250a      	movs	r5, #10
 8012230:	9a07      	ldr	r2, [sp, #28]
 8012232:	4639      	mov	r1, r7
 8012234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012238:	3b30      	subs	r3, #48	; 0x30
 801223a:	2b09      	cmp	r3, #9
 801223c:	d94d      	bls.n	80122da <_svfiprintf_r+0x16e>
 801223e:	b1b8      	cbz	r0, 8012270 <_svfiprintf_r+0x104>
 8012240:	e00f      	b.n	8012262 <_svfiprintf_r+0xf6>
 8012242:	462f      	mov	r7, r5
 8012244:	e7b8      	b.n	80121b8 <_svfiprintf_r+0x4c>
 8012246:	4a40      	ldr	r2, [pc, #256]	; (8012348 <_svfiprintf_r+0x1dc>)
 8012248:	463d      	mov	r5, r7
 801224a:	1a80      	subs	r0, r0, r2
 801224c:	fa0b f000 	lsl.w	r0, fp, r0
 8012250:	4318      	orrs	r0, r3
 8012252:	9004      	str	r0, [sp, #16]
 8012254:	e7d3      	b.n	80121fe <_svfiprintf_r+0x92>
 8012256:	9a03      	ldr	r2, [sp, #12]
 8012258:	1d11      	adds	r1, r2, #4
 801225a:	6812      	ldr	r2, [r2, #0]
 801225c:	9103      	str	r1, [sp, #12]
 801225e:	2a00      	cmp	r2, #0
 8012260:	db01      	blt.n	8012266 <_svfiprintf_r+0xfa>
 8012262:	9207      	str	r2, [sp, #28]
 8012264:	e004      	b.n	8012270 <_svfiprintf_r+0x104>
 8012266:	4252      	negs	r2, r2
 8012268:	f043 0302 	orr.w	r3, r3, #2
 801226c:	9207      	str	r2, [sp, #28]
 801226e:	9304      	str	r3, [sp, #16]
 8012270:	783b      	ldrb	r3, [r7, #0]
 8012272:	2b2e      	cmp	r3, #46	; 0x2e
 8012274:	d10c      	bne.n	8012290 <_svfiprintf_r+0x124>
 8012276:	787b      	ldrb	r3, [r7, #1]
 8012278:	2b2a      	cmp	r3, #42	; 0x2a
 801227a:	d133      	bne.n	80122e4 <_svfiprintf_r+0x178>
 801227c:	9b03      	ldr	r3, [sp, #12]
 801227e:	3702      	adds	r7, #2
 8012280:	1d1a      	adds	r2, r3, #4
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	9203      	str	r2, [sp, #12]
 8012286:	2b00      	cmp	r3, #0
 8012288:	bfb8      	it	lt
 801228a:	f04f 33ff 	movlt.w	r3, #4294967295
 801228e:	9305      	str	r3, [sp, #20]
 8012290:	4d2e      	ldr	r5, [pc, #184]	; (801234c <_svfiprintf_r+0x1e0>)
 8012292:	2203      	movs	r2, #3
 8012294:	7839      	ldrb	r1, [r7, #0]
 8012296:	4628      	mov	r0, r5
 8012298:	f7ff fcb4 	bl	8011c04 <memchr>
 801229c:	b138      	cbz	r0, 80122ae <_svfiprintf_r+0x142>
 801229e:	2340      	movs	r3, #64	; 0x40
 80122a0:	1b40      	subs	r0, r0, r5
 80122a2:	fa03 f000 	lsl.w	r0, r3, r0
 80122a6:	9b04      	ldr	r3, [sp, #16]
 80122a8:	3701      	adds	r7, #1
 80122aa:	4303      	orrs	r3, r0
 80122ac:	9304      	str	r3, [sp, #16]
 80122ae:	7839      	ldrb	r1, [r7, #0]
 80122b0:	2206      	movs	r2, #6
 80122b2:	4827      	ldr	r0, [pc, #156]	; (8012350 <_svfiprintf_r+0x1e4>)
 80122b4:	1c7e      	adds	r6, r7, #1
 80122b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80122ba:	f7ff fca3 	bl	8011c04 <memchr>
 80122be:	2800      	cmp	r0, #0
 80122c0:	d038      	beq.n	8012334 <_svfiprintf_r+0x1c8>
 80122c2:	4b24      	ldr	r3, [pc, #144]	; (8012354 <_svfiprintf_r+0x1e8>)
 80122c4:	bb13      	cbnz	r3, 801230c <_svfiprintf_r+0x1a0>
 80122c6:	9b03      	ldr	r3, [sp, #12]
 80122c8:	3307      	adds	r3, #7
 80122ca:	f023 0307 	bic.w	r3, r3, #7
 80122ce:	3308      	adds	r3, #8
 80122d0:	9303      	str	r3, [sp, #12]
 80122d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122d4:	444b      	add	r3, r9
 80122d6:	9309      	str	r3, [sp, #36]	; 0x24
 80122d8:	e76d      	b.n	80121b6 <_svfiprintf_r+0x4a>
 80122da:	fb05 3202 	mla	r2, r5, r2, r3
 80122de:	2001      	movs	r0, #1
 80122e0:	460f      	mov	r7, r1
 80122e2:	e7a6      	b.n	8012232 <_svfiprintf_r+0xc6>
 80122e4:	2300      	movs	r3, #0
 80122e6:	250a      	movs	r5, #10
 80122e8:	4619      	mov	r1, r3
 80122ea:	3701      	adds	r7, #1
 80122ec:	9305      	str	r3, [sp, #20]
 80122ee:	4638      	mov	r0, r7
 80122f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80122f4:	3a30      	subs	r2, #48	; 0x30
 80122f6:	2a09      	cmp	r2, #9
 80122f8:	d903      	bls.n	8012302 <_svfiprintf_r+0x196>
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d0c8      	beq.n	8012290 <_svfiprintf_r+0x124>
 80122fe:	9105      	str	r1, [sp, #20]
 8012300:	e7c6      	b.n	8012290 <_svfiprintf_r+0x124>
 8012302:	fb05 2101 	mla	r1, r5, r1, r2
 8012306:	2301      	movs	r3, #1
 8012308:	4607      	mov	r7, r0
 801230a:	e7f0      	b.n	80122ee <_svfiprintf_r+0x182>
 801230c:	ab03      	add	r3, sp, #12
 801230e:	9300      	str	r3, [sp, #0]
 8012310:	4622      	mov	r2, r4
 8012312:	4b11      	ldr	r3, [pc, #68]	; (8012358 <_svfiprintf_r+0x1ec>)
 8012314:	a904      	add	r1, sp, #16
 8012316:	4640      	mov	r0, r8
 8012318:	f3af 8000 	nop.w
 801231c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012320:	4681      	mov	r9, r0
 8012322:	d1d6      	bne.n	80122d2 <_svfiprintf_r+0x166>
 8012324:	89a3      	ldrh	r3, [r4, #12]
 8012326:	065b      	lsls	r3, r3, #25
 8012328:	f53f af35 	bmi.w	8012196 <_svfiprintf_r+0x2a>
 801232c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801232e:	b01d      	add	sp, #116	; 0x74
 8012330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012334:	ab03      	add	r3, sp, #12
 8012336:	9300      	str	r3, [sp, #0]
 8012338:	4622      	mov	r2, r4
 801233a:	4b07      	ldr	r3, [pc, #28]	; (8012358 <_svfiprintf_r+0x1ec>)
 801233c:	a904      	add	r1, sp, #16
 801233e:	4640      	mov	r0, r8
 8012340:	f000 f882 	bl	8012448 <_printf_i>
 8012344:	e7ea      	b.n	801231c <_svfiprintf_r+0x1b0>
 8012346:	bf00      	nop
 8012348:	08015bbe 	.word	0x08015bbe
 801234c:	08015bc4 	.word	0x08015bc4
 8012350:	08015bc8 	.word	0x08015bc8
 8012354:	00000000 	.word	0x00000000
 8012358:	080120b7 	.word	0x080120b7

0801235c <_printf_common>:
 801235c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012360:	4691      	mov	r9, r2
 8012362:	461f      	mov	r7, r3
 8012364:	688a      	ldr	r2, [r1, #8]
 8012366:	690b      	ldr	r3, [r1, #16]
 8012368:	4606      	mov	r6, r0
 801236a:	4293      	cmp	r3, r2
 801236c:	bfb8      	it	lt
 801236e:	4613      	movlt	r3, r2
 8012370:	f8c9 3000 	str.w	r3, [r9]
 8012374:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012378:	460c      	mov	r4, r1
 801237a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801237e:	b112      	cbz	r2, 8012386 <_printf_common+0x2a>
 8012380:	3301      	adds	r3, #1
 8012382:	f8c9 3000 	str.w	r3, [r9]
 8012386:	6823      	ldr	r3, [r4, #0]
 8012388:	0699      	lsls	r1, r3, #26
 801238a:	bf42      	ittt	mi
 801238c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012390:	3302      	addmi	r3, #2
 8012392:	f8c9 3000 	strmi.w	r3, [r9]
 8012396:	6825      	ldr	r5, [r4, #0]
 8012398:	f015 0506 	ands.w	r5, r5, #6
 801239c:	d107      	bne.n	80123ae <_printf_common+0x52>
 801239e:	f104 0a19 	add.w	sl, r4, #25
 80123a2:	68e3      	ldr	r3, [r4, #12]
 80123a4:	f8d9 2000 	ldr.w	r2, [r9]
 80123a8:	1a9b      	subs	r3, r3, r2
 80123aa:	42ab      	cmp	r3, r5
 80123ac:	dc29      	bgt.n	8012402 <_printf_common+0xa6>
 80123ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80123b2:	6822      	ldr	r2, [r4, #0]
 80123b4:	3300      	adds	r3, #0
 80123b6:	bf18      	it	ne
 80123b8:	2301      	movne	r3, #1
 80123ba:	0692      	lsls	r2, r2, #26
 80123bc:	d42e      	bmi.n	801241c <_printf_common+0xc0>
 80123be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80123c2:	4639      	mov	r1, r7
 80123c4:	4630      	mov	r0, r6
 80123c6:	47c0      	blx	r8
 80123c8:	3001      	adds	r0, #1
 80123ca:	d021      	beq.n	8012410 <_printf_common+0xb4>
 80123cc:	6823      	ldr	r3, [r4, #0]
 80123ce:	68e5      	ldr	r5, [r4, #12]
 80123d0:	f003 0306 	and.w	r3, r3, #6
 80123d4:	2b04      	cmp	r3, #4
 80123d6:	bf18      	it	ne
 80123d8:	2500      	movne	r5, #0
 80123da:	f8d9 2000 	ldr.w	r2, [r9]
 80123de:	f04f 0900 	mov.w	r9, #0
 80123e2:	bf08      	it	eq
 80123e4:	1aad      	subeq	r5, r5, r2
 80123e6:	68a3      	ldr	r3, [r4, #8]
 80123e8:	6922      	ldr	r2, [r4, #16]
 80123ea:	bf08      	it	eq
 80123ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80123f0:	4293      	cmp	r3, r2
 80123f2:	bfc4      	itt	gt
 80123f4:	1a9b      	subgt	r3, r3, r2
 80123f6:	18ed      	addgt	r5, r5, r3
 80123f8:	341a      	adds	r4, #26
 80123fa:	454d      	cmp	r5, r9
 80123fc:	d11a      	bne.n	8012434 <_printf_common+0xd8>
 80123fe:	2000      	movs	r0, #0
 8012400:	e008      	b.n	8012414 <_printf_common+0xb8>
 8012402:	2301      	movs	r3, #1
 8012404:	4652      	mov	r2, sl
 8012406:	4639      	mov	r1, r7
 8012408:	4630      	mov	r0, r6
 801240a:	47c0      	blx	r8
 801240c:	3001      	adds	r0, #1
 801240e:	d103      	bne.n	8012418 <_printf_common+0xbc>
 8012410:	f04f 30ff 	mov.w	r0, #4294967295
 8012414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012418:	3501      	adds	r5, #1
 801241a:	e7c2      	b.n	80123a2 <_printf_common+0x46>
 801241c:	2030      	movs	r0, #48	; 0x30
 801241e:	18e1      	adds	r1, r4, r3
 8012420:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012424:	1c5a      	adds	r2, r3, #1
 8012426:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801242a:	4422      	add	r2, r4
 801242c:	3302      	adds	r3, #2
 801242e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012432:	e7c4      	b.n	80123be <_printf_common+0x62>
 8012434:	2301      	movs	r3, #1
 8012436:	4622      	mov	r2, r4
 8012438:	4639      	mov	r1, r7
 801243a:	4630      	mov	r0, r6
 801243c:	47c0      	blx	r8
 801243e:	3001      	adds	r0, #1
 8012440:	d0e6      	beq.n	8012410 <_printf_common+0xb4>
 8012442:	f109 0901 	add.w	r9, r9, #1
 8012446:	e7d8      	b.n	80123fa <_printf_common+0x9e>

08012448 <_printf_i>:
 8012448:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801244c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012450:	460c      	mov	r4, r1
 8012452:	7e09      	ldrb	r1, [r1, #24]
 8012454:	b085      	sub	sp, #20
 8012456:	296e      	cmp	r1, #110	; 0x6e
 8012458:	4617      	mov	r7, r2
 801245a:	4606      	mov	r6, r0
 801245c:	4698      	mov	r8, r3
 801245e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012460:	f000 80b3 	beq.w	80125ca <_printf_i+0x182>
 8012464:	d822      	bhi.n	80124ac <_printf_i+0x64>
 8012466:	2963      	cmp	r1, #99	; 0x63
 8012468:	d036      	beq.n	80124d8 <_printf_i+0x90>
 801246a:	d80a      	bhi.n	8012482 <_printf_i+0x3a>
 801246c:	2900      	cmp	r1, #0
 801246e:	f000 80b9 	beq.w	80125e4 <_printf_i+0x19c>
 8012472:	2958      	cmp	r1, #88	; 0x58
 8012474:	f000 8083 	beq.w	801257e <_printf_i+0x136>
 8012478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801247c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012480:	e032      	b.n	80124e8 <_printf_i+0xa0>
 8012482:	2964      	cmp	r1, #100	; 0x64
 8012484:	d001      	beq.n	801248a <_printf_i+0x42>
 8012486:	2969      	cmp	r1, #105	; 0x69
 8012488:	d1f6      	bne.n	8012478 <_printf_i+0x30>
 801248a:	6820      	ldr	r0, [r4, #0]
 801248c:	6813      	ldr	r3, [r2, #0]
 801248e:	0605      	lsls	r5, r0, #24
 8012490:	f103 0104 	add.w	r1, r3, #4
 8012494:	d52a      	bpl.n	80124ec <_printf_i+0xa4>
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	6011      	str	r1, [r2, #0]
 801249a:	2b00      	cmp	r3, #0
 801249c:	da03      	bge.n	80124a6 <_printf_i+0x5e>
 801249e:	222d      	movs	r2, #45	; 0x2d
 80124a0:	425b      	negs	r3, r3
 80124a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80124a6:	486f      	ldr	r0, [pc, #444]	; (8012664 <_printf_i+0x21c>)
 80124a8:	220a      	movs	r2, #10
 80124aa:	e039      	b.n	8012520 <_printf_i+0xd8>
 80124ac:	2973      	cmp	r1, #115	; 0x73
 80124ae:	f000 809d 	beq.w	80125ec <_printf_i+0x1a4>
 80124b2:	d808      	bhi.n	80124c6 <_printf_i+0x7e>
 80124b4:	296f      	cmp	r1, #111	; 0x6f
 80124b6:	d020      	beq.n	80124fa <_printf_i+0xb2>
 80124b8:	2970      	cmp	r1, #112	; 0x70
 80124ba:	d1dd      	bne.n	8012478 <_printf_i+0x30>
 80124bc:	6823      	ldr	r3, [r4, #0]
 80124be:	f043 0320 	orr.w	r3, r3, #32
 80124c2:	6023      	str	r3, [r4, #0]
 80124c4:	e003      	b.n	80124ce <_printf_i+0x86>
 80124c6:	2975      	cmp	r1, #117	; 0x75
 80124c8:	d017      	beq.n	80124fa <_printf_i+0xb2>
 80124ca:	2978      	cmp	r1, #120	; 0x78
 80124cc:	d1d4      	bne.n	8012478 <_printf_i+0x30>
 80124ce:	2378      	movs	r3, #120	; 0x78
 80124d0:	4865      	ldr	r0, [pc, #404]	; (8012668 <_printf_i+0x220>)
 80124d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80124d6:	e055      	b.n	8012584 <_printf_i+0x13c>
 80124d8:	6813      	ldr	r3, [r2, #0]
 80124da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80124de:	1d19      	adds	r1, r3, #4
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	6011      	str	r1, [r2, #0]
 80124e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80124e8:	2301      	movs	r3, #1
 80124ea:	e08c      	b.n	8012606 <_printf_i+0x1be>
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80124f2:	6011      	str	r1, [r2, #0]
 80124f4:	bf18      	it	ne
 80124f6:	b21b      	sxthne	r3, r3
 80124f8:	e7cf      	b.n	801249a <_printf_i+0x52>
 80124fa:	6813      	ldr	r3, [r2, #0]
 80124fc:	6825      	ldr	r5, [r4, #0]
 80124fe:	1d18      	adds	r0, r3, #4
 8012500:	6010      	str	r0, [r2, #0]
 8012502:	0628      	lsls	r0, r5, #24
 8012504:	d501      	bpl.n	801250a <_printf_i+0xc2>
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	e002      	b.n	8012510 <_printf_i+0xc8>
 801250a:	0668      	lsls	r0, r5, #25
 801250c:	d5fb      	bpl.n	8012506 <_printf_i+0xbe>
 801250e:	881b      	ldrh	r3, [r3, #0]
 8012510:	296f      	cmp	r1, #111	; 0x6f
 8012512:	bf14      	ite	ne
 8012514:	220a      	movne	r2, #10
 8012516:	2208      	moveq	r2, #8
 8012518:	4852      	ldr	r0, [pc, #328]	; (8012664 <_printf_i+0x21c>)
 801251a:	2100      	movs	r1, #0
 801251c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012520:	6865      	ldr	r5, [r4, #4]
 8012522:	2d00      	cmp	r5, #0
 8012524:	60a5      	str	r5, [r4, #8]
 8012526:	f2c0 8095 	blt.w	8012654 <_printf_i+0x20c>
 801252a:	6821      	ldr	r1, [r4, #0]
 801252c:	f021 0104 	bic.w	r1, r1, #4
 8012530:	6021      	str	r1, [r4, #0]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d13d      	bne.n	80125b2 <_printf_i+0x16a>
 8012536:	2d00      	cmp	r5, #0
 8012538:	f040 808e 	bne.w	8012658 <_printf_i+0x210>
 801253c:	4665      	mov	r5, ip
 801253e:	2a08      	cmp	r2, #8
 8012540:	d10b      	bne.n	801255a <_printf_i+0x112>
 8012542:	6823      	ldr	r3, [r4, #0]
 8012544:	07db      	lsls	r3, r3, #31
 8012546:	d508      	bpl.n	801255a <_printf_i+0x112>
 8012548:	6923      	ldr	r3, [r4, #16]
 801254a:	6862      	ldr	r2, [r4, #4]
 801254c:	429a      	cmp	r2, r3
 801254e:	bfde      	ittt	le
 8012550:	2330      	movle	r3, #48	; 0x30
 8012552:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012556:	f105 35ff 	addle.w	r5, r5, #4294967295
 801255a:	ebac 0305 	sub.w	r3, ip, r5
 801255e:	6123      	str	r3, [r4, #16]
 8012560:	f8cd 8000 	str.w	r8, [sp]
 8012564:	463b      	mov	r3, r7
 8012566:	aa03      	add	r2, sp, #12
 8012568:	4621      	mov	r1, r4
 801256a:	4630      	mov	r0, r6
 801256c:	f7ff fef6 	bl	801235c <_printf_common>
 8012570:	3001      	adds	r0, #1
 8012572:	d14d      	bne.n	8012610 <_printf_i+0x1c8>
 8012574:	f04f 30ff 	mov.w	r0, #4294967295
 8012578:	b005      	add	sp, #20
 801257a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801257e:	4839      	ldr	r0, [pc, #228]	; (8012664 <_printf_i+0x21c>)
 8012580:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012584:	6813      	ldr	r3, [r2, #0]
 8012586:	6821      	ldr	r1, [r4, #0]
 8012588:	1d1d      	adds	r5, r3, #4
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	6015      	str	r5, [r2, #0]
 801258e:	060a      	lsls	r2, r1, #24
 8012590:	d50b      	bpl.n	80125aa <_printf_i+0x162>
 8012592:	07ca      	lsls	r2, r1, #31
 8012594:	bf44      	itt	mi
 8012596:	f041 0120 	orrmi.w	r1, r1, #32
 801259a:	6021      	strmi	r1, [r4, #0]
 801259c:	b91b      	cbnz	r3, 80125a6 <_printf_i+0x15e>
 801259e:	6822      	ldr	r2, [r4, #0]
 80125a0:	f022 0220 	bic.w	r2, r2, #32
 80125a4:	6022      	str	r2, [r4, #0]
 80125a6:	2210      	movs	r2, #16
 80125a8:	e7b7      	b.n	801251a <_printf_i+0xd2>
 80125aa:	064d      	lsls	r5, r1, #25
 80125ac:	bf48      	it	mi
 80125ae:	b29b      	uxthmi	r3, r3
 80125b0:	e7ef      	b.n	8012592 <_printf_i+0x14a>
 80125b2:	4665      	mov	r5, ip
 80125b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80125b8:	fb02 3311 	mls	r3, r2, r1, r3
 80125bc:	5cc3      	ldrb	r3, [r0, r3]
 80125be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80125c2:	460b      	mov	r3, r1
 80125c4:	2900      	cmp	r1, #0
 80125c6:	d1f5      	bne.n	80125b4 <_printf_i+0x16c>
 80125c8:	e7b9      	b.n	801253e <_printf_i+0xf6>
 80125ca:	6813      	ldr	r3, [r2, #0]
 80125cc:	6825      	ldr	r5, [r4, #0]
 80125ce:	1d18      	adds	r0, r3, #4
 80125d0:	6961      	ldr	r1, [r4, #20]
 80125d2:	6010      	str	r0, [r2, #0]
 80125d4:	0628      	lsls	r0, r5, #24
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	d501      	bpl.n	80125de <_printf_i+0x196>
 80125da:	6019      	str	r1, [r3, #0]
 80125dc:	e002      	b.n	80125e4 <_printf_i+0x19c>
 80125de:	066a      	lsls	r2, r5, #25
 80125e0:	d5fb      	bpl.n	80125da <_printf_i+0x192>
 80125e2:	8019      	strh	r1, [r3, #0]
 80125e4:	2300      	movs	r3, #0
 80125e6:	4665      	mov	r5, ip
 80125e8:	6123      	str	r3, [r4, #16]
 80125ea:	e7b9      	b.n	8012560 <_printf_i+0x118>
 80125ec:	6813      	ldr	r3, [r2, #0]
 80125ee:	1d19      	adds	r1, r3, #4
 80125f0:	6011      	str	r1, [r2, #0]
 80125f2:	681d      	ldr	r5, [r3, #0]
 80125f4:	6862      	ldr	r2, [r4, #4]
 80125f6:	2100      	movs	r1, #0
 80125f8:	4628      	mov	r0, r5
 80125fa:	f7ff fb03 	bl	8011c04 <memchr>
 80125fe:	b108      	cbz	r0, 8012604 <_printf_i+0x1bc>
 8012600:	1b40      	subs	r0, r0, r5
 8012602:	6060      	str	r0, [r4, #4]
 8012604:	6863      	ldr	r3, [r4, #4]
 8012606:	6123      	str	r3, [r4, #16]
 8012608:	2300      	movs	r3, #0
 801260a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801260e:	e7a7      	b.n	8012560 <_printf_i+0x118>
 8012610:	6923      	ldr	r3, [r4, #16]
 8012612:	462a      	mov	r2, r5
 8012614:	4639      	mov	r1, r7
 8012616:	4630      	mov	r0, r6
 8012618:	47c0      	blx	r8
 801261a:	3001      	adds	r0, #1
 801261c:	d0aa      	beq.n	8012574 <_printf_i+0x12c>
 801261e:	6823      	ldr	r3, [r4, #0]
 8012620:	079b      	lsls	r3, r3, #30
 8012622:	d413      	bmi.n	801264c <_printf_i+0x204>
 8012624:	68e0      	ldr	r0, [r4, #12]
 8012626:	9b03      	ldr	r3, [sp, #12]
 8012628:	4298      	cmp	r0, r3
 801262a:	bfb8      	it	lt
 801262c:	4618      	movlt	r0, r3
 801262e:	e7a3      	b.n	8012578 <_printf_i+0x130>
 8012630:	2301      	movs	r3, #1
 8012632:	464a      	mov	r2, r9
 8012634:	4639      	mov	r1, r7
 8012636:	4630      	mov	r0, r6
 8012638:	47c0      	blx	r8
 801263a:	3001      	adds	r0, #1
 801263c:	d09a      	beq.n	8012574 <_printf_i+0x12c>
 801263e:	3501      	adds	r5, #1
 8012640:	68e3      	ldr	r3, [r4, #12]
 8012642:	9a03      	ldr	r2, [sp, #12]
 8012644:	1a9b      	subs	r3, r3, r2
 8012646:	42ab      	cmp	r3, r5
 8012648:	dcf2      	bgt.n	8012630 <_printf_i+0x1e8>
 801264a:	e7eb      	b.n	8012624 <_printf_i+0x1dc>
 801264c:	2500      	movs	r5, #0
 801264e:	f104 0919 	add.w	r9, r4, #25
 8012652:	e7f5      	b.n	8012640 <_printf_i+0x1f8>
 8012654:	2b00      	cmp	r3, #0
 8012656:	d1ac      	bne.n	80125b2 <_printf_i+0x16a>
 8012658:	7803      	ldrb	r3, [r0, #0]
 801265a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801265e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012662:	e76c      	b.n	801253e <_printf_i+0xf6>
 8012664:	08015bcf 	.word	0x08015bcf
 8012668:	08015be0 	.word	0x08015be0

0801266c <__ascii_wctomb>:
 801266c:	b149      	cbz	r1, 8012682 <__ascii_wctomb+0x16>
 801266e:	2aff      	cmp	r2, #255	; 0xff
 8012670:	bf8b      	itete	hi
 8012672:	238a      	movhi	r3, #138	; 0x8a
 8012674:	700a      	strbls	r2, [r1, #0]
 8012676:	6003      	strhi	r3, [r0, #0]
 8012678:	2001      	movls	r0, #1
 801267a:	bf88      	it	hi
 801267c:	f04f 30ff 	movhi.w	r0, #4294967295
 8012680:	4770      	bx	lr
 8012682:	4608      	mov	r0, r1
 8012684:	4770      	bx	lr

08012686 <_realloc_r>:
 8012686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012688:	4607      	mov	r7, r0
 801268a:	4614      	mov	r4, r2
 801268c:	460e      	mov	r6, r1
 801268e:	b921      	cbnz	r1, 801269a <_realloc_r+0x14>
 8012690:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012694:	4611      	mov	r1, r2
 8012696:	f7ff bb4b 	b.w	8011d30 <_malloc_r>
 801269a:	b922      	cbnz	r2, 80126a6 <_realloc_r+0x20>
 801269c:	f7ff fafc 	bl	8011c98 <_free_r>
 80126a0:	4625      	mov	r5, r4
 80126a2:	4628      	mov	r0, r5
 80126a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126a6:	f000 f814 	bl	80126d2 <_malloc_usable_size_r>
 80126aa:	42a0      	cmp	r0, r4
 80126ac:	d20f      	bcs.n	80126ce <_realloc_r+0x48>
 80126ae:	4621      	mov	r1, r4
 80126b0:	4638      	mov	r0, r7
 80126b2:	f7ff fb3d 	bl	8011d30 <_malloc_r>
 80126b6:	4605      	mov	r5, r0
 80126b8:	2800      	cmp	r0, #0
 80126ba:	d0f2      	beq.n	80126a2 <_realloc_r+0x1c>
 80126bc:	4631      	mov	r1, r6
 80126be:	4622      	mov	r2, r4
 80126c0:	f7ff fabd 	bl	8011c3e <memcpy>
 80126c4:	4631      	mov	r1, r6
 80126c6:	4638      	mov	r0, r7
 80126c8:	f7ff fae6 	bl	8011c98 <_free_r>
 80126cc:	e7e9      	b.n	80126a2 <_realloc_r+0x1c>
 80126ce:	4635      	mov	r5, r6
 80126d0:	e7e7      	b.n	80126a2 <_realloc_r+0x1c>

080126d2 <_malloc_usable_size_r>:
 80126d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80126d6:	1f18      	subs	r0, r3, #4
 80126d8:	2b00      	cmp	r3, #0
 80126da:	bfbc      	itt	lt
 80126dc:	580b      	ldrlt	r3, [r1, r0]
 80126de:	18c0      	addlt	r0, r0, r3
 80126e0:	4770      	bx	lr
	...

080126e4 <_init>:
 80126e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126e6:	bf00      	nop
 80126e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80126ea:	bc08      	pop	{r3}
 80126ec:	469e      	mov	lr, r3
 80126ee:	4770      	bx	lr

080126f0 <_fini>:
 80126f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126f2:	bf00      	nop
 80126f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80126f6:	bc08      	pop	{r3}
 80126f8:	469e      	mov	lr, r3
 80126fa:	4770      	bx	lr


SmartDrayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000462c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  08004738  08004738  00014738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004aa8  08004aa8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004aa8  08004aa8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004aa8  08004aa8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004aa8  08004aa8  00014aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08004ab0  08004ab0  00014ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004ab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000070  08004b28  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08004b28  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005d645  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ddb  00000000  00000000  0007d6de  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012e8  00000000  00000000  000814c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001178  00000000  00000000  000827a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000059aa  00000000  00000000  00083920  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014a2d  00000000  00000000  000892ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000981ad  00000000  00000000  0009dcf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00135ea4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006574  00000000  00000000  00135f20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004720 	.word	0x08004720

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004720 	.word	0x08004720

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <_ZN11SerialDebug11writeSerialEv>:
 */

#include "SerialDebug.h"

void SerialDebug::writeSerial()
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	uint16_t BufferLen = serialBuffer.size();
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	4618      	mov	r0, r3
 8000168:	f004 f87c 	bl	8004264 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800016c:	4603      	mov	r3, r0
 800016e:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart1, (uint8_t *)serialBuffer.c_str(), BufferLen, SEND_TIMEOUT);
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	4618      	mov	r0, r3
 8000174:	f004 f90b 	bl	800438e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8000178:	4601      	mov	r1, r0
 800017a:	89fa      	ldrh	r2, [r7, #14]
 800017c:	2364      	movs	r3, #100	; 0x64
 800017e:	4803      	ldr	r0, [pc, #12]	; (800018c <_ZN11SerialDebug11writeSerialEv+0x30>)
 8000180:	f003 fb6a 	bl	8003858 <HAL_UART_Transmit>
}
 8000184:	bf00      	nop
 8000186:	3710      	adds	r7, #16
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}
 800018c:	200001d4 	.word	0x200001d4

08000190 <_ZN11SerialDebugC1Ev>:

SerialDebug::SerialDebug()
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	4618      	mov	r0, r3
 800019c:	f004 f84f 	bl	800423e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
{


}
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	4618      	mov	r0, r3
 80001a4:	3708      	adds	r7, #8
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
	...

080001ac <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void SerialDebug::sendDbgStr(std::string DbgStr)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
 80001b4:	6039      	str	r1, [r7, #0]
	if(!DbgStr.empty())
 80001b6:	6838      	ldr	r0, [r7, #0]
 80001b8:	f004 f856 	bl	8004268 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 80001bc:	4603      	mov	r3, r0
 80001be:	f083 0301 	eor.w	r3, r3, #1
 80001c2:	b2db      	uxtb	r3, r3
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d005      	beq.n	80001d4 <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x28>
	{
		serialBuffer = DbgStr;
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	6839      	ldr	r1, [r7, #0]
 80001cc:	4618      	mov	r0, r3
 80001ce:	f004 f843 	bl	8004258 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 80001d2:	e004      	b.n	80001de <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x32>
	}
	else
	{
		serialBuffer = "Errore: messaggio mancante";
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	4905      	ldr	r1, [pc, #20]	; (80001ec <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x40>)
 80001d8:	4618      	mov	r0, r3
 80001da:	f004 f8d4 	bl	8004386 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	}
	writeSerial();
 80001de:	6878      	ldr	r0, [r7, #4]
 80001e0:	f7ff ffbc 	bl	800015c <_ZN11SerialDebug11writeSerialEv>
}
 80001e4:	bf00      	nop
 80001e6:	3708      	adds	r7, #8
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	08004738 	.word	0x08004738

080001f0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b084      	sub	sp, #16
 80001f4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80001f6:	1d3b      	adds	r3, r7, #4
 80001f8:	2200      	movs	r2, #0
 80001fa:	601a      	str	r2, [r3, #0]
 80001fc:	605a      	str	r2, [r3, #4]
 80001fe:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000200:	4b18      	ldr	r3, [pc, #96]	; (8000264 <MX_ADC1_Init+0x74>)
 8000202:	4a19      	ldr	r2, [pc, #100]	; (8000268 <MX_ADC1_Init+0x78>)
 8000204:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000206:	4b17      	ldr	r3, [pc, #92]	; (8000264 <MX_ADC1_Init+0x74>)
 8000208:	2200      	movs	r2, #0
 800020a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800020c:	4b15      	ldr	r3, [pc, #84]	; (8000264 <MX_ADC1_Init+0x74>)
 800020e:	2200      	movs	r2, #0
 8000210:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000212:	4b14      	ldr	r3, [pc, #80]	; (8000264 <MX_ADC1_Init+0x74>)
 8000214:	2200      	movs	r2, #0
 8000216:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000218:	4b12      	ldr	r3, [pc, #72]	; (8000264 <MX_ADC1_Init+0x74>)
 800021a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800021e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000220:	4b10      	ldr	r3, [pc, #64]	; (8000264 <MX_ADC1_Init+0x74>)
 8000222:	2200      	movs	r2, #0
 8000224:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000226:	4b0f      	ldr	r3, [pc, #60]	; (8000264 <MX_ADC1_Init+0x74>)
 8000228:	2201      	movs	r2, #1
 800022a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800022c:	480d      	ldr	r0, [pc, #52]	; (8000264 <MX_ADC1_Init+0x74>)
 800022e:	f000 fd1d 	bl	8000c6c <HAL_ADC_Init>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d001      	beq.n	800023c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000238:	f000 f9d8 	bl	80005ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800023c:	2300      	movs	r3, #0
 800023e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000240:	2301      	movs	r3, #1
 8000242:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000244:	2300      	movs	r3, #0
 8000246:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	4619      	mov	r1, r3
 800024c:	4805      	ldr	r0, [pc, #20]	; (8000264 <MX_ADC1_Init+0x74>)
 800024e:	f000 fe77 	bl	8000f40 <HAL_ADC_ConfigChannel>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000258:	f000 f9c8 	bl	80005ec <Error_Handler>
  }

}
 800025c:	bf00      	nop
 800025e:	3710      	adds	r7, #16
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	200000b8 	.word	0x200000b8
 8000268:	40012400 	.word	0x40012400

0800026c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b088      	sub	sp, #32
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000274:	f107 0310 	add.w	r3, r7, #16
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
 800027c:	605a      	str	r2, [r3, #4]
 800027e:	609a      	str	r2, [r3, #8]
 8000280:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a14      	ldr	r2, [pc, #80]	; (80002d8 <HAL_ADC_MspInit+0x6c>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d121      	bne.n	80002d0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800028c:	4b13      	ldr	r3, [pc, #76]	; (80002dc <HAL_ADC_MspInit+0x70>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	4a12      	ldr	r2, [pc, #72]	; (80002dc <HAL_ADC_MspInit+0x70>)
 8000292:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000296:	6193      	str	r3, [r2, #24]
 8000298:	4b10      	ldr	r3, [pc, #64]	; (80002dc <HAL_ADC_MspInit+0x70>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a0:	60fb      	str	r3, [r7, #12]
 80002a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a4:	4b0d      	ldr	r3, [pc, #52]	; (80002dc <HAL_ADC_MspInit+0x70>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	4a0c      	ldr	r2, [pc, #48]	; (80002dc <HAL_ADC_MspInit+0x70>)
 80002aa:	f043 0304 	orr.w	r3, r3, #4
 80002ae:	6193      	str	r3, [r2, #24]
 80002b0:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <HAL_ADC_MspInit+0x70>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	f003 0304 	and.w	r3, r3, #4
 80002b8:	60bb      	str	r3, [r7, #8]
 80002ba:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = CurrentSensor_Pin;
 80002bc:	2301      	movs	r3, #1
 80002be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002c0:	2303      	movs	r3, #3
 80002c2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(CurrentSensor_GPIO_Port, &GPIO_InitStruct);
 80002c4:	f107 0310 	add.w	r3, r7, #16
 80002c8:	4619      	mov	r1, r3
 80002ca:	4805      	ldr	r0, [pc, #20]	; (80002e0 <HAL_ADC_MspInit+0x74>)
 80002cc:	f001 f9e8 	bl	80016a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80002d0:	bf00      	nop
 80002d2:	3720      	adds	r7, #32
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	40012400 	.word	0x40012400
 80002dc:	40021000 	.word	0x40021000
 80002e0:	40010800 	.word	0x40010800

080002e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b086      	sub	sp, #24
 80002e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ea:	f107 0308 	add.w	r3, r7, #8
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f8:	4b2f      	ldr	r3, [pc, #188]	; (80003b8 <MX_GPIO_Init+0xd4>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a2e      	ldr	r2, [pc, #184]	; (80003b8 <MX_GPIO_Init+0xd4>)
 80002fe:	f043 0304 	orr.w	r3, r3, #4
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b2c      	ldr	r3, [pc, #176]	; (80003b8 <MX_GPIO_Init+0xd4>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0304 	and.w	r3, r3, #4
 800030c:	607b      	str	r3, [r7, #4]
 800030e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000310:	4b29      	ldr	r3, [pc, #164]	; (80003b8 <MX_GPIO_Init+0xd4>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a28      	ldr	r2, [pc, #160]	; (80003b8 <MX_GPIO_Init+0xd4>)
 8000316:	f043 0308 	orr.w	r3, r3, #8
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b26      	ldr	r3, [pc, #152]	; (80003b8 <MX_GPIO_Init+0xd4>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0308 	and.w	r3, r3, #8
 8000324:	603b      	str	r3, [r7, #0]
 8000326:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ThermoCoupleCS_Pin|LcdCS_Pin, GPIO_PIN_SET);
 8000328:	2201      	movs	r2, #1
 800032a:	210c      	movs	r1, #12
 800032c:	4823      	ldr	r0, [pc, #140]	; (80003bc <MX_GPIO_Init+0xd8>)
 800032e:	f001 fbf1 	bl	8001b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Thermo_ctrl_Pin|FanCtrl_Pin|RedLed_Pin|GreenLed_Pin, GPIO_PIN_RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8000338:	4820      	ldr	r0, [pc, #128]	; (80003bc <MX_GPIO_Init+0xd8>)
 800033a:	f001 fbeb 	bl	8001b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ThermoCoupleCS_Pin|LcdCS_Pin|FanCtrl_Pin;
 800033e:	f240 430c 	movw	r3, #1036	; 0x40c
 8000342:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000344:	2301      	movs	r3, #1
 8000346:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000348:	2300      	movs	r3, #0
 800034a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800034c:	2303      	movs	r3, #3
 800034e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000350:	f107 0308 	add.w	r3, r7, #8
 8000354:	4619      	mov	r1, r3
 8000356:	4819      	ldr	r0, [pc, #100]	; (80003bc <MX_GPIO_Init+0xd8>)
 8000358:	f001 f9a2 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = UpButton_Pin|LeftButton_Pin|OkButton_Pin;
 800035c:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000360:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000362:	2300      	movs	r3, #0
 8000364:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000366:	2302      	movs	r3, #2
 8000368:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800036a:	f107 0308 	add.w	r3, r7, #8
 800036e:	4619      	mov	r1, r3
 8000370:	4813      	ldr	r0, [pc, #76]	; (80003c0 <MX_GPIO_Init+0xdc>)
 8000372:	f001 f995 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DownButton_Pin;
 8000376:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800037a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800037c:	2300      	movs	r3, #0
 800037e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000380:	2300      	movs	r3, #0
 8000382:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DownButton_GPIO_Port, &GPIO_InitStruct);
 8000384:	f107 0308 	add.w	r3, r7, #8
 8000388:	4619      	mov	r1, r3
 800038a:	480d      	ldr	r0, [pc, #52]	; (80003c0 <MX_GPIO_Init+0xdc>)
 800038c:	f001 f988 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Thermo_ctrl_Pin|RedLed_Pin|GreenLed_Pin;
 8000390:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 8000394:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000396:	2301      	movs	r3, #1
 8000398:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039a:	2300      	movs	r3, #0
 800039c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800039e:	2302      	movs	r3, #2
 80003a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003a2:	f107 0308 	add.w	r3, r7, #8
 80003a6:	4619      	mov	r1, r3
 80003a8:	4804      	ldr	r0, [pc, #16]	; (80003bc <MX_GPIO_Init+0xd8>)
 80003aa:	f001 f979 	bl	80016a0 <HAL_GPIO_Init>

}
 80003ae:	bf00      	nop
 80003b0:	3718      	adds	r7, #24
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40021000 	.word	0x40021000
 80003bc:	40010800 	.word	0x40010800
 80003c0:	40010c00 	.word	0x40010c00

080003c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80003c8:	4b12      	ldr	r3, [pc, #72]	; (8000414 <MX_I2C1_Init+0x50>)
 80003ca:	4a13      	ldr	r2, [pc, #76]	; (8000418 <MX_I2C1_Init+0x54>)
 80003cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003ce:	4b11      	ldr	r3, [pc, #68]	; (8000414 <MX_I2C1_Init+0x50>)
 80003d0:	4a12      	ldr	r2, [pc, #72]	; (800041c <MX_I2C1_Init+0x58>)
 80003d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003d4:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <MX_I2C1_Init+0x50>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <MX_I2C1_Init+0x50>)
 80003dc:	2200      	movs	r2, #0
 80003de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <MX_I2C1_Init+0x50>)
 80003e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003e8:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <MX_I2C1_Init+0x50>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003ee:	4b09      	ldr	r3, [pc, #36]	; (8000414 <MX_I2C1_Init+0x50>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003f4:	4b07      	ldr	r3, [pc, #28]	; (8000414 <MX_I2C1_Init+0x50>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003fa:	4b06      	ldr	r3, [pc, #24]	; (8000414 <MX_I2C1_Init+0x50>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000400:	4804      	ldr	r0, [pc, #16]	; (8000414 <MX_I2C1_Init+0x50>)
 8000402:	f001 fbb9 	bl	8001b78 <HAL_I2C_Init>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800040c:	f000 f8ee 	bl	80005ec <Error_Handler>
  }

}
 8000410:	bf00      	nop
 8000412:	bd80      	pop	{r7, pc}
 8000414:	200000e8 	.word	0x200000e8
 8000418:	40005400 	.word	0x40005400
 800041c:	000186a0 	.word	0x000186a0

08000420 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b08a      	sub	sp, #40	; 0x28
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000428:	f107 0314 	add.w	r3, r7, #20
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	605a      	str	r2, [r3, #4]
 8000432:	609a      	str	r2, [r3, #8]
 8000434:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a1d      	ldr	r2, [pc, #116]	; (80004b0 <HAL_I2C_MspInit+0x90>)
 800043c:	4293      	cmp	r3, r2
 800043e:	d132      	bne.n	80004a6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000440:	4b1c      	ldr	r3, [pc, #112]	; (80004b4 <HAL_I2C_MspInit+0x94>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a1b      	ldr	r2, [pc, #108]	; (80004b4 <HAL_I2C_MspInit+0x94>)
 8000446:	f043 0308 	orr.w	r3, r3, #8
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b19      	ldr	r3, [pc, #100]	; (80004b4 <HAL_I2C_MspInit+0x94>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f003 0308 	and.w	r3, r3, #8
 8000454:	613b      	str	r3, [r7, #16]
 8000456:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8000458:	f44f 7340 	mov.w	r3, #768	; 0x300
 800045c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800045e:	2312      	movs	r3, #18
 8000460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000462:	2303      	movs	r3, #3
 8000464:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000466:	f107 0314 	add.w	r3, r7, #20
 800046a:	4619      	mov	r1, r3
 800046c:	4812      	ldr	r0, [pc, #72]	; (80004b8 <HAL_I2C_MspInit+0x98>)
 800046e:	f001 f917 	bl	80016a0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000472:	4b12      	ldr	r3, [pc, #72]	; (80004bc <HAL_I2C_MspInit+0x9c>)
 8000474:	685b      	ldr	r3, [r3, #4]
 8000476:	627b      	str	r3, [r7, #36]	; 0x24
 8000478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800047a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800047e:	627b      	str	r3, [r7, #36]	; 0x24
 8000480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000482:	f043 0302 	orr.w	r3, r3, #2
 8000486:	627b      	str	r3, [r7, #36]	; 0x24
 8000488:	4a0c      	ldr	r2, [pc, #48]	; (80004bc <HAL_I2C_MspInit+0x9c>)
 800048a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800048c:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800048e:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <HAL_I2C_MspInit+0x94>)
 8000490:	69db      	ldr	r3, [r3, #28]
 8000492:	4a08      	ldr	r2, [pc, #32]	; (80004b4 <HAL_I2C_MspInit+0x94>)
 8000494:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000498:	61d3      	str	r3, [r2, #28]
 800049a:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <HAL_I2C_MspInit+0x94>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80004a6:	bf00      	nop
 80004a8:	3728      	adds	r7, #40	; 0x28
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40005400 	.word	0x40005400
 80004b4:	40021000 	.word	0x40021000
 80004b8:	40010c00 	.word	0x40010c00
 80004bc:	40010000 	.word	0x40010000

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fb6f 	bl	8000ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f82b 	bl	8000524 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f7ff ff09 	bl	80002e4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004d2:	f7ff fe8d 	bl	80001f0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80004d6:	f7ff ff75 	bl	80003c4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004da:	f000 f8d7 	bl	800068c <MX_SPI1_Init>
  MX_TIM2_Init();
 80004de:	f000 fa47 	bl	8000970 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80004e2:	f000 faaf 	bl	8000a44 <MX_USART1_UART_Init>


  Dbg.sendDbgStr("Nella funzione main");
 80004e6:	f107 031c 	add.w	r3, r7, #28
 80004ea:	4618      	mov	r0, r3
 80004ec:	f003 fde6 	bl	80040bc <_ZNSaIcEC1Ev>
 80004f0:	f107 021c 	add.w	r2, r7, #28
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	4909      	ldr	r1, [pc, #36]	; (800051c <main+0x5c>)
 80004f8:	4618      	mov	r0, r3
 80004fa:	f003 ff6f 	bl	80043dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	4619      	mov	r1, r3
 8000502:	4807      	ldr	r0, [pc, #28]	; (8000520 <main+0x60>)
 8000504:	f7ff fe52 	bl	80001ac <_ZN11SerialDebug10sendDbgStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	4618      	mov	r0, r3
 800050c:	f003 fe9e 	bl	800424c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000510:	f107 031c 	add.w	r3, r7, #28
 8000514:	4618      	mov	r0, r3
 8000516:	f003 fdd2 	bl	80040be <_ZNSaIcED1Ev>


  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051a:	e7fe      	b.n	800051a <main+0x5a>
 800051c:	08004754 	.word	0x08004754
 8000520:	2000008c 	.word	0x2000008c

08000524 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	; 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800052e:	2228      	movs	r2, #40	; 0x28
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f003 fff0 	bl	8004518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 0314 	add.w	r3, r7, #20
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000554:	2302      	movs	r3, #2
 8000556:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000558:	2301      	movs	r3, #1
 800055a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055c:	2310      	movs	r3, #16
 800055e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000560:	2302      	movs	r3, #2
 8000562:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000564:	2300      	movs	r3, #0
 8000566:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000568:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800056c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000572:	4618      	mov	r0, r3
 8000574:	f001 fcba 	bl	8001eec <HAL_RCC_OscConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	bf14      	ite	ne
 800057e:	2301      	movne	r3, #1
 8000580:	2300      	moveq	r3, #0
 8000582:	b2db      	uxtb	r3, r3
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <_Z18SystemClock_Configv+0x68>
  {
    Error_Handler();
 8000588:	f000 f830 	bl	80005ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058c:	230f      	movs	r3, #15
 800058e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000590:	2302      	movs	r3, #2
 8000592:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f002 f810 	bl	80025cc <HAL_RCC_ClockConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	bf14      	ite	ne
 80005b2:	2301      	movne	r3, #1
 80005b4:	2300      	moveq	r3, #0
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <_Z18SystemClock_Configv+0x9c>
  {
    Error_Handler();
 80005bc:	f000 f816 	bl	80005ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005c0:	2302      	movs	r3, #2
 80005c2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 fa40 	bl	8002a50 <HAL_RCCEx_PeriphCLKConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	bf14      	ite	ne
 80005d6:	2301      	movne	r3, #1
 80005d8:	2300      	moveq	r3, #0
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 80005e0:	f000 f804 	bl	80005ec <Error_Handler>
  }
}
 80005e4:	bf00      	nop
 80005e6:	3750      	adds	r7, #80	; 0x50
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr

080005f8 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr

0800060c <_ZN11SerialDebugD1Ev>:


#define SEND_TIMEOUT	100
#define DBG_BUFFER		500

class SerialDebug
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4618      	mov	r0, r3
 8000618:	f003 fe18 	bl	800424c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4618      	mov	r0, r3
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <_Z41__static_initialization_and_destruction_0ii>:
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	6039      	str	r1, [r7, #0]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d107      	bne.n	8000648 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800063e:	4293      	cmp	r3, r2
 8000640:	d102      	bne.n	8000648 <_Z41__static_initialization_and_destruction_0ii+0x20>
SerialDebug Dbg;
 8000642:	4809      	ldr	r0, [pc, #36]	; (8000668 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000644:	f7ff fda4 	bl	8000190 <_ZN11SerialDebugC1Ev>
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d107      	bne.n	800065e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000654:	4293      	cmp	r3, r2
 8000656:	d102      	bne.n	800065e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000658:	4803      	ldr	r0, [pc, #12]	; (8000668 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800065a:	f7ff ffd7 	bl	800060c <_ZN11SerialDebugD1Ev>
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	2000008c 	.word	0x2000008c

0800066c <_GLOBAL__sub_I_Dbg>:
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
 8000670:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000674:	2001      	movs	r0, #1
 8000676:	f7ff ffd7 	bl	8000628 <_Z41__static_initialization_and_destruction_0ii>
 800067a:	bd80      	pop	{r7, pc}

0800067c <_GLOBAL__sub_D_Dbg>:
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
 8000680:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000684:	2000      	movs	r0, #0
 8000686:	f7ff ffcf 	bl	8000628 <_Z41__static_initialization_and_destruction_0ii>
 800068a:	bd80      	pop	{r7, pc}

0800068c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000690:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <MX_SPI1_Init+0x64>)
 8000692:	4a18      	ldr	r2, [pc, #96]	; (80006f4 <MX_SPI1_Init+0x68>)
 8000694:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000696:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <MX_SPI1_Init+0x64>)
 8000698:	f44f 7282 	mov.w	r2, #260	; 0x104
 800069c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <MX_SPI1_Init+0x64>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_SPI1_Init+0x64>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_SPI1_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_SPI1_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_SPI1_Init+0x64>)
 80006b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_SPI1_Init+0x64>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <MX_SPI1_Init+0x64>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_SPI1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <MX_SPI1_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_SPI1_Init+0x64>)
 80006d8:	220a      	movs	r2, #10
 80006da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <MX_SPI1_Init+0x64>)
 80006de:	f002 fac1 	bl	8002c64 <HAL_SPI_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006e8:	f7ff ff80 	bl	80005ec <Error_Handler>
  }

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	2000013c 	.word	0x2000013c
 80006f4:	40013000 	.word	0x40013000

080006f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	f107 0310 	add.w	r3, r7, #16
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a1b      	ldr	r2, [pc, #108]	; (8000780 <HAL_SPI_MspInit+0x88>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d12f      	bne.n	8000778 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <HAL_SPI_MspInit+0x8c>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	4a19      	ldr	r2, [pc, #100]	; (8000784 <HAL_SPI_MspInit+0x8c>)
 800071e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000722:	6193      	str	r3, [r2, #24]
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <HAL_SPI_MspInit+0x8c>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <HAL_SPI_MspInit+0x8c>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	4a13      	ldr	r2, [pc, #76]	; (8000784 <HAL_SPI_MspInit+0x8c>)
 8000736:	f043 0304 	orr.w	r3, r3, #4
 800073a:	6193      	str	r3, [r2, #24]
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <HAL_SPI_MspInit+0x8c>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	f003 0304 	and.w	r3, r3, #4
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = Sck_Pin|Mosi_Pin;
 8000748:	23a0      	movs	r3, #160	; 0xa0
 800074a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074c:	2302      	movs	r3, #2
 800074e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000750:	2303      	movs	r3, #3
 8000752:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	4619      	mov	r1, r3
 800075a:	480b      	ldr	r0, [pc, #44]	; (8000788 <HAL_SPI_MspInit+0x90>)
 800075c:	f000 ffa0 	bl	80016a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Miso_Pin;
 8000760:	2340      	movs	r3, #64	; 0x40
 8000762:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(Miso_GPIO_Port, &GPIO_InitStruct);
 800076c:	f107 0310 	add.w	r3, r7, #16
 8000770:	4619      	mov	r1, r3
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <HAL_SPI_MspInit+0x90>)
 8000774:	f000 ff94 	bl	80016a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000778:	bf00      	nop
 800077a:	3720      	adds	r7, #32
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40013000 	.word	0x40013000
 8000784:	40021000 	.word	0x40021000
 8000788:	40010800 	.word	0x40010800

0800078c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000792:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <HAL_MspInit+0x5c>)
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	4a14      	ldr	r2, [pc, #80]	; (80007e8 <HAL_MspInit+0x5c>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6193      	str	r3, [r2, #24]
 800079e:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <HAL_MspInit+0x5c>)
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <HAL_MspInit+0x5c>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	4a0e      	ldr	r2, [pc, #56]	; (80007e8 <HAL_MspInit+0x5c>)
 80007b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b4:	61d3      	str	r3, [r2, #28]
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <HAL_MspInit+0x5c>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007c2:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <HAL_MspInit+0x60>)
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	4a04      	ldr	r2, [pc, #16]	; (80007ec <HAL_MspInit+0x60>)
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007de:	bf00      	nop
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr
 80007e8:	40021000 	.word	0x40021000
 80007ec:	40010000 	.word	0x40010000

080007f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr

080007fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <HardFault_Handler+0x4>

08000802 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000806:	e7fe      	b.n	8000806 <MemManage_Handler+0x4>

08000808 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800080c:	e7fe      	b.n	800080c <BusFault_Handler+0x4>

0800080e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <UsageFault_Handler+0x4>

08000814 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr

0800082c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr

08000838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083c:	f000 f9fa 	bl	8000c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000848:	4802      	ldr	r0, [pc, #8]	; (8000854 <USART1_IRQHandler+0x10>)
 800084a:	f003 f89f 	bl	800398c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200001d4 	.word	0x200001d4

08000858 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
	return 1;
 800085c:	2301      	movs	r3, #1
}
 800085e:	4618      	mov	r0, r3
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr

08000866 <_kill>:

int _kill(int pid, int sig)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
 800086e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000870:	f003 fdf4 	bl	800445c <__errno>
 8000874:	4602      	mov	r2, r0
 8000876:	2316      	movs	r3, #22
 8000878:	6013      	str	r3, [r2, #0]
	return -1;
 800087a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800087e:	4618      	mov	r0, r3
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <_exit>:

void _exit (int status)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800088e:	f04f 31ff 	mov.w	r1, #4294967295
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff ffe7 	bl	8000866 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000898:	e7fe      	b.n	8000898 <_exit+0x12>
	...

0800089c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a4:	4a14      	ldr	r2, [pc, #80]	; (80008f8 <_sbrk+0x5c>)
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <_sbrk+0x60>)
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b0:	4b13      	ldr	r3, [pc, #76]	; (8000900 <_sbrk+0x64>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d102      	bne.n	80008be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <_sbrk+0x64>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	; (8000904 <_sbrk+0x68>)
 80008bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <_sbrk+0x64>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4413      	add	r3, r2
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d207      	bcs.n	80008dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008cc:	f003 fdc6 	bl	800445c <__errno>
 80008d0:	4602      	mov	r2, r0
 80008d2:	230c      	movs	r3, #12
 80008d4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295
 80008da:	e009      	b.n	80008f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <_sbrk+0x64>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008e2:	4b07      	ldr	r3, [pc, #28]	; (8000900 <_sbrk+0x64>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4413      	add	r3, r2
 80008ea:	4a05      	ldr	r2, [pc, #20]	; (8000900 <_sbrk+0x64>)
 80008ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ee:	68fb      	ldr	r3, [r7, #12]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20005000 	.word	0x20005000
 80008fc:	00000400 	.word	0x00000400
 8000900:	200000a8 	.word	0x200000a8
 8000904:	20000220 	.word	0x20000220

08000908 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800090c:	4b15      	ldr	r3, [pc, #84]	; (8000964 <SystemInit+0x5c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a14      	ldr	r2, [pc, #80]	; (8000964 <SystemInit+0x5c>)
 8000912:	f043 0301 	orr.w	r3, r3, #1
 8000916:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <SystemInit+0x5c>)
 800091a:	685a      	ldr	r2, [r3, #4]
 800091c:	4911      	ldr	r1, [pc, #68]	; (8000964 <SystemInit+0x5c>)
 800091e:	4b12      	ldr	r3, [pc, #72]	; (8000968 <SystemInit+0x60>)
 8000920:	4013      	ands	r3, r2
 8000922:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <SystemInit+0x5c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a0e      	ldr	r2, [pc, #56]	; (8000964 <SystemInit+0x5c>)
 800092a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800092e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000932:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000934:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <SystemInit+0x5c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <SystemInit+0x5c>)
 800093a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800093e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <SystemInit+0x5c>)
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	4a07      	ldr	r2, [pc, #28]	; (8000964 <SystemInit+0x5c>)
 8000946:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800094a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <SystemInit+0x5c>)
 800094e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000952:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <SystemInit+0x64>)
 8000956:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800095a:	609a      	str	r2, [r3, #8]
#endif 
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	40021000 	.word	0x40021000
 8000968:	f8ff0000 	.word	0xf8ff0000
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800098e:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <MX_TIM2_Init+0x98>)
 8000990:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000994:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <MX_TIM2_Init+0x98>)
 8000998:	2200      	movs	r2, #0
 800099a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <MX_TIM2_Init+0x98>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <MX_TIM2_Init+0x98>)
 80009a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009aa:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <MX_TIM2_Init+0x98>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b0:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <MX_TIM2_Init+0x98>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009b6:	4814      	ldr	r0, [pc, #80]	; (8000a08 <MX_TIM2_Init+0x98>)
 80009b8:	f002 fa66 	bl	8002e88 <HAL_TIM_Base_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80009c2:	f7ff fe13 	bl	80005ec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	4619      	mov	r1, r3
 80009d4:	480c      	ldr	r0, [pc, #48]	; (8000a08 <MX_TIM2_Init+0x98>)
 80009d6:	f002 fadd 	bl	8002f94 <HAL_TIM_SlaveConfigSynchro>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80009e0:	f7ff fe04 	bl	80005ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e4:	2300      	movs	r3, #0
 80009e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	4619      	mov	r1, r3
 80009f0:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_TIM2_Init+0x98>)
 80009f2:	f002 fdf3 	bl	80035dc <HAL_TIMEx_MasterConfigSynchronization>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80009fc:	f7ff fdf6 	bl	80005ec <Error_Handler>
  }

}
 8000a00:	bf00      	nop
 8000a02:	3720      	adds	r7, #32
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000194 	.word	0x20000194

08000a0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a1c:	d10b      	bne.n	8000a36 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <HAL_TIM_Base_MspInit+0x34>)
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	4a07      	ldr	r2, [pc, #28]	; (8000a40 <HAL_TIM_Base_MspInit+0x34>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	61d3      	str	r3, [r2, #28]
 8000a2a:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <HAL_TIM_Base_MspInit+0x34>)
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000a36:	bf00      	nop
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr
 8000a40:	40021000 	.word	0x40021000

08000a44 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_USART1_UART_Init+0x4c>)
 8000a4a:	4a12      	ldr	r2, [pc, #72]	; (8000a94 <MX_USART1_UART_Init+0x50>)
 8000a4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <MX_USART1_UART_Init+0x4c>)
 8000a50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_USART1_UART_Init+0x4c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_USART1_UART_Init+0x4c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <MX_USART1_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_USART1_UART_Init+0x4c>)
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <MX_USART1_UART_Init+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_USART1_UART_Init+0x4c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_USART1_UART_Init+0x4c>)
 8000a7c:	f002 fe44 	bl	8003708 <HAL_UART_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a86:	f7ff fdb1 	bl	80005ec <Error_Handler>
  }

}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200001d4 	.word	0x200001d4
 8000a94:	40013800 	.word	0x40013800

08000a98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a26      	ldr	r2, [pc, #152]	; (8000b4c <HAL_UART_MspInit+0xb4>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d145      	bne.n	8000b44 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ab8:	4b25      	ldr	r3, [pc, #148]	; (8000b50 <HAL_UART_MspInit+0xb8>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	4a24      	ldr	r2, [pc, #144]	; (8000b50 <HAL_UART_MspInit+0xb8>)
 8000abe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac2:	6193      	str	r3, [r2, #24]
 8000ac4:	4b22      	ldr	r3, [pc, #136]	; (8000b50 <HAL_UART_MspInit+0xb8>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad0:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <HAL_UART_MspInit+0xb8>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	4a1e      	ldr	r2, [pc, #120]	; (8000b50 <HAL_UART_MspInit+0xb8>)
 8000ad6:	f043 0308 	orr.w	r3, r3, #8
 8000ada:	6193      	str	r3, [r2, #24]
 8000adc:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <HAL_UART_MspInit+0xb8>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	f003 0308 	and.w	r3, r3, #8
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 8000ae8:	2340      	movs	r3, #64	; 0x40
 8000aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000af0:	2303      	movs	r3, #3
 8000af2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4619      	mov	r1, r3
 8000afa:	4816      	ldr	r0, [pc, #88]	; (8000b54 <HAL_UART_MspInit+0xbc>)
 8000afc:	f000 fdd0 	bl	80016a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 8000b00:	2380      	movs	r3, #128	; 0x80
 8000b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	4810      	ldr	r0, [pc, #64]	; (8000b54 <HAL_UART_MspInit+0xbc>)
 8000b14:	f000 fdc4 	bl	80016a0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <HAL_UART_MspInit+0xc0>)
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b20:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
 8000b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b28:	f043 0304 	orr.w	r3, r3, #4
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <HAL_UART_MspInit+0xc0>)
 8000b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b32:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2100      	movs	r1, #0
 8000b38:	2025      	movs	r0, #37	; 0x25
 8000b3a:	f000 fceb 	bl	8001514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b3e:	2025      	movs	r0, #37	; 0x25
 8000b40:	f000 fd14 	bl	800156c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000b44:	bf00      	nop
 8000b46:	3728      	adds	r7, #40	; 0x28
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40013800 	.word	0x40013800
 8000b50:	40021000 	.word	0x40021000
 8000b54:	40010c00 	.word	0x40010c00
 8000b58:	40010000 	.word	0x40010000

08000b5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b5c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b5e:	e003      	b.n	8000b68 <LoopCopyDataInit>

08000b60 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b60:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b62:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b64:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b66:	3104      	adds	r1, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b68:	480a      	ldr	r0, [pc, #40]	; (8000b94 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b6c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b6e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b70:	d3f6      	bcc.n	8000b60 <CopyDataInit>
  ldr r2, =_sbss
 8000b72:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b74:	e002      	b.n	8000b7c <LoopFillZerobss>

08000b76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b78:	f842 3b04 	str.w	r3, [r2], #4

08000b7c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b7e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b80:	d3f9      	bcc.n	8000b76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b82:	f7ff fec1 	bl	8000908 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b86:	f003 fc6f 	bl	8004468 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b8a:	f7ff fc99 	bl	80004c0 <main>
  bx lr
 8000b8e:	4770      	bx	lr
  ldr r3, =_sidata
 8000b90:	08004ab8 	.word	0x08004ab8
  ldr r0, =_sdata
 8000b94:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b98:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000b9c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000ba0:	2000021c 	.word	0x2000021c

08000ba4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ba4:	e7fe      	b.n	8000ba4 <ADC1_2_IRQHandler>
	...

08000ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_Init+0x28>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <HAL_Init+0x28>)
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f000 fc8b 	bl	80014d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f000 f808 	bl	8000bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc4:	f7ff fde2 	bl	800078c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40022000 	.word	0x40022000

08000bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_InitTick+0x54>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <HAL_InitTick+0x58>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4619      	mov	r1, r3
 8000be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 fcd2 	bl	800159c <HAL_SYSTICK_Config>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00e      	b.n	8000c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b0f      	cmp	r3, #15
 8000c06:	d80a      	bhi.n	8000c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	f000 fc80 	bl	8001514 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c14:	4a06      	ldr	r2, [pc, #24]	; (8000c30 <HAL_InitTick+0x5c>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e000      	b.n	8000c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	20000004 	.word	0x20000004

08000c34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <HAL_IncTick+0x1c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <HAL_IncTick+0x20>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a03      	ldr	r2, [pc, #12]	; (8000c54 <HAL_IncTick+0x20>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	20000008 	.word	0x20000008
 8000c54:	20000214 	.word	0x20000214

08000c58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b02      	ldr	r3, [pc, #8]	; (8000c68 <HAL_GetTick+0x10>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	20000214 	.word	0x20000214

08000c6c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c74:	2300      	movs	r3, #0
 8000c76:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e153      	b.n	8000f36 <HAL_ADC_Init+0x2ca>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a9f      	ldr	r2, [pc, #636]	; (8000f10 <HAL_ADC_Init+0x2a4>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d009      	beq.n	8000cac <HAL_ADC_Init+0x40>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a9d      	ldr	r2, [pc, #628]	; (8000f14 <HAL_ADC_Init+0x2a8>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d004      	beq.n	8000cac <HAL_ADC_Init+0x40>
 8000ca2:	f240 11b3 	movw	r1, #435	; 0x1b3
 8000ca6:	489c      	ldr	r0, [pc, #624]	; (8000f18 <HAL_ADC_Init+0x2ac>)
 8000ca8:	f7ff fca6 	bl	80005f8 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d009      	beq.n	8000cc8 <HAL_ADC_Init+0x5c>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cbc:	d004      	beq.n	8000cc8 <HAL_ADC_Init+0x5c>
 8000cbe:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8000cc2:	4895      	ldr	r0, [pc, #596]	; (8000f18 <HAL_ADC_Init+0x2ac>)
 8000cc4:	f7ff fc98 	bl	80005f8 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d009      	beq.n	8000ce4 <HAL_ADC_Init+0x78>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cd8:	d004      	beq.n	8000ce4 <HAL_ADC_Init+0x78>
 8000cda:	f240 11b5 	movw	r1, #437	; 0x1b5
 8000cde:	488e      	ldr	r0, [pc, #568]	; (8000f18 <HAL_ADC_Init+0x2ac>)
 8000ce0:	f7ff fc8a 	bl	80005f8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	7b1b      	ldrb	r3, [r3, #12]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d008      	beq.n	8000cfe <HAL_ADC_Init+0x92>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	7b1b      	ldrb	r3, [r3, #12]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d004      	beq.n	8000cfe <HAL_ADC_Init+0x92>
 8000cf4:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8000cf8:	4887      	ldr	r0, [pc, #540]	; (8000f18 <HAL_ADC_Init+0x2ac>)
 8000cfa:	f7ff fc7d 	bl	80005f8 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d022      	beq.n	8000d4c <HAL_ADC_Init+0xe0>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000d0e:	d01d      	beq.n	8000d4c <HAL_ADC_Init+0xe0>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	69db      	ldr	r3, [r3, #28]
 8000d14:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8000d18:	d018      	beq.n	8000d4c <HAL_ADC_Init+0xe0>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000d22:	d013      	beq.n	8000d4c <HAL_ADC_Init+0xe0>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	69db      	ldr	r3, [r3, #28]
 8000d28:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8000d2c:	d00e      	beq.n	8000d4c <HAL_ADC_Init+0xe0>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000d36:	d009      	beq.n	8000d4c <HAL_ADC_Init+0xe0>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	69db      	ldr	r3, [r3, #28]
 8000d3c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d40:	d004      	beq.n	8000d4c <HAL_ADC_Init+0xe0>
 8000d42:	f240 11b7 	movw	r1, #439	; 0x1b7
 8000d46:	4874      	ldr	r0, [pc, #464]	; (8000f18 <HAL_ADC_Init+0x2ac>)
 8000d48:	f7ff fc56 	bl	80005f8 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d02a      	beq.n	8000daa <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	691b      	ldr	r3, [r3, #16]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d003      	beq.n	8000d64 <HAL_ADC_Init+0xf8>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	691b      	ldr	r3, [r3, #16]
 8000d60:	2b10      	cmp	r3, #16
 8000d62:	d904      	bls.n	8000d6e <HAL_ADC_Init+0x102>
 8000d64:	f240 11bb 	movw	r1, #443	; 0x1bb
 8000d68:	486b      	ldr	r0, [pc, #428]	; (8000f18 <HAL_ADC_Init+0x2ac>)
 8000d6a:	f7ff fc45 	bl	80005f8 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	7d1b      	ldrb	r3, [r3, #20]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d008      	beq.n	8000d88 <HAL_ADC_Init+0x11c>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	7d1b      	ldrb	r3, [r3, #20]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d004      	beq.n	8000d88 <HAL_ADC_Init+0x11c>
 8000d7e:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8000d82:	4865      	ldr	r0, [pc, #404]	; (8000f18 <HAL_ADC_Init+0x2ac>)
 8000d84:	f7ff fc38 	bl	80005f8 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	7d1b      	ldrb	r3, [r3, #20]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d00c      	beq.n	8000daa <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d003      	beq.n	8000da0 <HAL_ADC_Init+0x134>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	2b08      	cmp	r3, #8
 8000d9e:	d904      	bls.n	8000daa <HAL_ADC_Init+0x13e>
 8000da0:	f240 11bf 	movw	r1, #447	; 0x1bf
 8000da4:	485c      	ldr	r0, [pc, #368]	; (8000f18 <HAL_ADC_Init+0x2ac>)
 8000da6:	f7ff fc27 	bl	80005f8 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d109      	bne.n	8000dc6 <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff fa53 	bl	800026c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f000 fa7e 	bl	80012c8 <ADC_ConversionStop_Disable>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd4:	f003 0310 	and.w	r3, r3, #16
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	f040 80a3 	bne.w	8000f24 <HAL_ADC_Init+0x2b8>
 8000dde:	7dfb      	ldrb	r3, [r7, #23]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	f040 809f 	bne.w	8000f24 <HAL_ADC_Init+0x2b8>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000dee:	f023 0302 	bic.w	r3, r3, #2
 8000df2:	f043 0202 	orr.w	r2, r3, #2
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e02:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	7b1b      	ldrb	r3, [r3, #12]
 8000e08:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e0a:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e0c:	68ba      	ldr	r2, [r7, #8]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e1a:	d003      	beq.n	8000e24 <HAL_ADC_Init+0x1b8>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d102      	bne.n	8000e2a <HAL_ADC_Init+0x1be>
 8000e24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e28:	e000      	b.n	8000e2c <HAL_ADC_Init+0x1c0>
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	7d1b      	ldrb	r3, [r3, #20]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d119      	bne.n	8000e6e <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	7b1b      	ldrb	r3, [r3, #12]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d109      	bne.n	8000e56 <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	035a      	lsls	r2, r3, #13
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	e00b      	b.n	8000e6e <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5a:	f043 0220 	orr.w	r2, r3, #32
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e66:	f043 0201 	orr.w	r2, r3, #1
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	689a      	ldr	r2, [r3, #8]
 8000e88:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <HAL_ADC_Init+0x2b0>)
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	6812      	ldr	r2, [r2, #0]
 8000e90:	68b9      	ldr	r1, [r7, #8]
 8000e92:	430b      	orrs	r3, r1
 8000e94:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e9e:	d003      	beq.n	8000ea8 <HAL_ADC_Init+0x23c>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d104      	bne.n	8000eb2 <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	691b      	ldr	r3, [r3, #16]
 8000eac:	3b01      	subs	r3, #1
 8000eae:	051b      	lsls	r3, r3, #20
 8000eb0:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb8:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	68fa      	ldr	r2, [r7, #12]
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	689a      	ldr	r2, [r3, #8]
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <HAL_ADC_Init+0x2b4>)
 8000ece:	4013      	ands	r3, r2
 8000ed0:	68ba      	ldr	r2, [r7, #8]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d10b      	bne.n	8000eee <HAL_ADC_Init+0x282>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee0:	f023 0303 	bic.w	r3, r3, #3
 8000ee4:	f043 0201 	orr.w	r2, r3, #1
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000eec:	e022      	b.n	8000f34 <HAL_ADC_Init+0x2c8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef2:	f023 0312 	bic.w	r3, r3, #18
 8000ef6:	f043 0210 	orr.w	r2, r3, #16
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f02:	f043 0201 	orr.w	r2, r3, #1
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f0e:	e011      	b.n	8000f34 <HAL_ADC_Init+0x2c8>
 8000f10:	40012400 	.word	0x40012400
 8000f14:	40012800 	.word	0x40012800
 8000f18:	08004768 	.word	0x08004768
 8000f1c:	ffe1f7fd 	.word	0xffe1f7fd
 8000f20:	ff1f0efe 	.word	0xff1f0efe
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f28:	f043 0210 	orr.w	r2, r3, #16
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop

08000f40 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a88      	ldr	r2, [pc, #544]	; (8001178 <HAL_ADC_ConfigChannel+0x238>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d009      	beq.n	8000f70 <HAL_ADC_ConfigChannel+0x30>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a86      	ldr	r2, [pc, #536]	; (800117c <HAL_ADC_ConfigChannel+0x23c>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d004      	beq.n	8000f70 <HAL_ADC_ConfigChannel+0x30>
 8000f66:	f240 71ce 	movw	r1, #1998	; 0x7ce
 8000f6a:	4885      	ldr	r0, [pc, #532]	; (8001180 <HAL_ADC_ConfigChannel+0x240>)
 8000f6c:	f7ff fb44 	bl	80005f8 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d048      	beq.n	800100a <HAL_ADC_ConfigChannel+0xca>
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d044      	beq.n	800100a <HAL_ADC_ConfigChannel+0xca>
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d040      	beq.n	800100a <HAL_ADC_ConfigChannel+0xca>
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b03      	cmp	r3, #3
 8000f8e:	d03c      	beq.n	800100a <HAL_ADC_ConfigChannel+0xca>
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b04      	cmp	r3, #4
 8000f96:	d038      	beq.n	800100a <HAL_ADC_ConfigChannel+0xca>
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b05      	cmp	r3, #5
 8000f9e:	d034      	beq.n	800100a <HAL_ADC_ConfigChannel+0xca>
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b06      	cmp	r3, #6
 8000fa6:	d030      	beq.n	800100a <HAL_ADC_ConfigChannel+0xca>
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b07      	cmp	r3, #7
 8000fae:	d02c      	beq.n	800100a <HAL_ADC_ConfigChannel+0xca>
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b08      	cmp	r3, #8
 8000fb6:	d028      	beq.n	800100a <HAL_ADC_ConfigChannel+0xca>
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b09      	cmp	r3, #9
 8000fbe:	d024      	beq.n	800100a <HAL_ADC_ConfigChannel+0xca>
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b0a      	cmp	r3, #10
 8000fc6:	d020      	beq.n	800100a <HAL_ADC_ConfigChannel+0xca>
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b0b      	cmp	r3, #11
 8000fce:	d01c      	beq.n	800100a <HAL_ADC_ConfigChannel+0xca>
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b0c      	cmp	r3, #12
 8000fd6:	d018      	beq.n	800100a <HAL_ADC_ConfigChannel+0xca>
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b0d      	cmp	r3, #13
 8000fde:	d014      	beq.n	800100a <HAL_ADC_ConfigChannel+0xca>
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b0e      	cmp	r3, #14
 8000fe6:	d010      	beq.n	800100a <HAL_ADC_ConfigChannel+0xca>
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b0f      	cmp	r3, #15
 8000fee:	d00c      	beq.n	800100a <HAL_ADC_ConfigChannel+0xca>
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b10      	cmp	r3, #16
 8000ff6:	d008      	beq.n	800100a <HAL_ADC_ConfigChannel+0xca>
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b11      	cmp	r3, #17
 8000ffe:	d004      	beq.n	800100a <HAL_ADC_ConfigChannel+0xca>
 8001000:	f240 71cf 	movw	r1, #1999	; 0x7cf
 8001004:	485e      	ldr	r0, [pc, #376]	; (8001180 <HAL_ADC_ConfigChannel+0x240>)
 8001006:	f7ff faf7 	bl	80005f8 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d040      	beq.n	8001094 <HAL_ADC_ConfigChannel+0x154>
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b02      	cmp	r3, #2
 8001018:	d03c      	beq.n	8001094 <HAL_ADC_ConfigChannel+0x154>
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	2b03      	cmp	r3, #3
 8001020:	d038      	beq.n	8001094 <HAL_ADC_ConfigChannel+0x154>
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	2b04      	cmp	r3, #4
 8001028:	d034      	beq.n	8001094 <HAL_ADC_ConfigChannel+0x154>
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2b05      	cmp	r3, #5
 8001030:	d030      	beq.n	8001094 <HAL_ADC_ConfigChannel+0x154>
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2b06      	cmp	r3, #6
 8001038:	d02c      	beq.n	8001094 <HAL_ADC_ConfigChannel+0x154>
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2b07      	cmp	r3, #7
 8001040:	d028      	beq.n	8001094 <HAL_ADC_ConfigChannel+0x154>
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	2b08      	cmp	r3, #8
 8001048:	d024      	beq.n	8001094 <HAL_ADC_ConfigChannel+0x154>
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2b09      	cmp	r3, #9
 8001050:	d020      	beq.n	8001094 <HAL_ADC_ConfigChannel+0x154>
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2b0a      	cmp	r3, #10
 8001058:	d01c      	beq.n	8001094 <HAL_ADC_ConfigChannel+0x154>
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2b0b      	cmp	r3, #11
 8001060:	d018      	beq.n	8001094 <HAL_ADC_ConfigChannel+0x154>
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b0c      	cmp	r3, #12
 8001068:	d014      	beq.n	8001094 <HAL_ADC_ConfigChannel+0x154>
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2b0d      	cmp	r3, #13
 8001070:	d010      	beq.n	8001094 <HAL_ADC_ConfigChannel+0x154>
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	2b0e      	cmp	r3, #14
 8001078:	d00c      	beq.n	8001094 <HAL_ADC_ConfigChannel+0x154>
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b0f      	cmp	r3, #15
 8001080:	d008      	beq.n	8001094 <HAL_ADC_ConfigChannel+0x154>
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b10      	cmp	r3, #16
 8001088:	d004      	beq.n	8001094 <HAL_ADC_ConfigChannel+0x154>
 800108a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800108e:	483c      	ldr	r0, [pc, #240]	; (8001180 <HAL_ADC_ConfigChannel+0x240>)
 8001090:	f7ff fab2 	bl	80005f8 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d020      	beq.n	80010de <HAL_ADC_ConfigChannel+0x19e>
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d01c      	beq.n	80010de <HAL_ADC_ConfigChannel+0x19e>
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d018      	beq.n	80010de <HAL_ADC_ConfigChannel+0x19e>
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	d014      	beq.n	80010de <HAL_ADC_ConfigChannel+0x19e>
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	2b04      	cmp	r3, #4
 80010ba:	d010      	beq.n	80010de <HAL_ADC_ConfigChannel+0x19e>
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	2b05      	cmp	r3, #5
 80010c2:	d00c      	beq.n	80010de <HAL_ADC_ConfigChannel+0x19e>
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	2b06      	cmp	r3, #6
 80010ca:	d008      	beq.n	80010de <HAL_ADC_ConfigChannel+0x19e>
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	2b07      	cmp	r3, #7
 80010d2:	d004      	beq.n	80010de <HAL_ADC_ConfigChannel+0x19e>
 80010d4:	f240 71d1 	movw	r1, #2001	; 0x7d1
 80010d8:	4829      	ldr	r0, [pc, #164]	; (8001180 <HAL_ADC_ConfigChannel+0x240>)
 80010da:	f7ff fa8d 	bl	80005f8 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d101      	bne.n	80010ec <HAL_ADC_ConfigChannel+0x1ac>
 80010e8:	2302      	movs	r3, #2
 80010ea:	e0e2      	b.n	80012b2 <HAL_ADC_ConfigChannel+0x372>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2201      	movs	r2, #1
 80010f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b06      	cmp	r3, #6
 80010fa:	d81c      	bhi.n	8001136 <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	3b05      	subs	r3, #5
 800110e:	221f      	movs	r2, #31
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	4019      	ands	r1, r3
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	6818      	ldr	r0, [r3, #0]
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	4613      	mov	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	3b05      	subs	r3, #5
 8001128:	fa00 f203 	lsl.w	r2, r0, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	430a      	orrs	r2, r1
 8001132:	635a      	str	r2, [r3, #52]	; 0x34
 8001134:	e042      	b.n	80011bc <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b0c      	cmp	r3, #12
 800113c:	d822      	bhi.n	8001184 <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	4613      	mov	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4413      	add	r3, r2
 800114e:	3b23      	subs	r3, #35	; 0x23
 8001150:	221f      	movs	r2, #31
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	4019      	ands	r1, r3
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	6818      	ldr	r0, [r3, #0]
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	4613      	mov	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	3b23      	subs	r3, #35	; 0x23
 800116a:	fa00 f203 	lsl.w	r2, r0, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	430a      	orrs	r2, r1
 8001174:	631a      	str	r2, [r3, #48]	; 0x30
 8001176:	e021      	b.n	80011bc <HAL_ADC_ConfigChannel+0x27c>
 8001178:	40012400 	.word	0x40012400
 800117c:	40012800 	.word	0x40012800
 8001180:	08004768 	.word	0x08004768
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	4613      	mov	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	3b41      	subs	r3, #65	; 0x41
 8001196:	221f      	movs	r2, #31
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	4019      	ands	r1, r3
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	3b41      	subs	r3, #65	; 0x41
 80011b0:	fa00 f203 	lsl.w	r2, r0, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	430a      	orrs	r2, r1
 80011ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b09      	cmp	r3, #9
 80011c2:	d91c      	bls.n	80011fe <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	68d9      	ldr	r1, [r3, #12]
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4613      	mov	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	4413      	add	r3, r2
 80011d4:	3b1e      	subs	r3, #30
 80011d6:	2207      	movs	r2, #7
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	4019      	ands	r1, r3
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	6898      	ldr	r0, [r3, #8]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4613      	mov	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	4413      	add	r3, r2
 80011ee:	3b1e      	subs	r3, #30
 80011f0:	fa00 f203 	lsl.w	r2, r0, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	430a      	orrs	r2, r1
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	e019      	b.n	8001232 <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6919      	ldr	r1, [r3, #16]
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4613      	mov	r3, r2
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	4413      	add	r3, r2
 800120e:	2207      	movs	r2, #7
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	4019      	ands	r1, r3
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	6898      	ldr	r0, [r3, #8]
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4613      	mov	r3, r2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	4413      	add	r3, r2
 8001226:	fa00 f203 	lsl.w	r2, r0, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	430a      	orrs	r2, r1
 8001230:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2b10      	cmp	r3, #16
 8001238:	d003      	beq.n	8001242 <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800123e:	2b11      	cmp	r3, #17
 8001240:	d132      	bne.n	80012a8 <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a1d      	ldr	r2, [pc, #116]	; (80012bc <HAL_ADC_ConfigChannel+0x37c>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d125      	bne.n	8001298 <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d126      	bne.n	80012a8 <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001268:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b10      	cmp	r3, #16
 8001270:	d11a      	bne.n	80012a8 <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001272:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <HAL_ADC_ConfigChannel+0x380>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a13      	ldr	r2, [pc, #76]	; (80012c4 <HAL_ADC_ConfigChannel+0x384>)
 8001278:	fba2 2303 	umull	r2, r3, r2, r3
 800127c:	0c9a      	lsrs	r2, r3, #18
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001288:	e002      	b.n	8001290 <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	3b01      	subs	r3, #1
 800128e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1f9      	bne.n	800128a <HAL_ADC_ConfigChannel+0x34a>
 8001296:	e007      	b.n	80012a8 <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129c:	f043 0220 	orr.w	r2, r3, #32
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40012400 	.word	0x40012400
 80012c0:	20000000 	.word	0x20000000
 80012c4:	431bde83 	.word	0x431bde83

080012c8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d127      	bne.n	8001332 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f022 0201 	bic.w	r2, r2, #1
 80012f0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012f2:	f7ff fcb1 	bl	8000c58 <HAL_GetTick>
 80012f6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012f8:	e014      	b.n	8001324 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80012fa:	f7ff fcad 	bl	8000c58 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d90d      	bls.n	8001324 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130c:	f043 0210 	orr.w	r2, r3, #16
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001318:	f043 0201 	orr.w	r2, r3, #1
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e007      	b.n	8001334 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	2b01      	cmp	r3, #1
 8001330:	d0e3      	beq.n	80012fa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001358:	4013      	ands	r3, r2
 800135a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800136c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136e:	4a04      	ldr	r2, [pc, #16]	; (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	60d3      	str	r3, [r2, #12]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <__NVIC_GetPriorityGrouping+0x18>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	0a1b      	lsrs	r3, r3, #8
 800138e:	f003 0307 	and.w	r3, r3, #7
}
 8001392:	4618      	mov	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	db0b      	blt.n	80013ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	f003 021f 	and.w	r2, r3, #31
 80013b8:	4906      	ldr	r1, [pc, #24]	; (80013d4 <__NVIC_EnableIRQ+0x34>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	095b      	lsrs	r3, r3, #5
 80013c0:	2001      	movs	r0, #1
 80013c2:	fa00 f202 	lsl.w	r2, r0, r2
 80013c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	e000e100 	.word	0xe000e100

080013d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	db0a      	blt.n	8001402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	490c      	ldr	r1, [pc, #48]	; (8001424 <__NVIC_SetPriority+0x4c>)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	0112      	lsls	r2, r2, #4
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	440b      	add	r3, r1
 80013fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001400:	e00a      	b.n	8001418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4908      	ldr	r1, [pc, #32]	; (8001428 <__NVIC_SetPriority+0x50>)
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	3b04      	subs	r3, #4
 8001410:	0112      	lsls	r2, r2, #4
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	440b      	add	r3, r1
 8001416:	761a      	strb	r2, [r3, #24]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000e100 	.word	0xe000e100
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142c:	b480      	push	{r7}
 800142e:	b089      	sub	sp, #36	; 0x24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f1c3 0307 	rsb	r3, r3, #7
 8001446:	2b04      	cmp	r3, #4
 8001448:	bf28      	it	cs
 800144a:	2304      	movcs	r3, #4
 800144c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3304      	adds	r3, #4
 8001452:	2b06      	cmp	r3, #6
 8001454:	d902      	bls.n	800145c <NVIC_EncodePriority+0x30>
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3b03      	subs	r3, #3
 800145a:	e000      	b.n	800145e <NVIC_EncodePriority+0x32>
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	f04f 32ff 	mov.w	r2, #4294967295
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43da      	mvns	r2, r3
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	401a      	ands	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001474:	f04f 31ff 	mov.w	r1, #4294967295
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	43d9      	mvns	r1, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001484:	4313      	orrs	r3, r2
         );
}
 8001486:	4618      	mov	r0, r3
 8001488:	3724      	adds	r7, #36	; 0x24
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3b01      	subs	r3, #1
 800149c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014a0:	d301      	bcc.n	80014a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014a2:	2301      	movs	r3, #1
 80014a4:	e00f      	b.n	80014c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a6:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <SysTick_Config+0x40>)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ae:	210f      	movs	r1, #15
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295
 80014b4:	f7ff ff90 	bl	80013d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <SysTick_Config+0x40>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014be:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <SysTick_Config+0x40>)
 80014c0:	2207      	movs	r2, #7
 80014c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	e000e010 	.word	0xe000e010

080014d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b07      	cmp	r3, #7
 80014e0:	d00f      	beq.n	8001502 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b06      	cmp	r3, #6
 80014e6:	d00c      	beq.n	8001502 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b05      	cmp	r3, #5
 80014ec:	d009      	beq.n	8001502 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	d006      	beq.n	8001502 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d003      	beq.n	8001502 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80014fa:	2192      	movs	r1, #146	; 0x92
 80014fc:	4804      	ldr	r0, [pc, #16]	; (8001510 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80014fe:	f7ff f87b 	bl	80005f8 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff ff1a 	bl	800133c <__NVIC_SetPriorityGrouping>
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	080047a0 	.word	0x080047a0

08001514 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
 8001520:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b0f      	cmp	r3, #15
 800152a:	d903      	bls.n	8001534 <HAL_NVIC_SetPriority+0x20>
 800152c:	21aa      	movs	r1, #170	; 0xaa
 800152e:	480e      	ldr	r0, [pc, #56]	; (8001568 <HAL_NVIC_SetPriority+0x54>)
 8001530:	f7ff f862 	bl	80005f8 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	2b0f      	cmp	r3, #15
 8001538:	d903      	bls.n	8001542 <HAL_NVIC_SetPriority+0x2e>
 800153a:	21ab      	movs	r1, #171	; 0xab
 800153c:	480a      	ldr	r0, [pc, #40]	; (8001568 <HAL_NVIC_SetPriority+0x54>)
 800153e:	f7ff f85b 	bl	80005f8 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001542:	f7ff ff1f 	bl	8001384 <__NVIC_GetPriorityGrouping>
 8001546:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	68b9      	ldr	r1, [r7, #8]
 800154c:	6978      	ldr	r0, [r7, #20]
 800154e:	f7ff ff6d 	bl	800142c <NVIC_EncodePriority>
 8001552:	4602      	mov	r2, r0
 8001554:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff ff3c 	bl	80013d8 <__NVIC_SetPriority>
}
 8001560:	bf00      	nop
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	080047a0 	.word	0x080047a0

0800156c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157a:	2b00      	cmp	r3, #0
 800157c:	da03      	bge.n	8001586 <HAL_NVIC_EnableIRQ+0x1a>
 800157e:	21be      	movs	r1, #190	; 0xbe
 8001580:	4805      	ldr	r0, [pc, #20]	; (8001598 <HAL_NVIC_EnableIRQ+0x2c>)
 8001582:	f7ff f839 	bl	80005f8 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff ff08 	bl	80013a0 <__NVIC_EnableIRQ>
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	080047a0 	.word	0x080047a0

0800159c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff ff73 	bl	8001490 <SysTick_Config>
 80015aa:	4603      	mov	r3, r0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015bc:	2300      	movs	r3, #0
 80015be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d005      	beq.n	80015d6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2204      	movs	r2, #4
 80015ce:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	73fb      	strb	r3, [r7, #15]
 80015d4:	e051      	b.n	800167a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 020e 	bic.w	r2, r2, #14
 80015e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 0201 	bic.w	r2, r2, #1
 80015f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a22      	ldr	r2, [pc, #136]	; (8001684 <HAL_DMA_Abort_IT+0xd0>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d029      	beq.n	8001654 <HAL_DMA_Abort_IT+0xa0>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a20      	ldr	r2, [pc, #128]	; (8001688 <HAL_DMA_Abort_IT+0xd4>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d022      	beq.n	8001650 <HAL_DMA_Abort_IT+0x9c>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a1f      	ldr	r2, [pc, #124]	; (800168c <HAL_DMA_Abort_IT+0xd8>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d01a      	beq.n	800164a <HAL_DMA_Abort_IT+0x96>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a1d      	ldr	r2, [pc, #116]	; (8001690 <HAL_DMA_Abort_IT+0xdc>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d012      	beq.n	8001644 <HAL_DMA_Abort_IT+0x90>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a1c      	ldr	r2, [pc, #112]	; (8001694 <HAL_DMA_Abort_IT+0xe0>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d00a      	beq.n	800163e <HAL_DMA_Abort_IT+0x8a>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a1a      	ldr	r2, [pc, #104]	; (8001698 <HAL_DMA_Abort_IT+0xe4>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d102      	bne.n	8001638 <HAL_DMA_Abort_IT+0x84>
 8001632:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001636:	e00e      	b.n	8001656 <HAL_DMA_Abort_IT+0xa2>
 8001638:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800163c:	e00b      	b.n	8001656 <HAL_DMA_Abort_IT+0xa2>
 800163e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001642:	e008      	b.n	8001656 <HAL_DMA_Abort_IT+0xa2>
 8001644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001648:	e005      	b.n	8001656 <HAL_DMA_Abort_IT+0xa2>
 800164a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800164e:	e002      	b.n	8001656 <HAL_DMA_Abort_IT+0xa2>
 8001650:	2310      	movs	r3, #16
 8001652:	e000      	b.n	8001656 <HAL_DMA_Abort_IT+0xa2>
 8001654:	2301      	movs	r3, #1
 8001656:	4a11      	ldr	r2, [pc, #68]	; (800169c <HAL_DMA_Abort_IT+0xe8>)
 8001658:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	4798      	blx	r3
    } 
  }
  return status;
 800167a:	7bfb      	ldrb	r3, [r7, #15]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40020008 	.word	0x40020008
 8001688:	4002001c 	.word	0x4002001c
 800168c:	40020030 	.word	0x40020030
 8001690:	40020044 	.word	0x40020044
 8001694:	40020058 	.word	0x40020058
 8001698:	4002006c 	.word	0x4002006c
 800169c:	40020000 	.word	0x40020000

080016a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	; 0x28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016ae:	2300      	movs	r3, #0
 80016b0:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a9c      	ldr	r2, [pc, #624]	; (8001928 <HAL_GPIO_Init+0x288>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d013      	beq.n	80016e2 <HAL_GPIO_Init+0x42>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a9b      	ldr	r2, [pc, #620]	; (800192c <HAL_GPIO_Init+0x28c>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d00f      	beq.n	80016e2 <HAL_GPIO_Init+0x42>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a9a      	ldr	r2, [pc, #616]	; (8001930 <HAL_GPIO_Init+0x290>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d00b      	beq.n	80016e2 <HAL_GPIO_Init+0x42>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a99      	ldr	r2, [pc, #612]	; (8001934 <HAL_GPIO_Init+0x294>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d007      	beq.n	80016e2 <HAL_GPIO_Init+0x42>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a98      	ldr	r2, [pc, #608]	; (8001938 <HAL_GPIO_Init+0x298>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_Init+0x42>
 80016da:	21bd      	movs	r1, #189	; 0xbd
 80016dc:	4897      	ldr	r0, [pc, #604]	; (800193c <HAL_GPIO_Init+0x29c>)
 80016de:	f7fe ff8b 	bl	80005f8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d005      	beq.n	80016f8 <HAL_GPIO_Init+0x58>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	0c1b      	lsrs	r3, r3, #16
 80016f2:	041b      	lsls	r3, r3, #16
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_GPIO_Init+0x60>
 80016f8:	21be      	movs	r1, #190	; 0xbe
 80016fa:	4890      	ldr	r0, [pc, #576]	; (800193c <HAL_GPIO_Init+0x29c>)
 80016fc:	f7fe ff7c 	bl	80005f8 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	f000 81eb 	beq.w	8001ae0 <HAL_GPIO_Init+0x440>
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b01      	cmp	r3, #1
 8001710:	f000 81e6 	beq.w	8001ae0 <HAL_GPIO_Init+0x440>
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b11      	cmp	r3, #17
 800171a:	f000 81e1 	beq.w	8001ae0 <HAL_GPIO_Init+0x440>
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b02      	cmp	r3, #2
 8001724:	f000 81dc 	beq.w	8001ae0 <HAL_GPIO_Init+0x440>
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b12      	cmp	r3, #18
 800172e:	f000 81d7 	beq.w	8001ae0 <HAL_GPIO_Init+0x440>
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	4a82      	ldr	r2, [pc, #520]	; (8001940 <HAL_GPIO_Init+0x2a0>)
 8001738:	4293      	cmp	r3, r2
 800173a:	f000 81d1 	beq.w	8001ae0 <HAL_GPIO_Init+0x440>
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	4a80      	ldr	r2, [pc, #512]	; (8001944 <HAL_GPIO_Init+0x2a4>)
 8001744:	4293      	cmp	r3, r2
 8001746:	f000 81cb 	beq.w	8001ae0 <HAL_GPIO_Init+0x440>
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	4a7e      	ldr	r2, [pc, #504]	; (8001948 <HAL_GPIO_Init+0x2a8>)
 8001750:	4293      	cmp	r3, r2
 8001752:	f000 81c5 	beq.w	8001ae0 <HAL_GPIO_Init+0x440>
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	4a7c      	ldr	r2, [pc, #496]	; (800194c <HAL_GPIO_Init+0x2ac>)
 800175c:	4293      	cmp	r3, r2
 800175e:	f000 81bf 	beq.w	8001ae0 <HAL_GPIO_Init+0x440>
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	4a7a      	ldr	r2, [pc, #488]	; (8001950 <HAL_GPIO_Init+0x2b0>)
 8001768:	4293      	cmp	r3, r2
 800176a:	f000 81b9 	beq.w	8001ae0 <HAL_GPIO_Init+0x440>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	4a78      	ldr	r2, [pc, #480]	; (8001954 <HAL_GPIO_Init+0x2b4>)
 8001774:	4293      	cmp	r3, r2
 8001776:	f000 81b3 	beq.w	8001ae0 <HAL_GPIO_Init+0x440>
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b03      	cmp	r3, #3
 8001780:	f000 81ae 	beq.w	8001ae0 <HAL_GPIO_Init+0x440>
 8001784:	21bf      	movs	r1, #191	; 0xbf
 8001786:	486d      	ldr	r0, [pc, #436]	; (800193c <HAL_GPIO_Init+0x29c>)
 8001788:	f7fe ff36 	bl	80005f8 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178c:	e1a8      	b.n	8001ae0 <HAL_GPIO_Init+0x440>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800178e:	2201      	movs	r2, #1
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	69fa      	ldr	r2, [r7, #28]
 800179e:	4013      	ands	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	f040 8197 	bne.w	8001ada <HAL_GPIO_Init+0x43a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a5e      	ldr	r2, [pc, #376]	; (8001928 <HAL_GPIO_Init+0x288>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d013      	beq.n	80017dc <HAL_GPIO_Init+0x13c>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a5d      	ldr	r2, [pc, #372]	; (800192c <HAL_GPIO_Init+0x28c>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d00f      	beq.n	80017dc <HAL_GPIO_Init+0x13c>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a5c      	ldr	r2, [pc, #368]	; (8001930 <HAL_GPIO_Init+0x290>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d00b      	beq.n	80017dc <HAL_GPIO_Init+0x13c>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a5b      	ldr	r2, [pc, #364]	; (8001934 <HAL_GPIO_Init+0x294>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d007      	beq.n	80017dc <HAL_GPIO_Init+0x13c>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a5a      	ldr	r2, [pc, #360]	; (8001938 <HAL_GPIO_Init+0x298>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d003      	beq.n	80017dc <HAL_GPIO_Init+0x13c>
 80017d4:	21cd      	movs	r1, #205	; 0xcd
 80017d6:	4859      	ldr	r0, [pc, #356]	; (800193c <HAL_GPIO_Init+0x29c>)
 80017d8:	f7fe ff0e 	bl	80005f8 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b12      	cmp	r3, #18
 80017e2:	d065      	beq.n	80018b0 <HAL_GPIO_Init+0x210>
 80017e4:	2b12      	cmp	r3, #18
 80017e6:	d80e      	bhi.n	8001806 <HAL_GPIO_Init+0x166>
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d04c      	beq.n	8001886 <HAL_GPIO_Init+0x1e6>
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d804      	bhi.n	80017fa <HAL_GPIO_Init+0x15a>
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d072      	beq.n	80018da <HAL_GPIO_Init+0x23a>
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d01d      	beq.n	8001834 <HAL_GPIO_Init+0x194>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017f8:	e0b1      	b.n	800195e <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	f000 80ac 	beq.w	8001958 <HAL_GPIO_Init+0x2b8>
 8001800:	2b11      	cmp	r3, #17
 8001802:	d02b      	beq.n	800185c <HAL_GPIO_Init+0x1bc>
          break;
 8001804:	e0ab      	b.n	800195e <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8001806:	4a4f      	ldr	r2, [pc, #316]	; (8001944 <HAL_GPIO_Init+0x2a4>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d066      	beq.n	80018da <HAL_GPIO_Init+0x23a>
 800180c:	4a4d      	ldr	r2, [pc, #308]	; (8001944 <HAL_GPIO_Init+0x2a4>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d806      	bhi.n	8001820 <HAL_GPIO_Init+0x180>
 8001812:	4a4b      	ldr	r2, [pc, #300]	; (8001940 <HAL_GPIO_Init+0x2a0>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d060      	beq.n	80018da <HAL_GPIO_Init+0x23a>
 8001818:	4a4c      	ldr	r2, [pc, #304]	; (800194c <HAL_GPIO_Init+0x2ac>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d05d      	beq.n	80018da <HAL_GPIO_Init+0x23a>
          break;
 800181e:	e09e      	b.n	800195e <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8001820:	4a49      	ldr	r2, [pc, #292]	; (8001948 <HAL_GPIO_Init+0x2a8>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d059      	beq.n	80018da <HAL_GPIO_Init+0x23a>
 8001826:	4a4b      	ldr	r2, [pc, #300]	; (8001954 <HAL_GPIO_Init+0x2b4>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d056      	beq.n	80018da <HAL_GPIO_Init+0x23a>
 800182c:	4a48      	ldr	r2, [pc, #288]	; (8001950 <HAL_GPIO_Init+0x2b0>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d053      	beq.n	80018da <HAL_GPIO_Init+0x23a>
          break;
 8001832:	e094      	b.n	800195e <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	2b02      	cmp	r3, #2
 800183a:	d00b      	beq.n	8001854 <HAL_GPIO_Init+0x1b4>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d007      	beq.n	8001854 <HAL_GPIO_Init+0x1b4>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	2b03      	cmp	r3, #3
 800184a:	d003      	beq.n	8001854 <HAL_GPIO_Init+0x1b4>
 800184c:	21d5      	movs	r1, #213	; 0xd5
 800184e:	483b      	ldr	r0, [pc, #236]	; (800193c <HAL_GPIO_Init+0x29c>)
 8001850:	f7fe fed2 	bl	80005f8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	623b      	str	r3, [r7, #32]
          break;
 800185a:	e080      	b.n	800195e <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	2b02      	cmp	r3, #2
 8001862:	d00b      	beq.n	800187c <HAL_GPIO_Init+0x1dc>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d007      	beq.n	800187c <HAL_GPIO_Init+0x1dc>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	2b03      	cmp	r3, #3
 8001872:	d003      	beq.n	800187c <HAL_GPIO_Init+0x1dc>
 8001874:	21dc      	movs	r1, #220	; 0xdc
 8001876:	4831      	ldr	r0, [pc, #196]	; (800193c <HAL_GPIO_Init+0x29c>)
 8001878:	f7fe febe 	bl	80005f8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	3304      	adds	r3, #4
 8001882:	623b      	str	r3, [r7, #32]
          break;
 8001884:	e06b      	b.n	800195e <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d00b      	beq.n	80018a6 <HAL_GPIO_Init+0x206>
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d007      	beq.n	80018a6 <HAL_GPIO_Init+0x206>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	2b03      	cmp	r3, #3
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_Init+0x206>
 800189e:	21e3      	movs	r1, #227	; 0xe3
 80018a0:	4826      	ldr	r0, [pc, #152]	; (800193c <HAL_GPIO_Init+0x29c>)
 80018a2:	f7fe fea9 	bl	80005f8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	3308      	adds	r3, #8
 80018ac:	623b      	str	r3, [r7, #32]
          break;
 80018ae:	e056      	b.n	800195e <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d00b      	beq.n	80018d0 <HAL_GPIO_Init+0x230>
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d007      	beq.n	80018d0 <HAL_GPIO_Init+0x230>
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	2b03      	cmp	r3, #3
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0x230>
 80018c8:	21ea      	movs	r1, #234	; 0xea
 80018ca:	481c      	ldr	r0, [pc, #112]	; (800193c <HAL_GPIO_Init+0x29c>)
 80018cc:	f7fe fe94 	bl	80005f8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	330c      	adds	r3, #12
 80018d6:	623b      	str	r3, [r7, #32]
          break;
 80018d8:	e041      	b.n	800195e <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00b      	beq.n	80018fa <HAL_GPIO_Init+0x25a>
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d007      	beq.n	80018fa <HAL_GPIO_Init+0x25a>
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x25a>
 80018f2:	21f7      	movs	r1, #247	; 0xf7
 80018f4:	4811      	ldr	r0, [pc, #68]	; (800193c <HAL_GPIO_Init+0x29c>)
 80018f6:	f7fe fe7f 	bl	80005f8 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d102      	bne.n	8001908 <HAL_GPIO_Init+0x268>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001902:	2304      	movs	r3, #4
 8001904:	623b      	str	r3, [r7, #32]
          break;
 8001906:	e02a      	b.n	800195e <HAL_GPIO_Init+0x2be>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d105      	bne.n	800191c <HAL_GPIO_Init+0x27c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001910:	2308      	movs	r3, #8
 8001912:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69fa      	ldr	r2, [r7, #28]
 8001918:	611a      	str	r2, [r3, #16]
          break;
 800191a:	e020      	b.n	800195e <HAL_GPIO_Init+0x2be>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800191c:	2308      	movs	r3, #8
 800191e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69fa      	ldr	r2, [r7, #28]
 8001924:	615a      	str	r2, [r3, #20]
          break;
 8001926:	e01a      	b.n	800195e <HAL_GPIO_Init+0x2be>
 8001928:	40010800 	.word	0x40010800
 800192c:	40010c00 	.word	0x40010c00
 8001930:	40011000 	.word	0x40011000
 8001934:	40011400 	.word	0x40011400
 8001938:	40011800 	.word	0x40011800
 800193c:	080047dc 	.word	0x080047dc
 8001940:	10110000 	.word	0x10110000
 8001944:	10210000 	.word	0x10210000
 8001948:	10310000 	.word	0x10310000
 800194c:	10120000 	.word	0x10120000
 8001950:	10220000 	.word	0x10220000
 8001954:	10320000 	.word	0x10320000
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001958:	2300      	movs	r3, #0
 800195a:	623b      	str	r3, [r7, #32]
          break;
 800195c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	2bff      	cmp	r3, #255	; 0xff
 8001962:	d801      	bhi.n	8001968 <HAL_GPIO_Init+0x2c8>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	e001      	b.n	800196c <HAL_GPIO_Init+0x2cc>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3304      	adds	r3, #4
 800196c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	2bff      	cmp	r3, #255	; 0xff
 8001972:	d802      	bhi.n	800197a <HAL_GPIO_Init+0x2da>
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	e002      	b.n	8001980 <HAL_GPIO_Init+0x2e0>
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	3b08      	subs	r3, #8
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	210f      	movs	r1, #15
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	401a      	ands	r2, r3
 8001992:	6a39      	ldr	r1, [r7, #32]
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	fa01 f303 	lsl.w	r3, r1, r3
 800199a:	431a      	orrs	r2, r3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 8096 	beq.w	8001ada <HAL_GPIO_Init+0x43a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019ae:	4b52      	ldr	r3, [pc, #328]	; (8001af8 <HAL_GPIO_Init+0x458>)
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	4a51      	ldr	r2, [pc, #324]	; (8001af8 <HAL_GPIO_Init+0x458>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6193      	str	r3, [r2, #24]
 80019ba:	4b4f      	ldr	r3, [pc, #316]	; (8001af8 <HAL_GPIO_Init+0x458>)
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019c6:	4a4d      	ldr	r2, [pc, #308]	; (8001afc <HAL_GPIO_Init+0x45c>)
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	089b      	lsrs	r3, r3, #2
 80019cc:	3302      	adds	r3, #2
 80019ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	220f      	movs	r2, #15
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	4013      	ands	r3, r2
 80019e8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a44      	ldr	r2, [pc, #272]	; (8001b00 <HAL_GPIO_Init+0x460>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d013      	beq.n	8001a1a <HAL_GPIO_Init+0x37a>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a43      	ldr	r2, [pc, #268]	; (8001b04 <HAL_GPIO_Init+0x464>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d00d      	beq.n	8001a16 <HAL_GPIO_Init+0x376>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a42      	ldr	r2, [pc, #264]	; (8001b08 <HAL_GPIO_Init+0x468>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d007      	beq.n	8001a12 <HAL_GPIO_Init+0x372>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a41      	ldr	r2, [pc, #260]	; (8001b0c <HAL_GPIO_Init+0x46c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d101      	bne.n	8001a0e <HAL_GPIO_Init+0x36e>
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e006      	b.n	8001a1c <HAL_GPIO_Init+0x37c>
 8001a0e:	2304      	movs	r3, #4
 8001a10:	e004      	b.n	8001a1c <HAL_GPIO_Init+0x37c>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e002      	b.n	8001a1c <HAL_GPIO_Init+0x37c>
 8001a16:	2301      	movs	r3, #1
 8001a18:	e000      	b.n	8001a1c <HAL_GPIO_Init+0x37c>
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a1e:	f002 0203 	and.w	r2, r2, #3
 8001a22:	0092      	lsls	r2, r2, #2
 8001a24:	4093      	lsls	r3, r2
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a2c:	4933      	ldr	r1, [pc, #204]	; (8001afc <HAL_GPIO_Init+0x45c>)
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	089b      	lsrs	r3, r3, #2
 8001a32:	3302      	adds	r3, #2
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d006      	beq.n	8001a54 <HAL_GPIO_Init+0x3b4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a46:	4b32      	ldr	r3, [pc, #200]	; (8001b10 <HAL_GPIO_Init+0x470>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	4931      	ldr	r1, [pc, #196]	; (8001b10 <HAL_GPIO_Init+0x470>)
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	600b      	str	r3, [r1, #0]
 8001a52:	e006      	b.n	8001a62 <HAL_GPIO_Init+0x3c2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a54:	4b2e      	ldr	r3, [pc, #184]	; (8001b10 <HAL_GPIO_Init+0x470>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	492c      	ldr	r1, [pc, #176]	; (8001b10 <HAL_GPIO_Init+0x470>)
 8001a5e:	4013      	ands	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d006      	beq.n	8001a7c <HAL_GPIO_Init+0x3dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a6e:	4b28      	ldr	r3, [pc, #160]	; (8001b10 <HAL_GPIO_Init+0x470>)
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	4927      	ldr	r1, [pc, #156]	; (8001b10 <HAL_GPIO_Init+0x470>)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	604b      	str	r3, [r1, #4]
 8001a7a:	e006      	b.n	8001a8a <HAL_GPIO_Init+0x3ea>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a7c:	4b24      	ldr	r3, [pc, #144]	; (8001b10 <HAL_GPIO_Init+0x470>)
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	43db      	mvns	r3, r3
 8001a84:	4922      	ldr	r1, [pc, #136]	; (8001b10 <HAL_GPIO_Init+0x470>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d006      	beq.n	8001aa4 <HAL_GPIO_Init+0x404>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a96:	4b1e      	ldr	r3, [pc, #120]	; (8001b10 <HAL_GPIO_Init+0x470>)
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	491d      	ldr	r1, [pc, #116]	; (8001b10 <HAL_GPIO_Init+0x470>)
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	608b      	str	r3, [r1, #8]
 8001aa2:	e006      	b.n	8001ab2 <HAL_GPIO_Init+0x412>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aa4:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <HAL_GPIO_Init+0x470>)
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	4918      	ldr	r1, [pc, #96]	; (8001b10 <HAL_GPIO_Init+0x470>)
 8001aae:	4013      	ands	r3, r2
 8001ab0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d006      	beq.n	8001acc <HAL_GPIO_Init+0x42c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001abe:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <HAL_GPIO_Init+0x470>)
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	4913      	ldr	r1, [pc, #76]	; (8001b10 <HAL_GPIO_Init+0x470>)
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	60cb      	str	r3, [r1, #12]
 8001aca:	e006      	b.n	8001ada <HAL_GPIO_Init+0x43a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001acc:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <HAL_GPIO_Init+0x470>)
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	490e      	ldr	r1, [pc, #56]	; (8001b10 <HAL_GPIO_Init+0x470>)
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	3301      	adds	r3, #1
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f47f ae4f 	bne.w	800178e <HAL_GPIO_Init+0xee>
  }
}
 8001af0:	bf00      	nop
 8001af2:	3728      	adds	r7, #40	; 0x28
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40021000 	.word	0x40021000
 8001afc:	40010000 	.word	0x40010000
 8001b00:	40010800 	.word	0x40010800
 8001b04:	40010c00 	.word	0x40010c00
 8001b08:	40011000 	.word	0x40011000
 8001b0c:	40011400 	.word	0x40011400
 8001b10:	40010400 	.word	0x40010400

08001b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	807b      	strh	r3, [r7, #2]
 8001b20:	4613      	mov	r3, r2
 8001b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001b24:	887b      	ldrh	r3, [r7, #2]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d004      	beq.n	8001b34 <HAL_GPIO_WritePin+0x20>
 8001b2a:	887b      	ldrh	r3, [r7, #2]
 8001b2c:	0c1b      	lsrs	r3, r3, #16
 8001b2e:	041b      	lsls	r3, r3, #16
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d004      	beq.n	8001b3e <HAL_GPIO_WritePin+0x2a>
 8001b34:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8001b38:	480e      	ldr	r0, [pc, #56]	; (8001b74 <HAL_GPIO_WritePin+0x60>)
 8001b3a:	f7fe fd5d 	bl	80005f8 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001b3e:	787b      	ldrb	r3, [r7, #1]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d007      	beq.n	8001b54 <HAL_GPIO_WritePin+0x40>
 8001b44:	787b      	ldrb	r3, [r7, #1]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d004      	beq.n	8001b54 <HAL_GPIO_WritePin+0x40>
 8001b4a:	f240 11d5 	movw	r1, #469	; 0x1d5
 8001b4e:	4809      	ldr	r0, [pc, #36]	; (8001b74 <HAL_GPIO_WritePin+0x60>)
 8001b50:	f7fe fd52 	bl	80005f8 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8001b54:	787b      	ldrb	r3, [r7, #1]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b5a:	887a      	ldrh	r2, [r7, #2]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b60:	e003      	b.n	8001b6a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b62:	887b      	ldrh	r3, [r7, #2]
 8001b64:	041a      	lsls	r2, r3, #16
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	611a      	str	r2, [r3, #16]
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	080047dc 	.word	0x080047dc

08001b78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e1ab      	b.n	8001ee2 <HAL_I2C_Init+0x36a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4aa0      	ldr	r2, [pc, #640]	; (8001e10 <HAL_I2C_Init+0x298>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d009      	beq.n	8001ba8 <HAL_I2C_Init+0x30>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a9e      	ldr	r2, [pc, #632]	; (8001e14 <HAL_I2C_Init+0x29c>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d004      	beq.n	8001ba8 <HAL_I2C_Init+0x30>
 8001b9e:	f240 11d1 	movw	r1, #465	; 0x1d1
 8001ba2:	489d      	ldr	r0, [pc, #628]	; (8001e18 <HAL_I2C_Init+0x2a0>)
 8001ba4:	f7fe fd28 	bl	80005f8 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d004      	beq.n	8001bba <HAL_I2C_Init+0x42>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	4a99      	ldr	r2, [pc, #612]	; (8001e1c <HAL_I2C_Init+0x2a4>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d904      	bls.n	8001bc4 <HAL_I2C_Init+0x4c>
 8001bba:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8001bbe:	4896      	ldr	r0, [pc, #600]	; (8001e18 <HAL_I2C_Init+0x2a0>)
 8001bc0:	f7fe fd1a 	bl	80005f8 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d009      	beq.n	8001be0 <HAL_I2C_Init+0x68>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bd4:	d004      	beq.n	8001be0 <HAL_I2C_Init+0x68>
 8001bd6:	f240 11d3 	movw	r1, #467	; 0x1d3
 8001bda:	488f      	ldr	r0, [pc, #572]	; (8001e18 <HAL_I2C_Init+0x2a0>)
 8001bdc:	f7fe fd0c 	bl	80005f8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001be8:	f023 0303 	bic.w	r3, r3, #3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d004      	beq.n	8001bfa <HAL_I2C_Init+0x82>
 8001bf0:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8001bf4:	4888      	ldr	r0, [pc, #544]	; (8001e18 <HAL_I2C_Init+0x2a0>)
 8001bf6:	f7fe fcff 	bl	80005f8 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c02:	d009      	beq.n	8001c18 <HAL_I2C_Init+0xa0>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001c0c:	d004      	beq.n	8001c18 <HAL_I2C_Init+0xa0>
 8001c0e:	f240 11d5 	movw	r1, #469	; 0x1d5
 8001c12:	4881      	ldr	r0, [pc, #516]	; (8001e18 <HAL_I2C_Init+0x2a0>)
 8001c14:	f7fe fcf0 	bl	80005f8 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d008      	beq.n	8001c32 <HAL_I2C_Init+0xba>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d004      	beq.n	8001c32 <HAL_I2C_Init+0xba>
 8001c28:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8001c2c:	487a      	ldr	r0, [pc, #488]	; (8001e18 <HAL_I2C_Init+0x2a0>)
 8001c2e:	f7fe fce3 	bl	80005f8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d004      	beq.n	8001c48 <HAL_I2C_Init+0xd0>
 8001c3e:	f240 11d7 	movw	r1, #471	; 0x1d7
 8001c42:	4875      	ldr	r0, [pc, #468]	; (8001e18 <HAL_I2C_Init+0x2a0>)
 8001c44:	f7fe fcd8 	bl	80005f8 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d008      	beq.n	8001c62 <HAL_I2C_Init+0xea>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	2b40      	cmp	r3, #64	; 0x40
 8001c56:	d004      	beq.n	8001c62 <HAL_I2C_Init+0xea>
 8001c58:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001c5c:	486e      	ldr	r0, [pc, #440]	; (8001e18 <HAL_I2C_Init+0x2a0>)
 8001c5e:	f7fe fccb 	bl	80005f8 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d008      	beq.n	8001c7c <HAL_I2C_Init+0x104>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	2b80      	cmp	r3, #128	; 0x80
 8001c70:	d004      	beq.n	8001c7c <HAL_I2C_Init+0x104>
 8001c72:	f240 11d9 	movw	r1, #473	; 0x1d9
 8001c76:	4868      	ldr	r0, [pc, #416]	; (8001e18 <HAL_I2C_Init+0x2a0>)
 8001c78:	f7fe fcbe 	bl	80005f8 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d106      	bne.n	8001c96 <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7fe fbc5 	bl	8000420 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2224      	movs	r2, #36	; 0x24
 8001c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0201 	bic.w	r2, r2, #1
 8001cac:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cbc:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ccc:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cce:	f000 fe79 	bl	80029c4 <HAL_RCC_GetPCLK1Freq>
 8001cd2:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	4a51      	ldr	r2, [pc, #324]	; (8001e20 <HAL_I2C_Init+0x2a8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d807      	bhi.n	8001cee <HAL_I2C_Init+0x176>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	4a50      	ldr	r2, [pc, #320]	; (8001e24 <HAL_I2C_Init+0x2ac>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	bf94      	ite	ls
 8001ce6:	2301      	movls	r3, #1
 8001ce8:	2300      	movhi	r3, #0
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	e006      	b.n	8001cfc <HAL_I2C_Init+0x184>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	4a4d      	ldr	r2, [pc, #308]	; (8001e28 <HAL_I2C_Init+0x2b0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	bf94      	ite	ls
 8001cf6:	2301      	movls	r3, #1
 8001cf8:	2300      	movhi	r3, #0
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <HAL_I2C_Init+0x18c>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e0ee      	b.n	8001ee2 <HAL_I2C_Init+0x36a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4a49      	ldr	r2, [pc, #292]	; (8001e2c <HAL_I2C_Init+0x2b4>)
 8001d08:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0c:	0c9b      	lsrs	r3, r3, #18
 8001d0e:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	4a3b      	ldr	r2, [pc, #236]	; (8001e20 <HAL_I2C_Init+0x2a8>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d802      	bhi.n	8001d3e <HAL_I2C_Init+0x1c6>
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	e009      	b.n	8001d52 <HAL_I2C_Init+0x1da>
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d44:	fb02 f303 	mul.w	r3, r2, r3
 8001d48:	4a39      	ldr	r2, [pc, #228]	; (8001e30 <HAL_I2C_Init+0x2b8>)
 8001d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4e:	099b      	lsrs	r3, r3, #6
 8001d50:	3301      	adds	r3, #1
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	430b      	orrs	r3, r1
 8001d58:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d64:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	492c      	ldr	r1, [pc, #176]	; (8001e20 <HAL_I2C_Init+0x2a8>)
 8001d6e:	428b      	cmp	r3, r1
 8001d70:	d80d      	bhi.n	8001d8e <HAL_I2C_Init+0x216>
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	1e59      	subs	r1, r3, #1
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d80:	3301      	adds	r3, #1
 8001d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	bf38      	it	cc
 8001d8a:	2304      	movcc	r3, #4
 8001d8c:	e062      	b.n	8001e54 <HAL_I2C_Init+0x2dc>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d111      	bne.n	8001dba <HAL_I2C_Init+0x242>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	1e58      	subs	r0, r3, #1
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6859      	ldr	r1, [r3, #4]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	440b      	add	r3, r1
 8001da4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001da8:	3301      	adds	r3, #1
 8001daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	bf0c      	ite	eq
 8001db2:	2301      	moveq	r3, #1
 8001db4:	2300      	movne	r3, #0
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	e012      	b.n	8001de0 <HAL_I2C_Init+0x268>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	1e58      	subs	r0, r3, #1
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6859      	ldr	r1, [r3, #4]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	0099      	lsls	r1, r3, #2
 8001dca:	440b      	add	r3, r1
 8001dcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	bf0c      	ite	eq
 8001dda:	2301      	moveq	r3, #1
 8001ddc:	2300      	movne	r3, #0
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <HAL_I2C_Init+0x270>
 8001de4:	2301      	movs	r3, #1
 8001de6:	e035      	b.n	8001e54 <HAL_I2C_Init+0x2dc>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d121      	bne.n	8001e34 <HAL_I2C_Init+0x2bc>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	1e58      	subs	r0, r3, #1
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6859      	ldr	r1, [r3, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	440b      	add	r3, r1
 8001dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e02:	3301      	adds	r3, #1
 8001e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e0c:	e022      	b.n	8001e54 <HAL_I2C_Init+0x2dc>
 8001e0e:	bf00      	nop
 8001e10:	40005400 	.word	0x40005400
 8001e14:	40005800 	.word	0x40005800
 8001e18:	08004818 	.word	0x08004818
 8001e1c:	00061a80 	.word	0x00061a80
 8001e20:	000186a0 	.word	0x000186a0
 8001e24:	001e847f 	.word	0x001e847f
 8001e28:	003d08ff 	.word	0x003d08ff
 8001e2c:	431bde83 	.word	0x431bde83
 8001e30:	10624dd3 	.word	0x10624dd3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	1e58      	subs	r0, r3, #1
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6859      	ldr	r1, [r3, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	0099      	lsls	r1, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	6809      	ldr	r1, [r1, #0]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69da      	ldr	r2, [r3, #28]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6911      	ldr	r1, [r2, #16]
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	68d2      	ldr	r2, [r2, #12]
 8001e8e:	4311      	orrs	r1, r2
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	430b      	orrs	r3, r1
 8001e96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	695a      	ldr	r2, [r3, #20]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0201 	orr.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2220      	movs	r2, #32
 8001ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop

08001eec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e35c      	b.n	80025b8 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d01c      	beq.n	8001f40 <HAL_RCC_OscConfig+0x54>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d116      	bne.n	8001f40 <HAL_RCC_OscConfig+0x54>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d110      	bne.n	8001f40 <HAL_RCC_OscConfig+0x54>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10a      	bne.n	8001f40 <HAL_RCC_OscConfig+0x54>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0304 	and.w	r3, r3, #4
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d104      	bne.n	8001f40 <HAL_RCC_OscConfig+0x54>
 8001f36:	f240 1167 	movw	r1, #359	; 0x167
 8001f3a:	48a5      	ldr	r0, [pc, #660]	; (80021d0 <HAL_RCC_OscConfig+0x2e4>)
 8001f3c:	f7fe fb5c 	bl	80005f8 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 809a 	beq.w	8002082 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00e      	beq.n	8001f74 <HAL_RCC_OscConfig+0x88>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f5e:	d009      	beq.n	8001f74 <HAL_RCC_OscConfig+0x88>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f68:	d004      	beq.n	8001f74 <HAL_RCC_OscConfig+0x88>
 8001f6a:	f240 116d 	movw	r1, #365	; 0x16d
 8001f6e:	4898      	ldr	r0, [pc, #608]	; (80021d0 <HAL_RCC_OscConfig+0x2e4>)
 8001f70:	f7fe fb42 	bl	80005f8 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f74:	4b97      	ldr	r3, [pc, #604]	; (80021d4 <HAL_RCC_OscConfig+0x2e8>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 030c 	and.w	r3, r3, #12
 8001f7c:	2b04      	cmp	r3, #4
 8001f7e:	d00c      	beq.n	8001f9a <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f80:	4b94      	ldr	r3, [pc, #592]	; (80021d4 <HAL_RCC_OscConfig+0x2e8>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 030c 	and.w	r3, r3, #12
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d112      	bne.n	8001fb2 <HAL_RCC_OscConfig+0xc6>
 8001f8c:	4b91      	ldr	r3, [pc, #580]	; (80021d4 <HAL_RCC_OscConfig+0x2e8>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f98:	d10b      	bne.n	8001fb2 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f9a:	4b8e      	ldr	r3, [pc, #568]	; (80021d4 <HAL_RCC_OscConfig+0x2e8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d06c      	beq.n	8002080 <HAL_RCC_OscConfig+0x194>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d168      	bne.n	8002080 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e302      	b.n	80025b8 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fba:	d106      	bne.n	8001fca <HAL_RCC_OscConfig+0xde>
 8001fbc:	4b85      	ldr	r3, [pc, #532]	; (80021d4 <HAL_RCC_OscConfig+0x2e8>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a84      	ldr	r2, [pc, #528]	; (80021d4 <HAL_RCC_OscConfig+0x2e8>)
 8001fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc6:	6013      	str	r3, [r2, #0]
 8001fc8:	e02e      	b.n	8002028 <HAL_RCC_OscConfig+0x13c>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10c      	bne.n	8001fec <HAL_RCC_OscConfig+0x100>
 8001fd2:	4b80      	ldr	r3, [pc, #512]	; (80021d4 <HAL_RCC_OscConfig+0x2e8>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a7f      	ldr	r2, [pc, #508]	; (80021d4 <HAL_RCC_OscConfig+0x2e8>)
 8001fd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	4b7d      	ldr	r3, [pc, #500]	; (80021d4 <HAL_RCC_OscConfig+0x2e8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a7c      	ldr	r2, [pc, #496]	; (80021d4 <HAL_RCC_OscConfig+0x2e8>)
 8001fe4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	e01d      	b.n	8002028 <HAL_RCC_OscConfig+0x13c>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ff4:	d10c      	bne.n	8002010 <HAL_RCC_OscConfig+0x124>
 8001ff6:	4b77      	ldr	r3, [pc, #476]	; (80021d4 <HAL_RCC_OscConfig+0x2e8>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a76      	ldr	r2, [pc, #472]	; (80021d4 <HAL_RCC_OscConfig+0x2e8>)
 8001ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	4b74      	ldr	r3, [pc, #464]	; (80021d4 <HAL_RCC_OscConfig+0x2e8>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a73      	ldr	r2, [pc, #460]	; (80021d4 <HAL_RCC_OscConfig+0x2e8>)
 8002008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	e00b      	b.n	8002028 <HAL_RCC_OscConfig+0x13c>
 8002010:	4b70      	ldr	r3, [pc, #448]	; (80021d4 <HAL_RCC_OscConfig+0x2e8>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a6f      	ldr	r2, [pc, #444]	; (80021d4 <HAL_RCC_OscConfig+0x2e8>)
 8002016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	4b6d      	ldr	r3, [pc, #436]	; (80021d4 <HAL_RCC_OscConfig+0x2e8>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a6c      	ldr	r2, [pc, #432]	; (80021d4 <HAL_RCC_OscConfig+0x2e8>)
 8002022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002026:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d013      	beq.n	8002058 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002030:	f7fe fe12 	bl	8000c58 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002038:	f7fe fe0e 	bl	8000c58 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b64      	cmp	r3, #100	; 0x64
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e2b6      	b.n	80025b8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204a:	4b62      	ldr	r3, [pc, #392]	; (80021d4 <HAL_RCC_OscConfig+0x2e8>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f0      	beq.n	8002038 <HAL_RCC_OscConfig+0x14c>
 8002056:	e014      	b.n	8002082 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002058:	f7fe fdfe 	bl	8000c58 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002060:	f7fe fdfa 	bl	8000c58 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b64      	cmp	r3, #100	; 0x64
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e2a2      	b.n	80025b8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002072:	4b58      	ldr	r3, [pc, #352]	; (80021d4 <HAL_RCC_OscConfig+0x2e8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0x174>
 800207e:	e000      	b.n	8002082 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d079      	beq.n	8002182 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d008      	beq.n	80020a8 <HAL_RCC_OscConfig+0x1bc>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d004      	beq.n	80020a8 <HAL_RCC_OscConfig+0x1bc>
 800209e:	f240 11a1 	movw	r1, #417	; 0x1a1
 80020a2:	484b      	ldr	r0, [pc, #300]	; (80021d0 <HAL_RCC_OscConfig+0x2e4>)
 80020a4:	f7fe faa8 	bl	80005f8 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	2b1f      	cmp	r3, #31
 80020ae:	d904      	bls.n	80020ba <HAL_RCC_OscConfig+0x1ce>
 80020b0:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 80020b4:	4846      	ldr	r0, [pc, #280]	; (80021d0 <HAL_RCC_OscConfig+0x2e4>)
 80020b6:	f7fe fa9f 	bl	80005f8 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020ba:	4b46      	ldr	r3, [pc, #280]	; (80021d4 <HAL_RCC_OscConfig+0x2e8>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 030c 	and.w	r3, r3, #12
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00b      	beq.n	80020de <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020c6:	4b43      	ldr	r3, [pc, #268]	; (80021d4 <HAL_RCC_OscConfig+0x2e8>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f003 030c 	and.w	r3, r3, #12
 80020ce:	2b08      	cmp	r3, #8
 80020d0:	d11c      	bne.n	800210c <HAL_RCC_OscConfig+0x220>
 80020d2:	4b40      	ldr	r3, [pc, #256]	; (80021d4 <HAL_RCC_OscConfig+0x2e8>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d116      	bne.n	800210c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020de:	4b3d      	ldr	r3, [pc, #244]	; (80021d4 <HAL_RCC_OscConfig+0x2e8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d005      	beq.n	80020f6 <HAL_RCC_OscConfig+0x20a>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d001      	beq.n	80020f6 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e260      	b.n	80025b8 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f6:	4b37      	ldr	r3, [pc, #220]	; (80021d4 <HAL_RCC_OscConfig+0x2e8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	4933      	ldr	r1, [pc, #204]	; (80021d4 <HAL_RCC_OscConfig+0x2e8>)
 8002106:	4313      	orrs	r3, r2
 8002108:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210a:	e03a      	b.n	8002182 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d020      	beq.n	8002156 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002114:	4b30      	ldr	r3, [pc, #192]	; (80021d8 <HAL_RCC_OscConfig+0x2ec>)
 8002116:	2201      	movs	r2, #1
 8002118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211a:	f7fe fd9d 	bl	8000c58 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002122:	f7fe fd99 	bl	8000c58 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e241      	b.n	80025b8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002134:	4b27      	ldr	r3, [pc, #156]	; (80021d4 <HAL_RCC_OscConfig+0x2e8>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0f0      	beq.n	8002122 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002140:	4b24      	ldr	r3, [pc, #144]	; (80021d4 <HAL_RCC_OscConfig+0x2e8>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4921      	ldr	r1, [pc, #132]	; (80021d4 <HAL_RCC_OscConfig+0x2e8>)
 8002150:	4313      	orrs	r3, r2
 8002152:	600b      	str	r3, [r1, #0]
 8002154:	e015      	b.n	8002182 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002156:	4b20      	ldr	r3, [pc, #128]	; (80021d8 <HAL_RCC_OscConfig+0x2ec>)
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215c:	f7fe fd7c 	bl	8000c58 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002164:	f7fe fd78 	bl	8000c58 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e220      	b.n	80025b8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002176:	4b17      	ldr	r3, [pc, #92]	; (80021d4 <HAL_RCC_OscConfig+0x2e8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d048      	beq.n	8002220 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d008      	beq.n	80021a8 <HAL_RCC_OscConfig+0x2bc>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d004      	beq.n	80021a8 <HAL_RCC_OscConfig+0x2bc>
 800219e:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 80021a2:	480b      	ldr	r0, [pc, #44]	; (80021d0 <HAL_RCC_OscConfig+0x2e4>)
 80021a4:	f7fe fa28 	bl	80005f8 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d021      	beq.n	80021f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021b0:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <HAL_RCC_OscConfig+0x2f0>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b6:	f7fe fd4f 	bl	8000c58 <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021bc:	e010      	b.n	80021e0 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021be:	f7fe fd4b 	bl	8000c58 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d909      	bls.n	80021e0 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e1f3      	b.n	80025b8 <HAL_RCC_OscConfig+0x6cc>
 80021d0:	08004850 	.word	0x08004850
 80021d4:	40021000 	.word	0x40021000
 80021d8:	42420000 	.word	0x42420000
 80021dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e0:	4b67      	ldr	r3, [pc, #412]	; (8002380 <HAL_RCC_OscConfig+0x494>)
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0e8      	beq.n	80021be <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021ec:	2001      	movs	r0, #1
 80021ee:	f000 fc11 	bl	8002a14 <RCC_Delay>
 80021f2:	e015      	b.n	8002220 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f4:	4b63      	ldr	r3, [pc, #396]	; (8002384 <HAL_RCC_OscConfig+0x498>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fa:	f7fe fd2d 	bl	8000c58 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002202:	f7fe fd29 	bl	8000c58 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e1d1      	b.n	80025b8 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002214:	4b5a      	ldr	r3, [pc, #360]	; (8002380 <HAL_RCC_OscConfig+0x494>)
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f0      	bne.n	8002202 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 80c0 	beq.w	80023ae <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800222e:	2300      	movs	r3, #0
 8002230:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00c      	beq.n	8002254 <HAL_RCC_OscConfig+0x368>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d008      	beq.n	8002254 <HAL_RCC_OscConfig+0x368>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	2b05      	cmp	r3, #5
 8002248:	d004      	beq.n	8002254 <HAL_RCC_OscConfig+0x368>
 800224a:	f240 2111 	movw	r1, #529	; 0x211
 800224e:	484e      	ldr	r0, [pc, #312]	; (8002388 <HAL_RCC_OscConfig+0x49c>)
 8002250:	f7fe f9d2 	bl	80005f8 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002254:	4b4a      	ldr	r3, [pc, #296]	; (8002380 <HAL_RCC_OscConfig+0x494>)
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10d      	bne.n	800227c <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002260:	4b47      	ldr	r3, [pc, #284]	; (8002380 <HAL_RCC_OscConfig+0x494>)
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	4a46      	ldr	r2, [pc, #280]	; (8002380 <HAL_RCC_OscConfig+0x494>)
 8002266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800226a:	61d3      	str	r3, [r2, #28]
 800226c:	4b44      	ldr	r3, [pc, #272]	; (8002380 <HAL_RCC_OscConfig+0x494>)
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002278:	2301      	movs	r3, #1
 800227a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227c:	4b43      	ldr	r3, [pc, #268]	; (800238c <HAL_RCC_OscConfig+0x4a0>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002284:	2b00      	cmp	r3, #0
 8002286:	d118      	bne.n	80022ba <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002288:	4b40      	ldr	r3, [pc, #256]	; (800238c <HAL_RCC_OscConfig+0x4a0>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a3f      	ldr	r2, [pc, #252]	; (800238c <HAL_RCC_OscConfig+0x4a0>)
 800228e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002292:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002294:	f7fe fce0 	bl	8000c58 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800229c:	f7fe fcdc 	bl	8000c58 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b64      	cmp	r3, #100	; 0x64
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e184      	b.n	80025b8 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ae:	4b37      	ldr	r3, [pc, #220]	; (800238c <HAL_RCC_OscConfig+0x4a0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d106      	bne.n	80022d0 <HAL_RCC_OscConfig+0x3e4>
 80022c2:	4b2f      	ldr	r3, [pc, #188]	; (8002380 <HAL_RCC_OscConfig+0x494>)
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	4a2e      	ldr	r2, [pc, #184]	; (8002380 <HAL_RCC_OscConfig+0x494>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	6213      	str	r3, [r2, #32]
 80022ce:	e02d      	b.n	800232c <HAL_RCC_OscConfig+0x440>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10c      	bne.n	80022f2 <HAL_RCC_OscConfig+0x406>
 80022d8:	4b29      	ldr	r3, [pc, #164]	; (8002380 <HAL_RCC_OscConfig+0x494>)
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	4a28      	ldr	r2, [pc, #160]	; (8002380 <HAL_RCC_OscConfig+0x494>)
 80022de:	f023 0301 	bic.w	r3, r3, #1
 80022e2:	6213      	str	r3, [r2, #32]
 80022e4:	4b26      	ldr	r3, [pc, #152]	; (8002380 <HAL_RCC_OscConfig+0x494>)
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	4a25      	ldr	r2, [pc, #148]	; (8002380 <HAL_RCC_OscConfig+0x494>)
 80022ea:	f023 0304 	bic.w	r3, r3, #4
 80022ee:	6213      	str	r3, [r2, #32]
 80022f0:	e01c      	b.n	800232c <HAL_RCC_OscConfig+0x440>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	2b05      	cmp	r3, #5
 80022f8:	d10c      	bne.n	8002314 <HAL_RCC_OscConfig+0x428>
 80022fa:	4b21      	ldr	r3, [pc, #132]	; (8002380 <HAL_RCC_OscConfig+0x494>)
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	4a20      	ldr	r2, [pc, #128]	; (8002380 <HAL_RCC_OscConfig+0x494>)
 8002300:	f043 0304 	orr.w	r3, r3, #4
 8002304:	6213      	str	r3, [r2, #32]
 8002306:	4b1e      	ldr	r3, [pc, #120]	; (8002380 <HAL_RCC_OscConfig+0x494>)
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	4a1d      	ldr	r2, [pc, #116]	; (8002380 <HAL_RCC_OscConfig+0x494>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	6213      	str	r3, [r2, #32]
 8002312:	e00b      	b.n	800232c <HAL_RCC_OscConfig+0x440>
 8002314:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <HAL_RCC_OscConfig+0x494>)
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	4a19      	ldr	r2, [pc, #100]	; (8002380 <HAL_RCC_OscConfig+0x494>)
 800231a:	f023 0301 	bic.w	r3, r3, #1
 800231e:	6213      	str	r3, [r2, #32]
 8002320:	4b17      	ldr	r3, [pc, #92]	; (8002380 <HAL_RCC_OscConfig+0x494>)
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	4a16      	ldr	r2, [pc, #88]	; (8002380 <HAL_RCC_OscConfig+0x494>)
 8002326:	f023 0304 	bic.w	r3, r3, #4
 800232a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d015      	beq.n	8002360 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002334:	f7fe fc90 	bl	8000c58 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233a:	e00a      	b.n	8002352 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233c:	f7fe fc8c 	bl	8000c58 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	f241 3288 	movw	r2, #5000	; 0x1388
 800234a:	4293      	cmp	r3, r2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e132      	b.n	80025b8 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002352:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <HAL_RCC_OscConfig+0x494>)
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0ee      	beq.n	800233c <HAL_RCC_OscConfig+0x450>
 800235e:	e01d      	b.n	800239c <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002360:	f7fe fc7a 	bl	8000c58 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002366:	e013      	b.n	8002390 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002368:	f7fe fc76 	bl	8000c58 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	f241 3288 	movw	r2, #5000	; 0x1388
 8002376:	4293      	cmp	r3, r2
 8002378:	d90a      	bls.n	8002390 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e11c      	b.n	80025b8 <HAL_RCC_OscConfig+0x6cc>
 800237e:	bf00      	nop
 8002380:	40021000 	.word	0x40021000
 8002384:	42420480 	.word	0x42420480
 8002388:	08004850 	.word	0x08004850
 800238c:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002390:	4b8b      	ldr	r3, [pc, #556]	; (80025c0 <HAL_RCC_OscConfig+0x6d4>)
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1e5      	bne.n	8002368 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800239c:	7dfb      	ldrb	r3, [r7, #23]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d105      	bne.n	80023ae <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a2:	4b87      	ldr	r3, [pc, #540]	; (80025c0 <HAL_RCC_OscConfig+0x6d4>)
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	4a86      	ldr	r2, [pc, #536]	; (80025c0 <HAL_RCC_OscConfig+0x6d4>)
 80023a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ac:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00c      	beq.n	80023d0 <HAL_RCC_OscConfig+0x4e4>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d008      	beq.n	80023d0 <HAL_RCC_OscConfig+0x4e4>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d004      	beq.n	80023d0 <HAL_RCC_OscConfig+0x4e4>
 80023c6:	f240 21af 	movw	r1, #687	; 0x2af
 80023ca:	487e      	ldr	r0, [pc, #504]	; (80025c4 <HAL_RCC_OscConfig+0x6d8>)
 80023cc:	f7fe f914 	bl	80005f8 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 80ee 	beq.w	80025b6 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023da:	4b79      	ldr	r3, [pc, #484]	; (80025c0 <HAL_RCC_OscConfig+0x6d4>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 030c 	and.w	r3, r3, #12
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	f000 80ce 	beq.w	8002584 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	f040 80b2 	bne.w	8002556 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d009      	beq.n	800240e <HAL_RCC_OscConfig+0x522>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002402:	d004      	beq.n	800240e <HAL_RCC_OscConfig+0x522>
 8002404:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8002408:	486e      	ldr	r0, [pc, #440]	; (80025c4 <HAL_RCC_OscConfig+0x6d8>)
 800240a:	f7fe f8f5 	bl	80005f8 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	2b00      	cmp	r3, #0
 8002414:	d04a      	beq.n	80024ac <HAL_RCC_OscConfig+0x5c0>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800241e:	d045      	beq.n	80024ac <HAL_RCC_OscConfig+0x5c0>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002428:	d040      	beq.n	80024ac <HAL_RCC_OscConfig+0x5c0>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002432:	d03b      	beq.n	80024ac <HAL_RCC_OscConfig+0x5c0>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800243c:	d036      	beq.n	80024ac <HAL_RCC_OscConfig+0x5c0>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002446:	d031      	beq.n	80024ac <HAL_RCC_OscConfig+0x5c0>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002450:	d02c      	beq.n	80024ac <HAL_RCC_OscConfig+0x5c0>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002456:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800245a:	d027      	beq.n	80024ac <HAL_RCC_OscConfig+0x5c0>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002464:	d022      	beq.n	80024ac <HAL_RCC_OscConfig+0x5c0>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800246e:	d01d      	beq.n	80024ac <HAL_RCC_OscConfig+0x5c0>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002478:	d018      	beq.n	80024ac <HAL_RCC_OscConfig+0x5c0>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002482:	d013      	beq.n	80024ac <HAL_RCC_OscConfig+0x5c0>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800248c:	d00e      	beq.n	80024ac <HAL_RCC_OscConfig+0x5c0>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8002496:	d009      	beq.n	80024ac <HAL_RCC_OscConfig+0x5c0>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80024a0:	d004      	beq.n	80024ac <HAL_RCC_OscConfig+0x5c0>
 80024a2:	f240 21b9 	movw	r1, #697	; 0x2b9
 80024a6:	4847      	ldr	r0, [pc, #284]	; (80025c4 <HAL_RCC_OscConfig+0x6d8>)
 80024a8:	f7fe f8a6 	bl	80005f8 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ac:	4b46      	ldr	r3, [pc, #280]	; (80025c8 <HAL_RCC_OscConfig+0x6dc>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b2:	f7fe fbd1 	bl	8000c58 <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ba:	f7fe fbcd 	bl	8000c58 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e075      	b.n	80025b8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024cc:	4b3c      	ldr	r3, [pc, #240]	; (80025c0 <HAL_RCC_OscConfig+0x6d4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f0      	bne.n	80024ba <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e0:	d116      	bne.n	8002510 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d009      	beq.n	80024fe <HAL_RCC_OscConfig+0x612>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024f2:	d004      	beq.n	80024fe <HAL_RCC_OscConfig+0x612>
 80024f4:	f240 21cf 	movw	r1, #719	; 0x2cf
 80024f8:	4832      	ldr	r0, [pc, #200]	; (80025c4 <HAL_RCC_OscConfig+0x6d8>)
 80024fa:	f7fe f87d 	bl	80005f8 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024fe:	4b30      	ldr	r3, [pc, #192]	; (80025c0 <HAL_RCC_OscConfig+0x6d4>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	492d      	ldr	r1, [pc, #180]	; (80025c0 <HAL_RCC_OscConfig+0x6d4>)
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002510:	4b2b      	ldr	r3, [pc, #172]	; (80025c0 <HAL_RCC_OscConfig+0x6d4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a19      	ldr	r1, [r3, #32]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	430b      	orrs	r3, r1
 8002522:	4927      	ldr	r1, [pc, #156]	; (80025c0 <HAL_RCC_OscConfig+0x6d4>)
 8002524:	4313      	orrs	r3, r2
 8002526:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002528:	4b27      	ldr	r3, [pc, #156]	; (80025c8 <HAL_RCC_OscConfig+0x6dc>)
 800252a:	2201      	movs	r2, #1
 800252c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252e:	f7fe fb93 	bl	8000c58 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002536:	f7fe fb8f 	bl	8000c58 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e037      	b.n	80025b8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002548:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <HAL_RCC_OscConfig+0x6d4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f0      	beq.n	8002536 <HAL_RCC_OscConfig+0x64a>
 8002554:	e02f      	b.n	80025b6 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002556:	4b1c      	ldr	r3, [pc, #112]	; (80025c8 <HAL_RCC_OscConfig+0x6dc>)
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255c:	f7fe fb7c 	bl	8000c58 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002564:	f7fe fb78 	bl	8000c58 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e020      	b.n	80025b8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002576:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <HAL_RCC_OscConfig+0x6d4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0x678>
 8002582:	e018      	b.n	80025b6 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d101      	bne.n	8002590 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e013      	b.n	80025b8 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_RCC_OscConfig+0x6d4>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d106      	bne.n	80025b2 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d001      	beq.n	80025b6 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40021000 	.word	0x40021000
 80025c4:	08004850 	.word	0x08004850
 80025c8:	42420060 	.word	0x42420060

080025cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e176      	b.n	80028ce <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d116      	bne.n	800261a <HAL_RCC_ClockConfig+0x4e>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d110      	bne.n	800261a <HAL_RCC_ClockConfig+0x4e>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10a      	bne.n	800261a <HAL_RCC_ClockConfig+0x4e>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0308 	and.w	r3, r3, #8
 800260c:	2b00      	cmp	r3, #0
 800260e:	d104      	bne.n	800261a <HAL_RCC_ClockConfig+0x4e>
 8002610:	f44f 714e 	mov.w	r1, #824	; 0x338
 8002614:	4874      	ldr	r0, [pc, #464]	; (80027e8 <HAL_RCC_ClockConfig+0x21c>)
 8002616:	f7fd ffef 	bl	80005f8 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00a      	beq.n	8002636 <HAL_RCC_ClockConfig+0x6a>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d007      	beq.n	8002636 <HAL_RCC_ClockConfig+0x6a>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	2b02      	cmp	r3, #2
 800262a:	d004      	beq.n	8002636 <HAL_RCC_ClockConfig+0x6a>
 800262c:	f240 3139 	movw	r1, #825	; 0x339
 8002630:	486d      	ldr	r0, [pc, #436]	; (80027e8 <HAL_RCC_ClockConfig+0x21c>)
 8002632:	f7fd ffe1 	bl	80005f8 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002636:	4b6d      	ldr	r3, [pc, #436]	; (80027ec <HAL_RCC_ClockConfig+0x220>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	429a      	cmp	r2, r3
 8002642:	d910      	bls.n	8002666 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002644:	4b69      	ldr	r3, [pc, #420]	; (80027ec <HAL_RCC_ClockConfig+0x220>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f023 0207 	bic.w	r2, r3, #7
 800264c:	4967      	ldr	r1, [pc, #412]	; (80027ec <HAL_RCC_ClockConfig+0x220>)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	4313      	orrs	r3, r2
 8002652:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002654:	4b65      	ldr	r3, [pc, #404]	; (80027ec <HAL_RCC_ClockConfig+0x220>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d001      	beq.n	8002666 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e133      	b.n	80028ce <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d049      	beq.n	8002706 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	2b00      	cmp	r3, #0
 800267c:	d005      	beq.n	800268a <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800267e:	4b5c      	ldr	r3, [pc, #368]	; (80027f0 <HAL_RCC_ClockConfig+0x224>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	4a5b      	ldr	r2, [pc, #364]	; (80027f0 <HAL_RCC_ClockConfig+0x224>)
 8002684:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002688:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d005      	beq.n	80026a2 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002696:	4b56      	ldr	r3, [pc, #344]	; (80027f0 <HAL_RCC_ClockConfig+0x224>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	4a55      	ldr	r2, [pc, #340]	; (80027f0 <HAL_RCC_ClockConfig+0x224>)
 800269c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026a0:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d024      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x128>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	2b80      	cmp	r3, #128	; 0x80
 80026b0:	d020      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x128>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	2b90      	cmp	r3, #144	; 0x90
 80026b8:	d01c      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x128>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	2ba0      	cmp	r3, #160	; 0xa0
 80026c0:	d018      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x128>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	2bb0      	cmp	r3, #176	; 0xb0
 80026c8:	d014      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x128>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2bc0      	cmp	r3, #192	; 0xc0
 80026d0:	d010      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x128>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2bd0      	cmp	r3, #208	; 0xd0
 80026d8:	d00c      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x128>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2be0      	cmp	r3, #224	; 0xe0
 80026e0:	d008      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x128>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2bf0      	cmp	r3, #240	; 0xf0
 80026e8:	d004      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x128>
 80026ea:	f240 315f 	movw	r1, #863	; 0x35f
 80026ee:	483e      	ldr	r0, [pc, #248]	; (80027e8 <HAL_RCC_ClockConfig+0x21c>)
 80026f0:	f7fd ff82 	bl	80005f8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f4:	4b3e      	ldr	r3, [pc, #248]	; (80027f0 <HAL_RCC_ClockConfig+0x224>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	493b      	ldr	r1, [pc, #236]	; (80027f0 <HAL_RCC_ClockConfig+0x224>)
 8002702:	4313      	orrs	r3, r2
 8002704:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d051      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00c      	beq.n	8002734 <HAL_RCC_ClockConfig+0x168>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d008      	beq.n	8002734 <HAL_RCC_ClockConfig+0x168>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d004      	beq.n	8002734 <HAL_RCC_ClockConfig+0x168>
 800272a:	f240 3166 	movw	r1, #870	; 0x366
 800272e:	482e      	ldr	r0, [pc, #184]	; (80027e8 <HAL_RCC_ClockConfig+0x21c>)
 8002730:	f7fd ff62 	bl	80005f8 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d107      	bne.n	800274c <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273c:	4b2c      	ldr	r3, [pc, #176]	; (80027f0 <HAL_RCC_ClockConfig+0x224>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d115      	bne.n	8002774 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0c0      	b.n	80028ce <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b02      	cmp	r3, #2
 8002752:	d107      	bne.n	8002764 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002754:	4b26      	ldr	r3, [pc, #152]	; (80027f0 <HAL_RCC_ClockConfig+0x224>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d109      	bne.n	8002774 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e0b4      	b.n	80028ce <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002764:	4b22      	ldr	r3, [pc, #136]	; (80027f0 <HAL_RCC_ClockConfig+0x224>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e0ac      	b.n	80028ce <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002774:	4b1e      	ldr	r3, [pc, #120]	; (80027f0 <HAL_RCC_ClockConfig+0x224>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f023 0203 	bic.w	r2, r3, #3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	491b      	ldr	r1, [pc, #108]	; (80027f0 <HAL_RCC_ClockConfig+0x224>)
 8002782:	4313      	orrs	r3, r2
 8002784:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002786:	f7fe fa67 	bl	8000c58 <HAL_GetTick>
 800278a:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278c:	e00a      	b.n	80027a4 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800278e:	f7fe fa63 	bl	8000c58 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	f241 3288 	movw	r2, #5000	; 0x1388
 800279c:	4293      	cmp	r3, r2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e094      	b.n	80028ce <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a4:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <HAL_RCC_ClockConfig+0x224>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 020c 	and.w	r2, r3, #12
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d1eb      	bne.n	800278e <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027b6:	4b0d      	ldr	r3, [pc, #52]	; (80027ec <HAL_RCC_ClockConfig+0x220>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d217      	bcs.n	80027f4 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c4:	4b09      	ldr	r3, [pc, #36]	; (80027ec <HAL_RCC_ClockConfig+0x220>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f023 0207 	bic.w	r2, r3, #7
 80027cc:	4907      	ldr	r1, [pc, #28]	; (80027ec <HAL_RCC_ClockConfig+0x220>)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <HAL_RCC_ClockConfig+0x220>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d008      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e073      	b.n	80028ce <HAL_RCC_ClockConfig+0x302>
 80027e6:	bf00      	nop
 80027e8:	08004850 	.word	0x08004850
 80027ec:	40022000 	.word	0x40022000
 80027f0:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d025      	beq.n	800284c <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d018      	beq.n	800283a <HAL_RCC_ClockConfig+0x26e>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002810:	d013      	beq.n	800283a <HAL_RCC_ClockConfig+0x26e>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800281a:	d00e      	beq.n	800283a <HAL_RCC_ClockConfig+0x26e>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002824:	d009      	beq.n	800283a <HAL_RCC_ClockConfig+0x26e>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800282e:	d004      	beq.n	800283a <HAL_RCC_ClockConfig+0x26e>
 8002830:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8002834:	4828      	ldr	r0, [pc, #160]	; (80028d8 <HAL_RCC_ClockConfig+0x30c>)
 8002836:	f7fd fedf 	bl	80005f8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800283a:	4b28      	ldr	r3, [pc, #160]	; (80028dc <HAL_RCC_ClockConfig+0x310>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	4925      	ldr	r1, [pc, #148]	; (80028dc <HAL_RCC_ClockConfig+0x310>)
 8002848:	4313      	orrs	r3, r2
 800284a:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d026      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d018      	beq.n	8002892 <HAL_RCC_ClockConfig+0x2c6>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002868:	d013      	beq.n	8002892 <HAL_RCC_ClockConfig+0x2c6>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002872:	d00e      	beq.n	8002892 <HAL_RCC_ClockConfig+0x2c6>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800287c:	d009      	beq.n	8002892 <HAL_RCC_ClockConfig+0x2c6>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002886:	d004      	beq.n	8002892 <HAL_RCC_ClockConfig+0x2c6>
 8002888:	f240 31ab 	movw	r1, #939	; 0x3ab
 800288c:	4812      	ldr	r0, [pc, #72]	; (80028d8 <HAL_RCC_ClockConfig+0x30c>)
 800288e:	f7fd feb3 	bl	80005f8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002892:	4b12      	ldr	r3, [pc, #72]	; (80028dc <HAL_RCC_ClockConfig+0x310>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	490e      	ldr	r1, [pc, #56]	; (80028dc <HAL_RCC_ClockConfig+0x310>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028a6:	f000 f821 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 80028aa:	4601      	mov	r1, r0
 80028ac:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <HAL_RCC_ClockConfig+0x310>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	091b      	lsrs	r3, r3, #4
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	4a0a      	ldr	r2, [pc, #40]	; (80028e0 <HAL_RCC_ClockConfig+0x314>)
 80028b8:	5cd3      	ldrb	r3, [r2, r3]
 80028ba:	fa21 f303 	lsr.w	r3, r1, r3
 80028be:	4a09      	ldr	r2, [pc, #36]	; (80028e4 <HAL_RCC_ClockConfig+0x318>)
 80028c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028c2:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <HAL_RCC_ClockConfig+0x31c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe f984 	bl	8000bd4 <HAL_InitTick>

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	08004850 	.word	0x08004850
 80028dc:	40021000 	.word	0x40021000
 80028e0:	080049d4 	.word	0x080049d4
 80028e4:	20000000 	.word	0x20000000
 80028e8:	20000004 	.word	0x20000004

080028ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028ec:	b490      	push	{r4, r7}
 80028ee:	b08a      	sub	sp, #40	; 0x28
 80028f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028f2:	4b2a      	ldr	r3, [pc, #168]	; (800299c <HAL_RCC_GetSysClockFreq+0xb0>)
 80028f4:	1d3c      	adds	r4, r7, #4
 80028f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028fc:	4b28      	ldr	r3, [pc, #160]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002902:	2300      	movs	r3, #0
 8002904:	61fb      	str	r3, [r7, #28]
 8002906:	2300      	movs	r3, #0
 8002908:	61bb      	str	r3, [r7, #24]
 800290a:	2300      	movs	r3, #0
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002916:	4b23      	ldr	r3, [pc, #140]	; (80029a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 030c 	and.w	r3, r3, #12
 8002922:	2b04      	cmp	r3, #4
 8002924:	d002      	beq.n	800292c <HAL_RCC_GetSysClockFreq+0x40>
 8002926:	2b08      	cmp	r3, #8
 8002928:	d003      	beq.n	8002932 <HAL_RCC_GetSysClockFreq+0x46>
 800292a:	e02d      	b.n	8002988 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800292c:	4b1e      	ldr	r3, [pc, #120]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800292e:	623b      	str	r3, [r7, #32]
      break;
 8002930:	e02d      	b.n	800298e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	0c9b      	lsrs	r3, r3, #18
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800293e:	4413      	add	r3, r2
 8002940:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002944:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d013      	beq.n	8002978 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002950:	4b14      	ldr	r3, [pc, #80]	; (80029a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	0c5b      	lsrs	r3, r3, #17
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800295e:	4413      	add	r3, r2
 8002960:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002964:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	4a0f      	ldr	r2, [pc, #60]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800296a:	fb02 f203 	mul.w	r2, r2, r3
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	fbb2 f3f3 	udiv	r3, r2, r3
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
 8002976:	e004      	b.n	8002982 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	4a0c      	ldr	r2, [pc, #48]	; (80029ac <HAL_RCC_GetSysClockFreq+0xc0>)
 800297c:	fb02 f303 	mul.w	r3, r2, r3
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	623b      	str	r3, [r7, #32]
      break;
 8002986:	e002      	b.n	800298e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002988:	4b07      	ldr	r3, [pc, #28]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800298a:	623b      	str	r3, [r7, #32]
      break;
 800298c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800298e:	6a3b      	ldr	r3, [r7, #32]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3728      	adds	r7, #40	; 0x28
 8002994:	46bd      	mov	sp, r7
 8002996:	bc90      	pop	{r4, r7}
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	08004888 	.word	0x08004888
 80029a0:	08004898 	.word	0x08004898
 80029a4:	40021000 	.word	0x40021000
 80029a8:	007a1200 	.word	0x007a1200
 80029ac:	003d0900 	.word	0x003d0900

080029b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b4:	4b02      	ldr	r3, [pc, #8]	; (80029c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80029b6:	681b      	ldr	r3, [r3, #0]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr
 80029c0:	20000000 	.word	0x20000000

080029c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029c8:	f7ff fff2 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 80029cc:	4601      	mov	r1, r0
 80029ce:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	0a1b      	lsrs	r3, r3, #8
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	4a03      	ldr	r2, [pc, #12]	; (80029e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029da:	5cd3      	ldrb	r3, [r2, r3]
 80029dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40021000 	.word	0x40021000
 80029e8:	080049e4 	.word	0x080049e4

080029ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029f0:	f7ff ffde 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 80029f4:	4601      	mov	r1, r0
 80029f6:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <HAL_RCC_GetPCLK2Freq+0x20>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	0adb      	lsrs	r3, r3, #11
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	4a03      	ldr	r2, [pc, #12]	; (8002a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a02:	5cd3      	ldrb	r3, [r2, r3]
 8002a04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	080049e4 	.word	0x080049e4

08002a14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a1c:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <RCC_Delay+0x34>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a0a      	ldr	r2, [pc, #40]	; (8002a4c <RCC_Delay+0x38>)
 8002a22:	fba2 2303 	umull	r2, r3, r2, r3
 8002a26:	0a5b      	lsrs	r3, r3, #9
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	fb02 f303 	mul.w	r3, r2, r3
 8002a2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a30:	bf00      	nop
  }
  while (Delay --);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	1e5a      	subs	r2, r3, #1
 8002a36:	60fa      	str	r2, [r7, #12]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1f9      	bne.n	8002a30 <RCC_Delay+0x1c>
}
 8002a3c:	bf00      	nop
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	20000000 	.word	0x20000000
 8002a4c:	10624dd3 	.word	0x10624dd3

08002a50 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10f      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d109      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d103      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002a84:	216c      	movs	r1, #108	; 0x6c
 8002a86:	4873      	ldr	r0, [pc, #460]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8002a88:	f7fd fdb6 	bl	80005f8 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 8095 	beq.w	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d012      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aaa:	d00d      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ab4:	d008      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002abe:	d003      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002ac0:	2172      	movs	r1, #114	; 0x72
 8002ac2:	4864      	ldr	r0, [pc, #400]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8002ac4:	f7fd fd98 	bl	80005f8 <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002acc:	4b62      	ldr	r3, [pc, #392]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10d      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad8:	4b5f      	ldr	r3, [pc, #380]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	4a5e      	ldr	r2, [pc, #376]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae2:	61d3      	str	r3, [r2, #28]
 8002ae4:	4b5c      	ldr	r3, [pc, #368]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af0:	2301      	movs	r3, #1
 8002af2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af4:	4b59      	ldr	r3, [pc, #356]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d118      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b00:	4b56      	ldr	r3, [pc, #344]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a55      	ldr	r2, [pc, #340]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8002b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b0c:	f7fe f8a4 	bl	8000c58 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b12:	e008      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b14:	f7fe f8a0 	bl	8000c58 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b64      	cmp	r3, #100	; 0x64
 8002b20:	d901      	bls.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e092      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b26:	4b4d      	ldr	r3, [pc, #308]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b32:	4b49      	ldr	r3, [pc, #292]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b3a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d02e      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d027      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b50:	4b41      	ldr	r3, [pc, #260]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b58:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b5a:	4b41      	ldr	r3, [pc, #260]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b60:	4b3f      	ldr	r3, [pc, #252]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b66:	4a3c      	ldr	r2, [pc, #240]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d014      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b76:	f7fe f86f 	bl	8000c58 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7c:	e00a      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7e:	f7fe f86b 	bl	8000c58 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e05b      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b94:	4b30      	ldr	r3, [pc, #192]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0ee      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ba0:	4b2d      	ldr	r3, [pc, #180]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	492a      	ldr	r1, [pc, #168]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bb2:	7dfb      	ldrb	r3, [r7, #23]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d105      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb8:	4b27      	ldr	r3, [pc, #156]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	4a26      	ldr	r2, [pc, #152]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002bbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d01f      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d012      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002be0:	d00d      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bea:	d008      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002bf4:	d003      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8002bf6:	21b9      	movs	r1, #185	; 0xb9
 8002bf8:	4816      	ldr	r0, [pc, #88]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8002bfa:	f7fd fcfd 	bl	80005f8 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bfe:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	4913      	ldr	r1, [pc, #76]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d016      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c24:	d008      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d004      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c2e:	f240 1115 	movw	r1, #277	; 0x115
 8002c32:	4808      	ldr	r0, [pc, #32]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8002c34:	f7fd fce0 	bl	80005f8 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c38:	4b07      	ldr	r3, [pc, #28]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	4904      	ldr	r1, [pc, #16]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3718      	adds	r7, #24
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	0800489c 	.word	0x0800489c
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	40007000 	.word	0x40007000
 8002c60:	42420440 	.word	0x42420440

08002c64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e0fd      	b.n	8002e72 <HAL_SPI_Init+0x20e>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a80      	ldr	r2, [pc, #512]	; (8002e7c <HAL_SPI_Init+0x218>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d009      	beq.n	8002c94 <HAL_SPI_Init+0x30>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a7e      	ldr	r2, [pc, #504]	; (8002e80 <HAL_SPI_Init+0x21c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d004      	beq.n	8002c94 <HAL_SPI_Init+0x30>
 8002c8a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002c8e:	487d      	ldr	r0, [pc, #500]	; (8002e84 <HAL_SPI_Init+0x220>)
 8002c90:	f7fd fcb2 	bl	80005f8 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d009      	beq.n	8002cb0 <HAL_SPI_Init+0x4c>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ca4:	d004      	beq.n	8002cb0 <HAL_SPI_Init+0x4c>
 8002ca6:	f240 1159 	movw	r1, #345	; 0x159
 8002caa:	4876      	ldr	r0, [pc, #472]	; (8002e84 <HAL_SPI_Init+0x220>)
 8002cac:	f7fd fca4 	bl	80005f8 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00e      	beq.n	8002cd6 <HAL_SPI_Init+0x72>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc0:	d009      	beq.n	8002cd6 <HAL_SPI_Init+0x72>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cca:	d004      	beq.n	8002cd6 <HAL_SPI_Init+0x72>
 8002ccc:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8002cd0:	486c      	ldr	r0, [pc, #432]	; (8002e84 <HAL_SPI_Init+0x220>)
 8002cd2:	f7fd fc91 	bl	80005f8 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cde:	d008      	beq.n	8002cf2 <HAL_SPI_Init+0x8e>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d004      	beq.n	8002cf2 <HAL_SPI_Init+0x8e>
 8002ce8:	f240 115b 	movw	r1, #347	; 0x15b
 8002cec:	4865      	ldr	r0, [pc, #404]	; (8002e84 <HAL_SPI_Init+0x220>)
 8002cee:	f7fd fc83 	bl	80005f8 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cfa:	d00d      	beq.n	8002d18 <HAL_SPI_Init+0xb4>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d009      	beq.n	8002d18 <HAL_SPI_Init+0xb4>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d0c:	d004      	beq.n	8002d18 <HAL_SPI_Init+0xb4>
 8002d0e:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8002d12:	485c      	ldr	r0, [pc, #368]	; (8002e84 <HAL_SPI_Init+0x220>)
 8002d14:	f7fd fc70 	bl	80005f8 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d020      	beq.n	8002d62 <HAL_SPI_Init+0xfe>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d01c      	beq.n	8002d62 <HAL_SPI_Init+0xfe>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	2b10      	cmp	r3, #16
 8002d2e:	d018      	beq.n	8002d62 <HAL_SPI_Init+0xfe>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	2b18      	cmp	r3, #24
 8002d36:	d014      	beq.n	8002d62 <HAL_SPI_Init+0xfe>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	2b20      	cmp	r3, #32
 8002d3e:	d010      	beq.n	8002d62 <HAL_SPI_Init+0xfe>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	2b28      	cmp	r3, #40	; 0x28
 8002d46:	d00c      	beq.n	8002d62 <HAL_SPI_Init+0xfe>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	2b30      	cmp	r3, #48	; 0x30
 8002d4e:	d008      	beq.n	8002d62 <HAL_SPI_Init+0xfe>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	69db      	ldr	r3, [r3, #28]
 8002d54:	2b38      	cmp	r3, #56	; 0x38
 8002d56:	d004      	beq.n	8002d62 <HAL_SPI_Init+0xfe>
 8002d58:	f240 115d 	movw	r1, #349	; 0x15d
 8002d5c:	4849      	ldr	r0, [pc, #292]	; (8002e84 <HAL_SPI_Init+0x220>)
 8002d5e:	f7fd fc4b 	bl	80005f8 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d008      	beq.n	8002d7c <HAL_SPI_Init+0x118>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	2b80      	cmp	r3, #128	; 0x80
 8002d70:	d004      	beq.n	8002d7c <HAL_SPI_Init+0x118>
 8002d72:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002d76:	4843      	ldr	r0, [pc, #268]	; (8002e84 <HAL_SPI_Init+0x220>)
 8002d78:	f7fd fc3e 	bl	80005f8 <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d004      	beq.n	8002d8e <HAL_SPI_Init+0x12a>
 8002d84:	f240 1161 	movw	r1, #353	; 0x161
 8002d88:	483e      	ldr	r0, [pc, #248]	; (8002e84 <HAL_SPI_Init+0x220>)
 8002d8a:	f7fd fc35 	bl	80005f8 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d119      	bne.n	8002dca <HAL_SPI_Init+0x166>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d008      	beq.n	8002db0 <HAL_SPI_Init+0x14c>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d004      	beq.n	8002db0 <HAL_SPI_Init+0x14c>
 8002da6:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8002daa:	4836      	ldr	r0, [pc, #216]	; (8002e84 <HAL_SPI_Init+0x220>)
 8002dac:	f7fd fc24 	bl	80005f8 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d008      	beq.n	8002dca <HAL_SPI_Init+0x166>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d004      	beq.n	8002dca <HAL_SPI_Init+0x166>
 8002dc0:	f240 1165 	movw	r1, #357	; 0x165
 8002dc4:	482f      	ldr	r0, [pc, #188]	; (8002e84 <HAL_SPI_Init+0x220>)
 8002dc6:	f7fd fc17 	bl	80005f8 <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d106      	bne.n	8002dea <HAL_SPI_Init+0x186>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7fd fc87 	bl	80006f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2202      	movs	r2, #2
 8002dee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e00:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	431a      	orrs	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	ea42 0103 	orr.w	r1, r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	0c1a      	lsrs	r2, r3, #16
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f002 0204 	and.w	r2, r2, #4
 8002e50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	69da      	ldr	r2, [r3, #28]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40013000 	.word	0x40013000
 8002e80:	40003800 	.word	0x40003800
 8002e84:	080048ec 	.word	0x080048ec

08002e88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e06f      	b.n	8002f7a <HAL_TIM_Base_Init+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a39      	ldr	r2, [pc, #228]	; (8002f84 <HAL_TIM_Base_Init+0xfc>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d013      	beq.n	8002ecc <HAL_TIM_Base_Init+0x44>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eac:	d00e      	beq.n	8002ecc <HAL_TIM_Base_Init+0x44>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a35      	ldr	r2, [pc, #212]	; (8002f88 <HAL_TIM_Base_Init+0x100>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d009      	beq.n	8002ecc <HAL_TIM_Base_Init+0x44>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a33      	ldr	r2, [pc, #204]	; (8002f8c <HAL_TIM_Base_Init+0x104>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d004      	beq.n	8002ecc <HAL_TIM_Base_Init+0x44>
 8002ec2:	f44f 7189 	mov.w	r1, #274	; 0x112
 8002ec6:	4832      	ldr	r0, [pc, #200]	; (8002f90 <HAL_TIM_Base_Init+0x108>)
 8002ec8:	f7fd fb96 	bl	80005f8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d014      	beq.n	8002efe <HAL_TIM_Base_Init+0x76>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b10      	cmp	r3, #16
 8002eda:	d010      	beq.n	8002efe <HAL_TIM_Base_Init+0x76>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	2b20      	cmp	r3, #32
 8002ee2:	d00c      	beq.n	8002efe <HAL_TIM_Base_Init+0x76>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	2b40      	cmp	r3, #64	; 0x40
 8002eea:	d008      	beq.n	8002efe <HAL_TIM_Base_Init+0x76>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	2b60      	cmp	r3, #96	; 0x60
 8002ef2:	d004      	beq.n	8002efe <HAL_TIM_Base_Init+0x76>
 8002ef4:	f240 1113 	movw	r1, #275	; 0x113
 8002ef8:	4825      	ldr	r0, [pc, #148]	; (8002f90 <HAL_TIM_Base_Init+0x108>)
 8002efa:	f7fd fb7d 	bl	80005f8 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00e      	beq.n	8002f24 <HAL_TIM_Base_Init+0x9c>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f0e:	d009      	beq.n	8002f24 <HAL_TIM_Base_Init+0x9c>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f18:	d004      	beq.n	8002f24 <HAL_TIM_Base_Init+0x9c>
 8002f1a:	f44f 718a 	mov.w	r1, #276	; 0x114
 8002f1e:	481c      	ldr	r0, [pc, #112]	; (8002f90 <HAL_TIM_Base_Init+0x108>)
 8002f20:	f7fd fb6a 	bl	80005f8 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d008      	beq.n	8002f3e <HAL_TIM_Base_Init+0xb6>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	2b80      	cmp	r3, #128	; 0x80
 8002f32:	d004      	beq.n	8002f3e <HAL_TIM_Base_Init+0xb6>
 8002f34:	f240 1115 	movw	r1, #277	; 0x115
 8002f38:	4815      	ldr	r0, [pc, #84]	; (8002f90 <HAL_TIM_Base_Init+0x108>)
 8002f3a:	f7fd fb5d 	bl	80005f8 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7fd fd5a 	bl	8000a0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3304      	adds	r3, #4
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	f000 f8b4 	bl	80030d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40012c00 	.word	0x40012c00
 8002f88:	40000400 	.word	0x40000400
 8002f8c:	40000800 	.word	0x40000800
 8002f90:	08004924 	.word	0x08004924

08002f94 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a49      	ldr	r2, [pc, #292]	; (80030c8 <HAL_TIM_SlaveConfigSynchro+0x134>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d013      	beq.n	8002fd0 <HAL_TIM_SlaveConfigSynchro+0x3c>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb0:	d00e      	beq.n	8002fd0 <HAL_TIM_SlaveConfigSynchro+0x3c>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a45      	ldr	r2, [pc, #276]	; (80030cc <HAL_TIM_SlaveConfigSynchro+0x138>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d009      	beq.n	8002fd0 <HAL_TIM_SlaveConfigSynchro+0x3c>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a43      	ldr	r2, [pc, #268]	; (80030d0 <HAL_TIM_SlaveConfigSynchro+0x13c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d004      	beq.n	8002fd0 <HAL_TIM_SlaveConfigSynchro+0x3c>
 8002fc6:	f241 213b 	movw	r1, #4667	; 0x123b
 8002fca:	4842      	ldr	r0, [pc, #264]	; (80030d4 <HAL_TIM_SlaveConfigSynchro+0x140>)
 8002fcc:	f7fd fb14 	bl	80005f8 <assert_failed>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d014      	beq.n	8003002 <HAL_TIM_SlaveConfigSynchro+0x6e>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b04      	cmp	r3, #4
 8002fde:	d010      	beq.n	8003002 <HAL_TIM_SlaveConfigSynchro+0x6e>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b05      	cmp	r3, #5
 8002fe6:	d00c      	beq.n	8003002 <HAL_TIM_SlaveConfigSynchro+0x6e>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b06      	cmp	r3, #6
 8002fee:	d008      	beq.n	8003002 <HAL_TIM_SlaveConfigSynchro+0x6e>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b07      	cmp	r3, #7
 8002ff6:	d004      	beq.n	8003002 <HAL_TIM_SlaveConfigSynchro+0x6e>
 8002ff8:	f241 213c 	movw	r1, #4668	; 0x123c
 8002ffc:	4835      	ldr	r0, [pc, #212]	; (80030d4 <HAL_TIM_SlaveConfigSynchro+0x140>)
 8002ffe:	f7fd fafb 	bl	80005f8 <assert_failed>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d020      	beq.n	800304c <HAL_TIM_SlaveConfigSynchro+0xb8>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b10      	cmp	r3, #16
 8003010:	d01c      	beq.n	800304c <HAL_TIM_SlaveConfigSynchro+0xb8>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b20      	cmp	r3, #32
 8003018:	d018      	beq.n	800304c <HAL_TIM_SlaveConfigSynchro+0xb8>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b30      	cmp	r3, #48	; 0x30
 8003020:	d014      	beq.n	800304c <HAL_TIM_SlaveConfigSynchro+0xb8>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b40      	cmp	r3, #64	; 0x40
 8003028:	d010      	beq.n	800304c <HAL_TIM_SlaveConfigSynchro+0xb8>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b50      	cmp	r3, #80	; 0x50
 8003030:	d00c      	beq.n	800304c <HAL_TIM_SlaveConfigSynchro+0xb8>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b60      	cmp	r3, #96	; 0x60
 8003038:	d008      	beq.n	800304c <HAL_TIM_SlaveConfigSynchro+0xb8>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b70      	cmp	r3, #112	; 0x70
 8003040:	d004      	beq.n	800304c <HAL_TIM_SlaveConfigSynchro+0xb8>
 8003042:	f241 213d 	movw	r1, #4669	; 0x123d
 8003046:	4823      	ldr	r0, [pc, #140]	; (80030d4 <HAL_TIM_SlaveConfigSynchro+0x140>)
 8003048:	f7fd fad6 	bl	80005f8 <assert_failed>

  __HAL_LOCK(htim);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <HAL_TIM_SlaveConfigSynchro+0xc6>
 8003056:	2302      	movs	r3, #2
 8003058:	e031      	b.n	80030be <HAL_TIM_SlaveConfigSynchro+0x12a>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2202      	movs	r2, #2
 8003066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800306a:	6839      	ldr	r1, [r7, #0]
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f895 	bl	800319c <TIM_SlaveTimer_SetConfig>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d009      	beq.n	800308c <HAL_TIM_SlaveConfigSynchro+0xf8>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e018      	b.n	80030be <HAL_TIM_SlaveConfigSynchro+0x12a>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800309a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030aa:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40012c00 	.word	0x40012c00
 80030cc:	40000400 	.word	0x40000400
 80030d0:	40000800 	.word	0x40000800
 80030d4:	08004924 	.word	0x08004924

080030d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a29      	ldr	r2, [pc, #164]	; (8003190 <TIM_Base_SetConfig+0xb8>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d00b      	beq.n	8003108 <TIM_Base_SetConfig+0x30>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f6:	d007      	beq.n	8003108 <TIM_Base_SetConfig+0x30>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a26      	ldr	r2, [pc, #152]	; (8003194 <TIM_Base_SetConfig+0xbc>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d003      	beq.n	8003108 <TIM_Base_SetConfig+0x30>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a25      	ldr	r2, [pc, #148]	; (8003198 <TIM_Base_SetConfig+0xc0>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d108      	bne.n	800311a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800310e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	4313      	orrs	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a1c      	ldr	r2, [pc, #112]	; (8003190 <TIM_Base_SetConfig+0xb8>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d00b      	beq.n	800313a <TIM_Base_SetConfig+0x62>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003128:	d007      	beq.n	800313a <TIM_Base_SetConfig+0x62>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a19      	ldr	r2, [pc, #100]	; (8003194 <TIM_Base_SetConfig+0xbc>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d003      	beq.n	800313a <TIM_Base_SetConfig+0x62>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a18      	ldr	r2, [pc, #96]	; (8003198 <TIM_Base_SetConfig+0xc0>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d108      	bne.n	800314c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	4313      	orrs	r3, r2
 800314a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	4313      	orrs	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a07      	ldr	r2, [pc, #28]	; (8003190 <TIM_Base_SetConfig+0xb8>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d103      	bne.n	8003180 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	615a      	str	r2, [r3, #20]
}
 8003186:	bf00      	nop
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr
 8003190:	40012c00 	.word	0x40012c00
 8003194:	40000400 	.word	0x40000400
 8003198:	40000800 	.word	0x40000800

0800319c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	4313      	orrs	r3, r2
 80031be:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f023 0307 	bic.w	r3, r3, #7
 80031c6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b30      	cmp	r3, #48	; 0x30
 80031e0:	f000 8158 	beq.w	8003494 <TIM_SlaveTimer_SetConfig+0x2f8>
 80031e4:	2b30      	cmp	r3, #48	; 0x30
 80031e6:	d809      	bhi.n	80031fc <TIM_SlaveTimer_SetConfig+0x60>
 80031e8:	2b10      	cmp	r3, #16
 80031ea:	f000 8153 	beq.w	8003494 <TIM_SlaveTimer_SetConfig+0x2f8>
 80031ee:	2b20      	cmp	r3, #32
 80031f0:	f000 8150 	beq.w	8003494 <TIM_SlaveTimer_SetConfig+0x2f8>
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 814d 	beq.w	8003494 <TIM_SlaveTimer_SetConfig+0x2f8>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 80031fa:	e165      	b.n	80034c8 <TIM_SlaveTimer_SetConfig+0x32c>
  switch (sSlaveConfig->InputTrigger)
 80031fc:	2b50      	cmp	r3, #80	; 0x50
 80031fe:	f000 80b5 	beq.w	800336c <TIM_SlaveTimer_SetConfig+0x1d0>
 8003202:	2b50      	cmp	r3, #80	; 0x50
 8003204:	d802      	bhi.n	800320c <TIM_SlaveTimer_SetConfig+0x70>
 8003206:	2b40      	cmp	r3, #64	; 0x40
 8003208:	d065      	beq.n	80032d6 <TIM_SlaveTimer_SetConfig+0x13a>
      break;
 800320a:	e15d      	b.n	80034c8 <TIM_SlaveTimer_SetConfig+0x32c>
  switch (sSlaveConfig->InputTrigger)
 800320c:	2b60      	cmp	r3, #96	; 0x60
 800320e:	f000 80f3 	beq.w	80033f8 <TIM_SlaveTimer_SetConfig+0x25c>
 8003212:	2b70      	cmp	r3, #112	; 0x70
 8003214:	d000      	beq.n	8003218 <TIM_SlaveTimer_SetConfig+0x7c>
      break;
 8003216:	e157      	b.n	80034c8 <TIM_SlaveTimer_SetConfig+0x32c>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a99      	ldr	r2, [pc, #612]	; (8003484 <TIM_SlaveTimer_SetConfig+0x2e8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d013      	beq.n	800324a <TIM_SlaveTimer_SetConfig+0xae>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800322a:	d00e      	beq.n	800324a <TIM_SlaveTimer_SetConfig+0xae>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a95      	ldr	r2, [pc, #596]	; (8003488 <TIM_SlaveTimer_SetConfig+0x2ec>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d009      	beq.n	800324a <TIM_SlaveTimer_SetConfig+0xae>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a94      	ldr	r2, [pc, #592]	; (800348c <TIM_SlaveTimer_SetConfig+0x2f0>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d004      	beq.n	800324a <TIM_SlaveTimer_SetConfig+0xae>
 8003240:	f641 011c 	movw	r1, #6172	; 0x181c
 8003244:	4892      	ldr	r0, [pc, #584]	; (8003490 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8003246:	f7fd f9d7 	bl	80005f8 <assert_failed>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d013      	beq.n	800327a <TIM_SlaveTimer_SetConfig+0xde>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800325a:	d00e      	beq.n	800327a <TIM_SlaveTimer_SetConfig+0xde>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003264:	d009      	beq.n	800327a <TIM_SlaveTimer_SetConfig+0xde>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800326e:	d004      	beq.n	800327a <TIM_SlaveTimer_SetConfig+0xde>
 8003270:	f641 011d 	movw	r1, #6173	; 0x181d
 8003274:	4886      	ldr	r0, [pc, #536]	; (8003490 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8003276:	f7fd f9bf 	bl	80005f8 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003282:	d014      	beq.n	80032ae <TIM_SlaveTimer_SetConfig+0x112>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d010      	beq.n	80032ae <TIM_SlaveTimer_SetConfig+0x112>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00c      	beq.n	80032ae <TIM_SlaveTimer_SetConfig+0x112>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b02      	cmp	r3, #2
 800329a:	d008      	beq.n	80032ae <TIM_SlaveTimer_SetConfig+0x112>
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2b0a      	cmp	r3, #10
 80032a2:	d004      	beq.n	80032ae <TIM_SlaveTimer_SetConfig+0x112>
 80032a4:	f641 011e 	movw	r1, #6174	; 0x181e
 80032a8:	4879      	ldr	r0, [pc, #484]	; (8003490 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80032aa:	f7fd f9a5 	bl	80005f8 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	2b0f      	cmp	r3, #15
 80032b4:	d904      	bls.n	80032c0 <TIM_SlaveTimer_SetConfig+0x124>
 80032b6:	f641 011f 	movw	r1, #6175	; 0x181f
 80032ba:	4875      	ldr	r0, [pc, #468]	; (8003490 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80032bc:	f7fd f99c 	bl	80005f8 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6818      	ldr	r0, [r3, #0]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	68d9      	ldr	r1, [r3, #12]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	f000 f965 	bl	800359e <TIM_ETR_SetConfig>
      break;
 80032d4:	e0f8      	b.n	80034c8 <TIM_SlaveTimer_SetConfig+0x32c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a6a      	ldr	r2, [pc, #424]	; (8003484 <TIM_SlaveTimer_SetConfig+0x2e8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d013      	beq.n	8003308 <TIM_SlaveTimer_SetConfig+0x16c>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e8:	d00e      	beq.n	8003308 <TIM_SlaveTimer_SetConfig+0x16c>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a66      	ldr	r2, [pc, #408]	; (8003488 <TIM_SlaveTimer_SetConfig+0x2ec>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d009      	beq.n	8003308 <TIM_SlaveTimer_SetConfig+0x16c>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a64      	ldr	r2, [pc, #400]	; (800348c <TIM_SlaveTimer_SetConfig+0x2f0>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d004      	beq.n	8003308 <TIM_SlaveTimer_SetConfig+0x16c>
 80032fe:	f641 012b 	movw	r1, #6187	; 0x182b
 8003302:	4863      	ldr	r0, [pc, #396]	; (8003490 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8003304:	f7fd f978 	bl	80005f8 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	2b0f      	cmp	r3, #15
 800330e:	d904      	bls.n	800331a <TIM_SlaveTimer_SetConfig+0x17e>
 8003310:	f641 012c 	movw	r1, #6188	; 0x182c
 8003314:	485e      	ldr	r0, [pc, #376]	; (8003490 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8003316:	f7fd f96f 	bl	80005f8 <assert_failed>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2b05      	cmp	r3, #5
 8003320:	d101      	bne.n	8003326 <TIM_SlaveTimer_SetConfig+0x18a>
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e0d1      	b.n	80034ca <TIM_SlaveTimer_SetConfig+0x32e>
      tmpccer = htim->Instance->CCER;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6a1a      	ldr	r2, [r3, #32]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0201 	bic.w	r2, r2, #1
 800333c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800334c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	4313      	orrs	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	621a      	str	r2, [r3, #32]
      break;
 800336a:	e0ad      	b.n	80034c8 <TIM_SlaveTimer_SetConfig+0x32c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a44      	ldr	r2, [pc, #272]	; (8003484 <TIM_SlaveTimer_SetConfig+0x2e8>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d013      	beq.n	800339e <TIM_SlaveTimer_SetConfig+0x202>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800337e:	d00e      	beq.n	800339e <TIM_SlaveTimer_SetConfig+0x202>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a40      	ldr	r2, [pc, #256]	; (8003488 <TIM_SlaveTimer_SetConfig+0x2ec>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d009      	beq.n	800339e <TIM_SlaveTimer_SetConfig+0x202>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a3f      	ldr	r2, [pc, #252]	; (800348c <TIM_SlaveTimer_SetConfig+0x2f0>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d004      	beq.n	800339e <TIM_SlaveTimer_SetConfig+0x202>
 8003394:	f641 0145 	movw	r1, #6213	; 0x1845
 8003398:	483d      	ldr	r0, [pc, #244]	; (8003490 <TIM_SlaveTimer_SetConfig+0x2f4>)
 800339a:	f7fd f92d 	bl	80005f8 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033a6:	d014      	beq.n	80033d2 <TIM_SlaveTimer_SetConfig+0x236>
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d010      	beq.n	80033d2 <TIM_SlaveTimer_SetConfig+0x236>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00c      	beq.n	80033d2 <TIM_SlaveTimer_SetConfig+0x236>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d008      	beq.n	80033d2 <TIM_SlaveTimer_SetConfig+0x236>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b0a      	cmp	r3, #10
 80033c6:	d004      	beq.n	80033d2 <TIM_SlaveTimer_SetConfig+0x236>
 80033c8:	f641 0146 	movw	r1, #6214	; 0x1846
 80033cc:	4830      	ldr	r0, [pc, #192]	; (8003490 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80033ce:	f7fd f913 	bl	80005f8 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	2b0f      	cmp	r3, #15
 80033d8:	d904      	bls.n	80033e4 <TIM_SlaveTimer_SetConfig+0x248>
 80033da:	f641 0147 	movw	r1, #6215	; 0x1847
 80033de:	482c      	ldr	r0, [pc, #176]	; (8003490 <TIM_SlaveTimer_SetConfig+0x2f4>)
 80033e0:	f7fd f90a 	bl	80005f8 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6818      	ldr	r0, [r3, #0]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	6899      	ldr	r1, [r3, #8]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	461a      	mov	r2, r3
 80033f2:	f000 f877 	bl	80034e4 <TIM_TI1_ConfigInputStage>
      break;
 80033f6:	e067      	b.n	80034c8 <TIM_SlaveTimer_SetConfig+0x32c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a21      	ldr	r2, [pc, #132]	; (8003484 <TIM_SlaveTimer_SetConfig+0x2e8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d013      	beq.n	800342a <TIM_SlaveTimer_SetConfig+0x28e>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800340a:	d00e      	beq.n	800342a <TIM_SlaveTimer_SetConfig+0x28e>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a1d      	ldr	r2, [pc, #116]	; (8003488 <TIM_SlaveTimer_SetConfig+0x2ec>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d009      	beq.n	800342a <TIM_SlaveTimer_SetConfig+0x28e>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a1c      	ldr	r2, [pc, #112]	; (800348c <TIM_SlaveTimer_SetConfig+0x2f0>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d004      	beq.n	800342a <TIM_SlaveTimer_SetConfig+0x28e>
 8003420:	f641 0153 	movw	r1, #6227	; 0x1853
 8003424:	481a      	ldr	r0, [pc, #104]	; (8003490 <TIM_SlaveTimer_SetConfig+0x2f4>)
 8003426:	f7fd f8e7 	bl	80005f8 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003432:	d014      	beq.n	800345e <TIM_SlaveTimer_SetConfig+0x2c2>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d010      	beq.n	800345e <TIM_SlaveTimer_SetConfig+0x2c2>
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00c      	beq.n	800345e <TIM_SlaveTimer_SetConfig+0x2c2>
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2b02      	cmp	r3, #2
 800344a:	d008      	beq.n	800345e <TIM_SlaveTimer_SetConfig+0x2c2>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b0a      	cmp	r3, #10
 8003452:	d004      	beq.n	800345e <TIM_SlaveTimer_SetConfig+0x2c2>
 8003454:	f641 0154 	movw	r1, #6228	; 0x1854
 8003458:	480d      	ldr	r0, [pc, #52]	; (8003490 <TIM_SlaveTimer_SetConfig+0x2f4>)
 800345a:	f7fd f8cd 	bl	80005f8 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	2b0f      	cmp	r3, #15
 8003464:	d904      	bls.n	8003470 <TIM_SlaveTimer_SetConfig+0x2d4>
 8003466:	f641 0155 	movw	r1, #6229	; 0x1855
 800346a:	4809      	ldr	r0, [pc, #36]	; (8003490 <TIM_SlaveTimer_SetConfig+0x2f4>)
 800346c:	f7fd f8c4 	bl	80005f8 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6818      	ldr	r0, [r3, #0]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	6899      	ldr	r1, [r3, #8]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	461a      	mov	r2, r3
 800347e:	f000 f85f 	bl	8003540 <TIM_TI2_ConfigInputStage>
      break;
 8003482:	e021      	b.n	80034c8 <TIM_SlaveTimer_SetConfig+0x32c>
 8003484:	40012c00 	.word	0x40012c00
 8003488:	40000400 	.word	0x40000400
 800348c:	40000800 	.word	0x40000800
 8003490:	08004924 	.word	0x08004924
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a0e      	ldr	r2, [pc, #56]	; (80034d4 <TIM_SlaveTimer_SetConfig+0x338>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d013      	beq.n	80034c6 <TIM_SlaveTimer_SetConfig+0x32a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a6:	d00e      	beq.n	80034c6 <TIM_SlaveTimer_SetConfig+0x32a>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a0a      	ldr	r2, [pc, #40]	; (80034d8 <TIM_SlaveTimer_SetConfig+0x33c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d009      	beq.n	80034c6 <TIM_SlaveTimer_SetConfig+0x32a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a09      	ldr	r2, [pc, #36]	; (80034dc <TIM_SlaveTimer_SetConfig+0x340>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d004      	beq.n	80034c6 <TIM_SlaveTimer_SetConfig+0x32a>
 80034bc:	f641 0164 	movw	r1, #6244	; 0x1864
 80034c0:	4807      	ldr	r0, [pc, #28]	; (80034e0 <TIM_SlaveTimer_SetConfig+0x344>)
 80034c2:	f7fd f899 	bl	80005f8 <assert_failed>
      break;
 80034c6:	bf00      	nop
  }
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40012c00 	.word	0x40012c00
 80034d8:	40000400 	.word	0x40000400
 80034dc:	40000800 	.word	0x40000800
 80034e0:	08004924 	.word	0x08004924

080034e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	f023 0201 	bic.w	r2, r3, #1
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800350e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	4313      	orrs	r3, r2
 8003518:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f023 030a 	bic.w	r3, r3, #10
 8003520:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	4313      	orrs	r3, r2
 8003528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	621a      	str	r2, [r3, #32]
}
 8003536:	bf00      	nop
 8003538:	371c      	adds	r7, #28
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr

08003540 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	f023 0210 	bic.w	r2, r3, #16
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800356a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	031b      	lsls	r3, r3, #12
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	4313      	orrs	r3, r2
 8003574:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800357c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	4313      	orrs	r3, r2
 8003586:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	621a      	str	r2, [r3, #32]
}
 8003594:	bf00      	nop
 8003596:	371c      	adds	r7, #28
 8003598:	46bd      	mov	sp, r7
 800359a:	bc80      	pop	{r7}
 800359c:	4770      	bx	lr

0800359e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800359e:	b480      	push	{r7}
 80035a0:	b087      	sub	sp, #28
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	607a      	str	r2, [r7, #4]
 80035aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	021a      	lsls	r2, r3, #8
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	431a      	orrs	r2, r3
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	609a      	str	r2, [r3, #8]
}
 80035d2:	bf00      	nop
 80035d4:	371c      	adds	r7, #28
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr

080035dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a43      	ldr	r2, [pc, #268]	; (80036f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d013      	beq.n	8003618 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f8:	d00e      	beq.n	8003618 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a3f      	ldr	r2, [pc, #252]	; (80036fc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d009      	beq.n	8003618 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a3d      	ldr	r2, [pc, #244]	; (8003700 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d004      	beq.n	8003618 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800360e:	f240 6164 	movw	r1, #1636	; 0x664
 8003612:	483c      	ldr	r0, [pc, #240]	; (8003704 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003614:	f7fc fff0 	bl	80005f8 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d020      	beq.n	8003662 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b10      	cmp	r3, #16
 8003626:	d01c      	beq.n	8003662 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b20      	cmp	r3, #32
 800362e:	d018      	beq.n	8003662 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b30      	cmp	r3, #48	; 0x30
 8003636:	d014      	beq.n	8003662 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b40      	cmp	r3, #64	; 0x40
 800363e:	d010      	beq.n	8003662 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b50      	cmp	r3, #80	; 0x50
 8003646:	d00c      	beq.n	8003662 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b60      	cmp	r3, #96	; 0x60
 800364e:	d008      	beq.n	8003662 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b70      	cmp	r3, #112	; 0x70
 8003656:	d004      	beq.n	8003662 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8003658:	f240 6165 	movw	r1, #1637	; 0x665
 800365c:	4829      	ldr	r0, [pc, #164]	; (8003704 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800365e:	f7fc ffcb 	bl	80005f8 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b80      	cmp	r3, #128	; 0x80
 8003668:	d008      	beq.n	800367c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d004      	beq.n	800367c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8003672:	f240 6166 	movw	r1, #1638	; 0x666
 8003676:	4823      	ldr	r0, [pc, #140]	; (8003704 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003678:	f7fc ffbe 	bl	80005f8 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003682:	2b01      	cmp	r3, #1
 8003684:	d101      	bne.n	800368a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003686:	2302      	movs	r3, #2
 8003688:	e032      	b.n	80036f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2202      	movs	r2, #2
 8003696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036c2:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40012c00 	.word	0x40012c00
 80036fc:	40000400 	.word	0x40000400
 8003700:	40000800 	.word	0x40000800
 8003704:	0800495c 	.word	0x0800495c

08003708 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e092      	b.n	8003840 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d02c      	beq.n	800377c <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a48      	ldr	r2, [pc, #288]	; (8003848 <HAL_UART_Init+0x140>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d00e      	beq.n	800374a <HAL_UART_Init+0x42>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a46      	ldr	r2, [pc, #280]	; (800384c <HAL_UART_Init+0x144>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d009      	beq.n	800374a <HAL_UART_Init+0x42>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a45      	ldr	r2, [pc, #276]	; (8003850 <HAL_UART_Init+0x148>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d004      	beq.n	800374a <HAL_UART_Init+0x42>
 8003740:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8003744:	4843      	ldr	r0, [pc, #268]	; (8003854 <HAL_UART_Init+0x14c>)
 8003746:	f7fc ff57 	bl	80005f8 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d028      	beq.n	80037a4 <HAL_UART_Init+0x9c>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800375a:	d023      	beq.n	80037a4 <HAL_UART_Init+0x9c>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003764:	d01e      	beq.n	80037a4 <HAL_UART_Init+0x9c>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800376e:	d019      	beq.n	80037a4 <HAL_UART_Init+0x9c>
 8003770:	f240 1147 	movw	r1, #327	; 0x147
 8003774:	4837      	ldr	r0, [pc, #220]	; (8003854 <HAL_UART_Init+0x14c>)
 8003776:	f7fc ff3f 	bl	80005f8 <assert_failed>
 800377a:	e013      	b.n	80037a4 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a31      	ldr	r2, [pc, #196]	; (8003848 <HAL_UART_Init+0x140>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d00e      	beq.n	80037a4 <HAL_UART_Init+0x9c>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a30      	ldr	r2, [pc, #192]	; (800384c <HAL_UART_Init+0x144>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d009      	beq.n	80037a4 <HAL_UART_Init+0x9c>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a2e      	ldr	r2, [pc, #184]	; (8003850 <HAL_UART_Init+0x148>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d004      	beq.n	80037a4 <HAL_UART_Init+0x9c>
 800379a:	f240 114b 	movw	r1, #331	; 0x14b
 800379e:	482d      	ldr	r0, [pc, #180]	; (8003854 <HAL_UART_Init+0x14c>)
 80037a0:	f7fc ff2a 	bl	80005f8 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d009      	beq.n	80037c0 <HAL_UART_Init+0xb8>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b4:	d004      	beq.n	80037c0 <HAL_UART_Init+0xb8>
 80037b6:	f240 114d 	movw	r1, #333	; 0x14d
 80037ba:	4826      	ldr	r0, [pc, #152]	; (8003854 <HAL_UART_Init+0x14c>)
 80037bc:	f7fc ff1c 	bl	80005f8 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d106      	bne.n	80037da <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7fd f95f 	bl	8000a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2224      	movs	r2, #36	; 0x24
 80037de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037f0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fb4a 	bl	8003e8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	691a      	ldr	r2, [r3, #16]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003806:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695a      	ldr	r2, [r3, #20]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003816:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003826:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2220      	movs	r2, #32
 8003832:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2220      	movs	r2, #32
 800383a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40013800 	.word	0x40013800
 800384c:	40004400 	.word	0x40004400
 8003850:	40004800 	.word	0x40004800
 8003854:	08004998 	.word	0x08004998

08003858 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b088      	sub	sp, #32
 800385c:	af02      	add	r7, sp, #8
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	603b      	str	r3, [r7, #0]
 8003864:	4613      	mov	r3, r2
 8003866:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003868:	2300      	movs	r3, #0
 800386a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b20      	cmp	r3, #32
 8003876:	f040 8083 	bne.w	8003980 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d002      	beq.n	8003886 <HAL_UART_Transmit+0x2e>
 8003880:	88fb      	ldrh	r3, [r7, #6]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e07b      	b.n	8003982 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003890:	2b01      	cmp	r3, #1
 8003892:	d101      	bne.n	8003898 <HAL_UART_Transmit+0x40>
 8003894:	2302      	movs	r3, #2
 8003896:	e074      	b.n	8003982 <HAL_UART_Transmit+0x12a>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2221      	movs	r2, #33	; 0x21
 80038aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80038ae:	f7fd f9d3 	bl	8000c58 <HAL_GetTick>
 80038b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	88fa      	ldrh	r2, [r7, #6]
 80038b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	88fa      	ldrh	r2, [r7, #6]
 80038be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038c0:	e042      	b.n	8003948 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038d8:	d122      	bne.n	8003920 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2200      	movs	r2, #0
 80038e2:	2180      	movs	r1, #128	; 0x80
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 f968 	bl	8003bba <UART_WaitOnFlagUntilTimeout>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e046      	b.n	8003982 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	881b      	ldrh	r3, [r3, #0]
 80038fc:	461a      	mov	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003906:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d103      	bne.n	8003918 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	3302      	adds	r3, #2
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	e017      	b.n	8003948 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	3301      	adds	r3, #1
 800391c:	60bb      	str	r3, [r7, #8]
 800391e:	e013      	b.n	8003948 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	2200      	movs	r2, #0
 8003928:	2180      	movs	r1, #128	; 0x80
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 f945 	bl	8003bba <UART_WaitOnFlagUntilTimeout>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e023      	b.n	8003982 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	1c5a      	adds	r2, r3, #1
 800393e:	60ba      	str	r2, [r7, #8]
 8003940:	781a      	ldrb	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800394c:	b29b      	uxth	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1b7      	bne.n	80038c2 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2200      	movs	r2, #0
 800395a:	2140      	movs	r1, #64	; 0x40
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f000 f92c 	bl	8003bba <UART_WaitOnFlagUntilTimeout>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e00a      	b.n	8003982 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2220      	movs	r2, #32
 8003970:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	e000      	b.n	8003982 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003980:	2302      	movs	r3, #2
  }
}
 8003982:	4618      	mov	r0, r3
 8003984:	3718      	adds	r7, #24
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b088      	sub	sp, #32
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10d      	bne.n	80039de <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	f003 0320 	and.w	r3, r3, #32
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d008      	beq.n	80039de <HAL_UART_IRQHandler+0x52>
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	f003 0320 	and.w	r3, r3, #32
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f9d7 	bl	8003d8a <UART_Receive_IT>
      return;
 80039dc:	e0cc      	b.n	8003b78 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 80ab 	beq.w	8003b3c <HAL_UART_IRQHandler+0x1b0>
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d105      	bne.n	80039fc <HAL_UART_IRQHandler+0x70>
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 80a0 	beq.w	8003b3c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <HAL_UART_IRQHandler+0x90>
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d005      	beq.n	8003a1c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a14:	f043 0201 	orr.w	r2, r3, #1
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f003 0304 	and.w	r3, r3, #4
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00a      	beq.n	8003a3c <HAL_UART_IRQHandler+0xb0>
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a34:	f043 0202 	orr.w	r2, r3, #2
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00a      	beq.n	8003a5c <HAL_UART_IRQHandler+0xd0>
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d005      	beq.n	8003a5c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a54:	f043 0204 	orr.w	r2, r3, #4
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00a      	beq.n	8003a7c <HAL_UART_IRQHandler+0xf0>
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a74:	f043 0208 	orr.w	r2, r3, #8
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d078      	beq.n	8003b76 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	f003 0320 	and.w	r3, r3, #32
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d007      	beq.n	8003a9e <HAL_UART_IRQHandler+0x112>
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	f003 0320 	and.w	r3, r3, #32
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f976 	bl	8003d8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	bf14      	ite	ne
 8003aac:	2301      	movne	r3, #1
 8003aae:	2300      	moveq	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab8:	f003 0308 	and.w	r3, r3, #8
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d102      	bne.n	8003ac6 <HAL_UART_IRQHandler+0x13a>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d031      	beq.n	8003b2a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f8c1 	bl	8003c4e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d023      	beq.n	8003b22 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695a      	ldr	r2, [r3, #20]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ae8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d013      	beq.n	8003b1a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af6:	4a22      	ldr	r2, [pc, #136]	; (8003b80 <HAL_UART_IRQHandler+0x1f4>)
 8003af8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fd fd58 	bl	80015b4 <HAL_DMA_Abort_IT>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d016      	beq.n	8003b38 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b14:	4610      	mov	r0, r2
 8003b16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b18:	e00e      	b.n	8003b38 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f844 	bl	8003ba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b20:	e00a      	b.n	8003b38 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f840 	bl	8003ba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b28:	e006      	b.n	8003b38 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f83c 	bl	8003ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003b36:	e01e      	b.n	8003b76 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b38:	bf00      	nop
    return;
 8003b3a:	e01c      	b.n	8003b76 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d008      	beq.n	8003b58 <HAL_UART_IRQHandler+0x1cc>
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f8ad 	bl	8003cb0 <UART_Transmit_IT>
    return;
 8003b56:	e00f      	b.n	8003b78 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <HAL_UART_IRQHandler+0x1ec>
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d005      	beq.n	8003b78 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f8f4 	bl	8003d5a <UART_EndTransmit_IT>
    return;
 8003b72:	bf00      	nop
 8003b74:	e000      	b.n	8003b78 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003b76:	bf00      	nop
  }
}
 8003b78:	3720      	adds	r7, #32
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	08003c89 	.word	0x08003c89

08003b84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bc80      	pop	{r7}
 8003b94:	4770      	bx	lr

08003b96 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bc80      	pop	{r7}
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bc80      	pop	{r7}
 8003bb8:	4770      	bx	lr

08003bba <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b084      	sub	sp, #16
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	60f8      	str	r0, [r7, #12]
 8003bc2:	60b9      	str	r1, [r7, #8]
 8003bc4:	603b      	str	r3, [r7, #0]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bca:	e02c      	b.n	8003c26 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd2:	d028      	beq.n	8003c26 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d007      	beq.n	8003bea <UART_WaitOnFlagUntilTimeout+0x30>
 8003bda:	f7fd f83d 	bl	8000c58 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d21d      	bcs.n	8003c26 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68da      	ldr	r2, [r3, #12]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003bf8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	695a      	ldr	r2, [r3, #20]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0201 	bic.w	r2, r2, #1
 8003c08:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2220      	movs	r2, #32
 8003c16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e00f      	b.n	8003c46 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	bf0c      	ite	eq
 8003c36:	2301      	moveq	r3, #1
 8003c38:	2300      	movne	r3, #0
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	79fb      	ldrb	r3, [r7, #7]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d0c3      	beq.n	8003bcc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c64:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	695a      	ldr	r2, [r3, #20]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0201 	bic.w	r2, r2, #1
 8003c74:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc80      	pop	{r7}
 8003c86:	4770      	bx	lr

08003c88 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f7ff ff80 	bl	8003ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ca8:	bf00      	nop
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b21      	cmp	r3, #33	; 0x21
 8003cc2:	d144      	bne.n	8003d4e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ccc:	d11a      	bne.n	8003d04 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	881b      	ldrh	r3, [r3, #0]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ce2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d105      	bne.n	8003cf8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	1c9a      	adds	r2, r3, #2
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	621a      	str	r2, [r3, #32]
 8003cf6:	e00e      	b.n	8003d16 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	1c5a      	adds	r2, r3, #1
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	621a      	str	r2, [r3, #32]
 8003d02:	e008      	b.n	8003d16 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	1c59      	adds	r1, r3, #1
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6211      	str	r1, [r2, #32]
 8003d0e:	781a      	ldrb	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	4619      	mov	r1, r3
 8003d24:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10f      	bne.n	8003d4a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68da      	ldr	r2, [r3, #12]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d38:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68da      	ldr	r2, [r3, #12]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d48:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	e000      	b.n	8003d50 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003d4e:	2302      	movs	r3, #2
  }
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc80      	pop	{r7}
 8003d58:	4770      	bx	lr

08003d5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b082      	sub	sp, #8
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68da      	ldr	r2, [r3, #12]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2220      	movs	r2, #32
 8003d76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff ff02 	bl	8003b84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b084      	sub	sp, #16
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b22      	cmp	r3, #34	; 0x22
 8003d9c:	d171      	bne.n	8003e82 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da6:	d123      	bne.n	8003df0 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dac:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10e      	bne.n	8003dd4 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dcc:	1c9a      	adds	r2, r3, #2
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	629a      	str	r2, [r3, #40]	; 0x28
 8003dd2:	e029      	b.n	8003e28 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de8:	1c5a      	adds	r2, r3, #1
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	629a      	str	r2, [r3, #40]	; 0x28
 8003dee:	e01b      	b.n	8003e28 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10a      	bne.n	8003e0e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6858      	ldr	r0, [r3, #4]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e02:	1c59      	adds	r1, r3, #1
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6291      	str	r1, [r2, #40]	; 0x28
 8003e08:	b2c2      	uxtb	r2, r0
 8003e0a:	701a      	strb	r2, [r3, #0]
 8003e0c:	e00c      	b.n	8003e28 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	b2da      	uxtb	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1a:	1c58      	adds	r0, r3, #1
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	6288      	str	r0, [r1, #40]	; 0x28
 8003e20:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e24:	b2d2      	uxtb	r2, r2
 8003e26:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	4619      	mov	r1, r3
 8003e36:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d120      	bne.n	8003e7e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0220 	bic.w	r2, r2, #32
 8003e4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	695a      	ldr	r2, [r3, #20]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0201 	bic.w	r2, r2, #1
 8003e6a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f7ff fe8e 	bl	8003b96 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	e002      	b.n	8003e84 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	e000      	b.n	8003e84 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003e82:	2302      	movs	r3, #2
  }
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	4a84      	ldr	r2, [pc, #528]	; (80040ac <UART_SetConfig+0x220>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d904      	bls.n	8003ea8 <UART_SetConfig+0x1c>
 8003e9e:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8003ea2:	4883      	ldr	r0, [pc, #524]	; (80040b0 <UART_SetConfig+0x224>)
 8003ea4:	f7fc fba8 	bl	80005f8 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d009      	beq.n	8003ec4 <UART_SetConfig+0x38>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eb8:	d004      	beq.n	8003ec4 <UART_SetConfig+0x38>
 8003eba:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8003ebe:	487c      	ldr	r0, [pc, #496]	; (80040b0 <UART_SetConfig+0x224>)
 8003ec0:	f7fc fb9a 	bl	80005f8 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00e      	beq.n	8003eea <UART_SetConfig+0x5e>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed4:	d009      	beq.n	8003eea <UART_SetConfig+0x5e>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003ede:	d004      	beq.n	8003eea <UART_SetConfig+0x5e>
 8003ee0:	f640 31ff 	movw	r1, #3071	; 0xbff
 8003ee4:	4872      	ldr	r0, [pc, #456]	; (80040b0 <UART_SetConfig+0x224>)
 8003ee6:	f7fc fb87 	bl	80005f8 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	695a      	ldr	r2, [r3, #20]
 8003eee:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d103      	bne.n	8003f00 <UART_SetConfig+0x74>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d104      	bne.n	8003f0a <UART_SetConfig+0x7e>
 8003f00:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8003f04:	486a      	ldr	r0, [pc, #424]	; (80040b0 <UART_SetConfig+0x224>)
 8003f06:	f7fc fb77 	bl	80005f8 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68da      	ldr	r2, [r3, #12]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f3c:	f023 030c 	bic.w	r3, r3, #12
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6812      	ldr	r2, [r2, #0]
 8003f44:	68f9      	ldr	r1, [r7, #12]
 8003f46:	430b      	orrs	r3, r1
 8003f48:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699a      	ldr	r2, [r3, #24]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a53      	ldr	r2, [pc, #332]	; (80040b4 <UART_SetConfig+0x228>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d14e      	bne.n	8004008 <UART_SetConfig+0x17c>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f6a:	f7fe fd3f 	bl	80029ec <HAL_RCC_GetPCLK2Freq>
 8003f6e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	4613      	mov	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	009a      	lsls	r2, r3, #2
 8003f7a:	441a      	add	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f86:	4a4c      	ldr	r2, [pc, #304]	; (80040b8 <UART_SetConfig+0x22c>)
 8003f88:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8c:	095b      	lsrs	r3, r3, #5
 8003f8e:	0119      	lsls	r1, r3, #4
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	4613      	mov	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	009a      	lsls	r2, r3, #2
 8003f9a:	441a      	add	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fa6:	4b44      	ldr	r3, [pc, #272]	; (80040b8 <UART_SetConfig+0x22c>)
 8003fa8:	fba3 0302 	umull	r0, r3, r3, r2
 8003fac:	095b      	lsrs	r3, r3, #5
 8003fae:	2064      	movs	r0, #100	; 0x64
 8003fb0:	fb00 f303 	mul.w	r3, r0, r3
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	3332      	adds	r3, #50	; 0x32
 8003fba:	4a3f      	ldr	r2, [pc, #252]	; (80040b8 <UART_SetConfig+0x22c>)
 8003fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc0:	095b      	lsrs	r3, r3, #5
 8003fc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fc6:	4419      	add	r1, r3
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	009a      	lsls	r2, r3, #2
 8003fd2:	441a      	add	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fde:	4b36      	ldr	r3, [pc, #216]	; (80040b8 <UART_SetConfig+0x22c>)
 8003fe0:	fba3 0302 	umull	r0, r3, r3, r2
 8003fe4:	095b      	lsrs	r3, r3, #5
 8003fe6:	2064      	movs	r0, #100	; 0x64
 8003fe8:	fb00 f303 	mul.w	r3, r0, r3
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	3332      	adds	r3, #50	; 0x32
 8003ff2:	4a31      	ldr	r2, [pc, #196]	; (80040b8 <UART_SetConfig+0x22c>)
 8003ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff8:	095b      	lsrs	r3, r3, #5
 8003ffa:	f003 020f 	and.w	r2, r3, #15
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	440a      	add	r2, r1
 8004004:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004006:	e04d      	b.n	80040a4 <UART_SetConfig+0x218>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004008:	f7fe fcdc 	bl	80029c4 <HAL_RCC_GetPCLK1Freq>
 800400c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	4613      	mov	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	009a      	lsls	r2, r3, #2
 8004018:	441a      	add	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	fbb2 f3f3 	udiv	r3, r2, r3
 8004024:	4a24      	ldr	r2, [pc, #144]	; (80040b8 <UART_SetConfig+0x22c>)
 8004026:	fba2 2303 	umull	r2, r3, r2, r3
 800402a:	095b      	lsrs	r3, r3, #5
 800402c:	0119      	lsls	r1, r3, #4
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	4613      	mov	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	009a      	lsls	r2, r3, #2
 8004038:	441a      	add	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	fbb2 f2f3 	udiv	r2, r2, r3
 8004044:	4b1c      	ldr	r3, [pc, #112]	; (80040b8 <UART_SetConfig+0x22c>)
 8004046:	fba3 0302 	umull	r0, r3, r3, r2
 800404a:	095b      	lsrs	r3, r3, #5
 800404c:	2064      	movs	r0, #100	; 0x64
 800404e:	fb00 f303 	mul.w	r3, r0, r3
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	011b      	lsls	r3, r3, #4
 8004056:	3332      	adds	r3, #50	; 0x32
 8004058:	4a17      	ldr	r2, [pc, #92]	; (80040b8 <UART_SetConfig+0x22c>)
 800405a:	fba2 2303 	umull	r2, r3, r2, r3
 800405e:	095b      	lsrs	r3, r3, #5
 8004060:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004064:	4419      	add	r1, r3
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	4613      	mov	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	009a      	lsls	r2, r3, #2
 8004070:	441a      	add	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	fbb2 f2f3 	udiv	r2, r2, r3
 800407c:	4b0e      	ldr	r3, [pc, #56]	; (80040b8 <UART_SetConfig+0x22c>)
 800407e:	fba3 0302 	umull	r0, r3, r3, r2
 8004082:	095b      	lsrs	r3, r3, #5
 8004084:	2064      	movs	r0, #100	; 0x64
 8004086:	fb00 f303 	mul.w	r3, r0, r3
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	3332      	adds	r3, #50	; 0x32
 8004090:	4a09      	ldr	r2, [pc, #36]	; (80040b8 <UART_SetConfig+0x22c>)
 8004092:	fba2 2303 	umull	r2, r3, r2, r3
 8004096:	095b      	lsrs	r3, r3, #5
 8004098:	f003 020f 	and.w	r2, r3, #15
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	440a      	add	r2, r1
 80040a2:	609a      	str	r2, [r3, #8]
}
 80040a4:	bf00      	nop
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	0044aa20 	.word	0x0044aa20
 80040b0:	08004998 	.word	0x08004998
 80040b4:	40013800 	.word	0x40013800
 80040b8:	51eb851f 	.word	0x51eb851f

080040bc <_ZNSaIcEC1Ev>:
 80040bc:	4770      	bx	lr

080040be <_ZNSaIcED1Ev>:
 80040be:	4770      	bx	lr

080040c0 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 80040c0:	b10a      	cbz	r2, 80040c6 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 80040c2:	f000 ba05 	b.w	80044d0 <memcpy>
 80040c6:	4770      	bx	lr

080040c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80040c8:	b508      	push	{r3, lr}
 80040ca:	680b      	ldr	r3, [r1, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	da02      	bge.n	80040d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 80040d0:	4809      	ldr	r0, [pc, #36]	; (80040f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 80040d2:	f000 f9b8 	bl	8004446 <_ZSt20__throw_length_errorPKc>
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d908      	bls.n	80040ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 80040da:	0052      	lsls	r2, r2, #1
 80040dc:	4293      	cmp	r3, r2
 80040de:	d205      	bcs.n	80040ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 80040e0:	2a00      	cmp	r2, #0
 80040e2:	bfb6      	itet	lt
 80040e4:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 80040e8:	600a      	strge	r2, [r1, #0]
 80040ea:	600b      	strlt	r3, [r1, #0]
 80040ec:	6808      	ldr	r0, [r1, #0]
 80040ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80040f2:	3001      	adds	r0, #1
 80040f4:	f000 b988 	b.w	8004408 <_Znwj>
 80040f8:	08004a2f 	.word	0x08004a2f

080040fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80040fc:	4603      	mov	r3, r0
 80040fe:	f853 0b08 	ldr.w	r0, [r3], #8
 8004102:	4298      	cmp	r0, r3
 8004104:	d001      	beq.n	800410a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8004106:	f000 b999 	b.w	800443c <_ZdlPv>
 800410a:	4770      	bx	lr

0800410c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 800410c:	b508      	push	{r3, lr}
 800410e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004112:	6840      	ldr	r0, [r0, #4]
 8004114:	3901      	subs	r1, #1
 8004116:	1a09      	subs	r1, r1, r0
 8004118:	4291      	cmp	r1, r2
 800411a:	d202      	bcs.n	8004122 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 800411c:	4618      	mov	r0, r3
 800411e:	f000 f992 	bl	8004446 <_ZSt20__throw_length_errorPKc>
 8004122:	bd08      	pop	{r3, pc}

08004124 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8004124:	6803      	ldr	r3, [r0, #0]
 8004126:	428b      	cmp	r3, r1
 8004128:	d806      	bhi.n	8004138 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 800412a:	6840      	ldr	r0, [r0, #4]
 800412c:	4418      	add	r0, r3
 800412e:	4281      	cmp	r1, r0
 8004130:	bf94      	ite	ls
 8004132:	2000      	movls	r0, #0
 8004134:	2001      	movhi	r0, #1
 8004136:	4770      	bx	lr
 8004138:	2001      	movs	r0, #1
 800413a:	4770      	bx	lr

0800413c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800413c:	2a01      	cmp	r2, #1
 800413e:	b510      	push	{r4, lr}
 8004140:	d102      	bne.n	8004148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8004142:	780a      	ldrb	r2, [r1, #0]
 8004144:	7002      	strb	r2, [r0, #0]
 8004146:	bd10      	pop	{r4, pc}
 8004148:	f7ff ffba 	bl	80040c0 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800414c:	e7fb      	b.n	8004146 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0800414e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 800414e:	2a01      	cmp	r2, #1
 8004150:	b430      	push	{r4, r5}
 8004152:	d103      	bne.n	800415c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8004154:	780b      	ldrb	r3, [r1, #0]
 8004156:	7003      	strb	r3, [r0, #0]
 8004158:	bc30      	pop	{r4, r5}
 800415a:	4770      	bx	lr
 800415c:	2a00      	cmp	r2, #0
 800415e:	d0fb      	beq.n	8004158 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8004160:	bc30      	pop	{r4, r5}
 8004162:	f000 b9c0 	b.w	80044e6 <memmove>

08004166 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8004166:	b508      	push	{r3, lr}
 8004168:	1a52      	subs	r2, r2, r1
 800416a:	f7ff ffe7 	bl	800413c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800416e:	bd08      	pop	{r3, pc}

08004170 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8004170:	4288      	cmp	r0, r1
 8004172:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004174:	4604      	mov	r4, r0
 8004176:	460e      	mov	r6, r1
 8004178:	d020      	beq.n	80041bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4c>
 800417a:	6802      	ldr	r2, [r0, #0]
 800417c:	f100 0308 	add.w	r3, r0, #8
 8004180:	429a      	cmp	r2, r3
 8004182:	bf08      	it	eq
 8004184:	220f      	moveq	r2, #15
 8004186:	684d      	ldr	r5, [r1, #4]
 8004188:	bf18      	it	ne
 800418a:	6882      	ldrne	r2, [r0, #8]
 800418c:	42aa      	cmp	r2, r5
 800418e:	d20b      	bcs.n	80041a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x38>
 8004190:	a902      	add	r1, sp, #8
 8004192:	f841 5d04 	str.w	r5, [r1, #-4]!
 8004196:	f7ff ff97 	bl	80040c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800419a:	4607      	mov	r7, r0
 800419c:	4620      	mov	r0, r4
 800419e:	f7ff ffad 	bl	80040fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80041a2:	9b01      	ldr	r3, [sp, #4]
 80041a4:	6027      	str	r7, [r4, #0]
 80041a6:	60a3      	str	r3, [r4, #8]
 80041a8:	b125      	cbz	r5, 80041b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x44>
 80041aa:	462a      	mov	r2, r5
 80041ac:	6831      	ldr	r1, [r6, #0]
 80041ae:	6820      	ldr	r0, [r4, #0]
 80041b0:	f7ff ffc4 	bl	800413c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80041b4:	2200      	movs	r2, #0
 80041b6:	6823      	ldr	r3, [r4, #0]
 80041b8:	6065      	str	r5, [r4, #4]
 80041ba:	555a      	strb	r2, [r3, r5]
 80041bc:	b003      	add	sp, #12
 80041be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80041c0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80041c4:	4616      	mov	r6, r2
 80041c6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80041ca:	6842      	ldr	r2, [r0, #4]
 80041cc:	469a      	mov	sl, r3
 80041ce:	eba8 0306 	sub.w	r3, r8, r6
 80041d2:	1a57      	subs	r7, r2, r1
 80041d4:	4413      	add	r3, r2
 80041d6:	6802      	ldr	r2, [r0, #0]
 80041d8:	9301      	str	r3, [sp, #4]
 80041da:	f100 0308 	add.w	r3, r0, #8
 80041de:	429a      	cmp	r2, r3
 80041e0:	460d      	mov	r5, r1
 80041e2:	bf14      	ite	ne
 80041e4:	6882      	ldrne	r2, [r0, #8]
 80041e6:	220f      	moveq	r2, #15
 80041e8:	a901      	add	r1, sp, #4
 80041ea:	4604      	mov	r4, r0
 80041ec:	f7ff ff6c 	bl	80040c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80041f0:	1bbf      	subs	r7, r7, r6
 80041f2:	4681      	mov	r9, r0
 80041f4:	b11d      	cbz	r5, 80041fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 80041f6:	462a      	mov	r2, r5
 80041f8:	6821      	ldr	r1, [r4, #0]
 80041fa:	f7ff ff9f 	bl	800413c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80041fe:	f1ba 0f00 	cmp.w	sl, #0
 8004202:	d008      	beq.n	8004216 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 8004204:	f1b8 0f00 	cmp.w	r8, #0
 8004208:	d005      	beq.n	8004216 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 800420a:	4642      	mov	r2, r8
 800420c:	4651      	mov	r1, sl
 800420e:	eb09 0005 	add.w	r0, r9, r5
 8004212:	f7ff ff93 	bl	800413c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004216:	b147      	cbz	r7, 800422a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 8004218:	6821      	ldr	r1, [r4, #0]
 800421a:	442e      	add	r6, r5
 800421c:	eb05 0008 	add.w	r0, r5, r8
 8004220:	463a      	mov	r2, r7
 8004222:	4431      	add	r1, r6
 8004224:	4448      	add	r0, r9
 8004226:	f7ff ff89 	bl	800413c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800422a:	4620      	mov	r0, r4
 800422c:	f7ff ff66 	bl	80040fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8004230:	9b01      	ldr	r3, [sp, #4]
 8004232:	f8c4 9000 	str.w	r9, [r4]
 8004236:	60a3      	str	r3, [r4, #8]
 8004238:	b002      	add	sp, #8
 800423a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800423e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800423e:	f100 0208 	add.w	r2, r0, #8
 8004242:	6002      	str	r2, [r0, #0]
 8004244:	2200      	movs	r2, #0
 8004246:	6042      	str	r2, [r0, #4]
 8004248:	7202      	strb	r2, [r0, #8]
 800424a:	4770      	bx	lr

0800424c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800424c:	b510      	push	{r4, lr}
 800424e:	4604      	mov	r4, r0
 8004250:	f7ff ff54 	bl	80040fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8004254:	4620      	mov	r0, r4
 8004256:	bd10      	pop	{r4, pc}

08004258 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 8004258:	b510      	push	{r4, lr}
 800425a:	4604      	mov	r4, r0
 800425c:	f7ff ff88 	bl	8004170 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8004260:	4620      	mov	r0, r4
 8004262:	bd10      	pop	{r4, pc}

08004264 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8004264:	6840      	ldr	r0, [r0, #4]
 8004266:	4770      	bx	lr

08004268 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
 8004268:	6840      	ldr	r0, [r0, #4]
 800426a:	fab0 f080 	clz	r0, r0
 800426e:	0940      	lsrs	r0, r0, #5
 8004270:	4770      	bx	lr
	...

08004274 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8004274:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004278:	4614      	mov	r4, r2
 800427a:	4681      	mov	r9, r0
 800427c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800427e:	460f      	mov	r7, r1
 8004280:	462a      	mov	r2, r5
 8004282:	4698      	mov	r8, r3
 8004284:	4621      	mov	r1, r4
 8004286:	4b37      	ldr	r3, [pc, #220]	; (8004364 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf0>)
 8004288:	f7ff ff40 	bl	800410c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800428c:	464a      	mov	r2, r9
 800428e:	f852 6b08 	ldr.w	r6, [r2], #8
 8004292:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004296:	4296      	cmp	r6, r2
 8004298:	bf08      	it	eq
 800429a:	220f      	moveq	r2, #15
 800429c:	eba5 0b04 	sub.w	fp, r5, r4
 80042a0:	bf18      	it	ne
 80042a2:	f8d9 2008 	ldrne.w	r2, [r9, #8]
 80042a6:	eb03 0a0b 	add.w	sl, r3, fp
 80042aa:	4552      	cmp	r2, sl
 80042ac:	d34e      	bcc.n	800434c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 80042ae:	443e      	add	r6, r7
 80042b0:	4641      	mov	r1, r8
 80042b2:	1bdf      	subs	r7, r3, r7
 80042b4:	4648      	mov	r0, r9
 80042b6:	1b3f      	subs	r7, r7, r4
 80042b8:	f7ff ff34 	bl	8004124 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 80042bc:	b170      	cbz	r0, 80042dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 80042be:	b137      	cbz	r7, 80042ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 80042c0:	42ac      	cmp	r4, r5
 80042c2:	d004      	beq.n	80042ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 80042c4:	463a      	mov	r2, r7
 80042c6:	1931      	adds	r1, r6, r4
 80042c8:	1970      	adds	r0, r6, r5
 80042ca:	f7ff ff40 	bl	800414e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80042ce:	b30d      	cbz	r5, 8004314 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80042d0:	462a      	mov	r2, r5
 80042d2:	4641      	mov	r1, r8
 80042d4:	4630      	mov	r0, r6
 80042d6:	f7ff ff31 	bl	800413c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80042da:	e01b      	b.n	8004314 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80042dc:	b135      	cbz	r5, 80042ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x78>
 80042de:	42ac      	cmp	r4, r5
 80042e0:	d33c      	bcc.n	800435c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xe8>
 80042e2:	462a      	mov	r2, r5
 80042e4:	4641      	mov	r1, r8
 80042e6:	4630      	mov	r0, r6
 80042e8:	f7ff ff31 	bl	800414e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80042ec:	b197      	cbz	r7, 8004314 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80042ee:	42ac      	cmp	r4, r5
 80042f0:	d010      	beq.n	8004314 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80042f2:	463a      	mov	r2, r7
 80042f4:	1931      	adds	r1, r6, r4
 80042f6:	1970      	adds	r0, r6, r5
 80042f8:	f7ff ff29 	bl	800414e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80042fc:	42ac      	cmp	r4, r5
 80042fe:	d209      	bcs.n	8004314 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8004300:	4434      	add	r4, r6
 8004302:	eb08 0305 	add.w	r3, r8, r5
 8004306:	429c      	cmp	r4, r3
 8004308:	d30f      	bcc.n	800432a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 800430a:	462a      	mov	r2, r5
 800430c:	4641      	mov	r1, r8
 800430e:	4630      	mov	r0, r6
 8004310:	f7ff ff1d 	bl	800414e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8004314:	2200      	movs	r2, #0
 8004316:	4648      	mov	r0, r9
 8004318:	f8d9 3000 	ldr.w	r3, [r9]
 800431c:	f8c9 a004 	str.w	sl, [r9, #4]
 8004320:	f803 200a 	strb.w	r2, [r3, sl]
 8004324:	b003      	add	sp, #12
 8004326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800432a:	4544      	cmp	r4, r8
 800432c:	d803      	bhi.n	8004336 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc2>
 800432e:	462a      	mov	r2, r5
 8004330:	eb08 010b 	add.w	r1, r8, fp
 8004334:	e7ce      	b.n	80042d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8004336:	eba4 0408 	sub.w	r4, r4, r8
 800433a:	4622      	mov	r2, r4
 800433c:	4641      	mov	r1, r8
 800433e:	4630      	mov	r0, r6
 8004340:	f7ff ff05 	bl	800414e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8004344:	1b2a      	subs	r2, r5, r4
 8004346:	1971      	adds	r1, r6, r5
 8004348:	1930      	adds	r0, r6, r4
 800434a:	e7c4      	b.n	80042d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x62>
 800434c:	9500      	str	r5, [sp, #0]
 800434e:	4643      	mov	r3, r8
 8004350:	4622      	mov	r2, r4
 8004352:	4639      	mov	r1, r7
 8004354:	4648      	mov	r0, r9
 8004356:	f7ff ff33 	bl	80041c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800435a:	e7db      	b.n	8004314 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800435c:	2f00      	cmp	r7, #0
 800435e:	d0cf      	beq.n	8004300 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x8c>
 8004360:	e7c7      	b.n	80042f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 8004362:	bf00      	nop
 8004364:	080049ec 	.word	0x080049ec

08004368 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 8004368:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800436a:	4604      	mov	r4, r0
 800436c:	4608      	mov	r0, r1
 800436e:	460d      	mov	r5, r1
 8004370:	f7fb feec 	bl	800014c <strlen>
 8004374:	462b      	mov	r3, r5
 8004376:	9000      	str	r0, [sp, #0]
 8004378:	6862      	ldr	r2, [r4, #4]
 800437a:	2100      	movs	r1, #0
 800437c:	4620      	mov	r0, r4
 800437e:	f7ff ff79 	bl	8004274 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8004382:	b003      	add	sp, #12
 8004384:	bd30      	pop	{r4, r5, pc}

08004386 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 8004386:	b508      	push	{r3, lr}
 8004388:	f7ff ffee 	bl	8004368 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 800438c:	bd08      	pop	{r3, pc}

0800438e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800438e:	6800      	ldr	r0, [r0, #0]
 8004390:	4770      	bx	lr
	...

08004394 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8004394:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004396:	4604      	mov	r4, r0
 8004398:	4616      	mov	r6, r2
 800439a:	460d      	mov	r5, r1
 800439c:	b919      	cbnz	r1, 80043a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800439e:	b112      	cbz	r2, 80043a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80043a0:	480d      	ldr	r0, [pc, #52]	; (80043d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 80043a2:	f000 f84d 	bl	8004440 <_ZSt19__throw_logic_errorPKc>
 80043a6:	1b73      	subs	r3, r6, r5
 80043a8:	2b0f      	cmp	r3, #15
 80043aa:	9301      	str	r3, [sp, #4]
 80043ac:	d907      	bls.n	80043be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 80043ae:	2200      	movs	r2, #0
 80043b0:	a901      	add	r1, sp, #4
 80043b2:	4620      	mov	r0, r4
 80043b4:	f7ff fe88 	bl	80040c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80043b8:	9b01      	ldr	r3, [sp, #4]
 80043ba:	6020      	str	r0, [r4, #0]
 80043bc:	60a3      	str	r3, [r4, #8]
 80043be:	4632      	mov	r2, r6
 80043c0:	4629      	mov	r1, r5
 80043c2:	6820      	ldr	r0, [r4, #0]
 80043c4:	f7ff fecf 	bl	8004166 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80043c8:	2100      	movs	r1, #0
 80043ca:	9b01      	ldr	r3, [sp, #4]
 80043cc:	6822      	ldr	r2, [r4, #0]
 80043ce:	6063      	str	r3, [r4, #4]
 80043d0:	54d1      	strb	r1, [r2, r3]
 80043d2:	b002      	add	sp, #8
 80043d4:	bd70      	pop	{r4, r5, r6, pc}
 80043d6:	bf00      	nop
 80043d8:	08004a05 	.word	0x08004a05

080043dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 80043dc:	b538      	push	{r3, r4, r5, lr}
 80043de:	f100 0308 	add.w	r3, r0, #8
 80043e2:	4604      	mov	r4, r0
 80043e4:	6003      	str	r3, [r0, #0]
 80043e6:	460d      	mov	r5, r1
 80043e8:	b159      	cbz	r1, 8004402 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 80043ea:	4608      	mov	r0, r1
 80043ec:	f7fb feae 	bl	800014c <strlen>
 80043f0:	182a      	adds	r2, r5, r0
 80043f2:	4620      	mov	r0, r4
 80043f4:	f04f 0300 	mov.w	r3, #0
 80043f8:	4629      	mov	r1, r5
 80043fa:	f7ff ffcb 	bl	8004394 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80043fe:	4620      	mov	r0, r4
 8004400:	bd38      	pop	{r3, r4, r5, pc}
 8004402:	f04f 32ff 	mov.w	r2, #4294967295
 8004406:	e7f4      	b.n	80043f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08004408 <_Znwj>:
 8004408:	b510      	push	{r4, lr}
 800440a:	2800      	cmp	r0, #0
 800440c:	bf14      	ite	ne
 800440e:	4604      	movne	r4, r0
 8004410:	2401      	moveq	r4, #1
 8004412:	4620      	mov	r0, r4
 8004414:	f000 f84c 	bl	80044b0 <malloc>
 8004418:	b930      	cbnz	r0, 8004428 <_Znwj+0x20>
 800441a:	f000 f807 	bl	800442c <_ZSt15get_new_handlerv>
 800441e:	b908      	cbnz	r0, 8004424 <_Znwj+0x1c>
 8004420:	f000 f814 	bl	800444c <abort>
 8004424:	4780      	blx	r0
 8004426:	e7f4      	b.n	8004412 <_Znwj+0xa>
 8004428:	bd10      	pop	{r4, pc}
	...

0800442c <_ZSt15get_new_handlerv>:
 800442c:	4b02      	ldr	r3, [pc, #8]	; (8004438 <_ZSt15get_new_handlerv+0xc>)
 800442e:	6818      	ldr	r0, [r3, #0]
 8004430:	f3bf 8f5b 	dmb	ish
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	200000ac 	.word	0x200000ac

0800443c <_ZdlPv>:
 800443c:	f000 b840 	b.w	80044c0 <free>

08004440 <_ZSt19__throw_logic_errorPKc>:
 8004440:	b508      	push	{r3, lr}
 8004442:	f000 f803 	bl	800444c <abort>

08004446 <_ZSt20__throw_length_errorPKc>:
 8004446:	b508      	push	{r3, lr}
 8004448:	f000 f800 	bl	800444c <abort>

0800444c <abort>:
 800444c:	b508      	push	{r3, lr}
 800444e:	2006      	movs	r0, #6
 8004450:	f000 f948 	bl	80046e4 <raise>
 8004454:	2001      	movs	r0, #1
 8004456:	f7fc fa16 	bl	8000886 <_exit>
	...

0800445c <__errno>:
 800445c:	4b01      	ldr	r3, [pc, #4]	; (8004464 <__errno+0x8>)
 800445e:	6818      	ldr	r0, [r3, #0]
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	2000000c 	.word	0x2000000c

08004468 <__libc_init_array>:
 8004468:	b570      	push	{r4, r5, r6, lr}
 800446a:	2500      	movs	r5, #0
 800446c:	4e0c      	ldr	r6, [pc, #48]	; (80044a0 <__libc_init_array+0x38>)
 800446e:	4c0d      	ldr	r4, [pc, #52]	; (80044a4 <__libc_init_array+0x3c>)
 8004470:	1ba4      	subs	r4, r4, r6
 8004472:	10a4      	asrs	r4, r4, #2
 8004474:	42a5      	cmp	r5, r4
 8004476:	d109      	bne.n	800448c <__libc_init_array+0x24>
 8004478:	f000 f952 	bl	8004720 <_init>
 800447c:	2500      	movs	r5, #0
 800447e:	4e0a      	ldr	r6, [pc, #40]	; (80044a8 <__libc_init_array+0x40>)
 8004480:	4c0a      	ldr	r4, [pc, #40]	; (80044ac <__libc_init_array+0x44>)
 8004482:	1ba4      	subs	r4, r4, r6
 8004484:	10a4      	asrs	r4, r4, #2
 8004486:	42a5      	cmp	r5, r4
 8004488:	d105      	bne.n	8004496 <__libc_init_array+0x2e>
 800448a:	bd70      	pop	{r4, r5, r6, pc}
 800448c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004490:	4798      	blx	r3
 8004492:	3501      	adds	r5, #1
 8004494:	e7ee      	b.n	8004474 <__libc_init_array+0xc>
 8004496:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800449a:	4798      	blx	r3
 800449c:	3501      	adds	r5, #1
 800449e:	e7f2      	b.n	8004486 <__libc_init_array+0x1e>
 80044a0:	08004aa8 	.word	0x08004aa8
 80044a4:	08004aa8 	.word	0x08004aa8
 80044a8:	08004aa8 	.word	0x08004aa8
 80044ac:	08004ab0 	.word	0x08004ab0

080044b0 <malloc>:
 80044b0:	4b02      	ldr	r3, [pc, #8]	; (80044bc <malloc+0xc>)
 80044b2:	4601      	mov	r1, r0
 80044b4:	6818      	ldr	r0, [r3, #0]
 80044b6:	f000 b883 	b.w	80045c0 <_malloc_r>
 80044ba:	bf00      	nop
 80044bc:	2000000c 	.word	0x2000000c

080044c0 <free>:
 80044c0:	4b02      	ldr	r3, [pc, #8]	; (80044cc <free+0xc>)
 80044c2:	4601      	mov	r1, r0
 80044c4:	6818      	ldr	r0, [r3, #0]
 80044c6:	f000 b82f 	b.w	8004528 <_free_r>
 80044ca:	bf00      	nop
 80044cc:	2000000c 	.word	0x2000000c

080044d0 <memcpy>:
 80044d0:	b510      	push	{r4, lr}
 80044d2:	1e43      	subs	r3, r0, #1
 80044d4:	440a      	add	r2, r1
 80044d6:	4291      	cmp	r1, r2
 80044d8:	d100      	bne.n	80044dc <memcpy+0xc>
 80044da:	bd10      	pop	{r4, pc}
 80044dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044e4:	e7f7      	b.n	80044d6 <memcpy+0x6>

080044e6 <memmove>:
 80044e6:	4288      	cmp	r0, r1
 80044e8:	b510      	push	{r4, lr}
 80044ea:	eb01 0302 	add.w	r3, r1, r2
 80044ee:	d807      	bhi.n	8004500 <memmove+0x1a>
 80044f0:	1e42      	subs	r2, r0, #1
 80044f2:	4299      	cmp	r1, r3
 80044f4:	d00a      	beq.n	800450c <memmove+0x26>
 80044f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044fa:	f802 4f01 	strb.w	r4, [r2, #1]!
 80044fe:	e7f8      	b.n	80044f2 <memmove+0xc>
 8004500:	4283      	cmp	r3, r0
 8004502:	d9f5      	bls.n	80044f0 <memmove+0xa>
 8004504:	1881      	adds	r1, r0, r2
 8004506:	1ad2      	subs	r2, r2, r3
 8004508:	42d3      	cmn	r3, r2
 800450a:	d100      	bne.n	800450e <memmove+0x28>
 800450c:	bd10      	pop	{r4, pc}
 800450e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004512:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004516:	e7f7      	b.n	8004508 <memmove+0x22>

08004518 <memset>:
 8004518:	4603      	mov	r3, r0
 800451a:	4402      	add	r2, r0
 800451c:	4293      	cmp	r3, r2
 800451e:	d100      	bne.n	8004522 <memset+0xa>
 8004520:	4770      	bx	lr
 8004522:	f803 1b01 	strb.w	r1, [r3], #1
 8004526:	e7f9      	b.n	800451c <memset+0x4>

08004528 <_free_r>:
 8004528:	b538      	push	{r3, r4, r5, lr}
 800452a:	4605      	mov	r5, r0
 800452c:	2900      	cmp	r1, #0
 800452e:	d043      	beq.n	80045b8 <_free_r+0x90>
 8004530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004534:	1f0c      	subs	r4, r1, #4
 8004536:	2b00      	cmp	r3, #0
 8004538:	bfb8      	it	lt
 800453a:	18e4      	addlt	r4, r4, r3
 800453c:	f000 f8ee 	bl	800471c <__malloc_lock>
 8004540:	4a1e      	ldr	r2, [pc, #120]	; (80045bc <_free_r+0x94>)
 8004542:	6813      	ldr	r3, [r2, #0]
 8004544:	4610      	mov	r0, r2
 8004546:	b933      	cbnz	r3, 8004556 <_free_r+0x2e>
 8004548:	6063      	str	r3, [r4, #4]
 800454a:	6014      	str	r4, [r2, #0]
 800454c:	4628      	mov	r0, r5
 800454e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004552:	f000 b8e4 	b.w	800471e <__malloc_unlock>
 8004556:	42a3      	cmp	r3, r4
 8004558:	d90b      	bls.n	8004572 <_free_r+0x4a>
 800455a:	6821      	ldr	r1, [r4, #0]
 800455c:	1862      	adds	r2, r4, r1
 800455e:	4293      	cmp	r3, r2
 8004560:	bf01      	itttt	eq
 8004562:	681a      	ldreq	r2, [r3, #0]
 8004564:	685b      	ldreq	r3, [r3, #4]
 8004566:	1852      	addeq	r2, r2, r1
 8004568:	6022      	streq	r2, [r4, #0]
 800456a:	6063      	str	r3, [r4, #4]
 800456c:	6004      	str	r4, [r0, #0]
 800456e:	e7ed      	b.n	800454c <_free_r+0x24>
 8004570:	4613      	mov	r3, r2
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	b10a      	cbz	r2, 800457a <_free_r+0x52>
 8004576:	42a2      	cmp	r2, r4
 8004578:	d9fa      	bls.n	8004570 <_free_r+0x48>
 800457a:	6819      	ldr	r1, [r3, #0]
 800457c:	1858      	adds	r0, r3, r1
 800457e:	42a0      	cmp	r0, r4
 8004580:	d10b      	bne.n	800459a <_free_r+0x72>
 8004582:	6820      	ldr	r0, [r4, #0]
 8004584:	4401      	add	r1, r0
 8004586:	1858      	adds	r0, r3, r1
 8004588:	4282      	cmp	r2, r0
 800458a:	6019      	str	r1, [r3, #0]
 800458c:	d1de      	bne.n	800454c <_free_r+0x24>
 800458e:	6810      	ldr	r0, [r2, #0]
 8004590:	6852      	ldr	r2, [r2, #4]
 8004592:	4401      	add	r1, r0
 8004594:	6019      	str	r1, [r3, #0]
 8004596:	605a      	str	r2, [r3, #4]
 8004598:	e7d8      	b.n	800454c <_free_r+0x24>
 800459a:	d902      	bls.n	80045a2 <_free_r+0x7a>
 800459c:	230c      	movs	r3, #12
 800459e:	602b      	str	r3, [r5, #0]
 80045a0:	e7d4      	b.n	800454c <_free_r+0x24>
 80045a2:	6820      	ldr	r0, [r4, #0]
 80045a4:	1821      	adds	r1, r4, r0
 80045a6:	428a      	cmp	r2, r1
 80045a8:	bf01      	itttt	eq
 80045aa:	6811      	ldreq	r1, [r2, #0]
 80045ac:	6852      	ldreq	r2, [r2, #4]
 80045ae:	1809      	addeq	r1, r1, r0
 80045b0:	6021      	streq	r1, [r4, #0]
 80045b2:	6062      	str	r2, [r4, #4]
 80045b4:	605c      	str	r4, [r3, #4]
 80045b6:	e7c9      	b.n	800454c <_free_r+0x24>
 80045b8:	bd38      	pop	{r3, r4, r5, pc}
 80045ba:	bf00      	nop
 80045bc:	200000b0 	.word	0x200000b0

080045c0 <_malloc_r>:
 80045c0:	b570      	push	{r4, r5, r6, lr}
 80045c2:	1ccd      	adds	r5, r1, #3
 80045c4:	f025 0503 	bic.w	r5, r5, #3
 80045c8:	3508      	adds	r5, #8
 80045ca:	2d0c      	cmp	r5, #12
 80045cc:	bf38      	it	cc
 80045ce:	250c      	movcc	r5, #12
 80045d0:	2d00      	cmp	r5, #0
 80045d2:	4606      	mov	r6, r0
 80045d4:	db01      	blt.n	80045da <_malloc_r+0x1a>
 80045d6:	42a9      	cmp	r1, r5
 80045d8:	d903      	bls.n	80045e2 <_malloc_r+0x22>
 80045da:	230c      	movs	r3, #12
 80045dc:	6033      	str	r3, [r6, #0]
 80045de:	2000      	movs	r0, #0
 80045e0:	bd70      	pop	{r4, r5, r6, pc}
 80045e2:	f000 f89b 	bl	800471c <__malloc_lock>
 80045e6:	4a21      	ldr	r2, [pc, #132]	; (800466c <_malloc_r+0xac>)
 80045e8:	6814      	ldr	r4, [r2, #0]
 80045ea:	4621      	mov	r1, r4
 80045ec:	b991      	cbnz	r1, 8004614 <_malloc_r+0x54>
 80045ee:	4c20      	ldr	r4, [pc, #128]	; (8004670 <_malloc_r+0xb0>)
 80045f0:	6823      	ldr	r3, [r4, #0]
 80045f2:	b91b      	cbnz	r3, 80045fc <_malloc_r+0x3c>
 80045f4:	4630      	mov	r0, r6
 80045f6:	f000 f83d 	bl	8004674 <_sbrk_r>
 80045fa:	6020      	str	r0, [r4, #0]
 80045fc:	4629      	mov	r1, r5
 80045fe:	4630      	mov	r0, r6
 8004600:	f000 f838 	bl	8004674 <_sbrk_r>
 8004604:	1c43      	adds	r3, r0, #1
 8004606:	d124      	bne.n	8004652 <_malloc_r+0x92>
 8004608:	230c      	movs	r3, #12
 800460a:	4630      	mov	r0, r6
 800460c:	6033      	str	r3, [r6, #0]
 800460e:	f000 f886 	bl	800471e <__malloc_unlock>
 8004612:	e7e4      	b.n	80045de <_malloc_r+0x1e>
 8004614:	680b      	ldr	r3, [r1, #0]
 8004616:	1b5b      	subs	r3, r3, r5
 8004618:	d418      	bmi.n	800464c <_malloc_r+0x8c>
 800461a:	2b0b      	cmp	r3, #11
 800461c:	d90f      	bls.n	800463e <_malloc_r+0x7e>
 800461e:	600b      	str	r3, [r1, #0]
 8004620:	18cc      	adds	r4, r1, r3
 8004622:	50cd      	str	r5, [r1, r3]
 8004624:	4630      	mov	r0, r6
 8004626:	f000 f87a 	bl	800471e <__malloc_unlock>
 800462a:	f104 000b 	add.w	r0, r4, #11
 800462e:	1d23      	adds	r3, r4, #4
 8004630:	f020 0007 	bic.w	r0, r0, #7
 8004634:	1ac3      	subs	r3, r0, r3
 8004636:	d0d3      	beq.n	80045e0 <_malloc_r+0x20>
 8004638:	425a      	negs	r2, r3
 800463a:	50e2      	str	r2, [r4, r3]
 800463c:	e7d0      	b.n	80045e0 <_malloc_r+0x20>
 800463e:	684b      	ldr	r3, [r1, #4]
 8004640:	428c      	cmp	r4, r1
 8004642:	bf16      	itet	ne
 8004644:	6063      	strne	r3, [r4, #4]
 8004646:	6013      	streq	r3, [r2, #0]
 8004648:	460c      	movne	r4, r1
 800464a:	e7eb      	b.n	8004624 <_malloc_r+0x64>
 800464c:	460c      	mov	r4, r1
 800464e:	6849      	ldr	r1, [r1, #4]
 8004650:	e7cc      	b.n	80045ec <_malloc_r+0x2c>
 8004652:	1cc4      	adds	r4, r0, #3
 8004654:	f024 0403 	bic.w	r4, r4, #3
 8004658:	42a0      	cmp	r0, r4
 800465a:	d005      	beq.n	8004668 <_malloc_r+0xa8>
 800465c:	1a21      	subs	r1, r4, r0
 800465e:	4630      	mov	r0, r6
 8004660:	f000 f808 	bl	8004674 <_sbrk_r>
 8004664:	3001      	adds	r0, #1
 8004666:	d0cf      	beq.n	8004608 <_malloc_r+0x48>
 8004668:	6025      	str	r5, [r4, #0]
 800466a:	e7db      	b.n	8004624 <_malloc_r+0x64>
 800466c:	200000b0 	.word	0x200000b0
 8004670:	200000b4 	.word	0x200000b4

08004674 <_sbrk_r>:
 8004674:	b538      	push	{r3, r4, r5, lr}
 8004676:	2300      	movs	r3, #0
 8004678:	4c05      	ldr	r4, [pc, #20]	; (8004690 <_sbrk_r+0x1c>)
 800467a:	4605      	mov	r5, r0
 800467c:	4608      	mov	r0, r1
 800467e:	6023      	str	r3, [r4, #0]
 8004680:	f7fc f90c 	bl	800089c <_sbrk>
 8004684:	1c43      	adds	r3, r0, #1
 8004686:	d102      	bne.n	800468e <_sbrk_r+0x1a>
 8004688:	6823      	ldr	r3, [r4, #0]
 800468a:	b103      	cbz	r3, 800468e <_sbrk_r+0x1a>
 800468c:	602b      	str	r3, [r5, #0]
 800468e:	bd38      	pop	{r3, r4, r5, pc}
 8004690:	20000218 	.word	0x20000218

08004694 <_raise_r>:
 8004694:	291f      	cmp	r1, #31
 8004696:	b538      	push	{r3, r4, r5, lr}
 8004698:	4604      	mov	r4, r0
 800469a:	460d      	mov	r5, r1
 800469c:	d904      	bls.n	80046a8 <_raise_r+0x14>
 800469e:	2316      	movs	r3, #22
 80046a0:	6003      	str	r3, [r0, #0]
 80046a2:	f04f 30ff 	mov.w	r0, #4294967295
 80046a6:	bd38      	pop	{r3, r4, r5, pc}
 80046a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80046aa:	b112      	cbz	r2, 80046b2 <_raise_r+0x1e>
 80046ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80046b0:	b94b      	cbnz	r3, 80046c6 <_raise_r+0x32>
 80046b2:	4620      	mov	r0, r4
 80046b4:	f000 f830 	bl	8004718 <_getpid_r>
 80046b8:	462a      	mov	r2, r5
 80046ba:	4601      	mov	r1, r0
 80046bc:	4620      	mov	r0, r4
 80046be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046c2:	f000 b817 	b.w	80046f4 <_kill_r>
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d00a      	beq.n	80046e0 <_raise_r+0x4c>
 80046ca:	1c59      	adds	r1, r3, #1
 80046cc:	d103      	bne.n	80046d6 <_raise_r+0x42>
 80046ce:	2316      	movs	r3, #22
 80046d0:	6003      	str	r3, [r0, #0]
 80046d2:	2001      	movs	r0, #1
 80046d4:	e7e7      	b.n	80046a6 <_raise_r+0x12>
 80046d6:	2400      	movs	r4, #0
 80046d8:	4628      	mov	r0, r5
 80046da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80046de:	4798      	blx	r3
 80046e0:	2000      	movs	r0, #0
 80046e2:	e7e0      	b.n	80046a6 <_raise_r+0x12>

080046e4 <raise>:
 80046e4:	4b02      	ldr	r3, [pc, #8]	; (80046f0 <raise+0xc>)
 80046e6:	4601      	mov	r1, r0
 80046e8:	6818      	ldr	r0, [r3, #0]
 80046ea:	f7ff bfd3 	b.w	8004694 <_raise_r>
 80046ee:	bf00      	nop
 80046f0:	2000000c 	.word	0x2000000c

080046f4 <_kill_r>:
 80046f4:	b538      	push	{r3, r4, r5, lr}
 80046f6:	2300      	movs	r3, #0
 80046f8:	4c06      	ldr	r4, [pc, #24]	; (8004714 <_kill_r+0x20>)
 80046fa:	4605      	mov	r5, r0
 80046fc:	4608      	mov	r0, r1
 80046fe:	4611      	mov	r1, r2
 8004700:	6023      	str	r3, [r4, #0]
 8004702:	f7fc f8b0 	bl	8000866 <_kill>
 8004706:	1c43      	adds	r3, r0, #1
 8004708:	d102      	bne.n	8004710 <_kill_r+0x1c>
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	b103      	cbz	r3, 8004710 <_kill_r+0x1c>
 800470e:	602b      	str	r3, [r5, #0]
 8004710:	bd38      	pop	{r3, r4, r5, pc}
 8004712:	bf00      	nop
 8004714:	20000218 	.word	0x20000218

08004718 <_getpid_r>:
 8004718:	f7fc b89e 	b.w	8000858 <_getpid>

0800471c <__malloc_lock>:
 800471c:	4770      	bx	lr

0800471e <__malloc_unlock>:
 800471e:	4770      	bx	lr

08004720 <_init>:
 8004720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004722:	bf00      	nop
 8004724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004726:	bc08      	pop	{r3}
 8004728:	469e      	mov	lr, r3
 800472a:	4770      	bx	lr

0800472c <_fini>:
 800472c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472e:	bf00      	nop
 8004730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004732:	bc08      	pop	{r3}
 8004734:	469e      	mov	lr, r3
 8004736:	4770      	bx	lr
